function e1(e,t){for(var n=0;n<t.length;n++){const r=t[n];if(typeof r!="string"&&!Array.isArray(r)){for(const o in r)if(o!=="default"&&!(o in e)){const i=Object.getOwnPropertyDescriptor(r,o);i&&Object.defineProperty(e,o,i.get?i:{enumerable:!0,get:()=>r[o]})}}}return Object.freeze(Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}))}(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const o of document.querySelectorAll('link[rel="modulepreload"]'))r(o);new MutationObserver(o=>{for(const i of o)if(i.type==="childList")for(const a of i.addedNodes)a.tagName==="LINK"&&a.rel==="modulepreload"&&r(a)}).observe(document,{childList:!0,subtree:!0});function n(o){const i={};return o.integrity&&(i.integrity=o.integrity),o.referrerPolicy&&(i.referrerPolicy=o.referrerPolicy),o.crossOrigin==="use-credentials"?i.credentials="include":o.crossOrigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function r(o){if(o.ep)return;o.ep=!0;const i=n(o);fetch(o.href,i)}})();function t1(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function Lr(e){if(e.__esModule)return e;var t=e.default;if(typeof t=="function"){var n=function r(){return this instanceof r?Reflect.construct(t,arguments,this.constructor):t.apply(this,arguments)};n.prototype=t.prototype}else n={};return Object.defineProperty(n,"__esModule",{value:!0}),Object.keys(e).forEach(function(r){var o=Object.getOwnPropertyDescriptor(e,r);Object.defineProperty(n,r,o.get?o:{enumerable:!0,get:function(){return e[r]}})}),n}var n1={exports:{}},mc={},r1={exports:{}},Pe={};/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var Ys=Symbol.for("react.element"),XS=Symbol.for("react.portal"),QS=Symbol.for("react.fragment"),YS=Symbol.for("react.strict_mode"),JS=Symbol.for("react.profiler"),ZS=Symbol.for("react.provider"),eC=Symbol.for("react.context"),tC=Symbol.for("react.forward_ref"),nC=Symbol.for("react.suspense"),rC=Symbol.for("react.memo"),oC=Symbol.for("react.lazy"),Tg=Symbol.iterator;function iC(e){return e===null||typeof e!="object"?null:(e=Tg&&e[Tg]||e["@@iterator"],typeof e=="function"?e:null)}var o1={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},i1=Object.assign,a1={};function sa(e,t,n){this.props=e,this.context=t,this.refs=a1,this.updater=n||o1}sa.prototype.isReactComponent={};sa.prototype.setState=function(e,t){if(typeof e!="object"&&typeof e!="function"&&e!=null)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")};sa.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")};function s1(){}s1.prototype=sa.prototype;function mh(e,t,n){this.props=e,this.context=t,this.refs=a1,this.updater=n||o1}var gh=mh.prototype=new s1;gh.constructor=mh;i1(gh,sa.prototype);gh.isPureReactComponent=!0;var $g=Array.isArray,l1=Object.prototype.hasOwnProperty,vh={current:null},u1={key:!0,ref:!0,__self:!0,__source:!0};function c1(e,t,n){var r,o={},i=null,a=null;if(t!=null)for(r in t.ref!==void 0&&(a=t.ref),t.key!==void 0&&(i=""+t.key),t)l1.call(t,r)&&!u1.hasOwnProperty(r)&&(o[r]=t[r]);var s=arguments.length-2;if(s===1)o.children=n;else if(1<s){for(var l=Array(s),u=0;u<s;u++)l[u]=arguments[u+2];o.children=l}if(e&&e.defaultProps)for(r in s=e.defaultProps,s)o[r]===void 0&&(o[r]=s[r]);return{$$typeof:Ys,type:e,key:i,ref:a,props:o,_owner:vh.current}}function aC(e,t){return{$$typeof:Ys,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}function yh(e){return typeof e=="object"&&e!==null&&e.$$typeof===Ys}function sC(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,function(n){return t[n]})}var Og=/\/+/g;function Ld(e,t){return typeof e=="object"&&e!==null&&e.key!=null?sC(""+e.key):t.toString(36)}function ou(e,t,n,r,o){var i=typeof e;(i==="undefined"||i==="boolean")&&(e=null);var a=!1;if(e===null)a=!0;else switch(i){case"string":case"number":a=!0;break;case"object":switch(e.$$typeof){case Ys:case XS:a=!0}}if(a)return a=e,o=o(a),e=r===""?"."+Ld(a,0):r,$g(o)?(n="",e!=null&&(n=e.replace(Og,"$&/")+"/"),ou(o,t,n,"",function(u){return u})):o!=null&&(yh(o)&&(o=aC(o,n+(!o.key||a&&a.key===o.key?"":(""+o.key).replace(Og,"$&/")+"/")+e)),t.push(o)),1;if(a=0,r=r===""?".":r+":",$g(e))for(var s=0;s<e.length;s++){i=e[s];var l=r+Ld(i,s);a+=ou(i,t,n,l,o)}else if(l=iC(e),typeof l=="function")for(e=l.call(e),s=0;!(i=e.next()).done;)i=i.value,l=r+Ld(i,s++),a+=ou(i,t,n,l,o);else if(i==="object")throw t=String(e),Error("Objects are not valid as a React child (found: "+(t==="[object Object]"?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return a}function _l(e,t,n){if(e==null)return e;var r=[],o=0;return ou(e,r,"","",function(i){return t.call(n,i,o++)}),r}function lC(e){if(e._status===-1){var t=e._result;t=t(),t.then(function(n){(e._status===0||e._status===-1)&&(e._status=1,e._result=n)},function(n){(e._status===0||e._status===-1)&&(e._status=2,e._result=n)}),e._status===-1&&(e._status=0,e._result=t)}if(e._status===1)return e._result.default;throw e._result}var Yt={current:null},iu={transition:null},uC={ReactCurrentDispatcher:Yt,ReactCurrentBatchConfig:iu,ReactCurrentOwner:vh};function d1(){throw Error("act(...) is not supported in production builds of React.")}Pe.Children={map:_l,forEach:function(e,t,n){_l(e,function(){t.apply(this,arguments)},n)},count:function(e){var t=0;return _l(e,function(){t++}),t},toArray:function(e){return _l(e,function(t){return t})||[]},only:function(e){if(!yh(e))throw Error("React.Children.only expected to receive a single React element child.");return e}};Pe.Component=sa;Pe.Fragment=QS;Pe.Profiler=JS;Pe.PureComponent=mh;Pe.StrictMode=YS;Pe.Suspense=nC;Pe.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=uC;Pe.act=d1;Pe.cloneElement=function(e,t,n){if(e==null)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var r=i1({},e.props),o=e.key,i=e.ref,a=e._owner;if(t!=null){if(t.ref!==void 0&&(i=t.ref,a=vh.current),t.key!==void 0&&(o=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(l in t)l1.call(t,l)&&!u1.hasOwnProperty(l)&&(r[l]=t[l]===void 0&&s!==void 0?s[l]:t[l])}var l=arguments.length-2;if(l===1)r.children=n;else if(1<l){s=Array(l);for(var u=0;u<l;u++)s[u]=arguments[u+2];r.children=s}return{$$typeof:Ys,type:e.type,key:o,ref:i,props:r,_owner:a}};Pe.createContext=function(e){return e={$$typeof:eC,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null},e.Provider={$$typeof:ZS,_context:e},e.Consumer=e};Pe.createElement=c1;Pe.createFactory=function(e){var t=c1.bind(null,e);return t.type=e,t};Pe.createRef=function(){return{current:null}};Pe.forwardRef=function(e){return{$$typeof:tC,render:e}};Pe.isValidElement=yh;Pe.lazy=function(e){return{$$typeof:oC,_payload:{_status:-1,_result:e},_init:lC}};Pe.memo=function(e,t){return{$$typeof:rC,type:e,compare:t===void 0?null:t}};Pe.startTransition=function(e){var t=iu.transition;iu.transition={};try{e()}finally{iu.transition=t}};Pe.unstable_act=d1;Pe.useCallback=function(e,t){return Yt.current.useCallback(e,t)};Pe.useContext=function(e){return Yt.current.useContext(e)};Pe.useDebugValue=function(){};Pe.useDeferredValue=function(e){return Yt.current.useDeferredValue(e)};Pe.useEffect=function(e,t){return Yt.current.useEffect(e,t)};Pe.useId=function(){return Yt.current.useId()};Pe.useImperativeHandle=function(e,t,n){return Yt.current.useImperativeHandle(e,t,n)};Pe.useInsertionEffect=function(e,t){return Yt.current.useInsertionEffect(e,t)};Pe.useLayoutEffect=function(e,t){return Yt.current.useLayoutEffect(e,t)};Pe.useMemo=function(e,t){return Yt.current.useMemo(e,t)};Pe.useReducer=function(e,t,n){return Yt.current.useReducer(e,t,n)};Pe.useRef=function(e){return Yt.current.useRef(e)};Pe.useState=function(e){return Yt.current.useState(e)};Pe.useSyncExternalStore=function(e,t,n){return Yt.current.useSyncExternalStore(e,t,n)};Pe.useTransition=function(){return Yt.current.useTransition()};Pe.version="18.3.1";r1.exports=Pe;var b=r1.exports;const Gt=t1(b),Pu=e1({__proto__:null,default:Gt},[b]);/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var cC=b,dC=Symbol.for("react.element"),fC=Symbol.for("react.fragment"),pC=Object.prototype.hasOwnProperty,hC=cC.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,mC={key:!0,ref:!0,__self:!0,__source:!0};function f1(e,t,n){var r,o={},i=null,a=null;n!==void 0&&(i=""+n),t.key!==void 0&&(i=""+t.key),t.ref!==void 0&&(a=t.ref);for(r in t)pC.call(t,r)&&!mC.hasOwnProperty(r)&&(o[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps,t)o[r]===void 0&&(o[r]=t[r]);return{$$typeof:dC,type:e,key:i,ref:a,props:o,_owner:hC.current}}mc.Fragment=fC;mc.jsx=f1;mc.jsxs=f1;n1.exports=mc;var S=n1.exports,Ff={},p1={exports:{}},wn={},h1={exports:{}},m1={};/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */(function(e){function t(O,D){var q=O.length;O.push(D);e:for(;0<q;){var ie=q-1>>>1,ee=O[ie];if(0<o(ee,D))O[ie]=D,O[q]=ee,q=ie;else break e}}function n(O){return O.length===0?null:O[0]}function r(O){if(O.length===0)return null;var D=O[0],q=O.pop();if(q!==D){O[0]=q;e:for(var ie=0,ee=O.length,me=ee>>>1;ie<me;){var Z=2*(ie+1)-1,ae=O[Z],K=Z+1,le=O[K];if(0>o(ae,q))K<ee&&0>o(le,ae)?(O[ie]=le,O[K]=q,ie=K):(O[ie]=ae,O[Z]=q,ie=Z);else if(K<ee&&0>o(le,q))O[ie]=le,O[K]=q,ie=K;else break e}}return D}function o(O,D){var q=O.sortIndex-D.sortIndex;return q!==0?q:O.id-D.id}if(typeof performance=="object"&&typeof performance.now=="function"){var i=performance;e.unstable_now=function(){return i.now()}}else{var a=Date,s=a.now();e.unstable_now=function(){return a.now()-s}}var l=[],u=[],c=1,d=null,f=3,g=!1,p=!1,h=!1,C=typeof setTimeout=="function"?setTimeout:null,m=typeof clearTimeout=="function"?clearTimeout:null,y=typeof setImmediate<"u"?setImmediate:null;typeof navigator<"u"&&navigator.scheduling!==void 0&&navigator.scheduling.isInputPending!==void 0&&navigator.scheduling.isInputPending.bind(navigator.scheduling);function v(O){for(var D=n(u);D!==null;){if(D.callback===null)r(u);else if(D.startTime<=O)r(u),D.sortIndex=D.expirationTime,t(l,D);else break;D=n(u)}}function w(O){if(h=!1,v(O),!p)if(n(l)!==null)p=!0,z(R);else{var D=n(u);D!==null&&U(w,D.startTime-O)}}function R(O,D){p=!1,h&&(h=!1,m(k),k=-1),g=!0;var q=f;try{for(v(D),d=n(l);d!==null&&(!(d.expirationTime>D)||O&&!j());){var ie=d.callback;if(typeof ie=="function"){d.callback=null,f=d.priorityLevel;var ee=ie(d.expirationTime<=D);D=e.unstable_now(),typeof ee=="function"?d.callback=ee:d===n(l)&&r(l),v(D)}else r(l);d=n(l)}if(d!==null)var me=!0;else{var Z=n(u);Z!==null&&U(w,Z.startTime-D),me=!1}return me}finally{d=null,f=q,g=!1}}var P=!1,x=null,k=-1,M=5,T=-1;function j(){return!(e.unstable_now()-T<M)}function L(){if(x!==null){var O=e.unstable_now();T=O;var D=!0;try{D=x(!0,O)}finally{D?N():(P=!1,x=null)}}else P=!1}var N;if(typeof y=="function")N=function(){y(L)};else if(typeof MessageChannel<"u"){var F=new MessageChannel,B=F.port2;F.port1.onmessage=L,N=function(){B.postMessage(null)}}else N=function(){C(L,0)};function z(O){x=O,P||(P=!0,N())}function U(O,D){k=C(function(){O(e.unstable_now())},D)}e.unstable_IdlePriority=5,e.unstable_ImmediatePriority=1,e.unstable_LowPriority=4,e.unstable_NormalPriority=3,e.unstable_Profiling=null,e.unstable_UserBlockingPriority=2,e.unstable_cancelCallback=function(O){O.callback=null},e.unstable_continueExecution=function(){p||g||(p=!0,z(R))},e.unstable_forceFrameRate=function(O){0>O||125<O?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):M=0<O?Math.floor(1e3/O):5},e.unstable_getCurrentPriorityLevel=function(){return f},e.unstable_getFirstCallbackNode=function(){return n(l)},e.unstable_next=function(O){switch(f){case 1:case 2:case 3:var D=3;break;default:D=f}var q=f;f=D;try{return O()}finally{f=q}},e.unstable_pauseExecution=function(){},e.unstable_requestPaint=function(){},e.unstable_runWithPriority=function(O,D){switch(O){case 1:case 2:case 3:case 4:case 5:break;default:O=3}var q=f;f=O;try{return D()}finally{f=q}},e.unstable_scheduleCallback=function(O,D,q){var ie=e.unstable_now();switch(typeof q=="object"&&q!==null?(q=q.delay,q=typeof q=="number"&&0<q?ie+q:ie):q=ie,O){case 1:var ee=-1;break;case 2:ee=250;break;case 5:ee=1073741823;break;case 4:ee=1e4;break;default:ee=5e3}return ee=q+ee,O={id:c++,callback:D,priorityLevel:O,startTime:q,expirationTime:ee,sortIndex:-1},q>ie?(O.sortIndex=q,t(u,O),n(l)===null&&O===n(u)&&(h?(m(k),k=-1):h=!0,U(w,q-ie))):(O.sortIndex=ee,t(l,O),p||g||(p=!0,z(R))),O},e.unstable_shouldYield=j,e.unstable_wrapCallback=function(O){var D=f;return function(){var q=f;f=D;try{return O.apply(this,arguments)}finally{f=q}}}})(m1);h1.exports=m1;var gC=h1.exports;/**
 * @license React
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var vC=b,yn=gC;function W(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var g1=new Set,ys={};function ni(e,t){Hi(e,t),Hi(e+"Capture",t)}function Hi(e,t){for(ys[e]=t,e=0;e<t.length;e++)g1.add(t[e])}var $r=!(typeof window>"u"||typeof window.document>"u"||typeof window.document.createElement>"u"),Df=Object.prototype.hasOwnProperty,yC=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,Mg={},_g={};function xC(e){return Df.call(_g,e)?!0:Df.call(Mg,e)?!1:yC.test(e)?_g[e]=!0:(Mg[e]=!0,!1)}function bC(e,t,n,r){if(n!==null&&n.type===0)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return r?!1:n!==null?!n.acceptsBooleans:(e=e.toLowerCase().slice(0,5),e!=="data-"&&e!=="aria-");default:return!1}}function wC(e,t,n,r){if(t===null||typeof t>"u"||bC(e,t,n,r))return!0;if(r)return!1;if(n!==null)switch(n.type){case 3:return!t;case 4:return t===!1;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}function Jt(e,t,n,r,o,i,a){this.acceptsBooleans=t===2||t===3||t===4,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i,this.removeEmptyString=a}var Dt={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){Dt[e]=new Jt(e,0,!1,e,null,!1,!1)});[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];Dt[t]=new Jt(t,1,!1,e[1],null,!1,!1)});["contentEditable","draggable","spellCheck","value"].forEach(function(e){Dt[e]=new Jt(e,2,!1,e.toLowerCase(),null,!1,!1)});["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){Dt[e]=new Jt(e,2,!1,e,null,!1,!1)});"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){Dt[e]=new Jt(e,3,!1,e.toLowerCase(),null,!1,!1)});["checked","multiple","muted","selected"].forEach(function(e){Dt[e]=new Jt(e,3,!0,e,null,!1,!1)});["capture","download"].forEach(function(e){Dt[e]=new Jt(e,4,!1,e,null,!1,!1)});["cols","rows","size","span"].forEach(function(e){Dt[e]=new Jt(e,6,!1,e,null,!1,!1)});["rowSpan","start"].forEach(function(e){Dt[e]=new Jt(e,5,!1,e.toLowerCase(),null,!1,!1)});var xh=/[\-:]([a-z])/g;function bh(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(xh,bh);Dt[t]=new Jt(t,1,!1,e,null,!1,!1)});"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(xh,bh);Dt[t]=new Jt(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)});["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(xh,bh);Dt[t]=new Jt(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)});["tabIndex","crossOrigin"].forEach(function(e){Dt[e]=new Jt(e,1,!1,e.toLowerCase(),null,!1,!1)});Dt.xlinkHref=new Jt("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1);["src","href","action","formAction"].forEach(function(e){Dt[e]=new Jt(e,1,!1,e.toLowerCase(),null,!0,!0)});function wh(e,t,n,r){var o=Dt.hasOwnProperty(t)?Dt[t]:null;(o!==null?o.type!==0:r||!(2<t.length)||t[0]!=="o"&&t[0]!=="O"||t[1]!=="n"&&t[1]!=="N")&&(wC(t,n,o,r)&&(n=null),r||o===null?xC(t)&&(n===null?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=n===null?o.type===3?!1:"":n:(t=o.attributeName,r=o.attributeNamespace,n===null?e.removeAttribute(t):(o=o.type,n=o===3||o===4&&n===!0?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}var Ir=vC.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,jl=Symbol.for("react.element"),gi=Symbol.for("react.portal"),vi=Symbol.for("react.fragment"),Sh=Symbol.for("react.strict_mode"),zf=Symbol.for("react.profiler"),v1=Symbol.for("react.provider"),y1=Symbol.for("react.context"),Ch=Symbol.for("react.forward_ref"),Bf=Symbol.for("react.suspense"),Uf=Symbol.for("react.suspense_list"),Eh=Symbol.for("react.memo"),qr=Symbol.for("react.lazy"),x1=Symbol.for("react.offscreen"),jg=Symbol.iterator;function Ra(e){return e===null||typeof e!="object"?null:(e=jg&&e[jg]||e["@@iterator"],typeof e=="function"?e:null)}var ot=Object.assign,Id;function qa(e){if(Id===void 0)try{throw Error()}catch(n){var t=n.stack.trim().match(/\n( *(at )?)/);Id=t&&t[1]||""}return`
`+Id+e}var Fd=!1;function Dd(e,t){if(!e||Fd)return"";Fd=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),typeof Reflect=="object"&&Reflect.construct){try{Reflect.construct(t,[])}catch(u){var r=u}Reflect.construct(e,[],t)}else{try{t.call()}catch(u){r=u}e.call(t.prototype)}else{try{throw Error()}catch(u){r=u}e()}}catch(u){if(u&&r&&typeof u.stack=="string"){for(var o=u.stack.split(`
`),i=r.stack.split(`
`),a=o.length-1,s=i.length-1;1<=a&&0<=s&&o[a]!==i[s];)s--;for(;1<=a&&0<=s;a--,s--)if(o[a]!==i[s]){if(a!==1||s!==1)do if(a--,s--,0>s||o[a]!==i[s]){var l=`
`+o[a].replace(" at new "," at ");return e.displayName&&l.includes("<anonymous>")&&(l=l.replace("<anonymous>",e.displayName)),l}while(1<=a&&0<=s);break}}}finally{Fd=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?qa(e):""}function SC(e){switch(e.tag){case 5:return qa(e.type);case 16:return qa("Lazy");case 13:return qa("Suspense");case 19:return qa("SuspenseList");case 0:case 2:case 15:return e=Dd(e.type,!1),e;case 11:return e=Dd(e.type.render,!1),e;case 1:return e=Dd(e.type,!0),e;default:return""}}function Wf(e){if(e==null)return null;if(typeof e=="function")return e.displayName||e.name||null;if(typeof e=="string")return e;switch(e){case vi:return"Fragment";case gi:return"Portal";case zf:return"Profiler";case Sh:return"StrictMode";case Bf:return"Suspense";case Uf:return"SuspenseList"}if(typeof e=="object")switch(e.$$typeof){case y1:return(e.displayName||"Context")+".Consumer";case v1:return(e._context.displayName||"Context")+".Provider";case Ch:var t=e.render;return e=e.displayName,e||(e=t.displayName||t.name||"",e=e!==""?"ForwardRef("+e+")":"ForwardRef"),e;case Eh:return t=e.displayName||null,t!==null?t:Wf(e.type)||"Memo";case qr:t=e._payload,e=e._init;try{return Wf(e(t))}catch{}}return null}function CC(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=t.render,e=e.displayName||e.name||"",t.displayName||(e!==""?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return Wf(t);case 8:return t===Sh?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if(typeof t=="function")return t.displayName||t.name||null;if(typeof t=="string")return t}return null}function fo(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":return e;case"object":return e;default:return""}}function b1(e){var t=e.type;return(e=e.nodeName)&&e.toLowerCase()==="input"&&(t==="checkbox"||t==="radio")}function EC(e){var t=b1(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&typeof n<"u"&&typeof n.get=="function"&&typeof n.set=="function"){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(a){r=""+a,i.call(this,a)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(a){r=""+a},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}function Nl(e){e._valueTracker||(e._valueTracker=EC(e))}function w1(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=b1(e)?e.checked?"true":"false":e.value),e=r,e!==n?(t.setValue(e),!0):!1}function ku(e){if(e=e||(typeof document<"u"?document:void 0),typeof e>"u")return null;try{return e.activeElement||e.body}catch{return e.body}}function Hf(e,t){var n=t.checked;return ot({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:n??e._wrapperState.initialChecked})}function Ng(e,t){var n=t.defaultValue==null?"":t.defaultValue,r=t.checked!=null?t.checked:t.defaultChecked;n=fo(t.value!=null?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:t.type==="checkbox"||t.type==="radio"?t.checked!=null:t.value!=null}}function S1(e,t){t=t.checked,t!=null&&wh(e,"checked",t,!1)}function Vf(e,t){S1(e,t);var n=fo(t.value),r=t.type;if(n!=null)r==="number"?(n===0&&e.value===""||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if(r==="submit"||r==="reset"){e.removeAttribute("value");return}t.hasOwnProperty("value")?Kf(e,t.type,n):t.hasOwnProperty("defaultValue")&&Kf(e,t.type,fo(t.defaultValue)),t.checked==null&&t.defaultChecked!=null&&(e.defaultChecked=!!t.defaultChecked)}function Ag(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!(r!=="submit"&&r!=="reset"||t.value!==void 0&&t.value!==null))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}n=e.name,n!==""&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,n!==""&&(e.name=n)}function Kf(e,t,n){(t!=="number"||ku(e.ownerDocument)!==e)&&(n==null?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var Ga=Array.isArray;function Mi(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+fo(n),t=null,o=0;o<e.length;o++){if(e[o].value===n){e[o].selected=!0,r&&(e[o].defaultSelected=!0);return}t!==null||e[o].disabled||(t=e[o])}t!==null&&(t.selected=!0)}}function qf(e,t){if(t.dangerouslySetInnerHTML!=null)throw Error(W(91));return ot({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Lg(e,t){var n=t.value;if(n==null){if(n=t.children,t=t.defaultValue,n!=null){if(t!=null)throw Error(W(92));if(Ga(n)){if(1<n.length)throw Error(W(93));n=n[0]}t=n}t==null&&(t=""),n=t}e._wrapperState={initialValue:fo(n)}}function C1(e,t){var n=fo(t.value),r=fo(t.defaultValue);n!=null&&(n=""+n,n!==e.value&&(e.value=n),t.defaultValue==null&&e.defaultValue!==n&&(e.defaultValue=n)),r!=null&&(e.defaultValue=""+r)}function Ig(e){var t=e.textContent;t===e._wrapperState.initialValue&&t!==""&&t!==null&&(e.value=t)}function E1(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Gf(e,t){return e==null||e==="http://www.w3.org/1999/xhtml"?E1(t):e==="http://www.w3.org/2000/svg"&&t==="foreignObject"?"http://www.w3.org/1999/xhtml":e}var Al,R1=function(e){return typeof MSApp<"u"&&MSApp.execUnsafeLocalFunction?function(t,n,r,o){MSApp.execUnsafeLocalFunction(function(){return e(t,n,r,o)})}:e}(function(e,t){if(e.namespaceURI!=="http://www.w3.org/2000/svg"||"innerHTML"in e)e.innerHTML=t;else{for(Al=Al||document.createElement("div"),Al.innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=Al.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}});function xs(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&n.nodeType===3){n.nodeValue=t;return}}e.textContent=t}var es={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},RC=["Webkit","ms","Moz","O"];Object.keys(es).forEach(function(e){RC.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),es[t]=es[e]})});function P1(e,t,n){return t==null||typeof t=="boolean"||t===""?"":n||typeof t!="number"||t===0||es.hasOwnProperty(e)&&es[e]?(""+t).trim():t+"px"}function k1(e,t){e=e.style;for(var n in t)if(t.hasOwnProperty(n)){var r=n.indexOf("--")===0,o=P1(n,t[n],r);n==="float"&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}var PC=ot({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Xf(e,t){if(t){if(PC[e]&&(t.children!=null||t.dangerouslySetInnerHTML!=null))throw Error(W(137,e));if(t.dangerouslySetInnerHTML!=null){if(t.children!=null)throw Error(W(60));if(typeof t.dangerouslySetInnerHTML!="object"||!("__html"in t.dangerouslySetInnerHTML))throw Error(W(61))}if(t.style!=null&&typeof t.style!="object")throw Error(W(62))}}function Qf(e,t){if(e.indexOf("-")===-1)return typeof t.is=="string";switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Yf=null;function Rh(e){return e=e.target||e.srcElement||window,e.correspondingUseElement&&(e=e.correspondingUseElement),e.nodeType===3?e.parentNode:e}var Jf=null,_i=null,ji=null;function Fg(e){if(e=el(e)){if(typeof Jf!="function")throw Error(W(280));var t=e.stateNode;t&&(t=bc(t),Jf(e.stateNode,e.type,t))}}function T1(e){_i?ji?ji.push(e):ji=[e]:_i=e}function $1(){if(_i){var e=_i,t=ji;if(ji=_i=null,Fg(e),t)for(e=0;e<t.length;e++)Fg(t[e])}}function O1(e,t){return e(t)}function M1(){}var zd=!1;function _1(e,t,n){if(zd)return e(t,n);zd=!0;try{return O1(e,t,n)}finally{zd=!1,(_i!==null||ji!==null)&&(M1(),$1())}}function bs(e,t){var n=e.stateNode;if(n===null)return null;var r=bc(n);if(r===null)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(e=e.type,r=!(e==="button"||e==="input"||e==="select"||e==="textarea")),e=!r;break e;default:e=!1}if(e)return null;if(n&&typeof n!="function")throw Error(W(231,t,typeof n));return n}var Zf=!1;if($r)try{var Pa={};Object.defineProperty(Pa,"passive",{get:function(){Zf=!0}}),window.addEventListener("test",Pa,Pa),window.removeEventListener("test",Pa,Pa)}catch{Zf=!1}function kC(e,t,n,r,o,i,a,s,l){var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(c){this.onError(c)}}var ts=!1,Tu=null,$u=!1,ep=null,TC={onError:function(e){ts=!0,Tu=e}};function $C(e,t,n,r,o,i,a,s,l){ts=!1,Tu=null,kC.apply(TC,arguments)}function OC(e,t,n,r,o,i,a,s,l){if($C.apply(this,arguments),ts){if(ts){var u=Tu;ts=!1,Tu=null}else throw Error(W(198));$u||($u=!0,ep=u)}}function ri(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do t=e,t.flags&4098&&(n=t.return),e=t.return;while(e)}return t.tag===3?n:null}function j1(e){if(e.tag===13){var t=e.memoizedState;if(t===null&&(e=e.alternate,e!==null&&(t=e.memoizedState)),t!==null)return t.dehydrated}return null}function Dg(e){if(ri(e)!==e)throw Error(W(188))}function MC(e){var t=e.alternate;if(!t){if(t=ri(e),t===null)throw Error(W(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(o===null)break;var i=o.alternate;if(i===null){if(r=o.return,r!==null){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return Dg(o),e;if(i===r)return Dg(o),t;i=i.sibling}throw Error(W(188))}if(n.return!==r.return)n=o,r=i;else{for(var a=!1,s=o.child;s;){if(s===n){a=!0,n=o,r=i;break}if(s===r){a=!0,r=o,n=i;break}s=s.sibling}if(!a){for(s=i.child;s;){if(s===n){a=!0,n=i,r=o;break}if(s===r){a=!0,r=i,n=o;break}s=s.sibling}if(!a)throw Error(W(189))}}if(n.alternate!==r)throw Error(W(190))}if(n.tag!==3)throw Error(W(188));return n.stateNode.current===n?e:t}function N1(e){return e=MC(e),e!==null?A1(e):null}function A1(e){if(e.tag===5||e.tag===6)return e;for(e=e.child;e!==null;){var t=A1(e);if(t!==null)return t;e=e.sibling}return null}var L1=yn.unstable_scheduleCallback,zg=yn.unstable_cancelCallback,_C=yn.unstable_shouldYield,jC=yn.unstable_requestPaint,ht=yn.unstable_now,NC=yn.unstable_getCurrentPriorityLevel,Ph=yn.unstable_ImmediatePriority,I1=yn.unstable_UserBlockingPriority,Ou=yn.unstable_NormalPriority,AC=yn.unstable_LowPriority,F1=yn.unstable_IdlePriority,gc=null,mr=null;function LC(e){if(mr&&typeof mr.onCommitFiberRoot=="function")try{mr.onCommitFiberRoot(gc,e,void 0,(e.current.flags&128)===128)}catch{}}var tr=Math.clz32?Math.clz32:DC,IC=Math.log,FC=Math.LN2;function DC(e){return e>>>=0,e===0?32:31-(IC(e)/FC|0)|0}var Ll=64,Il=4194304;function Xa(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return e&4194240;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return e&130023424;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function Mu(e,t){var n=e.pendingLanes;if(n===0)return 0;var r=0,o=e.suspendedLanes,i=e.pingedLanes,a=n&268435455;if(a!==0){var s=a&~o;s!==0?r=Xa(s):(i&=a,i!==0&&(r=Xa(i)))}else a=n&~o,a!==0?r=Xa(a):i!==0&&(r=Xa(i));if(r===0)return 0;if(t!==0&&t!==r&&!(t&o)&&(o=r&-r,i=t&-t,o>=i||o===16&&(i&4194240)!==0))return t;if(r&4&&(r|=n&16),t=e.entangledLanes,t!==0)for(e=e.entanglements,t&=r;0<t;)n=31-tr(t),o=1<<n,r|=e[n],t&=~o;return r}function zC(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return-1;case 134217728:case 268435456:case 536870912:case 1073741824:return-1;default:return-1}}function BC(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,o=e.expirationTimes,i=e.pendingLanes;0<i;){var a=31-tr(i),s=1<<a,l=o[a];l===-1?(!(s&n)||s&r)&&(o[a]=zC(s,t)):l<=t&&(e.expiredLanes|=s),i&=~s}}function tp(e){return e=e.pendingLanes&-1073741825,e!==0?e:e&1073741824?1073741824:0}function D1(){var e=Ll;return Ll<<=1,!(Ll&4194240)&&(Ll=64),e}function Bd(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Js(e,t,n){e.pendingLanes|=t,t!==536870912&&(e.suspendedLanes=0,e.pingedLanes=0),e=e.eventTimes,t=31-tr(t),e[t]=n}function UC(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var o=31-tr(n),i=1<<o;t[o]=0,r[o]=-1,e[o]=-1,n&=~i}}function kh(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-tr(n),o=1<<r;o&t|e[r]&t&&(e[r]|=t),n&=~o}}var Le=0;function z1(e){return e&=-e,1<e?4<e?e&268435455?16:536870912:4:1}var B1,Th,U1,W1,H1,np=!1,Fl=[],no=null,ro=null,oo=null,ws=new Map,Ss=new Map,Qr=[],WC="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Bg(e,t){switch(e){case"focusin":case"focusout":no=null;break;case"dragenter":case"dragleave":ro=null;break;case"mouseover":case"mouseout":oo=null;break;case"pointerover":case"pointerout":ws.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Ss.delete(t.pointerId)}}function ka(e,t,n,r,o,i){return e===null||e.nativeEvent!==i?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:i,targetContainers:[o]},t!==null&&(t=el(t),t!==null&&Th(t)),e):(e.eventSystemFlags|=r,t=e.targetContainers,o!==null&&t.indexOf(o)===-1&&t.push(o),e)}function HC(e,t,n,r,o){switch(t){case"focusin":return no=ka(no,e,t,n,r,o),!0;case"dragenter":return ro=ka(ro,e,t,n,r,o),!0;case"mouseover":return oo=ka(oo,e,t,n,r,o),!0;case"pointerover":var i=o.pointerId;return ws.set(i,ka(ws.get(i)||null,e,t,n,r,o)),!0;case"gotpointercapture":return i=o.pointerId,Ss.set(i,ka(Ss.get(i)||null,e,t,n,r,o)),!0}return!1}function V1(e){var t=Oo(e.target);if(t!==null){var n=ri(t);if(n!==null){if(t=n.tag,t===13){if(t=j1(n),t!==null){e.blockedOn=t,H1(e.priority,function(){U1(n)});return}}else if(t===3&&n.stateNode.current.memoizedState.isDehydrated){e.blockedOn=n.tag===3?n.stateNode.containerInfo:null;return}}}e.blockedOn=null}function au(e){if(e.blockedOn!==null)return!1;for(var t=e.targetContainers;0<t.length;){var n=rp(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(n===null){n=e.nativeEvent;var r=new n.constructor(n.type,n);Yf=r,n.target.dispatchEvent(r),Yf=null}else return t=el(n),t!==null&&Th(t),e.blockedOn=n,!1;t.shift()}return!0}function Ug(e,t,n){au(e)&&n.delete(t)}function VC(){np=!1,no!==null&&au(no)&&(no=null),ro!==null&&au(ro)&&(ro=null),oo!==null&&au(oo)&&(oo=null),ws.forEach(Ug),Ss.forEach(Ug)}function Ta(e,t){e.blockedOn===t&&(e.blockedOn=null,np||(np=!0,yn.unstable_scheduleCallback(yn.unstable_NormalPriority,VC)))}function Cs(e){function t(o){return Ta(o,e)}if(0<Fl.length){Ta(Fl[0],e);for(var n=1;n<Fl.length;n++){var r=Fl[n];r.blockedOn===e&&(r.blockedOn=null)}}for(no!==null&&Ta(no,e),ro!==null&&Ta(ro,e),oo!==null&&Ta(oo,e),ws.forEach(t),Ss.forEach(t),n=0;n<Qr.length;n++)r=Qr[n],r.blockedOn===e&&(r.blockedOn=null);for(;0<Qr.length&&(n=Qr[0],n.blockedOn===null);)V1(n),n.blockedOn===null&&Qr.shift()}var Ni=Ir.ReactCurrentBatchConfig,_u=!0;function KC(e,t,n,r){var o=Le,i=Ni.transition;Ni.transition=null;try{Le=1,$h(e,t,n,r)}finally{Le=o,Ni.transition=i}}function qC(e,t,n,r){var o=Le,i=Ni.transition;Ni.transition=null;try{Le=4,$h(e,t,n,r)}finally{Le=o,Ni.transition=i}}function $h(e,t,n,r){if(_u){var o=rp(e,t,n,r);if(o===null)Yd(e,t,r,ju,n),Bg(e,r);else if(HC(o,e,t,n,r))r.stopPropagation();else if(Bg(e,r),t&4&&-1<WC.indexOf(e)){for(;o!==null;){var i=el(o);if(i!==null&&B1(i),i=rp(e,t,n,r),i===null&&Yd(e,t,r,ju,n),i===o)break;o=i}o!==null&&r.stopPropagation()}else Yd(e,t,r,null,n)}}var ju=null;function rp(e,t,n,r){if(ju=null,e=Rh(r),e=Oo(e),e!==null)if(t=ri(e),t===null)e=null;else if(n=t.tag,n===13){if(e=j1(t),e!==null)return e;e=null}else if(n===3){if(t.stateNode.current.memoizedState.isDehydrated)return t.tag===3?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return ju=e,null}function K1(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(NC()){case Ph:return 1;case I1:return 4;case Ou:case AC:return 16;case F1:return 536870912;default:return 16}default:return 16}}var Zr=null,Oh=null,su=null;function q1(){if(su)return su;var e,t=Oh,n=t.length,r,o="value"in Zr?Zr.value:Zr.textContent,i=o.length;for(e=0;e<n&&t[e]===o[e];e++);var a=n-e;for(r=1;r<=a&&t[n-r]===o[i-r];r++);return su=o.slice(e,1<r?1-r:void 0)}function lu(e){var t=e.keyCode;return"charCode"in e?(e=e.charCode,e===0&&t===13&&(e=13)):e=t,e===10&&(e=13),32<=e||e===13?e:0}function Dl(){return!0}function Wg(){return!1}function Sn(e){function t(n,r,o,i,a){this._reactName=n,this._targetInst=o,this.type=r,this.nativeEvent=i,this.target=a,this.currentTarget=null;for(var s in e)e.hasOwnProperty(s)&&(n=e[s],this[s]=n?n(i):i[s]);return this.isDefaultPrevented=(i.defaultPrevented!=null?i.defaultPrevented:i.returnValue===!1)?Dl:Wg,this.isPropagationStopped=Wg,this}return ot(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var n=this.nativeEvent;n&&(n.preventDefault?n.preventDefault():typeof n.returnValue!="unknown"&&(n.returnValue=!1),this.isDefaultPrevented=Dl)},stopPropagation:function(){var n=this.nativeEvent;n&&(n.stopPropagation?n.stopPropagation():typeof n.cancelBubble!="unknown"&&(n.cancelBubble=!0),this.isPropagationStopped=Dl)},persist:function(){},isPersistent:Dl}),t}var la={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},Mh=Sn(la),Zs=ot({},la,{view:0,detail:0}),GC=Sn(Zs),Ud,Wd,$a,vc=ot({},Zs,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:_h,button:0,buttons:0,relatedTarget:function(e){return e.relatedTarget===void 0?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==$a&&($a&&e.type==="mousemove"?(Ud=e.screenX-$a.screenX,Wd=e.screenY-$a.screenY):Wd=Ud=0,$a=e),Ud)},movementY:function(e){return"movementY"in e?e.movementY:Wd}}),Hg=Sn(vc),XC=ot({},vc,{dataTransfer:0}),QC=Sn(XC),YC=ot({},Zs,{relatedTarget:0}),Hd=Sn(YC),JC=ot({},la,{animationName:0,elapsedTime:0,pseudoElement:0}),ZC=Sn(JC),eE=ot({},la,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),tE=Sn(eE),nE=ot({},la,{data:0}),Vg=Sn(nE),rE={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},oE={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},iE={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function aE(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):(e=iE[e])?!!t[e]:!1}function _h(){return aE}var sE=ot({},Zs,{key:function(e){if(e.key){var t=rE[e.key]||e.key;if(t!=="Unidentified")return t}return e.type==="keypress"?(e=lu(e),e===13?"Enter":String.fromCharCode(e)):e.type==="keydown"||e.type==="keyup"?oE[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:_h,charCode:function(e){return e.type==="keypress"?lu(e):0},keyCode:function(e){return e.type==="keydown"||e.type==="keyup"?e.keyCode:0},which:function(e){return e.type==="keypress"?lu(e):e.type==="keydown"||e.type==="keyup"?e.keyCode:0}}),lE=Sn(sE),uE=ot({},vc,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0}),Kg=Sn(uE),cE=ot({},Zs,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:_h}),dE=Sn(cE),fE=ot({},la,{propertyName:0,elapsedTime:0,pseudoElement:0}),pE=Sn(fE),hE=ot({},vc,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),mE=Sn(hE),gE=[9,13,27,32],jh=$r&&"CompositionEvent"in window,ns=null;$r&&"documentMode"in document&&(ns=document.documentMode);var vE=$r&&"TextEvent"in window&&!ns,G1=$r&&(!jh||ns&&8<ns&&11>=ns),qg=" ",Gg=!1;function X1(e,t){switch(e){case"keyup":return gE.indexOf(t.keyCode)!==-1;case"keydown":return t.keyCode!==229;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Q1(e){return e=e.detail,typeof e=="object"&&"data"in e?e.data:null}var yi=!1;function yE(e,t){switch(e){case"compositionend":return Q1(t);case"keypress":return t.which!==32?null:(Gg=!0,qg);case"textInput":return e=t.data,e===qg&&Gg?null:e;default:return null}}function xE(e,t){if(yi)return e==="compositionend"||!jh&&X1(e,t)?(e=q1(),su=Oh=Zr=null,yi=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return G1&&t.locale!=="ko"?null:t.data;default:return null}}var bE={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Xg(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t==="input"?!!bE[e.type]:t==="textarea"}function Y1(e,t,n,r){T1(r),t=Nu(t,"onChange"),0<t.length&&(n=new Mh("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var rs=null,Es=null;function wE(e){lx(e,0)}function yc(e){var t=wi(e);if(w1(t))return e}function SE(e,t){if(e==="change")return t}var J1=!1;if($r){var Vd;if($r){var Kd="oninput"in document;if(!Kd){var Qg=document.createElement("div");Qg.setAttribute("oninput","return;"),Kd=typeof Qg.oninput=="function"}Vd=Kd}else Vd=!1;J1=Vd&&(!document.documentMode||9<document.documentMode)}function Yg(){rs&&(rs.detachEvent("onpropertychange",Z1),Es=rs=null)}function Z1(e){if(e.propertyName==="value"&&yc(Es)){var t=[];Y1(t,Es,e,Rh(e)),_1(wE,t)}}function CE(e,t,n){e==="focusin"?(Yg(),rs=t,Es=n,rs.attachEvent("onpropertychange",Z1)):e==="focusout"&&Yg()}function EE(e){if(e==="selectionchange"||e==="keyup"||e==="keydown")return yc(Es)}function RE(e,t){if(e==="click")return yc(t)}function PE(e,t){if(e==="input"||e==="change")return yc(t)}function kE(e,t){return e===t&&(e!==0||1/e===1/t)||e!==e&&t!==t}var or=typeof Object.is=="function"?Object.is:kE;function Rs(e,t){if(or(e,t))return!0;if(typeof e!="object"||e===null||typeof t!="object"||t===null)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var o=n[r];if(!Df.call(t,o)||!or(e[o],t[o]))return!1}return!0}function Jg(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Zg(e,t){var n=Jg(e);e=0;for(var r;n;){if(n.nodeType===3){if(r=e+n.textContent.length,e<=t&&r>=t)return{node:n,offset:t-e};e=r}e:{for(;n;){if(n.nextSibling){n=n.nextSibling;break e}n=n.parentNode}n=void 0}n=Jg(n)}}function ex(e,t){return e&&t?e===t?!0:e&&e.nodeType===3?!1:t&&t.nodeType===3?ex(e,t.parentNode):"contains"in e?e.contains(t):e.compareDocumentPosition?!!(e.compareDocumentPosition(t)&16):!1:!1}function tx(){for(var e=window,t=ku();t instanceof e.HTMLIFrameElement;){try{var n=typeof t.contentWindow.location.href=="string"}catch{n=!1}if(n)e=t.contentWindow;else break;t=ku(e.document)}return t}function Nh(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&(t==="input"&&(e.type==="text"||e.type==="search"||e.type==="tel"||e.type==="url"||e.type==="password")||t==="textarea"||e.contentEditable==="true")}function TE(e){var t=tx(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&ex(n.ownerDocument.documentElement,n)){if(r!==null&&Nh(n)){if(t=r.start,e=r.end,e===void 0&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if(e=(t=n.ownerDocument||document)&&t.defaultView||window,e.getSelection){e=e.getSelection();var o=n.textContent.length,i=Math.min(r.start,o);r=r.end===void 0?i:Math.min(r.end,o),!e.extend&&i>r&&(o=r,r=i,i=o),o=Zg(n,i);var a=Zg(n,r);o&&a&&(e.rangeCount!==1||e.anchorNode!==o.node||e.anchorOffset!==o.offset||e.focusNode!==a.node||e.focusOffset!==a.offset)&&(t=t.createRange(),t.setStart(o.node,o.offset),e.removeAllRanges(),i>r?(e.addRange(t),e.extend(a.node,a.offset)):(t.setEnd(a.node,a.offset),e.addRange(t)))}}for(t=[],e=n;e=e.parentNode;)e.nodeType===1&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for(typeof n.focus=="function"&&n.focus(),n=0;n<t.length;n++)e=t[n],e.element.scrollLeft=e.left,e.element.scrollTop=e.top}}var $E=$r&&"documentMode"in document&&11>=document.documentMode,xi=null,op=null,os=null,ip=!1;function ev(e,t,n){var r=n.window===n?n.document:n.nodeType===9?n:n.ownerDocument;ip||xi==null||xi!==ku(r)||(r=xi,"selectionStart"in r&&Nh(r)?r={start:r.selectionStart,end:r.selectionEnd}:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection(),r={anchorNode:r.anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset}),os&&Rs(os,r)||(os=r,r=Nu(op,"onSelect"),0<r.length&&(t=new Mh("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=xi)))}function zl(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var bi={animationend:zl("Animation","AnimationEnd"),animationiteration:zl("Animation","AnimationIteration"),animationstart:zl("Animation","AnimationStart"),transitionend:zl("Transition","TransitionEnd")},qd={},nx={};$r&&(nx=document.createElement("div").style,"AnimationEvent"in window||(delete bi.animationend.animation,delete bi.animationiteration.animation,delete bi.animationstart.animation),"TransitionEvent"in window||delete bi.transitionend.transition);function xc(e){if(qd[e])return qd[e];if(!bi[e])return e;var t=bi[e],n;for(n in t)if(t.hasOwnProperty(n)&&n in nx)return qd[e]=t[n];return e}var rx=xc("animationend"),ox=xc("animationiteration"),ix=xc("animationstart"),ax=xc("transitionend"),sx=new Map,tv="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function go(e,t){sx.set(e,t),ni(t,[e])}for(var Gd=0;Gd<tv.length;Gd++){var Xd=tv[Gd],OE=Xd.toLowerCase(),ME=Xd[0].toUpperCase()+Xd.slice(1);go(OE,"on"+ME)}go(rx,"onAnimationEnd");go(ox,"onAnimationIteration");go(ix,"onAnimationStart");go("dblclick","onDoubleClick");go("focusin","onFocus");go("focusout","onBlur");go(ax,"onTransitionEnd");Hi("onMouseEnter",["mouseout","mouseover"]);Hi("onMouseLeave",["mouseout","mouseover"]);Hi("onPointerEnter",["pointerout","pointerover"]);Hi("onPointerLeave",["pointerout","pointerover"]);ni("onChange","change click focusin focusout input keydown keyup selectionchange".split(" "));ni("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));ni("onBeforeInput",["compositionend","keypress","textInput","paste"]);ni("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" "));ni("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" "));ni("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Qa="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),_E=new Set("cancel close invalid load scroll toggle".split(" ").concat(Qa));function nv(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,OC(r,t,void 0,e),e.currentTarget=null}function lx(e,t){t=(t&4)!==0;for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var i=void 0;if(t)for(var a=r.length-1;0<=a;a--){var s=r[a],l=s.instance,u=s.currentTarget;if(s=s.listener,l!==i&&o.isPropagationStopped())break e;nv(o,s,u),i=l}else for(a=0;a<r.length;a++){if(s=r[a],l=s.instance,u=s.currentTarget,s=s.listener,l!==i&&o.isPropagationStopped())break e;nv(o,s,u),i=l}}}if($u)throw e=ep,$u=!1,ep=null,e}function Ke(e,t){var n=t[cp];n===void 0&&(n=t[cp]=new Set);var r=e+"__bubble";n.has(r)||(ux(t,e,2,!1),n.add(r))}function Qd(e,t,n){var r=0;t&&(r|=4),ux(n,e,r,t)}var Bl="_reactListening"+Math.random().toString(36).slice(2);function Ps(e){if(!e[Bl]){e[Bl]=!0,g1.forEach(function(n){n!=="selectionchange"&&(_E.has(n)||Qd(n,!1,e),Qd(n,!0,e))});var t=e.nodeType===9?e:e.ownerDocument;t===null||t[Bl]||(t[Bl]=!0,Qd("selectionchange",!1,t))}}function ux(e,t,n,r){switch(K1(t)){case 1:var o=KC;break;case 4:o=qC;break;default:o=$h}n=o.bind(null,t,n,e),o=void 0,!Zf||t!=="touchstart"&&t!=="touchmove"&&t!=="wheel"||(o=!0),r?o!==void 0?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):o!==void 0?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Yd(e,t,n,r,o){var i=r;if(!(t&1)&&!(t&2)&&r!==null)e:for(;;){if(r===null)return;var a=r.tag;if(a===3||a===4){var s=r.stateNode.containerInfo;if(s===o||s.nodeType===8&&s.parentNode===o)break;if(a===4)for(a=r.return;a!==null;){var l=a.tag;if((l===3||l===4)&&(l=a.stateNode.containerInfo,l===o||l.nodeType===8&&l.parentNode===o))return;a=a.return}for(;s!==null;){if(a=Oo(s),a===null)return;if(l=a.tag,l===5||l===6){r=i=a;continue e}s=s.parentNode}}r=r.return}_1(function(){var u=i,c=Rh(n),d=[];e:{var f=sx.get(e);if(f!==void 0){var g=Mh,p=e;switch(e){case"keypress":if(lu(n)===0)break e;case"keydown":case"keyup":g=lE;break;case"focusin":p="focus",g=Hd;break;case"focusout":p="blur",g=Hd;break;case"beforeblur":case"afterblur":g=Hd;break;case"click":if(n.button===2)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":g=Hg;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":g=QC;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":g=dE;break;case rx:case ox:case ix:g=ZC;break;case ax:g=pE;break;case"scroll":g=GC;break;case"wheel":g=mE;break;case"copy":case"cut":case"paste":g=tE;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":g=Kg}var h=(t&4)!==0,C=!h&&e==="scroll",m=h?f!==null?f+"Capture":null:f;h=[];for(var y=u,v;y!==null;){v=y;var w=v.stateNode;if(v.tag===5&&w!==null&&(v=w,m!==null&&(w=bs(y,m),w!=null&&h.push(ks(y,w,v)))),C)break;y=y.return}0<h.length&&(f=new g(f,p,null,n,c),d.push({event:f,listeners:h}))}}if(!(t&7)){e:{if(f=e==="mouseover"||e==="pointerover",g=e==="mouseout"||e==="pointerout",f&&n!==Yf&&(p=n.relatedTarget||n.fromElement)&&(Oo(p)||p[Or]))break e;if((g||f)&&(f=c.window===c?c:(f=c.ownerDocument)?f.defaultView||f.parentWindow:window,g?(p=n.relatedTarget||n.toElement,g=u,p=p?Oo(p):null,p!==null&&(C=ri(p),p!==C||p.tag!==5&&p.tag!==6)&&(p=null)):(g=null,p=u),g!==p)){if(h=Hg,w="onMouseLeave",m="onMouseEnter",y="mouse",(e==="pointerout"||e==="pointerover")&&(h=Kg,w="onPointerLeave",m="onPointerEnter",y="pointer"),C=g==null?f:wi(g),v=p==null?f:wi(p),f=new h(w,y+"leave",g,n,c),f.target=C,f.relatedTarget=v,w=null,Oo(c)===u&&(h=new h(m,y+"enter",p,n,c),h.target=v,h.relatedTarget=C,w=h),C=w,g&&p)t:{for(h=g,m=p,y=0,v=h;v;v=ai(v))y++;for(v=0,w=m;w;w=ai(w))v++;for(;0<y-v;)h=ai(h),y--;for(;0<v-y;)m=ai(m),v--;for(;y--;){if(h===m||m!==null&&h===m.alternate)break t;h=ai(h),m=ai(m)}h=null}else h=null;g!==null&&rv(d,f,g,h,!1),p!==null&&C!==null&&rv(d,C,p,h,!0)}}e:{if(f=u?wi(u):window,g=f.nodeName&&f.nodeName.toLowerCase(),g==="select"||g==="input"&&f.type==="file")var R=SE;else if(Xg(f))if(J1)R=PE;else{R=EE;var P=CE}else(g=f.nodeName)&&g.toLowerCase()==="input"&&(f.type==="checkbox"||f.type==="radio")&&(R=RE);if(R&&(R=R(e,u))){Y1(d,R,n,c);break e}P&&P(e,f,u),e==="focusout"&&(P=f._wrapperState)&&P.controlled&&f.type==="number"&&Kf(f,"number",f.value)}switch(P=u?wi(u):window,e){case"focusin":(Xg(P)||P.contentEditable==="true")&&(xi=P,op=u,os=null);break;case"focusout":os=op=xi=null;break;case"mousedown":ip=!0;break;case"contextmenu":case"mouseup":case"dragend":ip=!1,ev(d,n,c);break;case"selectionchange":if($E)break;case"keydown":case"keyup":ev(d,n,c)}var x;if(jh)e:{switch(e){case"compositionstart":var k="onCompositionStart";break e;case"compositionend":k="onCompositionEnd";break e;case"compositionupdate":k="onCompositionUpdate";break e}k=void 0}else yi?X1(e,n)&&(k="onCompositionEnd"):e==="keydown"&&n.keyCode===229&&(k="onCompositionStart");k&&(G1&&n.locale!=="ko"&&(yi||k!=="onCompositionStart"?k==="onCompositionEnd"&&yi&&(x=q1()):(Zr=c,Oh="value"in Zr?Zr.value:Zr.textContent,yi=!0)),P=Nu(u,k),0<P.length&&(k=new Vg(k,e,null,n,c),d.push({event:k,listeners:P}),x?k.data=x:(x=Q1(n),x!==null&&(k.data=x)))),(x=vE?yE(e,n):xE(e,n))&&(u=Nu(u,"onBeforeInput"),0<u.length&&(c=new Vg("onBeforeInput","beforeinput",null,n,c),d.push({event:c,listeners:u}),c.data=x))}lx(d,t)})}function ks(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Nu(e,t){for(var n=t+"Capture",r=[];e!==null;){var o=e,i=o.stateNode;o.tag===5&&i!==null&&(o=i,i=bs(e,n),i!=null&&r.unshift(ks(e,i,o)),i=bs(e,t),i!=null&&r.push(ks(e,i,o))),e=e.return}return r}function ai(e){if(e===null)return null;do e=e.return;while(e&&e.tag!==5);return e||null}function rv(e,t,n,r,o){for(var i=t._reactName,a=[];n!==null&&n!==r;){var s=n,l=s.alternate,u=s.stateNode;if(l!==null&&l===r)break;s.tag===5&&u!==null&&(s=u,o?(l=bs(n,i),l!=null&&a.unshift(ks(n,l,s))):o||(l=bs(n,i),l!=null&&a.push(ks(n,l,s)))),n=n.return}a.length!==0&&e.push({event:t,listeners:a})}var jE=/\r\n?/g,NE=/\u0000|\uFFFD/g;function ov(e){return(typeof e=="string"?e:""+e).replace(jE,`
`).replace(NE,"")}function Ul(e,t,n){if(t=ov(t),ov(e)!==t&&n)throw Error(W(425))}function Au(){}var ap=null,sp=null;function lp(e,t){return e==="textarea"||e==="noscript"||typeof t.children=="string"||typeof t.children=="number"||typeof t.dangerouslySetInnerHTML=="object"&&t.dangerouslySetInnerHTML!==null&&t.dangerouslySetInnerHTML.__html!=null}var up=typeof setTimeout=="function"?setTimeout:void 0,AE=typeof clearTimeout=="function"?clearTimeout:void 0,iv=typeof Promise=="function"?Promise:void 0,LE=typeof queueMicrotask=="function"?queueMicrotask:typeof iv<"u"?function(e){return iv.resolve(null).then(e).catch(IE)}:up;function IE(e){setTimeout(function(){throw e})}function Jd(e,t){var n=t,r=0;do{var o=n.nextSibling;if(e.removeChild(n),o&&o.nodeType===8)if(n=o.data,n==="/$"){if(r===0){e.removeChild(o),Cs(t);return}r--}else n!=="$"&&n!=="$?"&&n!=="$!"||r++;n=o}while(n);Cs(t)}function io(e){for(;e!=null;e=e.nextSibling){var t=e.nodeType;if(t===1||t===3)break;if(t===8){if(t=e.data,t==="$"||t==="$!"||t==="$?")break;if(t==="/$")return null}}return e}function av(e){e=e.previousSibling;for(var t=0;e;){if(e.nodeType===8){var n=e.data;if(n==="$"||n==="$!"||n==="$?"){if(t===0)return e;t--}else n==="/$"&&t++}e=e.previousSibling}return null}var ua=Math.random().toString(36).slice(2),hr="__reactFiber$"+ua,Ts="__reactProps$"+ua,Or="__reactContainer$"+ua,cp="__reactEvents$"+ua,FE="__reactListeners$"+ua,DE="__reactHandles$"+ua;function Oo(e){var t=e[hr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Or]||n[hr]){if(n=t.alternate,t.child!==null||n!==null&&n.child!==null)for(e=av(e);e!==null;){if(n=e[hr])return n;e=av(e)}return t}e=n,n=e.parentNode}return null}function el(e){return e=e[hr]||e[Or],!e||e.tag!==5&&e.tag!==6&&e.tag!==13&&e.tag!==3?null:e}function wi(e){if(e.tag===5||e.tag===6)return e.stateNode;throw Error(W(33))}function bc(e){return e[Ts]||null}var dp=[],Si=-1;function vo(e){return{current:e}}function qe(e){0>Si||(e.current=dp[Si],dp[Si]=null,Si--)}function We(e,t){Si++,dp[Si]=e.current,e.current=t}var po={},Vt=vo(po),rn=vo(!1),Wo=po;function Vi(e,t){var n=e.type.contextTypes;if(!n)return po;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o={},i;for(i in n)o[i]=t[i];return r&&(e=e.stateNode,e.__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function on(e){return e=e.childContextTypes,e!=null}function Lu(){qe(rn),qe(Vt)}function sv(e,t,n){if(Vt.current!==po)throw Error(W(168));We(Vt,t),We(rn,n)}function cx(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,typeof r.getChildContext!="function")return n;r=r.getChildContext();for(var o in r)if(!(o in t))throw Error(W(108,CC(e)||"Unknown",o));return ot({},n,r)}function Iu(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||po,Wo=Vt.current,We(Vt,e),We(rn,rn.current),!0}function lv(e,t,n){var r=e.stateNode;if(!r)throw Error(W(169));n?(e=cx(e,t,Wo),r.__reactInternalMemoizedMergedChildContext=e,qe(rn),qe(Vt),We(Vt,e)):qe(rn),We(rn,n)}var Sr=null,wc=!1,Zd=!1;function dx(e){Sr===null?Sr=[e]:Sr.push(e)}function zE(e){wc=!0,dx(e)}function yo(){if(!Zd&&Sr!==null){Zd=!0;var e=0,t=Le;try{var n=Sr;for(Le=1;e<n.length;e++){var r=n[e];do r=r(!0);while(r!==null)}Sr=null,wc=!1}catch(o){throw Sr!==null&&(Sr=Sr.slice(e+1)),L1(Ph,yo),o}finally{Le=t,Zd=!1}}return null}var Ci=[],Ei=0,Fu=null,Du=0,$n=[],On=0,Ho=null,Er=1,Rr="";function Eo(e,t){Ci[Ei++]=Du,Ci[Ei++]=Fu,Fu=e,Du=t}function fx(e,t,n){$n[On++]=Er,$n[On++]=Rr,$n[On++]=Ho,Ho=e;var r=Er;e=Rr;var o=32-tr(r)-1;r&=~(1<<o),n+=1;var i=32-tr(t)+o;if(30<i){var a=o-o%5;i=(r&(1<<a)-1).toString(32),r>>=a,o-=a,Er=1<<32-tr(t)+o|n<<o|r,Rr=i+e}else Er=1<<i|n<<o|r,Rr=e}function Ah(e){e.return!==null&&(Eo(e,1),fx(e,1,0))}function Lh(e){for(;e===Fu;)Fu=Ci[--Ei],Ci[Ei]=null,Du=Ci[--Ei],Ci[Ei]=null;for(;e===Ho;)Ho=$n[--On],$n[On]=null,Rr=$n[--On],$n[On]=null,Er=$n[--On],$n[On]=null}var gn=null,mn=null,Je=!1,Zn=null;function px(e,t){var n=jn(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,t=e.deletions,t===null?(e.deletions=[n],e.flags|=16):t.push(n)}function uv(e,t){switch(e.tag){case 5:var n=e.type;return t=t.nodeType!==1||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t,t!==null?(e.stateNode=t,gn=e,mn=io(t.firstChild),!0):!1;case 6:return t=e.pendingProps===""||t.nodeType!==3?null:t,t!==null?(e.stateNode=t,gn=e,mn=null,!0):!1;case 13:return t=t.nodeType!==8?null:t,t!==null?(n=Ho!==null?{id:Er,overflow:Rr}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},n=jn(18,null,null,0),n.stateNode=t,n.return=e,e.child=n,gn=e,mn=null,!0):!1;default:return!1}}function fp(e){return(e.mode&1)!==0&&(e.flags&128)===0}function pp(e){if(Je){var t=mn;if(t){var n=t;if(!uv(e,t)){if(fp(e))throw Error(W(418));t=io(n.nextSibling);var r=gn;t&&uv(e,t)?px(r,n):(e.flags=e.flags&-4097|2,Je=!1,gn=e)}}else{if(fp(e))throw Error(W(418));e.flags=e.flags&-4097|2,Je=!1,gn=e}}}function cv(e){for(e=e.return;e!==null&&e.tag!==5&&e.tag!==3&&e.tag!==13;)e=e.return;gn=e}function Wl(e){if(e!==gn)return!1;if(!Je)return cv(e),Je=!0,!1;var t;if((t=e.tag!==3)&&!(t=e.tag!==5)&&(t=e.type,t=t!=="head"&&t!=="body"&&!lp(e.type,e.memoizedProps)),t&&(t=mn)){if(fp(e))throw hx(),Error(W(418));for(;t;)px(e,t),t=io(t.nextSibling)}if(cv(e),e.tag===13){if(e=e.memoizedState,e=e!==null?e.dehydrated:null,!e)throw Error(W(317));e:{for(e=e.nextSibling,t=0;e;){if(e.nodeType===8){var n=e.data;if(n==="/$"){if(t===0){mn=io(e.nextSibling);break e}t--}else n!=="$"&&n!=="$!"&&n!=="$?"||t++}e=e.nextSibling}mn=null}}else mn=gn?io(e.stateNode.nextSibling):null;return!0}function hx(){for(var e=mn;e;)e=io(e.nextSibling)}function Ki(){mn=gn=null,Je=!1}function Ih(e){Zn===null?Zn=[e]:Zn.push(e)}var BE=Ir.ReactCurrentBatchConfig;function Oa(e,t,n){if(e=n.ref,e!==null&&typeof e!="function"&&typeof e!="object"){if(n._owner){if(n=n._owner,n){if(n.tag!==1)throw Error(W(309));var r=n.stateNode}if(!r)throw Error(W(147,e));var o=r,i=""+e;return t!==null&&t.ref!==null&&typeof t.ref=="function"&&t.ref._stringRef===i?t.ref:(t=function(a){var s=o.refs;a===null?delete s[i]:s[i]=a},t._stringRef=i,t)}if(typeof e!="string")throw Error(W(284));if(!n._owner)throw Error(W(290,e))}return e}function Hl(e,t){throw e=Object.prototype.toString.call(t),Error(W(31,e==="[object Object]"?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function dv(e){var t=e._init;return t(e._payload)}function mx(e){function t(m,y){if(e){var v=m.deletions;v===null?(m.deletions=[y],m.flags|=16):v.push(y)}}function n(m,y){if(!e)return null;for(;y!==null;)t(m,y),y=y.sibling;return null}function r(m,y){for(m=new Map;y!==null;)y.key!==null?m.set(y.key,y):m.set(y.index,y),y=y.sibling;return m}function o(m,y){return m=uo(m,y),m.index=0,m.sibling=null,m}function i(m,y,v){return m.index=v,e?(v=m.alternate,v!==null?(v=v.index,v<y?(m.flags|=2,y):v):(m.flags|=2,y)):(m.flags|=1048576,y)}function a(m){return e&&m.alternate===null&&(m.flags|=2),m}function s(m,y,v,w){return y===null||y.tag!==6?(y=sf(v,m.mode,w),y.return=m,y):(y=o(y,v),y.return=m,y)}function l(m,y,v,w){var R=v.type;return R===vi?c(m,y,v.props.children,w,v.key):y!==null&&(y.elementType===R||typeof R=="object"&&R!==null&&R.$$typeof===qr&&dv(R)===y.type)?(w=o(y,v.props),w.ref=Oa(m,y,v),w.return=m,w):(w=mu(v.type,v.key,v.props,null,m.mode,w),w.ref=Oa(m,y,v),w.return=m,w)}function u(m,y,v,w){return y===null||y.tag!==4||y.stateNode.containerInfo!==v.containerInfo||y.stateNode.implementation!==v.implementation?(y=lf(v,m.mode,w),y.return=m,y):(y=o(y,v.children||[]),y.return=m,y)}function c(m,y,v,w,R){return y===null||y.tag!==7?(y=Fo(v,m.mode,w,R),y.return=m,y):(y=o(y,v),y.return=m,y)}function d(m,y,v){if(typeof y=="string"&&y!==""||typeof y=="number")return y=sf(""+y,m.mode,v),y.return=m,y;if(typeof y=="object"&&y!==null){switch(y.$$typeof){case jl:return v=mu(y.type,y.key,y.props,null,m.mode,v),v.ref=Oa(m,null,y),v.return=m,v;case gi:return y=lf(y,m.mode,v),y.return=m,y;case qr:var w=y._init;return d(m,w(y._payload),v)}if(Ga(y)||Ra(y))return y=Fo(y,m.mode,v,null),y.return=m,y;Hl(m,y)}return null}function f(m,y,v,w){var R=y!==null?y.key:null;if(typeof v=="string"&&v!==""||typeof v=="number")return R!==null?null:s(m,y,""+v,w);if(typeof v=="object"&&v!==null){switch(v.$$typeof){case jl:return v.key===R?l(m,y,v,w):null;case gi:return v.key===R?u(m,y,v,w):null;case qr:return R=v._init,f(m,y,R(v._payload),w)}if(Ga(v)||Ra(v))return R!==null?null:c(m,y,v,w,null);Hl(m,v)}return null}function g(m,y,v,w,R){if(typeof w=="string"&&w!==""||typeof w=="number")return m=m.get(v)||null,s(y,m,""+w,R);if(typeof w=="object"&&w!==null){switch(w.$$typeof){case jl:return m=m.get(w.key===null?v:w.key)||null,l(y,m,w,R);case gi:return m=m.get(w.key===null?v:w.key)||null,u(y,m,w,R);case qr:var P=w._init;return g(m,y,v,P(w._payload),R)}if(Ga(w)||Ra(w))return m=m.get(v)||null,c(y,m,w,R,null);Hl(y,w)}return null}function p(m,y,v,w){for(var R=null,P=null,x=y,k=y=0,M=null;x!==null&&k<v.length;k++){x.index>k?(M=x,x=null):M=x.sibling;var T=f(m,x,v[k],w);if(T===null){x===null&&(x=M);break}e&&x&&T.alternate===null&&t(m,x),y=i(T,y,k),P===null?R=T:P.sibling=T,P=T,x=M}if(k===v.length)return n(m,x),Je&&Eo(m,k),R;if(x===null){for(;k<v.length;k++)x=d(m,v[k],w),x!==null&&(y=i(x,y,k),P===null?R=x:P.sibling=x,P=x);return Je&&Eo(m,k),R}for(x=r(m,x);k<v.length;k++)M=g(x,m,k,v[k],w),M!==null&&(e&&M.alternate!==null&&x.delete(M.key===null?k:M.key),y=i(M,y,k),P===null?R=M:P.sibling=M,P=M);return e&&x.forEach(function(j){return t(m,j)}),Je&&Eo(m,k),R}function h(m,y,v,w){var R=Ra(v);if(typeof R!="function")throw Error(W(150));if(v=R.call(v),v==null)throw Error(W(151));for(var P=R=null,x=y,k=y=0,M=null,T=v.next();x!==null&&!T.done;k++,T=v.next()){x.index>k?(M=x,x=null):M=x.sibling;var j=f(m,x,T.value,w);if(j===null){x===null&&(x=M);break}e&&x&&j.alternate===null&&t(m,x),y=i(j,y,k),P===null?R=j:P.sibling=j,P=j,x=M}if(T.done)return n(m,x),Je&&Eo(m,k),R;if(x===null){for(;!T.done;k++,T=v.next())T=d(m,T.value,w),T!==null&&(y=i(T,y,k),P===null?R=T:P.sibling=T,P=T);return Je&&Eo(m,k),R}for(x=r(m,x);!T.done;k++,T=v.next())T=g(x,m,k,T.value,w),T!==null&&(e&&T.alternate!==null&&x.delete(T.key===null?k:T.key),y=i(T,y,k),P===null?R=T:P.sibling=T,P=T);return e&&x.forEach(function(L){return t(m,L)}),Je&&Eo(m,k),R}function C(m,y,v,w){if(typeof v=="object"&&v!==null&&v.type===vi&&v.key===null&&(v=v.props.children),typeof v=="object"&&v!==null){switch(v.$$typeof){case jl:e:{for(var R=v.key,P=y;P!==null;){if(P.key===R){if(R=v.type,R===vi){if(P.tag===7){n(m,P.sibling),y=o(P,v.props.children),y.return=m,m=y;break e}}else if(P.elementType===R||typeof R=="object"&&R!==null&&R.$$typeof===qr&&dv(R)===P.type){n(m,P.sibling),y=o(P,v.props),y.ref=Oa(m,P,v),y.return=m,m=y;break e}n(m,P);break}else t(m,P);P=P.sibling}v.type===vi?(y=Fo(v.props.children,m.mode,w,v.key),y.return=m,m=y):(w=mu(v.type,v.key,v.props,null,m.mode,w),w.ref=Oa(m,y,v),w.return=m,m=w)}return a(m);case gi:e:{for(P=v.key;y!==null;){if(y.key===P)if(y.tag===4&&y.stateNode.containerInfo===v.containerInfo&&y.stateNode.implementation===v.implementation){n(m,y.sibling),y=o(y,v.children||[]),y.return=m,m=y;break e}else{n(m,y);break}else t(m,y);y=y.sibling}y=lf(v,m.mode,w),y.return=m,m=y}return a(m);case qr:return P=v._init,C(m,y,P(v._payload),w)}if(Ga(v))return p(m,y,v,w);if(Ra(v))return h(m,y,v,w);Hl(m,v)}return typeof v=="string"&&v!==""||typeof v=="number"?(v=""+v,y!==null&&y.tag===6?(n(m,y.sibling),y=o(y,v),y.return=m,m=y):(n(m,y),y=sf(v,m.mode,w),y.return=m,m=y),a(m)):n(m,y)}return C}var qi=mx(!0),gx=mx(!1),zu=vo(null),Bu=null,Ri=null,Fh=null;function Dh(){Fh=Ri=Bu=null}function zh(e){var t=zu.current;qe(zu),e._currentValue=t}function hp(e,t,n){for(;e!==null;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,r!==null&&(r.childLanes|=t)):r!==null&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function Ai(e,t){Bu=e,Fh=Ri=null,e=e.dependencies,e!==null&&e.firstContext!==null&&(e.lanes&t&&(nn=!0),e.firstContext=null)}function Dn(e){var t=e._currentValue;if(Fh!==e)if(e={context:e,memoizedValue:t,next:null},Ri===null){if(Bu===null)throw Error(W(308));Ri=e,Bu.dependencies={lanes:0,firstContext:e}}else Ri=Ri.next=e;return t}var Mo=null;function Bh(e){Mo===null?Mo=[e]:Mo.push(e)}function vx(e,t,n,r){var o=t.interleaved;return o===null?(n.next=n,Bh(t)):(n.next=o.next,o.next=n),t.interleaved=n,Mr(e,r)}function Mr(e,t){e.lanes|=t;var n=e.alternate;for(n!==null&&(n.lanes|=t),n=e,e=e.return;e!==null;)e.childLanes|=t,n=e.alternate,n!==null&&(n.childLanes|=t),n=e,e=e.return;return n.tag===3?n.stateNode:null}var Gr=!1;function Uh(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function yx(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function kr(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function ao(e,t,n){var r=e.updateQueue;if(r===null)return null;if(r=r.shared,Me&2){var o=r.pending;return o===null?t.next=t:(t.next=o.next,o.next=t),r.pending=t,Mr(e,n)}return o=r.interleaved,o===null?(t.next=t,Bh(r)):(t.next=o.next,o.next=t),r.interleaved=t,Mr(e,n)}function uu(e,t,n){if(t=t.updateQueue,t!==null&&(t=t.shared,(n&4194240)!==0)){var r=t.lanes;r&=e.pendingLanes,n|=r,t.lanes=n,kh(e,n)}}function fv(e,t){var n=e.updateQueue,r=e.alternate;if(r!==null&&(r=r.updateQueue,n===r)){var o=null,i=null;if(n=n.firstBaseUpdate,n!==null){do{var a={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};i===null?o=i=a:i=i.next=a,n=n.next}while(n!==null);i===null?o=i=t:i=i.next=t}else o=i=t;n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:i,shared:r.shared,effects:r.effects},e.updateQueue=n;return}e=n.lastBaseUpdate,e===null?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Uu(e,t,n,r){var o=e.updateQueue;Gr=!1;var i=o.firstBaseUpdate,a=o.lastBaseUpdate,s=o.shared.pending;if(s!==null){o.shared.pending=null;var l=s,u=l.next;l.next=null,a===null?i=u:a.next=u,a=l;var c=e.alternate;c!==null&&(c=c.updateQueue,s=c.lastBaseUpdate,s!==a&&(s===null?c.firstBaseUpdate=u:s.next=u,c.lastBaseUpdate=l))}if(i!==null){var d=o.baseState;a=0,c=u=l=null,s=i;do{var f=s.lane,g=s.eventTime;if((r&f)===f){c!==null&&(c=c.next={eventTime:g,lane:0,tag:s.tag,payload:s.payload,callback:s.callback,next:null});e:{var p=e,h=s;switch(f=t,g=n,h.tag){case 1:if(p=h.payload,typeof p=="function"){d=p.call(g,d,f);break e}d=p;break e;case 3:p.flags=p.flags&-65537|128;case 0:if(p=h.payload,f=typeof p=="function"?p.call(g,d,f):p,f==null)break e;d=ot({},d,f);break e;case 2:Gr=!0}}s.callback!==null&&s.lane!==0&&(e.flags|=64,f=o.effects,f===null?o.effects=[s]:f.push(s))}else g={eventTime:g,lane:f,tag:s.tag,payload:s.payload,callback:s.callback,next:null},c===null?(u=c=g,l=d):c=c.next=g,a|=f;if(s=s.next,s===null){if(s=o.shared.pending,s===null)break;f=s,s=f.next,f.next=null,o.lastBaseUpdate=f,o.shared.pending=null}}while(!0);if(c===null&&(l=d),o.baseState=l,o.firstBaseUpdate=u,o.lastBaseUpdate=c,t=o.shared.interleaved,t!==null){o=t;do a|=o.lane,o=o.next;while(o!==t)}else i===null&&(o.shared.lanes=0);Ko|=a,e.lanes=a,e.memoizedState=d}}function pv(e,t,n){if(e=t.effects,t.effects=null,e!==null)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(o!==null){if(r.callback=null,r=n,typeof o!="function")throw Error(W(191,o));o.call(r)}}}var tl={},gr=vo(tl),$s=vo(tl),Os=vo(tl);function _o(e){if(e===tl)throw Error(W(174));return e}function Wh(e,t){switch(We(Os,t),We($s,e),We(gr,tl),e=t.nodeType,e){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:Gf(null,"");break;default:e=e===8?t.parentNode:t,t=e.namespaceURI||null,e=e.tagName,t=Gf(t,e)}qe(gr),We(gr,t)}function Gi(){qe(gr),qe($s),qe(Os)}function xx(e){_o(Os.current);var t=_o(gr.current),n=Gf(t,e.type);t!==n&&(We($s,e),We(gr,n))}function Hh(e){$s.current===e&&(qe(gr),qe($s))}var nt=vo(0);function Wu(e){for(var t=e;t!==null;){if(t.tag===13){var n=t.memoizedState;if(n!==null&&(n=n.dehydrated,n===null||n.data==="$?"||n.data==="$!"))return t}else if(t.tag===19&&t.memoizedProps.revealOrder!==void 0){if(t.flags&128)return t}else if(t.child!==null){t.child.return=t,t=t.child;continue}if(t===e)break;for(;t.sibling===null;){if(t.return===null||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var ef=[];function Vh(){for(var e=0;e<ef.length;e++)ef[e]._workInProgressVersionPrimary=null;ef.length=0}var cu=Ir.ReactCurrentDispatcher,tf=Ir.ReactCurrentBatchConfig,Vo=0,rt=null,Et=null,$t=null,Hu=!1,is=!1,Ms=0,UE=0;function zt(){throw Error(W(321))}function Kh(e,t){if(t===null)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!or(e[n],t[n]))return!1;return!0}function qh(e,t,n,r,o,i){if(Vo=i,rt=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,cu.current=e===null||e.memoizedState===null?KE:qE,e=n(r,o),is){i=0;do{if(is=!1,Ms=0,25<=i)throw Error(W(301));i+=1,$t=Et=null,t.updateQueue=null,cu.current=GE,e=n(r,o)}while(is)}if(cu.current=Vu,t=Et!==null&&Et.next!==null,Vo=0,$t=Et=rt=null,Hu=!1,t)throw Error(W(300));return e}function Gh(){var e=Ms!==0;return Ms=0,e}function dr(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return $t===null?rt.memoizedState=$t=e:$t=$t.next=e,$t}function zn(){if(Et===null){var e=rt.alternate;e=e!==null?e.memoizedState:null}else e=Et.next;var t=$t===null?rt.memoizedState:$t.next;if(t!==null)$t=t,Et=e;else{if(e===null)throw Error(W(310));Et=e,e={memoizedState:Et.memoizedState,baseState:Et.baseState,baseQueue:Et.baseQueue,queue:Et.queue,next:null},$t===null?rt.memoizedState=$t=e:$t=$t.next=e}return $t}function _s(e,t){return typeof t=="function"?t(e):t}function nf(e){var t=zn(),n=t.queue;if(n===null)throw Error(W(311));n.lastRenderedReducer=e;var r=Et,o=r.baseQueue,i=n.pending;if(i!==null){if(o!==null){var a=o.next;o.next=i.next,i.next=a}r.baseQueue=o=i,n.pending=null}if(o!==null){i=o.next,r=r.baseState;var s=a=null,l=null,u=i;do{var c=u.lane;if((Vo&c)===c)l!==null&&(l=l.next={lane:0,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null}),r=u.hasEagerState?u.eagerState:e(r,u.action);else{var d={lane:c,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null};l===null?(s=l=d,a=r):l=l.next=d,rt.lanes|=c,Ko|=c}u=u.next}while(u!==null&&u!==i);l===null?a=r:l.next=s,or(r,t.memoizedState)||(nn=!0),t.memoizedState=r,t.baseState=a,t.baseQueue=l,n.lastRenderedState=r}if(e=n.interleaved,e!==null){o=e;do i=o.lane,rt.lanes|=i,Ko|=i,o=o.next;while(o!==e)}else o===null&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function rf(e){var t=zn(),n=t.queue;if(n===null)throw Error(W(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,i=t.memoizedState;if(o!==null){n.pending=null;var a=o=o.next;do i=e(i,a.action),a=a.next;while(a!==o);or(i,t.memoizedState)||(nn=!0),t.memoizedState=i,t.baseQueue===null&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function bx(){}function wx(e,t){var n=rt,r=zn(),o=t(),i=!or(r.memoizedState,o);if(i&&(r.memoizedState=o,nn=!0),r=r.queue,Xh(Ex.bind(null,n,r,e),[e]),r.getSnapshot!==t||i||$t!==null&&$t.memoizedState.tag&1){if(n.flags|=2048,js(9,Cx.bind(null,n,r,o,t),void 0,null),Mt===null)throw Error(W(349));Vo&30||Sx(n,t,o)}return o}function Sx(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},t=rt.updateQueue,t===null?(t={lastEffect:null,stores:null},rt.updateQueue=t,t.stores=[e]):(n=t.stores,n===null?t.stores=[e]:n.push(e))}function Cx(e,t,n,r){t.value=n,t.getSnapshot=r,Rx(t)&&Px(e)}function Ex(e,t,n){return n(function(){Rx(t)&&Px(e)})}function Rx(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!or(e,n)}catch{return!0}}function Px(e){var t=Mr(e,1);t!==null&&nr(t,e,1,-1)}function hv(e){var t=dr();return typeof e=="function"&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:_s,lastRenderedState:e},t.queue=e,e=e.dispatch=VE.bind(null,rt,e),[t.memoizedState,e]}function js(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},t=rt.updateQueue,t===null?(t={lastEffect:null,stores:null},rt.updateQueue=t,t.lastEffect=e.next=e):(n=t.lastEffect,n===null?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e)),e}function kx(){return zn().memoizedState}function du(e,t,n,r){var o=dr();rt.flags|=e,o.memoizedState=js(1|t,n,void 0,r===void 0?null:r)}function Sc(e,t,n,r){var o=zn();r=r===void 0?null:r;var i=void 0;if(Et!==null){var a=Et.memoizedState;if(i=a.destroy,r!==null&&Kh(r,a.deps)){o.memoizedState=js(t,n,i,r);return}}rt.flags|=e,o.memoizedState=js(1|t,n,i,r)}function mv(e,t){return du(8390656,8,e,t)}function Xh(e,t){return Sc(2048,8,e,t)}function Tx(e,t){return Sc(4,2,e,t)}function $x(e,t){return Sc(4,4,e,t)}function Ox(e,t){if(typeof t=="function")return e=e(),t(e),function(){t(null)};if(t!=null)return e=e(),t.current=e,function(){t.current=null}}function Mx(e,t,n){return n=n!=null?n.concat([e]):null,Sc(4,4,Ox.bind(null,t,e),n)}function Qh(){}function _x(e,t){var n=zn();t=t===void 0?null:t;var r=n.memoizedState;return r!==null&&t!==null&&Kh(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function jx(e,t){var n=zn();t=t===void 0?null:t;var r=n.memoizedState;return r!==null&&t!==null&&Kh(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Nx(e,t,n){return Vo&21?(or(n,t)||(n=D1(),rt.lanes|=n,Ko|=n,e.baseState=!0),t):(e.baseState&&(e.baseState=!1,nn=!0),e.memoizedState=n)}function WE(e,t){var n=Le;Le=n!==0&&4>n?n:4,e(!0);var r=tf.transition;tf.transition={};try{e(!1),t()}finally{Le=n,tf.transition=r}}function Ax(){return zn().memoizedState}function HE(e,t,n){var r=lo(e);if(n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},Lx(e))Ix(t,n);else if(n=vx(e,t,n,r),n!==null){var o=Xt();nr(n,e,r,o),Fx(n,t,r)}}function VE(e,t,n){var r=lo(e),o={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(Lx(e))Ix(t,o);else{var i=e.alternate;if(e.lanes===0&&(i===null||i.lanes===0)&&(i=t.lastRenderedReducer,i!==null))try{var a=t.lastRenderedState,s=i(a,n);if(o.hasEagerState=!0,o.eagerState=s,or(s,a)){var l=t.interleaved;l===null?(o.next=o,Bh(t)):(o.next=l.next,l.next=o),t.interleaved=o;return}}catch{}finally{}n=vx(e,t,o,r),n!==null&&(o=Xt(),nr(n,e,r,o),Fx(n,t,r))}}function Lx(e){var t=e.alternate;return e===rt||t!==null&&t===rt}function Ix(e,t){is=Hu=!0;var n=e.pending;n===null?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function Fx(e,t,n){if(n&4194240){var r=t.lanes;r&=e.pendingLanes,n|=r,t.lanes=n,kh(e,n)}}var Vu={readContext:Dn,useCallback:zt,useContext:zt,useEffect:zt,useImperativeHandle:zt,useInsertionEffect:zt,useLayoutEffect:zt,useMemo:zt,useReducer:zt,useRef:zt,useState:zt,useDebugValue:zt,useDeferredValue:zt,useTransition:zt,useMutableSource:zt,useSyncExternalStore:zt,useId:zt,unstable_isNewReconciler:!1},KE={readContext:Dn,useCallback:function(e,t){return dr().memoizedState=[e,t===void 0?null:t],e},useContext:Dn,useEffect:mv,useImperativeHandle:function(e,t,n){return n=n!=null?n.concat([e]):null,du(4194308,4,Ox.bind(null,t,e),n)},useLayoutEffect:function(e,t){return du(4194308,4,e,t)},useInsertionEffect:function(e,t){return du(4,2,e,t)},useMemo:function(e,t){var n=dr();return t=t===void 0?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=dr();return t=n!==void 0?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=HE.bind(null,rt,e),[r.memoizedState,e]},useRef:function(e){var t=dr();return e={current:e},t.memoizedState=e},useState:hv,useDebugValue:Qh,useDeferredValue:function(e){return dr().memoizedState=e},useTransition:function(){var e=hv(!1),t=e[0];return e=WE.bind(null,e[1]),dr().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=rt,o=dr();if(Je){if(n===void 0)throw Error(W(407));n=n()}else{if(n=t(),Mt===null)throw Error(W(349));Vo&30||Sx(r,t,n)}o.memoizedState=n;var i={value:n,getSnapshot:t};return o.queue=i,mv(Ex.bind(null,r,i,e),[e]),r.flags|=2048,js(9,Cx.bind(null,r,i,n,t),void 0,null),n},useId:function(){var e=dr(),t=Mt.identifierPrefix;if(Je){var n=Rr,r=Er;n=(r&~(1<<32-tr(r)-1)).toString(32)+n,t=":"+t+"R"+n,n=Ms++,0<n&&(t+="H"+n.toString(32)),t+=":"}else n=UE++,t=":"+t+"r"+n.toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},qE={readContext:Dn,useCallback:_x,useContext:Dn,useEffect:Xh,useImperativeHandle:Mx,useInsertionEffect:Tx,useLayoutEffect:$x,useMemo:jx,useReducer:nf,useRef:kx,useState:function(){return nf(_s)},useDebugValue:Qh,useDeferredValue:function(e){var t=zn();return Nx(t,Et.memoizedState,e)},useTransition:function(){var e=nf(_s)[0],t=zn().memoizedState;return[e,t]},useMutableSource:bx,useSyncExternalStore:wx,useId:Ax,unstable_isNewReconciler:!1},GE={readContext:Dn,useCallback:_x,useContext:Dn,useEffect:Xh,useImperativeHandle:Mx,useInsertionEffect:Tx,useLayoutEffect:$x,useMemo:jx,useReducer:rf,useRef:kx,useState:function(){return rf(_s)},useDebugValue:Qh,useDeferredValue:function(e){var t=zn();return Et===null?t.memoizedState=e:Nx(t,Et.memoizedState,e)},useTransition:function(){var e=rf(_s)[0],t=zn().memoizedState;return[e,t]},useMutableSource:bx,useSyncExternalStore:wx,useId:Ax,unstable_isNewReconciler:!1};function Qn(e,t){if(e&&e.defaultProps){t=ot({},t),e=e.defaultProps;for(var n in e)t[n]===void 0&&(t[n]=e[n]);return t}return t}function mp(e,t,n,r){t=e.memoizedState,n=n(r,t),n=n==null?t:ot({},t,n),e.memoizedState=n,e.lanes===0&&(e.updateQueue.baseState=n)}var Cc={isMounted:function(e){return(e=e._reactInternals)?ri(e)===e:!1},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=Xt(),o=lo(e),i=kr(r,o);i.payload=t,n!=null&&(i.callback=n),t=ao(e,i,o),t!==null&&(nr(t,e,o,r),uu(t,e,o))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=Xt(),o=lo(e),i=kr(r,o);i.tag=1,i.payload=t,n!=null&&(i.callback=n),t=ao(e,i,o),t!==null&&(nr(t,e,o,r),uu(t,e,o))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=Xt(),r=lo(e),o=kr(n,r);o.tag=2,t!=null&&(o.callback=t),t=ao(e,o,r),t!==null&&(nr(t,e,r,n),uu(t,e,r))}};function gv(e,t,n,r,o,i,a){return e=e.stateNode,typeof e.shouldComponentUpdate=="function"?e.shouldComponentUpdate(r,i,a):t.prototype&&t.prototype.isPureReactComponent?!Rs(n,r)||!Rs(o,i):!0}function Dx(e,t,n){var r=!1,o=po,i=t.contextType;return typeof i=="object"&&i!==null?i=Dn(i):(o=on(t)?Wo:Vt.current,r=t.contextTypes,i=(r=r!=null)?Vi(e,o):po),t=new t(n,i),e.memoizedState=t.state!==null&&t.state!==void 0?t.state:null,t.updater=Cc,e.stateNode=t,t._reactInternals=e,r&&(e=e.stateNode,e.__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function vv(e,t,n,r){e=t.state,typeof t.componentWillReceiveProps=="function"&&t.componentWillReceiveProps(n,r),typeof t.UNSAFE_componentWillReceiveProps=="function"&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Cc.enqueueReplaceState(t,t.state,null)}function gp(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs={},Uh(e);var i=t.contextType;typeof i=="object"&&i!==null?o.context=Dn(i):(i=on(t)?Wo:Vt.current,o.context=Vi(e,i)),o.state=e.memoizedState,i=t.getDerivedStateFromProps,typeof i=="function"&&(mp(e,t,i,n),o.state=e.memoizedState),typeof t.getDerivedStateFromProps=="function"||typeof o.getSnapshotBeforeUpdate=="function"||typeof o.UNSAFE_componentWillMount!="function"&&typeof o.componentWillMount!="function"||(t=o.state,typeof o.componentWillMount=="function"&&o.componentWillMount(),typeof o.UNSAFE_componentWillMount=="function"&&o.UNSAFE_componentWillMount(),t!==o.state&&Cc.enqueueReplaceState(o,o.state,null),Uu(e,n,o,r),o.state=e.memoizedState),typeof o.componentDidMount=="function"&&(e.flags|=4194308)}function Xi(e,t){try{var n="",r=t;do n+=SC(r),r=r.return;while(r);var o=n}catch(i){o=`
Error generating stack: `+i.message+`
`+i.stack}return{value:e,source:t,stack:o,digest:null}}function of(e,t,n){return{value:e,source:null,stack:n??null,digest:t??null}}function vp(e,t){try{console.error(t.value)}catch(n){setTimeout(function(){throw n})}}var XE=typeof WeakMap=="function"?WeakMap:Map;function zx(e,t,n){n=kr(-1,n),n.tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){qu||(qu=!0,kp=r),vp(e,t)},n}function Bx(e,t,n){n=kr(-1,n),n.tag=3;var r=e.type.getDerivedStateFromError;if(typeof r=="function"){var o=t.value;n.payload=function(){return r(o)},n.callback=function(){vp(e,t)}}var i=e.stateNode;return i!==null&&typeof i.componentDidCatch=="function"&&(n.callback=function(){vp(e,t),typeof r!="function"&&(so===null?so=new Set([this]):so.add(this));var a=t.stack;this.componentDidCatch(t.value,{componentStack:a!==null?a:""})}),n}function yv(e,t,n){var r=e.pingCache;if(r===null){r=e.pingCache=new XE;var o=new Set;r.set(t,o)}else o=r.get(t),o===void 0&&(o=new Set,r.set(t,o));o.has(n)||(o.add(n),e=uR.bind(null,e,t,n),t.then(e,e))}function xv(e){do{var t;if((t=e.tag===13)&&(t=e.memoizedState,t=t!==null?t.dehydrated!==null:!0),t)return e;e=e.return}while(e!==null);return null}function bv(e,t,n,r,o){return e.mode&1?(e.flags|=65536,e.lanes=o,e):(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,n.tag===1&&(n.alternate===null?n.tag=17:(t=kr(-1,1),t.tag=2,ao(n,t,1))),n.lanes|=1),e)}var QE=Ir.ReactCurrentOwner,nn=!1;function qt(e,t,n,r){t.child=e===null?gx(t,null,n,r):qi(t,e.child,n,r)}function wv(e,t,n,r,o){n=n.render;var i=t.ref;return Ai(t,o),r=qh(e,t,n,r,i,o),n=Gh(),e!==null&&!nn?(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,_r(e,t,o)):(Je&&n&&Ah(t),t.flags|=1,qt(e,t,r,o),t.child)}function Sv(e,t,n,r,o){if(e===null){var i=n.type;return typeof i=="function"&&!om(i)&&i.defaultProps===void 0&&n.compare===null&&n.defaultProps===void 0?(t.tag=15,t.type=i,Ux(e,t,i,r,o)):(e=mu(n.type,null,r,t,t.mode,o),e.ref=t.ref,e.return=t,t.child=e)}if(i=e.child,!(e.lanes&o)){var a=i.memoizedProps;if(n=n.compare,n=n!==null?n:Rs,n(a,r)&&e.ref===t.ref)return _r(e,t,o)}return t.flags|=1,e=uo(i,r),e.ref=t.ref,e.return=t,t.child=e}function Ux(e,t,n,r,o){if(e!==null){var i=e.memoizedProps;if(Rs(i,r)&&e.ref===t.ref)if(nn=!1,t.pendingProps=r=i,(e.lanes&o)!==0)e.flags&131072&&(nn=!0);else return t.lanes=e.lanes,_r(e,t,o)}return yp(e,t,n,r,o)}function Wx(e,t,n){var r=t.pendingProps,o=r.children,i=e!==null?e.memoizedState:null;if(r.mode==="hidden")if(!(t.mode&1))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},We(ki,fn),fn|=n;else{if(!(n&1073741824))return e=i!==null?i.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,We(ki,fn),fn|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=i!==null?i.baseLanes:n,We(ki,fn),fn|=r}else i!==null?(r=i.baseLanes|n,t.memoizedState=null):r=n,We(ki,fn),fn|=r;return qt(e,t,o,n),t.child}function Hx(e,t){var n=t.ref;(e===null&&n!==null||e!==null&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function yp(e,t,n,r,o){var i=on(n)?Wo:Vt.current;return i=Vi(t,i),Ai(t,o),n=qh(e,t,n,r,i,o),r=Gh(),e!==null&&!nn?(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,_r(e,t,o)):(Je&&r&&Ah(t),t.flags|=1,qt(e,t,n,o),t.child)}function Cv(e,t,n,r,o){if(on(n)){var i=!0;Iu(t)}else i=!1;if(Ai(t,o),t.stateNode===null)fu(e,t),Dx(t,n,r),gp(t,n,r,o),r=!0;else if(e===null){var a=t.stateNode,s=t.memoizedProps;a.props=s;var l=a.context,u=n.contextType;typeof u=="object"&&u!==null?u=Dn(u):(u=on(n)?Wo:Vt.current,u=Vi(t,u));var c=n.getDerivedStateFromProps,d=typeof c=="function"||typeof a.getSnapshotBeforeUpdate=="function";d||typeof a.UNSAFE_componentWillReceiveProps!="function"&&typeof a.componentWillReceiveProps!="function"||(s!==r||l!==u)&&vv(t,a,r,u),Gr=!1;var f=t.memoizedState;a.state=f,Uu(t,r,a,o),l=t.memoizedState,s!==r||f!==l||rn.current||Gr?(typeof c=="function"&&(mp(t,n,c,r),l=t.memoizedState),(s=Gr||gv(t,n,s,r,f,l,u))?(d||typeof a.UNSAFE_componentWillMount!="function"&&typeof a.componentWillMount!="function"||(typeof a.componentWillMount=="function"&&a.componentWillMount(),typeof a.UNSAFE_componentWillMount=="function"&&a.UNSAFE_componentWillMount()),typeof a.componentDidMount=="function"&&(t.flags|=4194308)):(typeof a.componentDidMount=="function"&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=l),a.props=r,a.state=l,a.context=u,r=s):(typeof a.componentDidMount=="function"&&(t.flags|=4194308),r=!1)}else{a=t.stateNode,yx(e,t),s=t.memoizedProps,u=t.type===t.elementType?s:Qn(t.type,s),a.props=u,d=t.pendingProps,f=a.context,l=n.contextType,typeof l=="object"&&l!==null?l=Dn(l):(l=on(n)?Wo:Vt.current,l=Vi(t,l));var g=n.getDerivedStateFromProps;(c=typeof g=="function"||typeof a.getSnapshotBeforeUpdate=="function")||typeof a.UNSAFE_componentWillReceiveProps!="function"&&typeof a.componentWillReceiveProps!="function"||(s!==d||f!==l)&&vv(t,a,r,l),Gr=!1,f=t.memoizedState,a.state=f,Uu(t,r,a,o);var p=t.memoizedState;s!==d||f!==p||rn.current||Gr?(typeof g=="function"&&(mp(t,n,g,r),p=t.memoizedState),(u=Gr||gv(t,n,u,r,f,p,l)||!1)?(c||typeof a.UNSAFE_componentWillUpdate!="function"&&typeof a.componentWillUpdate!="function"||(typeof a.componentWillUpdate=="function"&&a.componentWillUpdate(r,p,l),typeof a.UNSAFE_componentWillUpdate=="function"&&a.UNSAFE_componentWillUpdate(r,p,l)),typeof a.componentDidUpdate=="function"&&(t.flags|=4),typeof a.getSnapshotBeforeUpdate=="function"&&(t.flags|=1024)):(typeof a.componentDidUpdate!="function"||s===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),typeof a.getSnapshotBeforeUpdate!="function"||s===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=p),a.props=r,a.state=p,a.context=l,r=u):(typeof a.componentDidUpdate!="function"||s===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),typeof a.getSnapshotBeforeUpdate!="function"||s===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),r=!1)}return xp(e,t,n,r,i,o)}function xp(e,t,n,r,o,i){Hx(e,t);var a=(t.flags&128)!==0;if(!r&&!a)return o&&lv(t,n,!1),_r(e,t,i);r=t.stateNode,QE.current=t;var s=a&&typeof n.getDerivedStateFromError!="function"?null:r.render();return t.flags|=1,e!==null&&a?(t.child=qi(t,e.child,null,i),t.child=qi(t,null,s,i)):qt(e,t,s,i),t.memoizedState=r.state,o&&lv(t,n,!0),t.child}function Vx(e){var t=e.stateNode;t.pendingContext?sv(e,t.pendingContext,t.pendingContext!==t.context):t.context&&sv(e,t.context,!1),Wh(e,t.containerInfo)}function Ev(e,t,n,r,o){return Ki(),Ih(o),t.flags|=256,qt(e,t,n,r),t.child}var bp={dehydrated:null,treeContext:null,retryLane:0};function wp(e){return{baseLanes:e,cachePool:null,transitions:null}}function Kx(e,t,n){var r=t.pendingProps,o=nt.current,i=!1,a=(t.flags&128)!==0,s;if((s=a)||(s=e!==null&&e.memoizedState===null?!1:(o&2)!==0),s?(i=!0,t.flags&=-129):(e===null||e.memoizedState!==null)&&(o|=1),We(nt,o&1),e===null)return pp(t),e=t.memoizedState,e!==null&&(e=e.dehydrated,e!==null)?(t.mode&1?e.data==="$!"?t.lanes=8:t.lanes=1073741824:t.lanes=1,null):(a=r.children,e=r.fallback,i?(r=t.mode,i=t.child,a={mode:"hidden",children:a},!(r&1)&&i!==null?(i.childLanes=0,i.pendingProps=a):i=Pc(a,r,0,null),e=Fo(e,r,n,null),i.return=t,e.return=t,i.sibling=e,t.child=i,t.child.memoizedState=wp(n),t.memoizedState=bp,e):Yh(t,a));if(o=e.memoizedState,o!==null&&(s=o.dehydrated,s!==null))return YE(e,t,a,r,s,o,n);if(i){i=r.fallback,a=t.mode,o=e.child,s=o.sibling;var l={mode:"hidden",children:r.children};return!(a&1)&&t.child!==o?(r=t.child,r.childLanes=0,r.pendingProps=l,t.deletions=null):(r=uo(o,l),r.subtreeFlags=o.subtreeFlags&14680064),s!==null?i=uo(s,i):(i=Fo(i,a,n,null),i.flags|=2),i.return=t,r.return=t,r.sibling=i,t.child=r,r=i,i=t.child,a=e.child.memoizedState,a=a===null?wp(n):{baseLanes:a.baseLanes|n,cachePool:null,transitions:a.transitions},i.memoizedState=a,i.childLanes=e.childLanes&~n,t.memoizedState=bp,r}return i=e.child,e=i.sibling,r=uo(i,{mode:"visible",children:r.children}),!(t.mode&1)&&(r.lanes=n),r.return=t,r.sibling=null,e!==null&&(n=t.deletions,n===null?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=r,t.memoizedState=null,r}function Yh(e,t){return t=Pc({mode:"visible",children:t},e.mode,0,null),t.return=e,e.child=t}function Vl(e,t,n,r){return r!==null&&Ih(r),qi(t,e.child,null,n),e=Yh(t,t.pendingProps.children),e.flags|=2,t.memoizedState=null,e}function YE(e,t,n,r,o,i,a){if(n)return t.flags&256?(t.flags&=-257,r=of(Error(W(422))),Vl(e,t,a,r)):t.memoizedState!==null?(t.child=e.child,t.flags|=128,null):(i=r.fallback,o=t.mode,r=Pc({mode:"visible",children:r.children},o,0,null),i=Fo(i,o,a,null),i.flags|=2,r.return=t,i.return=t,r.sibling=i,t.child=r,t.mode&1&&qi(t,e.child,null,a),t.child.memoizedState=wp(a),t.memoizedState=bp,i);if(!(t.mode&1))return Vl(e,t,a,null);if(o.data==="$!"){if(r=o.nextSibling&&o.nextSibling.dataset,r)var s=r.dgst;return r=s,i=Error(W(419)),r=of(i,r,void 0),Vl(e,t,a,r)}if(s=(a&e.childLanes)!==0,nn||s){if(r=Mt,r!==null){switch(a&-a){case 4:o=2;break;case 16:o=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:o=32;break;case 536870912:o=268435456;break;default:o=0}o=o&(r.suspendedLanes|a)?0:o,o!==0&&o!==i.retryLane&&(i.retryLane=o,Mr(e,o),nr(r,e,o,-1))}return rm(),r=of(Error(W(421))),Vl(e,t,a,r)}return o.data==="$?"?(t.flags|=128,t.child=e.child,t=cR.bind(null,e),o._reactRetry=t,null):(e=i.treeContext,mn=io(o.nextSibling),gn=t,Je=!0,Zn=null,e!==null&&($n[On++]=Er,$n[On++]=Rr,$n[On++]=Ho,Er=e.id,Rr=e.overflow,Ho=t),t=Yh(t,r.children),t.flags|=4096,t)}function Rv(e,t,n){e.lanes|=t;var r=e.alternate;r!==null&&(r.lanes|=t),hp(e.return,t,n)}function af(e,t,n,r,o){var i=e.memoizedState;i===null?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=n,i.tailMode=o)}function qx(e,t,n){var r=t.pendingProps,o=r.revealOrder,i=r.tail;if(qt(e,t,r.children,n),r=nt.current,r&2)r=r&1|2,t.flags|=128;else{if(e!==null&&e.flags&128)e:for(e=t.child;e!==null;){if(e.tag===13)e.memoizedState!==null&&Rv(e,n,t);else if(e.tag===19)Rv(e,n,t);else if(e.child!==null){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;e.sibling===null;){if(e.return===null||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(We(nt,r),!(t.mode&1))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;n!==null;)e=n.alternate,e!==null&&Wu(e)===null&&(o=n),n=n.sibling;n=o,n===null?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),af(t,!1,o,n,i);break;case"backwards":for(n=null,o=t.child,t.child=null;o!==null;){if(e=o.alternate,e!==null&&Wu(e)===null){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}af(t,!0,n,null,i);break;case"together":af(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function fu(e,t){!(t.mode&1)&&e!==null&&(e.alternate=null,t.alternate=null,t.flags|=2)}function _r(e,t,n){if(e!==null&&(t.dependencies=e.dependencies),Ko|=t.lanes,!(n&t.childLanes))return null;if(e!==null&&t.child!==e.child)throw Error(W(153));if(t.child!==null){for(e=t.child,n=uo(e,e.pendingProps),t.child=n,n.return=t;e.sibling!==null;)e=e.sibling,n=n.sibling=uo(e,e.pendingProps),n.return=t;n.sibling=null}return t.child}function JE(e,t,n){switch(t.tag){case 3:Vx(t),Ki();break;case 5:xx(t);break;case 1:on(t.type)&&Iu(t);break;case 4:Wh(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,o=t.memoizedProps.value;We(zu,r._currentValue),r._currentValue=o;break;case 13:if(r=t.memoizedState,r!==null)return r.dehydrated!==null?(We(nt,nt.current&1),t.flags|=128,null):n&t.child.childLanes?Kx(e,t,n):(We(nt,nt.current&1),e=_r(e,t,n),e!==null?e.sibling:null);We(nt,nt.current&1);break;case 19:if(r=(n&t.childLanes)!==0,e.flags&128){if(r)return qx(e,t,n);t.flags|=128}if(o=t.memoizedState,o!==null&&(o.rendering=null,o.tail=null,o.lastEffect=null),We(nt,nt.current),r)break;return null;case 22:case 23:return t.lanes=0,Wx(e,t,n)}return _r(e,t,n)}var Gx,Sp,Xx,Qx;Gx=function(e,t){for(var n=t.child;n!==null;){if(n.tag===5||n.tag===6)e.appendChild(n.stateNode);else if(n.tag!==4&&n.child!==null){n.child.return=n,n=n.child;continue}if(n===t)break;for(;n.sibling===null;){if(n.return===null||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}};Sp=function(){};Xx=function(e,t,n,r){var o=e.memoizedProps;if(o!==r){e=t.stateNode,_o(gr.current);var i=null;switch(n){case"input":o=Hf(e,o),r=Hf(e,r),i=[];break;case"select":o=ot({},o,{value:void 0}),r=ot({},r,{value:void 0}),i=[];break;case"textarea":o=qf(e,o),r=qf(e,r),i=[];break;default:typeof o.onClick!="function"&&typeof r.onClick=="function"&&(e.onclick=Au)}Xf(n,r);var a;n=null;for(u in o)if(!r.hasOwnProperty(u)&&o.hasOwnProperty(u)&&o[u]!=null)if(u==="style"){var s=o[u];for(a in s)s.hasOwnProperty(a)&&(n||(n={}),n[a]="")}else u!=="dangerouslySetInnerHTML"&&u!=="children"&&u!=="suppressContentEditableWarning"&&u!=="suppressHydrationWarning"&&u!=="autoFocus"&&(ys.hasOwnProperty(u)?i||(i=[]):(i=i||[]).push(u,null));for(u in r){var l=r[u];if(s=o!=null?o[u]:void 0,r.hasOwnProperty(u)&&l!==s&&(l!=null||s!=null))if(u==="style")if(s){for(a in s)!s.hasOwnProperty(a)||l&&l.hasOwnProperty(a)||(n||(n={}),n[a]="");for(a in l)l.hasOwnProperty(a)&&s[a]!==l[a]&&(n||(n={}),n[a]=l[a])}else n||(i||(i=[]),i.push(u,n)),n=l;else u==="dangerouslySetInnerHTML"?(l=l?l.__html:void 0,s=s?s.__html:void 0,l!=null&&s!==l&&(i=i||[]).push(u,l)):u==="children"?typeof l!="string"&&typeof l!="number"||(i=i||[]).push(u,""+l):u!=="suppressContentEditableWarning"&&u!=="suppressHydrationWarning"&&(ys.hasOwnProperty(u)?(l!=null&&u==="onScroll"&&Ke("scroll",e),i||s===l||(i=[])):(i=i||[]).push(u,l))}n&&(i=i||[]).push("style",n);var u=i;(t.updateQueue=u)&&(t.flags|=4)}};Qx=function(e,t,n,r){n!==r&&(t.flags|=4)};function Ma(e,t){if(!Je)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;t!==null;)t.alternate!==null&&(n=t),t=t.sibling;n===null?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;n!==null;)n.alternate!==null&&(r=n),n=n.sibling;r===null?t||e.tail===null?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Bt(e){var t=e.alternate!==null&&e.alternate.child===e.child,n=0,r=0;if(t)for(var o=e.child;o!==null;)n|=o.lanes|o.childLanes,r|=o.subtreeFlags&14680064,r|=o.flags&14680064,o.return=e,o=o.sibling;else for(o=e.child;o!==null;)n|=o.lanes|o.childLanes,r|=o.subtreeFlags,r|=o.flags,o.return=e,o=o.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function ZE(e,t,n){var r=t.pendingProps;switch(Lh(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Bt(t),null;case 1:return on(t.type)&&Lu(),Bt(t),null;case 3:return r=t.stateNode,Gi(),qe(rn),qe(Vt),Vh(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),(e===null||e.child===null)&&(Wl(t)?t.flags|=4:e===null||e.memoizedState.isDehydrated&&!(t.flags&256)||(t.flags|=1024,Zn!==null&&(Op(Zn),Zn=null))),Sp(e,t),Bt(t),null;case 5:Hh(t);var o=_o(Os.current);if(n=t.type,e!==null&&t.stateNode!=null)Xx(e,t,n,r,o),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(t.stateNode===null)throw Error(W(166));return Bt(t),null}if(e=_o(gr.current),Wl(t)){r=t.stateNode,n=t.type;var i=t.memoizedProps;switch(r[hr]=t,r[Ts]=i,e=(t.mode&1)!==0,n){case"dialog":Ke("cancel",r),Ke("close",r);break;case"iframe":case"object":case"embed":Ke("load",r);break;case"video":case"audio":for(o=0;o<Qa.length;o++)Ke(Qa[o],r);break;case"source":Ke("error",r);break;case"img":case"image":case"link":Ke("error",r),Ke("load",r);break;case"details":Ke("toggle",r);break;case"input":Ng(r,i),Ke("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!i.multiple},Ke("invalid",r);break;case"textarea":Lg(r,i),Ke("invalid",r)}Xf(n,i),o=null;for(var a in i)if(i.hasOwnProperty(a)){var s=i[a];a==="children"?typeof s=="string"?r.textContent!==s&&(i.suppressHydrationWarning!==!0&&Ul(r.textContent,s,e),o=["children",s]):typeof s=="number"&&r.textContent!==""+s&&(i.suppressHydrationWarning!==!0&&Ul(r.textContent,s,e),o=["children",""+s]):ys.hasOwnProperty(a)&&s!=null&&a==="onScroll"&&Ke("scroll",r)}switch(n){case"input":Nl(r),Ag(r,i,!0);break;case"textarea":Nl(r),Ig(r);break;case"select":case"option":break;default:typeof i.onClick=="function"&&(r.onclick=Au)}r=o,t.updateQueue=r,r!==null&&(t.flags|=4)}else{a=o.nodeType===9?o:o.ownerDocument,e==="http://www.w3.org/1999/xhtml"&&(e=E1(n)),e==="http://www.w3.org/1999/xhtml"?n==="script"?(e=a.createElement("div"),e.innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):typeof r.is=="string"?e=a.createElement(n,{is:r.is}):(e=a.createElement(n),n==="select"&&(a=e,r.multiple?a.multiple=!0:r.size&&(a.size=r.size))):e=a.createElementNS(e,n),e[hr]=t,e[Ts]=r,Gx(e,t,!1,!1),t.stateNode=e;e:{switch(a=Qf(n,r),n){case"dialog":Ke("cancel",e),Ke("close",e),o=r;break;case"iframe":case"object":case"embed":Ke("load",e),o=r;break;case"video":case"audio":for(o=0;o<Qa.length;o++)Ke(Qa[o],e);o=r;break;case"source":Ke("error",e),o=r;break;case"img":case"image":case"link":Ke("error",e),Ke("load",e),o=r;break;case"details":Ke("toggle",e),o=r;break;case"input":Ng(e,r),o=Hf(e,r),Ke("invalid",e);break;case"option":o=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},o=ot({},r,{value:void 0}),Ke("invalid",e);break;case"textarea":Lg(e,r),o=qf(e,r),Ke("invalid",e);break;default:o=r}Xf(n,o),s=o;for(i in s)if(s.hasOwnProperty(i)){var l=s[i];i==="style"?k1(e,l):i==="dangerouslySetInnerHTML"?(l=l?l.__html:void 0,l!=null&&R1(e,l)):i==="children"?typeof l=="string"?(n!=="textarea"||l!=="")&&xs(e,l):typeof l=="number"&&xs(e,""+l):i!=="suppressContentEditableWarning"&&i!=="suppressHydrationWarning"&&i!=="autoFocus"&&(ys.hasOwnProperty(i)?l!=null&&i==="onScroll"&&Ke("scroll",e):l!=null&&wh(e,i,l,a))}switch(n){case"input":Nl(e),Ag(e,r,!1);break;case"textarea":Nl(e),Ig(e);break;case"option":r.value!=null&&e.setAttribute("value",""+fo(r.value));break;case"select":e.multiple=!!r.multiple,i=r.value,i!=null?Mi(e,!!r.multiple,i,!1):r.defaultValue!=null&&Mi(e,!!r.multiple,r.defaultValue,!0);break;default:typeof o.onClick=="function"&&(e.onclick=Au)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}t.ref!==null&&(t.flags|=512,t.flags|=2097152)}return Bt(t),null;case 6:if(e&&t.stateNode!=null)Qx(e,t,e.memoizedProps,r);else{if(typeof r!="string"&&t.stateNode===null)throw Error(W(166));if(n=_o(Os.current),_o(gr.current),Wl(t)){if(r=t.stateNode,n=t.memoizedProps,r[hr]=t,(i=r.nodeValue!==n)&&(e=gn,e!==null))switch(e.tag){case 3:Ul(r.nodeValue,n,(e.mode&1)!==0);break;case 5:e.memoizedProps.suppressHydrationWarning!==!0&&Ul(r.nodeValue,n,(e.mode&1)!==0)}i&&(t.flags|=4)}else r=(n.nodeType===9?n:n.ownerDocument).createTextNode(r),r[hr]=t,t.stateNode=r}return Bt(t),null;case 13:if(qe(nt),r=t.memoizedState,e===null||e.memoizedState!==null&&e.memoizedState.dehydrated!==null){if(Je&&mn!==null&&t.mode&1&&!(t.flags&128))hx(),Ki(),t.flags|=98560,i=!1;else if(i=Wl(t),r!==null&&r.dehydrated!==null){if(e===null){if(!i)throw Error(W(318));if(i=t.memoizedState,i=i!==null?i.dehydrated:null,!i)throw Error(W(317));i[hr]=t}else Ki(),!(t.flags&128)&&(t.memoizedState=null),t.flags|=4;Bt(t),i=!1}else Zn!==null&&(Op(Zn),Zn=null),i=!0;if(!i)return t.flags&65536?t:null}return t.flags&128?(t.lanes=n,t):(r=r!==null,r!==(e!==null&&e.memoizedState!==null)&&r&&(t.child.flags|=8192,t.mode&1&&(e===null||nt.current&1?Rt===0&&(Rt=3):rm())),t.updateQueue!==null&&(t.flags|=4),Bt(t),null);case 4:return Gi(),Sp(e,t),e===null&&Ps(t.stateNode.containerInfo),Bt(t),null;case 10:return zh(t.type._context),Bt(t),null;case 17:return on(t.type)&&Lu(),Bt(t),null;case 19:if(qe(nt),i=t.memoizedState,i===null)return Bt(t),null;if(r=(t.flags&128)!==0,a=i.rendering,a===null)if(r)Ma(i,!1);else{if(Rt!==0||e!==null&&e.flags&128)for(e=t.child;e!==null;){if(a=Wu(e),a!==null){for(t.flags|=128,Ma(i,!1),r=a.updateQueue,r!==null&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;n!==null;)i=n,e=r,i.flags&=14680066,a=i.alternate,a===null?(i.childLanes=0,i.lanes=e,i.child=null,i.subtreeFlags=0,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=a.childLanes,i.lanes=a.lanes,i.child=a.child,i.subtreeFlags=0,i.deletions=null,i.memoizedProps=a.memoizedProps,i.memoizedState=a.memoizedState,i.updateQueue=a.updateQueue,i.type=a.type,e=a.dependencies,i.dependencies=e===null?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return We(nt,nt.current&1|2),t.child}e=e.sibling}i.tail!==null&&ht()>Qi&&(t.flags|=128,r=!0,Ma(i,!1),t.lanes=4194304)}else{if(!r)if(e=Wu(a),e!==null){if(t.flags|=128,r=!0,n=e.updateQueue,n!==null&&(t.updateQueue=n,t.flags|=4),Ma(i,!0),i.tail===null&&i.tailMode==="hidden"&&!a.alternate&&!Je)return Bt(t),null}else 2*ht()-i.renderingStartTime>Qi&&n!==1073741824&&(t.flags|=128,r=!0,Ma(i,!1),t.lanes=4194304);i.isBackwards?(a.sibling=t.child,t.child=a):(n=i.last,n!==null?n.sibling=a:t.child=a,i.last=a)}return i.tail!==null?(t=i.tail,i.rendering=t,i.tail=t.sibling,i.renderingStartTime=ht(),t.sibling=null,n=nt.current,We(nt,r?n&1|2:n&1),t):(Bt(t),null);case 22:case 23:return nm(),r=t.memoizedState!==null,e!==null&&e.memoizedState!==null!==r&&(t.flags|=8192),r&&t.mode&1?fn&1073741824&&(Bt(t),t.subtreeFlags&6&&(t.flags|=8192)):Bt(t),null;case 24:return null;case 25:return null}throw Error(W(156,t.tag))}function eR(e,t){switch(Lh(t),t.tag){case 1:return on(t.type)&&Lu(),e=t.flags,e&65536?(t.flags=e&-65537|128,t):null;case 3:return Gi(),qe(rn),qe(Vt),Vh(),e=t.flags,e&65536&&!(e&128)?(t.flags=e&-65537|128,t):null;case 5:return Hh(t),null;case 13:if(qe(nt),e=t.memoizedState,e!==null&&e.dehydrated!==null){if(t.alternate===null)throw Error(W(340));Ki()}return e=t.flags,e&65536?(t.flags=e&-65537|128,t):null;case 19:return qe(nt),null;case 4:return Gi(),null;case 10:return zh(t.type._context),null;case 22:case 23:return nm(),null;case 24:return null;default:return null}}var Kl=!1,Wt=!1,tR=typeof WeakSet=="function"?WeakSet:Set,J=null;function Pi(e,t){var n=e.ref;if(n!==null)if(typeof n=="function")try{n(null)}catch(r){ut(e,t,r)}else n.current=null}function Cp(e,t,n){try{n()}catch(r){ut(e,t,r)}}var Pv=!1;function nR(e,t){if(ap=_u,e=tx(),Nh(e)){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{n=(n=e.ownerDocument)&&n.defaultView||window;var r=n.getSelection&&n.getSelection();if(r&&r.rangeCount!==0){n=r.anchorNode;var o=r.anchorOffset,i=r.focusNode;r=r.focusOffset;try{n.nodeType,i.nodeType}catch{n=null;break e}var a=0,s=-1,l=-1,u=0,c=0,d=e,f=null;t:for(;;){for(var g;d!==n||o!==0&&d.nodeType!==3||(s=a+o),d!==i||r!==0&&d.nodeType!==3||(l=a+r),d.nodeType===3&&(a+=d.nodeValue.length),(g=d.firstChild)!==null;)f=d,d=g;for(;;){if(d===e)break t;if(f===n&&++u===o&&(s=a),f===i&&++c===r&&(l=a),(g=d.nextSibling)!==null)break;d=f,f=d.parentNode}d=g}n=s===-1||l===-1?null:{start:s,end:l}}else n=null}n=n||{start:0,end:0}}else n=null;for(sp={focusedElem:e,selectionRange:n},_u=!1,J=t;J!==null;)if(t=J,e=t.child,(t.subtreeFlags&1028)!==0&&e!==null)e.return=t,J=e;else for(;J!==null;){t=J;try{var p=t.alternate;if(t.flags&1024)switch(t.tag){case 0:case 11:case 15:break;case 1:if(p!==null){var h=p.memoizedProps,C=p.memoizedState,m=t.stateNode,y=m.getSnapshotBeforeUpdate(t.elementType===t.type?h:Qn(t.type,h),C);m.__reactInternalSnapshotBeforeUpdate=y}break;case 3:var v=t.stateNode.containerInfo;v.nodeType===1?v.textContent="":v.nodeType===9&&v.documentElement&&v.removeChild(v.documentElement);break;case 5:case 6:case 4:case 17:break;default:throw Error(W(163))}}catch(w){ut(t,t.return,w)}if(e=t.sibling,e!==null){e.return=t.return,J=e;break}J=t.return}return p=Pv,Pv=!1,p}function as(e,t,n){var r=t.updateQueue;if(r=r!==null?r.lastEffect:null,r!==null){var o=r=r.next;do{if((o.tag&e)===e){var i=o.destroy;o.destroy=void 0,i!==void 0&&Cp(t,n,i)}o=o.next}while(o!==r)}}function Ec(e,t){if(t=t.updateQueue,t=t!==null?t.lastEffect:null,t!==null){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function Ep(e){var t=e.ref;if(t!==null){var n=e.stateNode;switch(e.tag){case 5:e=n;break;default:e=n}typeof t=="function"?t(e):t.current=e}}function Yx(e){var t=e.alternate;t!==null&&(e.alternate=null,Yx(t)),e.child=null,e.deletions=null,e.sibling=null,e.tag===5&&(t=e.stateNode,t!==null&&(delete t[hr],delete t[Ts],delete t[cp],delete t[FE],delete t[DE])),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function Jx(e){return e.tag===5||e.tag===3||e.tag===4}function kv(e){e:for(;;){for(;e.sibling===null;){if(e.return===null||Jx(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;e.tag!==5&&e.tag!==6&&e.tag!==18;){if(e.flags&2||e.child===null||e.tag===4)continue e;e.child.return=e,e=e.child}if(!(e.flags&2))return e.stateNode}}function Rp(e,t,n){var r=e.tag;if(r===5||r===6)e=e.stateNode,t?n.nodeType===8?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(n.nodeType===8?(t=n.parentNode,t.insertBefore(e,n)):(t=n,t.appendChild(e)),n=n._reactRootContainer,n!=null||t.onclick!==null||(t.onclick=Au));else if(r!==4&&(e=e.child,e!==null))for(Rp(e,t,n),e=e.sibling;e!==null;)Rp(e,t,n),e=e.sibling}function Pp(e,t,n){var r=e.tag;if(r===5||r===6)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(r!==4&&(e=e.child,e!==null))for(Pp(e,t,n),e=e.sibling;e!==null;)Pp(e,t,n),e=e.sibling}var Lt=null,Yn=!1;function Ur(e,t,n){for(n=n.child;n!==null;)Zx(e,t,n),n=n.sibling}function Zx(e,t,n){if(mr&&typeof mr.onCommitFiberUnmount=="function")try{mr.onCommitFiberUnmount(gc,n)}catch{}switch(n.tag){case 5:Wt||Pi(n,t);case 6:var r=Lt,o=Yn;Lt=null,Ur(e,t,n),Lt=r,Yn=o,Lt!==null&&(Yn?(e=Lt,n=n.stateNode,e.nodeType===8?e.parentNode.removeChild(n):e.removeChild(n)):Lt.removeChild(n.stateNode));break;case 18:Lt!==null&&(Yn?(e=Lt,n=n.stateNode,e.nodeType===8?Jd(e.parentNode,n):e.nodeType===1&&Jd(e,n),Cs(e)):Jd(Lt,n.stateNode));break;case 4:r=Lt,o=Yn,Lt=n.stateNode.containerInfo,Yn=!0,Ur(e,t,n),Lt=r,Yn=o;break;case 0:case 11:case 14:case 15:if(!Wt&&(r=n.updateQueue,r!==null&&(r=r.lastEffect,r!==null))){o=r=r.next;do{var i=o,a=i.destroy;i=i.tag,a!==void 0&&(i&2||i&4)&&Cp(n,t,a),o=o.next}while(o!==r)}Ur(e,t,n);break;case 1:if(!Wt&&(Pi(n,t),r=n.stateNode,typeof r.componentWillUnmount=="function"))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(s){ut(n,t,s)}Ur(e,t,n);break;case 21:Ur(e,t,n);break;case 22:n.mode&1?(Wt=(r=Wt)||n.memoizedState!==null,Ur(e,t,n),Wt=r):Ur(e,t,n);break;default:Ur(e,t,n)}}function Tv(e){var t=e.updateQueue;if(t!==null){e.updateQueue=null;var n=e.stateNode;n===null&&(n=e.stateNode=new tR),t.forEach(function(r){var o=dR.bind(null,e,r);n.has(r)||(n.add(r),r.then(o,o))})}}function Xn(e,t){var n=t.deletions;if(n!==null)for(var r=0;r<n.length;r++){var o=n[r];try{var i=e,a=t,s=a;e:for(;s!==null;){switch(s.tag){case 5:Lt=s.stateNode,Yn=!1;break e;case 3:Lt=s.stateNode.containerInfo,Yn=!0;break e;case 4:Lt=s.stateNode.containerInfo,Yn=!0;break e}s=s.return}if(Lt===null)throw Error(W(160));Zx(i,a,o),Lt=null,Yn=!1;var l=o.alternate;l!==null&&(l.return=null),o.return=null}catch(u){ut(o,t,u)}}if(t.subtreeFlags&12854)for(t=t.child;t!==null;)eb(t,e),t=t.sibling}function eb(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(Xn(t,e),cr(e),r&4){try{as(3,e,e.return),Ec(3,e)}catch(h){ut(e,e.return,h)}try{as(5,e,e.return)}catch(h){ut(e,e.return,h)}}break;case 1:Xn(t,e),cr(e),r&512&&n!==null&&Pi(n,n.return);break;case 5:if(Xn(t,e),cr(e),r&512&&n!==null&&Pi(n,n.return),e.flags&32){var o=e.stateNode;try{xs(o,"")}catch(h){ut(e,e.return,h)}}if(r&4&&(o=e.stateNode,o!=null)){var i=e.memoizedProps,a=n!==null?n.memoizedProps:i,s=e.type,l=e.updateQueue;if(e.updateQueue=null,l!==null)try{s==="input"&&i.type==="radio"&&i.name!=null&&S1(o,i),Qf(s,a);var u=Qf(s,i);for(a=0;a<l.length;a+=2){var c=l[a],d=l[a+1];c==="style"?k1(o,d):c==="dangerouslySetInnerHTML"?R1(o,d):c==="children"?xs(o,d):wh(o,c,d,u)}switch(s){case"input":Vf(o,i);break;case"textarea":C1(o,i);break;case"select":var f=o._wrapperState.wasMultiple;o._wrapperState.wasMultiple=!!i.multiple;var g=i.value;g!=null?Mi(o,!!i.multiple,g,!1):f!==!!i.multiple&&(i.defaultValue!=null?Mi(o,!!i.multiple,i.defaultValue,!0):Mi(o,!!i.multiple,i.multiple?[]:"",!1))}o[Ts]=i}catch(h){ut(e,e.return,h)}}break;case 6:if(Xn(t,e),cr(e),r&4){if(e.stateNode===null)throw Error(W(162));o=e.stateNode,i=e.memoizedProps;try{o.nodeValue=i}catch(h){ut(e,e.return,h)}}break;case 3:if(Xn(t,e),cr(e),r&4&&n!==null&&n.memoizedState.isDehydrated)try{Cs(t.containerInfo)}catch(h){ut(e,e.return,h)}break;case 4:Xn(t,e),cr(e);break;case 13:Xn(t,e),cr(e),o=e.child,o.flags&8192&&(i=o.memoizedState!==null,o.stateNode.isHidden=i,!i||o.alternate!==null&&o.alternate.memoizedState!==null||(em=ht())),r&4&&Tv(e);break;case 22:if(c=n!==null&&n.memoizedState!==null,e.mode&1?(Wt=(u=Wt)||c,Xn(t,e),Wt=u):Xn(t,e),cr(e),r&8192){if(u=e.memoizedState!==null,(e.stateNode.isHidden=u)&&!c&&e.mode&1)for(J=e,c=e.child;c!==null;){for(d=J=c;J!==null;){switch(f=J,g=f.child,f.tag){case 0:case 11:case 14:case 15:as(4,f,f.return);break;case 1:Pi(f,f.return);var p=f.stateNode;if(typeof p.componentWillUnmount=="function"){r=f,n=f.return;try{t=r,p.props=t.memoizedProps,p.state=t.memoizedState,p.componentWillUnmount()}catch(h){ut(r,n,h)}}break;case 5:Pi(f,f.return);break;case 22:if(f.memoizedState!==null){Ov(d);continue}}g!==null?(g.return=f,J=g):Ov(d)}c=c.sibling}e:for(c=null,d=e;;){if(d.tag===5){if(c===null){c=d;try{o=d.stateNode,u?(i=o.style,typeof i.setProperty=="function"?i.setProperty("display","none","important"):i.display="none"):(s=d.stateNode,l=d.memoizedProps.style,a=l!=null&&l.hasOwnProperty("display")?l.display:null,s.style.display=P1("display",a))}catch(h){ut(e,e.return,h)}}}else if(d.tag===6){if(c===null)try{d.stateNode.nodeValue=u?"":d.memoizedProps}catch(h){ut(e,e.return,h)}}else if((d.tag!==22&&d.tag!==23||d.memoizedState===null||d===e)&&d.child!==null){d.child.return=d,d=d.child;continue}if(d===e)break e;for(;d.sibling===null;){if(d.return===null||d.return===e)break e;c===d&&(c=null),d=d.return}c===d&&(c=null),d.sibling.return=d.return,d=d.sibling}}break;case 19:Xn(t,e),cr(e),r&4&&Tv(e);break;case 21:break;default:Xn(t,e),cr(e)}}function cr(e){var t=e.flags;if(t&2){try{e:{for(var n=e.return;n!==null;){if(Jx(n)){var r=n;break e}n=n.return}throw Error(W(160))}switch(r.tag){case 5:var o=r.stateNode;r.flags&32&&(xs(o,""),r.flags&=-33);var i=kv(e);Pp(e,i,o);break;case 3:case 4:var a=r.stateNode.containerInfo,s=kv(e);Rp(e,s,a);break;default:throw Error(W(161))}}catch(l){ut(e,e.return,l)}e.flags&=-3}t&4096&&(e.flags&=-4097)}function rR(e,t,n){J=e,tb(e)}function tb(e,t,n){for(var r=(e.mode&1)!==0;J!==null;){var o=J,i=o.child;if(o.tag===22&&r){var a=o.memoizedState!==null||Kl;if(!a){var s=o.alternate,l=s!==null&&s.memoizedState!==null||Wt;s=Kl;var u=Wt;if(Kl=a,(Wt=l)&&!u)for(J=o;J!==null;)a=J,l=a.child,a.tag===22&&a.memoizedState!==null?Mv(o):l!==null?(l.return=a,J=l):Mv(o);for(;i!==null;)J=i,tb(i),i=i.sibling;J=o,Kl=s,Wt=u}$v(e)}else o.subtreeFlags&8772&&i!==null?(i.return=o,J=i):$v(e)}}function $v(e){for(;J!==null;){var t=J;if(t.flags&8772){var n=t.alternate;try{if(t.flags&8772)switch(t.tag){case 0:case 11:case 15:Wt||Ec(5,t);break;case 1:var r=t.stateNode;if(t.flags&4&&!Wt)if(n===null)r.componentDidMount();else{var o=t.elementType===t.type?n.memoizedProps:Qn(t.type,n.memoizedProps);r.componentDidUpdate(o,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var i=t.updateQueue;i!==null&&pv(t,i,r);break;case 3:var a=t.updateQueue;if(a!==null){if(n=null,t.child!==null)switch(t.child.tag){case 5:n=t.child.stateNode;break;case 1:n=t.child.stateNode}pv(t,a,n)}break;case 5:var s=t.stateNode;if(n===null&&t.flags&4){n=s;var l=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":l.autoFocus&&n.focus();break;case"img":l.src&&(n.src=l.src)}}break;case 6:break;case 4:break;case 12:break;case 13:if(t.memoizedState===null){var u=t.alternate;if(u!==null){var c=u.memoizedState;if(c!==null){var d=c.dehydrated;d!==null&&Cs(d)}}}break;case 19:case 17:case 21:case 22:case 23:case 25:break;default:throw Error(W(163))}Wt||t.flags&512&&Ep(t)}catch(f){ut(t,t.return,f)}}if(t===e){J=null;break}if(n=t.sibling,n!==null){n.return=t.return,J=n;break}J=t.return}}function Ov(e){for(;J!==null;){var t=J;if(t===e){J=null;break}var n=t.sibling;if(n!==null){n.return=t.return,J=n;break}J=t.return}}function Mv(e){for(;J!==null;){var t=J;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{Ec(4,t)}catch(l){ut(t,n,l)}break;case 1:var r=t.stateNode;if(typeof r.componentDidMount=="function"){var o=t.return;try{r.componentDidMount()}catch(l){ut(t,o,l)}}var i=t.return;try{Ep(t)}catch(l){ut(t,i,l)}break;case 5:var a=t.return;try{Ep(t)}catch(l){ut(t,a,l)}}}catch(l){ut(t,t.return,l)}if(t===e){J=null;break}var s=t.sibling;if(s!==null){s.return=t.return,J=s;break}J=t.return}}var oR=Math.ceil,Ku=Ir.ReactCurrentDispatcher,Jh=Ir.ReactCurrentOwner,Ln=Ir.ReactCurrentBatchConfig,Me=0,Mt=null,bt=null,Ft=0,fn=0,ki=vo(0),Rt=0,Ns=null,Ko=0,Rc=0,Zh=0,ss=null,tn=null,em=0,Qi=1/0,wr=null,qu=!1,kp=null,so=null,ql=!1,eo=null,Gu=0,ls=0,Tp=null,pu=-1,hu=0;function Xt(){return Me&6?ht():pu!==-1?pu:pu=ht()}function lo(e){return e.mode&1?Me&2&&Ft!==0?Ft&-Ft:BE.transition!==null?(hu===0&&(hu=D1()),hu):(e=Le,e!==0||(e=window.event,e=e===void 0?16:K1(e.type)),e):1}function nr(e,t,n,r){if(50<ls)throw ls=0,Tp=null,Error(W(185));Js(e,n,r),(!(Me&2)||e!==Mt)&&(e===Mt&&(!(Me&2)&&(Rc|=n),Rt===4&&Yr(e,Ft)),an(e,r),n===1&&Me===0&&!(t.mode&1)&&(Qi=ht()+500,wc&&yo()))}function an(e,t){var n=e.callbackNode;BC(e,t);var r=Mu(e,e===Mt?Ft:0);if(r===0)n!==null&&zg(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(n!=null&&zg(n),t===1)e.tag===0?zE(_v.bind(null,e)):dx(_v.bind(null,e)),LE(function(){!(Me&6)&&yo()}),n=null;else{switch(z1(r)){case 1:n=Ph;break;case 4:n=I1;break;case 16:n=Ou;break;case 536870912:n=F1;break;default:n=Ou}n=ub(n,nb.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function nb(e,t){if(pu=-1,hu=0,Me&6)throw Error(W(327));var n=e.callbackNode;if(Li()&&e.callbackNode!==n)return null;var r=Mu(e,e===Mt?Ft:0);if(r===0)return null;if(r&30||r&e.expiredLanes||t)t=Xu(e,r);else{t=r;var o=Me;Me|=2;var i=ob();(Mt!==e||Ft!==t)&&(wr=null,Qi=ht()+500,Io(e,t));do try{sR();break}catch(s){rb(e,s)}while(!0);Dh(),Ku.current=i,Me=o,bt!==null?t=0:(Mt=null,Ft=0,t=Rt)}if(t!==0){if(t===2&&(o=tp(e),o!==0&&(r=o,t=$p(e,o))),t===1)throw n=Ns,Io(e,0),Yr(e,r),an(e,ht()),n;if(t===6)Yr(e,r);else{if(o=e.current.alternate,!(r&30)&&!iR(o)&&(t=Xu(e,r),t===2&&(i=tp(e),i!==0&&(r=i,t=$p(e,i))),t===1))throw n=Ns,Io(e,0),Yr(e,r),an(e,ht()),n;switch(e.finishedWork=o,e.finishedLanes=r,t){case 0:case 1:throw Error(W(345));case 2:Ro(e,tn,wr);break;case 3:if(Yr(e,r),(r&130023424)===r&&(t=em+500-ht(),10<t)){if(Mu(e,0)!==0)break;if(o=e.suspendedLanes,(o&r)!==r){Xt(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=up(Ro.bind(null,e,tn,wr),t);break}Ro(e,tn,wr);break;case 4:if(Yr(e,r),(r&4194240)===r)break;for(t=e.eventTimes,o=-1;0<r;){var a=31-tr(r);i=1<<a,a=t[a],a>o&&(o=a),r&=~i}if(r=o,r=ht()-r,r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*oR(r/1960))-r,10<r){e.timeoutHandle=up(Ro.bind(null,e,tn,wr),r);break}Ro(e,tn,wr);break;case 5:Ro(e,tn,wr);break;default:throw Error(W(329))}}}return an(e,ht()),e.callbackNode===n?nb.bind(null,e):null}function $p(e,t){var n=ss;return e.current.memoizedState.isDehydrated&&(Io(e,t).flags|=256),e=Xu(e,t),e!==2&&(t=tn,tn=n,t!==null&&Op(t)),e}function Op(e){tn===null?tn=e:tn.push.apply(tn,e)}function iR(e){for(var t=e;;){if(t.flags&16384){var n=t.updateQueue;if(n!==null&&(n=n.stores,n!==null))for(var r=0;r<n.length;r++){var o=n[r],i=o.getSnapshot;o=o.value;try{if(!or(i(),o))return!1}catch{return!1}}}if(n=t.child,t.subtreeFlags&16384&&n!==null)n.return=t,t=n;else{if(t===e)break;for(;t.sibling===null;){if(t.return===null||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}function Yr(e,t){for(t&=~Zh,t&=~Rc,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-tr(t),r=1<<n;e[n]=-1,t&=~r}}function _v(e){if(Me&6)throw Error(W(327));Li();var t=Mu(e,0);if(!(t&1))return an(e,ht()),null;var n=Xu(e,t);if(e.tag!==0&&n===2){var r=tp(e);r!==0&&(t=r,n=$p(e,r))}if(n===1)throw n=Ns,Io(e,0),Yr(e,t),an(e,ht()),n;if(n===6)throw Error(W(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,Ro(e,tn,wr),an(e,ht()),null}function tm(e,t){var n=Me;Me|=1;try{return e(t)}finally{Me=n,Me===0&&(Qi=ht()+500,wc&&yo())}}function qo(e){eo!==null&&eo.tag===0&&!(Me&6)&&Li();var t=Me;Me|=1;var n=Ln.transition,r=Le;try{if(Ln.transition=null,Le=1,e)return e()}finally{Le=r,Ln.transition=n,Me=t,!(Me&6)&&yo()}}function nm(){fn=ki.current,qe(ki)}function Io(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(n!==-1&&(e.timeoutHandle=-1,AE(n)),bt!==null)for(n=bt.return;n!==null;){var r=n;switch(Lh(r),r.tag){case 1:r=r.type.childContextTypes,r!=null&&Lu();break;case 3:Gi(),qe(rn),qe(Vt),Vh();break;case 5:Hh(r);break;case 4:Gi();break;case 13:qe(nt);break;case 19:qe(nt);break;case 10:zh(r.type._context);break;case 22:case 23:nm()}n=n.return}if(Mt=e,bt=e=uo(e.current,null),Ft=fn=t,Rt=0,Ns=null,Zh=Rc=Ko=0,tn=ss=null,Mo!==null){for(t=0;t<Mo.length;t++)if(n=Mo[t],r=n.interleaved,r!==null){n.interleaved=null;var o=r.next,i=n.pending;if(i!==null){var a=i.next;i.next=o,r.next=a}n.pending=r}Mo=null}return e}function rb(e,t){do{var n=bt;try{if(Dh(),cu.current=Vu,Hu){for(var r=rt.memoizedState;r!==null;){var o=r.queue;o!==null&&(o.pending=null),r=r.next}Hu=!1}if(Vo=0,$t=Et=rt=null,is=!1,Ms=0,Jh.current=null,n===null||n.return===null){Rt=1,Ns=t,bt=null;break}e:{var i=e,a=n.return,s=n,l=t;if(t=Ft,s.flags|=32768,l!==null&&typeof l=="object"&&typeof l.then=="function"){var u=l,c=s,d=c.tag;if(!(c.mode&1)&&(d===0||d===11||d===15)){var f=c.alternate;f?(c.updateQueue=f.updateQueue,c.memoizedState=f.memoizedState,c.lanes=f.lanes):(c.updateQueue=null,c.memoizedState=null)}var g=xv(a);if(g!==null){g.flags&=-257,bv(g,a,s,i,t),g.mode&1&&yv(i,u,t),t=g,l=u;var p=t.updateQueue;if(p===null){var h=new Set;h.add(l),t.updateQueue=h}else p.add(l);break e}else{if(!(t&1)){yv(i,u,t),rm();break e}l=Error(W(426))}}else if(Je&&s.mode&1){var C=xv(a);if(C!==null){!(C.flags&65536)&&(C.flags|=256),bv(C,a,s,i,t),Ih(Xi(l,s));break e}}i=l=Xi(l,s),Rt!==4&&(Rt=2),ss===null?ss=[i]:ss.push(i),i=a;do{switch(i.tag){case 3:i.flags|=65536,t&=-t,i.lanes|=t;var m=zx(i,l,t);fv(i,m);break e;case 1:s=l;var y=i.type,v=i.stateNode;if(!(i.flags&128)&&(typeof y.getDerivedStateFromError=="function"||v!==null&&typeof v.componentDidCatch=="function"&&(so===null||!so.has(v)))){i.flags|=65536,t&=-t,i.lanes|=t;var w=Bx(i,s,t);fv(i,w);break e}}i=i.return}while(i!==null)}ab(n)}catch(R){t=R,bt===n&&n!==null&&(bt=n=n.return);continue}break}while(!0)}function ob(){var e=Ku.current;return Ku.current=Vu,e===null?Vu:e}function rm(){(Rt===0||Rt===3||Rt===2)&&(Rt=4),Mt===null||!(Ko&268435455)&&!(Rc&268435455)||Yr(Mt,Ft)}function Xu(e,t){var n=Me;Me|=2;var r=ob();(Mt!==e||Ft!==t)&&(wr=null,Io(e,t));do try{aR();break}catch(o){rb(e,o)}while(!0);if(Dh(),Me=n,Ku.current=r,bt!==null)throw Error(W(261));return Mt=null,Ft=0,Rt}function aR(){for(;bt!==null;)ib(bt)}function sR(){for(;bt!==null&&!_C();)ib(bt)}function ib(e){var t=lb(e.alternate,e,fn);e.memoizedProps=e.pendingProps,t===null?ab(e):bt=t,Jh.current=null}function ab(e){var t=e;do{var n=t.alternate;if(e=t.return,t.flags&32768){if(n=eR(n,t),n!==null){n.flags&=32767,bt=n;return}if(e!==null)e.flags|=32768,e.subtreeFlags=0,e.deletions=null;else{Rt=6,bt=null;return}}else if(n=ZE(n,t,fn),n!==null){bt=n;return}if(t=t.sibling,t!==null){bt=t;return}bt=t=e}while(t!==null);Rt===0&&(Rt=5)}function Ro(e,t,n){var r=Le,o=Ln.transition;try{Ln.transition=null,Le=1,lR(e,t,n,r)}finally{Ln.transition=o,Le=r}return null}function lR(e,t,n,r){do Li();while(eo!==null);if(Me&6)throw Error(W(327));n=e.finishedWork;var o=e.finishedLanes;if(n===null)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(W(177));e.callbackNode=null,e.callbackPriority=0;var i=n.lanes|n.childLanes;if(UC(e,i),e===Mt&&(bt=Mt=null,Ft=0),!(n.subtreeFlags&2064)&&!(n.flags&2064)||ql||(ql=!0,ub(Ou,function(){return Li(),null})),i=(n.flags&15990)!==0,n.subtreeFlags&15990||i){i=Ln.transition,Ln.transition=null;var a=Le;Le=1;var s=Me;Me|=4,Jh.current=null,nR(e,n),eb(n,e),TE(sp),_u=!!ap,sp=ap=null,e.current=n,rR(n),jC(),Me=s,Le=a,Ln.transition=i}else e.current=n;if(ql&&(ql=!1,eo=e,Gu=o),i=e.pendingLanes,i===0&&(so=null),LC(n.stateNode),an(e,ht()),t!==null)for(r=e.onRecoverableError,n=0;n<t.length;n++)o=t[n],r(o.value,{componentStack:o.stack,digest:o.digest});if(qu)throw qu=!1,e=kp,kp=null,e;return Gu&1&&e.tag!==0&&Li(),i=e.pendingLanes,i&1?e===Tp?ls++:(ls=0,Tp=e):ls=0,yo(),null}function Li(){if(eo!==null){var e=z1(Gu),t=Ln.transition,n=Le;try{if(Ln.transition=null,Le=16>e?16:e,eo===null)var r=!1;else{if(e=eo,eo=null,Gu=0,Me&6)throw Error(W(331));var o=Me;for(Me|=4,J=e.current;J!==null;){var i=J,a=i.child;if(J.flags&16){var s=i.deletions;if(s!==null){for(var l=0;l<s.length;l++){var u=s[l];for(J=u;J!==null;){var c=J;switch(c.tag){case 0:case 11:case 15:as(8,c,i)}var d=c.child;if(d!==null)d.return=c,J=d;else for(;J!==null;){c=J;var f=c.sibling,g=c.return;if(Yx(c),c===u){J=null;break}if(f!==null){f.return=g,J=f;break}J=g}}}var p=i.alternate;if(p!==null){var h=p.child;if(h!==null){p.child=null;do{var C=h.sibling;h.sibling=null,h=C}while(h!==null)}}J=i}}if(i.subtreeFlags&2064&&a!==null)a.return=i,J=a;else e:for(;J!==null;){if(i=J,i.flags&2048)switch(i.tag){case 0:case 11:case 15:as(9,i,i.return)}var m=i.sibling;if(m!==null){m.return=i.return,J=m;break e}J=i.return}}var y=e.current;for(J=y;J!==null;){a=J;var v=a.child;if(a.subtreeFlags&2064&&v!==null)v.return=a,J=v;else e:for(a=y;J!==null;){if(s=J,s.flags&2048)try{switch(s.tag){case 0:case 11:case 15:Ec(9,s)}}catch(R){ut(s,s.return,R)}if(s===a){J=null;break e}var w=s.sibling;if(w!==null){w.return=s.return,J=w;break e}J=s.return}}if(Me=o,yo(),mr&&typeof mr.onPostCommitFiberRoot=="function")try{mr.onPostCommitFiberRoot(gc,e)}catch{}r=!0}return r}finally{Le=n,Ln.transition=t}}return!1}function jv(e,t,n){t=Xi(n,t),t=zx(e,t,1),e=ao(e,t,1),t=Xt(),e!==null&&(Js(e,1,t),an(e,t))}function ut(e,t,n){if(e.tag===3)jv(e,e,n);else for(;t!==null;){if(t.tag===3){jv(t,e,n);break}else if(t.tag===1){var r=t.stateNode;if(typeof t.type.getDerivedStateFromError=="function"||typeof r.componentDidCatch=="function"&&(so===null||!so.has(r))){e=Xi(n,e),e=Bx(t,e,1),t=ao(t,e,1),e=Xt(),t!==null&&(Js(t,1,e),an(t,e));break}}t=t.return}}function uR(e,t,n){var r=e.pingCache;r!==null&&r.delete(t),t=Xt(),e.pingedLanes|=e.suspendedLanes&n,Mt===e&&(Ft&n)===n&&(Rt===4||Rt===3&&(Ft&130023424)===Ft&&500>ht()-em?Io(e,0):Zh|=n),an(e,t)}function sb(e,t){t===0&&(e.mode&1?(t=Il,Il<<=1,!(Il&130023424)&&(Il=4194304)):t=1);var n=Xt();e=Mr(e,t),e!==null&&(Js(e,t,n),an(e,n))}function cR(e){var t=e.memoizedState,n=0;t!==null&&(n=t.retryLane),sb(e,n)}function dR(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,o=e.memoizedState;o!==null&&(n=o.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(W(314))}r!==null&&r.delete(t),sb(e,n)}var lb;lb=function(e,t,n){if(e!==null)if(e.memoizedProps!==t.pendingProps||rn.current)nn=!0;else{if(!(e.lanes&n)&&!(t.flags&128))return nn=!1,JE(e,t,n);nn=!!(e.flags&131072)}else nn=!1,Je&&t.flags&1048576&&fx(t,Du,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;fu(e,t),e=t.pendingProps;var o=Vi(t,Vt.current);Ai(t,n),o=qh(null,t,r,e,o,n);var i=Gh();return t.flags|=1,typeof o=="object"&&o!==null&&typeof o.render=="function"&&o.$$typeof===void 0?(t.tag=1,t.memoizedState=null,t.updateQueue=null,on(r)?(i=!0,Iu(t)):i=!1,t.memoizedState=o.state!==null&&o.state!==void 0?o.state:null,Uh(t),o.updater=Cc,t.stateNode=o,o._reactInternals=t,gp(t,r,e,n),t=xp(null,t,r,!0,i,n)):(t.tag=0,Je&&i&&Ah(t),qt(null,t,o,n),t=t.child),t;case 16:r=t.elementType;e:{switch(fu(e,t),e=t.pendingProps,o=r._init,r=o(r._payload),t.type=r,o=t.tag=pR(r),e=Qn(r,e),o){case 0:t=yp(null,t,r,e,n);break e;case 1:t=Cv(null,t,r,e,n);break e;case 11:t=wv(null,t,r,e,n);break e;case 14:t=Sv(null,t,r,Qn(r.type,e),n);break e}throw Error(W(306,r,""))}return t;case 0:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Qn(r,o),yp(e,t,r,o,n);case 1:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Qn(r,o),Cv(e,t,r,o,n);case 3:e:{if(Vx(t),e===null)throw Error(W(387));r=t.pendingProps,i=t.memoizedState,o=i.element,yx(e,t),Uu(t,r,null,n);var a=t.memoizedState;if(r=a.element,i.isDehydrated)if(i={element:r,isDehydrated:!1,cache:a.cache,pendingSuspenseBoundaries:a.pendingSuspenseBoundaries,transitions:a.transitions},t.updateQueue.baseState=i,t.memoizedState=i,t.flags&256){o=Xi(Error(W(423)),t),t=Ev(e,t,r,n,o);break e}else if(r!==o){o=Xi(Error(W(424)),t),t=Ev(e,t,r,n,o);break e}else for(mn=io(t.stateNode.containerInfo.firstChild),gn=t,Je=!0,Zn=null,n=gx(t,null,r,n),t.child=n;n;)n.flags=n.flags&-3|4096,n=n.sibling;else{if(Ki(),r===o){t=_r(e,t,n);break e}qt(e,t,r,n)}t=t.child}return t;case 5:return xx(t),e===null&&pp(t),r=t.type,o=t.pendingProps,i=e!==null?e.memoizedProps:null,a=o.children,lp(r,o)?a=null:i!==null&&lp(r,i)&&(t.flags|=32),Hx(e,t),qt(e,t,a,n),t.child;case 6:return e===null&&pp(t),null;case 13:return Kx(e,t,n);case 4:return Wh(t,t.stateNode.containerInfo),r=t.pendingProps,e===null?t.child=qi(t,null,r,n):qt(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Qn(r,o),wv(e,t,r,o,n);case 7:return qt(e,t,t.pendingProps,n),t.child;case 8:return qt(e,t,t.pendingProps.children,n),t.child;case 12:return qt(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,i=t.memoizedProps,a=o.value,We(zu,r._currentValue),r._currentValue=a,i!==null)if(or(i.value,a)){if(i.children===o.children&&!rn.current){t=_r(e,t,n);break e}}else for(i=t.child,i!==null&&(i.return=t);i!==null;){var s=i.dependencies;if(s!==null){a=i.child;for(var l=s.firstContext;l!==null;){if(l.context===r){if(i.tag===1){l=kr(-1,n&-n),l.tag=2;var u=i.updateQueue;if(u!==null){u=u.shared;var c=u.pending;c===null?l.next=l:(l.next=c.next,c.next=l),u.pending=l}}i.lanes|=n,l=i.alternate,l!==null&&(l.lanes|=n),hp(i.return,n,t),s.lanes|=n;break}l=l.next}}else if(i.tag===10)a=i.type===t.type?null:i.child;else if(i.tag===18){if(a=i.return,a===null)throw Error(W(341));a.lanes|=n,s=a.alternate,s!==null&&(s.lanes|=n),hp(a,n,t),a=i.sibling}else a=i.child;if(a!==null)a.return=i;else for(a=i;a!==null;){if(a===t){a=null;break}if(i=a.sibling,i!==null){i.return=a.return,a=i;break}a=a.return}i=a}qt(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=t.pendingProps.children,Ai(t,n),o=Dn(o),r=r(o),t.flags|=1,qt(e,t,r,n),t.child;case 14:return r=t.type,o=Qn(r,t.pendingProps),o=Qn(r.type,o),Sv(e,t,r,o,n);case 15:return Ux(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Qn(r,o),fu(e,t),t.tag=1,on(r)?(e=!0,Iu(t)):e=!1,Ai(t,n),Dx(t,r,o),gp(t,r,o,n),xp(null,t,r,!0,e,n);case 19:return qx(e,t,n);case 22:return Wx(e,t,n)}throw Error(W(156,t.tag))};function ub(e,t){return L1(e,t)}function fR(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function jn(e,t,n,r){return new fR(e,t,n,r)}function om(e){return e=e.prototype,!(!e||!e.isReactComponent)}function pR(e){if(typeof e=="function")return om(e)?1:0;if(e!=null){if(e=e.$$typeof,e===Ch)return 11;if(e===Eh)return 14}return 2}function uo(e,t){var n=e.alternate;return n===null?(n=jn(e.tag,t,e.key,e.mode),n.elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=e.flags&14680064,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=t===null?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function mu(e,t,n,r,o,i){var a=2;if(r=e,typeof e=="function")om(e)&&(a=1);else if(typeof e=="string")a=5;else e:switch(e){case vi:return Fo(n.children,o,i,t);case Sh:a=8,o|=8;break;case zf:return e=jn(12,n,t,o|2),e.elementType=zf,e.lanes=i,e;case Bf:return e=jn(13,n,t,o),e.elementType=Bf,e.lanes=i,e;case Uf:return e=jn(19,n,t,o),e.elementType=Uf,e.lanes=i,e;case x1:return Pc(n,o,i,t);default:if(typeof e=="object"&&e!==null)switch(e.$$typeof){case v1:a=10;break e;case y1:a=9;break e;case Ch:a=11;break e;case Eh:a=14;break e;case qr:a=16,r=null;break e}throw Error(W(130,e==null?e:typeof e,""))}return t=jn(a,n,t,o),t.elementType=e,t.type=r,t.lanes=i,t}function Fo(e,t,n,r){return e=jn(7,e,r,t),e.lanes=n,e}function Pc(e,t,n,r){return e=jn(22,e,r,t),e.elementType=x1,e.lanes=n,e.stateNode={isHidden:!1},e}function sf(e,t,n){return e=jn(6,e,null,t),e.lanes=n,e}function lf(e,t,n){return t=jn(4,e.children!==null?e.children:[],e.key,t),t.lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function hR(e,t,n,r,o){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=Bd(0),this.expirationTimes=Bd(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Bd(0),this.identifierPrefix=r,this.onRecoverableError=o,this.mutableSourceEagerHydrationData=null}function im(e,t,n,r,o,i,a,s,l){return e=new hR(e,t,n,s,l),t===1?(t=1,i===!0&&(t|=8)):t=0,i=jn(3,null,null,t),e.current=i,i.stateNode=e,i.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Uh(i),e}function mR(e,t,n){var r=3<arguments.length&&arguments[3]!==void 0?arguments[3]:null;return{$$typeof:gi,key:r==null?null:""+r,children:e,containerInfo:t,implementation:n}}function cb(e){if(!e)return po;e=e._reactInternals;e:{if(ri(e)!==e||e.tag!==1)throw Error(W(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(on(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(t!==null);throw Error(W(171))}if(e.tag===1){var n=e.type;if(on(n))return cx(e,n,t)}return t}function db(e,t,n,r,o,i,a,s,l){return e=im(n,r,!0,e,o,i,a,s,l),e.context=cb(null),n=e.current,r=Xt(),o=lo(n),i=kr(r,o),i.callback=t??null,ao(n,i,o),e.current.lanes=o,Js(e,o,r),an(e,r),e}function kc(e,t,n,r){var o=t.current,i=Xt(),a=lo(o);return n=cb(n),t.context===null?t.context=n:t.pendingContext=n,t=kr(i,a),t.payload={element:e},r=r===void 0?null:r,r!==null&&(t.callback=r),e=ao(o,t,a),e!==null&&(nr(e,o,a,i),uu(e,o,a)),a}function Qu(e){if(e=e.current,!e.child)return null;switch(e.child.tag){case 5:return e.child.stateNode;default:return e.child.stateNode}}function Nv(e,t){if(e=e.memoizedState,e!==null&&e.dehydrated!==null){var n=e.retryLane;e.retryLane=n!==0&&n<t?n:t}}function am(e,t){Nv(e,t),(e=e.alternate)&&Nv(e,t)}function gR(){return null}var fb=typeof reportError=="function"?reportError:function(e){console.error(e)};function sm(e){this._internalRoot=e}Tc.prototype.render=sm.prototype.render=function(e){var t=this._internalRoot;if(t===null)throw Error(W(409));kc(e,t,null,null)};Tc.prototype.unmount=sm.prototype.unmount=function(){var e=this._internalRoot;if(e!==null){this._internalRoot=null;var t=e.containerInfo;qo(function(){kc(null,e,null,null)}),t[Or]=null}};function Tc(e){this._internalRoot=e}Tc.prototype.unstable_scheduleHydration=function(e){if(e){var t=W1();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Qr.length&&t!==0&&t<Qr[n].priority;n++);Qr.splice(n,0,e),n===0&&V1(e)}};function lm(e){return!(!e||e.nodeType!==1&&e.nodeType!==9&&e.nodeType!==11)}function $c(e){return!(!e||e.nodeType!==1&&e.nodeType!==9&&e.nodeType!==11&&(e.nodeType!==8||e.nodeValue!==" react-mount-point-unstable "))}function Av(){}function vR(e,t,n,r,o){if(o){if(typeof r=="function"){var i=r;r=function(){var u=Qu(a);i.call(u)}}var a=db(t,r,e,0,null,!1,!1,"",Av);return e._reactRootContainer=a,e[Or]=a.current,Ps(e.nodeType===8?e.parentNode:e),qo(),a}for(;o=e.lastChild;)e.removeChild(o);if(typeof r=="function"){var s=r;r=function(){var u=Qu(l);s.call(u)}}var l=im(e,0,!1,null,null,!1,!1,"",Av);return e._reactRootContainer=l,e[Or]=l.current,Ps(e.nodeType===8?e.parentNode:e),qo(function(){kc(t,l,n,r)}),l}function Oc(e,t,n,r,o){var i=n._reactRootContainer;if(i){var a=i;if(typeof o=="function"){var s=o;o=function(){var l=Qu(a);s.call(l)}}kc(t,a,e,o)}else a=vR(n,t,e,o,r);return Qu(a)}B1=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=Xa(t.pendingLanes);n!==0&&(kh(t,n|1),an(t,ht()),!(Me&6)&&(Qi=ht()+500,yo()))}break;case 13:qo(function(){var r=Mr(e,1);if(r!==null){var o=Xt();nr(r,e,1,o)}}),am(e,1)}};Th=function(e){if(e.tag===13){var t=Mr(e,134217728);if(t!==null){var n=Xt();nr(t,e,134217728,n)}am(e,134217728)}};U1=function(e){if(e.tag===13){var t=lo(e),n=Mr(e,t);if(n!==null){var r=Xt();nr(n,e,t,r)}am(e,t)}};W1=function(){return Le};H1=function(e,t){var n=Le;try{return Le=e,t()}finally{Le=n}};Jf=function(e,t,n){switch(t){case"input":if(Vf(e,n),t=n.name,n.type==="radio"&&t!=null){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=bc(r);if(!o)throw Error(W(90));w1(r),Vf(r,o)}}}break;case"textarea":C1(e,n);break;case"select":t=n.value,t!=null&&Mi(e,!!n.multiple,t,!1)}};O1=tm;M1=qo;var yR={usingClientEntryPoint:!1,Events:[el,wi,bc,T1,$1,tm]},_a={findFiberByHostInstance:Oo,bundleType:0,version:"18.3.1",rendererPackageName:"react-dom"},xR={bundleType:_a.bundleType,version:_a.version,rendererPackageName:_a.rendererPackageName,rendererConfig:_a.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:Ir.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return e=N1(e),e===null?null:e.stateNode},findFiberByHostInstance:_a.findFiberByHostInstance||gR,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.3.1-next-f1338f8080-20240426"};if(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__<"u"){var Gl=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!Gl.isDisabled&&Gl.supportsFiber)try{gc=Gl.inject(xR),mr=Gl}catch{}}wn.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=yR;wn.createPortal=function(e,t){var n=2<arguments.length&&arguments[2]!==void 0?arguments[2]:null;if(!lm(t))throw Error(W(200));return mR(e,t,null,n)};wn.createRoot=function(e,t){if(!lm(e))throw Error(W(299));var n=!1,r="",o=fb;return t!=null&&(t.unstable_strictMode===!0&&(n=!0),t.identifierPrefix!==void 0&&(r=t.identifierPrefix),t.onRecoverableError!==void 0&&(o=t.onRecoverableError)),t=im(e,1,!1,null,null,n,!1,r,o),e[Or]=t.current,Ps(e.nodeType===8?e.parentNode:e),new sm(t)};wn.findDOMNode=function(e){if(e==null)return null;if(e.nodeType===1)return e;var t=e._reactInternals;if(t===void 0)throw typeof e.render=="function"?Error(W(188)):(e=Object.keys(e).join(","),Error(W(268,e)));return e=N1(t),e=e===null?null:e.stateNode,e};wn.flushSync=function(e){return qo(e)};wn.hydrate=function(e,t,n){if(!$c(t))throw Error(W(200));return Oc(null,e,t,!0,n)};wn.hydrateRoot=function(e,t,n){if(!lm(e))throw Error(W(405));var r=n!=null&&n.hydratedSources||null,o=!1,i="",a=fb;if(n!=null&&(n.unstable_strictMode===!0&&(o=!0),n.identifierPrefix!==void 0&&(i=n.identifierPrefix),n.onRecoverableError!==void 0&&(a=n.onRecoverableError)),t=db(t,null,e,1,n??null,o,!1,i,a),e[Or]=t.current,Ps(e),r)for(e=0;e<r.length;e++)n=r[e],o=n._getVersion,o=o(n._source),t.mutableSourceEagerHydrationData==null?t.mutableSourceEagerHydrationData=[n,o]:t.mutableSourceEagerHydrationData.push(n,o);return new Tc(t)};wn.render=function(e,t,n){if(!$c(t))throw Error(W(200));return Oc(null,e,t,!1,n)};wn.unmountComponentAtNode=function(e){if(!$c(e))throw Error(W(40));return e._reactRootContainer?(qo(function(){Oc(null,null,e,!1,function(){e._reactRootContainer=null,e[Or]=null})}),!0):!1};wn.unstable_batchedUpdates=tm;wn.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!$c(n))throw Error(W(200));if(e==null||e._reactInternals===void 0)throw Error(W(38));return Oc(e,t,n,!1,r)};wn.version="18.3.1-next-f1338f8080-20240426";function pb(){if(!(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__>"u"||typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE!="function"))try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(pb)}catch(e){console.error(e)}}pb(),p1.exports=wn;var Mc=p1.exports;const Ya=t1(Mc),bR=e1({__proto__:null,default:Ya},[Mc]);var Lv=Mc;Ff.createRoot=Lv.createRoot,Ff.hydrateRoot=Lv.hydrateRoot;/**
 * @remix-run/router v1.16.1
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */function tt(){return tt=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},tt.apply(this,arguments)}var yt;(function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"})(yt||(yt={}));const Iv="popstate";function wR(e){e===void 0&&(e={});function t(r,o){let{pathname:i,search:a,hash:s}=r.location;return As("",{pathname:i,search:a,hash:s},o.state&&o.state.usr||null,o.state&&o.state.key||"default")}function n(r,o){return typeof o=="string"?o:Go(o)}return CR(t,n,null,e)}function Re(e,t){if(e===!1||e===null||typeof e>"u")throw new Error(t)}function Yi(e,t){if(!e){typeof console<"u"&&console.warn(t);try{throw new Error(t)}catch{}}}function SR(){return Math.random().toString(36).substr(2,8)}function Fv(e,t){return{usr:e.state,key:e.key,idx:t}}function As(e,t,n,r){return n===void 0&&(n=null),tt({pathname:typeof e=="string"?e:e.pathname,search:"",hash:""},typeof t=="string"?xo(t):t,{state:n,key:t&&t.key||r||SR()})}function Go(e){let{pathname:t="/",search:n="",hash:r=""}=e;return n&&n!=="?"&&(t+=n.charAt(0)==="?"?n:"?"+n),r&&r!=="#"&&(t+=r.charAt(0)==="#"?r:"#"+r),t}function xo(e){let t={};if(e){let n=e.indexOf("#");n>=0&&(t.hash=e.substr(n),e=e.substr(0,n));let r=e.indexOf("?");r>=0&&(t.search=e.substr(r),e=e.substr(0,r)),e&&(t.pathname=e)}return t}function CR(e,t,n,r){r===void 0&&(r={});let{window:o=document.defaultView,v5Compat:i=!1}=r,a=o.history,s=yt.Pop,l=null,u=c();u==null&&(u=0,a.replaceState(tt({},a.state,{idx:u}),""));function c(){return(a.state||{idx:null}).idx}function d(){s=yt.Pop;let C=c(),m=C==null?null:C-u;u=C,l&&l({action:s,location:h.location,delta:m})}function f(C,m){s=yt.Push;let y=As(h.location,C,m);u=c()+1;let v=Fv(y,u),w=h.createHref(y);try{a.pushState(v,"",w)}catch(R){if(R instanceof DOMException&&R.name==="DataCloneError")throw R;o.location.assign(w)}i&&l&&l({action:s,location:h.location,delta:1})}function g(C,m){s=yt.Replace;let y=As(h.location,C,m);u=c();let v=Fv(y,u),w=h.createHref(y);a.replaceState(v,"",w),i&&l&&l({action:s,location:h.location,delta:0})}function p(C){let m=o.location.origin!=="null"?o.location.origin:o.location.href,y=typeof C=="string"?C:Go(C);return y=y.replace(/ $/,"%20"),Re(m,"No window.location.(origin|href) available to create URL for href: "+y),new URL(y,m)}let h={get action(){return s},get location(){return e(o,a)},listen(C){if(l)throw new Error("A history only accepts one active listener");return o.addEventListener(Iv,d),l=C,()=>{o.removeEventListener(Iv,d),l=null}},createHref(C){return t(o,C)},createURL:p,encodeLocation(C){let m=p(C);return{pathname:m.pathname,search:m.search,hash:m.hash}},push:f,replace:g,go(C){return a.go(C)}};return h}var Ye;(function(e){e.data="data",e.deferred="deferred",e.redirect="redirect",e.error="error"})(Ye||(Ye={}));const ER=new Set(["lazy","caseSensitive","path","id","index","children"]);function RR(e){return e.index===!0}function Mp(e,t,n,r){return n===void 0&&(n=[]),r===void 0&&(r={}),e.map((o,i)=>{let a=[...n,i],s=typeof o.id=="string"?o.id:a.join("-");if(Re(o.index!==!0||!o.children,"Cannot specify children on an index route"),Re(!r[s],'Found a route id collision on id "'+s+`".  Route id's must be globally unique within Data Router usages`),RR(o)){let l=tt({},o,t(o),{id:s});return r[s]=l,l}else{let l=tt({},o,t(o),{id:s,children:void 0});return r[s]=l,o.children&&(l.children=Mp(o.children,t,a,r)),l}})}function Ti(e,t,n){n===void 0&&(n="/");let r=typeof t=="string"?xo(t):t,o=ca(r.pathname||"/",n);if(o==null)return null;let i=hb(e);kR(i);let a=null;for(let s=0;a==null&&s<i.length;++s){let l=DR(o);a=LR(i[s],l)}return a}function PR(e,t){let{route:n,pathname:r,params:o}=e;return{id:n.id,pathname:r,params:o,data:t[n.id],handle:n.handle}}function hb(e,t,n,r){t===void 0&&(t=[]),n===void 0&&(n=[]),r===void 0&&(r="");let o=(i,a,s)=>{let l={relativePath:s===void 0?i.path||"":s,caseSensitive:i.caseSensitive===!0,childrenIndex:a,route:i};l.relativePath.startsWith("/")&&(Re(l.relativePath.startsWith(r),'Absolute route path "'+l.relativePath+'" nested under path '+('"'+r+'" is not valid. An absolute child route path ')+"must start with the combined path of all its parent routes."),l.relativePath=l.relativePath.slice(r.length));let u=Tr([r,l.relativePath]),c=n.concat(l);i.children&&i.children.length>0&&(Re(i.index!==!0,"Index routes must not have child routes. Please remove "+('all child routes from route path "'+u+'".')),hb(i.children,t,c,u)),!(i.path==null&&!i.index)&&t.push({path:u,score:NR(u,i.index),routesMeta:c})};return e.forEach((i,a)=>{var s;if(i.path===""||!((s=i.path)!=null&&s.includes("?")))o(i,a);else for(let l of mb(i.path))o(i,a,l)}),t}function mb(e){let t=e.split("/");if(t.length===0)return[];let[n,...r]=t,o=n.endsWith("?"),i=n.replace(/\?$/,"");if(r.length===0)return o?[i,""]:[i];let a=mb(r.join("/")),s=[];return s.push(...a.map(l=>l===""?i:[i,l].join("/"))),o&&s.push(...a),s.map(l=>e.startsWith("/")&&l===""?"/":l)}function kR(e){e.sort((t,n)=>t.score!==n.score?n.score-t.score:AR(t.routesMeta.map(r=>r.childrenIndex),n.routesMeta.map(r=>r.childrenIndex)))}const TR=/^:[\w-]+$/,$R=3,OR=2,MR=1,_R=10,jR=-2,Dv=e=>e==="*";function NR(e,t){let n=e.split("/"),r=n.length;return n.some(Dv)&&(r+=jR),t&&(r+=OR),n.filter(o=>!Dv(o)).reduce((o,i)=>o+(TR.test(i)?$R:i===""?MR:_R),r)}function AR(e,t){return e.length===t.length&&e.slice(0,-1).every((r,o)=>r===t[o])?e[e.length-1]-t[t.length-1]:0}function LR(e,t){let{routesMeta:n}=e,r={},o="/",i=[];for(let a=0;a<n.length;++a){let s=n[a],l=a===n.length-1,u=o==="/"?t:t.slice(o.length)||"/",c=IR({path:s.relativePath,caseSensitive:s.caseSensitive,end:l},u);if(!c)return null;Object.assign(r,c.params);let d=s.route;i.push({params:r,pathname:Tr([o,c.pathname]),pathnameBase:UR(Tr([o,c.pathnameBase])),route:d}),c.pathnameBase!=="/"&&(o=Tr([o,c.pathnameBase]))}return i}function IR(e,t){typeof e=="string"&&(e={path:e,caseSensitive:!1,end:!0});let[n,r]=FR(e.path,e.caseSensitive,e.end),o=t.match(n);if(!o)return null;let i=o[0],a=i.replace(/(.)\/+$/,"$1"),s=o.slice(1);return{params:r.reduce((u,c,d)=>{let{paramName:f,isOptional:g}=c;if(f==="*"){let h=s[d]||"";a=i.slice(0,i.length-h.length).replace(/(.)\/+$/,"$1")}const p=s[d];return g&&!p?u[f]=void 0:u[f]=(p||"").replace(/%2F/g,"/"),u},{}),pathname:i,pathnameBase:a,pattern:e}}function FR(e,t,n){t===void 0&&(t=!1),n===void 0&&(n=!0),Yi(e==="*"||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were '+('"'+e.replace(/\*$/,"/*")+'" because the `*` character must ')+"always follow a `/` in the pattern. To get rid of this warning, "+('please change the route path to "'+e.replace(/\*$/,"/*")+'".'));let r=[],o="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^${}|()[\]]/g,"\\$&").replace(/\/:([\w-]+)(\?)?/g,(a,s,l)=>(r.push({paramName:s,isOptional:l!=null}),l?"/?([^\\/]+)?":"/([^\\/]+)"));return e.endsWith("*")?(r.push({paramName:"*"}),o+=e==="*"||e==="/*"?"(.*)$":"(?:\\/(.+)|\\/*)$"):n?o+="\\/*$":e!==""&&e!=="/"&&(o+="(?:(?=\\/|$))"),[new RegExp(o,t?void 0:"i"),r]}function DR(e){try{return e.split("/").map(t=>decodeURIComponent(t).replace(/\//g,"%2F")).join("/")}catch(t){return Yi(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent '+("encoding ("+t+").")),e}}function ca(e,t){if(t==="/")return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=t.endsWith("/")?t.length-1:t.length,r=e.charAt(n);return r&&r!=="/"?null:e.slice(n)||"/"}function zR(e,t){t===void 0&&(t="/");let{pathname:n,search:r="",hash:o=""}=typeof e=="string"?xo(e):e;return{pathname:n?n.startsWith("/")?n:BR(n,t):t,search:WR(r),hash:HR(o)}}function BR(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach(o=>{o===".."?n.length>1&&n.pop():o!=="."&&n.push(o)}),n.length>1?n.join("/"):"/"}function uf(e,t,n,r){return"Cannot include a '"+e+"' character in a manually specified "+("`to."+t+"` field ["+JSON.stringify(r)+"].  Please separate it out to the ")+("`to."+n+"` field. Alternatively you may provide the full path as ")+'a string in <Link to="..."> and the router will parse it for you.'}function gb(e){return e.filter((t,n)=>n===0||t.route.path&&t.route.path.length>0)}function um(e,t){let n=gb(e);return t?n.map((r,o)=>o===e.length-1?r.pathname:r.pathnameBase):n.map(r=>r.pathnameBase)}function cm(e,t,n,r){r===void 0&&(r=!1);let o;typeof e=="string"?o=xo(e):(o=tt({},e),Re(!o.pathname||!o.pathname.includes("?"),uf("?","pathname","search",o)),Re(!o.pathname||!o.pathname.includes("#"),uf("#","pathname","hash",o)),Re(!o.search||!o.search.includes("#"),uf("#","search","hash",o)));let i=e===""||o.pathname==="",a=i?"/":o.pathname,s;if(a==null)s=n;else{let d=t.length-1;if(!r&&a.startsWith("..")){let f=a.split("/");for(;f[0]==="..";)f.shift(),d-=1;o.pathname=f.join("/")}s=d>=0?t[d]:"/"}let l=zR(o,s),u=a&&a!=="/"&&a.endsWith("/"),c=(i||a===".")&&n.endsWith("/");return!l.pathname.endsWith("/")&&(u||c)&&(l.pathname+="/"),l}const Tr=e=>e.join("/").replace(/\/\/+/g,"/"),UR=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),WR=e=>!e||e==="?"?"":e.startsWith("?")?e:"?"+e,HR=e=>!e||e==="#"?"":e.startsWith("#")?e:"#"+e;class dm{constructor(t,n,r,o){o===void 0&&(o=!1),this.status=t,this.statusText=n||"",this.internal=o,r instanceof Error?(this.data=r.toString(),this.error=r):this.data=r}}function fm(e){return e!=null&&typeof e.status=="number"&&typeof e.statusText=="string"&&typeof e.internal=="boolean"&&"data"in e}const vb=["post","put","patch","delete"],VR=new Set(vb),KR=["get",...vb],qR=new Set(KR),GR=new Set([301,302,303,307,308]),XR=new Set([307,308]),cf={state:"idle",location:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0},QR={state:"idle",data:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0},ja={state:"unblocked",proceed:void 0,reset:void 0,location:void 0},pm=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,YR=e=>({hasErrorBoundary:!!e.hasErrorBoundary}),yb="remix-router-transitions";function JR(e){const t=e.window?e.window:typeof window<"u"?window:void 0,n=typeof t<"u"&&typeof t.document<"u"&&typeof t.document.createElement<"u",r=!n;Re(e.routes.length>0,"You must provide a non-empty routes array to createRouter");let o;if(e.mapRouteProperties)o=e.mapRouteProperties;else if(e.detectErrorBoundary){let $=e.detectErrorBoundary;o=_=>({hasErrorBoundary:$(_)})}else o=YR;let i={},a=Mp(e.routes,o,void 0,i),s,l=e.basename||"/",u=e.unstable_dataStrategy||nP,c=tt({v7_fetcherPersist:!1,v7_normalizeFormMethod:!1,v7_partialHydration:!1,v7_prependBasename:!1,v7_relativeSplatPath:!1,unstable_skipActionErrorRevalidation:!1},e.future),d=null,f=new Set,g=null,p=null,h=null,C=e.hydrationData!=null,m=Ti(a,e.history.location,l),y=null;if(m==null){let $=Pn(404,{pathname:e.history.location.pathname}),{matches:_,route:I}=Xv(a);m=_,y={[I.id]:$}}let v,w=m.some($=>$.route.lazy),R=m.some($=>$.route.loader);if(w)v=!1;else if(!R)v=!0;else if(c.v7_partialHydration){let $=e.hydrationData?e.hydrationData.loaderData:null,_=e.hydrationData?e.hydrationData.errors:null,I=H=>H.route.loader?typeof H.route.loader=="function"&&H.route.loader.hydrate===!0?!1:$&&$[H.route.id]!==void 0||_&&_[H.route.id]!==void 0:!0;if(_){let H=m.findIndex(X=>_[X.route.id]!==void 0);v=m.slice(0,H+1).every(I)}else v=m.every(I)}else v=e.hydrationData!=null;let P,x={historyAction:e.history.action,location:e.history.location,matches:m,initialized:v,navigation:cf,restoreScrollPosition:e.hydrationData!=null?!1:null,preventScrollReset:!1,revalidation:"idle",loaderData:e.hydrationData&&e.hydrationData.loaderData||{},actionData:e.hydrationData&&e.hydrationData.actionData||null,errors:e.hydrationData&&e.hydrationData.errors||y,fetchers:new Map,blockers:new Map},k=yt.Pop,M=!1,T,j=!1,L=new Map,N=null,F=!1,B=!1,z=[],U=[],O=new Map,D=0,q=-1,ie=new Map,ee=new Set,me=new Map,Z=new Map,ae=new Set,K=new Map,le=new Map,pe=!1;function de(){if(d=e.history.listen($=>{let{action:_,location:I,delta:H}=$;if(pe){pe=!1;return}Yi(le.size===0||H!=null,"You are trying to use a blocker on a POP navigation to a location that was not created by @remix-run/router. This will fail silently in production. This can happen if you are navigating outside the router via `window.history.pushState`/`window.location.hash` instead of using router navigation APIs.  This can also happen if you are using createHashRouter and the user manually changes the URL.");let X=wa({currentLocation:x.location,nextLocation:I,historyAction:_});if(X&&H!=null){pe=!0,e.history.go(H*-1),qn(X,{state:"blocked",location:I,proceed(){qn(X,{state:"proceeding",proceed:void 0,reset:void 0,location:I}),e.history.go(H)},reset(){let xe=new Map(x.blockers);xe.set(X,ja),Se({blockers:xe})}});return}return it(_,I)}),n){hP(t,L);let $=()=>mP(t,L);t.addEventListener("pagehide",$),N=()=>t.removeEventListener("pagehide",$)}return x.initialized||it(yt.Pop,x.location,{initialHydration:!0}),P}function De(){d&&d(),N&&N(),f.clear(),T&&T.abort(),x.fetchers.forEach(($,_)=>oe(_)),x.blockers.forEach(($,_)=>en(_))}function ge($){return f.add($),()=>f.delete($)}function Se($,_){_===void 0&&(_={}),x=tt({},x,$);let I=[],H=[];c.v7_fetcherPersist&&x.fetchers.forEach((X,xe)=>{X.state==="idle"&&(ae.has(xe)?H.push(xe):I.push(xe))}),[...f].forEach(X=>X(x,{deletedFetchers:H,unstable_viewTransitionOpts:_.viewTransitionOpts,unstable_flushSync:_.flushSync===!0})),c.v7_fetcherPersist&&(I.forEach(X=>x.fetchers.delete(X)),H.forEach(X=>oe(X)))}function he($,_,I){var H,X;let{flushSync:xe}=I===void 0?{}:I,te=x.actionData!=null&&x.navigation.formMethod!=null&&Jn(x.navigation.formMethod)&&x.navigation.state==="loading"&&((H=$.state)==null?void 0:H._isRedirect)!==!0,Q;_.actionData?Object.keys(_.actionData).length>0?Q=_.actionData:Q=null:te?Q=x.actionData:Q=null;let se=_.loaderData?qv(x.loaderData,_.loaderData,_.matches||[],_.errors):x.loaderData,ue=x.blockers;ue.size>0&&(ue=new Map(ue),ue.forEach((ce,Be)=>ue.set(Be,ja)));let Ct=M===!0||x.navigation.formMethod!=null&&Jn(x.navigation.formMethod)&&((X=$.state)==null?void 0:X._isRedirect)!==!0;s&&(a=s,s=void 0),F||k===yt.Pop||(k===yt.Push?e.history.push($,$.state):k===yt.Replace&&e.history.replace($,$.state));let et;if(k===yt.Pop){let ce=L.get(x.location.pathname);ce&&ce.has($.pathname)?et={currentLocation:x.location,nextLocation:$}:L.has($.pathname)&&(et={currentLocation:$,nextLocation:x.location})}else if(j){let ce=L.get(x.location.pathname);ce?ce.add($.pathname):(ce=new Set([$.pathname]),L.set(x.location.pathname,ce)),et={currentLocation:x.location,nextLocation:$}}Se(tt({},_,{actionData:Q,loaderData:se,historyAction:k,location:$,initialized:!0,navigation:cf,revalidation:"idle",restoreScrollPosition:Ca($,_.matches||x.matches),preventScrollReset:Ct,blockers:ue}),{viewTransitionOpts:et,flushSync:xe===!0}),k=yt.Pop,M=!1,j=!1,F=!1,B=!1,z=[],U=[]}async function ke($,_){if(typeof $=="number"){e.history.go($);return}let I=_p(x.location,x.matches,l,c.v7_prependBasename,$,c.v7_relativeSplatPath,_==null?void 0:_.fromRouteId,_==null?void 0:_.relative),{path:H,submission:X,error:xe}=zv(c.v7_normalizeFormMethod,!1,I,_),te=x.location,Q=As(x.location,H,_&&_.state);Q=tt({},Q,e.history.encodeLocation(Q));let se=_&&_.replace!=null?_.replace:void 0,ue=yt.Push;se===!0?ue=yt.Replace:se===!1||X!=null&&Jn(X.formMethod)&&X.formAction===x.location.pathname+x.location.search&&(ue=yt.Replace);let Ct=_&&"preventScrollReset"in _?_.preventScrollReset===!0:void 0,et=(_&&_.unstable_flushSync)===!0,ce=wa({currentLocation:te,nextLocation:Q,historyAction:ue});if(ce){qn(ce,{state:"blocked",location:Q,proceed(){qn(ce,{state:"proceeding",proceed:void 0,reset:void 0,location:Q}),ke($,_)},reset(){let Be=new Map(x.blockers);Be.set(ce,ja),Se({blockers:Be})}});return}return await it(ue,Q,{submission:X,pendingError:xe,preventScrollReset:Ct,replace:_&&_.replace,enableViewTransition:_&&_.unstable_viewTransition,flushSync:et})}function Ee(){if(ct(),Se({revalidation:"loading"}),x.navigation.state!=="submitting"){if(x.navigation.state==="idle"){it(x.historyAction,x.location,{startUninterruptedRevalidation:!0});return}it(k||x.historyAction,x.navigation.location,{overrideNavigation:x.navigation})}}async function it($,_,I){T&&T.abort(),T=null,k=$,F=(I&&I.startUninterruptedRevalidation)===!0,$l(x.location,x.matches),M=(I&&I.preventScrollReset)===!0,j=(I&&I.enableViewTransition)===!0;let H=s||a,X=I&&I.overrideNavigation,xe=Ti(H,_,l),te=(I&&I.flushSync)===!0;if(!xe){let ce=Pn(404,{pathname:_.pathname}),{matches:Be,route:pt}=Xv(H);Sa(),he(_,{matches:Be,loaderData:{},errors:{[pt.id]:ce}},{flushSync:te});return}if(x.initialized&&!B&&lP(x.location,_)&&!(I&&I.submission&&Jn(I.submission.formMethod))){he(_,{matches:xe},{flushSync:te});return}T=new AbortController;let Q=si(e.history,_,T.signal,I&&I.submission),se;if(I&&I.pendingError)se=[us(xe).route.id,{type:Ye.error,error:I.pendingError}];else if(I&&I.submission&&Jn(I.submission.formMethod)){let ce=await St(Q,_,I.submission,xe,{replace:I.replace,flushSync:te});if(ce.shortCircuited)return;se=ce.pendingActionResult,X=df(_,I.submission),te=!1,Q=si(e.history,Q.url,Q.signal)}let{shortCircuited:ue,loaderData:Ct,errors:et}=await at(Q,_,xe,X,I&&I.submission,I&&I.fetcherSubmission,I&&I.replace,I&&I.initialHydration===!0,te,se);ue||(T=null,he(_,tt({matches:xe},Gv(se),{loaderData:Ct,errors:et})))}async function St($,_,I,H,X){X===void 0&&(X={}),ct();let xe=fP(_,I);Se({navigation:xe},{flushSync:X.flushSync===!0});let te,Q=Np(H,_);if(!Q.route.action&&!Q.route.lazy)te={type:Ye.error,error:Pn(405,{method:$.method,pathname:_.pathname,routeId:Q.route.id})};else if(te=(await ze("action",$,[Q],H))[0],$.signal.aborted)return{shortCircuited:!0};if(No(te)){let se;return X&&X.replace!=null?se=X.replace:se=Hv(te.response.headers.get("Location"),new URL($.url),l)===x.location.pathname+x.location.search,await Ze($,te,{submission:I,replace:se}),{shortCircuited:!0}}if(jo(te))throw Pn(400,{type:"defer-action"});if(Mn(te)){let se=us(H,Q.route.id);return(X&&X.replace)!==!0&&(k=yt.Push),{pendingActionResult:[se.route.id,te]}}return{pendingActionResult:[Q.route.id,te]}}async function at($,_,I,H,X,xe,te,Q,se,ue){let Ct=H||df(_,X),et=X||xe||Jv(Ct),ce=s||a,[Be,pt]=Bv(e.history,x,I,et,_,c.v7_partialHydration&&Q===!0,c.unstable_skipActionErrorRevalidation,B,z,U,ae,me,ee,ce,l,ue);if(Sa(Oe=>!(I&&I.some(Kt=>Kt.route.id===Oe))||Be&&Be.some(Kt=>Kt.route.id===Oe)),q=++D,Be.length===0&&pt.length===0){let Oe=re();return he(_,tt({matches:I,loaderData:{},errors:ue&&Mn(ue[1])?{[ue[0]]:ue[1].error}:null},Gv(ue),Oe?{fetchers:new Map(x.fetchers)}:{}),{flushSync:se}),{shortCircuited:!0}}if(!F&&(!c.v7_partialHydration||!Q)){pt.forEach(Kt=>{let Rn=x.fetchers.get(Kt.key),jt=Na(void 0,Rn?Rn.data:void 0);x.fetchers.set(Kt.key,jt)});let Oe;ue&&!Mn(ue[1])?Oe={[ue[0]]:ue[1].data}:x.actionData&&(Object.keys(x.actionData).length===0?Oe=null:Oe=x.actionData),Se(tt({navigation:Ct},Oe!==void 0?{actionData:Oe}:{},pt.length>0?{fetchers:new Map(x.fetchers)}:{}),{flushSync:se})}pt.forEach(Oe=>{O.has(Oe.key)&&kt(Oe.key),Oe.controller&&O.set(Oe.key,Oe.controller)});let Fr=()=>pt.forEach(Oe=>kt(Oe.key));T&&T.signal.addEventListener("abort",Fr);let{loaderResults:Gn,fetcherResults:Dr}=await Te(x.matches,I,Be,pt,$);if($.signal.aborted)return{shortCircuited:!0};T&&T.signal.removeEventListener("abort",Fr),pt.forEach(Oe=>O.delete(Oe.key));let zr=Qv([...Gn,...Dr]);if(zr){if(zr.idx>=Be.length){let Oe=pt[zr.idx-Be.length].key;ee.add(Oe)}return await Ze($,zr.result,{replace:te}),{shortCircuited:!0}}let{loaderData:Br,errors:En}=Kv(x,I,Be,Gn,ue,pt,Dr,K);K.forEach((Oe,Kt)=>{Oe.subscribe(Rn=>{(Rn||Oe.done)&&K.delete(Kt)})}),c.v7_partialHydration&&Q&&x.errors&&Object.entries(x.errors).filter(Oe=>{let[Kt]=Oe;return!Be.some(Rn=>Rn.route.id===Kt)}).forEach(Oe=>{let[Kt,Rn]=Oe;En=Object.assign(En||{},{[Kt]:Rn})});let Ce=re(),Tt=je(q),Ml=Ce||Tt||pt.length>0;return tt({loaderData:Br,errors:En},Ml?{fetchers:new Map(x.fetchers)}:{})}function Pt($,_,I,H){if(r)throw new Error("router.fetch() was called during the server render, but it shouldn't be. You are likely calling a useFetcher() method in the body of your component. Try moving it to a useEffect or a callback.");O.has($)&&kt($);let X=(H&&H.unstable_flushSync)===!0,xe=s||a,te=_p(x.location,x.matches,l,c.v7_prependBasename,I,c.v7_relativeSplatPath,_,H==null?void 0:H.relative),Q=Ti(xe,te,l);if(!Q){dt($,_,Pn(404,{pathname:te}),{flushSync:X});return}let{path:se,submission:ue,error:Ct}=zv(c.v7_normalizeFormMethod,!0,te,H);if(Ct){dt($,_,Ct,{flushSync:X});return}let et=Np(Q,se);if(M=(H&&H.preventScrollReset)===!0,ue&&Jn(ue.formMethod)){Ue($,_,se,et,Q,X,ue);return}me.set($,{routeId:_,path:se}),_e($,_,se,et,Q,X,ue)}async function Ue($,_,I,H,X,xe,te){if(ct(),me.delete($),!H.route.action&&!H.route.lazy){let jt=Pn(405,{method:te.formMethod,pathname:I,routeId:_});dt($,_,jt,{flushSync:xe});return}let Q=x.fetchers.get($);Ve($,pP(te,Q),{flushSync:xe});let se=new AbortController,ue=si(e.history,I,se.signal,te);O.set($,se);let Ct=D,ce=(await ze("action",ue,[H],X))[0];if(ue.signal.aborted){O.get($)===se&&O.delete($);return}if(c.v7_fetcherPersist&&ae.has($)){if(No(ce)||Mn(ce)){Ve($,Kr(void 0));return}}else{if(No(ce))if(O.delete($),q>Ct){Ve($,Kr(void 0));return}else return ee.add($),Ve($,Na(te)),Ze(ue,ce,{fetcherSubmission:te});if(Mn(ce)){dt($,_,ce.error);return}}if(jo(ce))throw Pn(400,{type:"defer-action"});let Be=x.navigation.location||x.location,pt=si(e.history,Be,se.signal),Fr=s||a,Gn=x.navigation.state!=="idle"?Ti(Fr,x.navigation.location,l):x.matches;Re(Gn,"Didn't find any matches after fetcher action");let Dr=++D;ie.set($,Dr);let zr=Na(te,ce.data);x.fetchers.set($,zr);let[Br,En]=Bv(e.history,x,Gn,te,Be,!1,c.unstable_skipActionErrorRevalidation,B,z,U,ae,me,ee,Fr,l,[H.route.id,ce]);En.filter(jt=>jt.key!==$).forEach(jt=>{let Ea=jt.key,kg=x.fetchers.get(Ea),GS=Na(void 0,kg?kg.data:void 0);x.fetchers.set(Ea,GS),O.has(Ea)&&kt(Ea),jt.controller&&O.set(Ea,jt.controller)}),Se({fetchers:new Map(x.fetchers)});let Ce=()=>En.forEach(jt=>kt(jt.key));se.signal.addEventListener("abort",Ce);let{loaderResults:Tt,fetcherResults:Ml}=await Te(x.matches,Gn,Br,En,pt);if(se.signal.aborted)return;se.signal.removeEventListener("abort",Ce),ie.delete($),O.delete($),En.forEach(jt=>O.delete(jt.key));let Oe=Qv([...Tt,...Ml]);if(Oe){if(Oe.idx>=Br.length){let jt=En[Oe.idx-Br.length].key;ee.add(jt)}return Ze(pt,Oe.result)}let{loaderData:Kt,errors:Rn}=Kv(x,x.matches,Br,Tt,void 0,En,Ml,K);if(x.fetchers.has($)){let jt=Kr(ce.data);x.fetchers.set($,jt)}je(Dr),x.navigation.state==="loading"&&Dr>q?(Re(k,"Expected pending action"),T&&T.abort(),he(x.navigation.location,{matches:Gn,loaderData:Kt,errors:Rn,fetchers:new Map(x.fetchers)})):(Se({errors:Rn,loaderData:qv(x.loaderData,Kt,Gn,Rn),fetchers:new Map(x.fetchers)}),B=!1)}async function _e($,_,I,H,X,xe,te){let Q=x.fetchers.get($);Ve($,Na(te,Q?Q.data:void 0),{flushSync:xe});let se=new AbortController,ue=si(e.history,I,se.signal);O.set($,se);let Ct=D,ce=(await ze("loader",ue,[H],X))[0];if(jo(ce)&&(ce=await Sb(ce,ue.signal,!0)||ce),O.get($)===se&&O.delete($),!ue.signal.aborted){if(ae.has($)){Ve($,Kr(void 0));return}if(No(ce))if(q>Ct){Ve($,Kr(void 0));return}else{ee.add($),await Ze(ue,ce);return}if(Mn(ce)){dt($,_,ce.error);return}Re(!jo(ce),"Unhandled fetcher deferred data"),Ve($,Kr(ce.data))}}async function Ze($,_,I){let{submission:H,fetcherSubmission:X,replace:xe}=I===void 0?{}:I;_.response.headers.has("X-Remix-Revalidate")&&(B=!0);let te=_.response.headers.get("Location");Re(te,"Expected a Location header on the redirect Response"),te=Hv(te,new URL($.url),l);let Q=As(x.location,te,{_isRedirect:!0});if(n){let Be=!1;if(_.response.headers.has("X-Remix-Reload-Document"))Be=!0;else if(pm.test(te)){const pt=e.history.createURL(te);Be=pt.origin!==t.location.origin||ca(pt.pathname,l)==null}if(Be){xe?t.location.replace(te):t.location.assign(te);return}}T=null;let se=xe===!0?yt.Replace:yt.Push,{formMethod:ue,formAction:Ct,formEncType:et}=x.navigation;!H&&!X&&ue&&Ct&&et&&(H=Jv(x.navigation));let ce=H||X;if(XR.has(_.response.status)&&ce&&Jn(ce.formMethod))await it(se,Q,{submission:tt({},ce,{formAction:te}),preventScrollReset:M});else{let Be=df(Q,H);await it(se,Q,{overrideNavigation:Be,fetcherSubmission:X,preventScrollReset:M})}}async function ze($,_,I,H){try{let X=await rP(u,$,_,I,H,i,o);return await Promise.all(X.map((xe,te)=>{if(uP(xe)){let Q=xe.result;return{type:Ye.redirect,response:aP(Q,_,I[te].route.id,H,l,c.v7_relativeSplatPath)}}return iP(xe)}))}catch(X){return I.map(()=>({type:Ye.error,error:X}))}}async function Te($,_,I,H,X){let[xe,...te]=await Promise.all([I.length?ze("loader",X,I,_):[],...H.map(Q=>{if(Q.matches&&Q.match&&Q.controller){let se=si(e.history,Q.path,Q.controller.signal);return ze("loader",se,[Q.match],Q.matches).then(ue=>ue[0])}else return Promise.resolve({type:Ye.error,error:Pn(404,{pathname:Q.path})})})]);return await Promise.all([Yv($,I,xe,xe.map(()=>X.signal),!1,x.loaderData),Yv($,H.map(Q=>Q.match),te,H.map(Q=>Q.controller?Q.controller.signal:null),!0)]),{loaderResults:xe,fetcherResults:te}}function ct(){B=!0,z.push(...Sa()),me.forEach(($,_)=>{O.has(_)&&(U.push(_),kt(_))})}function Ve($,_,I){I===void 0&&(I={}),x.fetchers.set($,_),Se({fetchers:new Map(x.fetchers)},{flushSync:(I&&I.flushSync)===!0})}function dt($,_,I,H){H===void 0&&(H={});let X=us(x.matches,_);oe($),Se({errors:{[X.route.id]:I},fetchers:new Map(x.fetchers)},{flushSync:(H&&H.flushSync)===!0})}function $e($){return c.v7_fetcherPersist&&(Z.set($,(Z.get($)||0)+1),ae.has($)&&ae.delete($)),x.fetchers.get($)||QR}function oe($){let _=x.fetchers.get($);O.has($)&&!(_&&_.state==="loading"&&ie.has($))&&kt($),me.delete($),ie.delete($),ee.delete($),ae.delete($),x.fetchers.delete($)}function ft($){if(c.v7_fetcherPersist){let _=(Z.get($)||0)-1;_<=0?(Z.delete($),ae.add($)):Z.set($,_)}else oe($);Se({fetchers:new Map(x.fetchers)})}function kt($){let _=O.get($);Re(_,"Expected fetch controller: "+$),_.abort(),O.delete($)}function Zt($){for(let _ of $){let I=$e(_),H=Kr(I.data);x.fetchers.set(_,H)}}function re(){let $=[],_=!1;for(let I of ee){let H=x.fetchers.get(I);Re(H,"Expected fetcher: "+I),H.state==="loading"&&(ee.delete(I),$.push(I),_=!0)}return Zt($),_}function je($){let _=[];for(let[I,H]of ie)if(H<$){let X=x.fetchers.get(I);Re(X,"Expected fetcher: "+I),X.state==="loading"&&(kt(I),ie.delete(I),_.push(I))}return Zt(_),_.length>0}function Ge($,_){let I=x.blockers.get($)||ja;return le.get($)!==_&&le.set($,_),I}function en($){x.blockers.delete($),le.delete($)}function qn($,_){let I=x.blockers.get($)||ja;Re(I.state==="unblocked"&&_.state==="blocked"||I.state==="blocked"&&_.state==="blocked"||I.state==="blocked"&&_.state==="proceeding"||I.state==="blocked"&&_.state==="unblocked"||I.state==="proceeding"&&_.state==="unblocked","Invalid blocker state transition: "+I.state+" -> "+_.state);let H=new Map(x.blockers);H.set($,_),Se({blockers:H})}function wa($){let{currentLocation:_,nextLocation:I,historyAction:H}=$;if(le.size===0)return;le.size>1&&Yi(!1,"A router only supports one blocker at a time");let X=Array.from(le.entries()),[xe,te]=X[X.length-1],Q=x.blockers.get(xe);if(!(Q&&Q.state==="proceeding")&&te({currentLocation:_,nextLocation:I,historyAction:H}))return xe}function Sa($){let _=[];return K.forEach((I,H)=>{(!$||$(H))&&(I.cancel(),_.push(H),K.delete(H))}),_}function Ad($,_,I){if(g=$,h=_,p=I||null,!C&&x.navigation===cf){C=!0;let H=Ca(x.location,x.matches);H!=null&&Se({restoreScrollPosition:H})}return()=>{g=null,h=null,p=null}}function Tl($,_){return p&&p($,_.map(H=>PR(H,x.loaderData)))||$.key}function $l($,_){if(g&&h){let I=Tl($,_);g[I]=h()}}function Ca($,_){if(g){let I=Tl($,_),H=g[I];if(typeof H=="number")return H}return null}function Ol($){i={},s=Mp($,o,void 0,i)}return P={get basename(){return l},get future(){return c},get state(){return x},get routes(){return a},get window(){return t},initialize:de,subscribe:ge,enableScrollRestoration:Ad,navigate:ke,fetch:Pt,revalidate:Ee,createHref:$=>e.history.createHref($),encodeLocation:$=>e.history.encodeLocation($),getFetcher:$e,deleteFetcher:ft,dispose:De,getBlocker:Ge,deleteBlocker:en,_internalFetchControllers:O,_internalActiveDeferreds:K,_internalSetRoutes:Ol},P}function ZR(e){return e!=null&&("formData"in e&&e.formData!=null||"body"in e&&e.body!==void 0)}function _p(e,t,n,r,o,i,a,s){let l,u;if(a){l=[];for(let d of t)if(l.push(d),d.route.id===a){u=d;break}}else l=t,u=t[t.length-1];let c=cm(o||".",um(l,i),ca(e.pathname,n)||e.pathname,s==="path");return o==null&&(c.search=e.search,c.hash=e.hash),(o==null||o===""||o===".")&&u&&u.route.index&&!hm(c.search)&&(c.search=c.search?c.search.replace(/^\?/,"?index&"):"?index"),r&&n!=="/"&&(c.pathname=c.pathname==="/"?n:Tr([n,c.pathname])),Go(c)}function zv(e,t,n,r){if(!r||!ZR(r))return{path:n};if(r.formMethod&&!dP(r.formMethod))return{path:n,error:Pn(405,{method:r.formMethod})};let o=()=>({path:n,error:Pn(400,{type:"invalid-body"})}),i=r.formMethod||"get",a=e?i.toUpperCase():i.toLowerCase(),s=bb(n);if(r.body!==void 0){if(r.formEncType==="text/plain"){if(!Jn(a))return o();let f=typeof r.body=="string"?r.body:r.body instanceof FormData||r.body instanceof URLSearchParams?Array.from(r.body.entries()).reduce((g,p)=>{let[h,C]=p;return""+g+h+"="+C+`
`},""):String(r.body);return{path:n,submission:{formMethod:a,formAction:s,formEncType:r.formEncType,formData:void 0,json:void 0,text:f}}}else if(r.formEncType==="application/json"){if(!Jn(a))return o();try{let f=typeof r.body=="string"?JSON.parse(r.body):r.body;return{path:n,submission:{formMethod:a,formAction:s,formEncType:r.formEncType,formData:void 0,json:f,text:void 0}}}catch{return o()}}}Re(typeof FormData=="function","FormData is not available in this environment");let l,u;if(r.formData)l=jp(r.formData),u=r.formData;else if(r.body instanceof FormData)l=jp(r.body),u=r.body;else if(r.body instanceof URLSearchParams)l=r.body,u=Vv(l);else if(r.body==null)l=new URLSearchParams,u=new FormData;else try{l=new URLSearchParams(r.body),u=Vv(l)}catch{return o()}let c={formMethod:a,formAction:s,formEncType:r&&r.formEncType||"application/x-www-form-urlencoded",formData:u,json:void 0,text:void 0};if(Jn(c.formMethod))return{path:n,submission:c};let d=xo(n);return t&&d.search&&hm(d.search)&&l.append("index",""),d.search="?"+l,{path:Go(d),submission:c}}function eP(e,t){let n=e;if(t){let r=e.findIndex(o=>o.route.id===t);r>=0&&(n=e.slice(0,r))}return n}function Bv(e,t,n,r,o,i,a,s,l,u,c,d,f,g,p,h){let C=h?Mn(h[1])?h[1].error:h[1].data:void 0,m=e.createURL(t.location),y=e.createURL(o),v=h&&Mn(h[1])?h[0]:void 0,w=v?eP(n,v):n,R=h?h[1].statusCode:void 0,P=a&&R&&R>=400,x=w.filter((M,T)=>{let{route:j}=M;if(j.lazy)return!0;if(j.loader==null)return!1;if(i)return typeof j.loader!="function"||j.loader.hydrate?!0:t.loaderData[j.id]===void 0&&(!t.errors||t.errors[j.id]===void 0);if(tP(t.loaderData,t.matches[T],M)||l.some(F=>F===M.route.id))return!0;let L=t.matches[T],N=M;return Uv(M,tt({currentUrl:m,currentParams:L.params,nextUrl:y,nextParams:N.params},r,{actionResult:C,unstable_actionStatus:R,defaultShouldRevalidate:P?!1:s||m.pathname+m.search===y.pathname+y.search||m.search!==y.search||xb(L,N)}))}),k=[];return d.forEach((M,T)=>{if(i||!n.some(B=>B.route.id===M.routeId)||c.has(T))return;let j=Ti(g,M.path,p);if(!j){k.push({key:T,routeId:M.routeId,path:M.path,matches:null,match:null,controller:null});return}let L=t.fetchers.get(T),N=Np(j,M.path),F=!1;f.has(T)?F=!1:u.includes(T)?F=!0:L&&L.state!=="idle"&&L.data===void 0?F=s:F=Uv(N,tt({currentUrl:m,currentParams:t.matches[t.matches.length-1].params,nextUrl:y,nextParams:n[n.length-1].params},r,{actionResult:C,unstable_actionStatus:R,defaultShouldRevalidate:P?!1:s})),F&&k.push({key:T,routeId:M.routeId,path:M.path,matches:j,match:N,controller:new AbortController})}),[x,k]}function tP(e,t,n){let r=!t||n.route.id!==t.route.id,o=e[n.route.id]===void 0;return r||o}function xb(e,t){let n=e.route.path;return e.pathname!==t.pathname||n!=null&&n.endsWith("*")&&e.params["*"]!==t.params["*"]}function Uv(e,t){if(e.route.shouldRevalidate){let n=e.route.shouldRevalidate(t);if(typeof n=="boolean")return n}return t.defaultShouldRevalidate}async function Wv(e,t,n){if(!e.lazy)return;let r=await e.lazy();if(!e.lazy)return;let o=n[e.id];Re(o,"No route found in manifest");let i={};for(let a in r){let l=o[a]!==void 0&&a!=="hasErrorBoundary";Yi(!l,'Route "'+o.id+'" has a static property "'+a+'" defined but its lazy function is also returning a value for this property. '+('The lazy route property "'+a+'" will be ignored.')),!l&&!ER.has(a)&&(i[a]=r[a])}Object.assign(o,i),Object.assign(o,tt({},t(o),{lazy:void 0}))}function nP(e){return Promise.all(e.matches.map(t=>t.resolve()))}async function rP(e,t,n,r,o,i,a,s){let l=r.reduce((d,f)=>d.add(f.route.id),new Set),u=new Set,c=await e({matches:o.map(d=>{let f=l.has(d.route.id);return tt({},d,{shouldLoad:f,resolve:p=>(u.add(d.route.id),f?oP(t,n,d,i,a,p,s):Promise.resolve({type:Ye.data,result:void 0}))})}),request:n,params:o[0].params,context:s});return o.forEach(d=>Re(u.has(d.route.id),'`match.resolve()` was not called for route id "'+d.route.id+'". You must call `match.resolve()` on every match passed to `dataStrategy` to ensure all routes are properly loaded.')),c.filter((d,f)=>l.has(o[f].route.id))}async function oP(e,t,n,r,o,i,a){let s,l,u=c=>{let d,f=new Promise((h,C)=>d=C);l=()=>d(),t.signal.addEventListener("abort",l);let g=h=>typeof c!="function"?Promise.reject(new Error("You cannot call the handler for a route which defines a boolean "+('"'+e+'" [routeId: '+n.route.id+"]"))):c({request:t,params:n.params,context:a},...h!==void 0?[h]:[]),p;return i?p=i(h=>g(h)):p=(async()=>{try{return{type:"data",result:await g()}}catch(h){return{type:"error",result:h}}})(),Promise.race([p,f])};try{let c=n.route[e];if(n.route.lazy)if(c){let d,[f]=await Promise.all([u(c).catch(g=>{d=g}),Wv(n.route,o,r)]);if(d!==void 0)throw d;s=f}else if(await Wv(n.route,o,r),c=n.route[e],c)s=await u(c);else if(e==="action"){let d=new URL(t.url),f=d.pathname+d.search;throw Pn(405,{method:t.method,pathname:f,routeId:n.route.id})}else return{type:Ye.data,result:void 0};else if(c)s=await u(c);else{let d=new URL(t.url),f=d.pathname+d.search;throw Pn(404,{pathname:f})}Re(s.result!==void 0,"You defined "+(e==="action"?"an action":"a loader")+" for route "+('"'+n.route.id+"\" but didn't return anything from your `"+e+"` ")+"function. Please return a value or `null`.")}catch(c){return{type:Ye.error,result:c}}finally{l&&t.signal.removeEventListener("abort",l)}return s}async function iP(e){let{result:t,type:n,status:r}=e;if(wb(t)){let a;try{let s=t.headers.get("Content-Type");s&&/\bapplication\/json\b/.test(s)?t.body==null?a=null:a=await t.json():a=await t.text()}catch(s){return{type:Ye.error,error:s}}return n===Ye.error?{type:Ye.error,error:new dm(t.status,t.statusText,a),statusCode:t.status,headers:t.headers}:{type:Ye.data,data:a,statusCode:t.status,headers:t.headers}}if(n===Ye.error)return{type:Ye.error,error:t,statusCode:fm(t)?t.status:r};if(cP(t)){var o,i;return{type:Ye.deferred,deferredData:t,statusCode:(o=t.init)==null?void 0:o.status,headers:((i=t.init)==null?void 0:i.headers)&&new Headers(t.init.headers)}}return{type:Ye.data,data:t,statusCode:r}}function aP(e,t,n,r,o,i){let a=e.headers.get("Location");if(Re(a,"Redirects returned/thrown from loaders/actions must have a Location header"),!pm.test(a)){let s=r.slice(0,r.findIndex(l=>l.route.id===n)+1);a=_p(new URL(t.url),s,o,!0,a,i),e.headers.set("Location",a)}return e}function Hv(e,t,n){if(pm.test(e)){let r=e,o=r.startsWith("//")?new URL(t.protocol+r):new URL(r),i=ca(o.pathname,n)!=null;if(o.origin===t.origin&&i)return o.pathname+o.search+o.hash}return e}function si(e,t,n,r){let o=e.createURL(bb(t)).toString(),i={signal:n};if(r&&Jn(r.formMethod)){let{formMethod:a,formEncType:s}=r;i.method=a.toUpperCase(),s==="application/json"?(i.headers=new Headers({"Content-Type":s}),i.body=JSON.stringify(r.json)):s==="text/plain"?i.body=r.text:s==="application/x-www-form-urlencoded"&&r.formData?i.body=jp(r.formData):i.body=r.formData}return new Request(o,i)}function jp(e){let t=new URLSearchParams;for(let[n,r]of e.entries())t.append(n,typeof r=="string"?r:r.name);return t}function Vv(e){let t=new FormData;for(let[n,r]of e.entries())t.append(n,r);return t}function sP(e,t,n,r,o,i){let a={},s=null,l,u=!1,c={},d=r&&Mn(r[1])?r[1].error:void 0;return n.forEach((f,g)=>{let p=t[g].route.id;if(Re(!No(f),"Cannot handle redirect results in processLoaderData"),Mn(f)){let h=f.error;d!==void 0&&(h=d,d=void 0),s=s||{};{let C=us(e,p);s[C.route.id]==null&&(s[C.route.id]=h)}a[p]=void 0,u||(u=!0,l=fm(f.error)?f.error.status:500),f.headers&&(c[p]=f.headers)}else jo(f)?(o.set(p,f.deferredData),a[p]=f.deferredData.data,f.statusCode!=null&&f.statusCode!==200&&!u&&(l=f.statusCode),f.headers&&(c[p]=f.headers)):(a[p]=f.data,f.statusCode&&f.statusCode!==200&&!u&&(l=f.statusCode),f.headers&&(c[p]=f.headers))}),d!==void 0&&r&&(s={[r[0]]:d},a[r[0]]=void 0),{loaderData:a,errors:s,statusCode:l||200,loaderHeaders:c}}function Kv(e,t,n,r,o,i,a,s){let{loaderData:l,errors:u}=sP(t,n,r,o,s);for(let c=0;c<i.length;c++){let{key:d,match:f,controller:g}=i[c];Re(a!==void 0&&a[c]!==void 0,"Did not find corresponding fetcher result");let p=a[c];if(!(g&&g.signal.aborted))if(Mn(p)){let h=us(e.matches,f==null?void 0:f.route.id);u&&u[h.route.id]||(u=tt({},u,{[h.route.id]:p.error})),e.fetchers.delete(d)}else if(No(p))Re(!1,"Unhandled fetcher revalidation redirect");else if(jo(p))Re(!1,"Unhandled fetcher deferred data");else{let h=Kr(p.data);e.fetchers.set(d,h)}}return{loaderData:l,errors:u}}function qv(e,t,n,r){let o=tt({},t);for(let i of n){let a=i.route.id;if(t.hasOwnProperty(a)?t[a]!==void 0&&(o[a]=t[a]):e[a]!==void 0&&i.route.loader&&(o[a]=e[a]),r&&r.hasOwnProperty(a))break}return o}function Gv(e){return e?Mn(e[1])?{actionData:{}}:{actionData:{[e[0]]:e[1].data}}:{}}function us(e,t){return(t?e.slice(0,e.findIndex(r=>r.route.id===t)+1):[...e]).reverse().find(r=>r.route.hasErrorBoundary===!0)||e[0]}function Xv(e){let t=e.length===1?e[0]:e.find(n=>n.index||!n.path||n.path==="/")||{id:"__shim-error-route__"};return{matches:[{params:{},pathname:"",pathnameBase:"",route:t}],route:t}}function Pn(e,t){let{pathname:n,routeId:r,method:o,type:i}=t===void 0?{}:t,a="Unknown Server Error",s="Unknown @remix-run/router error";return e===400?(a="Bad Request",o&&n&&r?s="You made a "+o+' request to "'+n+'" but '+('did not provide a `loader` for route "'+r+'", ')+"so there is no way to handle the request.":i==="defer-action"?s="defer() is not supported in actions":i==="invalid-body"&&(s="Unable to encode submission body")):e===403?(a="Forbidden",s='Route "'+r+'" does not match URL "'+n+'"'):e===404?(a="Not Found",s='No route matches URL "'+n+'"'):e===405&&(a="Method Not Allowed",o&&n&&r?s="You made a "+o.toUpperCase()+' request to "'+n+'" but '+('did not provide an `action` for route "'+r+'", ')+"so there is no way to handle the request.":o&&(s='Invalid request method "'+o.toUpperCase()+'"')),new dm(e||500,a,new Error(s),!0)}function Qv(e){for(let t=e.length-1;t>=0;t--){let n=e[t];if(No(n))return{result:n,idx:t}}}function bb(e){let t=typeof e=="string"?xo(e):e;return Go(tt({},t,{hash:""}))}function lP(e,t){return e.pathname!==t.pathname||e.search!==t.search?!1:e.hash===""?t.hash!=="":e.hash===t.hash?!0:t.hash!==""}function uP(e){return wb(e.result)&&GR.has(e.result.status)}function jo(e){return e.type===Ye.deferred}function Mn(e){return e.type===Ye.error}function No(e){return(e&&e.type)===Ye.redirect}function cP(e){let t=e;return t&&typeof t=="object"&&typeof t.data=="object"&&typeof t.subscribe=="function"&&typeof t.cancel=="function"&&typeof t.resolveData=="function"}function wb(e){return e!=null&&typeof e.status=="number"&&typeof e.statusText=="string"&&typeof e.headers=="object"&&typeof e.body<"u"}function dP(e){return qR.has(e.toLowerCase())}function Jn(e){return VR.has(e.toLowerCase())}async function Yv(e,t,n,r,o,i){for(let a=0;a<n.length;a++){let s=n[a],l=t[a];if(!l)continue;let u=e.find(d=>d.route.id===l.route.id),c=u!=null&&!xb(u,l)&&(i&&i[l.route.id])!==void 0;if(jo(s)&&(o||c)){let d=r[a];Re(d,"Expected an AbortSignal for revalidating fetcher deferred result"),await Sb(s,d,o).then(f=>{f&&(n[a]=f||n[a])})}}}async function Sb(e,t,n){if(n===void 0&&(n=!1),!await e.deferredData.resolveData(t)){if(n)try{return{type:Ye.data,data:e.deferredData.unwrappedData}}catch(o){return{type:Ye.error,error:o}}return{type:Ye.data,data:e.deferredData.data}}}function hm(e){return new URLSearchParams(e).getAll("index").some(t=>t==="")}function Np(e,t){let n=typeof t=="string"?xo(t).search:t.search;if(e[e.length-1].route.index&&hm(n||""))return e[e.length-1];let r=gb(e);return r[r.length-1]}function Jv(e){let{formMethod:t,formAction:n,formEncType:r,text:o,formData:i,json:a}=e;if(!(!t||!n||!r)){if(o!=null)return{formMethod:t,formAction:n,formEncType:r,formData:void 0,json:void 0,text:o};if(i!=null)return{formMethod:t,formAction:n,formEncType:r,formData:i,json:void 0,text:void 0};if(a!==void 0)return{formMethod:t,formAction:n,formEncType:r,formData:void 0,json:a,text:void 0}}}function df(e,t){return t?{state:"loading",location:e,formMethod:t.formMethod,formAction:t.formAction,formEncType:t.formEncType,formData:t.formData,json:t.json,text:t.text}:{state:"loading",location:e,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0}}function fP(e,t){return{state:"submitting",location:e,formMethod:t.formMethod,formAction:t.formAction,formEncType:t.formEncType,formData:t.formData,json:t.json,text:t.text}}function Na(e,t){return e?{state:"loading",formMethod:e.formMethod,formAction:e.formAction,formEncType:e.formEncType,formData:e.formData,json:e.json,text:e.text,data:t}:{state:"loading",formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0,data:t}}function pP(e,t){return{state:"submitting",formMethod:e.formMethod,formAction:e.formAction,formEncType:e.formEncType,formData:e.formData,json:e.json,text:e.text,data:t?t.data:void 0}}function Kr(e){return{state:"idle",formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0,data:e}}function hP(e,t){try{let n=e.sessionStorage.getItem(yb);if(n){let r=JSON.parse(n);for(let[o,i]of Object.entries(r||{}))i&&Array.isArray(i)&&t.set(o,new Set(i||[]))}}catch{}}function mP(e,t){if(t.size>0){let n={};for(let[r,o]of t)n[r]=[...o];try{e.sessionStorage.setItem(yb,JSON.stringify(n))}catch(r){Yi(!1,"Failed to save applied view transitions in sessionStorage ("+r+").")}}}/**
 * React Router v6.23.1
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */function Yu(){return Yu=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Yu.apply(this,arguments)}const _c=b.createContext(null),Cb=b.createContext(null),oi=b.createContext(null),mm=b.createContext(null),bo=b.createContext({outlet:null,matches:[],isDataRoute:!1}),Eb=b.createContext(null);function gP(e,t){let{relative:n}=t===void 0?{}:t;nl()||Re(!1);let{basename:r,navigator:o}=b.useContext(oi),{hash:i,pathname:a,search:s}=Pb(e,{relative:n}),l=a;return r!=="/"&&(l=a==="/"?r:Tr([r,a])),o.createHref({pathname:l,search:s,hash:i})}function nl(){return b.useContext(mm)!=null}function rl(){return nl()||Re(!1),b.useContext(mm).location}function Rb(e){b.useContext(oi).static||b.useLayoutEffect(e)}function ol(){let{isDataRoute:e}=b.useContext(bo);return e?TP():vP()}function vP(){nl()||Re(!1);let e=b.useContext(_c),{basename:t,future:n,navigator:r}=b.useContext(oi),{matches:o}=b.useContext(bo),{pathname:i}=rl(),a=JSON.stringify(um(o,n.v7_relativeSplatPath)),s=b.useRef(!1);return Rb(()=>{s.current=!0}),b.useCallback(function(u,c){if(c===void 0&&(c={}),!s.current)return;if(typeof u=="number"){r.go(u);return}let d=cm(u,JSON.parse(a),i,c.relative==="path");e==null&&t!=="/"&&(d.pathname=d.pathname==="/"?t:Tr([t,d.pathname])),(c.replace?r.replace:r.push)(d,c.state,c)},[t,r,a,i,e])}function yP(){let{matches:e}=b.useContext(bo),t=e[e.length-1];return t?t.params:{}}function Pb(e,t){let{relative:n}=t===void 0?{}:t,{future:r}=b.useContext(oi),{matches:o}=b.useContext(bo),{pathname:i}=rl(),a=JSON.stringify(um(o,r.v7_relativeSplatPath));return b.useMemo(()=>cm(e,JSON.parse(a),i,n==="path"),[e,a,i,n])}function xP(e,t,n,r){nl()||Re(!1);let{navigator:o}=b.useContext(oi),{matches:i}=b.useContext(bo),a=i[i.length-1],s=a?a.params:{};a&&a.pathname;let l=a?a.pathnameBase:"/";a&&a.route;let u=rl(),c;c=u;let d=c.pathname||"/",f=d;if(l!=="/"){let h=l.replace(/^\//,"").split("/");f="/"+d.replace(/^\//,"").split("/").slice(h.length).join("/")}let g=Ti(e,{pathname:f});return EP(g&&g.map(h=>Object.assign({},h,{params:Object.assign({},s,h.params),pathname:Tr([l,o.encodeLocation?o.encodeLocation(h.pathname).pathname:h.pathname]),pathnameBase:h.pathnameBase==="/"?l:Tr([l,o.encodeLocation?o.encodeLocation(h.pathnameBase).pathname:h.pathnameBase])})),i,n,r)}function bP(){let e=kP(),t=fm(e)?e.status+" "+e.statusText:e instanceof Error?e.message:JSON.stringify(e),n=e instanceof Error?e.stack:null,o={padding:"0.5rem",backgroundColor:"rgba(200,200,200, 0.5)"};return b.createElement(b.Fragment,null,b.createElement("h2",null,"Unexpected Application Error!"),b.createElement("h3",{style:{fontStyle:"italic"}},t),n?b.createElement("pre",{style:o},n):null,null)}const wP=b.createElement(bP,null);class SP extends b.Component{constructor(t){super(t),this.state={location:t.location,revalidation:t.revalidation,error:t.error}}static getDerivedStateFromError(t){return{error:t}}static getDerivedStateFromProps(t,n){return n.location!==t.location||n.revalidation!=="idle"&&t.revalidation==="idle"?{error:t.error,location:t.location,revalidation:t.revalidation}:{error:t.error!==void 0?t.error:n.error,location:n.location,revalidation:t.revalidation||n.revalidation}}componentDidCatch(t,n){console.error("React Router caught the following error during render",t,n)}render(){return this.state.error!==void 0?b.createElement(bo.Provider,{value:this.props.routeContext},b.createElement(Eb.Provider,{value:this.state.error,children:this.props.component})):this.props.children}}function CP(e){let{routeContext:t,match:n,children:r}=e,o=b.useContext(_c);return o&&o.static&&o.staticContext&&(n.route.errorElement||n.route.ErrorBoundary)&&(o.staticContext._deepestRenderedBoundaryId=n.route.id),b.createElement(bo.Provider,{value:t},r)}function EP(e,t,n,r){var o;if(t===void 0&&(t=[]),n===void 0&&(n=null),r===void 0&&(r=null),e==null){var i;if((i=n)!=null&&i.errors)e=n.matches;else return null}let a=e,s=(o=n)==null?void 0:o.errors;if(s!=null){let c=a.findIndex(d=>d.route.id&&(s==null?void 0:s[d.route.id])!==void 0);c>=0||Re(!1),a=a.slice(0,Math.min(a.length,c+1))}let l=!1,u=-1;if(n&&r&&r.v7_partialHydration)for(let c=0;c<a.length;c++){let d=a[c];if((d.route.HydrateFallback||d.route.hydrateFallbackElement)&&(u=c),d.route.id){let{loaderData:f,errors:g}=n,p=d.route.loader&&f[d.route.id]===void 0&&(!g||g[d.route.id]===void 0);if(d.route.lazy||p){l=!0,u>=0?a=a.slice(0,u+1):a=[a[0]];break}}}return a.reduceRight((c,d,f)=>{let g,p=!1,h=null,C=null;n&&(g=s&&d.route.id?s[d.route.id]:void 0,h=d.route.errorElement||wP,l&&(u<0&&f===0?($P("route-fallback"),p=!0,C=null):u===f&&(p=!0,C=d.route.hydrateFallbackElement||null)));let m=t.concat(a.slice(0,f+1)),y=()=>{let v;return g?v=h:p?v=C:d.route.Component?v=b.createElement(d.route.Component,null):d.route.element?v=d.route.element:v=c,b.createElement(CP,{match:d,routeContext:{outlet:c,matches:m,isDataRoute:n!=null},children:v})};return n&&(d.route.ErrorBoundary||d.route.errorElement||f===0)?b.createElement(SP,{location:n.location,revalidation:n.revalidation,component:h,error:g,children:y(),routeContext:{outlet:null,matches:m,isDataRoute:!0}}):y()},null)}var gm=function(e){return e.UseBlocker="useBlocker",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e}(gm||{}),Xo=function(e){return e.UseBlocker="useBlocker",e.UseLoaderData="useLoaderData",e.UseActionData="useActionData",e.UseRouteError="useRouteError",e.UseNavigation="useNavigation",e.UseRouteLoaderData="useRouteLoaderData",e.UseMatches="useMatches",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e.UseRouteId="useRouteId",e}(Xo||{});function kb(e){let t=b.useContext(_c);return t||Re(!1),t}function vm(e){let t=b.useContext(Cb);return t||Re(!1),t}function RP(e){let t=b.useContext(bo);return t||Re(!1),t}function ym(e){let t=RP(),n=t.matches[t.matches.length-1];return n.route.id||Re(!1),n.route.id}function PP(){let e=kb(gm.UseRevalidator),t=vm(Xo.UseRevalidator);return b.useMemo(()=>({revalidate:e.router.revalidate,state:t.revalidation}),[e.router.revalidate,t.revalidation])}function xm(){let e=vm(Xo.UseLoaderData),t=ym(Xo.UseLoaderData);if(e.errors&&e.errors[t]!=null){console.error("You cannot `useLoaderData` in an errorElement (routeId: "+t+")");return}return e.loaderData[t]}function kP(){var e;let t=b.useContext(Eb),n=vm(Xo.UseRouteError),r=ym(Xo.UseRouteError);return t!==void 0?t:(e=n.errors)==null?void 0:e[r]}function TP(){let{router:e}=kb(gm.UseNavigateStable),t=ym(Xo.UseNavigateStable),n=b.useRef(!1);return Rb(()=>{n.current=!0}),b.useCallback(function(o,i){i===void 0&&(i={}),n.current&&(typeof o=="number"?e.navigate(o):e.navigate(o,Yu({fromRouteId:t},i)))},[e,t])}const Zv={};function $P(e,t,n){Zv[e]||(Zv[e]=!0)}function OP(e){let{basename:t="/",children:n=null,location:r,navigationType:o=yt.Pop,navigator:i,static:a=!1,future:s}=e;nl()&&Re(!1);let l=t.replace(/^\/*/,"/"),u=b.useMemo(()=>({basename:l,navigator:i,static:a,future:Yu({v7_relativeSplatPath:!1},s)}),[l,s,i,a]);typeof r=="string"&&(r=xo(r));let{pathname:c="/",search:d="",hash:f="",state:g=null,key:p="default"}=r,h=b.useMemo(()=>{let C=ca(c,l);return C==null?null:{location:{pathname:C,search:d,hash:f,state:g,key:p},navigationType:o}},[l,c,d,f,g,p,o]);return h==null?null:b.createElement(oi.Provider,{value:u},b.createElement(mm.Provider,{children:n,value:h}))}new Promise(()=>{});function MP(e){let t={hasErrorBoundary:e.ErrorBoundary!=null||e.errorElement!=null};return e.Component&&Object.assign(t,{element:b.createElement(e.Component),Component:void 0}),e.HydrateFallback&&Object.assign(t,{hydrateFallbackElement:b.createElement(e.HydrateFallback),HydrateFallback:void 0}),e.ErrorBoundary&&Object.assign(t,{errorElement:b.createElement(e.ErrorBoundary),ErrorBoundary:void 0}),t}/**
 * React Router DOM v6.23.1
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */function Ls(){return Ls=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Ls.apply(this,arguments)}function _P(e,t){if(e==null)return{};var n={},r=Object.keys(e),o,i;for(i=0;i<r.length;i++)o=r[i],!(t.indexOf(o)>=0)&&(n[o]=e[o]);return n}function jP(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}function NP(e,t){return e.button===0&&(!t||t==="_self")&&!jP(e)}function Ap(e){return e===void 0&&(e=""),new URLSearchParams(typeof e=="string"||Array.isArray(e)||e instanceof URLSearchParams?e:Object.keys(e).reduce((t,n)=>{let r=e[n];return t.concat(Array.isArray(r)?r.map(o=>[n,o]):[[n,r]])},[]))}function AP(e,t){let n=Ap(e);return t&&t.forEach((r,o)=>{n.has(o)||t.getAll(o).forEach(i=>{n.append(o,i)})}),n}const LP=["onClick","relative","reloadDocument","replace","state","target","to","preventScrollReset","unstable_viewTransition"],IP="6";try{window.__reactRouterVersion=IP}catch{}function FP(e,t){return JR({basename:t==null?void 0:t.basename,future:Ls({},t==null?void 0:t.future,{v7_prependBasename:!0}),history:wR({window:t==null?void 0:t.window}),hydrationData:(t==null?void 0:t.hydrationData)||DP(),routes:e,mapRouteProperties:MP,unstable_dataStrategy:t==null?void 0:t.unstable_dataStrategy,window:t==null?void 0:t.window}).initialize()}function DP(){var e;let t=(e=window)==null?void 0:e.__staticRouterHydrationData;return t&&t.errors&&(t=Ls({},t,{errors:zP(t.errors)})),t}function zP(e){if(!e)return null;let t=Object.entries(e),n={};for(let[r,o]of t)if(o&&o.__type==="RouteErrorResponse")n[r]=new dm(o.status,o.statusText,o.data,o.internal===!0);else if(o&&o.__type==="Error"){if(o.__subType){let i=window[o.__subType];if(typeof i=="function")try{let a=new i(o.message);a.stack="",n[r]=a}catch{}}if(n[r]==null){let i=new Error(o.message);i.stack="",n[r]=i}}else n[r]=o;return n}const BP=b.createContext({isTransitioning:!1}),UP=b.createContext(new Map),WP="startTransition",ey=Pu[WP],HP="flushSync",ty=bR[HP];function VP(e){ey?ey(e):e()}function Aa(e){ty?ty(e):e()}class KP{constructor(){this.status="pending",this.promise=new Promise((t,n)=>{this.resolve=r=>{this.status==="pending"&&(this.status="resolved",t(r))},this.reject=r=>{this.status==="pending"&&(this.status="rejected",n(r))}})}}function qP(e){let{fallbackElement:t,router:n,future:r}=e,[o,i]=b.useState(n.state),[a,s]=b.useState(),[l,u]=b.useState({isTransitioning:!1}),[c,d]=b.useState(),[f,g]=b.useState(),[p,h]=b.useState(),C=b.useRef(new Map),{v7_startTransition:m}=r||{},y=b.useCallback(x=>{m?VP(x):x()},[m]),v=b.useCallback((x,k)=>{let{deletedFetchers:M,unstable_flushSync:T,unstable_viewTransitionOpts:j}=k;M.forEach(N=>C.current.delete(N)),x.fetchers.forEach((N,F)=>{N.data!==void 0&&C.current.set(F,N.data)});let L=n.window==null||n.window.document==null||typeof n.window.document.startViewTransition!="function";if(!j||L){T?Aa(()=>i(x)):y(()=>i(x));return}if(T){Aa(()=>{f&&(c&&c.resolve(),f.skipTransition()),u({isTransitioning:!0,flushSync:!0,currentLocation:j.currentLocation,nextLocation:j.nextLocation})});let N=n.window.document.startViewTransition(()=>{Aa(()=>i(x))});N.finished.finally(()=>{Aa(()=>{d(void 0),g(void 0),s(void 0),u({isTransitioning:!1})})}),Aa(()=>g(N));return}f?(c&&c.resolve(),f.skipTransition(),h({state:x,currentLocation:j.currentLocation,nextLocation:j.nextLocation})):(s(x),u({isTransitioning:!0,flushSync:!1,currentLocation:j.currentLocation,nextLocation:j.nextLocation}))},[n.window,f,c,C,y]);b.useLayoutEffect(()=>n.subscribe(v),[n,v]),b.useEffect(()=>{l.isTransitioning&&!l.flushSync&&d(new KP)},[l]),b.useEffect(()=>{if(c&&a&&n.window){let x=a,k=c.promise,M=n.window.document.startViewTransition(async()=>{y(()=>i(x)),await k});M.finished.finally(()=>{d(void 0),g(void 0),s(void 0),u({isTransitioning:!1})}),g(M)}},[y,a,c,n.window]),b.useEffect(()=>{c&&a&&o.location.key===a.location.key&&c.resolve()},[c,f,o.location,a]),b.useEffect(()=>{!l.isTransitioning&&p&&(s(p.state),u({isTransitioning:!0,flushSync:!1,currentLocation:p.currentLocation,nextLocation:p.nextLocation}),h(void 0))},[l.isTransitioning,p]),b.useEffect(()=>{},[]);let w=b.useMemo(()=>({createHref:n.createHref,encodeLocation:n.encodeLocation,go:x=>n.navigate(x),push:(x,k,M)=>n.navigate(x,{state:k,preventScrollReset:M==null?void 0:M.preventScrollReset}),replace:(x,k,M)=>n.navigate(x,{replace:!0,state:k,preventScrollReset:M==null?void 0:M.preventScrollReset})}),[n]),R=n.basename||"/",P=b.useMemo(()=>({router:n,navigator:w,static:!1,basename:R}),[n,w,R]);return b.createElement(b.Fragment,null,b.createElement(_c.Provider,{value:P},b.createElement(Cb.Provider,{value:o},b.createElement(UP.Provider,{value:C.current},b.createElement(BP.Provider,{value:l},b.createElement(OP,{basename:R,location:o.location,navigationType:o.historyAction,navigator:w,future:{v7_relativeSplatPath:n.future.v7_relativeSplatPath}},o.initialized||n.future.v7_partialHydration?b.createElement(GP,{routes:n.routes,future:n.future,state:o}):t))))),null)}function GP(e){let{routes:t,future:n,state:r}=e;return xP(t,void 0,r,n)}const XP=typeof window<"u"&&typeof window.document<"u"&&typeof window.document.createElement<"u",QP=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,li=b.forwardRef(function(t,n){let{onClick:r,relative:o,reloadDocument:i,replace:a,state:s,target:l,to:u,preventScrollReset:c,unstable_viewTransition:d}=t,f=_P(t,LP),{basename:g}=b.useContext(oi),p,h=!1;if(typeof u=="string"&&QP.test(u)&&(p=u,XP))try{let v=new URL(window.location.href),w=u.startsWith("//")?new URL(v.protocol+u):new URL(u),R=ca(w.pathname,g);w.origin===v.origin&&R!=null?u=R+w.search+w.hash:h=!0}catch{}let C=gP(u,{relative:o}),m=YP(u,{replace:a,state:s,target:l,preventScrollReset:c,relative:o,unstable_viewTransition:d});function y(v){r&&r(v),v.defaultPrevented||m(v)}return b.createElement("a",Ls({},f,{href:p||C,onClick:h||i?r:y,ref:n,target:l}))});var ny;(function(e){e.UseScrollRestoration="useScrollRestoration",e.UseSubmit="useSubmit",e.UseSubmitFetcher="useSubmitFetcher",e.UseFetcher="useFetcher",e.useViewTransitionState="useViewTransitionState"})(ny||(ny={}));var ry;(function(e){e.UseFetcher="useFetcher",e.UseFetchers="useFetchers",e.UseScrollRestoration="useScrollRestoration"})(ry||(ry={}));function YP(e,t){let{target:n,replace:r,state:o,preventScrollReset:i,relative:a,unstable_viewTransition:s}=t===void 0?{}:t,l=ol(),u=rl(),c=Pb(e,{relative:a});return b.useCallback(d=>{if(NP(d,n)){d.preventDefault();let f=r!==void 0?r:Go(u)===Go(c);l(e,{replace:f,state:o,preventScrollReset:i,relative:a,unstable_viewTransition:s})}},[u,l,c,r,o,n,e,i,a,s])}function JP(e){let t=b.useRef(Ap(e)),n=b.useRef(!1),r=rl(),o=b.useMemo(()=>AP(r.search,n.current?null:t.current),[r.search]),i=ol(),a=b.useCallback((s,l)=>{const u=Ap(typeof s=="function"?s(o):s);n.current=!0,i("?"+u,l)},[i,o]);return[o,a]}const Is={black:"#000",white:"#fff"},ui={50:"#ffebee",100:"#ffcdd2",200:"#ef9a9a",300:"#e57373",400:"#ef5350",500:"#f44336",600:"#e53935",700:"#d32f2f",800:"#c62828",900:"#b71c1c",A100:"#ff8a80",A200:"#ff5252",A400:"#ff1744",A700:"#d50000"},ci={50:"#f3e5f5",100:"#e1bee7",200:"#ce93d8",300:"#ba68c8",400:"#ab47bc",500:"#9c27b0",600:"#8e24aa",700:"#7b1fa2",800:"#6a1b9a",900:"#4a148c",A100:"#ea80fc",A200:"#e040fb",A400:"#d500f9",A700:"#aa00ff"},di={50:"#e3f2fd",100:"#bbdefb",200:"#90caf9",300:"#64b5f6",400:"#42a5f5",500:"#2196f3",600:"#1e88e5",700:"#1976d2",800:"#1565c0",900:"#0d47a1",A100:"#82b1ff",A200:"#448aff",A400:"#2979ff",A700:"#2962ff"},fi={50:"#e1f5fe",100:"#b3e5fc",200:"#81d4fa",300:"#4fc3f7",400:"#29b6f6",500:"#03a9f4",600:"#039be5",700:"#0288d1",800:"#0277bd",900:"#01579b",A100:"#80d8ff",A200:"#40c4ff",A400:"#00b0ff",A700:"#0091ea"},pi={50:"#e8f5e9",100:"#c8e6c9",200:"#a5d6a7",300:"#81c784",400:"#66bb6a",500:"#4caf50",600:"#43a047",700:"#388e3c",800:"#2e7d32",900:"#1b5e20",A100:"#b9f6ca",A200:"#69f0ae",A400:"#00e676",A700:"#00c853"},La={50:"#fff3e0",100:"#ffe0b2",200:"#ffcc80",300:"#ffb74d",400:"#ffa726",500:"#ff9800",600:"#fb8c00",700:"#f57c00",800:"#ef6c00",900:"#e65100",A100:"#ffd180",A200:"#ffab40",A400:"#ff9100",A700:"#ff6d00"},ZP={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#f5f5f5",A200:"#eeeeee",A400:"#bdbdbd",A700:"#616161"};function Qo(e){let t="https://mui.com/production-error/?code="+e;for(let n=1;n<arguments.length;n+=1)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified MUI error #"+e+"; visit "+t+" for the full message."}const ek=Object.freeze(Object.defineProperty({__proto__:null,default:Qo},Symbol.toStringTag,{value:"Module"})),il="$$material";function E(){return E=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},E.apply(null,arguments)}function G(e,t){if(e==null)return{};var n={};for(var r in e)if({}.hasOwnProperty.call(e,r)){if(t.indexOf(r)>=0)continue;n[r]=e[r]}return n}function Tb(e){var t=Object.create(null);return function(n){return t[n]===void 0&&(t[n]=e(n)),t[n]}}var tk=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|disableRemotePlayback|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/,nk=Tb(function(e){return tk.test(e)||e.charCodeAt(0)===111&&e.charCodeAt(1)===110&&e.charCodeAt(2)<91});function rk(e){if(e.sheet)return e.sheet;for(var t=0;t<document.styleSheets.length;t++)if(document.styleSheets[t].ownerNode===e)return document.styleSheets[t]}function ok(e){var t=document.createElement("style");return t.setAttribute("data-emotion",e.key),e.nonce!==void 0&&t.setAttribute("nonce",e.nonce),t.appendChild(document.createTextNode("")),t.setAttribute("data-s",""),t}var ik=function(){function e(n){var r=this;this._insertTag=function(o){var i;r.tags.length===0?r.insertionPoint?i=r.insertionPoint.nextSibling:r.prepend?i=r.container.firstChild:i=r.before:i=r.tags[r.tags.length-1].nextSibling,r.container.insertBefore(o,i),r.tags.push(o)},this.isSpeedy=n.speedy===void 0?!0:n.speedy,this.tags=[],this.ctr=0,this.nonce=n.nonce,this.key=n.key,this.container=n.container,this.prepend=n.prepend,this.insertionPoint=n.insertionPoint,this.before=null}var t=e.prototype;return t.hydrate=function(r){r.forEach(this._insertTag)},t.insert=function(r){this.ctr%(this.isSpeedy?65e3:1)===0&&this._insertTag(ok(this));var o=this.tags[this.tags.length-1];if(this.isSpeedy){var i=rk(o);try{i.insertRule(r,i.cssRules.length)}catch{}}else o.appendChild(document.createTextNode(r));this.ctr++},t.flush=function(){this.tags.forEach(function(r){return r.parentNode&&r.parentNode.removeChild(r)}),this.tags=[],this.ctr=0},e}(),Ut="-ms-",Ju="-moz-",Ne="-webkit-",$b="comm",bm="rule",wm="decl",ak="@import",Ob="@keyframes",sk="@layer",lk=Math.abs,jc=String.fromCharCode,uk=Object.assign;function ck(e,t){return It(e,0)^45?(((t<<2^It(e,0))<<2^It(e,1))<<2^It(e,2))<<2^It(e,3):0}function Mb(e){return e.trim()}function dk(e,t){return(e=t.exec(e))?e[0]:e}function Ae(e,t,n){return e.replace(t,n)}function Lp(e,t){return e.indexOf(t)}function It(e,t){return e.charCodeAt(t)|0}function Fs(e,t,n){return e.slice(t,n)}function fr(e){return e.length}function Sm(e){return e.length}function Xl(e,t){return t.push(e),e}function fk(e,t){return e.map(t).join("")}var Nc=1,Ji=1,_b=0,cn=0,xt=0,da="";function Ac(e,t,n,r,o,i,a){return{value:e,root:t,parent:n,type:r,props:o,children:i,line:Nc,column:Ji,length:a,return:""}}function Ia(e,t){return uk(Ac("",null,null,"",null,null,0),e,{length:-e.length},t)}function pk(){return xt}function hk(){return xt=cn>0?It(da,--cn):0,Ji--,xt===10&&(Ji=1,Nc--),xt}function vn(){return xt=cn<_b?It(da,cn++):0,Ji++,xt===10&&(Ji=1,Nc++),xt}function vr(){return It(da,cn)}function gu(){return cn}function al(e,t){return Fs(da,e,t)}function Ds(e){switch(e){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function jb(e){return Nc=Ji=1,_b=fr(da=e),cn=0,[]}function Nb(e){return da="",e}function vu(e){return Mb(al(cn-1,Ip(e===91?e+2:e===40?e+1:e)))}function mk(e){for(;(xt=vr())&&xt<33;)vn();return Ds(e)>2||Ds(xt)>3?"":" "}function gk(e,t){for(;--t&&vn()&&!(xt<48||xt>102||xt>57&&xt<65||xt>70&&xt<97););return al(e,gu()+(t<6&&vr()==32&&vn()==32))}function Ip(e){for(;vn();)switch(xt){case e:return cn;case 34:case 39:e!==34&&e!==39&&Ip(xt);break;case 40:e===41&&Ip(e);break;case 92:vn();break}return cn}function vk(e,t){for(;vn()&&e+xt!==57;)if(e+xt===84&&vr()===47)break;return"/*"+al(t,cn-1)+"*"+jc(e===47?e:vn())}function yk(e){for(;!Ds(vr());)vn();return al(e,cn)}function xk(e){return Nb(yu("",null,null,null,[""],e=jb(e),0,[0],e))}function yu(e,t,n,r,o,i,a,s,l){for(var u=0,c=0,d=a,f=0,g=0,p=0,h=1,C=1,m=1,y=0,v="",w=o,R=i,P=r,x=v;C;)switch(p=y,y=vn()){case 40:if(p!=108&&It(x,d-1)==58){Lp(x+=Ae(vu(y),"&","&\f"),"&\f")!=-1&&(m=-1);break}case 34:case 39:case 91:x+=vu(y);break;case 9:case 10:case 13:case 32:x+=mk(p);break;case 92:x+=gk(gu()-1,7);continue;case 47:switch(vr()){case 42:case 47:Xl(bk(vk(vn(),gu()),t,n),l);break;default:x+="/"}break;case 123*h:s[u++]=fr(x)*m;case 125*h:case 59:case 0:switch(y){case 0:case 125:C=0;case 59+c:m==-1&&(x=Ae(x,/\f/g,"")),g>0&&fr(x)-d&&Xl(g>32?iy(x+";",r,n,d-1):iy(Ae(x," ","")+";",r,n,d-2),l);break;case 59:x+=";";default:if(Xl(P=oy(x,t,n,u,c,o,s,v,w=[],R=[],d),i),y===123)if(c===0)yu(x,t,P,P,w,i,d,s,R);else switch(f===99&&It(x,3)===110?100:f){case 100:case 108:case 109:case 115:yu(e,P,P,r&&Xl(oy(e,P,P,0,0,o,s,v,o,w=[],d),R),o,R,d,s,r?w:R);break;default:yu(x,P,P,P,[""],R,0,s,R)}}u=c=g=0,h=m=1,v=x="",d=a;break;case 58:d=1+fr(x),g=p;default:if(h<1){if(y==123)--h;else if(y==125&&h++==0&&hk()==125)continue}switch(x+=jc(y),y*h){case 38:m=c>0?1:(x+="\f",-1);break;case 44:s[u++]=(fr(x)-1)*m,m=1;break;case 64:vr()===45&&(x+=vu(vn())),f=vr(),c=d=fr(v=x+=yk(gu())),y++;break;case 45:p===45&&fr(x)==2&&(h=0)}}return i}function oy(e,t,n,r,o,i,a,s,l,u,c){for(var d=o-1,f=o===0?i:[""],g=Sm(f),p=0,h=0,C=0;p<r;++p)for(var m=0,y=Fs(e,d+1,d=lk(h=a[p])),v=e;m<g;++m)(v=Mb(h>0?f[m]+" "+y:Ae(y,/&\f/g,f[m])))&&(l[C++]=v);return Ac(e,t,n,o===0?bm:s,l,u,c)}function bk(e,t,n){return Ac(e,t,n,$b,jc(pk()),Fs(e,2,-2),0)}function iy(e,t,n,r){return Ac(e,t,n,wm,Fs(e,0,r),Fs(e,r+1,-1),r)}function Ii(e,t){for(var n="",r=Sm(e),o=0;o<r;o++)n+=t(e[o],o,e,t)||"";return n}function wk(e,t,n,r){switch(e.type){case sk:if(e.children.length)break;case ak:case wm:return e.return=e.return||e.value;case $b:return"";case Ob:return e.return=e.value+"{"+Ii(e.children,r)+"}";case bm:e.value=e.props.join(",")}return fr(n=Ii(e.children,r))?e.return=e.value+"{"+n+"}":""}function Sk(e){var t=Sm(e);return function(n,r,o,i){for(var a="",s=0;s<t;s++)a+=e[s](n,r,o,i)||"";return a}}function Ck(e){return function(t){t.root||(t=t.return)&&e(t)}}var Ek=function(t,n,r){for(var o=0,i=0;o=i,i=vr(),o===38&&i===12&&(n[r]=1),!Ds(i);)vn();return al(t,cn)},Rk=function(t,n){var r=-1,o=44;do switch(Ds(o)){case 0:o===38&&vr()===12&&(n[r]=1),t[r]+=Ek(cn-1,n,r);break;case 2:t[r]+=vu(o);break;case 4:if(o===44){t[++r]=vr()===58?"&\f":"",n[r]=t[r].length;break}default:t[r]+=jc(o)}while(o=vn());return t},Pk=function(t,n){return Nb(Rk(jb(t),n))},ay=new WeakMap,kk=function(t){if(!(t.type!=="rule"||!t.parent||t.length<1)){for(var n=t.value,r=t.parent,o=t.column===r.column&&t.line===r.line;r.type!=="rule";)if(r=r.parent,!r)return;if(!(t.props.length===1&&n.charCodeAt(0)!==58&&!ay.get(r))&&!o){ay.set(t,!0);for(var i=[],a=Pk(n,i),s=r.props,l=0,u=0;l<a.length;l++)for(var c=0;c<s.length;c++,u++)t.props[u]=i[l]?a[l].replace(/&\f/g,s[c]):s[c]+" "+a[l]}}},Tk=function(t){if(t.type==="decl"){var n=t.value;n.charCodeAt(0)===108&&n.charCodeAt(2)===98&&(t.return="",t.value="")}};function Ab(e,t){switch(ck(e,t)){case 5103:return Ne+"print-"+e+e;case 5737:case 4201:case 3177:case 3433:case 1641:case 4457:case 2921:case 5572:case 6356:case 5844:case 3191:case 6645:case 3005:case 6391:case 5879:case 5623:case 6135:case 4599:case 4855:case 4215:case 6389:case 5109:case 5365:case 5621:case 3829:return Ne+e+e;case 5349:case 4246:case 4810:case 6968:case 2756:return Ne+e+Ju+e+Ut+e+e;case 6828:case 4268:return Ne+e+Ut+e+e;case 6165:return Ne+e+Ut+"flex-"+e+e;case 5187:return Ne+e+Ae(e,/(\w+).+(:[^]+)/,Ne+"box-$1$2"+Ut+"flex-$1$2")+e;case 5443:return Ne+e+Ut+"flex-item-"+Ae(e,/flex-|-self/,"")+e;case 4675:return Ne+e+Ut+"flex-line-pack"+Ae(e,/align-content|flex-|-self/,"")+e;case 5548:return Ne+e+Ut+Ae(e,"shrink","negative")+e;case 5292:return Ne+e+Ut+Ae(e,"basis","preferred-size")+e;case 6060:return Ne+"box-"+Ae(e,"-grow","")+Ne+e+Ut+Ae(e,"grow","positive")+e;case 4554:return Ne+Ae(e,/([^-])(transform)/g,"$1"+Ne+"$2")+e;case 6187:return Ae(Ae(Ae(e,/(zoom-|grab)/,Ne+"$1"),/(image-set)/,Ne+"$1"),e,"")+e;case 5495:case 3959:return Ae(e,/(image-set\([^]*)/,Ne+"$1$`$1");case 4968:return Ae(Ae(e,/(.+:)(flex-)?(.*)/,Ne+"box-pack:$3"+Ut+"flex-pack:$3"),/s.+-b[^;]+/,"justify")+Ne+e+e;case 4095:case 3583:case 4068:case 2532:return Ae(e,/(.+)-inline(.+)/,Ne+"$1$2")+e;case 8116:case 7059:case 5753:case 5535:case 5445:case 5701:case 4933:case 4677:case 5533:case 5789:case 5021:case 4765:if(fr(e)-1-t>6)switch(It(e,t+1)){case 109:if(It(e,t+4)!==45)break;case 102:return Ae(e,/(.+:)(.+)-([^]+)/,"$1"+Ne+"$2-$3$1"+Ju+(It(e,t+3)==108?"$3":"$2-$3"))+e;case 115:return~Lp(e,"stretch")?Ab(Ae(e,"stretch","fill-available"),t)+e:e}break;case 4949:if(It(e,t+1)!==115)break;case 6444:switch(It(e,fr(e)-3-(~Lp(e,"!important")&&10))){case 107:return Ae(e,":",":"+Ne)+e;case 101:return Ae(e,/(.+:)([^;!]+)(;|!.+)?/,"$1"+Ne+(It(e,14)===45?"inline-":"")+"box$3$1"+Ne+"$2$3$1"+Ut+"$2box$3")+e}break;case 5936:switch(It(e,t+11)){case 114:return Ne+e+Ut+Ae(e,/[svh]\w+-[tblr]{2}/,"tb")+e;case 108:return Ne+e+Ut+Ae(e,/[svh]\w+-[tblr]{2}/,"tb-rl")+e;case 45:return Ne+e+Ut+Ae(e,/[svh]\w+-[tblr]{2}/,"lr")+e}return Ne+e+Ut+e+e}return e}var $k=function(t,n,r,o){if(t.length>-1&&!t.return)switch(t.type){case wm:t.return=Ab(t.value,t.length);break;case Ob:return Ii([Ia(t,{value:Ae(t.value,"@","@"+Ne)})],o);case bm:if(t.length)return fk(t.props,function(i){switch(dk(i,/(::plac\w+|:read-\w+)/)){case":read-only":case":read-write":return Ii([Ia(t,{props:[Ae(i,/:(read-\w+)/,":"+Ju+"$1")]})],o);case"::placeholder":return Ii([Ia(t,{props:[Ae(i,/:(plac\w+)/,":"+Ne+"input-$1")]}),Ia(t,{props:[Ae(i,/:(plac\w+)/,":"+Ju+"$1")]}),Ia(t,{props:[Ae(i,/:(plac\w+)/,Ut+"input-$1")]})],o)}return""})}},Ok=[$k],Lb=function(t){var n=t.key;if(n==="css"){var r=document.querySelectorAll("style[data-emotion]:not([data-s])");Array.prototype.forEach.call(r,function(h){var C=h.getAttribute("data-emotion");C.indexOf(" ")!==-1&&(document.head.appendChild(h),h.setAttribute("data-s",""))})}var o=t.stylisPlugins||Ok,i={},a,s=[];a=t.container||document.head,Array.prototype.forEach.call(document.querySelectorAll('style[data-emotion^="'+n+' "]'),function(h){for(var C=h.getAttribute("data-emotion").split(" "),m=1;m<C.length;m++)i[C[m]]=!0;s.push(h)});var l,u=[kk,Tk];{var c,d=[wk,Ck(function(h){c.insert(h)})],f=Sk(u.concat(o,d)),g=function(C){return Ii(xk(C),f)};l=function(C,m,y,v){c=y,g(C?C+"{"+m.styles+"}":m.styles),v&&(p.inserted[m.name]=!0)}}var p={key:n,sheet:new ik({key:n,container:a,nonce:t.nonce,speedy:t.speedy,prepend:t.prepend,insertionPoint:t.insertionPoint}),nonce:t.nonce,inserted:i,registered:{},insert:l};return p.sheet.hydrate(s),p},Ib={exports:{}},Ie={};/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var _t=typeof Symbol=="function"&&Symbol.for,Cm=_t?Symbol.for("react.element"):60103,Em=_t?Symbol.for("react.portal"):60106,Lc=_t?Symbol.for("react.fragment"):60107,Ic=_t?Symbol.for("react.strict_mode"):60108,Fc=_t?Symbol.for("react.profiler"):60114,Dc=_t?Symbol.for("react.provider"):60109,zc=_t?Symbol.for("react.context"):60110,Rm=_t?Symbol.for("react.async_mode"):60111,Bc=_t?Symbol.for("react.concurrent_mode"):60111,Uc=_t?Symbol.for("react.forward_ref"):60112,Wc=_t?Symbol.for("react.suspense"):60113,Mk=_t?Symbol.for("react.suspense_list"):60120,Hc=_t?Symbol.for("react.memo"):60115,Vc=_t?Symbol.for("react.lazy"):60116,_k=_t?Symbol.for("react.block"):60121,jk=_t?Symbol.for("react.fundamental"):60117,Nk=_t?Symbol.for("react.responder"):60118,Ak=_t?Symbol.for("react.scope"):60119;function Cn(e){if(typeof e=="object"&&e!==null){var t=e.$$typeof;switch(t){case Cm:switch(e=e.type,e){case Rm:case Bc:case Lc:case Fc:case Ic:case Wc:return e;default:switch(e=e&&e.$$typeof,e){case zc:case Uc:case Vc:case Hc:case Dc:return e;default:return t}}case Em:return t}}}function Fb(e){return Cn(e)===Bc}Ie.AsyncMode=Rm;Ie.ConcurrentMode=Bc;Ie.ContextConsumer=zc;Ie.ContextProvider=Dc;Ie.Element=Cm;Ie.ForwardRef=Uc;Ie.Fragment=Lc;Ie.Lazy=Vc;Ie.Memo=Hc;Ie.Portal=Em;Ie.Profiler=Fc;Ie.StrictMode=Ic;Ie.Suspense=Wc;Ie.isAsyncMode=function(e){return Fb(e)||Cn(e)===Rm};Ie.isConcurrentMode=Fb;Ie.isContextConsumer=function(e){return Cn(e)===zc};Ie.isContextProvider=function(e){return Cn(e)===Dc};Ie.isElement=function(e){return typeof e=="object"&&e!==null&&e.$$typeof===Cm};Ie.isForwardRef=function(e){return Cn(e)===Uc};Ie.isFragment=function(e){return Cn(e)===Lc};Ie.isLazy=function(e){return Cn(e)===Vc};Ie.isMemo=function(e){return Cn(e)===Hc};Ie.isPortal=function(e){return Cn(e)===Em};Ie.isProfiler=function(e){return Cn(e)===Fc};Ie.isStrictMode=function(e){return Cn(e)===Ic};Ie.isSuspense=function(e){return Cn(e)===Wc};Ie.isValidElementType=function(e){return typeof e=="string"||typeof e=="function"||e===Lc||e===Bc||e===Fc||e===Ic||e===Wc||e===Mk||typeof e=="object"&&e!==null&&(e.$$typeof===Vc||e.$$typeof===Hc||e.$$typeof===Dc||e.$$typeof===zc||e.$$typeof===Uc||e.$$typeof===jk||e.$$typeof===Nk||e.$$typeof===Ak||e.$$typeof===_k)};Ie.typeOf=Cn;Ib.exports=Ie;var Lk=Ib.exports,Db=Lk,Ik={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},Fk={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},zb={};zb[Db.ForwardRef]=Ik;zb[Db.Memo]=Fk;var Dk=!0;function zk(e,t,n){var r="";return n.split(" ").forEach(function(o){e[o]!==void 0?t.push(e[o]+";"):r+=o+" "}),r}var Bb=function(t,n,r){var o=t.key+"-"+n.name;(r===!1||Dk===!1)&&t.registered[o]===void 0&&(t.registered[o]=n.styles)},Ub=function(t,n,r){Bb(t,n,r);var o=t.key+"-"+n.name;if(t.inserted[n.name]===void 0){var i=n;do t.insert(n===i?"."+o:"",i,t.sheet,!0),i=i.next;while(i!==void 0)}};function Bk(e){for(var t=0,n,r=0,o=e.length;o>=4;++r,o-=4)n=e.charCodeAt(r)&255|(e.charCodeAt(++r)&255)<<8|(e.charCodeAt(++r)&255)<<16|(e.charCodeAt(++r)&255)<<24,n=(n&65535)*1540483477+((n>>>16)*59797<<16),n^=n>>>24,t=(n&65535)*1540483477+((n>>>16)*59797<<16)^(t&65535)*1540483477+((t>>>16)*59797<<16);switch(o){case 3:t^=(e.charCodeAt(r+2)&255)<<16;case 2:t^=(e.charCodeAt(r+1)&255)<<8;case 1:t^=e.charCodeAt(r)&255,t=(t&65535)*1540483477+((t>>>16)*59797<<16)}return t^=t>>>13,t=(t&65535)*1540483477+((t>>>16)*59797<<16),((t^t>>>15)>>>0).toString(36)}var Uk={animationIterationCount:1,aspectRatio:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1},Wk=/[A-Z]|^ms/g,Hk=/_EMO_([^_]+?)_([^]*?)_EMO_/g,Wb=function(t){return t.charCodeAt(1)===45},sy=function(t){return t!=null&&typeof t!="boolean"},ff=Tb(function(e){return Wb(e)?e:e.replace(Wk,"-$&").toLowerCase()}),ly=function(t,n){switch(t){case"animation":case"animationName":if(typeof n=="string")return n.replace(Hk,function(r,o,i){return pr={name:o,styles:i,next:pr},o})}return Uk[t]!==1&&!Wb(t)&&typeof n=="number"&&n!==0?n+"px":n};function zs(e,t,n){if(n==null)return"";if(n.__emotion_styles!==void 0)return n;switch(typeof n){case"boolean":return"";case"object":{if(n.anim===1)return pr={name:n.name,styles:n.styles,next:pr},n.name;if(n.styles!==void 0){var r=n.next;if(r!==void 0)for(;r!==void 0;)pr={name:r.name,styles:r.styles,next:pr},r=r.next;var o=n.styles+";";return o}return Vk(e,t,n)}case"function":{if(e!==void 0){var i=pr,a=n(e);return pr=i,zs(e,t,a)}break}}if(t==null)return n;var s=t[n];return s!==void 0?s:n}function Vk(e,t,n){var r="";if(Array.isArray(n))for(var o=0;o<n.length;o++)r+=zs(e,t,n[o])+";";else for(var i in n){var a=n[i];if(typeof a!="object")t!=null&&t[a]!==void 0?r+=i+"{"+t[a]+"}":sy(a)&&(r+=ff(i)+":"+ly(i,a)+";");else if(Array.isArray(a)&&typeof a[0]=="string"&&(t==null||t[a[0]]===void 0))for(var s=0;s<a.length;s++)sy(a[s])&&(r+=ff(i)+":"+ly(i,a[s])+";");else{var l=zs(e,t,a);switch(i){case"animation":case"animationName":{r+=ff(i)+":"+l+";";break}default:r+=i+"{"+l+"}"}}}return r}var uy=/label:\s*([^\s;\n{]+)\s*(;|$)/g,pr,Pm=function(t,n,r){if(t.length===1&&typeof t[0]=="object"&&t[0]!==null&&t[0].styles!==void 0)return t[0];var o=!0,i="";pr=void 0;var a=t[0];a==null||a.raw===void 0?(o=!1,i+=zs(r,n,a)):i+=a[0];for(var s=1;s<t.length;s++)i+=zs(r,n,t[s]),o&&(i+=a[s]);uy.lastIndex=0;for(var l="",u;(u=uy.exec(i))!==null;)l+="-"+u[1];var c=Bk(i)+l;return{name:c,styles:i,next:pr}},Kk=function(t){return t()},Hb=Pu.useInsertionEffect?Pu.useInsertionEffect:!1,qk=Hb||Kk,cy=Hb||b.useLayoutEffect,Vb=b.createContext(typeof HTMLElement<"u"?Lb({key:"css"}):null),Gk=Vb.Provider,Kb=function(t){return b.forwardRef(function(n,r){var o=b.useContext(Vb);return t(n,o,r)})},Kc=b.createContext({}),pf={exports:{}},dy;function qb(){return dy||(dy=1,function(e){function t(){return e.exports=t=Object.assign?Object.assign.bind():function(n){for(var r=1;r<arguments.length;r++){var o=arguments[r];for(var i in o)({}).hasOwnProperty.call(o,i)&&(n[i]=o[i])}return n},e.exports.__esModule=!0,e.exports.default=e.exports,t.apply(null,arguments)}e.exports=t,e.exports.__esModule=!0,e.exports.default=e.exports}(pf)),pf.exports}qb();var Xk=Kb(function(e,t){var n=e.styles,r=Pm([n],void 0,b.useContext(Kc)),o=b.useRef();return cy(function(){var i=t.key+"-global",a=new t.sheet.constructor({key:i,nonce:t.sheet.nonce,container:t.sheet.container,speedy:t.sheet.isSpeedy}),s=!1,l=document.querySelector('style[data-emotion="'+i+" "+r.name+'"]');return t.sheet.tags.length&&(a.before=t.sheet.tags[0]),l!==null&&(s=!0,l.setAttribute("data-emotion",i),a.hydrate([l])),o.current=[a,s],function(){a.flush()}},[t]),cy(function(){var i=o.current,a=i[0],s=i[1];if(s){i[1]=!1;return}if(r.next!==void 0&&Ub(t,r.next,!0),a.tags.length){var l=a.tags[a.tags.length-1].nextElementSibling;a.before=l,a.flush()}t.insert("",r,a,!1)},[t,r.name]),null});function qc(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return Pm(t)}var fa=function(){var t=qc.apply(void 0,arguments),n="animation-"+t.name;return{name:n,styles:"@keyframes "+n+"{"+t.styles+"}",anim:1,toString:function(){return"_EMO_"+this.name+"_"+this.styles+"_EMO_"}}},Qk=nk,Yk=function(t){return t!=="theme"},fy=function(t){return typeof t=="string"&&t.charCodeAt(0)>96?Qk:Yk},py=function(t,n,r){var o;if(n){var i=n.shouldForwardProp;o=t.__emotion_forwardProp&&i?function(a){return t.__emotion_forwardProp(a)&&i(a)}:i}return typeof o!="function"&&r&&(o=t.__emotion_forwardProp),o},Jk=function(t){var n=t.cache,r=t.serialized,o=t.isStringTag;return Bb(n,r,o),qk(function(){return Ub(n,r,o)}),null},Zk=function e(t,n){var r=t.__emotion_real===t,o=r&&t.__emotion_base||t,i,a;n!==void 0&&(i=n.label,a=n.target);var s=py(t,n,r),l=s||fy(o),u=!l("as");return function(){var c=arguments,d=r&&t.__emotion_styles!==void 0?t.__emotion_styles.slice(0):[];if(i!==void 0&&d.push("label:"+i+";"),c[0]==null||c[0].raw===void 0)d.push.apply(d,c);else{d.push(c[0][0]);for(var f=c.length,g=1;g<f;g++)d.push(c[g],c[0][g])}var p=Kb(function(h,C,m){var y=u&&h.as||o,v="",w=[],R=h;if(h.theme==null){R={};for(var P in h)R[P]=h[P];R.theme=b.useContext(Kc)}typeof h.className=="string"?v=zk(C.registered,w,h.className):h.className!=null&&(v=h.className+" ");var x=Pm(d.concat(w),C.registered,R);v+=C.key+"-"+x.name,a!==void 0&&(v+=" "+a);var k=u&&s===void 0?fy(y):l,M={};for(var T in h)u&&T==="as"||k(T)&&(M[T]=h[T]);return M.className=v,M.ref=m,b.createElement(b.Fragment,null,b.createElement(Jk,{cache:C,serialized:x,isStringTag:typeof y=="string"}),b.createElement(y,M))});return p.displayName=i!==void 0?i:"Styled("+(typeof o=="string"?o:o.displayName||o.name||"Component")+")",p.defaultProps=t.defaultProps,p.__emotion_real=p,p.__emotion_base=o,p.__emotion_styles=d,p.__emotion_forwardProp=s,Object.defineProperty(p,"toString",{value:function(){return"."+a}}),p.withComponent=function(h,C){return e(h,E({},n,C,{shouldForwardProp:py(p,C,!0)})).apply(void 0,d)},p}},eT=["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"],Fp=Zk.bind();eT.forEach(function(e){Fp[e]=Fp(e)});let Dp;typeof document=="object"&&(Dp=Lb({key:"css",prepend:!0}));function tT(e){const{injectFirst:t,children:n}=e;return t&&Dp?S.jsx(Gk,{value:Dp,children:n}):n}function nT(e){return e==null||Object.keys(e).length===0}function Gb(e){const{styles:t,defaultTheme:n={}}=e,r=typeof t=="function"?o=>t(nT(o)?n:o):t;return S.jsx(Xk,{styles:r})}function km(e,t){return Fp(e,t)}const Xb=(e,t)=>{Array.isArray(e.__emotion_styles)&&(e.__emotion_styles=t(e.__emotion_styles))},rT=Object.freeze(Object.defineProperty({__proto__:null,GlobalStyles:Gb,StyledEngineProvider:tT,ThemeContext:Kc,css:qc,default:km,internal_processStyles:Xb,keyframes:fa},Symbol.toStringTag,{value:"Module"}));function Cr(e){if(typeof e!="object"||e===null)return!1;const t=Object.getPrototypeOf(e);return(t===null||t===Object.prototype||Object.getPrototypeOf(t)===null)&&!(Symbol.toStringTag in e)&&!(Symbol.iterator in e)}function Qb(e){if(!Cr(e))return e;const t={};return Object.keys(e).forEach(n=>{t[n]=Qb(e[n])}),t}function Qt(e,t,n={clone:!0}){const r=n.clone?E({},e):e;return Cr(e)&&Cr(t)&&Object.keys(t).forEach(o=>{Cr(t[o])&&Object.prototype.hasOwnProperty.call(e,o)&&Cr(e[o])?r[o]=Qt(e[o],t[o],n):n.clone?r[o]=Cr(t[o])?Qb(t[o]):t[o]:r[o]=t[o]}),r}const oT=Object.freeze(Object.defineProperty({__proto__:null,default:Qt,isPlainObject:Cr},Symbol.toStringTag,{value:"Module"})),iT=["values","unit","step"],aT=e=>{const t=Object.keys(e).map(n=>({key:n,val:e[n]}))||[];return t.sort((n,r)=>n.val-r.val),t.reduce((n,r)=>E({},n,{[r.key]:r.val}),{})};function Yb(e){const{values:t={xs:0,sm:600,md:900,lg:1200,xl:1536},unit:n="px",step:r=5}=e,o=G(e,iT),i=aT(t),a=Object.keys(i);function s(f){return`@media (min-width:${typeof t[f]=="number"?t[f]:f}${n})`}function l(f){return`@media (max-width:${(typeof t[f]=="number"?t[f]:f)-r/100}${n})`}function u(f,g){const p=a.indexOf(g);return`@media (min-width:${typeof t[f]=="number"?t[f]:f}${n}) and (max-width:${(p!==-1&&typeof t[a[p]]=="number"?t[a[p]]:g)-r/100}${n})`}function c(f){return a.indexOf(f)+1<a.length?u(f,a[a.indexOf(f)+1]):s(f)}function d(f){const g=a.indexOf(f);return g===0?s(a[1]):g===a.length-1?l(a[g]):u(f,a[a.indexOf(f)+1]).replace("@media","@media not all and")}return E({keys:a,values:i,up:s,down:l,between:u,only:c,not:d,unit:n},o)}const sT={borderRadius:4};function cs(e,t){return t?Qt(e,t,{clone:!1}):e}const Tm={xs:0,sm:600,md:900,lg:1200,xl:1536},hy={keys:["xs","sm","md","lg","xl"],up:e=>`@media (min-width:${Tm[e]}px)`};function dn(e,t,n){const r=e.theme||{};if(Array.isArray(t)){const i=r.breakpoints||hy;return t.reduce((a,s,l)=>(a[i.up(i.keys[l])]=n(t[l]),a),{})}if(typeof t=="object"){const i=r.breakpoints||hy;return Object.keys(t).reduce((a,s)=>{if(Object.keys(i.values||Tm).indexOf(s)!==-1){const l=i.up(s);a[l]=n(t[s],s)}else{const l=s;a[l]=t[l]}return a},{})}return n(t)}function Jb(e={}){var t;return((t=e.keys)==null?void 0:t.reduce((r,o)=>{const i=e.up(o);return r[i]={},r},{}))||{}}function Zb(e,t){return e.reduce((n,r)=>{const o=n[r];return(!o||Object.keys(o).length===0)&&delete n[r],n},t)}function lT(e,...t){const n=Jb(e),r=[n,...t].reduce((o,i)=>Qt(o,i),{});return Zb(Object.keys(n),r)}function uT(e,t){if(typeof e!="object")return{};const n={},r=Object.keys(t);return Array.isArray(e)?r.forEach((o,i)=>{i<e.length&&(n[o]=!0)}):r.forEach(o=>{e[o]!=null&&(n[o]=!0)}),n}function Do({values:e,breakpoints:t,base:n}){const r=n||uT(e,t),o=Object.keys(r);if(o.length===0)return e;let i;return o.reduce((a,s,l)=>(Array.isArray(e)?(a[s]=e[l]!=null?e[l]:e[i],i=l):typeof e=="object"?(a[s]=e[s]!=null?e[s]:e[i],i=s):a[s]=e,a),{})}function ne(e){if(typeof e!="string")throw new Error(Qo(7));return e.charAt(0).toUpperCase()+e.slice(1)}const cT=Object.freeze(Object.defineProperty({__proto__:null,default:ne},Symbol.toStringTag,{value:"Module"}));function Gc(e,t,n=!0){if(!t||typeof t!="string")return null;if(e&&e.vars&&n){const r=`vars.${t}`.split(".").reduce((o,i)=>o&&o[i]?o[i]:null,e);if(r!=null)return r}return t.split(".").reduce((r,o)=>r&&r[o]!=null?r[o]:null,e)}function Zu(e,t,n,r=n){let o;return typeof e=="function"?o=e(n):Array.isArray(e)?o=e[n]||r:o=Gc(e,n)||r,t&&(o=t(o,r,e)),o}function gt(e){const{prop:t,cssProperty:n=e.prop,themeKey:r,transform:o}=e,i=a=>{if(a[t]==null)return null;const s=a[t],l=a.theme,u=Gc(l,r)||{};return dn(a,s,d=>{let f=Zu(u,o,d);return d===f&&typeof d=="string"&&(f=Zu(u,o,`${t}${d==="default"?"":ne(d)}`,d)),n===!1?f:{[n]:f}})};return i.propTypes={},i.filterProps=[t],i}function dT(e){const t={};return n=>(t[n]===void 0&&(t[n]=e(n)),t[n])}const fT={m:"margin",p:"padding"},pT={t:"Top",r:"Right",b:"Bottom",l:"Left",x:["Left","Right"],y:["Top","Bottom"]},my={marginX:"mx",marginY:"my",paddingX:"px",paddingY:"py"},hT=dT(e=>{if(e.length>2)if(my[e])e=my[e];else return[e];const[t,n]=e.split(""),r=fT[t],o=pT[n]||"";return Array.isArray(o)?o.map(i=>r+i):[r+o]}),$m=["m","mt","mr","mb","ml","mx","my","margin","marginTop","marginRight","marginBottom","marginLeft","marginX","marginY","marginInline","marginInlineStart","marginInlineEnd","marginBlock","marginBlockStart","marginBlockEnd"],Om=["p","pt","pr","pb","pl","px","py","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","paddingX","paddingY","paddingInline","paddingInlineStart","paddingInlineEnd","paddingBlock","paddingBlockStart","paddingBlockEnd"];[...$m,...Om];function sl(e,t,n,r){var o;const i=(o=Gc(e,t,!1))!=null?o:n;return typeof i=="number"?a=>typeof a=="string"?a:i*a:Array.isArray(i)?a=>typeof a=="string"?a:i[a]:typeof i=="function"?i:()=>{}}function Mm(e){return sl(e,"spacing",8)}function Yo(e,t){if(typeof t=="string"||t==null)return t;const n=Math.abs(t),r=e(n);return t>=0?r:typeof r=="number"?-r:`-${r}`}function mT(e,t){return n=>e.reduce((r,o)=>(r[o]=Yo(t,n),r),{})}function gT(e,t,n,r){if(t.indexOf(n)===-1)return null;const o=hT(n),i=mT(o,r),a=e[n];return dn(e,a,i)}function ew(e,t){const n=Mm(e.theme);return Object.keys(e).map(r=>gT(e,t,r,n)).reduce(cs,{})}function st(e){return ew(e,$m)}st.propTypes={};st.filterProps=$m;function lt(e){return ew(e,Om)}lt.propTypes={};lt.filterProps=Om;function vT(e=8){if(e.mui)return e;const t=Mm({spacing:e}),n=(...r)=>(r.length===0?[1]:r).map(i=>{const a=t(i);return typeof a=="number"?`${a}px`:a}).join(" ");return n.mui=!0,n}function Xc(...e){const t=e.reduce((r,o)=>(o.filterProps.forEach(i=>{r[i]=o}),r),{}),n=r=>Object.keys(r).reduce((o,i)=>t[i]?cs(o,t[i](r)):o,{});return n.propTypes={},n.filterProps=e.reduce((r,o)=>r.concat(o.filterProps),[]),n}function _n(e){return typeof e!="number"?e:`${e}px solid`}function Hn(e,t){return gt({prop:e,themeKey:"borders",transform:t})}const yT=Hn("border",_n),xT=Hn("borderTop",_n),bT=Hn("borderRight",_n),wT=Hn("borderBottom",_n),ST=Hn("borderLeft",_n),CT=Hn("borderColor"),ET=Hn("borderTopColor"),RT=Hn("borderRightColor"),PT=Hn("borderBottomColor"),kT=Hn("borderLeftColor"),TT=Hn("outline",_n),$T=Hn("outlineColor"),Qc=e=>{if(e.borderRadius!==void 0&&e.borderRadius!==null){const t=sl(e.theme,"shape.borderRadius",4),n=r=>({borderRadius:Yo(t,r)});return dn(e,e.borderRadius,n)}return null};Qc.propTypes={};Qc.filterProps=["borderRadius"];Xc(yT,xT,bT,wT,ST,CT,ET,RT,PT,kT,Qc,TT,$T);const Yc=e=>{if(e.gap!==void 0&&e.gap!==null){const t=sl(e.theme,"spacing",8),n=r=>({gap:Yo(t,r)});return dn(e,e.gap,n)}return null};Yc.propTypes={};Yc.filterProps=["gap"];const Jc=e=>{if(e.columnGap!==void 0&&e.columnGap!==null){const t=sl(e.theme,"spacing",8),n=r=>({columnGap:Yo(t,r)});return dn(e,e.columnGap,n)}return null};Jc.propTypes={};Jc.filterProps=["columnGap"];const Zc=e=>{if(e.rowGap!==void 0&&e.rowGap!==null){const t=sl(e.theme,"spacing",8),n=r=>({rowGap:Yo(t,r)});return dn(e,e.rowGap,n)}return null};Zc.propTypes={};Zc.filterProps=["rowGap"];const OT=gt({prop:"gridColumn"}),MT=gt({prop:"gridRow"}),_T=gt({prop:"gridAutoFlow"}),jT=gt({prop:"gridAutoColumns"}),NT=gt({prop:"gridAutoRows"}),AT=gt({prop:"gridTemplateColumns"}),LT=gt({prop:"gridTemplateRows"}),IT=gt({prop:"gridTemplateAreas"}),FT=gt({prop:"gridArea"});Xc(Yc,Jc,Zc,OT,MT,_T,jT,NT,AT,LT,IT,FT);function Fi(e,t){return t==="grey"?t:e}const DT=gt({prop:"color",themeKey:"palette",transform:Fi}),zT=gt({prop:"bgcolor",cssProperty:"backgroundColor",themeKey:"palette",transform:Fi}),BT=gt({prop:"backgroundColor",themeKey:"palette",transform:Fi});Xc(DT,zT,BT);function hn(e){return e<=1&&e!==0?`${e*100}%`:e}const UT=gt({prop:"width",transform:hn}),_m=e=>{if(e.maxWidth!==void 0&&e.maxWidth!==null){const t=n=>{var r,o;const i=((r=e.theme)==null||(r=r.breakpoints)==null||(r=r.values)==null?void 0:r[n])||Tm[n];return i?((o=e.theme)==null||(o=o.breakpoints)==null?void 0:o.unit)!=="px"?{maxWidth:`${i}${e.theme.breakpoints.unit}`}:{maxWidth:i}:{maxWidth:hn(n)}};return dn(e,e.maxWidth,t)}return null};_m.filterProps=["maxWidth"];const WT=gt({prop:"minWidth",transform:hn}),HT=gt({prop:"height",transform:hn}),VT=gt({prop:"maxHeight",transform:hn}),KT=gt({prop:"minHeight",transform:hn});gt({prop:"size",cssProperty:"width",transform:hn});gt({prop:"size",cssProperty:"height",transform:hn});const qT=gt({prop:"boxSizing"});Xc(UT,_m,WT,HT,VT,KT,qT);const ll={border:{themeKey:"borders",transform:_n},borderTop:{themeKey:"borders",transform:_n},borderRight:{themeKey:"borders",transform:_n},borderBottom:{themeKey:"borders",transform:_n},borderLeft:{themeKey:"borders",transform:_n},borderColor:{themeKey:"palette"},borderTopColor:{themeKey:"palette"},borderRightColor:{themeKey:"palette"},borderBottomColor:{themeKey:"palette"},borderLeftColor:{themeKey:"palette"},outline:{themeKey:"borders",transform:_n},outlineColor:{themeKey:"palette"},borderRadius:{themeKey:"shape.borderRadius",style:Qc},color:{themeKey:"palette",transform:Fi},bgcolor:{themeKey:"palette",cssProperty:"backgroundColor",transform:Fi},backgroundColor:{themeKey:"palette",transform:Fi},p:{style:lt},pt:{style:lt},pr:{style:lt},pb:{style:lt},pl:{style:lt},px:{style:lt},py:{style:lt},padding:{style:lt},paddingTop:{style:lt},paddingRight:{style:lt},paddingBottom:{style:lt},paddingLeft:{style:lt},paddingX:{style:lt},paddingY:{style:lt},paddingInline:{style:lt},paddingInlineStart:{style:lt},paddingInlineEnd:{style:lt},paddingBlock:{style:lt},paddingBlockStart:{style:lt},paddingBlockEnd:{style:lt},m:{style:st},mt:{style:st},mr:{style:st},mb:{style:st},ml:{style:st},mx:{style:st},my:{style:st},margin:{style:st},marginTop:{style:st},marginRight:{style:st},marginBottom:{style:st},marginLeft:{style:st},marginX:{style:st},marginY:{style:st},marginInline:{style:st},marginInlineStart:{style:st},marginInlineEnd:{style:st},marginBlock:{style:st},marginBlockStart:{style:st},marginBlockEnd:{style:st},displayPrint:{cssProperty:!1,transform:e=>({"@media print":{display:e}})},display:{},overflow:{},textOverflow:{},visibility:{},whiteSpace:{},flexBasis:{},flexDirection:{},flexWrap:{},justifyContent:{},alignItems:{},alignContent:{},order:{},flex:{},flexGrow:{},flexShrink:{},alignSelf:{},justifyItems:{},justifySelf:{},gap:{style:Yc},rowGap:{style:Zc},columnGap:{style:Jc},gridColumn:{},gridRow:{},gridAutoFlow:{},gridAutoColumns:{},gridAutoRows:{},gridTemplateColumns:{},gridTemplateRows:{},gridTemplateAreas:{},gridArea:{},position:{},zIndex:{themeKey:"zIndex"},top:{},right:{},bottom:{},left:{},boxShadow:{themeKey:"shadows"},width:{transform:hn},maxWidth:{style:_m},minWidth:{transform:hn},height:{transform:hn},maxHeight:{transform:hn},minHeight:{transform:hn},boxSizing:{},fontFamily:{themeKey:"typography"},fontSize:{themeKey:"typography"},fontStyle:{themeKey:"typography"},fontWeight:{themeKey:"typography"},letterSpacing:{},textTransform:{},lineHeight:{},textAlign:{},typography:{cssProperty:!1,themeKey:"typography"}};function GT(...e){const t=e.reduce((r,o)=>r.concat(Object.keys(o)),[]),n=new Set(t);return e.every(r=>n.size===Object.keys(r).length)}function XT(e,t){return typeof e=="function"?e(t):e}function tw(){function e(n,r,o,i){const a={[n]:r,theme:o},s=i[n];if(!s)return{[n]:r};const{cssProperty:l=n,themeKey:u,transform:c,style:d}=s;if(r==null)return null;if(u==="typography"&&r==="inherit")return{[n]:r};const f=Gc(o,u)||{};return d?d(a):dn(a,r,p=>{let h=Zu(f,c,p);return p===h&&typeof p=="string"&&(h=Zu(f,c,`${n}${p==="default"?"":ne(p)}`,p)),l===!1?h:{[l]:h}})}function t(n){var r;const{sx:o,theme:i={}}=n||{};if(!o)return null;const a=(r=i.unstable_sxConfig)!=null?r:ll;function s(l){let u=l;if(typeof l=="function")u=l(i);else if(typeof l!="object")return l;if(!u)return null;const c=Jb(i.breakpoints),d=Object.keys(c);let f=c;return Object.keys(u).forEach(g=>{const p=XT(u[g],i);if(p!=null)if(typeof p=="object")if(a[g])f=cs(f,e(g,p,i,a));else{const h=dn({theme:i},p,C=>({[g]:C}));GT(h,p)?f[g]=t({sx:p,theme:i}):f=cs(f,h)}else f=cs(f,e(g,p,i,a))}),Zb(d,f)}return Array.isArray(o)?o.map(s):s(o)}return t}const pa=tw();pa.filterProps=["sx"];function nw(e,t){const n=this;return n.vars&&typeof n.getColorSchemeSelector=="function"?{[n.getColorSchemeSelector(e).replace(/(\[[^\]]+\])/,"*:where($1)")]:t}:n.palette.mode===e?t:{}}const QT=["breakpoints","palette","spacing","shape"];function ul(e={},...t){const{breakpoints:n={},palette:r={},spacing:o,shape:i={}}=e,a=G(e,QT),s=Yb(n),l=vT(o);let u=Qt({breakpoints:s,direction:"ltr",components:{},palette:E({mode:"light"},r),spacing:l,shape:E({},sT,i)},a);return u.applyStyles=nw,u=t.reduce((c,d)=>Qt(c,d),u),u.unstable_sxConfig=E({},ll,a==null?void 0:a.unstable_sxConfig),u.unstable_sx=function(d){return pa({sx:d,theme:this})},u}const YT=Object.freeze(Object.defineProperty({__proto__:null,default:ul,private_createBreakpoints:Yb,unstable_applyStyles:nw},Symbol.toStringTag,{value:"Module"}));function JT(e){return Object.keys(e).length===0}function ZT(e=null){const t=b.useContext(Kc);return!t||JT(t)?e:t}const e$=ul();function ed(e=e$){return ZT(e)}function t$({styles:e,themeId:t,defaultTheme:n={}}){const r=ed(n),o=typeof e=="function"?e(t&&r[t]||r):e;return S.jsx(Gb,{styles:o})}const n$=["sx"],r$=e=>{var t,n;const r={systemProps:{},otherProps:{}},o=(t=e==null||(n=e.theme)==null?void 0:n.unstable_sxConfig)!=null?t:ll;return Object.keys(e).forEach(i=>{o[i]?r.systemProps[i]=e[i]:r.otherProps[i]=e[i]}),r};function cl(e){const{sx:t}=e,n=G(e,n$),{systemProps:r,otherProps:o}=r$(n);let i;return Array.isArray(t)?i=[r,...t]:typeof t=="function"?i=(...a)=>{const s=t(...a);return Cr(s)?E({},r,s):r}:i=E({},r,t),E({},o,{sx:i})}const o$=Object.freeze(Object.defineProperty({__proto__:null,default:pa,extendSxProp:cl,unstable_createStyleFunctionSx:tw,unstable_defaultSxConfig:ll},Symbol.toStringTag,{value:"Module"})),gy=e=>e,i$=()=>{let e=gy;return{configure(t){e=t},generate(t){return e(t)},reset(){e=gy}}},jm=i$();function rw(e){var t,n,r="";if(typeof e=="string"||typeof e=="number")r+=e;else if(typeof e=="object")if(Array.isArray(e)){var o=e.length;for(t=0;t<o;t++)e[t]&&(n=rw(e[t]))&&(r&&(r+=" "),r+=n)}else for(n in e)e[n]&&(r&&(r+=" "),r+=n);return r}function Y(){for(var e,t,n=0,r="",o=arguments.length;n<o;n++)(e=arguments[n])&&(t=rw(e))&&(r&&(r+=" "),r+=t);return r}const a$=["className","component"];function s$(e={}){const{themeId:t,defaultTheme:n,defaultClassName:r="MuiBox-root",generateClassName:o}=e,i=km("div",{shouldForwardProp:s=>s!=="theme"&&s!=="sx"&&s!=="as"})(pa);return b.forwardRef(function(l,u){const c=ed(n),d=cl(l),{className:f,component:g="div"}=d,p=G(d,a$);return S.jsx(i,E({as:g,ref:u,className:Y(f,o?o(r):r),theme:t&&c[t]||c},p))})}const ow={active:"active",checked:"checked",completed:"completed",disabled:"disabled",error:"error",expanded:"expanded",focused:"focused",focusVisible:"focusVisible",open:"open",readOnly:"readOnly",required:"required",selected:"selected"};function ve(e,t,n="Mui"){const r=ow[t];return r?`${n}-${r}`:`${jm.generate(e)}-${t}`}function fe(e,t,n="Mui"){const r={};return t.forEach(o=>{r[o]=ve(e,o,n)}),r}var iw={exports:{}},Fe={};/**
 * @license React
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var Nm=Symbol.for("react.element"),Am=Symbol.for("react.portal"),td=Symbol.for("react.fragment"),nd=Symbol.for("react.strict_mode"),rd=Symbol.for("react.profiler"),od=Symbol.for("react.provider"),id=Symbol.for("react.context"),l$=Symbol.for("react.server_context"),ad=Symbol.for("react.forward_ref"),sd=Symbol.for("react.suspense"),ld=Symbol.for("react.suspense_list"),ud=Symbol.for("react.memo"),cd=Symbol.for("react.lazy"),u$=Symbol.for("react.offscreen"),aw;aw=Symbol.for("react.module.reference");function Vn(e){if(typeof e=="object"&&e!==null){var t=e.$$typeof;switch(t){case Nm:switch(e=e.type,e){case td:case rd:case nd:case sd:case ld:return e;default:switch(e=e&&e.$$typeof,e){case l$:case id:case ad:case cd:case ud:case od:return e;default:return t}}case Am:return t}}}Fe.ContextConsumer=id;Fe.ContextProvider=od;Fe.Element=Nm;Fe.ForwardRef=ad;Fe.Fragment=td;Fe.Lazy=cd;Fe.Memo=ud;Fe.Portal=Am;Fe.Profiler=rd;Fe.StrictMode=nd;Fe.Suspense=sd;Fe.SuspenseList=ld;Fe.isAsyncMode=function(){return!1};Fe.isConcurrentMode=function(){return!1};Fe.isContextConsumer=function(e){return Vn(e)===id};Fe.isContextProvider=function(e){return Vn(e)===od};Fe.isElement=function(e){return typeof e=="object"&&e!==null&&e.$$typeof===Nm};Fe.isForwardRef=function(e){return Vn(e)===ad};Fe.isFragment=function(e){return Vn(e)===td};Fe.isLazy=function(e){return Vn(e)===cd};Fe.isMemo=function(e){return Vn(e)===ud};Fe.isPortal=function(e){return Vn(e)===Am};Fe.isProfiler=function(e){return Vn(e)===rd};Fe.isStrictMode=function(e){return Vn(e)===nd};Fe.isSuspense=function(e){return Vn(e)===sd};Fe.isSuspenseList=function(e){return Vn(e)===ld};Fe.isValidElementType=function(e){return typeof e=="string"||typeof e=="function"||e===td||e===rd||e===nd||e===sd||e===ld||e===u$||typeof e=="object"&&e!==null&&(e.$$typeof===cd||e.$$typeof===ud||e.$$typeof===od||e.$$typeof===id||e.$$typeof===ad||e.$$typeof===aw||e.getModuleId!==void 0)};Fe.typeOf=Vn;iw.exports=Fe;var vy=iw.exports;const c$=/^\s*function(?:\s|\s*\/\*.*\*\/\s*)+([^(\s/]*)\s*/;function sw(e){const t=`${e}`.match(c$);return t&&t[1]||""}function lw(e,t=""){return e.displayName||e.name||sw(e)||t}function yy(e,t,n){const r=lw(t);return e.displayName||(r!==""?`${n}(${r})`:n)}function d$(e){if(e!=null){if(typeof e=="string")return e;if(typeof e=="function")return lw(e,"Component");if(typeof e=="object")switch(e.$$typeof){case vy.ForwardRef:return yy(e,e.render,"ForwardRef");case vy.Memo:return yy(e,e.type,"memo");default:return}}}const f$=Object.freeze(Object.defineProperty({__proto__:null,default:d$,getFunctionName:sw},Symbol.toStringTag,{value:"Module"})),p$=["ownerState"],h$=["variants"],m$=["name","slot","skipVariantsResolver","skipSx","overridesResolver"];function g$(e){return Object.keys(e).length===0}function v$(e){return typeof e=="string"&&e.charCodeAt(0)>96}function hf(e){return e!=="ownerState"&&e!=="theme"&&e!=="sx"&&e!=="as"}const y$=ul(),x$=e=>e&&e.charAt(0).toLowerCase()+e.slice(1);function Ql({defaultTheme:e,theme:t,themeId:n}){return g$(t)?e:t[n]||t}function b$(e){return e?(t,n)=>n[e]:null}function xu(e,t){let{ownerState:n}=t,r=G(t,p$);const o=typeof e=="function"?e(E({ownerState:n},r)):e;if(Array.isArray(o))return o.flatMap(i=>xu(i,E({ownerState:n},r)));if(o&&typeof o=="object"&&Array.isArray(o.variants)){const{variants:i=[]}=o;let s=G(o,h$);return i.forEach(l=>{let u=!0;typeof l.props=="function"?u=l.props(E({ownerState:n},r,n)):Object.keys(l.props).forEach(c=>{(n==null?void 0:n[c])!==l.props[c]&&r[c]!==l.props[c]&&(u=!1)}),u&&(Array.isArray(s)||(s=[s]),s.push(typeof l.style=="function"?l.style(E({ownerState:n},r,n)):l.style))}),s}return o}function w$(e={}){const{themeId:t,defaultTheme:n=y$,rootShouldForwardProp:r=hf,slotShouldForwardProp:o=hf}=e,i=a=>pa(E({},a,{theme:Ql(E({},a,{defaultTheme:n,themeId:t}))}));return i.__mui_systemSx=!0,(a,s={})=>{Xb(a,R=>R.filter(P=>!(P!=null&&P.__mui_systemSx)));const{name:l,slot:u,skipVariantsResolver:c,skipSx:d,overridesResolver:f=b$(x$(u))}=s,g=G(s,m$),p=c!==void 0?c:u&&u!=="Root"&&u!=="root"||!1,h=d||!1;let C,m=hf;u==="Root"||u==="root"?m=r:u?m=o:v$(a)&&(m=void 0);const y=km(a,E({shouldForwardProp:m,label:C},g)),v=R=>typeof R=="function"&&R.__emotion_real!==R||Cr(R)?P=>xu(R,E({},P,{theme:Ql({theme:P.theme,defaultTheme:n,themeId:t})})):R,w=(R,...P)=>{let x=v(R);const k=P?P.map(v):[];l&&f&&k.push(j=>{const L=Ql(E({},j,{defaultTheme:n,themeId:t}));if(!L.components||!L.components[l]||!L.components[l].styleOverrides)return null;const N=L.components[l].styleOverrides,F={};return Object.entries(N).forEach(([B,z])=>{F[B]=xu(z,E({},j,{theme:L}))}),f(j,F)}),l&&!p&&k.push(j=>{var L;const N=Ql(E({},j,{defaultTheme:n,themeId:t})),F=N==null||(L=N.components)==null||(L=L[l])==null?void 0:L.variants;return xu({variants:F},E({},j,{theme:N}))}),h||k.push(i);const M=k.length-P.length;if(Array.isArray(R)&&M>0){const j=new Array(M).fill("");x=[...R,...j],x.raw=[...R.raw,...j]}const T=y(x,...k);return a.muiName&&(T.muiName=a.muiName),T};return y.withConfig&&(w.withConfig=y.withConfig),w}}const S$=w$();function Lm(e,t){const n=E({},t);return Object.keys(e).forEach(r=>{if(r.toString().match(/^(components|slots)$/))n[r]=E({},e[r],n[r]);else if(r.toString().match(/^(componentsProps|slotProps)$/)){const o=e[r]||{},i=t[r];n[r]={},!i||!Object.keys(i)?n[r]=o:!o||!Object.keys(o)?n[r]=i:(n[r]=E({},i),Object.keys(o).forEach(a=>{n[r][a]=Lm(o[a],i[a])}))}else n[r]===void 0&&(n[r]=e[r])}),n}function C$(e){const{theme:t,name:n,props:r}=e;return!t||!t.components||!t.components[n]||!t.components[n].defaultProps?r:Lm(t.components[n].defaultProps,r)}function uw({props:e,name:t,defaultTheme:n,themeId:r}){let o=ed(n);return r&&(o=o[r]||o),C$({theme:o,name:t,props:e})}const ir=typeof window<"u"?b.useLayoutEffect:b.useEffect;function E$(e,t=Number.MIN_SAFE_INTEGER,n=Number.MAX_SAFE_INTEGER){return Math.max(t,Math.min(e,n))}const R$=Object.freeze(Object.defineProperty({__proto__:null,default:E$},Symbol.toStringTag,{value:"Module"}));function zp(...e){return e.reduce((t,n)=>n==null?t:function(...o){t.apply(this,o),n.apply(this,o)},()=>{})}function Im(e,t=166){let n;function r(...o){const i=()=>{e.apply(this,o)};clearTimeout(n),n=setTimeout(i,t)}return r.clear=()=>{clearTimeout(n)},r}function P$(e,t){return()=>null}function bu(e,t){var n,r;return b.isValidElement(e)&&t.indexOf((n=e.type.muiName)!=null?n:(r=e.type)==null||(r=r._payload)==null||(r=r.value)==null?void 0:r.muiName)!==-1}function Ht(e){return e&&e.ownerDocument||document}function ho(e){return Ht(e).defaultView||window}function k$(e,t){return()=>null}function ec(e,t){typeof e=="function"?e(t):e&&(e.current=t)}let xy=0;function T$(e){const[t,n]=b.useState(e),r=e||t;return b.useEffect(()=>{t==null&&(xy+=1,n(`mui-${xy}`))},[t]),r}const by=Pu.useId;function Zi(e){if(by!==void 0){const t=by();return e??t}return T$(e)}function $$(e,t,n,r,o){return null}function Bs({controlled:e,default:t,name:n,state:r="value"}){const{current:o}=b.useRef(e!==void 0),[i,a]=b.useState(t),s=o?e:i,l=b.useCallback(u=>{o||a(u)},[]);return[s,l]}function Pr(e){const t=b.useRef(e);return ir(()=>{t.current=e}),b.useRef((...n)=>(0,t.current)(...n)).current}function mt(...e){return b.useMemo(()=>e.every(t=>t==null)?null:t=>{e.forEach(n=>{ec(n,t)})},e)}const wy={};function O$(e,t){const n=b.useRef(wy);return n.current===wy&&(n.current=e(t)),n}const M$=[];function _$(e){b.useEffect(e,M$)}class dl{constructor(){this.currentId=null,this.clear=()=>{this.currentId!==null&&(clearTimeout(this.currentId),this.currentId=null)},this.disposeEffect=()=>this.clear}static create(){return new dl}start(t,n){this.clear(),this.currentId=setTimeout(()=>{this.currentId=null,n()},t)}}function Ao(){const e=O$(dl.create).current;return _$(e.disposeEffect),e}let dd=!0,Bp=!1;const j$=new dl,N$={text:!0,search:!0,url:!0,tel:!0,email:!0,password:!0,number:!0,date:!0,month:!0,week:!0,time:!0,datetime:!0,"datetime-local":!0};function A$(e){const{type:t,tagName:n}=e;return!!(n==="INPUT"&&N$[t]&&!e.readOnly||n==="TEXTAREA"&&!e.readOnly||e.isContentEditable)}function L$(e){e.metaKey||e.altKey||e.ctrlKey||(dd=!0)}function mf(){dd=!1}function I$(){this.visibilityState==="hidden"&&Bp&&(dd=!0)}function F$(e){e.addEventListener("keydown",L$,!0),e.addEventListener("mousedown",mf,!0),e.addEventListener("pointerdown",mf,!0),e.addEventListener("touchstart",mf,!0),e.addEventListener("visibilitychange",I$,!0)}function D$(e){const{target:t}=e;try{return t.matches(":focus-visible")}catch{}return dd||A$(t)}function Fm(){const e=b.useCallback(o=>{o!=null&&F$(o.ownerDocument)},[]),t=b.useRef(!1);function n(){return t.current?(Bp=!0,j$.start(100,()=>{Bp=!1}),t.current=!1,!0):!1}function r(o){return D$(o)?(t.current=!0,!0):!1}return{isFocusVisibleRef:t,onFocus:r,onBlur:n,ref:e}}function cw(e){const t=e.documentElement.clientWidth;return Math.abs(window.innerWidth-t)}function ye(e,t,n=void 0){const r={};return Object.keys(e).forEach(o=>{r[o]=e[o].reduce((i,a)=>{if(a){const s=t(a);s!==""&&i.push(s),n&&n[a]&&i.push(n[a])}return i},[]).join(" ")}),r}const z$=b.createContext(),Dm=()=>{const e=b.useContext(z$);return e??!1},B$=["component","direction","spacing","divider","children","className","useFlexGap"],U$=ul(),W$=S$("div",{name:"MuiStack",slot:"Root",overridesResolver:(e,t)=>t.root});function H$(e){return uw({props:e,name:"MuiStack",defaultTheme:U$})}function V$(e,t){const n=b.Children.toArray(e).filter(Boolean);return n.reduce((r,o,i)=>(r.push(o),i<n.length-1&&r.push(b.cloneElement(t,{key:`separator-${i}`})),r),[])}const K$=e=>({row:"Left","row-reverse":"Right",column:"Top","column-reverse":"Bottom"})[e],q$=({ownerState:e,theme:t})=>{let n=E({display:"flex",flexDirection:"column"},dn({theme:t},Do({values:e.direction,breakpoints:t.breakpoints.values}),r=>({flexDirection:r})));if(e.spacing){const r=Mm(t),o=Object.keys(t.breakpoints.values).reduce((l,u)=>((typeof e.spacing=="object"&&e.spacing[u]!=null||typeof e.direction=="object"&&e.direction[u]!=null)&&(l[u]=!0),l),{}),i=Do({values:e.direction,base:o}),a=Do({values:e.spacing,base:o});typeof i=="object"&&Object.keys(i).forEach((l,u,c)=>{if(!i[l]){const f=u>0?i[c[u-1]]:"column";i[l]=f}}),n=Qt(n,dn({theme:t},a,(l,u)=>e.useFlexGap?{gap:Yo(r,l)}:{"& > :not(style):not(style)":{margin:0},"& > :not(style) ~ :not(style)":{[`margin${K$(u?i[u]:e.direction)}`]:Yo(r,l)}}))}return n=lT(t.breakpoints,n),n};function G$(e={}){const{createStyledComponent:t=W$,useThemeProps:n=H$,componentName:r="MuiStack"}=e,o=()=>ye({root:["root"]},l=>ve(r,l),{}),i=t(q$);return b.forwardRef(function(l,u){const c=n(l),d=cl(c),{component:f="div",direction:g="column",spacing:p=0,divider:h,children:C,className:m,useFlexGap:y=!1}=d,v=G(d,B$),w={direction:g,spacing:p,useFlexGap:y},R=o();return S.jsx(i,E({as:f,ownerState:w,ref:u,className:Y(R.root,m)},v,{children:h?V$(C,h):C}))})}function X$(e,t){return E({toolbar:{minHeight:56,[e.up("xs")]:{"@media (orientation: landscape)":{minHeight:48}},[e.up("sm")]:{minHeight:64}}},t)}var vt={},dw={exports:{}};(function(e){function t(n){return n&&n.__esModule?n:{default:n}}e.exports=t,e.exports.__esModule=!0,e.exports.default=e.exports})(dw);var wo=dw.exports;const Q$=Lr(ek),Y$=Lr(R$);var fw=wo;Object.defineProperty(vt,"__esModule",{value:!0});var Ot=vt.alpha=gw;vt.blend=lO;vt.colorChannel=void 0;var tc=vt.darken=Bm;vt.decomposeColor=Bn;vt.emphasize=vw;var J$=vt.getContrastRatio=rO;vt.getLuminance=rc;vt.hexToRgb=pw;vt.hslToRgb=mw;var nc=vt.lighten=Um;vt.private_safeAlpha=oO;vt.private_safeColorChannel=void 0;vt.private_safeDarken=iO;vt.private_safeEmphasize=sO;vt.private_safeLighten=aO;vt.recomposeColor=ha;vt.rgbToHex=nO;var Sy=fw(Q$),Z$=fw(Y$);function zm(e,t=0,n=1){return(0,Z$.default)(e,t,n)}function pw(e){e=e.slice(1);const t=new RegExp(`.{1,${e.length>=6?2:1}}`,"g");let n=e.match(t);return n&&n[0].length===1&&(n=n.map(r=>r+r)),n?`rgb${n.length===4?"a":""}(${n.map((r,o)=>o<3?parseInt(r,16):Math.round(parseInt(r,16)/255*1e3)/1e3).join(", ")})`:""}function eO(e){const t=e.toString(16);return t.length===1?`0${t}`:t}function Bn(e){if(e.type)return e;if(e.charAt(0)==="#")return Bn(pw(e));const t=e.indexOf("("),n=e.substring(0,t);if(["rgb","rgba","hsl","hsla","color"].indexOf(n)===-1)throw new Error((0,Sy.default)(9,e));let r=e.substring(t+1,e.length-1),o;if(n==="color"){if(r=r.split(" "),o=r.shift(),r.length===4&&r[3].charAt(0)==="/"&&(r[3]=r[3].slice(1)),["srgb","display-p3","a98-rgb","prophoto-rgb","rec-2020"].indexOf(o)===-1)throw new Error((0,Sy.default)(10,o))}else r=r.split(",");return r=r.map(i=>parseFloat(i)),{type:n,values:r,colorSpace:o}}const hw=e=>{const t=Bn(e);return t.values.slice(0,3).map((n,r)=>t.type.indexOf("hsl")!==-1&&r!==0?`${n}%`:n).join(" ")};vt.colorChannel=hw;const tO=(e,t)=>{try{return hw(e)}catch{return e}};vt.private_safeColorChannel=tO;function ha(e){const{type:t,colorSpace:n}=e;let{values:r}=e;return t.indexOf("rgb")!==-1?r=r.map((o,i)=>i<3?parseInt(o,10):o):t.indexOf("hsl")!==-1&&(r[1]=`${r[1]}%`,r[2]=`${r[2]}%`),t.indexOf("color")!==-1?r=`${n} ${r.join(" ")}`:r=`${r.join(", ")}`,`${t}(${r})`}function nO(e){if(e.indexOf("#")===0)return e;const{values:t}=Bn(e);return`#${t.map((n,r)=>eO(r===3?Math.round(255*n):n)).join("")}`}function mw(e){e=Bn(e);const{values:t}=e,n=t[0],r=t[1]/100,o=t[2]/100,i=r*Math.min(o,1-o),a=(u,c=(u+n/30)%12)=>o-i*Math.max(Math.min(c-3,9-c,1),-1);let s="rgb";const l=[Math.round(a(0)*255),Math.round(a(8)*255),Math.round(a(4)*255)];return e.type==="hsla"&&(s+="a",l.push(t[3])),ha({type:s,values:l})}function rc(e){e=Bn(e);let t=e.type==="hsl"||e.type==="hsla"?Bn(mw(e)).values:e.values;return t=t.map(n=>(e.type!=="color"&&(n/=255),n<=.03928?n/12.92:((n+.055)/1.055)**2.4)),Number((.2126*t[0]+.7152*t[1]+.0722*t[2]).toFixed(3))}function rO(e,t){const n=rc(e),r=rc(t);return(Math.max(n,r)+.05)/(Math.min(n,r)+.05)}function gw(e,t){return e=Bn(e),t=zm(t),(e.type==="rgb"||e.type==="hsl")&&(e.type+="a"),e.type==="color"?e.values[3]=`/${t}`:e.values[3]=t,ha(e)}function oO(e,t,n){try{return gw(e,t)}catch{return e}}function Bm(e,t){if(e=Bn(e),t=zm(t),e.type.indexOf("hsl")!==-1)e.values[2]*=1-t;else if(e.type.indexOf("rgb")!==-1||e.type.indexOf("color")!==-1)for(let n=0;n<3;n+=1)e.values[n]*=1-t;return ha(e)}function iO(e,t,n){try{return Bm(e,t)}catch{return e}}function Um(e,t){if(e=Bn(e),t=zm(t),e.type.indexOf("hsl")!==-1)e.values[2]+=(100-e.values[2])*t;else if(e.type.indexOf("rgb")!==-1)for(let n=0;n<3;n+=1)e.values[n]+=(255-e.values[n])*t;else if(e.type.indexOf("color")!==-1)for(let n=0;n<3;n+=1)e.values[n]+=(1-e.values[n])*t;return ha(e)}function aO(e,t,n){try{return Um(e,t)}catch{return e}}function vw(e,t=.15){return rc(e)>.5?Bm(e,t):Um(e,t)}function sO(e,t,n){try{return vw(e,t)}catch{return e}}function lO(e,t,n,r=1){const o=(l,u)=>Math.round((l**(1/r)*(1-n)+u**(1/r)*n)**r),i=Bn(e),a=Bn(t),s=[o(i.values[0],a.values[0]),o(i.values[1],a.values[1]),o(i.values[2],a.values[2])];return ha({type:"rgb",values:s})}const uO=["mode","contrastThreshold","tonalOffset"],Cy={text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.6)",disabled:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:Is.white,default:Is.white},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.04)",hoverOpacity:.04,selected:"rgba(0, 0, 0, 0.08)",selectedOpacity:.08,disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)",disabledOpacity:.38,focus:"rgba(0, 0, 0, 0.12)",focusOpacity:.12,activatedOpacity:.12}},gf={text:{primary:Is.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:"#121212",default:"#121212"},action:{active:Is.white,hover:"rgba(255, 255, 255, 0.08)",hoverOpacity:.08,selected:"rgba(255, 255, 255, 0.16)",selectedOpacity:.16,disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)",disabledOpacity:.38,focus:"rgba(255, 255, 255, 0.12)",focusOpacity:.12,activatedOpacity:.24}};function Ey(e,t,n,r){const o=r.light||r,i=r.dark||r*1.5;e[t]||(e.hasOwnProperty(n)?e[t]=e[n]:t==="light"?e.light=nc(e.main,o):t==="dark"&&(e.dark=tc(e.main,i)))}function cO(e="light"){return e==="dark"?{main:di[200],light:di[50],dark:di[400]}:{main:di[700],light:di[400],dark:di[800]}}function dO(e="light"){return e==="dark"?{main:ci[200],light:ci[50],dark:ci[400]}:{main:ci[500],light:ci[300],dark:ci[700]}}function fO(e="light"){return e==="dark"?{main:ui[500],light:ui[300],dark:ui[700]}:{main:ui[700],light:ui[400],dark:ui[800]}}function pO(e="light"){return e==="dark"?{main:fi[400],light:fi[300],dark:fi[700]}:{main:fi[700],light:fi[500],dark:fi[900]}}function hO(e="light"){return e==="dark"?{main:pi[400],light:pi[300],dark:pi[700]}:{main:pi[800],light:pi[500],dark:pi[900]}}function mO(e="light"){return e==="dark"?{main:La[400],light:La[300],dark:La[700]}:{main:"#ed6c02",light:La[500],dark:La[900]}}function gO(e){const{mode:t="light",contrastThreshold:n=3,tonalOffset:r=.2}=e,o=G(e,uO),i=e.primary||cO(t),a=e.secondary||dO(t),s=e.error||fO(t),l=e.info||pO(t),u=e.success||hO(t),c=e.warning||mO(t);function d(h){return J$(h,gf.text.primary)>=n?gf.text.primary:Cy.text.primary}const f=({color:h,name:C,mainShade:m=500,lightShade:y=300,darkShade:v=700})=>{if(h=E({},h),!h.main&&h[m]&&(h.main=h[m]),!h.hasOwnProperty("main"))throw new Error(Qo(11,C?` (${C})`:"",m));if(typeof h.main!="string")throw new Error(Qo(12,C?` (${C})`:"",JSON.stringify(h.main)));return Ey(h,"light",y,r),Ey(h,"dark",v,r),h.contrastText||(h.contrastText=d(h.main)),h},g={dark:gf,light:Cy};return Qt(E({common:E({},Is),mode:t,primary:f({color:i,name:"primary"}),secondary:f({color:a,name:"secondary",mainShade:"A400",lightShade:"A200",darkShade:"A700"}),error:f({color:s,name:"error"}),warning:f({color:c,name:"warning"}),info:f({color:l,name:"info"}),success:f({color:u,name:"success"}),grey:ZP,contrastThreshold:n,getContrastText:d,augmentColor:f,tonalOffset:r},g[t]),o)}const vO=["fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","fontWeightBold","htmlFontSize","allVariants","pxToRem"];function yO(e){return Math.round(e*1e5)/1e5}const Ry={textTransform:"uppercase"},Py='"Roboto", "Helvetica", "Arial", sans-serif';function xO(e,t){const n=typeof t=="function"?t(e):t,{fontFamily:r=Py,fontSize:o=14,fontWeightLight:i=300,fontWeightRegular:a=400,fontWeightMedium:s=500,fontWeightBold:l=700,htmlFontSize:u=16,allVariants:c,pxToRem:d}=n,f=G(n,vO),g=o/14,p=d||(m=>`${m/u*g}rem`),h=(m,y,v,w,R)=>E({fontFamily:r,fontWeight:m,fontSize:p(y),lineHeight:v},r===Py?{letterSpacing:`${yO(w/y)}em`}:{},R,c),C={h1:h(i,96,1.167,-1.5),h2:h(i,60,1.2,-.5),h3:h(a,48,1.167,0),h4:h(a,34,1.235,.25),h5:h(a,24,1.334,0),h6:h(s,20,1.6,.15),subtitle1:h(a,16,1.75,.15),subtitle2:h(s,14,1.57,.1),body1:h(a,16,1.5,.15),body2:h(a,14,1.43,.15),button:h(s,14,1.75,.4,Ry),caption:h(a,12,1.66,.4),overline:h(a,12,2.66,1,Ry),inherit:{fontFamily:"inherit",fontWeight:"inherit",fontSize:"inherit",lineHeight:"inherit",letterSpacing:"inherit"}};return Qt(E({htmlFontSize:u,pxToRem:p,fontFamily:r,fontSize:o,fontWeightLight:i,fontWeightRegular:a,fontWeightMedium:s,fontWeightBold:l},C),f,{clone:!1})}const bO=.2,wO=.14,SO=.12;function Xe(...e){return[`${e[0]}px ${e[1]}px ${e[2]}px ${e[3]}px rgba(0,0,0,${bO})`,`${e[4]}px ${e[5]}px ${e[6]}px ${e[7]}px rgba(0,0,0,${wO})`,`${e[8]}px ${e[9]}px ${e[10]}px ${e[11]}px rgba(0,0,0,${SO})`].join(",")}const CO=["none",Xe(0,2,1,-1,0,1,1,0,0,1,3,0),Xe(0,3,1,-2,0,2,2,0,0,1,5,0),Xe(0,3,3,-2,0,3,4,0,0,1,8,0),Xe(0,2,4,-1,0,4,5,0,0,1,10,0),Xe(0,3,5,-1,0,5,8,0,0,1,14,0),Xe(0,3,5,-1,0,6,10,0,0,1,18,0),Xe(0,4,5,-2,0,7,10,1,0,2,16,1),Xe(0,5,5,-3,0,8,10,1,0,3,14,2),Xe(0,5,6,-3,0,9,12,1,0,3,16,2),Xe(0,6,6,-3,0,10,14,1,0,4,18,3),Xe(0,6,7,-4,0,11,15,1,0,4,20,3),Xe(0,7,8,-4,0,12,17,2,0,5,22,4),Xe(0,7,8,-4,0,13,19,2,0,5,24,4),Xe(0,7,9,-4,0,14,21,2,0,5,26,4),Xe(0,8,9,-5,0,15,22,2,0,6,28,5),Xe(0,8,10,-5,0,16,24,2,0,6,30,5),Xe(0,8,11,-5,0,17,26,2,0,6,32,5),Xe(0,9,11,-5,0,18,28,2,0,7,34,6),Xe(0,9,12,-6,0,19,29,2,0,7,36,6),Xe(0,10,13,-6,0,20,31,3,0,8,38,7),Xe(0,10,13,-6,0,21,33,3,0,8,40,7),Xe(0,10,14,-6,0,22,35,3,0,8,42,7),Xe(0,11,14,-7,0,23,36,3,0,9,44,8),Xe(0,11,15,-7,0,24,38,3,0,9,46,8)],EO=["duration","easing","delay"],RO={easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"},yw={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195};function ky(e){return`${Math.round(e)}ms`}function PO(e){if(!e)return 0;const t=e/36;return Math.round((4+15*t**.25+t/5)*10)}function kO(e){const t=E({},RO,e.easing),n=E({},yw,e.duration);return E({getAutoHeightDuration:PO,create:(o=["all"],i={})=>{const{duration:a=n.standard,easing:s=t.easeInOut,delay:l=0}=i;return G(i,EO),(Array.isArray(o)?o:[o]).map(u=>`${u} ${typeof a=="string"?a:ky(a)} ${s} ${typeof l=="string"?l:ky(l)}`).join(",")}},e,{easing:t,duration:n})}const TO={mobileStepper:1e3,fab:1050,speedDial:1050,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500},$O=["breakpoints","mixins","spacing","palette","transitions","typography","shape"];function xw(e={},...t){const{mixins:n={},palette:r={},transitions:o={},typography:i={}}=e,a=G(e,$O);if(e.vars)throw new Error(Qo(18));const s=gO(r),l=ul(e);let u=Qt(l,{mixins:X$(l.breakpoints,n),palette:s,shadows:CO.slice(),typography:xO(s,i),transitions:kO(o),zIndex:E({},TO)});return u=Qt(u,a),u=t.reduce((c,d)=>Qt(c,d),u),u.unstable_sxConfig=E({},ll,a==null?void 0:a.unstable_sxConfig),u.unstable_sx=function(d){return pa({sx:d,theme:this})},u}const fd=xw();function fl(){const e=ed(fd);return e[il]||e}function be({props:e,name:t}){return uw({props:e,name:t,defaultTheme:fd,themeId:il})}var pl={},vf={exports:{}},Ty;function OO(){return Ty||(Ty=1,function(e){function t(n,r){if(n==null)return{};var o={};for(var i in n)if({}.hasOwnProperty.call(n,i)){if(r.indexOf(i)>=0)continue;o[i]=n[i]}return o}e.exports=t,e.exports.__esModule=!0,e.exports.default=e.exports}(vf)),vf.exports}const bw=Lr(rT),MO=Lr(oT),_O=Lr(cT),jO=Lr(f$),NO=Lr(YT),AO=Lr(o$);var ma=wo;Object.defineProperty(pl,"__esModule",{value:!0});var LO=pl.default=XO;pl.shouldForwardProp=wu;pl.systemDefaultTheme=void 0;var kn=ma(qb()),Up=ma(OO()),$y=WO(bw),IO=MO;ma(_O);ma(jO);var FO=ma(NO),DO=ma(AO);const zO=["ownerState"],BO=["variants"],UO=["name","slot","skipVariantsResolver","skipSx","overridesResolver"];function ww(e){if(typeof WeakMap!="function")return null;var t=new WeakMap,n=new WeakMap;return(ww=function(r){return r?n:t})(e)}function WO(e,t){if(e&&e.__esModule)return e;if(e===null||typeof e!="object"&&typeof e!="function")return{default:e};var n=ww(t);if(n&&n.has(e))return n.get(e);var r={__proto__:null},o=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var i in e)if(i!=="default"&&Object.prototype.hasOwnProperty.call(e,i)){var a=o?Object.getOwnPropertyDescriptor(e,i):null;a&&(a.get||a.set)?Object.defineProperty(r,i,a):r[i]=e[i]}return r.default=e,n&&n.set(e,r),r}function HO(e){return Object.keys(e).length===0}function VO(e){return typeof e=="string"&&e.charCodeAt(0)>96}function wu(e){return e!=="ownerState"&&e!=="theme"&&e!=="sx"&&e!=="as"}const KO=pl.systemDefaultTheme=(0,FO.default)(),qO=e=>e&&e.charAt(0).toLowerCase()+e.slice(1);function Yl({defaultTheme:e,theme:t,themeId:n}){return HO(t)?e:t[n]||t}function GO(e){return e?(t,n)=>n[e]:null}function Su(e,t){let{ownerState:n}=t,r=(0,Up.default)(t,zO);const o=typeof e=="function"?e((0,kn.default)({ownerState:n},r)):e;if(Array.isArray(o))return o.flatMap(i=>Su(i,(0,kn.default)({ownerState:n},r)));if(o&&typeof o=="object"&&Array.isArray(o.variants)){const{variants:i=[]}=o;let s=(0,Up.default)(o,BO);return i.forEach(l=>{let u=!0;typeof l.props=="function"?u=l.props((0,kn.default)({ownerState:n},r,n)):Object.keys(l.props).forEach(c=>{(n==null?void 0:n[c])!==l.props[c]&&r[c]!==l.props[c]&&(u=!1)}),u&&(Array.isArray(s)||(s=[s]),s.push(typeof l.style=="function"?l.style((0,kn.default)({ownerState:n},r,n)):l.style))}),s}return o}function XO(e={}){const{themeId:t,defaultTheme:n=KO,rootShouldForwardProp:r=wu,slotShouldForwardProp:o=wu}=e,i=a=>(0,DO.default)((0,kn.default)({},a,{theme:Yl((0,kn.default)({},a,{defaultTheme:n,themeId:t}))}));return i.__mui_systemSx=!0,(a,s={})=>{(0,$y.internal_processStyles)(a,R=>R.filter(P=>!(P!=null&&P.__mui_systemSx)));const{name:l,slot:u,skipVariantsResolver:c,skipSx:d,overridesResolver:f=GO(qO(u))}=s,g=(0,Up.default)(s,UO),p=c!==void 0?c:u&&u!=="Root"&&u!=="root"||!1,h=d||!1;let C,m=wu;u==="Root"||u==="root"?m=r:u?m=o:VO(a)&&(m=void 0);const y=(0,$y.default)(a,(0,kn.default)({shouldForwardProp:m,label:C},g)),v=R=>typeof R=="function"&&R.__emotion_real!==R||(0,IO.isPlainObject)(R)?P=>Su(R,(0,kn.default)({},P,{theme:Yl({theme:P.theme,defaultTheme:n,themeId:t})})):R,w=(R,...P)=>{let x=v(R);const k=P?P.map(v):[];l&&f&&k.push(j=>{const L=Yl((0,kn.default)({},j,{defaultTheme:n,themeId:t}));if(!L.components||!L.components[l]||!L.components[l].styleOverrides)return null;const N=L.components[l].styleOverrides,F={};return Object.entries(N).forEach(([B,z])=>{F[B]=Su(z,(0,kn.default)({},j,{theme:L}))}),f(j,F)}),l&&!p&&k.push(j=>{var L;const N=Yl((0,kn.default)({},j,{defaultTheme:n,themeId:t})),F=N==null||(L=N.components)==null||(L=L[l])==null?void 0:L.variants;return Su({variants:F},(0,kn.default)({},j,{theme:N}))}),h||k.push(i);const M=k.length-P.length;if(Array.isArray(R)&&M>0){const j=new Array(M).fill("");x=[...R,...j],x.raw=[...R.raw,...j]}const T=y(x,...k);return a.muiName&&(T.muiName=a.muiName),T};return y.withConfig&&(w.withConfig=y.withConfig),w}}function Sw(e){return e!=="ownerState"&&e!=="theme"&&e!=="sx"&&e!=="as"}const Kn=e=>Sw(e)&&e!=="classes",V=LO({themeId:il,defaultTheme:fd,rootShouldForwardProp:Kn}),Oy=e=>{let t;return e<1?t=5.11916*e**2:t=4.5*Math.log(e+1)+2,(t/100).toFixed(2)};function QO(e){return ve("MuiSvgIcon",e)}fe("MuiSvgIcon",["root","colorPrimary","colorSecondary","colorAction","colorError","colorDisabled","fontSizeInherit","fontSizeSmall","fontSizeMedium","fontSizeLarge"]);const YO=["children","className","color","component","fontSize","htmlColor","inheritViewBox","titleAccess","viewBox"],JO=e=>{const{color:t,fontSize:n,classes:r}=e,o={root:["root",t!=="inherit"&&`color${ne(t)}`,`fontSize${ne(n)}`]};return ye(o,QO,r)},ZO=V("svg",{name:"MuiSvgIcon",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,n.color!=="inherit"&&t[`color${ne(n.color)}`],t[`fontSize${ne(n.fontSize)}`]]}})(({theme:e,ownerState:t})=>{var n,r,o,i,a,s,l,u,c,d,f,g,p;return{userSelect:"none",width:"1em",height:"1em",display:"inline-block",fill:t.hasSvgAsChild?void 0:"currentColor",flexShrink:0,transition:(n=e.transitions)==null||(r=n.create)==null?void 0:r.call(n,"fill",{duration:(o=e.transitions)==null||(o=o.duration)==null?void 0:o.shorter}),fontSize:{inherit:"inherit",small:((i=e.typography)==null||(a=i.pxToRem)==null?void 0:a.call(i,20))||"1.25rem",medium:((s=e.typography)==null||(l=s.pxToRem)==null?void 0:l.call(s,24))||"1.5rem",large:((u=e.typography)==null||(c=u.pxToRem)==null?void 0:c.call(u,35))||"2.1875rem"}[t.fontSize],color:(d=(f=(e.vars||e).palette)==null||(f=f[t.color])==null?void 0:f.main)!=null?d:{action:(g=(e.vars||e).palette)==null||(g=g.action)==null?void 0:g.active,disabled:(p=(e.vars||e).palette)==null||(p=p.action)==null?void 0:p.disabled,inherit:void 0}[t.color]}}),Wp=b.forwardRef(function(t,n){const r=be({props:t,name:"MuiSvgIcon"}),{children:o,className:i,color:a="inherit",component:s="svg",fontSize:l="medium",htmlColor:u,inheritViewBox:c=!1,titleAccess:d,viewBox:f="0 0 24 24"}=r,g=G(r,YO),p=b.isValidElement(o)&&o.type==="svg",h=E({},r,{color:a,component:s,fontSize:l,instanceFontSize:t.fontSize,inheritViewBox:c,viewBox:f,hasSvgAsChild:p}),C={};c||(C.viewBox=f);const m=JO(h);return S.jsxs(ZO,E({as:s,className:Y(m.root,i),focusable:"false",color:u,"aria-hidden":d?void 0:!0,role:d?"img":void 0,ref:n},C,g,p&&o.props,{ownerState:h,children:[p?o.props.children:o,d?S.jsx("title",{children:d}):null]}))});Wp.muiName="SvgIcon";function ar(e,t){function n(r,o){return S.jsx(Wp,E({"data-testid":`${t}Icon`,ref:o},r,{children:e}))}return n.muiName=Wp.muiName,b.memo(b.forwardRef(n))}const e2={configure:e=>{jm.configure(e)}},t2=Object.freeze(Object.defineProperty({__proto__:null,capitalize:ne,createChainedFunction:zp,createSvgIcon:ar,debounce:Im,deprecatedPropType:P$,isMuiElement:bu,ownerDocument:Ht,ownerWindow:ho,requirePropFactory:k$,setRef:ec,unstable_ClassNameGenerator:e2,unstable_useEnhancedEffect:ir,unstable_useId:Zi,unsupportedProp:$$,useControlled:Bs,useEventCallback:Pr,useForkRef:mt,useIsFocusVisible:Fm},Symbol.toStringTag,{value:"Module"}));function pd(e){return be}function Hp(e,t){return Hp=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(n,r){return n.__proto__=r,n},Hp(e,t)}function Cw(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,Hp(e,t)}const My={disabled:!1},oc=Gt.createContext(null);var n2=function(t){return t.scrollTop},Ja="unmounted",Po="exited",ko="entering",mi="entered",Vp="exiting",sr=function(e){Cw(t,e);function t(r,o){var i;i=e.call(this,r,o)||this;var a=o,s=a&&!a.isMounting?r.enter:r.appear,l;return i.appearStatus=null,r.in?s?(l=Po,i.appearStatus=ko):l=mi:r.unmountOnExit||r.mountOnEnter?l=Ja:l=Po,i.state={status:l},i.nextCallback=null,i}t.getDerivedStateFromProps=function(o,i){var a=o.in;return a&&i.status===Ja?{status:Po}:null};var n=t.prototype;return n.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},n.componentDidUpdate=function(o){var i=null;if(o!==this.props){var a=this.state.status;this.props.in?a!==ko&&a!==mi&&(i=ko):(a===ko||a===mi)&&(i=Vp)}this.updateStatus(!1,i)},n.componentWillUnmount=function(){this.cancelNextCallback()},n.getTimeouts=function(){var o=this.props.timeout,i,a,s;return i=a=s=o,o!=null&&typeof o!="number"&&(i=o.exit,a=o.enter,s=o.appear!==void 0?o.appear:a),{exit:i,enter:a,appear:s}},n.updateStatus=function(o,i){if(o===void 0&&(o=!1),i!==null)if(this.cancelNextCallback(),i===ko){if(this.props.unmountOnExit||this.props.mountOnEnter){var a=this.props.nodeRef?this.props.nodeRef.current:Ya.findDOMNode(this);a&&n2(a)}this.performEnter(o)}else this.performExit();else this.props.unmountOnExit&&this.state.status===Po&&this.setState({status:Ja})},n.performEnter=function(o){var i=this,a=this.props.enter,s=this.context?this.context.isMounting:o,l=this.props.nodeRef?[s]:[Ya.findDOMNode(this),s],u=l[0],c=l[1],d=this.getTimeouts(),f=s?d.appear:d.enter;if(!o&&!a||My.disabled){this.safeSetState({status:mi},function(){i.props.onEntered(u)});return}this.props.onEnter(u,c),this.safeSetState({status:ko},function(){i.props.onEntering(u,c),i.onTransitionEnd(f,function(){i.safeSetState({status:mi},function(){i.props.onEntered(u,c)})})})},n.performExit=function(){var o=this,i=this.props.exit,a=this.getTimeouts(),s=this.props.nodeRef?void 0:Ya.findDOMNode(this);if(!i||My.disabled){this.safeSetState({status:Po},function(){o.props.onExited(s)});return}this.props.onExit(s),this.safeSetState({status:Vp},function(){o.props.onExiting(s),o.onTransitionEnd(a.exit,function(){o.safeSetState({status:Po},function(){o.props.onExited(s)})})})},n.cancelNextCallback=function(){this.nextCallback!==null&&(this.nextCallback.cancel(),this.nextCallback=null)},n.safeSetState=function(o,i){i=this.setNextCallback(i),this.setState(o,i)},n.setNextCallback=function(o){var i=this,a=!0;return this.nextCallback=function(s){a&&(a=!1,i.nextCallback=null,o(s))},this.nextCallback.cancel=function(){a=!1},this.nextCallback},n.onTransitionEnd=function(o,i){this.setNextCallback(i);var a=this.props.nodeRef?this.props.nodeRef.current:Ya.findDOMNode(this),s=o==null&&!this.props.addEndListener;if(!a||s){setTimeout(this.nextCallback,0);return}if(this.props.addEndListener){var l=this.props.nodeRef?[this.nextCallback]:[a,this.nextCallback],u=l[0],c=l[1];this.props.addEndListener(u,c)}o!=null&&setTimeout(this.nextCallback,o)},n.render=function(){var o=this.state.status;if(o===Ja)return null;var i=this.props,a=i.children;i.in,i.mountOnEnter,i.unmountOnExit,i.appear,i.enter,i.exit,i.timeout,i.addEndListener,i.onEnter,i.onEntering,i.onEntered,i.onExit,i.onExiting,i.onExited,i.nodeRef;var s=G(i,["children","in","mountOnEnter","unmountOnExit","appear","enter","exit","timeout","addEndListener","onEnter","onEntering","onEntered","onExit","onExiting","onExited","nodeRef"]);return Gt.createElement(oc.Provider,{value:null},typeof a=="function"?a(o,s):Gt.cloneElement(Gt.Children.only(a),s))},t}(Gt.Component);sr.contextType=oc;sr.propTypes={};function hi(){}sr.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:hi,onEntering:hi,onEntered:hi,onExit:hi,onExiting:hi,onExited:hi};sr.UNMOUNTED=Ja;sr.EXITED=Po;sr.ENTERING=ko;sr.ENTERED=mi;sr.EXITING=Vp;function r2(e){if(e===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Wm(e,t){var n=function(i){return t&&b.isValidElement(i)?t(i):i},r=Object.create(null);return e&&b.Children.map(e,function(o){return o}).forEach(function(o){r[o.key]=n(o)}),r}function o2(e,t){e=e||{},t=t||{};function n(c){return c in t?t[c]:e[c]}var r=Object.create(null),o=[];for(var i in e)i in t?o.length&&(r[i]=o,o=[]):o.push(i);var a,s={};for(var l in t){if(r[l])for(a=0;a<r[l].length;a++){var u=r[l][a];s[r[l][a]]=n(u)}s[l]=n(l)}for(a=0;a<o.length;a++)s[o[a]]=n(o[a]);return s}function Lo(e,t,n){return n[t]!=null?n[t]:e.props[t]}function i2(e,t){return Wm(e.children,function(n){return b.cloneElement(n,{onExited:t.bind(null,n),in:!0,appear:Lo(n,"appear",e),enter:Lo(n,"enter",e),exit:Lo(n,"exit",e)})})}function a2(e,t,n){var r=Wm(e.children),o=o2(t,r);return Object.keys(o).forEach(function(i){var a=o[i];if(b.isValidElement(a)){var s=i in t,l=i in r,u=t[i],c=b.isValidElement(u)&&!u.props.in;l&&(!s||c)?o[i]=b.cloneElement(a,{onExited:n.bind(null,a),in:!0,exit:Lo(a,"exit",e),enter:Lo(a,"enter",e)}):!l&&s&&!c?o[i]=b.cloneElement(a,{in:!1}):l&&s&&b.isValidElement(u)&&(o[i]=b.cloneElement(a,{onExited:n.bind(null,a),in:u.props.in,exit:Lo(a,"exit",e),enter:Lo(a,"enter",e)}))}}),o}var s2=Object.values||function(e){return Object.keys(e).map(function(t){return e[t]})},l2={component:"div",childFactory:function(t){return t}},Hm=function(e){Cw(t,e);function t(r,o){var i;i=e.call(this,r,o)||this;var a=i.handleExited.bind(r2(i));return i.state={contextValue:{isMounting:!0},handleExited:a,firstRender:!0},i}var n=t.prototype;return n.componentDidMount=function(){this.mounted=!0,this.setState({contextValue:{isMounting:!1}})},n.componentWillUnmount=function(){this.mounted=!1},t.getDerivedStateFromProps=function(o,i){var a=i.children,s=i.handleExited,l=i.firstRender;return{children:l?i2(o,s):a2(o,a,s),firstRender:!1}},n.handleExited=function(o,i){var a=Wm(this.props.children);o.key in a||(o.props.onExited&&o.props.onExited(i),this.mounted&&this.setState(function(s){var l=E({},s.children);return delete l[o.key],{children:l}}))},n.render=function(){var o=this.props,i=o.component,a=o.childFactory,s=G(o,["component","childFactory"]),l=this.state.contextValue,u=s2(this.state.children).map(a);return delete s.appear,delete s.enter,delete s.exit,i===null?Gt.createElement(oc.Provider,{value:l},u):Gt.createElement(oc.Provider,{value:l},Gt.createElement(i,s,u))},t}(Gt.Component);Hm.propTypes={};Hm.defaultProps=l2;const Ew=e=>e.scrollTop;function ea(e,t){var n,r;const{timeout:o,easing:i,style:a={}}=e;return{duration:(n=a.transitionDuration)!=null?n:typeof o=="number"?o:o[t.mode]||0,easing:(r=a.transitionTimingFunction)!=null?r:typeof i=="object"?i[t.mode]:i,delay:a.transitionDelay}}function u2(e){return ve("MuiCollapse",e)}fe("MuiCollapse",["root","horizontal","vertical","entered","hidden","wrapper","wrapperInner"]);const c2=["addEndListener","children","className","collapsedSize","component","easing","in","onEnter","onEntered","onEntering","onExit","onExited","onExiting","orientation","style","timeout","TransitionComponent"],d2=e=>{const{orientation:t,classes:n}=e,r={root:["root",`${t}`],entered:["entered"],hidden:["hidden"],wrapper:["wrapper",`${t}`],wrapperInner:["wrapperInner",`${t}`]};return ye(r,u2,n)},f2=V("div",{name:"MuiCollapse",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[n.orientation],n.state==="entered"&&t.entered,n.state==="exited"&&!n.in&&n.collapsedSize==="0px"&&t.hidden]}})(({theme:e,ownerState:t})=>E({height:0,overflow:"hidden",transition:e.transitions.create("height")},t.orientation==="horizontal"&&{height:"auto",width:0,transition:e.transitions.create("width")},t.state==="entered"&&E({height:"auto",overflow:"visible"},t.orientation==="horizontal"&&{width:"auto"}),t.state==="exited"&&!t.in&&t.collapsedSize==="0px"&&{visibility:"hidden"})),p2=V("div",{name:"MuiCollapse",slot:"Wrapper",overridesResolver:(e,t)=>t.wrapper})(({ownerState:e})=>E({display:"flex",width:"100%"},e.orientation==="horizontal"&&{width:"auto",height:"100%"})),h2=V("div",{name:"MuiCollapse",slot:"WrapperInner",overridesResolver:(e,t)=>t.wrapperInner})(({ownerState:e})=>E({width:"100%"},e.orientation==="horizontal"&&{width:"auto",height:"100%"})),Vm=b.forwardRef(function(t,n){const r=be({props:t,name:"MuiCollapse"}),{addEndListener:o,children:i,className:a,collapsedSize:s="0px",component:l,easing:u,in:c,onEnter:d,onEntered:f,onEntering:g,onExit:p,onExited:h,onExiting:C,orientation:m="vertical",style:y,timeout:v=yw.standard,TransitionComponent:w=sr}=r,R=G(r,c2),P=E({},r,{orientation:m,collapsedSize:s}),x=d2(P),k=fl(),M=Ao(),T=b.useRef(null),j=b.useRef(),L=typeof s=="number"?`${s}px`:s,N=m==="horizontal",F=N?"width":"height",B=b.useRef(null),z=mt(n,B),U=K=>le=>{if(K){const pe=B.current;le===void 0?K(pe):K(pe,le)}},O=()=>T.current?T.current[N?"clientWidth":"clientHeight"]:0,D=U((K,le)=>{T.current&&N&&(T.current.style.position="absolute"),K.style[F]=L,d&&d(K,le)}),q=U((K,le)=>{const pe=O();T.current&&N&&(T.current.style.position="");const{duration:de,easing:De}=ea({style:y,timeout:v,easing:u},{mode:"enter"});if(v==="auto"){const ge=k.transitions.getAutoHeightDuration(pe);K.style.transitionDuration=`${ge}ms`,j.current=ge}else K.style.transitionDuration=typeof de=="string"?de:`${de}ms`;K.style[F]=`${pe}px`,K.style.transitionTimingFunction=De,g&&g(K,le)}),ie=U((K,le)=>{K.style[F]="auto",f&&f(K,le)}),ee=U(K=>{K.style[F]=`${O()}px`,p&&p(K)}),me=U(h),Z=U(K=>{const le=O(),{duration:pe,easing:de}=ea({style:y,timeout:v,easing:u},{mode:"exit"});if(v==="auto"){const De=k.transitions.getAutoHeightDuration(le);K.style.transitionDuration=`${De}ms`,j.current=De}else K.style.transitionDuration=typeof pe=="string"?pe:`${pe}ms`;K.style[F]=L,K.style.transitionTimingFunction=de,C&&C(K)}),ae=K=>{v==="auto"&&M.start(j.current||0,K),o&&o(B.current,K)};return S.jsx(w,E({in:c,onEnter:D,onEntered:ie,onEntering:q,onExit:ee,onExited:me,onExiting:Z,addEndListener:ae,nodeRef:B,timeout:v==="auto"?null:v},R,{children:(K,le)=>S.jsx(f2,E({as:l,className:Y(x.root,a,{entered:x.entered,exited:!c&&L==="0px"&&x.hidden}[K]),style:E({[N?"minWidth":"minHeight"]:L},y),ref:z},le,{ownerState:E({},P,{state:K}),children:S.jsx(p2,{ownerState:E({},P,{state:K}),className:x.wrapper,ref:T,children:S.jsx(h2,{ownerState:E({},P,{state:K}),className:x.wrapperInner,children:i})})}))}))});Vm.muiSupportAuto=!0;function m2(e){return ve("MuiPaper",e)}fe("MuiPaper",["root","rounded","outlined","elevation","elevation0","elevation1","elevation2","elevation3","elevation4","elevation5","elevation6","elevation7","elevation8","elevation9","elevation10","elevation11","elevation12","elevation13","elevation14","elevation15","elevation16","elevation17","elevation18","elevation19","elevation20","elevation21","elevation22","elevation23","elevation24"]);const g2=["className","component","elevation","square","variant"],v2=e=>{const{square:t,elevation:n,variant:r,classes:o}=e,i={root:["root",r,!t&&"rounded",r==="elevation"&&`elevation${n}`]};return ye(i,m2,o)},y2=V("div",{name:"MuiPaper",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[n.variant],!n.square&&t.rounded,n.variant==="elevation"&&t[`elevation${n.elevation}`]]}})(({theme:e,ownerState:t})=>{var n;return E({backgroundColor:(e.vars||e).palette.background.paper,color:(e.vars||e).palette.text.primary,transition:e.transitions.create("box-shadow")},!t.square&&{borderRadius:e.shape.borderRadius},t.variant==="outlined"&&{border:`1px solid ${(e.vars||e).palette.divider}`},t.variant==="elevation"&&E({boxShadow:(e.vars||e).shadows[t.elevation]},!e.vars&&e.palette.mode==="dark"&&{backgroundImage:`linear-gradient(${Ot("#fff",Oy(t.elevation))}, ${Ot("#fff",Oy(t.elevation))})`},e.vars&&{backgroundImage:(n=e.vars.overlays)==null?void 0:n[t.elevation]}))}),hd=b.forwardRef(function(t,n){const r=be({props:t,name:"MuiPaper"}),{className:o,component:i="div",elevation:a=1,square:s=!1,variant:l="elevation"}=r,u=G(r,g2),c=E({},r,{component:i,elevation:a,square:s,variant:l}),d=v2(c);return S.jsx(y2,E({as:i,ownerState:c,className:Y(d.root,o),ref:n},u))}),Rw=b.createContext({});function Us(e){return typeof e=="string"}function $i(e,t,n){return e===void 0||Us(e)?t:E({},t,{ownerState:E({},t.ownerState,n)})}const x2={disableDefaultClasses:!1},b2=b.createContext(x2);function w2(e){const{disableDefaultClasses:t}=b.useContext(b2);return n=>t?"":e(n)}function Pw(e,t=[]){if(e===void 0)return{};const n={};return Object.keys(e).filter(r=>r.match(/^on[A-Z]/)&&typeof e[r]=="function"&&!t.includes(r)).forEach(r=>{n[r]=e[r]}),n}function kw(e,t,n){return typeof e=="function"?e(t,n):e}function _y(e){if(e===void 0)return{};const t={};return Object.keys(e).filter(n=>!(n.match(/^on[A-Z]/)&&typeof e[n]=="function")).forEach(n=>{t[n]=e[n]}),t}function Tw(e){const{getSlotProps:t,additionalProps:n,externalSlotProps:r,externalForwardedProps:o,className:i}=e;if(!t){const g=Y(n==null?void 0:n.className,i,o==null?void 0:o.className,r==null?void 0:r.className),p=E({},n==null?void 0:n.style,o==null?void 0:o.style,r==null?void 0:r.style),h=E({},n,o,r);return g.length>0&&(h.className=g),Object.keys(p).length>0&&(h.style=p),{props:h,internalRef:void 0}}const a=Pw(E({},o,r)),s=_y(r),l=_y(o),u=t(a),c=Y(u==null?void 0:u.className,n==null?void 0:n.className,i,o==null?void 0:o.className,r==null?void 0:r.className),d=E({},u==null?void 0:u.style,n==null?void 0:n.style,o==null?void 0:o.style,r==null?void 0:r.style),f=E({},u,n,l,s);return c.length>0&&(f.className=c),Object.keys(d).length>0&&(f.style=d),{props:f,internalRef:u.ref}}const S2=["elementType","externalSlotProps","ownerState","skipResolvingSlotProps"];function Jo(e){var t;const{elementType:n,externalSlotProps:r,ownerState:o,skipResolvingSlotProps:i=!1}=e,a=G(e,S2),s=i?{}:kw(r,o),{props:l,internalRef:u}=Tw(E({},a,{externalSlotProps:s})),c=mt(u,s==null?void 0:s.ref,(t=e.additionalProps)==null?void 0:t.ref);return $i(n,E({},l,{ref:c}),o)}const C2=["className","elementType","ownerState","externalForwardedProps","getSlotOwnerState","internalForwardedProps"],E2=["component","slots","slotProps"],R2=["component"];function Kp(e,t){const{className:n,elementType:r,ownerState:o,externalForwardedProps:i,getSlotOwnerState:a,internalForwardedProps:s}=t,l=G(t,C2),{component:u,slots:c={[e]:void 0},slotProps:d={[e]:void 0}}=i,f=G(i,E2),g=c[e]||r,p=kw(d[e],o),h=Tw(E({className:n},l,{externalForwardedProps:e==="root"?f:void 0,externalSlotProps:p})),{props:{component:C},internalRef:m}=h,y=G(h.props,R2),v=mt(m,p==null?void 0:p.ref,t.ref),w=a?a(y):{},R=E({},o,w),P=e==="root"?C||u:C,x=$i(g,E({},e==="root"&&!u&&!c[e]&&s,e!=="root"&&!c[e]&&s,y,P&&{as:P},{ref:v}),R);return Object.keys(w).forEach(k=>{delete x[k]}),[g,x]}function P2(e){return ve("MuiAccordion",e)}const Jl=fe("MuiAccordion",["root","rounded","expanded","disabled","gutters","region"]),k2=["children","className","defaultExpanded","disabled","disableGutters","expanded","onChange","square","slots","slotProps","TransitionComponent","TransitionProps"],T2=pd(),$2=e=>{const{classes:t,square:n,expanded:r,disabled:o,disableGutters:i}=e;return ye({root:["root",!n&&"rounded",r&&"expanded",o&&"disabled",!i&&"gutters"],region:["region"]},P2,t)},O2=V(hd,{name:"MuiAccordion",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[{[`& .${Jl.region}`]:t.region},t.root,!n.square&&t.rounded,!n.disableGutters&&t.gutters]}})(({theme:e})=>{const t={duration:e.transitions.duration.shortest};return{position:"relative",transition:e.transitions.create(["margin"],t),overflowAnchor:"none","&::before":{position:"absolute",left:0,top:-1,right:0,height:1,content:'""',opacity:1,backgroundColor:(e.vars||e).palette.divider,transition:e.transitions.create(["opacity","background-color"],t)},"&:first-of-type":{"&::before":{display:"none"}},[`&.${Jl.expanded}`]:{"&::before":{opacity:0},"&:first-of-type":{marginTop:0},"&:last-of-type":{marginBottom:0},"& + &":{"&::before":{display:"none"}}},[`&.${Jl.disabled}`]:{backgroundColor:(e.vars||e).palette.action.disabledBackground}}},({theme:e})=>({variants:[{props:t=>!t.square,style:{borderRadius:0,"&:first-of-type":{borderTopLeftRadius:(e.vars||e).shape.borderRadius,borderTopRightRadius:(e.vars||e).shape.borderRadius},"&:last-of-type":{borderBottomLeftRadius:(e.vars||e).shape.borderRadius,borderBottomRightRadius:(e.vars||e).shape.borderRadius,"@supports (-ms-ime-align: auto)":{borderBottomLeftRadius:0,borderBottomRightRadius:0}}}},{props:t=>!t.disableGutters,style:{[`&.${Jl.expanded}`]:{margin:"16px 0"}}}]})),M2=b.forwardRef(function(t,n){const r=T2({props:t,name:"MuiAccordion"}),{children:o,className:i,defaultExpanded:a=!1,disabled:s=!1,disableGutters:l=!1,expanded:u,onChange:c,square:d=!1,slots:f={},slotProps:g={},TransitionComponent:p,TransitionProps:h}=r,C=G(r,k2),[m,y]=Bs({controlled:u,default:a,name:"Accordion",state:"expanded"}),v=b.useCallback(N=>{y(!m),c&&c(N,!m)},[m,c,y]),[w,...R]=b.Children.toArray(o),P=b.useMemo(()=>({expanded:m,disabled:s,disableGutters:l,toggle:v}),[m,s,l,v]),x=E({},r,{square:d,disabled:s,disableGutters:l,expanded:m}),k=$2(x),M=E({transition:p},f),T=E({transition:h},g),[j,L]=Kp("transition",{elementType:Vm,externalForwardedProps:{slots:M,slotProps:T},ownerState:x});return S.jsxs(O2,E({className:Y(k.root,i),ref:n,ownerState:x,square:d},C,{children:[S.jsx(Rw.Provider,{value:P,children:w}),S.jsx(j,E({in:m,timeout:"auto"},L,{children:S.jsx("div",{"aria-labelledby":w.props.id,id:w.props["aria-controls"],role:"region",className:k.region,children:R})}))]}))});function _2(e){return ve("MuiAccordionDetails",e)}fe("MuiAccordionDetails",["root"]);const j2=["className"],N2=pd(),A2=e=>{const{classes:t}=e;return ye({root:["root"]},_2,t)},L2=V("div",{name:"MuiAccordionDetails",slot:"Root",overridesResolver:(e,t)=>t.root})(({theme:e})=>({padding:e.spacing(1,2,2)})),I2=b.forwardRef(function(t,n){const r=N2({props:t,name:"MuiAccordionDetails"}),{className:o}=r,i=G(r,j2),a=r,s=A2(a);return S.jsx(L2,E({className:Y(s.root,o),ref:n,ownerState:a},i))});function F2(e){const{className:t,classes:n,pulsate:r=!1,rippleX:o,rippleY:i,rippleSize:a,in:s,onExited:l,timeout:u}=e,[c,d]=b.useState(!1),f=Y(t,n.ripple,n.rippleVisible,r&&n.ripplePulsate),g={width:a,height:a,top:-(a/2)+i,left:-(a/2)+o},p=Y(n.child,c&&n.childLeaving,r&&n.childPulsate);return!s&&!c&&d(!0),b.useEffect(()=>{if(!s&&l!=null){const h=setTimeout(l,u);return()=>{clearTimeout(h)}}},[l,s,u]),S.jsx("span",{className:f,style:g,children:S.jsx("span",{className:p})})}const Tn=fe("MuiTouchRipple",["root","ripple","rippleVisible","ripplePulsate","child","childLeaving","childPulsate"]),D2=["center","classes","className"];let md=e=>e,jy,Ny,Ay,Ly;const qp=550,z2=80,B2=fa(jy||(jy=md`
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
`)),U2=fa(Ny||(Ny=md`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`)),W2=fa(Ay||(Ay=md`
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
`)),H2=V("span",{name:"MuiTouchRipple",slot:"Root"})({overflow:"hidden",pointerEvents:"none",position:"absolute",zIndex:0,top:0,right:0,bottom:0,left:0,borderRadius:"inherit"}),V2=V(F2,{name:"MuiTouchRipple",slot:"Ripple"})(Ly||(Ly=md`
  opacity: 0;
  position: absolute;

  &.${0} {
    opacity: 0.3;
    transform: scale(1);
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  &.${0} {
    animation-duration: ${0}ms;
  }

  & .${0} {
    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

  & .${0} {
    opacity: 0;
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  & .${0} {
    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-name: ${0};
    animation-duration: 2500ms;
    animation-timing-function: ${0};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
`),Tn.rippleVisible,B2,qp,({theme:e})=>e.transitions.easing.easeInOut,Tn.ripplePulsate,({theme:e})=>e.transitions.duration.shorter,Tn.child,Tn.childLeaving,U2,qp,({theme:e})=>e.transitions.easing.easeInOut,Tn.childPulsate,W2,({theme:e})=>e.transitions.easing.easeInOut),K2=b.forwardRef(function(t,n){const r=be({props:t,name:"MuiTouchRipple"}),{center:o=!1,classes:i={},className:a}=r,s=G(r,D2),[l,u]=b.useState([]),c=b.useRef(0),d=b.useRef(null);b.useEffect(()=>{d.current&&(d.current(),d.current=null)},[l]);const f=b.useRef(!1),g=Ao(),p=b.useRef(null),h=b.useRef(null),C=b.useCallback(w=>{const{pulsate:R,rippleX:P,rippleY:x,rippleSize:k,cb:M}=w;u(T=>[...T,S.jsx(V2,{classes:{ripple:Y(i.ripple,Tn.ripple),rippleVisible:Y(i.rippleVisible,Tn.rippleVisible),ripplePulsate:Y(i.ripplePulsate,Tn.ripplePulsate),child:Y(i.child,Tn.child),childLeaving:Y(i.childLeaving,Tn.childLeaving),childPulsate:Y(i.childPulsate,Tn.childPulsate)},timeout:qp,pulsate:R,rippleX:P,rippleY:x,rippleSize:k},c.current)]),c.current+=1,d.current=M},[i]),m=b.useCallback((w={},R={},P=()=>{})=>{const{pulsate:x=!1,center:k=o||R.pulsate,fakeElement:M=!1}=R;if((w==null?void 0:w.type)==="mousedown"&&f.current){f.current=!1;return}(w==null?void 0:w.type)==="touchstart"&&(f.current=!0);const T=M?null:h.current,j=T?T.getBoundingClientRect():{width:0,height:0,left:0,top:0};let L,N,F;if(k||w===void 0||w.clientX===0&&w.clientY===0||!w.clientX&&!w.touches)L=Math.round(j.width/2),N=Math.round(j.height/2);else{const{clientX:B,clientY:z}=w.touches&&w.touches.length>0?w.touches[0]:w;L=Math.round(B-j.left),N=Math.round(z-j.top)}if(k)F=Math.sqrt((2*j.width**2+j.height**2)/3),F%2===0&&(F+=1);else{const B=Math.max(Math.abs((T?T.clientWidth:0)-L),L)*2+2,z=Math.max(Math.abs((T?T.clientHeight:0)-N),N)*2+2;F=Math.sqrt(B**2+z**2)}w!=null&&w.touches?p.current===null&&(p.current=()=>{C({pulsate:x,rippleX:L,rippleY:N,rippleSize:F,cb:P})},g.start(z2,()=>{p.current&&(p.current(),p.current=null)})):C({pulsate:x,rippleX:L,rippleY:N,rippleSize:F,cb:P})},[o,C,g]),y=b.useCallback(()=>{m({},{pulsate:!0})},[m]),v=b.useCallback((w,R)=>{if(g.clear(),(w==null?void 0:w.type)==="touchend"&&p.current){p.current(),p.current=null,g.start(0,()=>{v(w,R)});return}p.current=null,u(P=>P.length>0?P.slice(1):P),d.current=R},[g]);return b.useImperativeHandle(n,()=>({pulsate:y,start:m,stop:v}),[y,m,v]),S.jsx(H2,E({className:Y(Tn.root,i.root,a),ref:h},s,{children:S.jsx(Hm,{component:null,exit:!0,children:l})}))});function q2(e){return ve("MuiButtonBase",e)}const G2=fe("MuiButtonBase",["root","disabled","focusVisible"]),X2=["action","centerRipple","children","className","component","disabled","disableRipple","disableTouchRipple","focusRipple","focusVisibleClassName","LinkComponent","onBlur","onClick","onContextMenu","onDragLeave","onFocus","onFocusVisible","onKeyDown","onKeyUp","onMouseDown","onMouseLeave","onMouseUp","onTouchEnd","onTouchMove","onTouchStart","tabIndex","TouchRippleProps","touchRippleRef","type"],Q2=e=>{const{disabled:t,focusVisible:n,focusVisibleClassName:r,classes:o}=e,a=ye({root:["root",t&&"disabled",n&&"focusVisible"]},q2,o);return n&&r&&(a.root+=` ${r}`),a},Y2=V("button",{name:"MuiButtonBase",slot:"Root",overridesResolver:(e,t)=>t.root})({display:"inline-flex",alignItems:"center",justifyContent:"center",position:"relative",boxSizing:"border-box",WebkitTapHighlightColor:"transparent",backgroundColor:"transparent",outline:0,border:0,margin:0,borderRadius:0,padding:0,cursor:"pointer",userSelect:"none",verticalAlign:"middle",MozAppearance:"none",WebkitAppearance:"none",textDecoration:"none",color:"inherit","&::-moz-focus-inner":{borderStyle:"none"},[`&.${G2.disabled}`]:{pointerEvents:"none",cursor:"default"},"@media print":{colorAdjust:"exact"}}),gd=b.forwardRef(function(t,n){const r=be({props:t,name:"MuiButtonBase"}),{action:o,centerRipple:i=!1,children:a,className:s,component:l="button",disabled:u=!1,disableRipple:c=!1,disableTouchRipple:d=!1,focusRipple:f=!1,LinkComponent:g="a",onBlur:p,onClick:h,onContextMenu:C,onDragLeave:m,onFocus:y,onFocusVisible:v,onKeyDown:w,onKeyUp:R,onMouseDown:P,onMouseLeave:x,onMouseUp:k,onTouchEnd:M,onTouchMove:T,onTouchStart:j,tabIndex:L=0,TouchRippleProps:N,touchRippleRef:F,type:B}=r,z=G(r,X2),U=b.useRef(null),O=b.useRef(null),D=mt(O,F),{isFocusVisibleRef:q,onFocus:ie,onBlur:ee,ref:me}=Fm(),[Z,ae]=b.useState(!1);u&&Z&&ae(!1),b.useImperativeHandle(o,()=>({focusVisible:()=>{ae(!0),U.current.focus()}}),[]);const[K,le]=b.useState(!1);b.useEffect(()=>{le(!0)},[]);const pe=K&&!c&&!u;b.useEffect(()=>{Z&&f&&!c&&K&&O.current.pulsate()},[c,f,Z,K]);function de(oe,ft,kt=d){return Pr(Zt=>(ft&&ft(Zt),!kt&&O.current&&O.current[oe](Zt),!0))}const De=de("start",P),ge=de("stop",C),Se=de("stop",m),he=de("stop",k),ke=de("stop",oe=>{Z&&oe.preventDefault(),x&&x(oe)}),Ee=de("start",j),it=de("stop",M),St=de("stop",T),at=de("stop",oe=>{ee(oe),q.current===!1&&ae(!1),p&&p(oe)},!1),Pt=Pr(oe=>{U.current||(U.current=oe.currentTarget),ie(oe),q.current===!0&&(ae(!0),v&&v(oe)),y&&y(oe)}),Ue=()=>{const oe=U.current;return l&&l!=="button"&&!(oe.tagName==="A"&&oe.href)},_e=b.useRef(!1),Ze=Pr(oe=>{f&&!_e.current&&Z&&O.current&&oe.key===" "&&(_e.current=!0,O.current.stop(oe,()=>{O.current.start(oe)})),oe.target===oe.currentTarget&&Ue()&&oe.key===" "&&oe.preventDefault(),w&&w(oe),oe.target===oe.currentTarget&&Ue()&&oe.key==="Enter"&&!u&&(oe.preventDefault(),h&&h(oe))}),ze=Pr(oe=>{f&&oe.key===" "&&O.current&&Z&&!oe.defaultPrevented&&(_e.current=!1,O.current.stop(oe,()=>{O.current.pulsate(oe)})),R&&R(oe),h&&oe.target===oe.currentTarget&&Ue()&&oe.key===" "&&!oe.defaultPrevented&&h(oe)});let Te=l;Te==="button"&&(z.href||z.to)&&(Te=g);const ct={};Te==="button"?(ct.type=B===void 0?"button":B,ct.disabled=u):(!z.href&&!z.to&&(ct.role="button"),u&&(ct["aria-disabled"]=u));const Ve=mt(n,me,U),dt=E({},r,{centerRipple:i,component:l,disabled:u,disableRipple:c,disableTouchRipple:d,focusRipple:f,tabIndex:L,focusVisible:Z}),$e=Q2(dt);return S.jsxs(Y2,E({as:Te,className:Y($e.root,s),ownerState:dt,onBlur:at,onClick:h,onContextMenu:ge,onFocus:Pt,onKeyDown:Ze,onKeyUp:ze,onMouseDown:De,onMouseLeave:ke,onMouseUp:he,onDragLeave:Se,onTouchEnd:it,onTouchMove:St,onTouchStart:Ee,ref:Ve,tabIndex:u?-1:L,type:B},ct,z,{children:[a,pe?S.jsx(K2,E({ref:D,center:i},N)):null]}))});function J2(e){return ve("MuiAccordionSummary",e)}const Oi=fe("MuiAccordionSummary",["root","expanded","focusVisible","disabled","gutters","contentGutters","content","expandIconWrapper"]),Z2=["children","className","expandIcon","focusVisibleClassName","onClick"],eM=pd(),tM=e=>{const{classes:t,expanded:n,disabled:r,disableGutters:o}=e;return ye({root:["root",n&&"expanded",r&&"disabled",!o&&"gutters"],focusVisible:["focusVisible"],content:["content",n&&"expanded",!o&&"contentGutters"],expandIconWrapper:["expandIconWrapper",n&&"expanded"]},J2,t)},nM=V(gd,{name:"MuiAccordionSummary",slot:"Root",overridesResolver:(e,t)=>t.root})(({theme:e})=>{const t={duration:e.transitions.duration.shortest};return{display:"flex",minHeight:48,padding:e.spacing(0,2),transition:e.transitions.create(["min-height","background-color"],t),[`&.${Oi.focusVisible}`]:{backgroundColor:(e.vars||e).palette.action.focus},[`&.${Oi.disabled}`]:{opacity:(e.vars||e).palette.action.disabledOpacity},[`&:hover:not(.${Oi.disabled})`]:{cursor:"pointer"},variants:[{props:n=>!n.disableGutters,style:{[`&.${Oi.expanded}`]:{minHeight:64}}}]}}),rM=V("div",{name:"MuiAccordionSummary",slot:"Content",overridesResolver:(e,t)=>t.content})(({theme:e})=>({display:"flex",flexGrow:1,margin:"12px 0",variants:[{props:t=>!t.disableGutters,style:{transition:e.transitions.create(["margin"],{duration:e.transitions.duration.shortest}),[`&.${Oi.expanded}`]:{margin:"20px 0"}}}]})),oM=V("div",{name:"MuiAccordionSummary",slot:"ExpandIconWrapper",overridesResolver:(e,t)=>t.expandIconWrapper})(({theme:e})=>({display:"flex",color:(e.vars||e).palette.action.active,transform:"rotate(0deg)",transition:e.transitions.create("transform",{duration:e.transitions.duration.shortest}),[`&.${Oi.expanded}`]:{transform:"rotate(180deg)"}})),iM=b.forwardRef(function(t,n){const r=eM({props:t,name:"MuiAccordionSummary"}),{children:o,className:i,expandIcon:a,focusVisibleClassName:s,onClick:l}=r,u=G(r,Z2),{disabled:c=!1,disableGutters:d,expanded:f,toggle:g}=b.useContext(Rw),p=m=>{g&&g(m),l&&l(m)},h=E({},r,{expanded:f,disabled:c,disableGutters:d}),C=tM(h);return S.jsxs(nM,E({focusRipple:!1,disableRipple:!0,disabled:c,component:"div","aria-expanded":f,className:Y(C.root,i),focusVisibleClassName:Y(C.focusVisible,s),onClick:p,ref:n,ownerState:h},u,{children:[S.jsx(rM,{className:C.content,ownerState:h,children:o}),a&&S.jsx(oM,{className:C.expandIconWrapper,ownerState:h,children:a})]}))});function aM(e){return ve("MuiAlert",e)}const Iy=fe("MuiAlert",["root","action","icon","message","filled","colorSuccess","colorInfo","colorWarning","colorError","filledSuccess","filledInfo","filledWarning","filledError","outlined","outlinedSuccess","outlinedInfo","outlinedWarning","outlinedError","standard","standardSuccess","standardInfo","standardWarning","standardError"]);function sM(e){return ve("MuiIconButton",e)}const lM=fe("MuiIconButton",["root","disabled","colorInherit","colorPrimary","colorSecondary","colorError","colorInfo","colorSuccess","colorWarning","edgeStart","edgeEnd","sizeSmall","sizeMedium","sizeLarge"]),uM=["edge","children","className","color","disabled","disableFocusRipple","size"],cM=e=>{const{classes:t,disabled:n,color:r,edge:o,size:i}=e,a={root:["root",n&&"disabled",r!=="default"&&`color${ne(r)}`,o&&`edge${ne(o)}`,`size${ne(i)}`]};return ye(a,sM,t)},dM=V(gd,{name:"MuiIconButton",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,n.color!=="default"&&t[`color${ne(n.color)}`],n.edge&&t[`edge${ne(n.edge)}`],t[`size${ne(n.size)}`]]}})(({theme:e,ownerState:t})=>E({textAlign:"center",flex:"0 0 auto",fontSize:e.typography.pxToRem(24),padding:8,borderRadius:"50%",overflow:"visible",color:(e.vars||e).palette.action.active,transition:e.transitions.create("background-color",{duration:e.transitions.duration.shortest})},!t.disableRipple&&{"&:hover":{backgroundColor:e.vars?`rgba(${e.vars.palette.action.activeChannel} / ${e.vars.palette.action.hoverOpacity})`:Ot(e.palette.action.active,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},t.edge==="start"&&{marginLeft:t.size==="small"?-3:-12},t.edge==="end"&&{marginRight:t.size==="small"?-3:-12}),({theme:e,ownerState:t})=>{var n;const r=(n=(e.vars||e).palette)==null?void 0:n[t.color];return E({},t.color==="inherit"&&{color:"inherit"},t.color!=="inherit"&&t.color!=="default"&&E({color:r==null?void 0:r.main},!t.disableRipple&&{"&:hover":E({},r&&{backgroundColor:e.vars?`rgba(${r.mainChannel} / ${e.vars.palette.action.hoverOpacity})`:Ot(r.main,e.palette.action.hoverOpacity)},{"@media (hover: none)":{backgroundColor:"transparent"}})}),t.size==="small"&&{padding:5,fontSize:e.typography.pxToRem(18)},t.size==="large"&&{padding:12,fontSize:e.typography.pxToRem(28)},{[`&.${lM.disabled}`]:{backgroundColor:"transparent",color:(e.vars||e).palette.action.disabled}})}),Nn=b.forwardRef(function(t,n){const r=be({props:t,name:"MuiIconButton"}),{edge:o=!1,children:i,className:a,color:s="default",disabled:l=!1,disableFocusRipple:u=!1,size:c="medium"}=r,d=G(r,uM),f=E({},r,{edge:o,color:s,disabled:l,disableFocusRipple:u,size:c}),g=cM(f);return S.jsx(dM,E({className:Y(g.root,a),centerRipple:!0,focusRipple:!u,disabled:l,ref:n},d,{ownerState:f,children:i}))}),fM=ar(S.jsx("path",{d:"M20,12A8,8 0 0,1 12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4C12.76,4 13.5,4.11 14.2, 4.31L15.77,2.74C14.61,2.26 13.34,2 12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0, 0 22,12M7.91,10.08L6.5,11.5L11,16L21,6L19.59,4.58L11,13.17L7.91,10.08Z"}),"SuccessOutlined"),pM=ar(S.jsx("path",{d:"M12 5.99L19.53 19H4.47L12 5.99M12 2L1 21h22L12 2zm1 14h-2v2h2v-2zm0-6h-2v4h2v-4z"}),"ReportProblemOutlined"),hM=ar(S.jsx("path",{d:"M11 15h2v2h-2zm0-8h2v6h-2zm.99-5C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"}),"ErrorOutline"),mM=ar(S.jsx("path",{d:"M11,9H13V7H11M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20, 12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10, 10 0 0,0 12,2M11,17H13V11H11V17Z"}),"InfoOutlined"),gM=ar(S.jsx("path",{d:"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"}),"Close"),vM=["action","children","className","closeText","color","components","componentsProps","icon","iconMapping","onClose","role","severity","slotProps","slots","variant"],yM=pd(),xM=e=>{const{variant:t,color:n,severity:r,classes:o}=e,i={root:["root",`color${ne(n||r)}`,`${t}${ne(n||r)}`,`${t}`],icon:["icon"],message:["message"],action:["action"]};return ye(i,aM,o)},bM=V(hd,{name:"MuiAlert",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[n.variant],t[`${n.variant}${ne(n.color||n.severity)}`]]}})(({theme:e})=>{const t=e.palette.mode==="light"?tc:nc,n=e.palette.mode==="light"?nc:tc;return E({},e.typography.body2,{backgroundColor:"transparent",display:"flex",padding:"6px 16px",variants:[...Object.entries(e.palette).filter(([,r])=>r.main&&r.light).map(([r])=>({props:{colorSeverity:r,variant:"standard"},style:{color:e.vars?e.vars.palette.Alert[`${r}Color`]:t(e.palette[r].light,.6),backgroundColor:e.vars?e.vars.palette.Alert[`${r}StandardBg`]:n(e.palette[r].light,.9),[`& .${Iy.icon}`]:e.vars?{color:e.vars.palette.Alert[`${r}IconColor`]}:{color:e.palette[r].main}}})),...Object.entries(e.palette).filter(([,r])=>r.main&&r.light).map(([r])=>({props:{colorSeverity:r,variant:"outlined"},style:{color:e.vars?e.vars.palette.Alert[`${r}Color`]:t(e.palette[r].light,.6),border:`1px solid ${(e.vars||e).palette[r].light}`,[`& .${Iy.icon}`]:e.vars?{color:e.vars.palette.Alert[`${r}IconColor`]}:{color:e.palette[r].main}}})),...Object.entries(e.palette).filter(([,r])=>r.main&&r.dark).map(([r])=>({props:{colorSeverity:r,variant:"filled"},style:E({fontWeight:e.typography.fontWeightMedium},e.vars?{color:e.vars.palette.Alert[`${r}FilledColor`],backgroundColor:e.vars.palette.Alert[`${r}FilledBg`]}:{backgroundColor:e.palette.mode==="dark"?e.palette[r].dark:e.palette[r].main,color:e.palette.getContrastText(e.palette[r].main)})}))]})}),wM=V("div",{name:"MuiAlert",slot:"Icon",overridesResolver:(e,t)=>t.icon})({marginRight:12,padding:"7px 0",display:"flex",fontSize:22,opacity:.9}),SM=V("div",{name:"MuiAlert",slot:"Message",overridesResolver:(e,t)=>t.message})({padding:"8px 0",minWidth:0,overflow:"auto"}),Fy=V("div",{name:"MuiAlert",slot:"Action",overridesResolver:(e,t)=>t.action})({display:"flex",alignItems:"flex-start",padding:"4px 0 0 16px",marginLeft:"auto",marginRight:-8}),Dy={success:S.jsx(fM,{fontSize:"inherit"}),warning:S.jsx(pM,{fontSize:"inherit"}),error:S.jsx(hM,{fontSize:"inherit"}),info:S.jsx(mM,{fontSize:"inherit"})},CM=b.forwardRef(function(t,n){const r=yM({props:t,name:"MuiAlert"}),{action:o,children:i,className:a,closeText:s="Close",color:l,components:u={},componentsProps:c={},icon:d,iconMapping:f=Dy,onClose:g,role:p="alert",severity:h="success",slotProps:C={},slots:m={},variant:y="standard"}=r,v=G(r,vM),w=E({},r,{color:l,severity:h,variant:y,colorSeverity:l||h}),R=xM(w),P={slots:E({closeButton:u.CloseButton,closeIcon:u.CloseIcon},m),slotProps:E({},c,C)},[x,k]=Kp("closeButton",{elementType:Nn,externalForwardedProps:P,ownerState:w}),[M,T]=Kp("closeIcon",{elementType:gM,externalForwardedProps:P,ownerState:w});return S.jsxs(bM,E({role:p,elevation:0,ownerState:w,className:Y(R.root,a),ref:n},v,{children:[d!==!1?S.jsx(wM,{ownerState:w,className:R.icon,children:d||f[h]||Dy[h]}):null,S.jsx(SM,{ownerState:w,className:R.message,children:i}),o!=null?S.jsx(Fy,{ownerState:w,className:R.action,children:o}):null,o==null&&g?S.jsx(Fy,{ownerState:w,className:R.action,children:S.jsx(x,E({size:"small","aria-label":s,title:s,color:"inherit",onClick:g},k,{children:S.jsx(M,E({fontSize:"small"},T))}))}):null]}))});function EM(e){return ve("MuiTypography",e)}fe("MuiTypography",["root","h1","h2","h3","h4","h5","h6","subtitle1","subtitle2","body1","body2","inherit","button","caption","overline","alignLeft","alignRight","alignCenter","alignJustify","noWrap","gutterBottom","paragraph"]);const RM=["align","className","component","gutterBottom","noWrap","paragraph","variant","variantMapping"],PM=e=>{const{align:t,gutterBottom:n,noWrap:r,paragraph:o,variant:i,classes:a}=e,s={root:["root",i,e.align!=="inherit"&&`align${ne(t)}`,n&&"gutterBottom",r&&"noWrap",o&&"paragraph"]};return ye(s,EM,a)},kM=V("span",{name:"MuiTypography",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,n.variant&&t[n.variant],n.align!=="inherit"&&t[`align${ne(n.align)}`],n.noWrap&&t.noWrap,n.gutterBottom&&t.gutterBottom,n.paragraph&&t.paragraph]}})(({theme:e,ownerState:t})=>E({margin:0},t.variant==="inherit"&&{font:"inherit"},t.variant!=="inherit"&&e.typography[t.variant],t.align!=="inherit"&&{textAlign:t.align},t.noWrap&&{overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap"},t.gutterBottom&&{marginBottom:"0.35em"},t.paragraph&&{marginBottom:16})),zy={h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",subtitle1:"h6",subtitle2:"h6",body1:"p",body2:"p",inherit:"p"},TM={primary:"primary.main",textPrimary:"text.primary",secondary:"secondary.main",textSecondary:"text.secondary",error:"error.main"},$M=e=>TM[e]||e,An=b.forwardRef(function(t,n){const r=be({props:t,name:"MuiTypography"}),o=$M(r.color),i=cl(E({},r,{color:o})),{align:a="inherit",className:s,component:l,gutterBottom:u=!1,noWrap:c=!1,paragraph:d=!1,variant:f="body1",variantMapping:g=zy}=i,p=G(i,RM),h=E({},i,{align:a,color:o,className:s,component:l,gutterBottom:u,noWrap:c,paragraph:d,variant:f,variantMapping:g}),C=l||(d?"p":g[f]||zy[f])||"span",m=PM(h);return S.jsx(kM,E({as:C,ref:n,ownerState:h,className:Y(m.root,s)},p))}),$w="base";function OM(e){return`${$w}--${e}`}function MM(e,t){return`${$w}-${e}-${t}`}function Ow(e,t){const n=ow[t];return n?OM(n):MM(e,t)}function _M(e,t){const n={};return t.forEach(r=>{n[r]=Ow(e,r)}),n}const jM=["input","select","textarea","a[href]","button","[tabindex]","audio[controls]","video[controls]",'[contenteditable]:not([contenteditable="false"])'].join(",");function NM(e){const t=parseInt(e.getAttribute("tabindex")||"",10);return Number.isNaN(t)?e.contentEditable==="true"||(e.nodeName==="AUDIO"||e.nodeName==="VIDEO"||e.nodeName==="DETAILS")&&e.getAttribute("tabindex")===null?0:e.tabIndex:t}function AM(e){if(e.tagName!=="INPUT"||e.type!=="radio"||!e.name)return!1;const t=r=>e.ownerDocument.querySelector(`input[type="radio"]${r}`);let n=t(`[name="${e.name}"]:checked`);return n||(n=t(`[name="${e.name}"]`)),n!==e}function LM(e){return!(e.disabled||e.tagName==="INPUT"&&e.type==="hidden"||AM(e))}function IM(e){const t=[],n=[];return Array.from(e.querySelectorAll(jM)).forEach((r,o)=>{const i=NM(r);i===-1||!LM(r)||(i===0?t.push(r):n.push({documentOrder:o,tabIndex:i,node:r}))}),n.sort((r,o)=>r.tabIndex===o.tabIndex?r.documentOrder-o.documentOrder:r.tabIndex-o.tabIndex).map(r=>r.node).concat(t)}function FM(){return!0}function DM(e){const{children:t,disableAutoFocus:n=!1,disableEnforceFocus:r=!1,disableRestoreFocus:o=!1,getTabbable:i=IM,isEnabled:a=FM,open:s}=e,l=b.useRef(!1),u=b.useRef(null),c=b.useRef(null),d=b.useRef(null),f=b.useRef(null),g=b.useRef(!1),p=b.useRef(null),h=mt(t.ref,p),C=b.useRef(null);b.useEffect(()=>{!s||!p.current||(g.current=!n)},[n,s]),b.useEffect(()=>{if(!s||!p.current)return;const v=Ht(p.current);return p.current.contains(v.activeElement)||(p.current.hasAttribute("tabIndex")||p.current.setAttribute("tabIndex","-1"),g.current&&p.current.focus()),()=>{o||(d.current&&d.current.focus&&(l.current=!0,d.current.focus()),d.current=null)}},[s]),b.useEffect(()=>{if(!s||!p.current)return;const v=Ht(p.current),w=x=>{C.current=x,!(r||!a()||x.key!=="Tab")&&v.activeElement===p.current&&x.shiftKey&&(l.current=!0,c.current&&c.current.focus())},R=()=>{const x=p.current;if(x===null)return;if(!v.hasFocus()||!a()||l.current){l.current=!1;return}if(x.contains(v.activeElement)||r&&v.activeElement!==u.current&&v.activeElement!==c.current)return;if(v.activeElement!==f.current)f.current=null;else if(f.current!==null)return;if(!g.current)return;let k=[];if((v.activeElement===u.current||v.activeElement===c.current)&&(k=i(p.current)),k.length>0){var M,T;const j=!!((M=C.current)!=null&&M.shiftKey&&((T=C.current)==null?void 0:T.key)==="Tab"),L=k[0],N=k[k.length-1];typeof L!="string"&&typeof N!="string"&&(j?N.focus():L.focus())}else x.focus()};v.addEventListener("focusin",R),v.addEventListener("keydown",w,!0);const P=setInterval(()=>{v.activeElement&&v.activeElement.tagName==="BODY"&&R()},50);return()=>{clearInterval(P),v.removeEventListener("focusin",R),v.removeEventListener("keydown",w,!0)}},[n,r,o,a,s,i]);const m=v=>{d.current===null&&(d.current=v.relatedTarget),g.current=!0,f.current=v.target;const w=t.props.onFocus;w&&w(v)},y=v=>{d.current===null&&(d.current=v.relatedTarget),g.current=!0};return S.jsxs(b.Fragment,{children:[S.jsx("div",{tabIndex:s?0:-1,onFocus:y,ref:u,"data-testid":"sentinelStart"}),b.cloneElement(t,{ref:h,onFocus:m}),S.jsx("div",{tabIndex:s?0:-1,onFocus:y,ref:c,"data-testid":"sentinelEnd"})]})}function zM(e){return typeof e=="function"?e():e}const Mw=b.forwardRef(function(t,n){const{children:r,container:o,disablePortal:i=!1}=t,[a,s]=b.useState(null),l=mt(b.isValidElement(r)?r.ref:null,n);if(ir(()=>{i||s(zM(o)||document.body)},[o,i]),ir(()=>{if(a&&!i)return ec(n,a),()=>{ec(n,null)}},[n,a,i]),i){if(b.isValidElement(r)){const u={ref:l};return b.cloneElement(r,u)}return S.jsx(b.Fragment,{children:r})}return S.jsx(b.Fragment,{children:a&&Mc.createPortal(r,a)})});function BM(e){const t=Ht(e);return t.body===e?ho(e).innerWidth>t.documentElement.clientWidth:e.scrollHeight>e.clientHeight}function ds(e,t){t?e.setAttribute("aria-hidden","true"):e.removeAttribute("aria-hidden")}function By(e){return parseInt(ho(e).getComputedStyle(e).paddingRight,10)||0}function UM(e){const n=["TEMPLATE","SCRIPT","STYLE","LINK","MAP","META","NOSCRIPT","PICTURE","COL","COLGROUP","PARAM","SLOT","SOURCE","TRACK"].indexOf(e.tagName)!==-1,r=e.tagName==="INPUT"&&e.getAttribute("type")==="hidden";return n||r}function Uy(e,t,n,r,o){const i=[t,n,...r];[].forEach.call(e.children,a=>{const s=i.indexOf(a)===-1,l=!UM(a);s&&l&&ds(a,o)})}function yf(e,t){let n=-1;return e.some((r,o)=>t(r)?(n=o,!0):!1),n}function WM(e,t){const n=[],r=e.container;if(!t.disableScrollLock){if(BM(r)){const a=cw(Ht(r));n.push({value:r.style.paddingRight,property:"padding-right",el:r}),r.style.paddingRight=`${By(r)+a}px`;const s=Ht(r).querySelectorAll(".mui-fixed");[].forEach.call(s,l=>{n.push({value:l.style.paddingRight,property:"padding-right",el:l}),l.style.paddingRight=`${By(l)+a}px`})}let i;if(r.parentNode instanceof DocumentFragment)i=Ht(r).body;else{const a=r.parentElement,s=ho(r);i=(a==null?void 0:a.nodeName)==="HTML"&&s.getComputedStyle(a).overflowY==="scroll"?a:r}n.push({value:i.style.overflow,property:"overflow",el:i},{value:i.style.overflowX,property:"overflow-x",el:i},{value:i.style.overflowY,property:"overflow-y",el:i}),i.style.overflow="hidden"}return()=>{n.forEach(({value:i,el:a,property:s})=>{i?a.style.setProperty(s,i):a.style.removeProperty(s)})}}function HM(e){const t=[];return[].forEach.call(e.children,n=>{n.getAttribute("aria-hidden")==="true"&&t.push(n)}),t}class VM{constructor(){this.containers=void 0,this.modals=void 0,this.modals=[],this.containers=[]}add(t,n){let r=this.modals.indexOf(t);if(r!==-1)return r;r=this.modals.length,this.modals.push(t),t.modalRef&&ds(t.modalRef,!1);const o=HM(n);Uy(n,t.mount,t.modalRef,o,!0);const i=yf(this.containers,a=>a.container===n);return i!==-1?(this.containers[i].modals.push(t),r):(this.containers.push({modals:[t],container:n,restore:null,hiddenSiblings:o}),r)}mount(t,n){const r=yf(this.containers,i=>i.modals.indexOf(t)!==-1),o=this.containers[r];o.restore||(o.restore=WM(o,n))}remove(t,n=!0){const r=this.modals.indexOf(t);if(r===-1)return r;const o=yf(this.containers,a=>a.modals.indexOf(t)!==-1),i=this.containers[o];if(i.modals.splice(i.modals.indexOf(t),1),this.modals.splice(r,1),i.modals.length===0)i.restore&&i.restore(),t.modalRef&&ds(t.modalRef,n),Uy(i.container,t.mount,t.modalRef,i.hiddenSiblings,!1),this.containers.splice(o,1);else{const a=i.modals[i.modals.length-1];a.modalRef&&ds(a.modalRef,!1)}return r}isTopModal(t){return this.modals.length>0&&this.modals[this.modals.length-1]===t}}function KM(e){return typeof e=="function"?e():e}function qM(e){return e?e.props.hasOwnProperty("in"):!1}const GM=new VM;function XM(e){const{container:t,disableEscapeKeyDown:n=!1,disableScrollLock:r=!1,manager:o=GM,closeAfterTransition:i=!1,onTransitionEnter:a,onTransitionExited:s,children:l,onClose:u,open:c,rootRef:d}=e,f=b.useRef({}),g=b.useRef(null),p=b.useRef(null),h=mt(p,d),[C,m]=b.useState(!c),y=qM(l);let v=!0;(e["aria-hidden"]==="false"||e["aria-hidden"]===!1)&&(v=!1);const w=()=>Ht(g.current),R=()=>(f.current.modalRef=p.current,f.current.mount=g.current,f.current),P=()=>{o.mount(R(),{disableScrollLock:r}),p.current&&(p.current.scrollTop=0)},x=Pr(()=>{const z=KM(t)||w().body;o.add(R(),z),p.current&&P()}),k=b.useCallback(()=>o.isTopModal(R()),[o]),M=Pr(z=>{g.current=z,z&&(c&&k()?P():p.current&&ds(p.current,v))}),T=b.useCallback(()=>{o.remove(R(),v)},[v,o]);b.useEffect(()=>()=>{T()},[T]),b.useEffect(()=>{c?x():(!y||!i)&&T()},[c,T,y,i,x]);const j=z=>U=>{var O;(O=z.onKeyDown)==null||O.call(z,U),!(U.key!=="Escape"||U.which===229||!k())&&(n||(U.stopPropagation(),u&&u(U,"escapeKeyDown")))},L=z=>U=>{var O;(O=z.onClick)==null||O.call(z,U),U.target===U.currentTarget&&u&&u(U,"backdropClick")};return{getRootProps:(z={})=>{const U=Pw(e);delete U.onTransitionEnter,delete U.onTransitionExited;const O=E({},U,z);return E({role:"presentation"},O,{onKeyDown:j(O),ref:h})},getBackdropProps:(z={})=>{const U=z;return E({"aria-hidden":!0},U,{onClick:L(U),open:c})},getTransitionProps:()=>{const z=()=>{m(!1),a&&a()},U=()=>{m(!0),s&&s(),i&&T()};return{onEnter:zp(z,l==null?void 0:l.props.onEnter),onExited:zp(U,l==null?void 0:l.props.onExited)}},rootRef:h,portalRef:M,isTopModal:k,exited:C,hasTransition:y}}var sn="top",Un="bottom",Wn="right",ln="left",Km="auto",hl=[sn,Un,Wn,ln],ta="start",Ws="end",QM="clippingParents",_w="viewport",Fa="popper",YM="reference",Wy=hl.reduce(function(e,t){return e.concat([t+"-"+ta,t+"-"+Ws])},[]),jw=[].concat(hl,[Km]).reduce(function(e,t){return e.concat([t,t+"-"+ta,t+"-"+Ws])},[]),JM="beforeRead",ZM="read",e_="afterRead",t_="beforeMain",n_="main",r_="afterMain",o_="beforeWrite",i_="write",a_="afterWrite",s_=[JM,ZM,e_,t_,n_,r_,o_,i_,a_];function br(e){return e?(e.nodeName||"").toLowerCase():null}function xn(e){if(e==null)return window;if(e.toString()!=="[object Window]"){var t=e.ownerDocument;return t&&t.defaultView||window}return e}function Zo(e){var t=xn(e).Element;return e instanceof t||e instanceof Element}function In(e){var t=xn(e).HTMLElement;return e instanceof t||e instanceof HTMLElement}function qm(e){if(typeof ShadowRoot>"u")return!1;var t=xn(e).ShadowRoot;return e instanceof t||e instanceof ShadowRoot}function l_(e){var t=e.state;Object.keys(t.elements).forEach(function(n){var r=t.styles[n]||{},o=t.attributes[n]||{},i=t.elements[n];!In(i)||!br(i)||(Object.assign(i.style,r),Object.keys(o).forEach(function(a){var s=o[a];s===!1?i.removeAttribute(a):i.setAttribute(a,s===!0?"":s)}))})}function u_(e){var t=e.state,n={popper:{position:t.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(t.elements.popper.style,n.popper),t.styles=n,t.elements.arrow&&Object.assign(t.elements.arrow.style,n.arrow),function(){Object.keys(t.elements).forEach(function(r){var o=t.elements[r],i=t.attributes[r]||{},a=Object.keys(t.styles.hasOwnProperty(r)?t.styles[r]:n[r]),s=a.reduce(function(l,u){return l[u]="",l},{});!In(o)||!br(o)||(Object.assign(o.style,s),Object.keys(i).forEach(function(l){o.removeAttribute(l)}))})}}const c_={name:"applyStyles",enabled:!0,phase:"write",fn:l_,effect:u_,requires:["computeStyles"]};function yr(e){return e.split("-")[0]}var zo=Math.max,ic=Math.min,na=Math.round;function Gp(){var e=navigator.userAgentData;return e!=null&&e.brands&&Array.isArray(e.brands)?e.brands.map(function(t){return t.brand+"/"+t.version}).join(" "):navigator.userAgent}function Nw(){return!/^((?!chrome|android).)*safari/i.test(Gp())}function ra(e,t,n){t===void 0&&(t=!1),n===void 0&&(n=!1);var r=e.getBoundingClientRect(),o=1,i=1;t&&In(e)&&(o=e.offsetWidth>0&&na(r.width)/e.offsetWidth||1,i=e.offsetHeight>0&&na(r.height)/e.offsetHeight||1);var a=Zo(e)?xn(e):window,s=a.visualViewport,l=!Nw()&&n,u=(r.left+(l&&s?s.offsetLeft:0))/o,c=(r.top+(l&&s?s.offsetTop:0))/i,d=r.width/o,f=r.height/i;return{width:d,height:f,top:c,right:u+d,bottom:c+f,left:u,x:u,y:c}}function Gm(e){var t=ra(e),n=e.offsetWidth,r=e.offsetHeight;return Math.abs(t.width-n)<=1&&(n=t.width),Math.abs(t.height-r)<=1&&(r=t.height),{x:e.offsetLeft,y:e.offsetTop,width:n,height:r}}function Aw(e,t){var n=t.getRootNode&&t.getRootNode();if(e.contains(t))return!0;if(n&&qm(n)){var r=t;do{if(r&&e.isSameNode(r))return!0;r=r.parentNode||r.host}while(r)}return!1}function jr(e){return xn(e).getComputedStyle(e)}function d_(e){return["table","td","th"].indexOf(br(e))>=0}function So(e){return((Zo(e)?e.ownerDocument:e.document)||window.document).documentElement}function vd(e){return br(e)==="html"?e:e.assignedSlot||e.parentNode||(qm(e)?e.host:null)||So(e)}function Hy(e){return!In(e)||jr(e).position==="fixed"?null:e.offsetParent}function f_(e){var t=/firefox/i.test(Gp()),n=/Trident/i.test(Gp());if(n&&In(e)){var r=jr(e);if(r.position==="fixed")return null}var o=vd(e);for(qm(o)&&(o=o.host);In(o)&&["html","body"].indexOf(br(o))<0;){var i=jr(o);if(i.transform!=="none"||i.perspective!=="none"||i.contain==="paint"||["transform","perspective"].indexOf(i.willChange)!==-1||t&&i.willChange==="filter"||t&&i.filter&&i.filter!=="none")return o;o=o.parentNode}return null}function ml(e){for(var t=xn(e),n=Hy(e);n&&d_(n)&&jr(n).position==="static";)n=Hy(n);return n&&(br(n)==="html"||br(n)==="body"&&jr(n).position==="static")?t:n||f_(e)||t}function Xm(e){return["top","bottom"].indexOf(e)>=0?"x":"y"}function fs(e,t,n){return zo(e,ic(t,n))}function p_(e,t,n){var r=fs(e,t,n);return r>n?n:r}function Lw(){return{top:0,right:0,bottom:0,left:0}}function Iw(e){return Object.assign({},Lw(),e)}function Fw(e,t){return t.reduce(function(n,r){return n[r]=e,n},{})}var h_=function(t,n){return t=typeof t=="function"?t(Object.assign({},n.rects,{placement:n.placement})):t,Iw(typeof t!="number"?t:Fw(t,hl))};function m_(e){var t,n=e.state,r=e.name,o=e.options,i=n.elements.arrow,a=n.modifiersData.popperOffsets,s=yr(n.placement),l=Xm(s),u=[ln,Wn].indexOf(s)>=0,c=u?"height":"width";if(!(!i||!a)){var d=h_(o.padding,n),f=Gm(i),g=l==="y"?sn:ln,p=l==="y"?Un:Wn,h=n.rects.reference[c]+n.rects.reference[l]-a[l]-n.rects.popper[c],C=a[l]-n.rects.reference[l],m=ml(i),y=m?l==="y"?m.clientHeight||0:m.clientWidth||0:0,v=h/2-C/2,w=d[g],R=y-f[c]-d[p],P=y/2-f[c]/2+v,x=fs(w,P,R),k=l;n.modifiersData[r]=(t={},t[k]=x,t.centerOffset=x-P,t)}}function g_(e){var t=e.state,n=e.options,r=n.element,o=r===void 0?"[data-popper-arrow]":r;o!=null&&(typeof o=="string"&&(o=t.elements.popper.querySelector(o),!o)||Aw(t.elements.popper,o)&&(t.elements.arrow=o))}const v_={name:"arrow",enabled:!0,phase:"main",fn:m_,effect:g_,requires:["popperOffsets"],requiresIfExists:["preventOverflow"]};function oa(e){return e.split("-")[1]}var y_={top:"auto",right:"auto",bottom:"auto",left:"auto"};function x_(e,t){var n=e.x,r=e.y,o=t.devicePixelRatio||1;return{x:na(n*o)/o||0,y:na(r*o)/o||0}}function Vy(e){var t,n=e.popper,r=e.popperRect,o=e.placement,i=e.variation,a=e.offsets,s=e.position,l=e.gpuAcceleration,u=e.adaptive,c=e.roundOffsets,d=e.isFixed,f=a.x,g=f===void 0?0:f,p=a.y,h=p===void 0?0:p,C=typeof c=="function"?c({x:g,y:h}):{x:g,y:h};g=C.x,h=C.y;var m=a.hasOwnProperty("x"),y=a.hasOwnProperty("y"),v=ln,w=sn,R=window;if(u){var P=ml(n),x="clientHeight",k="clientWidth";if(P===xn(n)&&(P=So(n),jr(P).position!=="static"&&s==="absolute"&&(x="scrollHeight",k="scrollWidth")),P=P,o===sn||(o===ln||o===Wn)&&i===Ws){w=Un;var M=d&&P===R&&R.visualViewport?R.visualViewport.height:P[x];h-=M-r.height,h*=l?1:-1}if(o===ln||(o===sn||o===Un)&&i===Ws){v=Wn;var T=d&&P===R&&R.visualViewport?R.visualViewport.width:P[k];g-=T-r.width,g*=l?1:-1}}var j=Object.assign({position:s},u&&y_),L=c===!0?x_({x:g,y:h},xn(n)):{x:g,y:h};if(g=L.x,h=L.y,l){var N;return Object.assign({},j,(N={},N[w]=y?"0":"",N[v]=m?"0":"",N.transform=(R.devicePixelRatio||1)<=1?"translate("+g+"px, "+h+"px)":"translate3d("+g+"px, "+h+"px, 0)",N))}return Object.assign({},j,(t={},t[w]=y?h+"px":"",t[v]=m?g+"px":"",t.transform="",t))}function b_(e){var t=e.state,n=e.options,r=n.gpuAcceleration,o=r===void 0?!0:r,i=n.adaptive,a=i===void 0?!0:i,s=n.roundOffsets,l=s===void 0?!0:s,u={placement:yr(t.placement),variation:oa(t.placement),popper:t.elements.popper,popperRect:t.rects.popper,gpuAcceleration:o,isFixed:t.options.strategy==="fixed"};t.modifiersData.popperOffsets!=null&&(t.styles.popper=Object.assign({},t.styles.popper,Vy(Object.assign({},u,{offsets:t.modifiersData.popperOffsets,position:t.options.strategy,adaptive:a,roundOffsets:l})))),t.modifiersData.arrow!=null&&(t.styles.arrow=Object.assign({},t.styles.arrow,Vy(Object.assign({},u,{offsets:t.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:l})))),t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-placement":t.placement})}const w_={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:b_,data:{}};var Zl={passive:!0};function S_(e){var t=e.state,n=e.instance,r=e.options,o=r.scroll,i=o===void 0?!0:o,a=r.resize,s=a===void 0?!0:a,l=xn(t.elements.popper),u=[].concat(t.scrollParents.reference,t.scrollParents.popper);return i&&u.forEach(function(c){c.addEventListener("scroll",n.update,Zl)}),s&&l.addEventListener("resize",n.update,Zl),function(){i&&u.forEach(function(c){c.removeEventListener("scroll",n.update,Zl)}),s&&l.removeEventListener("resize",n.update,Zl)}}const C_={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:S_,data:{}};var E_={left:"right",right:"left",bottom:"top",top:"bottom"};function Cu(e){return e.replace(/left|right|bottom|top/g,function(t){return E_[t]})}var R_={start:"end",end:"start"};function Ky(e){return e.replace(/start|end/g,function(t){return R_[t]})}function Qm(e){var t=xn(e),n=t.pageXOffset,r=t.pageYOffset;return{scrollLeft:n,scrollTop:r}}function Ym(e){return ra(So(e)).left+Qm(e).scrollLeft}function P_(e,t){var n=xn(e),r=So(e),o=n.visualViewport,i=r.clientWidth,a=r.clientHeight,s=0,l=0;if(o){i=o.width,a=o.height;var u=Nw();(u||!u&&t==="fixed")&&(s=o.offsetLeft,l=o.offsetTop)}return{width:i,height:a,x:s+Ym(e),y:l}}function k_(e){var t,n=So(e),r=Qm(e),o=(t=e.ownerDocument)==null?void 0:t.body,i=zo(n.scrollWidth,n.clientWidth,o?o.scrollWidth:0,o?o.clientWidth:0),a=zo(n.scrollHeight,n.clientHeight,o?o.scrollHeight:0,o?o.clientHeight:0),s=-r.scrollLeft+Ym(e),l=-r.scrollTop;return jr(o||n).direction==="rtl"&&(s+=zo(n.clientWidth,o?o.clientWidth:0)-i),{width:i,height:a,x:s,y:l}}function Jm(e){var t=jr(e),n=t.overflow,r=t.overflowX,o=t.overflowY;return/auto|scroll|overlay|hidden/.test(n+o+r)}function Dw(e){return["html","body","#document"].indexOf(br(e))>=0?e.ownerDocument.body:In(e)&&Jm(e)?e:Dw(vd(e))}function ps(e,t){var n;t===void 0&&(t=[]);var r=Dw(e),o=r===((n=e.ownerDocument)==null?void 0:n.body),i=xn(r),a=o?[i].concat(i.visualViewport||[],Jm(r)?r:[]):r,s=t.concat(a);return o?s:s.concat(ps(vd(a)))}function Xp(e){return Object.assign({},e,{left:e.x,top:e.y,right:e.x+e.width,bottom:e.y+e.height})}function T_(e,t){var n=ra(e,!1,t==="fixed");return n.top=n.top+e.clientTop,n.left=n.left+e.clientLeft,n.bottom=n.top+e.clientHeight,n.right=n.left+e.clientWidth,n.width=e.clientWidth,n.height=e.clientHeight,n.x=n.left,n.y=n.top,n}function qy(e,t,n){return t===_w?Xp(P_(e,n)):Zo(t)?T_(t,n):Xp(k_(So(e)))}function $_(e){var t=ps(vd(e)),n=["absolute","fixed"].indexOf(jr(e).position)>=0,r=n&&In(e)?ml(e):e;return Zo(r)?t.filter(function(o){return Zo(o)&&Aw(o,r)&&br(o)!=="body"}):[]}function O_(e,t,n,r){var o=t==="clippingParents"?$_(e):[].concat(t),i=[].concat(o,[n]),a=i[0],s=i.reduce(function(l,u){var c=qy(e,u,r);return l.top=zo(c.top,l.top),l.right=ic(c.right,l.right),l.bottom=ic(c.bottom,l.bottom),l.left=zo(c.left,l.left),l},qy(e,a,r));return s.width=s.right-s.left,s.height=s.bottom-s.top,s.x=s.left,s.y=s.top,s}function zw(e){var t=e.reference,n=e.element,r=e.placement,o=r?yr(r):null,i=r?oa(r):null,a=t.x+t.width/2-n.width/2,s=t.y+t.height/2-n.height/2,l;switch(o){case sn:l={x:a,y:t.y-n.height};break;case Un:l={x:a,y:t.y+t.height};break;case Wn:l={x:t.x+t.width,y:s};break;case ln:l={x:t.x-n.width,y:s};break;default:l={x:t.x,y:t.y}}var u=o?Xm(o):null;if(u!=null){var c=u==="y"?"height":"width";switch(i){case ta:l[u]=l[u]-(t[c]/2-n[c]/2);break;case Ws:l[u]=l[u]+(t[c]/2-n[c]/2);break}}return l}function Hs(e,t){t===void 0&&(t={});var n=t,r=n.placement,o=r===void 0?e.placement:r,i=n.strategy,a=i===void 0?e.strategy:i,s=n.boundary,l=s===void 0?QM:s,u=n.rootBoundary,c=u===void 0?_w:u,d=n.elementContext,f=d===void 0?Fa:d,g=n.altBoundary,p=g===void 0?!1:g,h=n.padding,C=h===void 0?0:h,m=Iw(typeof C!="number"?C:Fw(C,hl)),y=f===Fa?YM:Fa,v=e.rects.popper,w=e.elements[p?y:f],R=O_(Zo(w)?w:w.contextElement||So(e.elements.popper),l,c,a),P=ra(e.elements.reference),x=zw({reference:P,element:v,strategy:"absolute",placement:o}),k=Xp(Object.assign({},v,x)),M=f===Fa?k:P,T={top:R.top-M.top+m.top,bottom:M.bottom-R.bottom+m.bottom,left:R.left-M.left+m.left,right:M.right-R.right+m.right},j=e.modifiersData.offset;if(f===Fa&&j){var L=j[o];Object.keys(T).forEach(function(N){var F=[Wn,Un].indexOf(N)>=0?1:-1,B=[sn,Un].indexOf(N)>=0?"y":"x";T[N]+=L[B]*F})}return T}function M_(e,t){t===void 0&&(t={});var n=t,r=n.placement,o=n.boundary,i=n.rootBoundary,a=n.padding,s=n.flipVariations,l=n.allowedAutoPlacements,u=l===void 0?jw:l,c=oa(r),d=c?s?Wy:Wy.filter(function(p){return oa(p)===c}):hl,f=d.filter(function(p){return u.indexOf(p)>=0});f.length===0&&(f=d);var g=f.reduce(function(p,h){return p[h]=Hs(e,{placement:h,boundary:o,rootBoundary:i,padding:a})[yr(h)],p},{});return Object.keys(g).sort(function(p,h){return g[p]-g[h]})}function __(e){if(yr(e)===Km)return[];var t=Cu(e);return[Ky(e),t,Ky(t)]}function j_(e){var t=e.state,n=e.options,r=e.name;if(!t.modifiersData[r]._skip){for(var o=n.mainAxis,i=o===void 0?!0:o,a=n.altAxis,s=a===void 0?!0:a,l=n.fallbackPlacements,u=n.padding,c=n.boundary,d=n.rootBoundary,f=n.altBoundary,g=n.flipVariations,p=g===void 0?!0:g,h=n.allowedAutoPlacements,C=t.options.placement,m=yr(C),y=m===C,v=l||(y||!p?[Cu(C)]:__(C)),w=[C].concat(v).reduce(function(Z,ae){return Z.concat(yr(ae)===Km?M_(t,{placement:ae,boundary:c,rootBoundary:d,padding:u,flipVariations:p,allowedAutoPlacements:h}):ae)},[]),R=t.rects.reference,P=t.rects.popper,x=new Map,k=!0,M=w[0],T=0;T<w.length;T++){var j=w[T],L=yr(j),N=oa(j)===ta,F=[sn,Un].indexOf(L)>=0,B=F?"width":"height",z=Hs(t,{placement:j,boundary:c,rootBoundary:d,altBoundary:f,padding:u}),U=F?N?Wn:ln:N?Un:sn;R[B]>P[B]&&(U=Cu(U));var O=Cu(U),D=[];if(i&&D.push(z[L]<=0),s&&D.push(z[U]<=0,z[O]<=0),D.every(function(Z){return Z})){M=j,k=!1;break}x.set(j,D)}if(k)for(var q=p?3:1,ie=function(ae){var K=w.find(function(le){var pe=x.get(le);if(pe)return pe.slice(0,ae).every(function(de){return de})});if(K)return M=K,"break"},ee=q;ee>0;ee--){var me=ie(ee);if(me==="break")break}t.placement!==M&&(t.modifiersData[r]._skip=!0,t.placement=M,t.reset=!0)}}const N_={name:"flip",enabled:!0,phase:"main",fn:j_,requiresIfExists:["offset"],data:{_skip:!1}};function Gy(e,t,n){return n===void 0&&(n={x:0,y:0}),{top:e.top-t.height-n.y,right:e.right-t.width+n.x,bottom:e.bottom-t.height+n.y,left:e.left-t.width-n.x}}function Xy(e){return[sn,Wn,Un,ln].some(function(t){return e[t]>=0})}function A_(e){var t=e.state,n=e.name,r=t.rects.reference,o=t.rects.popper,i=t.modifiersData.preventOverflow,a=Hs(t,{elementContext:"reference"}),s=Hs(t,{altBoundary:!0}),l=Gy(a,r),u=Gy(s,o,i),c=Xy(l),d=Xy(u);t.modifiersData[n]={referenceClippingOffsets:l,popperEscapeOffsets:u,isReferenceHidden:c,hasPopperEscaped:d},t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-reference-hidden":c,"data-popper-escaped":d})}const L_={name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:A_};function I_(e,t,n){var r=yr(e),o=[ln,sn].indexOf(r)>=0?-1:1,i=typeof n=="function"?n(Object.assign({},t,{placement:e})):n,a=i[0],s=i[1];return a=a||0,s=(s||0)*o,[ln,Wn].indexOf(r)>=0?{x:s,y:a}:{x:a,y:s}}function F_(e){var t=e.state,n=e.options,r=e.name,o=n.offset,i=o===void 0?[0,0]:o,a=jw.reduce(function(c,d){return c[d]=I_(d,t.rects,i),c},{}),s=a[t.placement],l=s.x,u=s.y;t.modifiersData.popperOffsets!=null&&(t.modifiersData.popperOffsets.x+=l,t.modifiersData.popperOffsets.y+=u),t.modifiersData[r]=a}const D_={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:F_};function z_(e){var t=e.state,n=e.name;t.modifiersData[n]=zw({reference:t.rects.reference,element:t.rects.popper,strategy:"absolute",placement:t.placement})}const B_={name:"popperOffsets",enabled:!0,phase:"read",fn:z_,data:{}};function U_(e){return e==="x"?"y":"x"}function W_(e){var t=e.state,n=e.options,r=e.name,o=n.mainAxis,i=o===void 0?!0:o,a=n.altAxis,s=a===void 0?!1:a,l=n.boundary,u=n.rootBoundary,c=n.altBoundary,d=n.padding,f=n.tether,g=f===void 0?!0:f,p=n.tetherOffset,h=p===void 0?0:p,C=Hs(t,{boundary:l,rootBoundary:u,padding:d,altBoundary:c}),m=yr(t.placement),y=oa(t.placement),v=!y,w=Xm(m),R=U_(w),P=t.modifiersData.popperOffsets,x=t.rects.reference,k=t.rects.popper,M=typeof h=="function"?h(Object.assign({},t.rects,{placement:t.placement})):h,T=typeof M=="number"?{mainAxis:M,altAxis:M}:Object.assign({mainAxis:0,altAxis:0},M),j=t.modifiersData.offset?t.modifiersData.offset[t.placement]:null,L={x:0,y:0};if(P){if(i){var N,F=w==="y"?sn:ln,B=w==="y"?Un:Wn,z=w==="y"?"height":"width",U=P[w],O=U+C[F],D=U-C[B],q=g?-k[z]/2:0,ie=y===ta?x[z]:k[z],ee=y===ta?-k[z]:-x[z],me=t.elements.arrow,Z=g&&me?Gm(me):{width:0,height:0},ae=t.modifiersData["arrow#persistent"]?t.modifiersData["arrow#persistent"].padding:Lw(),K=ae[F],le=ae[B],pe=fs(0,x[z],Z[z]),de=v?x[z]/2-q-pe-K-T.mainAxis:ie-pe-K-T.mainAxis,De=v?-x[z]/2+q+pe+le+T.mainAxis:ee+pe+le+T.mainAxis,ge=t.elements.arrow&&ml(t.elements.arrow),Se=ge?w==="y"?ge.clientTop||0:ge.clientLeft||0:0,he=(N=j==null?void 0:j[w])!=null?N:0,ke=U+de-he-Se,Ee=U+De-he,it=fs(g?ic(O,ke):O,U,g?zo(D,Ee):D);P[w]=it,L[w]=it-U}if(s){var St,at=w==="x"?sn:ln,Pt=w==="x"?Un:Wn,Ue=P[R],_e=R==="y"?"height":"width",Ze=Ue+C[at],ze=Ue-C[Pt],Te=[sn,ln].indexOf(m)!==-1,ct=(St=j==null?void 0:j[R])!=null?St:0,Ve=Te?Ze:Ue-x[_e]-k[_e]-ct+T.altAxis,dt=Te?Ue+x[_e]+k[_e]-ct-T.altAxis:ze,$e=g&&Te?p_(Ve,Ue,dt):fs(g?Ve:Ze,Ue,g?dt:ze);P[R]=$e,L[R]=$e-Ue}t.modifiersData[r]=L}}const H_={name:"preventOverflow",enabled:!0,phase:"main",fn:W_,requiresIfExists:["offset"]};function V_(e){return{scrollLeft:e.scrollLeft,scrollTop:e.scrollTop}}function K_(e){return e===xn(e)||!In(e)?Qm(e):V_(e)}function q_(e){var t=e.getBoundingClientRect(),n=na(t.width)/e.offsetWidth||1,r=na(t.height)/e.offsetHeight||1;return n!==1||r!==1}function G_(e,t,n){n===void 0&&(n=!1);var r=In(t),o=In(t)&&q_(t),i=So(t),a=ra(e,o,n),s={scrollLeft:0,scrollTop:0},l={x:0,y:0};return(r||!r&&!n)&&((br(t)!=="body"||Jm(i))&&(s=K_(t)),In(t)?(l=ra(t,!0),l.x+=t.clientLeft,l.y+=t.clientTop):i&&(l.x=Ym(i))),{x:a.left+s.scrollLeft-l.x,y:a.top+s.scrollTop-l.y,width:a.width,height:a.height}}function X_(e){var t=new Map,n=new Set,r=[];e.forEach(function(i){t.set(i.name,i)});function o(i){n.add(i.name);var a=[].concat(i.requires||[],i.requiresIfExists||[]);a.forEach(function(s){if(!n.has(s)){var l=t.get(s);l&&o(l)}}),r.push(i)}return e.forEach(function(i){n.has(i.name)||o(i)}),r}function Q_(e){var t=X_(e);return s_.reduce(function(n,r){return n.concat(t.filter(function(o){return o.phase===r}))},[])}function Y_(e){var t;return function(){return t||(t=new Promise(function(n){Promise.resolve().then(function(){t=void 0,n(e())})})),t}}function J_(e){var t=e.reduce(function(n,r){var o=n[r.name];return n[r.name]=o?Object.assign({},o,r,{options:Object.assign({},o.options,r.options),data:Object.assign({},o.data,r.data)}):r,n},{});return Object.keys(t).map(function(n){return t[n]})}var Qy={placement:"bottom",modifiers:[],strategy:"absolute"};function Yy(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return!t.some(function(r){return!(r&&typeof r.getBoundingClientRect=="function")})}function Z_(e){e===void 0&&(e={});var t=e,n=t.defaultModifiers,r=n===void 0?[]:n,o=t.defaultOptions,i=o===void 0?Qy:o;return function(s,l,u){u===void 0&&(u=i);var c={placement:"bottom",orderedModifiers:[],options:Object.assign({},Qy,i),modifiersData:{},elements:{reference:s,popper:l},attributes:{},styles:{}},d=[],f=!1,g={state:c,setOptions:function(m){var y=typeof m=="function"?m(c.options):m;h(),c.options=Object.assign({},i,c.options,y),c.scrollParents={reference:Zo(s)?ps(s):s.contextElement?ps(s.contextElement):[],popper:ps(l)};var v=Q_(J_([].concat(r,c.options.modifiers)));return c.orderedModifiers=v.filter(function(w){return w.enabled}),p(),g.update()},forceUpdate:function(){if(!f){var m=c.elements,y=m.reference,v=m.popper;if(Yy(y,v)){c.rects={reference:G_(y,ml(v),c.options.strategy==="fixed"),popper:Gm(v)},c.reset=!1,c.placement=c.options.placement,c.orderedModifiers.forEach(function(T){return c.modifiersData[T.name]=Object.assign({},T.data)});for(var w=0;w<c.orderedModifiers.length;w++){if(c.reset===!0){c.reset=!1,w=-1;continue}var R=c.orderedModifiers[w],P=R.fn,x=R.options,k=x===void 0?{}:x,M=R.name;typeof P=="function"&&(c=P({state:c,options:k,name:M,instance:g})||c)}}}},update:Y_(function(){return new Promise(function(C){g.forceUpdate(),C(c)})}),destroy:function(){h(),f=!0}};if(!Yy(s,l))return g;g.setOptions(u).then(function(C){!f&&u.onFirstUpdate&&u.onFirstUpdate(C)});function p(){c.orderedModifiers.forEach(function(C){var m=C.name,y=C.options,v=y===void 0?{}:y,w=C.effect;if(typeof w=="function"){var R=w({state:c,name:m,instance:g,options:v}),P=function(){};d.push(R||P)}})}function h(){d.forEach(function(C){return C()}),d=[]}return g}}var ej=[C_,B_,w_,c_,D_,N_,H_,v_,L_],tj=Z_({defaultModifiers:ej});const Bw="Popper";function nj(e){return Ow(Bw,e)}_M(Bw,["root"]);const rj=["anchorEl","children","direction","disablePortal","modifiers","open","placement","popperOptions","popperRef","slotProps","slots","TransitionProps","ownerState"],oj=["anchorEl","children","container","direction","disablePortal","keepMounted","modifiers","open","placement","popperOptions","popperRef","style","transition","slotProps","slots"];function ij(e,t){if(t==="ltr")return e;switch(e){case"bottom-end":return"bottom-start";case"bottom-start":return"bottom-end";case"top-end":return"top-start";case"top-start":return"top-end";default:return e}}function Qp(e){return typeof e=="function"?e():e}function aj(e){return e.nodeType!==void 0}const sj=()=>ye({root:["root"]},w2(nj)),lj={},uj=b.forwardRef(function(t,n){var r;const{anchorEl:o,children:i,direction:a,disablePortal:s,modifiers:l,open:u,placement:c,popperOptions:d,popperRef:f,slotProps:g={},slots:p={},TransitionProps:h}=t,C=G(t,rj),m=b.useRef(null),y=mt(m,n),v=b.useRef(null),w=mt(v,f),R=b.useRef(w);ir(()=>{R.current=w},[w]),b.useImperativeHandle(f,()=>v.current,[]);const P=ij(c,a),[x,k]=b.useState(P),[M,T]=b.useState(Qp(o));b.useEffect(()=>{v.current&&v.current.forceUpdate()}),b.useEffect(()=>{o&&T(Qp(o))},[o]),ir(()=>{if(!M||!u)return;const B=O=>{k(O.placement)};let z=[{name:"preventOverflow",options:{altBoundary:s}},{name:"flip",options:{altBoundary:s}},{name:"onUpdate",enabled:!0,phase:"afterWrite",fn:({state:O})=>{B(O)}}];l!=null&&(z=z.concat(l)),d&&d.modifiers!=null&&(z=z.concat(d.modifiers));const U=tj(M,m.current,E({placement:P},d,{modifiers:z}));return R.current(U),()=>{U.destroy(),R.current(null)}},[M,s,l,u,d,P]);const j={placement:x};h!==null&&(j.TransitionProps=h);const L=sj(),N=(r=p.root)!=null?r:"div",F=Jo({elementType:N,externalSlotProps:g.root,externalForwardedProps:C,additionalProps:{role:"tooltip",ref:y},ownerState:t,className:L.root});return S.jsx(N,E({},F,{children:typeof i=="function"?i(j):i}))}),cj=b.forwardRef(function(t,n){const{anchorEl:r,children:o,container:i,direction:a="ltr",disablePortal:s=!1,keepMounted:l=!1,modifiers:u,open:c,placement:d="bottom",popperOptions:f=lj,popperRef:g,style:p,transition:h=!1,slotProps:C={},slots:m={}}=t,y=G(t,oj),[v,w]=b.useState(!0),R=()=>{w(!1)},P=()=>{w(!0)};if(!l&&!c&&(!h||v))return null;let x;if(i)x=i;else if(r){const T=Qp(r);x=T&&aj(T)?Ht(T).body:Ht(null).body}const k=!c&&l&&(!h||v)?"none":void 0,M=h?{in:c,onEnter:R,onExited:P}:void 0;return S.jsx(Mw,{disablePortal:s,container:x,children:S.jsx(uj,E({anchorEl:r,direction:a,disablePortal:s,modifiers:u,ref:n,open:h?!v:c,placement:d,popperOptions:f,popperRef:g,slotProps:C,slots:m},y,{style:E({position:"fixed",top:0,left:0,display:k},p),TransitionProps:M,children:o}))})}),dj=["onChange","maxRows","minRows","style","value"];function eu(e){return parseInt(e,10)||0}const fj={shadow:{visibility:"hidden",position:"absolute",overflow:"hidden",height:0,top:0,left:0,transform:"translateZ(0)"}};function pj(e){return e==null||Object.keys(e).length===0||e.outerHeightStyle===0&&!e.overflowing}const hj=b.forwardRef(function(t,n){const{onChange:r,maxRows:o,minRows:i=1,style:a,value:s}=t,l=G(t,dj),{current:u}=b.useRef(s!=null),c=b.useRef(null),d=mt(n,c),f=b.useRef(null),g=b.useCallback(()=>{const C=c.current,y=ho(C).getComputedStyle(C);if(y.width==="0px")return{outerHeightStyle:0,overflowing:!1};const v=f.current;v.style.width=y.width,v.value=C.value||t.placeholder||"x",v.value.slice(-1)===`
`&&(v.value+=" ");const w=y.boxSizing,R=eu(y.paddingBottom)+eu(y.paddingTop),P=eu(y.borderBottomWidth)+eu(y.borderTopWidth),x=v.scrollHeight;v.value="x";const k=v.scrollHeight;let M=x;i&&(M=Math.max(Number(i)*k,M)),o&&(M=Math.min(Number(o)*k,M)),M=Math.max(M,k);const T=M+(w==="border-box"?R+P:0),j=Math.abs(M-x)<=1;return{outerHeightStyle:T,overflowing:j}},[o,i,t.placeholder]),p=b.useCallback(()=>{const C=g();if(pj(C))return;const m=c.current;m.style.height=`${C.outerHeightStyle}px`,m.style.overflow=C.overflowing?"hidden":""},[g]);ir(()=>{const C=()=>{p()};let m;const y=Im(C),v=c.current,w=ho(v);w.addEventListener("resize",y);let R;return typeof ResizeObserver<"u"&&(R=new ResizeObserver(C),R.observe(v)),()=>{y.clear(),cancelAnimationFrame(m),w.removeEventListener("resize",y),R&&R.disconnect()}},[g,p]),ir(()=>{p()});const h=C=>{u||p(),r&&r(C)};return S.jsxs(b.Fragment,{children:[S.jsx("textarea",E({value:s,onChange:h,ref:d,rows:i,style:a},l)),S.jsx("textarea",{"aria-hidden":!0,className:t.className,readOnly:!0,ref:f,tabIndex:-1,style:E({},fj.shadow,a,{paddingTop:0,paddingBottom:0})})]})});var Zm={};Object.defineProperty(Zm,"__esModule",{value:!0});var Uw=Zm.default=void 0,mj=vj(b),gj=bw;function Ww(e){if(typeof WeakMap!="function")return null;var t=new WeakMap,n=new WeakMap;return(Ww=function(r){return r?n:t})(e)}function vj(e,t){if(e&&e.__esModule)return e;if(e===null||typeof e!="object"&&typeof e!="function")return{default:e};var n=Ww(t);if(n&&n.has(e))return n.get(e);var r={__proto__:null},o=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var i in e)if(i!=="default"&&Object.prototype.hasOwnProperty.call(e,i)){var a=o?Object.getOwnPropertyDescriptor(e,i):null;a&&(a.get||a.set)?Object.defineProperty(r,i,a):r[i]=e[i]}return r.default=e,n&&n.set(e,r),r}function yj(e){return Object.keys(e).length===0}function xj(e=null){const t=mj.useContext(gj.ThemeContext);return!t||yj(t)?e:t}Uw=Zm.default=xj;const bj=["anchorEl","component","components","componentsProps","container","disablePortal","keepMounted","modifiers","open","placement","popperOptions","popperRef","transition","slots","slotProps"],wj=V(cj,{name:"MuiPopper",slot:"Root",overridesResolver:(e,t)=>t.root})({}),Hw=b.forwardRef(function(t,n){var r;const o=Uw(),i=be({props:t,name:"MuiPopper"}),{anchorEl:a,component:s,components:l,componentsProps:u,container:c,disablePortal:d,keepMounted:f,modifiers:g,open:p,placement:h,popperOptions:C,popperRef:m,transition:y,slots:v,slotProps:w}=i,R=G(i,bj),P=(r=v==null?void 0:v.root)!=null?r:l==null?void 0:l.Root,x=E({anchorEl:a,container:c,disablePortal:d,keepMounted:f,modifiers:g,open:p,placement:h,popperOptions:C,popperRef:m,transition:y},R);return S.jsx(wj,E({as:s,direction:o==null?void 0:o.direction,slots:{root:P},slotProps:w??u},x,{ref:n}))});function ga({props:e,states:t,muiFormControl:n}){return t.reduce((r,o)=>(r[o]=e[o],n&&typeof e[o]>"u"&&(r[o]=n[o]),r),{})}const yd=b.createContext(void 0);function ii(){return b.useContext(yd)}function Sj(e){return S.jsx(t$,E({},e,{defaultTheme:fd,themeId:il}))}function Jy(e){return e!=null&&!(Array.isArray(e)&&e.length===0)}function ac(e,t=!1){return e&&(Jy(e.value)&&e.value!==""||t&&Jy(e.defaultValue)&&e.defaultValue!=="")}function Cj(e){return e.startAdornment}function Ej(e){return ve("MuiInputBase",e)}const ia=fe("MuiInputBase",["root","formControl","focused","disabled","adornedStart","adornedEnd","error","sizeSmall","multiline","colorSecondary","fullWidth","hiddenLabel","readOnly","input","inputSizeSmall","inputMultiline","inputTypeSearch","inputAdornedStart","inputAdornedEnd","inputHiddenLabel"]),Rj=["aria-describedby","autoComplete","autoFocus","className","color","components","componentsProps","defaultValue","disabled","disableInjectingGlobalStyles","endAdornment","error","fullWidth","id","inputComponent","inputProps","inputRef","margin","maxRows","minRows","multiline","name","onBlur","onChange","onClick","onFocus","onKeyDown","onKeyUp","placeholder","readOnly","renderSuffix","rows","size","slotProps","slots","startAdornment","type","value"],xd=(e,t)=>{const{ownerState:n}=e;return[t.root,n.formControl&&t.formControl,n.startAdornment&&t.adornedStart,n.endAdornment&&t.adornedEnd,n.error&&t.error,n.size==="small"&&t.sizeSmall,n.multiline&&t.multiline,n.color&&t[`color${ne(n.color)}`],n.fullWidth&&t.fullWidth,n.hiddenLabel&&t.hiddenLabel]},bd=(e,t)=>{const{ownerState:n}=e;return[t.input,n.size==="small"&&t.inputSizeSmall,n.multiline&&t.inputMultiline,n.type==="search"&&t.inputTypeSearch,n.startAdornment&&t.inputAdornedStart,n.endAdornment&&t.inputAdornedEnd,n.hiddenLabel&&t.inputHiddenLabel]},Pj=e=>{const{classes:t,color:n,disabled:r,error:o,endAdornment:i,focused:a,formControl:s,fullWidth:l,hiddenLabel:u,multiline:c,readOnly:d,size:f,startAdornment:g,type:p}=e,h={root:["root",`color${ne(n)}`,r&&"disabled",o&&"error",l&&"fullWidth",a&&"focused",s&&"formControl",f&&f!=="medium"&&`size${ne(f)}`,c&&"multiline",g&&"adornedStart",i&&"adornedEnd",u&&"hiddenLabel",d&&"readOnly"],input:["input",r&&"disabled",p==="search"&&"inputTypeSearch",c&&"inputMultiline",f==="small"&&"inputSizeSmall",u&&"inputHiddenLabel",g&&"inputAdornedStart",i&&"inputAdornedEnd",d&&"readOnly"]};return ye(h,Ej,t)},wd=V("div",{name:"MuiInputBase",slot:"Root",overridesResolver:xd})(({theme:e,ownerState:t})=>E({},e.typography.body1,{color:(e.vars||e).palette.text.primary,lineHeight:"1.4375em",boxSizing:"border-box",position:"relative",cursor:"text",display:"inline-flex",alignItems:"center",[`&.${ia.disabled}`]:{color:(e.vars||e).palette.text.disabled,cursor:"default"}},t.multiline&&E({padding:"4px 0 5px"},t.size==="small"&&{paddingTop:1}),t.fullWidth&&{width:"100%"})),Sd=V("input",{name:"MuiInputBase",slot:"Input",overridesResolver:bd})(({theme:e,ownerState:t})=>{const n=e.palette.mode==="light",r=E({color:"currentColor"},e.vars?{opacity:e.vars.opacity.inputPlaceholder}:{opacity:n?.42:.5},{transition:e.transitions.create("opacity",{duration:e.transitions.duration.shorter})}),o={opacity:"0 !important"},i=e.vars?{opacity:e.vars.opacity.inputPlaceholder}:{opacity:n?.42:.5};return E({font:"inherit",letterSpacing:"inherit",color:"currentColor",padding:"4px 0 5px",border:0,boxSizing:"content-box",background:"none",height:"1.4375em",margin:0,WebkitTapHighlightColor:"transparent",display:"block",minWidth:0,width:"100%",animationName:"mui-auto-fill-cancel",animationDuration:"10ms","&::-webkit-input-placeholder":r,"&::-moz-placeholder":r,"&:-ms-input-placeholder":r,"&::-ms-input-placeholder":r,"&:focus":{outline:0},"&:invalid":{boxShadow:"none"},"&::-webkit-search-decoration":{WebkitAppearance:"none"},[`label[data-shrink=false] + .${ia.formControl} &`]:{"&::-webkit-input-placeholder":o,"&::-moz-placeholder":o,"&:-ms-input-placeholder":o,"&::-ms-input-placeholder":o,"&:focus::-webkit-input-placeholder":i,"&:focus::-moz-placeholder":i,"&:focus:-ms-input-placeholder":i,"&:focus::-ms-input-placeholder":i},[`&.${ia.disabled}`]:{opacity:1,WebkitTextFillColor:(e.vars||e).palette.text.disabled},"&:-webkit-autofill":{animationDuration:"5000s",animationName:"mui-auto-fill"}},t.size==="small"&&{paddingTop:1},t.multiline&&{height:"auto",resize:"none",padding:0,paddingTop:0},t.type==="search"&&{MozAppearance:"textfield"})}),kj=S.jsx(Sj,{styles:{"@keyframes mui-auto-fill":{from:{display:"block"}},"@keyframes mui-auto-fill-cancel":{from:{display:"block"}}}}),Cd=b.forwardRef(function(t,n){var r;const o=be({props:t,name:"MuiInputBase"}),{"aria-describedby":i,autoComplete:a,autoFocus:s,className:l,components:u={},componentsProps:c={},defaultValue:d,disabled:f,disableInjectingGlobalStyles:g,endAdornment:p,fullWidth:h=!1,id:C,inputComponent:m="input",inputProps:y={},inputRef:v,maxRows:w,minRows:R,multiline:P=!1,name:x,onBlur:k,onChange:M,onClick:T,onFocus:j,onKeyDown:L,onKeyUp:N,placeholder:F,readOnly:B,renderSuffix:z,rows:U,slotProps:O={},slots:D={},startAdornment:q,type:ie="text",value:ee}=o,me=G(o,Rj),Z=y.value!=null?y.value:ee,{current:ae}=b.useRef(Z!=null),K=b.useRef(),le=b.useCallback($e=>{},[]),pe=mt(K,v,y.ref,le),[de,De]=b.useState(!1),ge=ii(),Se=ga({props:o,muiFormControl:ge,states:["color","disabled","error","hiddenLabel","size","required","filled"]});Se.focused=ge?ge.focused:de,b.useEffect(()=>{!ge&&f&&de&&(De(!1),k&&k())},[ge,f,de,k]);const he=ge&&ge.onFilled,ke=ge&&ge.onEmpty,Ee=b.useCallback($e=>{ac($e)?he&&he():ke&&ke()},[he,ke]);ir(()=>{ae&&Ee({value:Z})},[Z,Ee,ae]);const it=$e=>{if(Se.disabled){$e.stopPropagation();return}j&&j($e),y.onFocus&&y.onFocus($e),ge&&ge.onFocus?ge.onFocus($e):De(!0)},St=$e=>{k&&k($e),y.onBlur&&y.onBlur($e),ge&&ge.onBlur?ge.onBlur($e):De(!1)},at=($e,...oe)=>{if(!ae){const ft=$e.target||K.current;if(ft==null)throw new Error(Qo(1));Ee({value:ft.value})}y.onChange&&y.onChange($e,...oe),M&&M($e,...oe)};b.useEffect(()=>{Ee(K.current)},[]);const Pt=$e=>{K.current&&$e.currentTarget===$e.target&&K.current.focus(),T&&T($e)};let Ue=m,_e=y;P&&Ue==="input"&&(U?_e=E({type:void 0,minRows:U,maxRows:U},_e):_e=E({type:void 0,maxRows:w,minRows:R},_e),Ue=hj);const Ze=$e=>{Ee($e.animationName==="mui-auto-fill-cancel"?K.current:{value:"x"})};b.useEffect(()=>{ge&&ge.setAdornedStart(!!q)},[ge,q]);const ze=E({},o,{color:Se.color||"primary",disabled:Se.disabled,endAdornment:p,error:Se.error,focused:Se.focused,formControl:ge,fullWidth:h,hiddenLabel:Se.hiddenLabel,multiline:P,size:Se.size,startAdornment:q,type:ie}),Te=Pj(ze),ct=D.root||u.Root||wd,Ve=O.root||c.root||{},dt=D.input||u.Input||Sd;return _e=E({},_e,(r=O.input)!=null?r:c.input),S.jsxs(b.Fragment,{children:[!g&&kj,S.jsxs(ct,E({},Ve,!Us(ct)&&{ownerState:E({},ze,Ve.ownerState)},{ref:n,onClick:Pt},me,{className:Y(Te.root,Ve.className,l,B&&"MuiInputBase-readOnly"),children:[q,S.jsx(yd.Provider,{value:null,children:S.jsx(dt,E({ownerState:ze,"aria-invalid":Se.error,"aria-describedby":i,autoComplete:a,autoFocus:s,defaultValue:d,disabled:Se.disabled,id:C,onAnimationStart:Ze,name:x,placeholder:F,readOnly:B,required:Se.required,rows:U,value:Z,onKeyDown:L,onKeyUp:N,type:ie},_e,!Us(dt)&&{as:Ue,ownerState:E({},ze,_e.ownerState)},{ref:pe,className:Y(Te.input,_e.className,B&&"MuiInputBase-readOnly"),onBlur:St,onChange:at,onFocus:it}))}),p,z?z(E({},Se,{startAdornment:q})):null]}))]})});function Tj(e){return ve("MuiInput",e)}const Da=E({},ia,fe("MuiInput",["root","underline","input"]));function $j(e){return ve("MuiOutlinedInput",e)}const Wr=E({},ia,fe("MuiOutlinedInput",["root","notchedOutline","input"]));function Oj(e){return ve("MuiFilledInput",e)}const Co=E({},ia,fe("MuiFilledInput",["root","underline","input"])),Mj=ar(S.jsx("path",{d:"M7 10l5 5 5-5z"}),"ArrowDropDown"),_j=["addEndListener","appear","children","easing","in","onEnter","onEntered","onEntering","onExit","onExited","onExiting","style","timeout","TransitionComponent"],jj={entering:{opacity:1},entered:{opacity:1}},Nj=b.forwardRef(function(t,n){const r=fl(),o={enter:r.transitions.duration.enteringScreen,exit:r.transitions.duration.leavingScreen},{addEndListener:i,appear:a=!0,children:s,easing:l,in:u,onEnter:c,onEntered:d,onEntering:f,onExit:g,onExited:p,onExiting:h,style:C,timeout:m=o,TransitionComponent:y=sr}=t,v=G(t,_j),w=b.useRef(null),R=mt(w,s.ref,n),P=F=>B=>{if(F){const z=w.current;B===void 0?F(z):F(z,B)}},x=P(f),k=P((F,B)=>{Ew(F);const z=ea({style:C,timeout:m,easing:l},{mode:"enter"});F.style.webkitTransition=r.transitions.create("opacity",z),F.style.transition=r.transitions.create("opacity",z),c&&c(F,B)}),M=P(d),T=P(h),j=P(F=>{const B=ea({style:C,timeout:m,easing:l},{mode:"exit"});F.style.webkitTransition=r.transitions.create("opacity",B),F.style.transition=r.transitions.create("opacity",B),g&&g(F)}),L=P(p),N=F=>{i&&i(w.current,F)};return S.jsx(y,E({appear:a,in:u,nodeRef:w,onEnter:k,onEntered:M,onEntering:x,onExit:j,onExited:L,onExiting:T,addEndListener:N,timeout:m},v,{children:(F,B)=>b.cloneElement(s,E({style:E({opacity:0,visibility:F==="exited"&&!u?"hidden":void 0},jj[F],C,s.props.style),ref:R},B))}))});function Aj(e){return ve("MuiBackdrop",e)}fe("MuiBackdrop",["root","invisible"]);const Lj=["children","className","component","components","componentsProps","invisible","open","slotProps","slots","TransitionComponent","transitionDuration"],Ij=e=>{const{classes:t,invisible:n}=e;return ye({root:["root",n&&"invisible"]},Aj,t)},Fj=V("div",{name:"MuiBackdrop",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,n.invisible&&t.invisible]}})(({ownerState:e})=>E({position:"fixed",display:"flex",alignItems:"center",justifyContent:"center",right:0,bottom:0,top:0,left:0,backgroundColor:"rgba(0, 0, 0, 0.5)",WebkitTapHighlightColor:"transparent"},e.invisible&&{backgroundColor:"transparent"})),Vw=b.forwardRef(function(t,n){var r,o,i;const a=be({props:t,name:"MuiBackdrop"}),{children:s,className:l,component:u="div",components:c={},componentsProps:d={},invisible:f=!1,open:g,slotProps:p={},slots:h={},TransitionComponent:C=Nj,transitionDuration:m}=a,y=G(a,Lj),v=E({},a,{component:u,invisible:f}),w=Ij(v),R=(r=p.root)!=null?r:d.root;return S.jsx(C,E({in:g,timeout:m},y,{children:S.jsx(Fj,E({"aria-hidden":!0},R,{as:(o=(i=h.root)!=null?i:c.Root)!=null?o:u,className:Y(w.root,l,R==null?void 0:R.className),ownerState:E({},v,R==null?void 0:R.ownerState),classes:w,ref:n,children:s}))}))}),Dj=fe("MuiBox",["root"]),zj=xw(),eg=s$({themeId:il,defaultTheme:zj,defaultClassName:Dj.root,generateClassName:jm.generate});function Bj(e){return ve("MuiButton",e)}const tu=fe("MuiButton",["root","text","textInherit","textPrimary","textSecondary","textSuccess","textError","textInfo","textWarning","outlined","outlinedInherit","outlinedPrimary","outlinedSecondary","outlinedSuccess","outlinedError","outlinedInfo","outlinedWarning","contained","containedInherit","containedPrimary","containedSecondary","containedSuccess","containedError","containedInfo","containedWarning","disableElevation","focusVisible","disabled","colorInherit","colorPrimary","colorSecondary","colorSuccess","colorError","colorInfo","colorWarning","textSizeSmall","textSizeMedium","textSizeLarge","outlinedSizeSmall","outlinedSizeMedium","outlinedSizeLarge","containedSizeSmall","containedSizeMedium","containedSizeLarge","sizeMedium","sizeSmall","sizeLarge","fullWidth","startIcon","endIcon","icon","iconSizeSmall","iconSizeMedium","iconSizeLarge"]),Uj=b.createContext({}),Wj=b.createContext(void 0),Hj=["children","color","component","className","disabled","disableElevation","disableFocusRipple","endIcon","focusVisibleClassName","fullWidth","size","startIcon","type","variant"],Vj=e=>{const{color:t,disableElevation:n,fullWidth:r,size:o,variant:i,classes:a}=e,s={root:["root",i,`${i}${ne(t)}`,`size${ne(o)}`,`${i}Size${ne(o)}`,`color${ne(t)}`,n&&"disableElevation",r&&"fullWidth"],label:["label"],startIcon:["icon","startIcon",`iconSize${ne(o)}`],endIcon:["icon","endIcon",`iconSize${ne(o)}`]},l=ye(s,Bj,a);return E({},a,l)},Kw=e=>E({},e.size==="small"&&{"& > *:nth-of-type(1)":{fontSize:18}},e.size==="medium"&&{"& > *:nth-of-type(1)":{fontSize:20}},e.size==="large"&&{"& > *:nth-of-type(1)":{fontSize:22}}),Kj=V(gd,{shouldForwardProp:e=>Kn(e)||e==="classes",name:"MuiButton",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[n.variant],t[`${n.variant}${ne(n.color)}`],t[`size${ne(n.size)}`],t[`${n.variant}Size${ne(n.size)}`],n.color==="inherit"&&t.colorInherit,n.disableElevation&&t.disableElevation,n.fullWidth&&t.fullWidth]}})(({theme:e,ownerState:t})=>{var n,r;const o=e.palette.mode==="light"?e.palette.grey[300]:e.palette.grey[800],i=e.palette.mode==="light"?e.palette.grey.A100:e.palette.grey[700];return E({},e.typography.button,{minWidth:64,padding:"6px 16px",borderRadius:(e.vars||e).shape.borderRadius,transition:e.transitions.create(["background-color","box-shadow","border-color","color"],{duration:e.transitions.duration.short}),"&:hover":E({textDecoration:"none",backgroundColor:e.vars?`rgba(${e.vars.palette.text.primaryChannel} / ${e.vars.palette.action.hoverOpacity})`:Ot(e.palette.text.primary,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},t.variant==="text"&&t.color!=="inherit"&&{backgroundColor:e.vars?`rgba(${e.vars.palette[t.color].mainChannel} / ${e.vars.palette.action.hoverOpacity})`:Ot(e.palette[t.color].main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},t.variant==="outlined"&&t.color!=="inherit"&&{border:`1px solid ${(e.vars||e).palette[t.color].main}`,backgroundColor:e.vars?`rgba(${e.vars.palette[t.color].mainChannel} / ${e.vars.palette.action.hoverOpacity})`:Ot(e.palette[t.color].main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},t.variant==="contained"&&{backgroundColor:e.vars?e.vars.palette.Button.inheritContainedHoverBg:i,boxShadow:(e.vars||e).shadows[4],"@media (hover: none)":{boxShadow:(e.vars||e).shadows[2],backgroundColor:(e.vars||e).palette.grey[300]}},t.variant==="contained"&&t.color!=="inherit"&&{backgroundColor:(e.vars||e).palette[t.color].dark,"@media (hover: none)":{backgroundColor:(e.vars||e).palette[t.color].main}}),"&:active":E({},t.variant==="contained"&&{boxShadow:(e.vars||e).shadows[8]}),[`&.${tu.focusVisible}`]:E({},t.variant==="contained"&&{boxShadow:(e.vars||e).shadows[6]}),[`&.${tu.disabled}`]:E({color:(e.vars||e).palette.action.disabled},t.variant==="outlined"&&{border:`1px solid ${(e.vars||e).palette.action.disabledBackground}`},t.variant==="contained"&&{color:(e.vars||e).palette.action.disabled,boxShadow:(e.vars||e).shadows[0],backgroundColor:(e.vars||e).palette.action.disabledBackground})},t.variant==="text"&&{padding:"6px 8px"},t.variant==="text"&&t.color!=="inherit"&&{color:(e.vars||e).palette[t.color].main},t.variant==="outlined"&&{padding:"5px 15px",border:"1px solid currentColor"},t.variant==="outlined"&&t.color!=="inherit"&&{color:(e.vars||e).palette[t.color].main,border:e.vars?`1px solid rgba(${e.vars.palette[t.color].mainChannel} / 0.5)`:`1px solid ${Ot(e.palette[t.color].main,.5)}`},t.variant==="contained"&&{color:e.vars?e.vars.palette.text.primary:(n=(r=e.palette).getContrastText)==null?void 0:n.call(r,e.palette.grey[300]),backgroundColor:e.vars?e.vars.palette.Button.inheritContainedBg:o,boxShadow:(e.vars||e).shadows[2]},t.variant==="contained"&&t.color!=="inherit"&&{color:(e.vars||e).palette[t.color].contrastText,backgroundColor:(e.vars||e).palette[t.color].main},t.color==="inherit"&&{color:"inherit",borderColor:"currentColor"},t.size==="small"&&t.variant==="text"&&{padding:"4px 5px",fontSize:e.typography.pxToRem(13)},t.size==="large"&&t.variant==="text"&&{padding:"8px 11px",fontSize:e.typography.pxToRem(15)},t.size==="small"&&t.variant==="outlined"&&{padding:"3px 9px",fontSize:e.typography.pxToRem(13)},t.size==="large"&&t.variant==="outlined"&&{padding:"7px 21px",fontSize:e.typography.pxToRem(15)},t.size==="small"&&t.variant==="contained"&&{padding:"4px 10px",fontSize:e.typography.pxToRem(13)},t.size==="large"&&t.variant==="contained"&&{padding:"8px 22px",fontSize:e.typography.pxToRem(15)},t.fullWidth&&{width:"100%"})},({ownerState:e})=>e.disableElevation&&{boxShadow:"none","&:hover":{boxShadow:"none"},[`&.${tu.focusVisible}`]:{boxShadow:"none"},"&:active":{boxShadow:"none"},[`&.${tu.disabled}`]:{boxShadow:"none"}}),qj=V("span",{name:"MuiButton",slot:"StartIcon",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.startIcon,t[`iconSize${ne(n.size)}`]]}})(({ownerState:e})=>E({display:"inherit",marginRight:8,marginLeft:-4},e.size==="small"&&{marginLeft:-2},Kw(e))),Gj=V("span",{name:"MuiButton",slot:"EndIcon",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.endIcon,t[`iconSize${ne(n.size)}`]]}})(({ownerState:e})=>E({display:"inherit",marginRight:-4,marginLeft:8},e.size==="small"&&{marginRight:-2},Kw(e))),Di=b.forwardRef(function(t,n){const r=b.useContext(Uj),o=b.useContext(Wj),i=Lm(r,t),a=be({props:i,name:"MuiButton"}),{children:s,color:l="primary",component:u="button",className:c,disabled:d=!1,disableElevation:f=!1,disableFocusRipple:g=!1,endIcon:p,focusVisibleClassName:h,fullWidth:C=!1,size:m="medium",startIcon:y,type:v,variant:w="text"}=a,R=G(a,Hj),P=E({},a,{color:l,component:u,disabled:d,disableElevation:f,disableFocusRipple:g,fullWidth:C,size:m,type:v,variant:w}),x=Vj(P),k=y&&S.jsx(qj,{className:x.startIcon,ownerState:P,children:y}),M=p&&S.jsx(Gj,{className:x.endIcon,ownerState:P,children:p}),T=o||"";return S.jsxs(Kj,E({ownerState:P,className:Y(r.className,x.root,c,T),component:u,disabled:d,focusRipple:!g,focusVisibleClassName:Y(x.focusVisible,h),ref:n,type:v},R,{classes:x,children:[k,s,M]}))});function Xj(e){return ve("MuiCard",e)}fe("MuiCard",["root"]);const Qj=["className","raised"],Yj=e=>{const{classes:t}=e;return ye({root:["root"]},Xj,t)},Jj=V(hd,{name:"MuiCard",slot:"Root",overridesResolver:(e,t)=>t.root})(()=>({overflow:"hidden"})),Zj=b.forwardRef(function(t,n){const r=be({props:t,name:"MuiCard"}),{className:o,raised:i=!1}=r,a=G(r,Qj),s=E({},r,{raised:i}),l=Yj(s);return S.jsx(Jj,E({className:Y(l.root,o),elevation:i?8:void 0,ref:n,ownerState:s},a))});function eN(e){return ve("MuiCardActions",e)}fe("MuiCardActions",["root","spacing"]);const tN=["disableSpacing","className"],nN=e=>{const{classes:t,disableSpacing:n}=e;return ye({root:["root",!n&&"spacing"]},eN,t)},rN=V("div",{name:"MuiCardActions",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,!n.disableSpacing&&t.spacing]}})(({ownerState:e})=>E({display:"flex",alignItems:"center",padding:8},!e.disableSpacing&&{"& > :not(style) ~ :not(style)":{marginLeft:8}})),oN=b.forwardRef(function(t,n){const r=be({props:t,name:"MuiCardActions"}),{disableSpacing:o=!1,className:i}=r,a=G(r,tN),s=E({},r,{disableSpacing:o}),l=nN(s);return S.jsx(rN,E({className:Y(l.root,i),ownerState:s,ref:n},a))});function iN(e){return ve("MuiCardContent",e)}fe("MuiCardContent",["root"]);const aN=["className","component"],sN=e=>{const{classes:t}=e;return ye({root:["root"]},iN,t)},lN=V("div",{name:"MuiCardContent",slot:"Root",overridesResolver:(e,t)=>t.root})(()=>({padding:16,"&:last-child":{paddingBottom:24}})),Zy=b.forwardRef(function(t,n){const r=be({props:t,name:"MuiCardContent"}),{className:o,component:i="div"}=r,a=G(r,aN),s=E({},r,{component:i}),l=sN(s);return S.jsx(lN,E({as:i,className:Y(l.root,o),ownerState:s,ref:n},a))});function uN(e){return ve("MuiCardHeader",e)}const e0=fe("MuiCardHeader",["root","avatar","action","content","title","subheader"]),cN=["action","avatar","className","component","disableTypography","subheader","subheaderTypographyProps","title","titleTypographyProps"],dN=e=>{const{classes:t}=e;return ye({root:["root"],avatar:["avatar"],action:["action"],content:["content"],title:["title"],subheader:["subheader"]},uN,t)},fN=V("div",{name:"MuiCardHeader",slot:"Root",overridesResolver:(e,t)=>E({[`& .${e0.title}`]:t.title,[`& .${e0.subheader}`]:t.subheader},t.root)})({display:"flex",alignItems:"center",padding:16}),pN=V("div",{name:"MuiCardHeader",slot:"Avatar",overridesResolver:(e,t)=>t.avatar})({display:"flex",flex:"0 0 auto",marginRight:16}),hN=V("div",{name:"MuiCardHeader",slot:"Action",overridesResolver:(e,t)=>t.action})({flex:"0 0 auto",alignSelf:"flex-start",marginTop:-4,marginRight:-8,marginBottom:-4}),mN=V("div",{name:"MuiCardHeader",slot:"Content",overridesResolver:(e,t)=>t.content})({flex:"1 1 auto"}),gN=b.forwardRef(function(t,n){const r=be({props:t,name:"MuiCardHeader"}),{action:o,avatar:i,className:a,component:s="div",disableTypography:l=!1,subheader:u,subheaderTypographyProps:c,title:d,titleTypographyProps:f}=r,g=G(r,cN),p=E({},r,{component:s,disableTypography:l}),h=dN(p);let C=d;C!=null&&C.type!==An&&!l&&(C=S.jsx(An,E({variant:i?"body2":"h5",className:h.title,component:"span",display:"block"},f,{children:C})));let m=u;return m!=null&&m.type!==An&&!l&&(m=S.jsx(An,E({variant:i?"body2":"body1",className:h.subheader,color:"text.secondary",component:"span",display:"block"},c,{children:m}))),S.jsxs(fN,E({className:Y(h.root,a),as:s,ref:n,ownerState:p},g,{children:[i&&S.jsx(pN,{className:h.avatar,ownerState:p,children:i}),S.jsxs(mN,{className:h.content,ownerState:p,children:[C,m]}),o&&S.jsx(hN,{className:h.action,ownerState:p,children:o})]}))});function vN(e){return ve("MuiCircularProgress",e)}fe("MuiCircularProgress",["root","determinate","indeterminate","colorPrimary","colorSecondary","svg","circle","circleDeterminate","circleIndeterminate","circleDisableShrink"]);const yN=["className","color","disableShrink","size","style","thickness","value","variant"];let Ed=e=>e,t0,n0,r0,o0;const Hr=44,xN=fa(t0||(t0=Ed`
  0% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(360deg);
  }
`)),bN=fa(n0||(n0=Ed`
  0% {
    stroke-dasharray: 1px, 200px;
    stroke-dashoffset: 0;
  }

  50% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -15px;
  }

  100% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -125px;
  }
`)),wN=e=>{const{classes:t,variant:n,color:r,disableShrink:o}=e,i={root:["root",n,`color${ne(r)}`],svg:["svg"],circle:["circle",`circle${ne(n)}`,o&&"circleDisableShrink"]};return ye(i,vN,t)},SN=V("span",{name:"MuiCircularProgress",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[n.variant],t[`color${ne(n.color)}`]]}})(({ownerState:e,theme:t})=>E({display:"inline-block"},e.variant==="determinate"&&{transition:t.transitions.create("transform")},e.color!=="inherit"&&{color:(t.vars||t).palette[e.color].main}),({ownerState:e})=>e.variant==="indeterminate"&&qc(r0||(r0=Ed`
      animation: ${0} 1.4s linear infinite;
    `),xN)),CN=V("svg",{name:"MuiCircularProgress",slot:"Svg",overridesResolver:(e,t)=>t.svg})({display:"block"}),EN=V("circle",{name:"MuiCircularProgress",slot:"Circle",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.circle,t[`circle${ne(n.variant)}`],n.disableShrink&&t.circleDisableShrink]}})(({ownerState:e,theme:t})=>E({stroke:"currentColor"},e.variant==="determinate"&&{transition:t.transitions.create("stroke-dashoffset")},e.variant==="indeterminate"&&{strokeDasharray:"80px, 200px",strokeDashoffset:0}),({ownerState:e})=>e.variant==="indeterminate"&&!e.disableShrink&&qc(o0||(o0=Ed`
      animation: ${0} 1.4s ease-in-out infinite;
    `),bN)),qw=b.forwardRef(function(t,n){const r=be({props:t,name:"MuiCircularProgress"}),{className:o,color:i="primary",disableShrink:a=!1,size:s=40,style:l,thickness:u=3.6,value:c=0,variant:d="indeterminate"}=r,f=G(r,yN),g=E({},r,{color:i,disableShrink:a,size:s,thickness:u,value:c,variant:d}),p=wN(g),h={},C={},m={};if(d==="determinate"){const y=2*Math.PI*((Hr-u)/2);h.strokeDasharray=y.toFixed(3),m["aria-valuenow"]=Math.round(c),h.strokeDashoffset=`${((100-c)/100*y).toFixed(3)}px`,C.transform="rotate(-90deg)"}return S.jsx(SN,E({className:Y(p.root,o),style:E({width:s,height:s},C,l),ownerState:g,ref:n,role:"progressbar"},m,f,{children:S.jsx(CN,{className:p.svg,ownerState:g,viewBox:`${Hr/2} ${Hr/2} ${Hr} ${Hr}`,children:S.jsx(EN,{className:p.circle,style:h,ownerState:g,cx:Hr,cy:Hr,r:(Hr-u)/2,fill:"none",strokeWidth:u})})}))});function RN(e){return ve("MuiModal",e)}fe("MuiModal",["root","hidden","backdrop"]);const PN=["BackdropComponent","BackdropProps","classes","className","closeAfterTransition","children","container","component","components","componentsProps","disableAutoFocus","disableEnforceFocus","disableEscapeKeyDown","disablePortal","disableRestoreFocus","disableScrollLock","hideBackdrop","keepMounted","onBackdropClick","onClose","onTransitionEnter","onTransitionExited","open","slotProps","slots","theme"],kN=e=>{const{open:t,exited:n,classes:r}=e;return ye({root:["root",!t&&n&&"hidden"],backdrop:["backdrop"]},RN,r)},TN=V("div",{name:"MuiModal",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,!n.open&&n.exited&&t.hidden]}})(({theme:e,ownerState:t})=>E({position:"fixed",zIndex:(e.vars||e).zIndex.modal,right:0,bottom:0,top:0,left:0},!t.open&&t.exited&&{visibility:"hidden"})),$N=V(Vw,{name:"MuiModal",slot:"Backdrop",overridesResolver:(e,t)=>t.backdrop})({zIndex:-1}),ON=b.forwardRef(function(t,n){var r,o,i,a,s,l;const u=be({name:"MuiModal",props:t}),{BackdropComponent:c=$N,BackdropProps:d,className:f,closeAfterTransition:g=!1,children:p,container:h,component:C,components:m={},componentsProps:y={},disableAutoFocus:v=!1,disableEnforceFocus:w=!1,disableEscapeKeyDown:R=!1,disablePortal:P=!1,disableRestoreFocus:x=!1,disableScrollLock:k=!1,hideBackdrop:M=!1,keepMounted:T=!1,onBackdropClick:j,open:L,slotProps:N,slots:F}=u,B=G(u,PN),z=E({},u,{closeAfterTransition:g,disableAutoFocus:v,disableEnforceFocus:w,disableEscapeKeyDown:R,disablePortal:P,disableRestoreFocus:x,disableScrollLock:k,hideBackdrop:M,keepMounted:T}),{getRootProps:U,getBackdropProps:O,getTransitionProps:D,portalRef:q,isTopModal:ie,exited:ee,hasTransition:me}=XM(E({},z,{rootRef:n})),Z=E({},z,{exited:ee}),ae=kN(Z),K={};if(p.props.tabIndex===void 0&&(K.tabIndex="-1"),me){const{onEnter:he,onExited:ke}=D();K.onEnter=he,K.onExited=ke}const le=(r=(o=F==null?void 0:F.root)!=null?o:m.Root)!=null?r:TN,pe=(i=(a=F==null?void 0:F.backdrop)!=null?a:m.Backdrop)!=null?i:c,de=(s=N==null?void 0:N.root)!=null?s:y.root,De=(l=N==null?void 0:N.backdrop)!=null?l:y.backdrop,ge=Jo({elementType:le,externalSlotProps:de,externalForwardedProps:B,getSlotProps:U,additionalProps:{ref:n,as:C},ownerState:Z,className:Y(f,de==null?void 0:de.className,ae==null?void 0:ae.root,!Z.open&&Z.exited&&(ae==null?void 0:ae.hidden))}),Se=Jo({elementType:pe,externalSlotProps:De,additionalProps:d,getSlotProps:he=>O(E({},he,{onClick:ke=>{j&&j(ke),he!=null&&he.onClick&&he.onClick(ke)}})),className:Y(De==null?void 0:De.className,d==null?void 0:d.className,ae==null?void 0:ae.backdrop),ownerState:Z});return!T&&!L&&(!me||ee)?null:S.jsx(Mw,{ref:q,container:h,disablePortal:P,children:S.jsxs(le,E({},ge,{children:[!M&&c?S.jsx(pe,E({},Se)):null,S.jsx(DM,{disableEnforceFocus:w,disableAutoFocus:v,disableRestoreFocus:x,isEnabled:ie,open:L,children:b.cloneElement(p,K)})]}))})}),i0=fe("MuiDivider",["root","absolute","fullWidth","inset","middle","flexItem","light","vertical","withChildren","withChildrenVertical","textAlignRight","textAlignLeft","wrapper","wrapperVertical"]),MN=["disableUnderline","components","componentsProps","fullWidth","hiddenLabel","inputComponent","multiline","slotProps","slots","type"],_N=e=>{const{classes:t,disableUnderline:n}=e,o=ye({root:["root",!n&&"underline"],input:["input"]},Oj,t);return E({},t,o)},jN=V(wd,{shouldForwardProp:e=>Kn(e)||e==="classes",name:"MuiFilledInput",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[...xd(e,t),!n.disableUnderline&&t.underline]}})(({theme:e,ownerState:t})=>{var n;const r=e.palette.mode==="light",o=r?"rgba(0, 0, 0, 0.42)":"rgba(255, 255, 255, 0.7)",i=r?"rgba(0, 0, 0, 0.06)":"rgba(255, 255, 255, 0.09)",a=r?"rgba(0, 0, 0, 0.09)":"rgba(255, 255, 255, 0.13)",s=r?"rgba(0, 0, 0, 0.12)":"rgba(255, 255, 255, 0.12)";return E({position:"relative",backgroundColor:e.vars?e.vars.palette.FilledInput.bg:i,borderTopLeftRadius:(e.vars||e).shape.borderRadius,borderTopRightRadius:(e.vars||e).shape.borderRadius,transition:e.transitions.create("background-color",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),"&:hover":{backgroundColor:e.vars?e.vars.palette.FilledInput.hoverBg:a,"@media (hover: none)":{backgroundColor:e.vars?e.vars.palette.FilledInput.bg:i}},[`&.${Co.focused}`]:{backgroundColor:e.vars?e.vars.palette.FilledInput.bg:i},[`&.${Co.disabled}`]:{backgroundColor:e.vars?e.vars.palette.FilledInput.disabledBg:s}},!t.disableUnderline&&{"&::after":{borderBottom:`2px solid ${(n=(e.vars||e).palette[t.color||"primary"])==null?void 0:n.main}`,left:0,bottom:0,content:'""',position:"absolute",right:0,transform:"scaleX(0)",transition:e.transitions.create("transform",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),pointerEvents:"none"},[`&.${Co.focused}:after`]:{transform:"scaleX(1) translateX(0)"},[`&.${Co.error}`]:{"&::before, &::after":{borderBottomColor:(e.vars||e).palette.error.main}},"&::before":{borderBottom:`1px solid ${e.vars?`rgba(${e.vars.palette.common.onBackgroundChannel} / ${e.vars.opacity.inputUnderline})`:o}`,left:0,bottom:0,content:'"\\00a0"',position:"absolute",right:0,transition:e.transitions.create("border-bottom-color",{duration:e.transitions.duration.shorter}),pointerEvents:"none"},[`&:hover:not(.${Co.disabled}, .${Co.error}):before`]:{borderBottom:`1px solid ${(e.vars||e).palette.text.primary}`},[`&.${Co.disabled}:before`]:{borderBottomStyle:"dotted"}},t.startAdornment&&{paddingLeft:12},t.endAdornment&&{paddingRight:12},t.multiline&&E({padding:"25px 12px 8px"},t.size==="small"&&{paddingTop:21,paddingBottom:4},t.hiddenLabel&&{paddingTop:16,paddingBottom:17},t.hiddenLabel&&t.size==="small"&&{paddingTop:8,paddingBottom:9}))}),NN=V(Sd,{name:"MuiFilledInput",slot:"Input",overridesResolver:bd})(({theme:e,ownerState:t})=>E({paddingTop:25,paddingRight:12,paddingBottom:8,paddingLeft:12},!e.vars&&{"&:-webkit-autofill":{WebkitBoxShadow:e.palette.mode==="light"?null:"0 0 0 100px #266798 inset",WebkitTextFillColor:e.palette.mode==="light"?null:"#fff",caretColor:e.palette.mode==="light"?null:"#fff",borderTopLeftRadius:"inherit",borderTopRightRadius:"inherit"}},e.vars&&{"&:-webkit-autofill":{borderTopLeftRadius:"inherit",borderTopRightRadius:"inherit"},[e.getColorSchemeSelector("dark")]:{"&:-webkit-autofill":{WebkitBoxShadow:"0 0 0 100px #266798 inset",WebkitTextFillColor:"#fff",caretColor:"#fff"}}},t.size==="small"&&{paddingTop:21,paddingBottom:4},t.hiddenLabel&&{paddingTop:16,paddingBottom:17},t.startAdornment&&{paddingLeft:0},t.endAdornment&&{paddingRight:0},t.hiddenLabel&&t.size==="small"&&{paddingTop:8,paddingBottom:9},t.multiline&&{paddingTop:0,paddingBottom:0,paddingLeft:0,paddingRight:0})),tg=b.forwardRef(function(t,n){var r,o,i,a;const s=be({props:t,name:"MuiFilledInput"}),{components:l={},componentsProps:u,fullWidth:c=!1,inputComponent:d="input",multiline:f=!1,slotProps:g,slots:p={},type:h="text"}=s,C=G(s,MN),m=E({},s,{fullWidth:c,inputComponent:d,multiline:f,type:h}),y=_N(s),v={root:{ownerState:m},input:{ownerState:m}},w=g??u?Qt(v,g??u):v,R=(r=(o=p.root)!=null?o:l.Root)!=null?r:jN,P=(i=(a=p.input)!=null?a:l.Input)!=null?i:NN;return S.jsx(Cd,E({slots:{root:R,input:P},componentsProps:w,fullWidth:c,inputComponent:d,multiline:f,ref:n,type:h},C,{classes:y}))});tg.muiName="Input";function AN(e){return ve("MuiFormControl",e)}fe("MuiFormControl",["root","marginNone","marginNormal","marginDense","fullWidth","disabled"]);const LN=["children","className","color","component","disabled","error","focused","fullWidth","hiddenLabel","margin","required","size","variant"],IN=e=>{const{classes:t,margin:n,fullWidth:r}=e,o={root:["root",n!=="none"&&`margin${ne(n)}`,r&&"fullWidth"]};return ye(o,AN,t)},FN=V("div",{name:"MuiFormControl",slot:"Root",overridesResolver:({ownerState:e},t)=>E({},t.root,t[`margin${ne(e.margin)}`],e.fullWidth&&t.fullWidth)})(({ownerState:e})=>E({display:"inline-flex",flexDirection:"column",position:"relative",minWidth:0,padding:0,margin:0,border:0,verticalAlign:"top"},e.margin==="normal"&&{marginTop:16,marginBottom:8},e.margin==="dense"&&{marginTop:8,marginBottom:4},e.fullWidth&&{width:"100%"})),DN=b.forwardRef(function(t,n){const r=be({props:t,name:"MuiFormControl"}),{children:o,className:i,color:a="primary",component:s="div",disabled:l=!1,error:u=!1,focused:c,fullWidth:d=!1,hiddenLabel:f=!1,margin:g="none",required:p=!1,size:h="medium",variant:C="outlined"}=r,m=G(r,LN),y=E({},r,{color:a,component:s,disabled:l,error:u,fullWidth:d,hiddenLabel:f,margin:g,required:p,size:h,variant:C}),v=IN(y),[w,R]=b.useState(()=>{let N=!1;return o&&b.Children.forEach(o,F=>{if(!bu(F,["Input","Select"]))return;const B=bu(F,["Select"])?F.props.input:F;B&&Cj(B.props)&&(N=!0)}),N}),[P,x]=b.useState(()=>{let N=!1;return o&&b.Children.forEach(o,F=>{bu(F,["Input","Select"])&&(ac(F.props,!0)||ac(F.props.inputProps,!0))&&(N=!0)}),N}),[k,M]=b.useState(!1);l&&k&&M(!1);const T=c!==void 0&&!l?c:k;let j;const L=b.useMemo(()=>({adornedStart:w,setAdornedStart:R,color:a,disabled:l,error:u,filled:P,focused:T,fullWidth:d,hiddenLabel:f,size:h,onBlur:()=>{M(!1)},onEmpty:()=>{x(!1)},onFilled:()=>{x(!0)},onFocus:()=>{M(!0)},registerEffect:j,required:p,variant:C}),[w,a,l,u,P,T,d,f,j,p,h,C]);return S.jsx(yd.Provider,{value:L,children:S.jsx(FN,E({as:s,ownerState:y,className:Y(v.root,i),ref:n},m,{children:o}))})}),zN=G$({createStyledComponent:V("div",{name:"MuiStack",slot:"Root",overridesResolver:(e,t)=>t.root}),useThemeProps:e=>be({props:e,name:"MuiStack"})});function BN(e){return ve("MuiFormHelperText",e)}const a0=fe("MuiFormHelperText",["root","error","disabled","sizeSmall","sizeMedium","contained","focused","filled","required"]);var s0;const UN=["children","className","component","disabled","error","filled","focused","margin","required","variant"],WN=e=>{const{classes:t,contained:n,size:r,disabled:o,error:i,filled:a,focused:s,required:l}=e,u={root:["root",o&&"disabled",i&&"error",r&&`size${ne(r)}`,n&&"contained",s&&"focused",a&&"filled",l&&"required"]};return ye(u,BN,t)},HN=V("p",{name:"MuiFormHelperText",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,n.size&&t[`size${ne(n.size)}`],n.contained&&t.contained,n.filled&&t.filled]}})(({theme:e,ownerState:t})=>E({color:(e.vars||e).palette.text.secondary},e.typography.caption,{textAlign:"left",marginTop:3,marginRight:0,marginBottom:0,marginLeft:0,[`&.${a0.disabled}`]:{color:(e.vars||e).palette.text.disabled},[`&.${a0.error}`]:{color:(e.vars||e).palette.error.main}},t.size==="small"&&{marginTop:4},t.contained&&{marginLeft:14,marginRight:14})),VN=b.forwardRef(function(t,n){const r=be({props:t,name:"MuiFormHelperText"}),{children:o,className:i,component:a="p"}=r,s=G(r,UN),l=ii(),u=ga({props:r,muiFormControl:l,states:["variant","size","disabled","error","filled","focused","required"]}),c=E({},r,{component:a,contained:u.variant==="filled"||u.variant==="outlined",variant:u.variant,size:u.size,disabled:u.disabled,error:u.error,filled:u.filled,focused:u.focused,required:u.required}),d=WN(c);return S.jsx(HN,E({as:a,ownerState:c,className:Y(d.root,i),ref:n},s,{children:o===" "?s0||(s0=S.jsx("span",{className:"notranslate",children:"​"})):o}))});function KN(e){return ve("MuiFormLabel",e)}const hs=fe("MuiFormLabel",["root","colorSecondary","focused","disabled","error","filled","required","asterisk"]),qN=["children","className","color","component","disabled","error","filled","focused","required"],GN=e=>{const{classes:t,color:n,focused:r,disabled:o,error:i,filled:a,required:s}=e,l={root:["root",`color${ne(n)}`,o&&"disabled",i&&"error",a&&"filled",r&&"focused",s&&"required"],asterisk:["asterisk",i&&"error"]};return ye(l,KN,t)},XN=V("label",{name:"MuiFormLabel",slot:"Root",overridesResolver:({ownerState:e},t)=>E({},t.root,e.color==="secondary"&&t.colorSecondary,e.filled&&t.filled)})(({theme:e,ownerState:t})=>E({color:(e.vars||e).palette.text.secondary},e.typography.body1,{lineHeight:"1.4375em",padding:0,position:"relative",[`&.${hs.focused}`]:{color:(e.vars||e).palette[t.color].main},[`&.${hs.disabled}`]:{color:(e.vars||e).palette.text.disabled},[`&.${hs.error}`]:{color:(e.vars||e).palette.error.main}})),QN=V("span",{name:"MuiFormLabel",slot:"Asterisk",overridesResolver:(e,t)=>t.asterisk})(({theme:e})=>({[`&.${hs.error}`]:{color:(e.vars||e).palette.error.main}})),YN=b.forwardRef(function(t,n){const r=be({props:t,name:"MuiFormLabel"}),{children:o,className:i,component:a="label"}=r,s=G(r,qN),l=ii(),u=ga({props:r,muiFormControl:l,states:["color","required","focused","disabled","error","filled"]}),c=E({},r,{color:u.color||"primary",component:a,disabled:u.disabled,error:u.error,filled:u.filled,focused:u.focused,required:u.required}),d=GN(c);return S.jsxs(XN,E({as:a,ownerState:c,className:Y(d.root,i),ref:n},s,{children:[o,u.required&&S.jsxs(QN,{ownerState:c,"aria-hidden":!0,className:d.asterisk,children:[" ","*"]})]}))}),l0=b.createContext();function JN(e){return ve("MuiGrid",e)}const ZN=[0,1,2,3,4,5,6,7,8,9,10],eA=["column-reverse","column","row-reverse","row"],tA=["nowrap","wrap-reverse","wrap"],za=["auto",!0,1,2,3,4,5,6,7,8,9,10,11,12],Vs=fe("MuiGrid",["root","container","item","zeroMinWidth",...ZN.map(e=>`spacing-xs-${e}`),...eA.map(e=>`direction-xs-${e}`),...tA.map(e=>`wrap-xs-${e}`),...za.map(e=>`grid-xs-${e}`),...za.map(e=>`grid-sm-${e}`),...za.map(e=>`grid-md-${e}`),...za.map(e=>`grid-lg-${e}`),...za.map(e=>`grid-xl-${e}`)]),nA=["className","columns","columnSpacing","component","container","direction","item","rowSpacing","spacing","wrap","zeroMinWidth"];function zi(e){const t=parseFloat(e);return`${t}${String(e).replace(String(t),"")||"px"}`}function rA({theme:e,ownerState:t}){let n;return e.breakpoints.keys.reduce((r,o)=>{let i={};if(t[o]&&(n=t[o]),!n)return r;if(n===!0)i={flexBasis:0,flexGrow:1,maxWidth:"100%"};else if(n==="auto")i={flexBasis:"auto",flexGrow:0,flexShrink:0,maxWidth:"none",width:"auto"};else{const a=Do({values:t.columns,breakpoints:e.breakpoints.values}),s=typeof a=="object"?a[o]:a;if(s==null)return r;const l=`${Math.round(n/s*1e8)/1e6}%`;let u={};if(t.container&&t.item&&t.columnSpacing!==0){const c=e.spacing(t.columnSpacing);if(c!=="0px"){const d=`calc(${l} + ${zi(c)})`;u={flexBasis:d,maxWidth:d}}}i=E({flexBasis:l,flexGrow:0,maxWidth:l},u)}return e.breakpoints.values[o]===0?Object.assign(r,i):r[e.breakpoints.up(o)]=i,r},{})}function oA({theme:e,ownerState:t}){const n=Do({values:t.direction,breakpoints:e.breakpoints.values});return dn({theme:e},n,r=>{const o={flexDirection:r};return r.indexOf("column")===0&&(o[`& > .${Vs.item}`]={maxWidth:"none"}),o})}function Gw({breakpoints:e,values:t}){let n="";Object.keys(t).forEach(o=>{n===""&&t[o]!==0&&(n=o)});const r=Object.keys(e).sort((o,i)=>e[o]-e[i]);return r.slice(0,r.indexOf(n))}function iA({theme:e,ownerState:t}){const{container:n,rowSpacing:r}=t;let o={};if(n&&r!==0){const i=Do({values:r,breakpoints:e.breakpoints.values});let a;typeof i=="object"&&(a=Gw({breakpoints:e.breakpoints.values,values:i})),o=dn({theme:e},i,(s,l)=>{var u;const c=e.spacing(s);return c!=="0px"?{marginTop:`-${zi(c)}`,[`& > .${Vs.item}`]:{paddingTop:zi(c)}}:(u=a)!=null&&u.includes(l)?{}:{marginTop:0,[`& > .${Vs.item}`]:{paddingTop:0}}})}return o}function aA({theme:e,ownerState:t}){const{container:n,columnSpacing:r}=t;let o={};if(n&&r!==0){const i=Do({values:r,breakpoints:e.breakpoints.values});let a;typeof i=="object"&&(a=Gw({breakpoints:e.breakpoints.values,values:i})),o=dn({theme:e},i,(s,l)=>{var u;const c=e.spacing(s);return c!=="0px"?{width:`calc(100% + ${zi(c)})`,marginLeft:`-${zi(c)}`,[`& > .${Vs.item}`]:{paddingLeft:zi(c)}}:(u=a)!=null&&u.includes(l)?{}:{width:"100%",marginLeft:0,[`& > .${Vs.item}`]:{paddingLeft:0}}})}return o}function sA(e,t,n={}){if(!e||e<=0)return[];if(typeof e=="string"&&!Number.isNaN(Number(e))||typeof e=="number")return[n[`spacing-xs-${String(e)}`]];const r=[];return t.forEach(o=>{const i=e[o];Number(i)>0&&r.push(n[`spacing-${o}-${String(i)}`])}),r}const lA=V("div",{name:"MuiGrid",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e,{container:r,direction:o,item:i,spacing:a,wrap:s,zeroMinWidth:l,breakpoints:u}=n;let c=[];r&&(c=sA(a,u,t));const d=[];return u.forEach(f=>{const g=n[f];g&&d.push(t[`grid-${f}-${String(g)}`])}),[t.root,r&&t.container,i&&t.item,l&&t.zeroMinWidth,...c,o!=="row"&&t[`direction-xs-${String(o)}`],s!=="wrap"&&t[`wrap-xs-${String(s)}`],...d]}})(({ownerState:e})=>E({boxSizing:"border-box"},e.container&&{display:"flex",flexWrap:"wrap",width:"100%"},e.item&&{margin:0},e.zeroMinWidth&&{minWidth:0},e.wrap!=="wrap"&&{flexWrap:e.wrap}),oA,iA,aA,rA);function uA(e,t){if(!e||e<=0)return[];if(typeof e=="string"&&!Number.isNaN(Number(e))||typeof e=="number")return[`spacing-xs-${String(e)}`];const n=[];return t.forEach(r=>{const o=e[r];if(Number(o)>0){const i=`spacing-${r}-${String(o)}`;n.push(i)}}),n}const cA=e=>{const{classes:t,container:n,direction:r,item:o,spacing:i,wrap:a,zeroMinWidth:s,breakpoints:l}=e;let u=[];n&&(u=uA(i,l));const c=[];l.forEach(f=>{const g=e[f];g&&c.push(`grid-${f}-${String(g)}`)});const d={root:["root",n&&"container",o&&"item",s&&"zeroMinWidth",...u,r!=="row"&&`direction-xs-${String(r)}`,a!=="wrap"&&`wrap-xs-${String(a)}`,...c]};return ye(d,JN,t)},pn=b.forwardRef(function(t,n){const r=be({props:t,name:"MuiGrid"}),{breakpoints:o}=fl(),i=cl(r),{className:a,columns:s,columnSpacing:l,component:u="div",container:c=!1,direction:d="row",item:f=!1,rowSpacing:g,spacing:p=0,wrap:h="wrap",zeroMinWidth:C=!1}=i,m=G(i,nA),y=g||p,v=l||p,w=b.useContext(l0),R=c?s||12:w,P={},x=E({},m);o.keys.forEach(T=>{m[T]!=null&&(P[T]=m[T],delete x[T])});const k=E({},i,{columns:R,container:c,direction:d,item:f,rowSpacing:y,columnSpacing:v,wrap:h,zeroMinWidth:C,spacing:p},P,{breakpoints:o.keys}),M=cA(k);return S.jsx(l0.Provider,{value:R,children:S.jsx(lA,E({ownerState:k,className:Y(M.root,a),as:u,ref:n},x))})}),dA=["addEndListener","appear","children","easing","in","onEnter","onEntered","onEntering","onExit","onExited","onExiting","style","timeout","TransitionComponent"];function Yp(e){return`scale(${e}, ${e**2})`}const fA={entering:{opacity:1,transform:Yp(1)},entered:{opacity:1,transform:"none"}},xf=typeof navigator<"u"&&/^((?!chrome|android).)*(safari|mobile)/i.test(navigator.userAgent)&&/(os |version\/)15(.|_)4/i.test(navigator.userAgent),sc=b.forwardRef(function(t,n){const{addEndListener:r,appear:o=!0,children:i,easing:a,in:s,onEnter:l,onEntered:u,onEntering:c,onExit:d,onExited:f,onExiting:g,style:p,timeout:h="auto",TransitionComponent:C=sr}=t,m=G(t,dA),y=Ao(),v=b.useRef(),w=fl(),R=b.useRef(null),P=mt(R,i.ref,n),x=B=>z=>{if(B){const U=R.current;z===void 0?B(U):B(U,z)}},k=x(c),M=x((B,z)=>{Ew(B);const{duration:U,delay:O,easing:D}=ea({style:p,timeout:h,easing:a},{mode:"enter"});let q;h==="auto"?(q=w.transitions.getAutoHeightDuration(B.clientHeight),v.current=q):q=U,B.style.transition=[w.transitions.create("opacity",{duration:q,delay:O}),w.transitions.create("transform",{duration:xf?q:q*.666,delay:O,easing:D})].join(","),l&&l(B,z)}),T=x(u),j=x(g),L=x(B=>{const{duration:z,delay:U,easing:O}=ea({style:p,timeout:h,easing:a},{mode:"exit"});let D;h==="auto"?(D=w.transitions.getAutoHeightDuration(B.clientHeight),v.current=D):D=z,B.style.transition=[w.transitions.create("opacity",{duration:D,delay:U}),w.transitions.create("transform",{duration:xf?D:D*.666,delay:xf?U:U||D*.333,easing:O})].join(","),B.style.opacity=0,B.style.transform=Yp(.75),d&&d(B)}),N=x(f),F=B=>{h==="auto"&&y.start(v.current||0,B),r&&r(R.current,B)};return S.jsx(C,E({appear:o,in:s,nodeRef:R,onEnter:M,onEntered:T,onEntering:k,onExit:L,onExited:N,onExiting:j,addEndListener:F,timeout:h==="auto"?null:h},m,{children:(B,z)=>b.cloneElement(i,E({style:E({opacity:0,transform:Yp(.75),visibility:B==="exited"&&!s?"hidden":void 0},fA[B],p,i.props.style),ref:P},z))}))});sc.muiSupportAuto=!0;const pA=["disableUnderline","components","componentsProps","fullWidth","inputComponent","multiline","slotProps","slots","type"],hA=e=>{const{classes:t,disableUnderline:n}=e,o=ye({root:["root",!n&&"underline"],input:["input"]},Tj,t);return E({},t,o)},mA=V(wd,{shouldForwardProp:e=>Kn(e)||e==="classes",name:"MuiInput",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[...xd(e,t),!n.disableUnderline&&t.underline]}})(({theme:e,ownerState:t})=>{let r=e.palette.mode==="light"?"rgba(0, 0, 0, 0.42)":"rgba(255, 255, 255, 0.7)";return e.vars&&(r=`rgba(${e.vars.palette.common.onBackgroundChannel} / ${e.vars.opacity.inputUnderline})`),E({position:"relative"},t.formControl&&{"label + &":{marginTop:16}},!t.disableUnderline&&{"&::after":{borderBottom:`2px solid ${(e.vars||e).palette[t.color].main}`,left:0,bottom:0,content:'""',position:"absolute",right:0,transform:"scaleX(0)",transition:e.transitions.create("transform",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),pointerEvents:"none"},[`&.${Da.focused}:after`]:{transform:"scaleX(1) translateX(0)"},[`&.${Da.error}`]:{"&::before, &::after":{borderBottomColor:(e.vars||e).palette.error.main}},"&::before":{borderBottom:`1px solid ${r}`,left:0,bottom:0,content:'"\\00a0"',position:"absolute",right:0,transition:e.transitions.create("border-bottom-color",{duration:e.transitions.duration.shorter}),pointerEvents:"none"},[`&:hover:not(.${Da.disabled}, .${Da.error}):before`]:{borderBottom:`2px solid ${(e.vars||e).palette.text.primary}`,"@media (hover: none)":{borderBottom:`1px solid ${r}`}},[`&.${Da.disabled}:before`]:{borderBottomStyle:"dotted"}})}),gA=V(Sd,{name:"MuiInput",slot:"Input",overridesResolver:bd})({}),ng=b.forwardRef(function(t,n){var r,o,i,a;const s=be({props:t,name:"MuiInput"}),{disableUnderline:l,components:u={},componentsProps:c,fullWidth:d=!1,inputComponent:f="input",multiline:g=!1,slotProps:p,slots:h={},type:C="text"}=s,m=G(s,pA),y=hA(s),w={root:{ownerState:{disableUnderline:l}}},R=p??c?Qt(p??c,w):w,P=(r=(o=h.root)!=null?o:u.Root)!=null?r:mA,x=(i=(a=h.input)!=null?a:u.Input)!=null?i:gA;return S.jsx(Cd,E({slots:{root:P,input:x},slotProps:R,fullWidth:d,inputComponent:f,multiline:g,ref:n,type:C},m,{classes:y}))});ng.muiName="Input";function vA(e){return ve("MuiInputAdornment",e)}const u0=fe("MuiInputAdornment",["root","filled","standard","outlined","positionStart","positionEnd","disablePointerEvents","hiddenLabel","sizeSmall"]);var c0;const yA=["children","className","component","disablePointerEvents","disableTypography","position","variant"],xA=(e,t)=>{const{ownerState:n}=e;return[t.root,t[`position${ne(n.position)}`],n.disablePointerEvents===!0&&t.disablePointerEvents,t[n.variant]]},bA=e=>{const{classes:t,disablePointerEvents:n,hiddenLabel:r,position:o,size:i,variant:a}=e,s={root:["root",n&&"disablePointerEvents",o&&`position${ne(o)}`,a,r&&"hiddenLabel",i&&`size${ne(i)}`]};return ye(s,vA,t)},wA=V("div",{name:"MuiInputAdornment",slot:"Root",overridesResolver:xA})(({theme:e,ownerState:t})=>E({display:"flex",height:"0.01em",maxHeight:"2em",alignItems:"center",whiteSpace:"nowrap",color:(e.vars||e).palette.action.active},t.variant==="filled"&&{[`&.${u0.positionStart}&:not(.${u0.hiddenLabel})`]:{marginTop:16}},t.position==="start"&&{marginRight:8},t.position==="end"&&{marginLeft:8},t.disablePointerEvents===!0&&{pointerEvents:"none"})),Jp=b.forwardRef(function(t,n){const r=be({props:t,name:"MuiInputAdornment"}),{children:o,className:i,component:a="div",disablePointerEvents:s=!1,disableTypography:l=!1,position:u,variant:c}=r,d=G(r,yA),f=ii()||{};let g=c;c&&f.variant,f&&!g&&(g=f.variant);const p=E({},r,{hiddenLabel:f.hiddenLabel,size:f.size,disablePointerEvents:s,position:u,variant:g}),h=bA(p);return S.jsx(yd.Provider,{value:null,children:S.jsx(wA,E({as:a,ownerState:p,className:Y(h.root,i),ref:n},d,{children:typeof o=="string"&&!l?S.jsx(An,{color:"text.secondary",children:o}):S.jsxs(b.Fragment,{children:[u==="start"?c0||(c0=S.jsx("span",{className:"notranslate",children:"​"})):null,o]})}))})});function SA(e){return ve("MuiInputLabel",e)}fe("MuiInputLabel",["root","focused","disabled","error","required","asterisk","formControl","sizeSmall","shrink","animated","standard","filled","outlined"]);const CA=["disableAnimation","margin","shrink","variant","className"],EA=e=>{const{classes:t,formControl:n,size:r,shrink:o,disableAnimation:i,variant:a,required:s}=e,l={root:["root",n&&"formControl",!i&&"animated",o&&"shrink",r&&r!=="normal"&&`size${ne(r)}`,a],asterisk:[s&&"asterisk"]},u=ye(l,SA,t);return E({},t,u)},RA=V(YN,{shouldForwardProp:e=>Kn(e)||e==="classes",name:"MuiInputLabel",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[{[`& .${hs.asterisk}`]:t.asterisk},t.root,n.formControl&&t.formControl,n.size==="small"&&t.sizeSmall,n.shrink&&t.shrink,!n.disableAnimation&&t.animated,n.focused&&t.focused,t[n.variant]]}})(({theme:e,ownerState:t})=>E({display:"block",transformOrigin:"top left",whiteSpace:"nowrap",overflow:"hidden",textOverflow:"ellipsis",maxWidth:"100%"},t.formControl&&{position:"absolute",left:0,top:0,transform:"translate(0, 20px) scale(1)"},t.size==="small"&&{transform:"translate(0, 17px) scale(1)"},t.shrink&&{transform:"translate(0, -1.5px) scale(0.75)",transformOrigin:"top left",maxWidth:"133%"},!t.disableAnimation&&{transition:e.transitions.create(["color","transform","max-width"],{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut})},t.variant==="filled"&&E({zIndex:1,pointerEvents:"none",transform:"translate(12px, 16px) scale(1)",maxWidth:"calc(100% - 24px)"},t.size==="small"&&{transform:"translate(12px, 13px) scale(1)"},t.shrink&&E({userSelect:"none",pointerEvents:"auto",transform:"translate(12px, 7px) scale(0.75)",maxWidth:"calc(133% - 24px)"},t.size==="small"&&{transform:"translate(12px, 4px) scale(0.75)"})),t.variant==="outlined"&&E({zIndex:1,pointerEvents:"none",transform:"translate(14px, 16px) scale(1)",maxWidth:"calc(100% - 24px)"},t.size==="small"&&{transform:"translate(14px, 9px) scale(1)"},t.shrink&&{userSelect:"none",pointerEvents:"auto",maxWidth:"calc(133% - 32px)",transform:"translate(14px, -9px) scale(0.75)"}))),PA=b.forwardRef(function(t,n){const r=be({name:"MuiInputLabel",props:t}),{disableAnimation:o=!1,shrink:i,className:a}=r,s=G(r,CA),l=ii();let u=i;typeof u>"u"&&l&&(u=l.filled||l.focused||l.adornedStart);const c=ga({props:r,muiFormControl:l,states:["size","variant","required","focused"]}),d=E({},r,{disableAnimation:o,formControl:l,shrink:u,size:c.size,variant:c.variant,required:c.required,focused:c.focused}),f=EA(d);return S.jsx(RA,E({"data-shrink":u,ownerState:d,ref:n,className:Y(f.root,a)},s,{classes:f}))}),Zp=b.createContext({});function kA(e){return ve("MuiList",e)}fe("MuiList",["root","padding","dense","subheader"]);const TA=["children","className","component","dense","disablePadding","subheader"],$A=e=>{const{classes:t,disablePadding:n,dense:r,subheader:o}=e;return ye({root:["root",!n&&"padding",r&&"dense",o&&"subheader"]},kA,t)},OA=V("ul",{name:"MuiList",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,!n.disablePadding&&t.padding,n.dense&&t.dense,n.subheader&&t.subheader]}})(({ownerState:e})=>E({listStyle:"none",margin:0,padding:0,position:"relative"},!e.disablePadding&&{paddingTop:8,paddingBottom:8},e.subheader&&{paddingTop:0})),MA=b.forwardRef(function(t,n){const r=be({props:t,name:"MuiList"}),{children:o,className:i,component:a="ul",dense:s=!1,disablePadding:l=!1,subheader:u}=r,c=G(r,TA),d=b.useMemo(()=>({dense:s}),[s]),f=E({},r,{component:a,dense:s,disablePadding:l}),g=$A(f);return S.jsx(Zp.Provider,{value:d,children:S.jsxs(OA,E({as:a,className:Y(g.root,i),ref:n,ownerState:f},c,{children:[u,o]}))})}),d0=fe("MuiListItemIcon",["root","alignItemsFlexStart"]),f0=fe("MuiListItemText",["root","multiline","dense","inset","primary","secondary"]),_A=["actions","autoFocus","autoFocusItem","children","className","disabledItemsFocusable","disableListWrap","onKeyDown","variant"];function bf(e,t,n){return e===t?e.firstChild:t&&t.nextElementSibling?t.nextElementSibling:n?null:e.firstChild}function p0(e,t,n){return e===t?n?e.firstChild:e.lastChild:t&&t.previousElementSibling?t.previousElementSibling:n?null:e.lastChild}function Xw(e,t){if(t===void 0)return!0;let n=e.innerText;return n===void 0&&(n=e.textContent),n=n.trim().toLowerCase(),n.length===0?!1:t.repeating?n[0]===t.keys[0]:n.indexOf(t.keys.join(""))===0}function Ba(e,t,n,r,o,i){let a=!1,s=o(e,t,t?n:!1);for(;s;){if(s===e.firstChild){if(a)return!1;a=!0}const l=r?!1:s.disabled||s.getAttribute("aria-disabled")==="true";if(!s.hasAttribute("tabindex")||!Xw(s,i)||l)s=o(e,s,n);else return s.focus(),!0}return!1}const jA=b.forwardRef(function(t,n){const{actions:r,autoFocus:o=!1,autoFocusItem:i=!1,children:a,className:s,disabledItemsFocusable:l=!1,disableListWrap:u=!1,onKeyDown:c,variant:d="selectedMenu"}=t,f=G(t,_A),g=b.useRef(null),p=b.useRef({keys:[],repeating:!0,previousKeyMatched:!0,lastTime:null});ir(()=>{o&&g.current.focus()},[o]),b.useImperativeHandle(r,()=>({adjustStyleForScrollbar:(v,{direction:w})=>{const R=!g.current.style.width;if(v.clientHeight<g.current.clientHeight&&R){const P=`${cw(Ht(v))}px`;g.current.style[w==="rtl"?"paddingLeft":"paddingRight"]=P,g.current.style.width=`calc(100% + ${P})`}return g.current}}),[]);const h=v=>{const w=g.current,R=v.key,P=Ht(w).activeElement;if(R==="ArrowDown")v.preventDefault(),Ba(w,P,u,l,bf);else if(R==="ArrowUp")v.preventDefault(),Ba(w,P,u,l,p0);else if(R==="Home")v.preventDefault(),Ba(w,null,u,l,bf);else if(R==="End")v.preventDefault(),Ba(w,null,u,l,p0);else if(R.length===1){const x=p.current,k=R.toLowerCase(),M=performance.now();x.keys.length>0&&(M-x.lastTime>500?(x.keys=[],x.repeating=!0,x.previousKeyMatched=!0):x.repeating&&k!==x.keys[0]&&(x.repeating=!1)),x.lastTime=M,x.keys.push(k);const T=P&&!x.repeating&&Xw(P,x);x.previousKeyMatched&&(T||Ba(w,P,!1,l,bf,x))?v.preventDefault():x.previousKeyMatched=!1}c&&c(v)},C=mt(g,n);let m=-1;b.Children.forEach(a,(v,w)=>{if(!b.isValidElement(v)){m===w&&(m+=1,m>=a.length&&(m=-1));return}v.props.disabled||(d==="selectedMenu"&&v.props.selected||m===-1)&&(m=w),m===w&&(v.props.disabled||v.props.muiSkipListHighlight||v.type.muiSkipListHighlight)&&(m+=1,m>=a.length&&(m=-1))});const y=b.Children.map(a,(v,w)=>{if(w===m){const R={};return i&&(R.autoFocus=!0),v.props.tabIndex===void 0&&d==="selectedMenu"&&(R.tabIndex=0),b.cloneElement(v,R)}return v});return S.jsx(MA,E({role:"menu",ref:C,className:s,onKeyDown:h,tabIndex:o?0:-1},f,{children:y}))});function NA(e){return ve("MuiPopover",e)}fe("MuiPopover",["root","paper"]);const AA=["onEntering"],LA=["action","anchorEl","anchorOrigin","anchorPosition","anchorReference","children","className","container","elevation","marginThreshold","open","PaperProps","slots","slotProps","transformOrigin","TransitionComponent","transitionDuration","TransitionProps","disableScrollLock"],IA=["slotProps"];function h0(e,t){let n=0;return typeof t=="number"?n=t:t==="center"?n=e.height/2:t==="bottom"&&(n=e.height),n}function m0(e,t){let n=0;return typeof t=="number"?n=t:t==="center"?n=e.width/2:t==="right"&&(n=e.width),n}function g0(e){return[e.horizontal,e.vertical].map(t=>typeof t=="number"?`${t}px`:t).join(" ")}function wf(e){return typeof e=="function"?e():e}const FA=e=>{const{classes:t}=e;return ye({root:["root"],paper:["paper"]},NA,t)},DA=V(ON,{name:"MuiPopover",slot:"Root",overridesResolver:(e,t)=>t.root})({}),Qw=V(hd,{name:"MuiPopover",slot:"Paper",overridesResolver:(e,t)=>t.paper})({position:"absolute",overflowY:"auto",overflowX:"hidden",minWidth:16,minHeight:16,maxWidth:"calc(100% - 32px)",maxHeight:"calc(100% - 32px)",outline:0}),zA=b.forwardRef(function(t,n){var r,o,i;const a=be({props:t,name:"MuiPopover"}),{action:s,anchorEl:l,anchorOrigin:u={vertical:"top",horizontal:"left"},anchorPosition:c,anchorReference:d="anchorEl",children:f,className:g,container:p,elevation:h=8,marginThreshold:C=16,open:m,PaperProps:y={},slots:v,slotProps:w,transformOrigin:R={vertical:"top",horizontal:"left"},TransitionComponent:P=sc,transitionDuration:x="auto",TransitionProps:{onEntering:k}={},disableScrollLock:M=!1}=a,T=G(a.TransitionProps,AA),j=G(a,LA),L=(r=w==null?void 0:w.paper)!=null?r:y,N=b.useRef(),F=mt(N,L.ref),B=E({},a,{anchorOrigin:u,anchorReference:d,elevation:h,marginThreshold:C,externalPaperSlotProps:L,transformOrigin:R,TransitionComponent:P,transitionDuration:x,TransitionProps:T}),z=FA(B),U=b.useCallback(()=>{if(d==="anchorPosition")return c;const he=wf(l),Ee=(he&&he.nodeType===1?he:Ht(N.current).body).getBoundingClientRect();return{top:Ee.top+h0(Ee,u.vertical),left:Ee.left+m0(Ee,u.horizontal)}},[l,u.horizontal,u.vertical,c,d]),O=b.useCallback(he=>({vertical:h0(he,R.vertical),horizontal:m0(he,R.horizontal)}),[R.horizontal,R.vertical]),D=b.useCallback(he=>{const ke={width:he.offsetWidth,height:he.offsetHeight},Ee=O(ke);if(d==="none")return{top:null,left:null,transformOrigin:g0(Ee)};const it=U();let St=it.top-Ee.vertical,at=it.left-Ee.horizontal;const Pt=St+ke.height,Ue=at+ke.width,_e=ho(wf(l)),Ze=_e.innerHeight-C,ze=_e.innerWidth-C;if(C!==null&&St<C){const Te=St-C;St-=Te,Ee.vertical+=Te}else if(C!==null&&Pt>Ze){const Te=Pt-Ze;St-=Te,Ee.vertical+=Te}if(C!==null&&at<C){const Te=at-C;at-=Te,Ee.horizontal+=Te}else if(Ue>ze){const Te=Ue-ze;at-=Te,Ee.horizontal+=Te}return{top:`${Math.round(St)}px`,left:`${Math.round(at)}px`,transformOrigin:g0(Ee)}},[l,d,U,O,C]),[q,ie]=b.useState(m),ee=b.useCallback(()=>{const he=N.current;if(!he)return;const ke=D(he);ke.top!==null&&(he.style.top=ke.top),ke.left!==null&&(he.style.left=ke.left),he.style.transformOrigin=ke.transformOrigin,ie(!0)},[D]);b.useEffect(()=>(M&&window.addEventListener("scroll",ee),()=>window.removeEventListener("scroll",ee)),[l,M,ee]);const me=(he,ke)=>{k&&k(he,ke),ee()},Z=()=>{ie(!1)};b.useEffect(()=>{m&&ee()}),b.useImperativeHandle(s,()=>m?{updatePosition:()=>{ee()}}:null,[m,ee]),b.useEffect(()=>{if(!m)return;const he=Im(()=>{ee()}),ke=ho(l);return ke.addEventListener("resize",he),()=>{he.clear(),ke.removeEventListener("resize",he)}},[l,m,ee]);let ae=x;x==="auto"&&!P.muiSupportAuto&&(ae=void 0);const K=p||(l?Ht(wf(l)).body:void 0),le=(o=v==null?void 0:v.root)!=null?o:DA,pe=(i=v==null?void 0:v.paper)!=null?i:Qw,de=Jo({elementType:pe,externalSlotProps:E({},L,{style:q?L.style:E({},L.style,{opacity:0})}),additionalProps:{elevation:h,ref:F},ownerState:B,className:Y(z.paper,L==null?void 0:L.className)}),De=Jo({elementType:le,externalSlotProps:(w==null?void 0:w.root)||{},externalForwardedProps:j,additionalProps:{ref:n,slotProps:{backdrop:{invisible:!0}},container:K,open:m},ownerState:B,className:Y(z.root,g)}),{slotProps:ge}=De,Se=G(De,IA);return S.jsx(le,E({},Se,!Us(le)&&{slotProps:ge,disableScrollLock:M},{children:S.jsx(P,E({appear:!0,in:m,onEntering:me,onExited:Z,timeout:ae},T,{children:S.jsx(pe,E({},de,{children:f}))}))}))});function BA(e){return ve("MuiMenu",e)}fe("MuiMenu",["root","paper","list"]);const UA=["onEntering"],WA=["autoFocus","children","className","disableAutoFocusItem","MenuListProps","onClose","open","PaperProps","PopoverClasses","transitionDuration","TransitionProps","variant","slots","slotProps"],HA={vertical:"top",horizontal:"right"},VA={vertical:"top",horizontal:"left"},KA=e=>{const{classes:t}=e;return ye({root:["root"],paper:["paper"],list:["list"]},BA,t)},qA=V(zA,{shouldForwardProp:e=>Kn(e)||e==="classes",name:"MuiMenu",slot:"Root",overridesResolver:(e,t)=>t.root})({}),GA=V(Qw,{name:"MuiMenu",slot:"Paper",overridesResolver:(e,t)=>t.paper})({maxHeight:"calc(100% - 96px)",WebkitOverflowScrolling:"touch"}),XA=V(jA,{name:"MuiMenu",slot:"List",overridesResolver:(e,t)=>t.list})({outline:0}),QA=b.forwardRef(function(t,n){var r,o;const i=be({props:t,name:"MuiMenu"}),{autoFocus:a=!0,children:s,className:l,disableAutoFocusItem:u=!1,MenuListProps:c={},onClose:d,open:f,PaperProps:g={},PopoverClasses:p,transitionDuration:h="auto",TransitionProps:{onEntering:C}={},variant:m="selectedMenu",slots:y={},slotProps:v={}}=i,w=G(i.TransitionProps,UA),R=G(i,WA),P=Dm(),x=E({},i,{autoFocus:a,disableAutoFocusItem:u,MenuListProps:c,onEntering:C,PaperProps:g,transitionDuration:h,TransitionProps:w,variant:m}),k=KA(x),M=a&&!u&&f,T=b.useRef(null),j=(O,D)=>{T.current&&T.current.adjustStyleForScrollbar(O,{direction:P?"rtl":"ltr"}),C&&C(O,D)},L=O=>{O.key==="Tab"&&(O.preventDefault(),d&&d(O,"tabKeyDown"))};let N=-1;b.Children.map(s,(O,D)=>{b.isValidElement(O)&&(O.props.disabled||(m==="selectedMenu"&&O.props.selected||N===-1)&&(N=D))});const F=(r=y.paper)!=null?r:GA,B=(o=v.paper)!=null?o:g,z=Jo({elementType:y.root,externalSlotProps:v.root,ownerState:x,className:[k.root,l]}),U=Jo({elementType:F,externalSlotProps:B,ownerState:x,className:k.paper});return S.jsx(qA,E({onClose:d,anchorOrigin:{vertical:"bottom",horizontal:P?"right":"left"},transformOrigin:P?HA:VA,slots:{paper:F,root:y.root},slotProps:{root:z,paper:U},open:f,ref:n,transitionDuration:h,TransitionProps:E({onEntering:j},w),ownerState:x},R,{classes:p,children:S.jsx(XA,E({onKeyDown:L,actions:T,autoFocus:a&&(N===-1||u),autoFocusItem:M,variant:m},c,{className:Y(k.list,c.className),children:s}))}))});function YA(e){return ve("MuiMenuItem",e)}const Ua=fe("MuiMenuItem",["root","focusVisible","dense","disabled","divider","gutters","selected"]),JA=["autoFocus","component","dense","divider","disableGutters","focusVisibleClassName","role","tabIndex","className"],ZA=(e,t)=>{const{ownerState:n}=e;return[t.root,n.dense&&t.dense,n.divider&&t.divider,!n.disableGutters&&t.gutters]},eL=e=>{const{disabled:t,dense:n,divider:r,disableGutters:o,selected:i,classes:a}=e,l=ye({root:["root",n&&"dense",t&&"disabled",!o&&"gutters",r&&"divider",i&&"selected"]},YA,a);return E({},a,l)},tL=V(gd,{shouldForwardProp:e=>Kn(e)||e==="classes",name:"MuiMenuItem",slot:"Root",overridesResolver:ZA})(({theme:e,ownerState:t})=>E({},e.typography.body1,{display:"flex",justifyContent:"flex-start",alignItems:"center",position:"relative",textDecoration:"none",minHeight:48,paddingTop:6,paddingBottom:6,boxSizing:"border-box",whiteSpace:"nowrap"},!t.disableGutters&&{paddingLeft:16,paddingRight:16},t.divider&&{borderBottom:`1px solid ${(e.vars||e).palette.divider}`,backgroundClip:"padding-box"},{"&:hover":{textDecoration:"none",backgroundColor:(e.vars||e).palette.action.hover,"@media (hover: none)":{backgroundColor:"transparent"}},[`&.${Ua.selected}`]:{backgroundColor:e.vars?`rgba(${e.vars.palette.primary.mainChannel} / ${e.vars.palette.action.selectedOpacity})`:Ot(e.palette.primary.main,e.palette.action.selectedOpacity),[`&.${Ua.focusVisible}`]:{backgroundColor:e.vars?`rgba(${e.vars.palette.primary.mainChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.focusOpacity}))`:Ot(e.palette.primary.main,e.palette.action.selectedOpacity+e.palette.action.focusOpacity)}},[`&.${Ua.selected}:hover`]:{backgroundColor:e.vars?`rgba(${e.vars.palette.primary.mainChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.hoverOpacity}))`:Ot(e.palette.primary.main,e.palette.action.selectedOpacity+e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:e.vars?`rgba(${e.vars.palette.primary.mainChannel} / ${e.vars.palette.action.selectedOpacity})`:Ot(e.palette.primary.main,e.palette.action.selectedOpacity)}},[`&.${Ua.focusVisible}`]:{backgroundColor:(e.vars||e).palette.action.focus},[`&.${Ua.disabled}`]:{opacity:(e.vars||e).palette.action.disabledOpacity},[`& + .${i0.root}`]:{marginTop:e.spacing(1),marginBottom:e.spacing(1)},[`& + .${i0.inset}`]:{marginLeft:52},[`& .${f0.root}`]:{marginTop:0,marginBottom:0},[`& .${f0.inset}`]:{paddingLeft:36},[`& .${d0.root}`]:{minWidth:36}},!t.dense&&{[e.breakpoints.up("sm")]:{minHeight:"auto"}},t.dense&&E({minHeight:32,paddingTop:4,paddingBottom:4},e.typography.body2,{[`& .${d0.root} svg`]:{fontSize:"1.25rem"}}))),nL=b.forwardRef(function(t,n){const r=be({props:t,name:"MuiMenuItem"}),{autoFocus:o=!1,component:i="li",dense:a=!1,divider:s=!1,disableGutters:l=!1,focusVisibleClassName:u,role:c="menuitem",tabIndex:d,className:f}=r,g=G(r,JA),p=b.useContext(Zp),h=b.useMemo(()=>({dense:a||p.dense||!1,disableGutters:l}),[p.dense,a,l]),C=b.useRef(null);ir(()=>{o&&C.current&&C.current.focus()},[o]);const m=E({},r,{dense:h.dense,divider:s,disableGutters:l}),y=eL(r),v=mt(C,n);let w;return r.disabled||(w=d!==void 0?d:-1),S.jsx(Zp.Provider,{value:h,children:S.jsx(tL,E({ref:v,role:c,tabIndex:w,component:i,focusVisibleClassName:Y(y.focusVisible,u),className:Y(y.root,f)},g,{ownerState:m,classes:y}))})});function rL(e){return ve("MuiNativeSelect",e)}const rg=fe("MuiNativeSelect",["root","select","multiple","filled","outlined","standard","disabled","icon","iconOpen","iconFilled","iconOutlined","iconStandard","nativeInput","error"]),oL=["className","disabled","error","IconComponent","inputRef","variant"],iL=e=>{const{classes:t,variant:n,disabled:r,multiple:o,open:i,error:a}=e,s={select:["select",n,r&&"disabled",o&&"multiple",a&&"error"],icon:["icon",`icon${ne(n)}`,i&&"iconOpen",r&&"disabled"]};return ye(s,rL,t)},Yw=({ownerState:e,theme:t})=>E({MozAppearance:"none",WebkitAppearance:"none",userSelect:"none",borderRadius:0,cursor:"pointer","&:focus":E({},t.vars?{backgroundColor:`rgba(${t.vars.palette.common.onBackgroundChannel} / 0.05)`}:{backgroundColor:t.palette.mode==="light"?"rgba(0, 0, 0, 0.05)":"rgba(255, 255, 255, 0.05)"},{borderRadius:0}),"&::-ms-expand":{display:"none"},[`&.${rg.disabled}`]:{cursor:"default"},"&[multiple]":{height:"auto"},"&:not([multiple]) option, &:not([multiple]) optgroup":{backgroundColor:(t.vars||t).palette.background.paper},"&&&":{paddingRight:24,minWidth:16}},e.variant==="filled"&&{"&&&":{paddingRight:32}},e.variant==="outlined"&&{borderRadius:(t.vars||t).shape.borderRadius,"&:focus":{borderRadius:(t.vars||t).shape.borderRadius},"&&&":{paddingRight:32}}),aL=V("select",{name:"MuiNativeSelect",slot:"Select",shouldForwardProp:Kn,overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.select,t[n.variant],n.error&&t.error,{[`&.${rg.multiple}`]:t.multiple}]}})(Yw),Jw=({ownerState:e,theme:t})=>E({position:"absolute",right:0,top:"calc(50% - .5em)",pointerEvents:"none",color:(t.vars||t).palette.action.active,[`&.${rg.disabled}`]:{color:(t.vars||t).palette.action.disabled}},e.open&&{transform:"rotate(180deg)"},e.variant==="filled"&&{right:7},e.variant==="outlined"&&{right:7}),sL=V("svg",{name:"MuiNativeSelect",slot:"Icon",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.icon,n.variant&&t[`icon${ne(n.variant)}`],n.open&&t.iconOpen]}})(Jw),lL=b.forwardRef(function(t,n){const{className:r,disabled:o,error:i,IconComponent:a,inputRef:s,variant:l="standard"}=t,u=G(t,oL),c=E({},t,{disabled:o,variant:l,error:i}),d=iL(c);return S.jsxs(b.Fragment,{children:[S.jsx(aL,E({ownerState:c,className:Y(d.select,r),disabled:o,ref:s||n},u)),t.multiple?null:S.jsx(sL,{as:a,ownerState:c,className:d.icon})]})});var v0;const uL=["children","classes","className","label","notched"],cL=V("fieldset",{shouldForwardProp:Kn})({textAlign:"left",position:"absolute",bottom:0,right:0,top:-5,left:0,margin:0,padding:"0 8px",pointerEvents:"none",borderRadius:"inherit",borderStyle:"solid",borderWidth:1,overflow:"hidden",minWidth:"0%"}),dL=V("legend",{shouldForwardProp:Kn})(({ownerState:e,theme:t})=>E({float:"unset",width:"auto",overflow:"hidden"},!e.withLabel&&{padding:0,lineHeight:"11px",transition:t.transitions.create("width",{duration:150,easing:t.transitions.easing.easeOut})},e.withLabel&&E({display:"block",padding:0,height:11,fontSize:"0.75em",visibility:"hidden",maxWidth:.01,transition:t.transitions.create("max-width",{duration:50,easing:t.transitions.easing.easeOut}),whiteSpace:"nowrap","& > span":{paddingLeft:5,paddingRight:5,display:"inline-block",opacity:0,visibility:"visible"}},e.notched&&{maxWidth:"100%",transition:t.transitions.create("max-width",{duration:100,easing:t.transitions.easing.easeOut,delay:50})})));function fL(e){const{className:t,label:n,notched:r}=e,o=G(e,uL),i=n!=null&&n!=="",a=E({},e,{notched:r,withLabel:i});return S.jsx(cL,E({"aria-hidden":!0,className:t,ownerState:a},o,{children:S.jsx(dL,{ownerState:a,children:i?S.jsx("span",{children:n}):v0||(v0=S.jsx("span",{className:"notranslate",children:"​"}))})}))}const pL=["components","fullWidth","inputComponent","label","multiline","notched","slots","type"],hL=e=>{const{classes:t}=e,r=ye({root:["root"],notchedOutline:["notchedOutline"],input:["input"]},$j,t);return E({},t,r)},mL=V(wd,{shouldForwardProp:e=>Kn(e)||e==="classes",name:"MuiOutlinedInput",slot:"Root",overridesResolver:xd})(({theme:e,ownerState:t})=>{const n=e.palette.mode==="light"?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)";return E({position:"relative",borderRadius:(e.vars||e).shape.borderRadius,[`&:hover .${Wr.notchedOutline}`]:{borderColor:(e.vars||e).palette.text.primary},"@media (hover: none)":{[`&:hover .${Wr.notchedOutline}`]:{borderColor:e.vars?`rgba(${e.vars.palette.common.onBackgroundChannel} / 0.23)`:n}},[`&.${Wr.focused} .${Wr.notchedOutline}`]:{borderColor:(e.vars||e).palette[t.color].main,borderWidth:2},[`&.${Wr.error} .${Wr.notchedOutline}`]:{borderColor:(e.vars||e).palette.error.main},[`&.${Wr.disabled} .${Wr.notchedOutline}`]:{borderColor:(e.vars||e).palette.action.disabled}},t.startAdornment&&{paddingLeft:14},t.endAdornment&&{paddingRight:14},t.multiline&&E({padding:"16.5px 14px"},t.size==="small"&&{padding:"8.5px 14px"}))}),gL=V(fL,{name:"MuiOutlinedInput",slot:"NotchedOutline",overridesResolver:(e,t)=>t.notchedOutline})(({theme:e})=>{const t=e.palette.mode==="light"?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)";return{borderColor:e.vars?`rgba(${e.vars.palette.common.onBackgroundChannel} / 0.23)`:t}}),vL=V(Sd,{name:"MuiOutlinedInput",slot:"Input",overridesResolver:bd})(({theme:e,ownerState:t})=>E({padding:"16.5px 14px"},!e.vars&&{"&:-webkit-autofill":{WebkitBoxShadow:e.palette.mode==="light"?null:"0 0 0 100px #266798 inset",WebkitTextFillColor:e.palette.mode==="light"?null:"#fff",caretColor:e.palette.mode==="light"?null:"#fff",borderRadius:"inherit"}},e.vars&&{"&:-webkit-autofill":{borderRadius:"inherit"},[e.getColorSchemeSelector("dark")]:{"&:-webkit-autofill":{WebkitBoxShadow:"0 0 0 100px #266798 inset",WebkitTextFillColor:"#fff",caretColor:"#fff"}}},t.size==="small"&&{padding:"8.5px 14px"},t.multiline&&{padding:0},t.startAdornment&&{paddingLeft:0},t.endAdornment&&{paddingRight:0})),og=b.forwardRef(function(t,n){var r,o,i,a,s;const l=be({props:t,name:"MuiOutlinedInput"}),{components:u={},fullWidth:c=!1,inputComponent:d="input",label:f,multiline:g=!1,notched:p,slots:h={},type:C="text"}=l,m=G(l,pL),y=hL(l),v=ii(),w=ga({props:l,muiFormControl:v,states:["color","disabled","error","focused","hiddenLabel","size","required"]}),R=E({},l,{color:w.color||"primary",disabled:w.disabled,error:w.error,focused:w.focused,formControl:v,fullWidth:c,hiddenLabel:w.hiddenLabel,multiline:g,size:w.size,type:C}),P=(r=(o=h.root)!=null?o:u.Root)!=null?r:mL,x=(i=(a=h.input)!=null?a:u.Input)!=null?i:vL;return S.jsx(Cd,E({slots:{root:P,input:x},renderSuffix:k=>S.jsx(gL,{ownerState:R,className:y.notchedOutline,label:f!=null&&f!==""&&w.required?s||(s=S.jsxs(b.Fragment,{children:[f," ","*"]})):f,notched:typeof p<"u"?p:!!(k.startAdornment||k.filled||k.focused)}),fullWidth:c,inputComponent:d,multiline:g,ref:n,type:C},m,{classes:E({},y,{notchedOutline:null})}))});og.muiName="Input";const yL=ar(S.jsx("path",{d:"M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z"}),"FirstPage"),xL=ar(S.jsx("path",{d:"M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z"}),"LastPage");function bL(e){return ve("MuiSelect",e)}const Wa=fe("MuiSelect",["root","select","multiple","filled","outlined","standard","disabled","focused","icon","iconOpen","iconFilled","iconOutlined","iconStandard","nativeInput","error"]);var y0;const wL=["aria-describedby","aria-label","autoFocus","autoWidth","children","className","defaultOpen","defaultValue","disabled","displayEmpty","error","IconComponent","inputRef","labelId","MenuProps","multiple","name","onBlur","onChange","onClose","onFocus","onOpen","open","readOnly","renderValue","SelectDisplayProps","tabIndex","type","value","variant"],SL=V("div",{name:"MuiSelect",slot:"Select",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[{[`&.${Wa.select}`]:t.select},{[`&.${Wa.select}`]:t[n.variant]},{[`&.${Wa.error}`]:t.error},{[`&.${Wa.multiple}`]:t.multiple}]}})(Yw,{[`&.${Wa.select}`]:{height:"auto",minHeight:"1.4375em",textOverflow:"ellipsis",whiteSpace:"nowrap",overflow:"hidden"}}),CL=V("svg",{name:"MuiSelect",slot:"Icon",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.icon,n.variant&&t[`icon${ne(n.variant)}`],n.open&&t.iconOpen]}})(Jw),EL=V("input",{shouldForwardProp:e=>Sw(e)&&e!=="classes",name:"MuiSelect",slot:"NativeInput",overridesResolver:(e,t)=>t.nativeInput})({bottom:0,left:0,position:"absolute",opacity:0,pointerEvents:"none",width:"100%",boxSizing:"border-box"});function x0(e,t){return typeof t=="object"&&t!==null?e===t:String(e)===String(t)}function RL(e){return e==null||typeof e=="string"&&!e.trim()}const PL=e=>{const{classes:t,variant:n,disabled:r,multiple:o,open:i,error:a}=e,s={select:["select",n,r&&"disabled",o&&"multiple",a&&"error"],icon:["icon",`icon${ne(n)}`,i&&"iconOpen",r&&"disabled"],nativeInput:["nativeInput"]};return ye(s,bL,t)},kL=b.forwardRef(function(t,n){var r;const{"aria-describedby":o,"aria-label":i,autoFocus:a,autoWidth:s,children:l,className:u,defaultOpen:c,defaultValue:d,disabled:f,displayEmpty:g,error:p=!1,IconComponent:h,inputRef:C,labelId:m,MenuProps:y={},multiple:v,name:w,onBlur:R,onChange:P,onClose:x,onFocus:k,onOpen:M,open:T,readOnly:j,renderValue:L,SelectDisplayProps:N={},tabIndex:F,value:B,variant:z="standard"}=t,U=G(t,wL),[O,D]=Bs({controlled:B,default:d,name:"Select"}),[q,ie]=Bs({controlled:T,default:c,name:"Select"}),ee=b.useRef(null),me=b.useRef(null),[Z,ae]=b.useState(null),{current:K}=b.useRef(T!=null),[le,pe]=b.useState(),de=mt(n,C),De=b.useCallback(re=>{me.current=re,re&&ae(re)},[]),ge=Z==null?void 0:Z.parentNode;b.useImperativeHandle(de,()=>({focus:()=>{me.current.focus()},node:ee.current,value:O}),[O]),b.useEffect(()=>{c&&q&&Z&&!K&&(pe(s?null:ge.clientWidth),me.current.focus())},[Z,s]),b.useEffect(()=>{a&&me.current.focus()},[a]),b.useEffect(()=>{if(!m)return;const re=Ht(me.current).getElementById(m);if(re){const je=()=>{getSelection().isCollapsed&&me.current.focus()};return re.addEventListener("click",je),()=>{re.removeEventListener("click",je)}}},[m]);const Se=(re,je)=>{re?M&&M(je):x&&x(je),K||(pe(s?null:ge.clientWidth),ie(re))},he=re=>{re.button===0&&(re.preventDefault(),me.current.focus(),Se(!0,re))},ke=re=>{Se(!1,re)},Ee=b.Children.toArray(l),it=re=>{const je=Ee.find(Ge=>Ge.props.value===re.target.value);je!==void 0&&(D(je.props.value),P&&P(re,je))},St=re=>je=>{let Ge;if(je.currentTarget.hasAttribute("tabindex")){if(v){Ge=Array.isArray(O)?O.slice():[];const en=O.indexOf(re.props.value);en===-1?Ge.push(re.props.value):Ge.splice(en,1)}else Ge=re.props.value;if(re.props.onClick&&re.props.onClick(je),O!==Ge&&(D(Ge),P)){const en=je.nativeEvent||je,qn=new en.constructor(en.type,en);Object.defineProperty(qn,"target",{writable:!0,value:{value:Ge,name:w}}),P(qn,re)}v||Se(!1,je)}},at=re=>{j||[" ","ArrowUp","ArrowDown","Enter"].indexOf(re.key)!==-1&&(re.preventDefault(),Se(!0,re))},Pt=Z!==null&&q,Ue=re=>{!Pt&&R&&(Object.defineProperty(re,"target",{writable:!0,value:{value:O,name:w}}),R(re))};delete U["aria-invalid"];let _e,Ze;const ze=[];let Te=!1;(ac({value:O})||g)&&(L?_e=L(O):Te=!0);const ct=Ee.map(re=>{if(!b.isValidElement(re))return null;let je;if(v){if(!Array.isArray(O))throw new Error(Qo(2));je=O.some(Ge=>x0(Ge,re.props.value)),je&&Te&&ze.push(re.props.children)}else je=x0(O,re.props.value),je&&Te&&(Ze=re.props.children);return b.cloneElement(re,{"aria-selected":je?"true":"false",onClick:St(re),onKeyUp:Ge=>{Ge.key===" "&&Ge.preventDefault(),re.props.onKeyUp&&re.props.onKeyUp(Ge)},role:"option",selected:je,value:void 0,"data-value":re.props.value})});Te&&(v?ze.length===0?_e=null:_e=ze.reduce((re,je,Ge)=>(re.push(je),Ge<ze.length-1&&re.push(", "),re),[]):_e=Ze);let Ve=le;!s&&K&&Z&&(Ve=ge.clientWidth);let dt;typeof F<"u"?dt=F:dt=f?null:0;const $e=N.id||(w?`mui-component-select-${w}`:void 0),oe=E({},t,{variant:z,value:O,open:Pt,error:p}),ft=PL(oe),kt=E({},y.PaperProps,(r=y.slotProps)==null?void 0:r.paper),Zt=Zi();return S.jsxs(b.Fragment,{children:[S.jsx(SL,E({ref:De,tabIndex:dt,role:"combobox","aria-controls":Zt,"aria-disabled":f?"true":void 0,"aria-expanded":Pt?"true":"false","aria-haspopup":"listbox","aria-label":i,"aria-labelledby":[m,$e].filter(Boolean).join(" ")||void 0,"aria-describedby":o,onKeyDown:at,onMouseDown:f||j?null:he,onBlur:Ue,onFocus:k},N,{ownerState:oe,className:Y(N.className,ft.select,u),id:$e,children:RL(_e)?y0||(y0=S.jsx("span",{className:"notranslate",children:"​"})):_e})),S.jsx(EL,E({"aria-invalid":p,value:Array.isArray(O)?O.join(","):O,name:w,ref:ee,"aria-hidden":!0,onChange:it,tabIndex:-1,disabled:f,className:ft.nativeInput,autoFocus:a,ownerState:oe},U)),S.jsx(CL,{as:h,className:ft.icon,ownerState:oe}),S.jsx(QA,E({id:`menu-${w||""}`,anchorEl:ge,open:Pt,onClose:ke,anchorOrigin:{vertical:"bottom",horizontal:"center"},transformOrigin:{vertical:"top",horizontal:"center"}},y,{MenuListProps:E({"aria-labelledby":m,role:"listbox","aria-multiselectable":v?"true":void 0,disableListWrap:!0,id:Zt},y.MenuListProps),slotProps:E({},y.slotProps,{paper:E({},kt,{style:E({minWidth:Ve},kt!=null?kt.style:null)})}),children:ct}))]})}),TL=["autoWidth","children","classes","className","defaultOpen","displayEmpty","IconComponent","id","input","inputProps","label","labelId","MenuProps","multiple","native","onClose","onOpen","open","renderValue","SelectDisplayProps","variant"],$L=["root"],OL=e=>{const{classes:t}=e;return t},ig={name:"MuiSelect",overridesResolver:(e,t)=>t.root,shouldForwardProp:e=>Kn(e)&&e!=="variant",slot:"Root"},ML=V(ng,ig)(""),_L=V(og,ig)(""),jL=V(tg,ig)(""),ag=b.forwardRef(function(t,n){const r=be({name:"MuiSelect",props:t}),{autoWidth:o=!1,children:i,classes:a={},className:s,defaultOpen:l=!1,displayEmpty:u=!1,IconComponent:c=Mj,id:d,input:f,inputProps:g,label:p,labelId:h,MenuProps:C,multiple:m=!1,native:y=!1,onClose:v,onOpen:w,open:R,renderValue:P,SelectDisplayProps:x,variant:k="outlined"}=r,M=G(r,TL),T=y?lL:kL,j=ii(),L=ga({props:r,muiFormControl:j,states:["variant","error"]}),N=L.variant||k,F=E({},r,{variant:N,classes:a}),B=OL(F),z=G(B,$L),U=f||{standard:S.jsx(ML,{ownerState:F}),outlined:S.jsx(_L,{label:p,ownerState:F}),filled:S.jsx(jL,{ownerState:F})}[N],O=mt(n,U.ref);return S.jsx(b.Fragment,{children:b.cloneElement(U,E({inputComponent:T,inputProps:E({children:i,error:L.error,IconComponent:c,variant:N,type:void 0,multiple:m},y?{id:d}:{autoWidth:o,defaultOpen:l,displayEmpty:u,labelId:h,MenuProps:C,onClose:v,onOpen:w,open:R,renderValue:P,SelectDisplayProps:E({id:d},x)},g,{classes:g?Qt(z,g.classes):z},f?f.props.inputProps:{})},(m&&y||u)&&N==="outlined"?{notched:!0}:{},{ref:O,className:Y(U.props.className,s,B.root)},!f&&{variant:N},M))})});ag.muiName="Select";function NL(e){return ve("MuiTooltip",e)}const to=fe("MuiTooltip",["popper","popperInteractive","popperArrow","popperClose","tooltip","tooltipArrow","touch","tooltipPlacementLeft","tooltipPlacementRight","tooltipPlacementTop","tooltipPlacementBottom","arrow"]),AL=["arrow","children","classes","components","componentsProps","describeChild","disableFocusListener","disableHoverListener","disableInteractive","disableTouchListener","enterDelay","enterNextDelay","enterTouchDelay","followCursor","id","leaveDelay","leaveTouchDelay","onClose","onOpen","open","placement","PopperComponent","PopperProps","slotProps","slots","title","TransitionComponent","TransitionProps"];function LL(e){return Math.round(e*1e5)/1e5}const IL=e=>{const{classes:t,disableInteractive:n,arrow:r,touch:o,placement:i}=e,a={popper:["popper",!n&&"popperInteractive",r&&"popperArrow"],tooltip:["tooltip",r&&"tooltipArrow",o&&"touch",`tooltipPlacement${ne(i.split("-")[0])}`],arrow:["arrow"]};return ye(a,NL,t)},FL=V(Hw,{name:"MuiTooltip",slot:"Popper",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.popper,!n.disableInteractive&&t.popperInteractive,n.arrow&&t.popperArrow,!n.open&&t.popperClose]}})(({theme:e,ownerState:t,open:n})=>E({zIndex:(e.vars||e).zIndex.tooltip,pointerEvents:"none"},!t.disableInteractive&&{pointerEvents:"auto"},!n&&{pointerEvents:"none"},t.arrow&&{[`&[data-popper-placement*="bottom"] .${to.arrow}`]:{top:0,marginTop:"-0.71em","&::before":{transformOrigin:"0 100%"}},[`&[data-popper-placement*="top"] .${to.arrow}`]:{bottom:0,marginBottom:"-0.71em","&::before":{transformOrigin:"100% 0"}},[`&[data-popper-placement*="right"] .${to.arrow}`]:E({},t.isRtl?{right:0,marginRight:"-0.71em"}:{left:0,marginLeft:"-0.71em"},{height:"1em",width:"0.71em","&::before":{transformOrigin:"100% 100%"}}),[`&[data-popper-placement*="left"] .${to.arrow}`]:E({},t.isRtl?{left:0,marginLeft:"-0.71em"}:{right:0,marginRight:"-0.71em"},{height:"1em",width:"0.71em","&::before":{transformOrigin:"0 0"}})})),DL=V("div",{name:"MuiTooltip",slot:"Tooltip",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.tooltip,n.touch&&t.touch,n.arrow&&t.tooltipArrow,t[`tooltipPlacement${ne(n.placement.split("-")[0])}`]]}})(({theme:e,ownerState:t})=>E({backgroundColor:e.vars?e.vars.palette.Tooltip.bg:Ot(e.palette.grey[700],.92),borderRadius:(e.vars||e).shape.borderRadius,color:(e.vars||e).palette.common.white,fontFamily:e.typography.fontFamily,padding:"4px 8px",fontSize:e.typography.pxToRem(11),maxWidth:300,margin:2,wordWrap:"break-word",fontWeight:e.typography.fontWeightMedium},t.arrow&&{position:"relative",margin:0},t.touch&&{padding:"8px 16px",fontSize:e.typography.pxToRem(14),lineHeight:`${LL(16/14)}em`,fontWeight:e.typography.fontWeightRegular},{[`.${to.popper}[data-popper-placement*="left"] &`]:E({transformOrigin:"right center"},t.isRtl?E({marginLeft:"14px"},t.touch&&{marginLeft:"24px"}):E({marginRight:"14px"},t.touch&&{marginRight:"24px"})),[`.${to.popper}[data-popper-placement*="right"] &`]:E({transformOrigin:"left center"},t.isRtl?E({marginRight:"14px"},t.touch&&{marginRight:"24px"}):E({marginLeft:"14px"},t.touch&&{marginLeft:"24px"})),[`.${to.popper}[data-popper-placement*="top"] &`]:E({transformOrigin:"center bottom",marginBottom:"14px"},t.touch&&{marginBottom:"24px"}),[`.${to.popper}[data-popper-placement*="bottom"] &`]:E({transformOrigin:"center top",marginTop:"14px"},t.touch&&{marginTop:"24px"})})),zL=V("span",{name:"MuiTooltip",slot:"Arrow",overridesResolver:(e,t)=>t.arrow})(({theme:e})=>({overflow:"hidden",position:"absolute",width:"1em",height:"0.71em",boxSizing:"border-box",color:e.vars?e.vars.palette.Tooltip.bg:Ot(e.palette.grey[700],.9),"&::before":{content:'""',margin:"auto",display:"block",width:"100%",height:"100%",backgroundColor:"currentColor",transform:"rotate(45deg)"}}));let nu=!1;const b0=new dl;let Ha={x:0,y:0};function ru(e,t){return(n,...r)=>{t&&t(n,...r),e(n,...r)}}const w0=b.forwardRef(function(t,n){var r,o,i,a,s,l,u,c,d,f,g,p,h,C,m,y,v,w,R;const P=be({props:t,name:"MuiTooltip"}),{arrow:x=!1,children:k,components:M={},componentsProps:T={},describeChild:j=!1,disableFocusListener:L=!1,disableHoverListener:N=!1,disableInteractive:F=!1,disableTouchListener:B=!1,enterDelay:z=100,enterNextDelay:U=0,enterTouchDelay:O=700,followCursor:D=!1,id:q,leaveDelay:ie=0,leaveTouchDelay:ee=1500,onClose:me,onOpen:Z,open:ae,placement:K="bottom",PopperComponent:le,PopperProps:pe={},slotProps:de={},slots:De={},title:ge,TransitionComponent:Se=sc,TransitionProps:he}=P,ke=G(P,AL),Ee=b.isValidElement(k)?k:S.jsx("span",{children:k}),it=fl(),St=Dm(),[at,Pt]=b.useState(),[Ue,_e]=b.useState(null),Ze=b.useRef(!1),ze=F||D,Te=Ao(),ct=Ao(),Ve=Ao(),dt=Ao(),[$e,oe]=Bs({controlled:ae,default:!1,name:"Tooltip",state:"open"});let ft=$e;const kt=Zi(q),Zt=b.useRef(),re=Pr(()=>{Zt.current!==void 0&&(document.body.style.WebkitUserSelect=Zt.current,Zt.current=void 0),dt.clear()});b.useEffect(()=>re,[re]);const je=Ce=>{b0.clear(),nu=!0,oe(!0),Z&&!ft&&Z(Ce)},Ge=Pr(Ce=>{b0.start(800+ie,()=>{nu=!1}),oe(!1),me&&ft&&me(Ce),Te.start(it.transitions.duration.shortest,()=>{Ze.current=!1})}),en=Ce=>{Ze.current&&Ce.type!=="touchstart"||(at&&at.removeAttribute("title"),ct.clear(),Ve.clear(),z||nu&&U?ct.start(nu?U:z,()=>{je(Ce)}):je(Ce))},qn=Ce=>{ct.clear(),Ve.start(ie,()=>{Ge(Ce)})},{isFocusVisibleRef:wa,onBlur:Sa,onFocus:Ad,ref:Tl}=Fm(),[,$l]=b.useState(!1),Ca=Ce=>{Sa(Ce),wa.current===!1&&($l(!1),qn(Ce))},Ol=Ce=>{at||Pt(Ce.currentTarget),Ad(Ce),wa.current===!0&&($l(!0),en(Ce))},$=Ce=>{Ze.current=!0;const Tt=Ee.props;Tt.onTouchStart&&Tt.onTouchStart(Ce)},_=Ce=>{$(Ce),Ve.clear(),Te.clear(),re(),Zt.current=document.body.style.WebkitUserSelect,document.body.style.WebkitUserSelect="none",dt.start(O,()=>{document.body.style.WebkitUserSelect=Zt.current,en(Ce)})},I=Ce=>{Ee.props.onTouchEnd&&Ee.props.onTouchEnd(Ce),re(),Ve.start(ee,()=>{Ge(Ce)})};b.useEffect(()=>{if(!ft)return;function Ce(Tt){(Tt.key==="Escape"||Tt.key==="Esc")&&Ge(Tt)}return document.addEventListener("keydown",Ce),()=>{document.removeEventListener("keydown",Ce)}},[Ge,ft]);const H=mt(Ee.ref,Tl,Pt,n);!ge&&ge!==0&&(ft=!1);const X=b.useRef(),xe=Ce=>{const Tt=Ee.props;Tt.onMouseMove&&Tt.onMouseMove(Ce),Ha={x:Ce.clientX,y:Ce.clientY},X.current&&X.current.update()},te={},Q=typeof ge=="string";j?(te.title=!ft&&Q&&!N?ge:null,te["aria-describedby"]=ft?kt:null):(te["aria-label"]=Q?ge:null,te["aria-labelledby"]=ft&&!Q?kt:null);const se=E({},te,ke,Ee.props,{className:Y(ke.className,Ee.props.className),onTouchStart:$,ref:H},D?{onMouseMove:xe}:{}),ue={};B||(se.onTouchStart=_,se.onTouchEnd=I),N||(se.onMouseOver=ru(en,se.onMouseOver),se.onMouseLeave=ru(qn,se.onMouseLeave),ze||(ue.onMouseOver=en,ue.onMouseLeave=qn)),L||(se.onFocus=ru(Ol,se.onFocus),se.onBlur=ru(Ca,se.onBlur),ze||(ue.onFocus=Ol,ue.onBlur=Ca));const Ct=b.useMemo(()=>{var Ce;let Tt=[{name:"arrow",enabled:!!Ue,options:{element:Ue,padding:4}}];return(Ce=pe.popperOptions)!=null&&Ce.modifiers&&(Tt=Tt.concat(pe.popperOptions.modifiers)),E({},pe.popperOptions,{modifiers:Tt})},[Ue,pe]),et=E({},P,{isRtl:St,arrow:x,disableInteractive:ze,placement:K,PopperComponentProp:le,touch:Ze.current}),ce=IL(et),Be=(r=(o=De.popper)!=null?o:M.Popper)!=null?r:FL,pt=(i=(a=(s=De.transition)!=null?s:M.Transition)!=null?a:Se)!=null?i:sc,Fr=(l=(u=De.tooltip)!=null?u:M.Tooltip)!=null?l:DL,Gn=(c=(d=De.arrow)!=null?d:M.Arrow)!=null?c:zL,Dr=$i(Be,E({},pe,(f=de.popper)!=null?f:T.popper,{className:Y(ce.popper,pe==null?void 0:pe.className,(g=(p=de.popper)!=null?p:T.popper)==null?void 0:g.className)}),et),zr=$i(pt,E({},he,(h=de.transition)!=null?h:T.transition),et),Br=$i(Fr,E({},(C=de.tooltip)!=null?C:T.tooltip,{className:Y(ce.tooltip,(m=(y=de.tooltip)!=null?y:T.tooltip)==null?void 0:m.className)}),et),En=$i(Gn,E({},(v=de.arrow)!=null?v:T.arrow,{className:Y(ce.arrow,(w=(R=de.arrow)!=null?R:T.arrow)==null?void 0:w.className)}),et);return S.jsxs(b.Fragment,{children:[b.cloneElement(Ee,se),S.jsx(Be,E({as:le??Hw,placement:K,anchorEl:D?{getBoundingClientRect:()=>({top:Ha.y,left:Ha.x,right:Ha.x,bottom:Ha.y,width:0,height:0})}:at,popperRef:X,open:at?ft:!1,id:kt,transition:!0},ue,Dr,{popperOptions:Ct,children:({TransitionProps:Ce})=>S.jsx(pt,E({timeout:it.transitions.duration.shorter},Ce,zr,{children:S.jsxs(Fr,E({},Br,{children:[ge,x?S.jsx(Gn,E({},En,{ref:_e})):null]}))}))}))]})}),Zw=b.createContext();function BL(e){return ve("MuiTable",e)}fe("MuiTable",["root","stickyHeader"]);const UL=["className","component","padding","size","stickyHeader"],WL=e=>{const{classes:t,stickyHeader:n}=e;return ye({root:["root",n&&"stickyHeader"]},BL,t)},HL=V("table",{name:"MuiTable",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,n.stickyHeader&&t.stickyHeader]}})(({theme:e,ownerState:t})=>E({display:"table",width:"100%",borderCollapse:"collapse",borderSpacing:0,"& caption":E({},e.typography.body2,{padding:e.spacing(2),color:(e.vars||e).palette.text.secondary,textAlign:"left",captionSide:"bottom"})},t.stickyHeader&&{borderCollapse:"separate"})),S0="table",VL=b.forwardRef(function(t,n){const r=be({props:t,name:"MuiTable"}),{className:o,component:i=S0,padding:a="normal",size:s="medium",stickyHeader:l=!1}=r,u=G(r,UL),c=E({},r,{component:i,padding:a,size:s,stickyHeader:l}),d=WL(c),f=b.useMemo(()=>({padding:a,size:s,stickyHeader:l}),[a,s,l]);return S.jsx(Zw.Provider,{value:f,children:S.jsx(HL,E({as:i,role:i===S0?null:"table",ref:n,className:Y(d.root,o),ownerState:c},u))})}),Rd=b.createContext();function KL(e){return ve("MuiTableBody",e)}fe("MuiTableBody",["root"]);const qL=["className","component"],GL=e=>{const{classes:t}=e;return ye({root:["root"]},KL,t)},XL=V("tbody",{name:"MuiTableBody",slot:"Root",overridesResolver:(e,t)=>t.root})({display:"table-row-group"}),QL={variant:"body"},C0="tbody",YL=b.forwardRef(function(t,n){const r=be({props:t,name:"MuiTableBody"}),{className:o,component:i=C0}=r,a=G(r,qL),s=E({},r,{component:i}),l=GL(s);return S.jsx(Rd.Provider,{value:QL,children:S.jsx(XL,E({className:Y(l.root,o),as:i,ref:n,role:i===C0?null:"rowgroup",ownerState:s},a))})});function JL(e){return ve("MuiTableCell",e)}const ZL=fe("MuiTableCell",["root","head","body","footer","sizeSmall","sizeMedium","paddingCheckbox","paddingNone","alignLeft","alignCenter","alignRight","alignJustify","stickyHeader"]),eI=["align","className","component","padding","scope","size","sortDirection","variant"],tI=e=>{const{classes:t,variant:n,align:r,padding:o,size:i,stickyHeader:a}=e,s={root:["root",n,a&&"stickyHeader",r!=="inherit"&&`align${ne(r)}`,o!=="normal"&&`padding${ne(o)}`,`size${ne(i)}`]};return ye(s,JL,t)},nI=V("td",{name:"MuiTableCell",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[n.variant],t[`size${ne(n.size)}`],n.padding!=="normal"&&t[`padding${ne(n.padding)}`],n.align!=="inherit"&&t[`align${ne(n.align)}`],n.stickyHeader&&t.stickyHeader]}})(({theme:e,ownerState:t})=>E({},e.typography.body2,{display:"table-cell",verticalAlign:"inherit",borderBottom:e.vars?`1px solid ${e.vars.palette.TableCell.border}`:`1px solid
    ${e.palette.mode==="light"?nc(Ot(e.palette.divider,1),.88):tc(Ot(e.palette.divider,1),.68)}`,textAlign:"left",padding:16},t.variant==="head"&&{color:(e.vars||e).palette.text.primary,lineHeight:e.typography.pxToRem(24),fontWeight:e.typography.fontWeightMedium},t.variant==="body"&&{color:(e.vars||e).palette.text.primary},t.variant==="footer"&&{color:(e.vars||e).palette.text.secondary,lineHeight:e.typography.pxToRem(21),fontSize:e.typography.pxToRem(12)},t.size==="small"&&{padding:"6px 16px",[`&.${ZL.paddingCheckbox}`]:{width:24,padding:"0 12px 0 16px","& > *":{padding:0}}},t.padding==="checkbox"&&{width:48,padding:"0 0 0 4px"},t.padding==="none"&&{padding:0},t.align==="left"&&{textAlign:"left"},t.align==="center"&&{textAlign:"center"},t.align==="right"&&{textAlign:"right",flexDirection:"row-reverse"},t.align==="justify"&&{textAlign:"justify"},t.stickyHeader&&{position:"sticky",top:0,zIndex:2,backgroundColor:(e.vars||e).palette.background.default})),Nr=b.forwardRef(function(t,n){const r=be({props:t,name:"MuiTableCell"}),{align:o="inherit",className:i,component:a,padding:s,scope:l,size:u,sortDirection:c,variant:d}=r,f=G(r,eI),g=b.useContext(Zw),p=b.useContext(Rd),h=p&&p.variant==="head";let C;a?C=a:C=h?"th":"td";let m=l;C==="td"?m=void 0:!m&&h&&(m="col");const y=d||p&&p.variant,v=E({},r,{align:o,component:C,padding:s||(g&&g.padding?g.padding:"normal"),size:u||(g&&g.size?g.size:"medium"),sortDirection:c,stickyHeader:y==="head"&&g&&g.stickyHeader,variant:y}),w=tI(v);let R=null;return c&&(R=c==="asc"?"ascending":"descending"),S.jsx(nI,E({as:C,ref:n,className:Y(w.root,i),"aria-sort":R,scope:m,ownerState:v},f))});function rI(e){return ve("MuiTableContainer",e)}fe("MuiTableContainer",["root"]);const oI=["className","component"],iI=e=>{const{classes:t}=e;return ye({root:["root"]},rI,t)},aI=V("div",{name:"MuiTableContainer",slot:"Root",overridesResolver:(e,t)=>t.root})({width:"100%",overflowX:"auto"}),sI=b.forwardRef(function(t,n){const r=be({props:t,name:"MuiTableContainer"}),{className:o,component:i="div"}=r,a=G(r,oI),s=E({},r,{component:i}),l=iI(s);return S.jsx(aI,E({ref:n,as:i,className:Y(l.root,o),ownerState:s},a))});function lI(e){return ve("MuiTableHead",e)}fe("MuiTableHead",["root"]);const uI=["className","component"],cI=e=>{const{classes:t}=e;return ye({root:["root"]},lI,t)},dI=V("thead",{name:"MuiTableHead",slot:"Root",overridesResolver:(e,t)=>t.root})({display:"table-header-group"}),fI={variant:"head"},E0="thead",pI=b.forwardRef(function(t,n){const r=be({props:t,name:"MuiTableHead"}),{className:o,component:i=E0}=r,a=G(r,uI),s=E({},r,{component:i}),l=cI(s);return S.jsx(Rd.Provider,{value:fI,children:S.jsx(dI,E({as:i,className:Y(l.root,o),ref:n,role:i===E0?null:"rowgroup",ownerState:s},a))})});function hI(e){return ve("MuiToolbar",e)}fe("MuiToolbar",["root","gutters","regular","dense"]);const mI=["className","component","disableGutters","variant"],gI=e=>{const{classes:t,disableGutters:n,variant:r}=e;return ye({root:["root",!n&&"gutters",r]},hI,t)},vI=V("div",{name:"MuiToolbar",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,!n.disableGutters&&t.gutters,t[n.variant]]}})(({theme:e,ownerState:t})=>E({position:"relative",display:"flex",alignItems:"center"},!t.disableGutters&&{paddingLeft:e.spacing(2),paddingRight:e.spacing(2),[e.breakpoints.up("sm")]:{paddingLeft:e.spacing(3),paddingRight:e.spacing(3)}},t.variant==="dense"&&{minHeight:48}),({theme:e,ownerState:t})=>t.variant==="regular"&&e.mixins.toolbar),yI=b.forwardRef(function(t,n){const r=be({props:t,name:"MuiToolbar"}),{className:o,component:i="div",disableGutters:a=!1,variant:s="regular"}=r,l=G(r,mI),u=E({},r,{component:i,disableGutters:a,variant:s}),c=gI(u);return S.jsx(vI,E({as:i,className:Y(c.root,o),ref:n,ownerState:u},l))}),xI=ar(S.jsx("path",{d:"M15.41 16.09l-4.58-4.59 4.58-4.59L14 5.5l-6 6 6 6z"}),"KeyboardArrowLeft"),bI=ar(S.jsx("path",{d:"M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"}),"KeyboardArrowRight"),wI=["backIconButtonProps","count","disabled","getItemAriaLabel","nextIconButtonProps","onPageChange","page","rowsPerPage","showFirstButton","showLastButton","slots","slotProps"],SI=b.forwardRef(function(t,n){var r,o,i,a,s,l,u,c;const{backIconButtonProps:d,count:f,disabled:g=!1,getItemAriaLabel:p,nextIconButtonProps:h,onPageChange:C,page:m,rowsPerPage:y,showFirstButton:v,showLastButton:w,slots:R={},slotProps:P={}}=t,x=G(t,wI),k=Dm(),M=de=>{C(de,0)},T=de=>{C(de,m-1)},j=de=>{C(de,m+1)},L=de=>{C(de,Math.max(0,Math.ceil(f/y)-1))},N=(r=R.firstButton)!=null?r:Nn,F=(o=R.lastButton)!=null?o:Nn,B=(i=R.nextButton)!=null?i:Nn,z=(a=R.previousButton)!=null?a:Nn,U=(s=R.firstButtonIcon)!=null?s:yL,O=(l=R.lastButtonIcon)!=null?l:xL,D=(u=R.nextButtonIcon)!=null?u:bI,q=(c=R.previousButtonIcon)!=null?c:xI,ie=k?F:N,ee=k?B:z,me=k?z:B,Z=k?N:F,ae=k?P.lastButton:P.firstButton,K=k?P.nextButton:P.previousButton,le=k?P.previousButton:P.nextButton,pe=k?P.firstButton:P.lastButton;return S.jsxs("div",E({ref:n},x,{children:[v&&S.jsx(ie,E({onClick:M,disabled:g||m===0,"aria-label":p("first",m),title:p("first",m)},ae,{children:k?S.jsx(O,E({},P.lastButtonIcon)):S.jsx(U,E({},P.firstButtonIcon))})),S.jsx(ee,E({onClick:T,disabled:g||m===0,color:"inherit","aria-label":p("previous",m),title:p("previous",m)},K??d,{children:k?S.jsx(D,E({},P.nextButtonIcon)):S.jsx(q,E({},P.previousButtonIcon))})),S.jsx(me,E({onClick:j,disabled:g||(f!==-1?m>=Math.ceil(f/y)-1:!1),color:"inherit","aria-label":p("next",m),title:p("next",m)},le??h,{children:k?S.jsx(q,E({},P.previousButtonIcon)):S.jsx(D,E({},P.nextButtonIcon))})),w&&S.jsx(Z,E({onClick:L,disabled:g||m>=Math.ceil(f/y)-1,"aria-label":p("last",m),title:p("last",m)},pe,{children:k?S.jsx(U,E({},P.firstButtonIcon)):S.jsx(O,E({},P.lastButtonIcon))}))]}))});function CI(e){return ve("MuiTablePagination",e)}const ms=fe("MuiTablePagination",["root","toolbar","spacer","selectLabel","selectRoot","select","selectIcon","input","menuItem","displayedRows","actions"]);var R0;const EI=["ActionsComponent","backIconButtonProps","className","colSpan","component","count","disabled","getItemAriaLabel","labelDisplayedRows","labelRowsPerPage","nextIconButtonProps","onPageChange","onRowsPerPageChange","page","rowsPerPage","rowsPerPageOptions","SelectProps","showFirstButton","showLastButton","slotProps","slots"],RI=V(Nr,{name:"MuiTablePagination",slot:"Root",overridesResolver:(e,t)=>t.root})(({theme:e})=>({overflow:"auto",color:(e.vars||e).palette.text.primary,fontSize:e.typography.pxToRem(14),"&:last-child":{padding:0}})),PI=V(yI,{name:"MuiTablePagination",slot:"Toolbar",overridesResolver:(e,t)=>E({[`& .${ms.actions}`]:t.actions},t.toolbar)})(({theme:e})=>({minHeight:52,paddingRight:2,[`${e.breakpoints.up("xs")} and (orientation: landscape)`]:{minHeight:52},[e.breakpoints.up("sm")]:{minHeight:52,paddingRight:2},[`& .${ms.actions}`]:{flexShrink:0,marginLeft:20}})),kI=V("div",{name:"MuiTablePagination",slot:"Spacer",overridesResolver:(e,t)=>t.spacer})({flex:"1 1 100%"}),TI=V("p",{name:"MuiTablePagination",slot:"SelectLabel",overridesResolver:(e,t)=>t.selectLabel})(({theme:e})=>E({},e.typography.body2,{flexShrink:0})),$I=V(ag,{name:"MuiTablePagination",slot:"Select",overridesResolver:(e,t)=>E({[`& .${ms.selectIcon}`]:t.selectIcon,[`& .${ms.select}`]:t.select},t.input,t.selectRoot)})({color:"inherit",fontSize:"inherit",flexShrink:0,marginRight:32,marginLeft:8,[`& .${ms.select}`]:{paddingLeft:8,paddingRight:24,textAlign:"right",textAlignLast:"right"}}),OI=V(nL,{name:"MuiTablePagination",slot:"MenuItem",overridesResolver:(e,t)=>t.menuItem})({}),MI=V("p",{name:"MuiTablePagination",slot:"DisplayedRows",overridesResolver:(e,t)=>t.displayedRows})(({theme:e})=>E({},e.typography.body2,{flexShrink:0}));function _I({from:e,to:t,count:n}){return`${e}–${t} of ${n!==-1?n:`more than ${t}`}`}function jI(e){return`Go to ${e} page`}const NI=e=>{const{classes:t}=e;return ye({root:["root"],toolbar:["toolbar"],spacer:["spacer"],selectLabel:["selectLabel"],select:["select"],input:["input"],selectIcon:["selectIcon"],menuItem:["menuItem"],displayedRows:["displayedRows"],actions:["actions"]},CI,t)},AI=b.forwardRef(function(t,n){var r;const o=be({props:t,name:"MuiTablePagination"}),{ActionsComponent:i=SI,backIconButtonProps:a,className:s,colSpan:l,component:u=Nr,count:c,disabled:d=!1,getItemAriaLabel:f=jI,labelDisplayedRows:g=_I,labelRowsPerPage:p="Rows per page:",nextIconButtonProps:h,onPageChange:C,onRowsPerPageChange:m,page:y,rowsPerPage:v,rowsPerPageOptions:w=[10,25,50,100],SelectProps:R={},showFirstButton:P=!1,showLastButton:x=!1,slotProps:k={},slots:M={}}=o,T=G(o,EI),j=o,L=NI(j),N=(r=k==null?void 0:k.select)!=null?r:R,F=N.native?"option":OI;let B;(u===Nr||u==="td")&&(B=l||1e3);const z=Zi(N.id),U=Zi(N.labelId),O=()=>c===-1?(y+1)*v:v===-1?c:Math.min(c,(y+1)*v);return S.jsx(RI,E({colSpan:B,ref:n,as:u,ownerState:j,className:Y(L.root,s)},T,{children:S.jsxs(PI,{className:L.toolbar,children:[S.jsx(kI,{className:L.spacer}),w.length>1&&S.jsx(TI,{className:L.selectLabel,id:U,children:p}),w.length>1&&S.jsx($I,E({variant:"standard"},!N.variant&&{input:R0||(R0=S.jsx(Cd,{}))},{value:v,onChange:m,id:z,labelId:U},N,{classes:E({},N.classes,{root:Y(L.input,L.selectRoot,(N.classes||{}).root),select:Y(L.select,(N.classes||{}).select),icon:Y(L.selectIcon,(N.classes||{}).icon)}),disabled:d,children:w.map(D=>b.createElement(F,E({},!Us(F)&&{ownerState:j},{className:L.menuItem,key:D.label?D.label:D,value:D.value?D.value:D}),D.label?D.label:D))})),S.jsx(MI,{className:L.displayedRows,children:g({from:c===0?0:y*v+1,to:O(),count:c===-1?-1:c,page:y})}),S.jsx(i,{className:L.actions,backIconButtonProps:a,count:c,nextIconButtonProps:h,onPageChange:C,page:y,rowsPerPage:v,showFirstButton:P,showLastButton:x,slotProps:k.actions,slots:M.actions,getItemAriaLabel:f,disabled:d})]})}))});function LI(e){return ve("MuiTableRow",e)}const P0=fe("MuiTableRow",["root","selected","hover","head","footer"]),II=["className","component","hover","selected"],FI=e=>{const{classes:t,selected:n,hover:r,head:o,footer:i}=e;return ye({root:["root",n&&"selected",r&&"hover",o&&"head",i&&"footer"]},LI,t)},DI=V("tr",{name:"MuiTableRow",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,n.head&&t.head,n.footer&&t.footer]}})(({theme:e})=>({color:"inherit",display:"table-row",verticalAlign:"middle",outline:0,[`&.${P0.hover}:hover`]:{backgroundColor:(e.vars||e).palette.action.hover},[`&.${P0.selected}`]:{backgroundColor:e.vars?`rgba(${e.vars.palette.primary.mainChannel} / ${e.vars.palette.action.selectedOpacity})`:Ot(e.palette.primary.main,e.palette.action.selectedOpacity),"&:hover":{backgroundColor:e.vars?`rgba(${e.vars.palette.primary.mainChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.hoverOpacity}))`:Ot(e.palette.primary.main,e.palette.action.selectedOpacity+e.palette.action.hoverOpacity)}}})),k0="tr",Pd=b.forwardRef(function(t,n){const r=be({props:t,name:"MuiTableRow"}),{className:o,component:i=k0,hover:a=!1,selected:s=!1}=r,l=G(r,II),u=b.useContext(Rd),c=E({},r,{component:i,hover:a,selected:s,head:u&&u.variant==="head",footer:u&&u.variant==="footer"}),d=FI(c);return S.jsx(DI,E({as:i,ref:n,className:Y(d.root,o),role:i===k0?null:"row",ownerState:c},l))});function zI(e){return ve("MuiTextField",e)}fe("MuiTextField",["root"]);const BI=["autoComplete","autoFocus","children","className","color","defaultValue","disabled","error","FormHelperTextProps","fullWidth","helperText","id","InputLabelProps","inputProps","InputProps","inputRef","label","maxRows","minRows","multiline","name","onBlur","onChange","onFocus","placeholder","required","rows","select","SelectProps","type","value","variant"],UI={standard:ng,filled:tg,outlined:og},WI=e=>{const{classes:t}=e;return ye({root:["root"]},zI,t)},HI=V(DN,{name:"MuiTextField",slot:"Root",overridesResolver:(e,t)=>t.root})({}),Ks=b.forwardRef(function(t,n){const r=be({props:t,name:"MuiTextField"}),{autoComplete:o,autoFocus:i=!1,children:a,className:s,color:l="primary",defaultValue:u,disabled:c=!1,error:d=!1,FormHelperTextProps:f,fullWidth:g=!1,helperText:p,id:h,InputLabelProps:C,inputProps:m,InputProps:y,inputRef:v,label:w,maxRows:R,minRows:P,multiline:x=!1,name:k,onBlur:M,onChange:T,onFocus:j,placeholder:L,required:N=!1,rows:F,select:B=!1,SelectProps:z,type:U,value:O,variant:D="outlined"}=r,q=G(r,BI),ie=E({},r,{autoFocus:i,color:l,disabled:c,error:d,fullWidth:g,multiline:x,required:N,select:B,variant:D}),ee=WI(ie),me={};D==="outlined"&&(C&&typeof C.shrink<"u"&&(me.notched=C.shrink),me.label=w),B&&((!z||!z.native)&&(me.id=void 0),me["aria-describedby"]=void 0);const Z=Zi(h),ae=p&&Z?`${Z}-helper-text`:void 0,K=w&&Z?`${Z}-label`:void 0,le=UI[D],pe=S.jsx(le,E({"aria-describedby":ae,autoComplete:o,autoFocus:i,defaultValue:u,fullWidth:g,multiline:x,name:k,rows:F,maxRows:R,minRows:P,type:U,value:O,id:Z,inputRef:v,onBlur:M,onChange:T,onFocus:j,placeholder:L,inputProps:m},me,y));return S.jsxs(HI,E({className:Y(ee.root,s),disabled:c,error:d,fullWidth:g,ref:n,required:N,color:l,variant:D,ownerState:ie},q,{children:[w!=null&&w!==""&&S.jsx(PA,E({htmlFor:Z,id:K},C,{children:w})),B?S.jsx(ag,E({"aria-describedby":ae,id:Z,labelId:K,value:O,input:pe},z,{children:a})):pe,p&&S.jsx(VN,E({id:ae},f,{children:p}))]}))});function VI(){return S.jsxs(zN,{gap:2,alignItems:"flex-start",children:[S.jsx(li,{to:"messages",children:"Messages TODO: naming"}),S.jsx(li,{to:"message-log",children:"What's the difference between messages and message logs?"}),S.jsx(li,{to:"triggerables",children:"Triggerables"}),S.jsx(li,{to:"scheduled-tasks",children:"Scheduled Tasks"}),S.jsx(li,{to:"task-status",children:"Task Statuses"}),S.jsx(li,{to:"jwt-tokens",children:"JWT tokens (doesn't work)"})]})}function eS(e,t){return function(){return e.apply(t,arguments)}}const{toString:KI}=Object.prototype,{getPrototypeOf:sg}=Object,kd=(e=>t=>{const n=KI.call(t);return e[n]||(e[n]=n.slice(8,-1).toLowerCase())})(Object.create(null)),lr=e=>(e=e.toLowerCase(),t=>kd(t)===e),Td=e=>t=>typeof t===e,{isArray:va}=Array,qs=Td("undefined");function qI(e){return e!==null&&!qs(e)&&e.constructor!==null&&!qs(e.constructor)&&Fn(e.constructor.isBuffer)&&e.constructor.isBuffer(e)}const tS=lr("ArrayBuffer");function GI(e){let t;return typeof ArrayBuffer<"u"&&ArrayBuffer.isView?t=ArrayBuffer.isView(e):t=e&&e.buffer&&tS(e.buffer),t}const XI=Td("string"),Fn=Td("function"),nS=Td("number"),$d=e=>e!==null&&typeof e=="object",QI=e=>e===!0||e===!1,Eu=e=>{if(kd(e)!=="object")return!1;const t=sg(e);return(t===null||t===Object.prototype||Object.getPrototypeOf(t)===null)&&!(Symbol.toStringTag in e)&&!(Symbol.iterator in e)},YI=lr("Date"),JI=lr("File"),ZI=lr("Blob"),e5=lr("FileList"),t5=e=>$d(e)&&Fn(e.pipe),n5=e=>{let t;return e&&(typeof FormData=="function"&&e instanceof FormData||Fn(e.append)&&((t=kd(e))==="formdata"||t==="object"&&Fn(e.toString)&&e.toString()==="[object FormData]"))},r5=lr("URLSearchParams"),[o5,i5,a5,s5]=["ReadableStream","Request","Response","Headers"].map(lr),l5=e=>e.trim?e.trim():e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"");function gl(e,t,{allOwnKeys:n=!1}={}){if(e===null||typeof e>"u")return;let r,o;if(typeof e!="object"&&(e=[e]),va(e))for(r=0,o=e.length;r<o;r++)t.call(null,e[r],r,e);else{const i=n?Object.getOwnPropertyNames(e):Object.keys(e),a=i.length;let s;for(r=0;r<a;r++)s=i[r],t.call(null,e[s],s,e)}}function rS(e,t){t=t.toLowerCase();const n=Object.keys(e);let r=n.length,o;for(;r-- >0;)if(o=n[r],t===o.toLowerCase())return o;return null}const oS=typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:global,iS=e=>!qs(e)&&e!==oS;function eh(){const{caseless:e}=iS(this)&&this||{},t={},n=(r,o)=>{const i=e&&rS(t,o)||o;Eu(t[i])&&Eu(r)?t[i]=eh(t[i],r):Eu(r)?t[i]=eh({},r):va(r)?t[i]=r.slice():t[i]=r};for(let r=0,o=arguments.length;r<o;r++)arguments[r]&&gl(arguments[r],n);return t}const u5=(e,t,n,{allOwnKeys:r}={})=>(gl(t,(o,i)=>{n&&Fn(o)?e[i]=eS(o,n):e[i]=o},{allOwnKeys:r}),e),c5=e=>(e.charCodeAt(0)===65279&&(e=e.slice(1)),e),d5=(e,t,n,r)=>{e.prototype=Object.create(t.prototype,r),e.prototype.constructor=e,Object.defineProperty(e,"super",{value:t.prototype}),n&&Object.assign(e.prototype,n)},f5=(e,t,n,r)=>{let o,i,a;const s={};if(t=t||{},e==null)return t;do{for(o=Object.getOwnPropertyNames(e),i=o.length;i-- >0;)a=o[i],(!r||r(a,e,t))&&!s[a]&&(t[a]=e[a],s[a]=!0);e=n!==!1&&sg(e)}while(e&&(!n||n(e,t))&&e!==Object.prototype);return t},p5=(e,t,n)=>{e=String(e),(n===void 0||n>e.length)&&(n=e.length),n-=t.length;const r=e.indexOf(t,n);return r!==-1&&r===n},h5=e=>{if(!e)return null;if(va(e))return e;let t=e.length;if(!nS(t))return null;const n=new Array(t);for(;t-- >0;)n[t]=e[t];return n},m5=(e=>t=>e&&t instanceof e)(typeof Uint8Array<"u"&&sg(Uint8Array)),g5=(e,t)=>{const r=(e&&e[Symbol.iterator]).call(e);let o;for(;(o=r.next())&&!o.done;){const i=o.value;t.call(e,i[0],i[1])}},v5=(e,t)=>{let n;const r=[];for(;(n=e.exec(t))!==null;)r.push(n);return r},y5=lr("HTMLFormElement"),x5=e=>e.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,function(n,r,o){return r.toUpperCase()+o}),T0=(({hasOwnProperty:e})=>(t,n)=>e.call(t,n))(Object.prototype),b5=lr("RegExp"),aS=(e,t)=>{const n=Object.getOwnPropertyDescriptors(e),r={};gl(n,(o,i)=>{let a;(a=t(o,i,e))!==!1&&(r[i]=a||o)}),Object.defineProperties(e,r)},w5=e=>{aS(e,(t,n)=>{if(Fn(e)&&["arguments","caller","callee"].indexOf(n)!==-1)return!1;const r=e[n];if(Fn(r)){if(t.enumerable=!1,"writable"in t){t.writable=!1;return}t.set||(t.set=()=>{throw Error("Can not rewrite read-only method '"+n+"'")})}})},S5=(e,t)=>{const n={},r=o=>{o.forEach(i=>{n[i]=!0})};return va(e)?r(e):r(String(e).split(t)),n},C5=()=>{},E5=(e,t)=>e!=null&&Number.isFinite(e=+e)?e:t,Sf="abcdefghijklmnopqrstuvwxyz",$0="0123456789",sS={DIGIT:$0,ALPHA:Sf,ALPHA_DIGIT:Sf+Sf.toUpperCase()+$0},R5=(e=16,t=sS.ALPHA_DIGIT)=>{let n="";const{length:r}=t;for(;e--;)n+=t[Math.random()*r|0];return n};function P5(e){return!!(e&&Fn(e.append)&&e[Symbol.toStringTag]==="FormData"&&e[Symbol.iterator])}const k5=e=>{const t=new Array(10),n=(r,o)=>{if($d(r)){if(t.indexOf(r)>=0)return;if(!("toJSON"in r)){t[o]=r;const i=va(r)?[]:{};return gl(r,(a,s)=>{const l=n(a,o+1);!qs(l)&&(i[s]=l)}),t[o]=void 0,i}}return r};return n(e,0)},T5=lr("AsyncFunction"),$5=e=>e&&($d(e)||Fn(e))&&Fn(e.then)&&Fn(e.catch),A={isArray:va,isArrayBuffer:tS,isBuffer:qI,isFormData:n5,isArrayBufferView:GI,isString:XI,isNumber:nS,isBoolean:QI,isObject:$d,isPlainObject:Eu,isReadableStream:o5,isRequest:i5,isResponse:a5,isHeaders:s5,isUndefined:qs,isDate:YI,isFile:JI,isBlob:ZI,isRegExp:b5,isFunction:Fn,isStream:t5,isURLSearchParams:r5,isTypedArray:m5,isFileList:e5,forEach:gl,merge:eh,extend:u5,trim:l5,stripBOM:c5,inherits:d5,toFlatObject:f5,kindOf:kd,kindOfTest:lr,endsWith:p5,toArray:h5,forEachEntry:g5,matchAll:v5,isHTMLForm:y5,hasOwnProperty:T0,hasOwnProp:T0,reduceDescriptors:aS,freezeMethods:w5,toObjectSet:S5,toCamelCase:x5,noop:C5,toFiniteNumber:E5,findKey:rS,global:oS,isContextDefined:iS,ALPHABET:sS,generateString:R5,isSpecCompliantForm:P5,toJSONObject:k5,isAsyncFn:T5,isThenable:$5};function we(e,t,n,r,o){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=new Error().stack,this.message=e,this.name="AxiosError",t&&(this.code=t),n&&(this.config=n),r&&(this.request=r),o&&(this.response=o)}A.inherits(we,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:A.toJSONObject(this.config),code:this.code,status:this.response&&this.response.status?this.response.status:null}}});const lS=we.prototype,uS={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach(e=>{uS[e]={value:e}});Object.defineProperties(we,uS);Object.defineProperty(lS,"isAxiosError",{value:!0});we.from=(e,t,n,r,o,i)=>{const a=Object.create(lS);return A.toFlatObject(e,a,function(l){return l!==Error.prototype},s=>s!=="isAxiosError"),we.call(a,e.message,t,n,r,o),a.cause=e,a.name=e.name,i&&Object.assign(a,i),a};const O5=null;function th(e){return A.isPlainObject(e)||A.isArray(e)}function cS(e){return A.endsWith(e,"[]")?e.slice(0,-2):e}function O0(e,t,n){return e?e.concat(t).map(function(o,i){return o=cS(o),!n&&i?"["+o+"]":o}).join(n?".":""):t}function M5(e){return A.isArray(e)&&!e.some(th)}const _5=A.toFlatObject(A,{},null,function(t){return/^is[A-Z]/.test(t)});function Od(e,t,n){if(!A.isObject(e))throw new TypeError("target must be an object");t=t||new FormData,n=A.toFlatObject(n,{metaTokens:!0,dots:!1,indexes:!1},!1,function(h,C){return!A.isUndefined(C[h])});const r=n.metaTokens,o=n.visitor||c,i=n.dots,a=n.indexes,l=(n.Blob||typeof Blob<"u"&&Blob)&&A.isSpecCompliantForm(t);if(!A.isFunction(o))throw new TypeError("visitor must be a function");function u(p){if(p===null)return"";if(A.isDate(p))return p.toISOString();if(!l&&A.isBlob(p))throw new we("Blob is not supported. Use a Buffer instead.");return A.isArrayBuffer(p)||A.isTypedArray(p)?l&&typeof Blob=="function"?new Blob([p]):Buffer.from(p):p}function c(p,h,C){let m=p;if(p&&!C&&typeof p=="object"){if(A.endsWith(h,"{}"))h=r?h:h.slice(0,-2),p=JSON.stringify(p);else if(A.isArray(p)&&M5(p)||(A.isFileList(p)||A.endsWith(h,"[]"))&&(m=A.toArray(p)))return h=cS(h),m.forEach(function(v,w){!(A.isUndefined(v)||v===null)&&t.append(a===!0?O0([h],w,i):a===null?h:h+"[]",u(v))}),!1}return th(p)?!0:(t.append(O0(C,h,i),u(p)),!1)}const d=[],f=Object.assign(_5,{defaultVisitor:c,convertValue:u,isVisitable:th});function g(p,h){if(!A.isUndefined(p)){if(d.indexOf(p)!==-1)throw Error("Circular reference detected in "+h.join("."));d.push(p),A.forEach(p,function(m,y){(!(A.isUndefined(m)||m===null)&&o.call(t,m,A.isString(y)?y.trim():y,h,f))===!0&&g(m,h?h.concat(y):[y])}),d.pop()}}if(!A.isObject(e))throw new TypeError("data must be an object");return g(e),t}function M0(e){const t={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(e).replace(/[!'()~]|%20|%00/g,function(r){return t[r]})}function lg(e,t){this._pairs=[],e&&Od(e,this,t)}const dS=lg.prototype;dS.append=function(t,n){this._pairs.push([t,n])};dS.toString=function(t){const n=t?function(r){return t.call(this,r,M0)}:M0;return this._pairs.map(function(o){return n(o[0])+"="+n(o[1])},"").join("&")};function j5(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function fS(e,t,n){if(!t)return e;const r=n&&n.encode||j5,o=n&&n.serialize;let i;if(o?i=o(t,n):i=A.isURLSearchParams(t)?t.toString():new lg(t,n).toString(r),i){const a=e.indexOf("#");a!==-1&&(e=e.slice(0,a)),e+=(e.indexOf("?")===-1?"?":"&")+i}return e}class _0{constructor(){this.handlers=[]}use(t,n,r){return this.handlers.push({fulfilled:t,rejected:n,synchronous:r?r.synchronous:!1,runWhen:r?r.runWhen:null}),this.handlers.length-1}eject(t){this.handlers[t]&&(this.handlers[t]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(t){A.forEach(this.handlers,function(r){r!==null&&t(r)})}}const pS={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},N5=typeof URLSearchParams<"u"?URLSearchParams:lg,A5=typeof FormData<"u"?FormData:null,L5=typeof Blob<"u"?Blob:null,I5={isBrowser:!0,classes:{URLSearchParams:N5,FormData:A5,Blob:L5},protocols:["http","https","file","blob","url","data"]},ug=typeof window<"u"&&typeof document<"u",F5=(e=>ug&&["ReactNative","NativeScript","NS"].indexOf(e)<0)(typeof navigator<"u"&&navigator.product),D5=typeof WorkerGlobalScope<"u"&&self instanceof WorkerGlobalScope&&typeof self.importScripts=="function",z5=ug&&window.location.href||"http://localhost",B5=Object.freeze(Object.defineProperty({__proto__:null,hasBrowserEnv:ug,hasStandardBrowserEnv:F5,hasStandardBrowserWebWorkerEnv:D5,origin:z5},Symbol.toStringTag,{value:"Module"})),rr={...B5,...I5};function U5(e,t){return Od(e,new rr.classes.URLSearchParams,Object.assign({visitor:function(n,r,o,i){return rr.isNode&&A.isBuffer(n)?(this.append(r,n.toString("base64")),!1):i.defaultVisitor.apply(this,arguments)}},t))}function W5(e){return A.matchAll(/\w+|\[(\w*)]/g,e).map(t=>t[0]==="[]"?"":t[1]||t[0])}function H5(e){const t={},n=Object.keys(e);let r;const o=n.length;let i;for(r=0;r<o;r++)i=n[r],t[i]=e[i];return t}function hS(e){function t(n,r,o,i){let a=n[i++];if(a==="__proto__")return!0;const s=Number.isFinite(+a),l=i>=n.length;return a=!a&&A.isArray(o)?o.length:a,l?(A.hasOwnProp(o,a)?o[a]=[o[a],r]:o[a]=r,!s):((!o[a]||!A.isObject(o[a]))&&(o[a]=[]),t(n,r,o[a],i)&&A.isArray(o[a])&&(o[a]=H5(o[a])),!s)}if(A.isFormData(e)&&A.isFunction(e.entries)){const n={};return A.forEachEntry(e,(r,o)=>{t(W5(r),o,n,0)}),n}return null}function V5(e,t,n){if(A.isString(e))try{return(t||JSON.parse)(e),A.trim(e)}catch(r){if(r.name!=="SyntaxError")throw r}return(n||JSON.stringify)(e)}const vl={transitional:pS,adapter:["xhr","http","fetch"],transformRequest:[function(t,n){const r=n.getContentType()||"",o=r.indexOf("application/json")>-1,i=A.isObject(t);if(i&&A.isHTMLForm(t)&&(t=new FormData(t)),A.isFormData(t))return o?JSON.stringify(hS(t)):t;if(A.isArrayBuffer(t)||A.isBuffer(t)||A.isStream(t)||A.isFile(t)||A.isBlob(t)||A.isReadableStream(t))return t;if(A.isArrayBufferView(t))return t.buffer;if(A.isURLSearchParams(t))return n.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),t.toString();let s;if(i){if(r.indexOf("application/x-www-form-urlencoded")>-1)return U5(t,this.formSerializer).toString();if((s=A.isFileList(t))||r.indexOf("multipart/form-data")>-1){const l=this.env&&this.env.FormData;return Od(s?{"files[]":t}:t,l&&new l,this.formSerializer)}}return i||o?(n.setContentType("application/json",!1),V5(t)):t}],transformResponse:[function(t){const n=this.transitional||vl.transitional,r=n&&n.forcedJSONParsing,o=this.responseType==="json";if(A.isResponse(t)||A.isReadableStream(t))return t;if(t&&A.isString(t)&&(r&&!this.responseType||o)){const a=!(n&&n.silentJSONParsing)&&o;try{return JSON.parse(t)}catch(s){if(a)throw s.name==="SyntaxError"?we.from(s,we.ERR_BAD_RESPONSE,this,null,this.response):s}}return t}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:rr.classes.FormData,Blob:rr.classes.Blob},validateStatus:function(t){return t>=200&&t<300},headers:{common:{Accept:"application/json, text/plain, */*","Content-Type":void 0}}};A.forEach(["delete","get","head","post","put","patch"],e=>{vl.headers[e]={}});const K5=A.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),q5=e=>{const t={};let n,r,o;return e&&e.split(`
`).forEach(function(a){o=a.indexOf(":"),n=a.substring(0,o).trim().toLowerCase(),r=a.substring(o+1).trim(),!(!n||t[n]&&K5[n])&&(n==="set-cookie"?t[n]?t[n].push(r):t[n]=[r]:t[n]=t[n]?t[n]+", "+r:r)}),t},j0=Symbol("internals");function Va(e){return e&&String(e).trim().toLowerCase()}function Ru(e){return e===!1||e==null?e:A.isArray(e)?e.map(Ru):String(e)}function G5(e){const t=Object.create(null),n=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;let r;for(;r=n.exec(e);)t[r[1]]=r[2];return t}const X5=e=>/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(e.trim());function Cf(e,t,n,r,o){if(A.isFunction(r))return r.call(this,t,n);if(o&&(t=n),!!A.isString(t)){if(A.isString(r))return t.indexOf(r)!==-1;if(A.isRegExp(r))return r.test(t)}}function Q5(e){return e.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,(t,n,r)=>n.toUpperCase()+r)}function Y5(e,t){const n=A.toCamelCase(" "+t);["get","set","has"].forEach(r=>{Object.defineProperty(e,r+n,{value:function(o,i,a){return this[r].call(this,t,o,i,a)},configurable:!0})})}class un{constructor(t){t&&this.set(t)}set(t,n,r){const o=this;function i(s,l,u){const c=Va(l);if(!c)throw new Error("header name must be a non-empty string");const d=A.findKey(o,c);(!d||o[d]===void 0||u===!0||u===void 0&&o[d]!==!1)&&(o[d||l]=Ru(s))}const a=(s,l)=>A.forEach(s,(u,c)=>i(u,c,l));if(A.isPlainObject(t)||t instanceof this.constructor)a(t,n);else if(A.isString(t)&&(t=t.trim())&&!X5(t))a(q5(t),n);else if(A.isHeaders(t))for(const[s,l]of t.entries())i(l,s,r);else t!=null&&i(n,t,r);return this}get(t,n){if(t=Va(t),t){const r=A.findKey(this,t);if(r){const o=this[r];if(!n)return o;if(n===!0)return G5(o);if(A.isFunction(n))return n.call(this,o,r);if(A.isRegExp(n))return n.exec(o);throw new TypeError("parser must be boolean|regexp|function")}}}has(t,n){if(t=Va(t),t){const r=A.findKey(this,t);return!!(r&&this[r]!==void 0&&(!n||Cf(this,this[r],r,n)))}return!1}delete(t,n){const r=this;let o=!1;function i(a){if(a=Va(a),a){const s=A.findKey(r,a);s&&(!n||Cf(r,r[s],s,n))&&(delete r[s],o=!0)}}return A.isArray(t)?t.forEach(i):i(t),o}clear(t){const n=Object.keys(this);let r=n.length,o=!1;for(;r--;){const i=n[r];(!t||Cf(this,this[i],i,t,!0))&&(delete this[i],o=!0)}return o}normalize(t){const n=this,r={};return A.forEach(this,(o,i)=>{const a=A.findKey(r,i);if(a){n[a]=Ru(o),delete n[i];return}const s=t?Q5(i):String(i).trim();s!==i&&delete n[i],n[s]=Ru(o),r[s]=!0}),this}concat(...t){return this.constructor.concat(this,...t)}toJSON(t){const n=Object.create(null);return A.forEach(this,(r,o)=>{r!=null&&r!==!1&&(n[o]=t&&A.isArray(r)?r.join(", "):r)}),n}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map(([t,n])=>t+": "+n).join(`
`)}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(t){return t instanceof this?t:new this(t)}static concat(t,...n){const r=new this(t);return n.forEach(o=>r.set(o)),r}static accessor(t){const r=(this[j0]=this[j0]={accessors:{}}).accessors,o=this.prototype;function i(a){const s=Va(a);r[s]||(Y5(o,a),r[s]=!0)}return A.isArray(t)?t.forEach(i):i(t),this}}un.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]);A.reduceDescriptors(un.prototype,({value:e},t)=>{let n=t[0].toUpperCase()+t.slice(1);return{get:()=>e,set(r){this[n]=r}}});A.freezeMethods(un);function Ef(e,t){const n=this||vl,r=t||n,o=un.from(r.headers);let i=r.data;return A.forEach(e,function(s){i=s.call(n,i,o.normalize(),t?t.status:void 0)}),o.normalize(),i}function mS(e){return!!(e&&e.__CANCEL__)}function ya(e,t,n){we.call(this,e??"canceled",we.ERR_CANCELED,t,n),this.name="CanceledError"}A.inherits(ya,we,{__CANCEL__:!0});function gS(e,t,n){const r=n.config.validateStatus;!n.status||!r||r(n.status)?e(n):t(new we("Request failed with status code "+n.status,[we.ERR_BAD_REQUEST,we.ERR_BAD_RESPONSE][Math.floor(n.status/100)-4],n.config,n.request,n))}function J5(e){const t=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return t&&t[1]||""}function Z5(e,t){e=e||10;const n=new Array(e),r=new Array(e);let o=0,i=0,a;return t=t!==void 0?t:1e3,function(l){const u=Date.now(),c=r[i];a||(a=u),n[o]=l,r[o]=u;let d=i,f=0;for(;d!==o;)f+=n[d++],d=d%e;if(o=(o+1)%e,o===i&&(i=(i+1)%e),u-a<t)return;const g=c&&u-c;return g?Math.round(f*1e3/g):void 0}}function eF(e,t){let n=0;const r=1e3/t;let o=null;return function(){const a=this===!0,s=Date.now();if(a||s-n>r)return o&&(clearTimeout(o),o=null),n=s,e.apply(null,arguments);o||(o=setTimeout(()=>(o=null,n=Date.now(),e.apply(null,arguments)),r-(s-n)))}}const lc=(e,t,n=3)=>{let r=0;const o=Z5(50,250);return eF(i=>{const a=i.loaded,s=i.lengthComputable?i.total:void 0,l=a-r,u=o(l),c=a<=s;r=a;const d={loaded:a,total:s,progress:s?a/s:void 0,bytes:l,rate:u||void 0,estimated:u&&s&&c?(s-a)/u:void 0,event:i,lengthComputable:s!=null};d[t?"download":"upload"]=!0,e(d)},n)},tF=rr.hasStandardBrowserEnv?function(){const t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");let r;function o(i){let a=i;return t&&(n.setAttribute("href",a),a=n.href),n.setAttribute("href",a),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:n.pathname.charAt(0)==="/"?n.pathname:"/"+n.pathname}}return r=o(window.location.href),function(a){const s=A.isString(a)?o(a):a;return s.protocol===r.protocol&&s.host===r.host}}():function(){return function(){return!0}}(),nF=rr.hasStandardBrowserEnv?{write(e,t,n,r,o,i){const a=[e+"="+encodeURIComponent(t)];A.isNumber(n)&&a.push("expires="+new Date(n).toGMTString()),A.isString(r)&&a.push("path="+r),A.isString(o)&&a.push("domain="+o),i===!0&&a.push("secure"),document.cookie=a.join("; ")},read(e){const t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove(e){this.write(e,"",Date.now()-864e5)}}:{write(){},read(){return null},remove(){}};function rF(e){return/^([a-z][a-z\d+\-.]*:)?\/\//i.test(e)}function oF(e,t){return t?e.replace(/\/?\/$/,"")+"/"+t.replace(/^\/+/,""):e}function vS(e,t){return e&&!rF(t)?oF(e,t):t}const N0=e=>e instanceof un?{...e}:e;function ei(e,t){t=t||{};const n={};function r(u,c,d){return A.isPlainObject(u)&&A.isPlainObject(c)?A.merge.call({caseless:d},u,c):A.isPlainObject(c)?A.merge({},c):A.isArray(c)?c.slice():c}function o(u,c,d){if(A.isUndefined(c)){if(!A.isUndefined(u))return r(void 0,u,d)}else return r(u,c,d)}function i(u,c){if(!A.isUndefined(c))return r(void 0,c)}function a(u,c){if(A.isUndefined(c)){if(!A.isUndefined(u))return r(void 0,u)}else return r(void 0,c)}function s(u,c,d){if(d in t)return r(u,c);if(d in e)return r(void 0,u)}const l={url:i,method:i,data:i,baseURL:a,transformRequest:a,transformResponse:a,paramsSerializer:a,timeout:a,timeoutMessage:a,withCredentials:a,withXSRFToken:a,adapter:a,responseType:a,xsrfCookieName:a,xsrfHeaderName:a,onUploadProgress:a,onDownloadProgress:a,decompress:a,maxContentLength:a,maxBodyLength:a,beforeRedirect:a,transport:a,httpAgent:a,httpsAgent:a,cancelToken:a,socketPath:a,responseEncoding:a,validateStatus:s,headers:(u,c)=>o(N0(u),N0(c),!0)};return A.forEach(Object.keys(Object.assign({},e,t)),function(c){const d=l[c]||o,f=d(e[c],t[c],c);A.isUndefined(f)&&d!==s||(n[c]=f)}),n}const yS=e=>{const t=ei({},e);let{data:n,withXSRFToken:r,xsrfHeaderName:o,xsrfCookieName:i,headers:a,auth:s}=t;t.headers=a=un.from(a),t.url=fS(vS(t.baseURL,t.url),e.params,e.paramsSerializer),s&&a.set("Authorization","Basic "+btoa((s.username||"")+":"+(s.password?unescape(encodeURIComponent(s.password)):"")));let l;if(A.isFormData(n)){if(rr.hasStandardBrowserEnv||rr.hasStandardBrowserWebWorkerEnv)a.setContentType(void 0);else if((l=a.getContentType())!==!1){const[u,...c]=l?l.split(";").map(d=>d.trim()).filter(Boolean):[];a.setContentType([u||"multipart/form-data",...c].join("; "))}}if(rr.hasStandardBrowserEnv&&(r&&A.isFunction(r)&&(r=r(t)),r||r!==!1&&tF(t.url))){const u=o&&i&&nF.read(i);u&&a.set(o,u)}return t},iF=typeof XMLHttpRequest<"u",aF=iF&&function(e){return new Promise(function(n,r){const o=yS(e);let i=o.data;const a=un.from(o.headers).normalize();let{responseType:s}=o,l;function u(){o.cancelToken&&o.cancelToken.unsubscribe(l),o.signal&&o.signal.removeEventListener("abort",l)}let c=new XMLHttpRequest;c.open(o.method.toUpperCase(),o.url,!0),c.timeout=o.timeout;function d(){if(!c)return;const g=un.from("getAllResponseHeaders"in c&&c.getAllResponseHeaders()),h={data:!s||s==="text"||s==="json"?c.responseText:c.response,status:c.status,statusText:c.statusText,headers:g,config:e,request:c};gS(function(m){n(m),u()},function(m){r(m),u()},h),c=null}"onloadend"in c?c.onloadend=d:c.onreadystatechange=function(){!c||c.readyState!==4||c.status===0&&!(c.responseURL&&c.responseURL.indexOf("file:")===0)||setTimeout(d)},c.onabort=function(){c&&(r(new we("Request aborted",we.ECONNABORTED,o,c)),c=null)},c.onerror=function(){r(new we("Network Error",we.ERR_NETWORK,o,c)),c=null},c.ontimeout=function(){let p=o.timeout?"timeout of "+o.timeout+"ms exceeded":"timeout exceeded";const h=o.transitional||pS;o.timeoutErrorMessage&&(p=o.timeoutErrorMessage),r(new we(p,h.clarifyTimeoutError?we.ETIMEDOUT:we.ECONNABORTED,o,c)),c=null},i===void 0&&a.setContentType(null),"setRequestHeader"in c&&A.forEach(a.toJSON(),function(p,h){c.setRequestHeader(h,p)}),A.isUndefined(o.withCredentials)||(c.withCredentials=!!o.withCredentials),s&&s!=="json"&&(c.responseType=o.responseType),typeof o.onDownloadProgress=="function"&&c.addEventListener("progress",lc(o.onDownloadProgress,!0)),typeof o.onUploadProgress=="function"&&c.upload&&c.upload.addEventListener("progress",lc(o.onUploadProgress)),(o.cancelToken||o.signal)&&(l=g=>{c&&(r(!g||g.type?new ya(null,e,c):g),c.abort(),c=null)},o.cancelToken&&o.cancelToken.subscribe(l),o.signal&&(o.signal.aborted?l():o.signal.addEventListener("abort",l)));const f=J5(o.url);if(f&&rr.protocols.indexOf(f)===-1){r(new we("Unsupported protocol "+f+":",we.ERR_BAD_REQUEST,e));return}c.send(i||null)})},sF=(e,t)=>{let n=new AbortController,r;const o=function(l){if(!r){r=!0,a();const u=l instanceof Error?l:this.reason;n.abort(u instanceof we?u:new ya(u instanceof Error?u.message:u))}};let i=t&&setTimeout(()=>{o(new we(`timeout ${t} of ms exceeded`,we.ETIMEDOUT))},t);const a=()=>{e&&(i&&clearTimeout(i),i=null,e.forEach(l=>{l&&(l.removeEventListener?l.removeEventListener("abort",o):l.unsubscribe(o))}),e=null)};e.forEach(l=>l&&l.addEventListener&&l.addEventListener("abort",o));const{signal:s}=n;return s.unsubscribe=a,[s,()=>{i&&clearTimeout(i),i=null}]},lF=function*(e,t){let n=e.byteLength;if(!t||n<t){yield e;return}let r=0,o;for(;r<n;)o=r+t,yield e.slice(r,o),r=o},uF=async function*(e,t,n){for await(const r of e)yield*lF(ArrayBuffer.isView(r)?r:await n(String(r)),t)},A0=(e,t,n,r,o)=>{const i=uF(e,t,o);let a=0;return new ReadableStream({type:"bytes",async pull(s){const{done:l,value:u}=await i.next();if(l){s.close(),r();return}let c=u.byteLength;n&&n(a+=c),s.enqueue(new Uint8Array(u))},cancel(s){return r(s),i.return()}},{highWaterMark:2})},L0=(e,t)=>{const n=e!=null;return r=>setTimeout(()=>t({lengthComputable:n,total:e,loaded:r}))},Md=typeof fetch=="function"&&typeof Request=="function"&&typeof Response=="function",xS=Md&&typeof ReadableStream=="function",nh=Md&&(typeof TextEncoder=="function"?(e=>t=>e.encode(t))(new TextEncoder):async e=>new Uint8Array(await new Response(e).arrayBuffer())),cF=xS&&(()=>{let e=!1;const t=new Request(rr.origin,{body:new ReadableStream,method:"POST",get duplex(){return e=!0,"half"}}).headers.has("Content-Type");return e&&!t})(),I0=64*1024,rh=xS&&!!(()=>{try{return A.isReadableStream(new Response("").body)}catch{}})(),uc={stream:rh&&(e=>e.body)};Md&&(e=>{["text","arrayBuffer","blob","formData","stream"].forEach(t=>{!uc[t]&&(uc[t]=A.isFunction(e[t])?n=>n[t]():(n,r)=>{throw new we(`Response type '${t}' is not supported`,we.ERR_NOT_SUPPORT,r)})})})(new Response);const dF=async e=>{if(e==null)return 0;if(A.isBlob(e))return e.size;if(A.isSpecCompliantForm(e))return(await new Request(e).arrayBuffer()).byteLength;if(A.isArrayBufferView(e))return e.byteLength;if(A.isURLSearchParams(e)&&(e=e+""),A.isString(e))return(await nh(e)).byteLength},fF=async(e,t)=>{const n=A.toFiniteNumber(e.getContentLength());return n??dF(t)},pF=Md&&(async e=>{let{url:t,method:n,data:r,signal:o,cancelToken:i,timeout:a,onDownloadProgress:s,onUploadProgress:l,responseType:u,headers:c,withCredentials:d="same-origin",fetchOptions:f}=yS(e);u=u?(u+"").toLowerCase():"text";let[g,p]=o||i||a?sF([o,i],a):[],h,C;const m=()=>{!h&&setTimeout(()=>{g&&g.unsubscribe()}),h=!0};let y;try{if(l&&cF&&n!=="get"&&n!=="head"&&(y=await fF(c,r))!==0){let P=new Request(t,{method:"POST",body:r,duplex:"half"}),x;A.isFormData(r)&&(x=P.headers.get("content-type"))&&c.setContentType(x),P.body&&(r=A0(P.body,I0,L0(y,lc(l)),null,nh))}A.isString(d)||(d=d?"cors":"omit"),C=new Request(t,{...f,signal:g,method:n.toUpperCase(),headers:c.normalize().toJSON(),body:r,duplex:"half",withCredentials:d});let v=await fetch(C);const w=rh&&(u==="stream"||u==="response");if(rh&&(s||w)){const P={};["status","statusText","headers"].forEach(k=>{P[k]=v[k]});const x=A.toFiniteNumber(v.headers.get("content-length"));v=new Response(A0(v.body,I0,s&&L0(x,lc(s,!0)),w&&m,nh),P)}u=u||"text";let R=await uc[A.findKey(uc,u)||"text"](v,e);return!w&&m(),p&&p(),await new Promise((P,x)=>{gS(P,x,{data:R,headers:un.from(v.headers),status:v.status,statusText:v.statusText,config:e,request:C})})}catch(v){throw m(),v&&v.name==="TypeError"&&/fetch/i.test(v.message)?Object.assign(new we("Network Error",we.ERR_NETWORK,e,C),{cause:v.cause||v}):we.from(v,v&&v.code,e,C)}}),oh={http:O5,xhr:aF,fetch:pF};A.forEach(oh,(e,t)=>{if(e){try{Object.defineProperty(e,"name",{value:t})}catch{}Object.defineProperty(e,"adapterName",{value:t})}});const F0=e=>`- ${e}`,hF=e=>A.isFunction(e)||e===null||e===!1,bS={getAdapter:e=>{e=A.isArray(e)?e:[e];const{length:t}=e;let n,r;const o={};for(let i=0;i<t;i++){n=e[i];let a;if(r=n,!hF(n)&&(r=oh[(a=String(n)).toLowerCase()],r===void 0))throw new we(`Unknown adapter '${a}'`);if(r)break;o[a||"#"+i]=r}if(!r){const i=Object.entries(o).map(([s,l])=>`adapter ${s} `+(l===!1?"is not supported by the environment":"is not available in the build"));let a=t?i.length>1?`since :
`+i.map(F0).join(`
`):" "+F0(i[0]):"as no adapter specified";throw new we("There is no suitable adapter to dispatch the request "+a,"ERR_NOT_SUPPORT")}return r},adapters:oh};function Rf(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new ya(null,e)}function D0(e){return Rf(e),e.headers=un.from(e.headers),e.data=Ef.call(e,e.transformRequest),["post","put","patch"].indexOf(e.method)!==-1&&e.headers.setContentType("application/x-www-form-urlencoded",!1),bS.getAdapter(e.adapter||vl.adapter)(e).then(function(r){return Rf(e),r.data=Ef.call(e,e.transformResponse,r),r.headers=un.from(r.headers),r},function(r){return mS(r)||(Rf(e),r&&r.response&&(r.response.data=Ef.call(e,e.transformResponse,r.response),r.response.headers=un.from(r.response.headers))),Promise.reject(r)})}const wS="1.7.2",cg={};["object","boolean","number","function","string","symbol"].forEach((e,t)=>{cg[e]=function(r){return typeof r===e||"a"+(t<1?"n ":" ")+e}});const z0={};cg.transitional=function(t,n,r){function o(i,a){return"[Axios v"+wS+"] Transitional option '"+i+"'"+a+(r?". "+r:"")}return(i,a,s)=>{if(t===!1)throw new we(o(a," has been removed"+(n?" in "+n:"")),we.ERR_DEPRECATED);return n&&!z0[a]&&(z0[a]=!0,console.warn(o(a," has been deprecated since v"+n+" and will be removed in the near future"))),t?t(i,a,s):!0}};function mF(e,t,n){if(typeof e!="object")throw new we("options must be an object",we.ERR_BAD_OPTION_VALUE);const r=Object.keys(e);let o=r.length;for(;o-- >0;){const i=r[o],a=t[i];if(a){const s=e[i],l=s===void 0||a(s,i,e);if(l!==!0)throw new we("option "+i+" must be "+l,we.ERR_BAD_OPTION_VALUE);continue}if(n!==!0)throw new we("Unknown option "+i,we.ERR_BAD_OPTION)}}const ih={assertOptions:mF,validators:cg},Vr=ih.validators;class Bo{constructor(t){this.defaults=t,this.interceptors={request:new _0,response:new _0}}async request(t,n){try{return await this._request(t,n)}catch(r){if(r instanceof Error){let o;Error.captureStackTrace?Error.captureStackTrace(o={}):o=new Error;const i=o.stack?o.stack.replace(/^.+\n/,""):"";try{r.stack?i&&!String(r.stack).endsWith(i.replace(/^.+\n.+\n/,""))&&(r.stack+=`
`+i):r.stack=i}catch{}}throw r}}_request(t,n){typeof t=="string"?(n=n||{},n.url=t):n=t||{},n=ei(this.defaults,n);const{transitional:r,paramsSerializer:o,headers:i}=n;r!==void 0&&ih.assertOptions(r,{silentJSONParsing:Vr.transitional(Vr.boolean),forcedJSONParsing:Vr.transitional(Vr.boolean),clarifyTimeoutError:Vr.transitional(Vr.boolean)},!1),o!=null&&(A.isFunction(o)?n.paramsSerializer={serialize:o}:ih.assertOptions(o,{encode:Vr.function,serialize:Vr.function},!0)),n.method=(n.method||this.defaults.method||"get").toLowerCase();let a=i&&A.merge(i.common,i[n.method]);i&&A.forEach(["delete","get","head","post","put","patch","common"],p=>{delete i[p]}),n.headers=un.concat(a,i);const s=[];let l=!0;this.interceptors.request.forEach(function(h){typeof h.runWhen=="function"&&h.runWhen(n)===!1||(l=l&&h.synchronous,s.unshift(h.fulfilled,h.rejected))});const u=[];this.interceptors.response.forEach(function(h){u.push(h.fulfilled,h.rejected)});let c,d=0,f;if(!l){const p=[D0.bind(this),void 0];for(p.unshift.apply(p,s),p.push.apply(p,u),f=p.length,c=Promise.resolve(n);d<f;)c=c.then(p[d++],p[d++]);return c}f=s.length;let g=n;for(d=0;d<f;){const p=s[d++],h=s[d++];try{g=p(g)}catch(C){h.call(this,C);break}}try{c=D0.call(this,g)}catch(p){return Promise.reject(p)}for(d=0,f=u.length;d<f;)c=c.then(u[d++],u[d++]);return c}getUri(t){t=ei(this.defaults,t);const n=vS(t.baseURL,t.url);return fS(n,t.params,t.paramsSerializer)}}A.forEach(["delete","get","head","options"],function(t){Bo.prototype[t]=function(n,r){return this.request(ei(r||{},{method:t,url:n,data:(r||{}).data}))}});A.forEach(["post","put","patch"],function(t){function n(r){return function(i,a,s){return this.request(ei(s||{},{method:t,headers:r?{"Content-Type":"multipart/form-data"}:{},url:i,data:a}))}}Bo.prototype[t]=n(),Bo.prototype[t+"Form"]=n(!0)});class dg{constructor(t){if(typeof t!="function")throw new TypeError("executor must be a function.");let n;this.promise=new Promise(function(i){n=i});const r=this;this.promise.then(o=>{if(!r._listeners)return;let i=r._listeners.length;for(;i-- >0;)r._listeners[i](o);r._listeners=null}),this.promise.then=o=>{let i;const a=new Promise(s=>{r.subscribe(s),i=s}).then(o);return a.cancel=function(){r.unsubscribe(i)},a},t(function(i,a,s){r.reason||(r.reason=new ya(i,a,s),n(r.reason))})}throwIfRequested(){if(this.reason)throw this.reason}subscribe(t){if(this.reason){t(this.reason);return}this._listeners?this._listeners.push(t):this._listeners=[t]}unsubscribe(t){if(!this._listeners)return;const n=this._listeners.indexOf(t);n!==-1&&this._listeners.splice(n,1)}static source(){let t;return{token:new dg(function(o){t=o}),cancel:t}}}function gF(e){return function(n){return e.apply(null,n)}}function vF(e){return A.isObject(e)&&e.isAxiosError===!0}const ah={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(ah).forEach(([e,t])=>{ah[t]=e});function SS(e){const t=new Bo(e),n=eS(Bo.prototype.request,t);return A.extend(n,Bo.prototype,t,{allOwnKeys:!0}),A.extend(n,t,null,{allOwnKeys:!0}),n.create=function(o){return SS(ei(e,o))},n}const wt=SS(vl);wt.Axios=Bo;wt.CanceledError=ya;wt.CancelToken=dg;wt.isCancel=mS;wt.VERSION=wS;wt.toFormData=Od;wt.AxiosError=we;wt.Cancel=wt.CanceledError;wt.all=function(t){return Promise.all(t)};wt.spread=gF;wt.isAxiosError=vF;wt.mergeConfig=ei;wt.AxiosHeaders=un;wt.formToJSON=e=>hS(A.isHTMLForm(e)?new FormData(e):e);wt.getAdapter=bS.getAdapter;wt.HttpStatusCode=ah;wt.default=wt;var sh,aa=function(){if(!sh)throw new Error("Backend client not configured. Call configureBackendClient first.");return sh},yF=function(e,t,n){var r=wt.create({baseURL:e});r.defaults.withCredentials=n,sh=r},xF=function(e){var t=e.columns;return S.jsx(pI,{children:S.jsxs(Pd,{children:[t.map(function(n){return S.jsx(Nr,{sx:{backgroundColor:"primary.main",color:"common.white",fontSize:16,minWidth:n.minWidth},children:n.label},n.id)}),S.jsx(Nr,{sx:{backgroundColor:"primary.main",color:"common.white",fontSize:16,width:100}},"submit-cell")]})})},bF=function(e){var t=e.rows,n=e.onClickRowAction,r=e.columns,o=e.updateFilters;return S.jsx(S.Fragment,{children:t.map(function(i){return S.jsx(Pd,{sx:{"&:nth-of-type(odd)":{backgroundColor:"action.hover"},"&:hover":{cursor:"pointer"}},onClick:function(a){return n(i.id,a.ctrlKey||a.button===1)},hover:!0,role:"checkbox",tabIndex:-1,children:r.map(function(a){var s=i[a.id];return S.jsx(Nr,{children:a.renderValue?a.renderValue(s,a,o):"".concat(s)},a.id)})},i.id)})})},fg={},Pf={};const wF=Lr(t2);var B0;function xa(){return B0||(B0=1,function(e){"use client";Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.createSvgIcon}});var t=wF}(Pf)),Pf}var SF=wo;Object.defineProperty(fg,"__esModule",{value:!0});var cc=fg.default=void 0,CF=SF(xa()),EF=S;cc=fg.default=(0,CF.default)((0,EF.jsx)("path",{d:"M22 3H7c-.69 0-1.23.35-1.59.88L0 12l5.41 8.11c.36.53.9.89 1.59.89h15c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2m-3 12.59L17.59 17 14 13.41 10.41 17 9 15.59 12.59 12 9 8.41 10.41 7 14 10.59 17.59 7 19 8.41 15.41 12z"}),"Backspace");var RF=function(e){var t=e.validationError,n=e.filterKey,r=e.filterValue,o=e.filterHelper,i=e.setFilterValue,a=e.onFilterClear;return S.jsx(Ks,{size:"small",error:!!t,helperText:t||o,value:r||"",onChange:function(s){i(s.target.value)},InputProps:{endAdornment:r&&a?S.jsx(Jp,{position:"end",children:S.jsx(Nn,{onClick:function(s){s.preventDefault(),s.stopPropagation(),a(n)},size:"small",children:S.jsx(cc,{})})}):void 0}})},Xr=function(){return Xr=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++){t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e},Xr.apply(this,arguments)},PF=function(e){var t=e.columns,n=e.onFilterClear,r=e.setFormValidationErrors,o=e.removeFilterError,i=e.setFilterValues,a=e.handleFilterChange,s=e.filterValues,l=e.formValidationErrors;return S.jsxs(S.Fragment,{children:[t.map(function(u){var c=u.filterKey,d=s[c]||"",f=l[c],g=u.filterValidator,p=function(h){var C;if(g&&h&&h.length>0){var m=g(h);m?r(Xr(Xr({},l),(C={},C[c]=m,C))):f&&o(c)}else f&&o(c)};return S.jsx(Nr,{style:{width:u.minWidth},children:u.renderFilter?u.renderFilter({filterKey:c,filterValue:"".concat(d),filterHelper:u.filterHelper,validationError:f,setFilterValue:function(h){var C;i(Xr(Xr({},s),(C={},C[c]=h,C))),p(h.toString())},onFilterClear:function(){return n==null?void 0:n(c)}}):S.jsx(RF,{filterKey:c,filterValue:"".concat(d),filterHelper:u.filterHelper,validationError:f,setFilterValue:function(h){var C;i(Xr(Xr({},s),(C={},C[c]=h,C))),p(h.toString())},onFilterClear:function(){return n==null?void 0:n(c)}})},u.id)}),S.jsx(Nr,{style:{width:100},children:S.jsx(Di,{variant:"contained",disabled:!!Object.keys(l).length,onClick:a,children:"Filter"})},"submit-cell")]})},gs=function(){return gs=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++){t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e},gs.apply(this,arguments)},kF=function(e){var t=e.columns,n=e.filters,r=e.onFilterChange,o=e.onPageChange,i=e.onFilterClear,a=b.useState({}),s=a[0],l=a[1],u=function(h){var C=gs({},s);delete C[h],l(C)},c=b.useState(n),d=c[0],f=c[1],g=function(){r(d)},p=function(h){h.key==="Enter"&&r(d)};return S.jsx(Pd,{sx:{verticalAlign:"baseline"},onKeyPress:p,children:S.jsx(PF,{onPageChange:o,columns:t,onFilterClear:i,setFormValidationErrors:l,removeFilterError:u,setFilterValues:function(h){return f(function(C){return gs(gs({},C),h)})},handleFilterChange:g,filterValues:d,formValidationErrors:s})})},TF=function(e){var t=e.onPageChange,n=e.rows,r=e.columns,o=e.filters,i=e.messageTotalCount,a=e.onClickRowAction,s=e.onFilterChange,l=e.onAddNew,u=e.onFilterClear,c=function(f,g){t(g)},d=function(f){s==null||s(f)};return S.jsxs(S.Fragment,{children:[S.jsx(sI,{sx:{maxHeight:"calc(100vh - 200px)"},children:S.jsxs(VL,{stickyHeader:!0,"aria-label":"sticky table",size:"small",children:[S.jsx(xF,{columns:r}),S.jsxs(YL,{children:[l&&S.jsx(Pd,{children:S.jsx(Nr,{children:S.jsx(Di,{variant:"contained",type:"button",onClick:l,children:"Add new"})})}),s?S.jsx(kF,{onPageChange:t,columns:r,onFilterChange:d,filters:o,onFilterClear:u},JSON.stringify(o)):null,S.jsx(bF,{rows:n,onClickRowAction:a,columns:r,updateFilters:d})]})]})}),S.jsx(AI,{component:"div",count:i,rowsPerPage:o.size&&parseInt(o.size,10)||100,page:o.page&&parseInt(o.page,10)||0,onPageChange:c,rowsPerPageOptions:[]})]})},pg={},$F=wo;Object.defineProperty(pg,"__esModule",{value:!0});var CS=pg.default=void 0,OF=$F(xa()),MF=S;CS=pg.default=(0,OF.default)((0,MF.jsx)("path",{d:"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14"}),"Search");var _F=function(e,t){var n={};return t.forEach(function(r){var o=e.get(r.toString());o&&(n[r]=o.toString())}),n},jF=function(e){return Array.isArray(e)?AF(e):typeof e=="object"?NF(e):e.toString()},NF=function(e){return Object.entries(e).map(function(t){var n=t[0],r=t[1];return"".concat(n,"=").concat(r)}).join(",")},AF=function(e){return e.map(function(t){return"".concat(t.key,"=").concat(t.value)}).join(",")},LF=function(e,t){var n=new URLSearchParams;return e&&Object.entries(e).forEach(function(r){var o,i,a,s=r[0],l=r[1];if(l){var u=(a=(i=t==null?void 0:t[s])===null||i===void 0?void 0:i.call(t,l,s))!==null&&a!==void 0?a:new URLSearchParams((o={},o[s]=l,o));u.forEach(function(c,d){n.append(d,c)})}}),n},IF=function(e){var t=e.filterKey,n=e.value,r=e.isEmptyValueHidden,o=e.updateFilters,i=function(a){var s;a.preventDefault(),a.stopPropagation();var l=(s={},s[t]=jF(n),s);o(l)};return r&&(n==null||n==="")?null:S.jsxs(S.Fragment,{children:[n," ",S.jsx(Nn,{onClick:i,size:"small",children:S.jsx(CS,{})})]})},FF=function(e){var t=e.filterValue,n=e.validationError,r=e.setFilterValue,o=(t==null?void 0:t.split("-"))||"",i=o[0],a=o[1],s=Gt.useState(i),l=s[0],u=s[1],c=Gt.useState(a),d=c[0],f=c[1];return b.useEffect(function(){var g="".concat(l||"").concat(d||l?"-":"").concat(d||"");r(g)},[l,d]),S.jsxs(pn,{container:!0,direction:"row",spacing:1,children:[S.jsx(pn,{item:!0,xs:12,xl:6,children:S.jsx(Ks,{size:"small",error:!!n,helperText:n||"Start",value:l||"",onChange:function(g){u("".concat(g.target.value,":00"))},fullWidth:!0,InputProps:{endAdornment:l&&l.length>0?S.jsx(Jp,{position:"end",children:S.jsx(Nn,{onClick:function(g){g.preventDefault(),g.stopPropagation(),u(void 0)},size:"small",children:S.jsx(cc,{})})}):void 0}})}),S.jsx(pn,{item:!0,xs:12,xl:6,children:S.jsx(Ks,{size:"small",value:d||"",helperText:"End",onChange:function(g){f("".concat(g.target.value,":00"))},fullWidth:!0,InputProps:{endAdornment:d&&d.length>0?S.jsx(Jp,{position:"end",children:S.jsx(Nn,{onClick:function(g){g.preventDefault(),g.stopPropagation(),f(void 0)},size:"small",children:S.jsx(cc,{})})}):void 0}})})]})},DF=function(e){return/^\d*$/.test(e)?void 0:"Value must be numeric!"},kf=function(e){return/^[0-9]*\s*-{0,1}\s*[0-9]*$/.test(e)?void 0:"Value must be numeric or a range!"},zF=function(e){return/^(\d{4}-\d{2}-\d{2}((\s|T)\d{2}:\d{2}:\d{2})?){0,1}\s*-{0,1}\s*(\d{4}-\d{2}-\d{2}((\s|T)\d{2}:\d{2}:\d{2})?){0,1}$/.test(e)?void 0:"Value must be a date(time) or range!"},hg={},BF=wo;Object.defineProperty(hg,"__esModule",{value:!0});var ES=hg.default=void 0,UF=BF(xa()),WF=S;ES=hg.default=(0,UF.default)((0,WF.jsx)("path",{d:"m12 8-6 6 1.41 1.41L12 10.83l4.59 4.58L18 14z"}),"ExpandLess");var mg={},HF=wo;Object.defineProperty(mg,"__esModule",{value:!0});var _d=mg.default=void 0,VF=HF(xa()),KF=S;_d=mg.default=(0,VF.default)((0,KF.jsx)("path",{d:"M16.59 8.59 12 13.17 7.41 8.59 6 10l6 6 6-6z"}),"ExpandMore");var qF=function(e,t){return t!==void 0?"".concat(e,": ").concat(t):""},GF=function(e){var t=e.metadata,n=e.open,r=n?Object.entries(t):Object.entries(t).slice(0,1);return S.jsx(eg,{sx:{whiteSpace:"pre-line",padding:"10px"},children:r.map(function(o){var i=o[0],a=o[1];return qF(i,a)}).join(`
`)})},XF=function(e){var t=e.metadata,n=Gt.useState(!1),r=n[0],o=n[1],i=function(a){a.preventDefault(),a.stopPropagation(),o(!r)};return S.jsxs(eg,{sx:{display:"flex",flexDirection:"row",alignItems:"flex-start"},children:[S.jsx(Nn,{onClick:i,children:r?S.jsx(ES,{}):S.jsx(_d,{})}),S.jsx(GF,{open:r,metadata:t})]})},Bi=function(e,t){var n=e.trim(),r=new URLSearchParams;if(!n)return r;var o=n.indexOf("-"),i=String(t);if(o>=0){var a=n.split("-",2),s=a[0].trim(),l=a[1].trim();return s&&r.append("".concat(i,".min"),s),l&&r.append("".concat(i,".max"),l),r}return r.append("".concat(i,".min"),n),r.append("".concat(i,".max"),n),r},QF=/\d{4}-\d{2}-\d{2}((\s|T)\d{2}:\d{2}:\d{2})?/g,RS=function(e,t){var n=function(c){return c.length>10?c:"".concat(c," 00:00:00")},r=function(c){return c.length>10?c:"".concat(c," 23:59:59")},o=e.trim(),i=new URLSearchParams;if(!o)return i;var a=o.charAt(o.length-1)==="-",s=o.indexOf("-")===0,l=e.match(QF);if(!l||l.length===0)return i;var u=String(t);return l.length===1?!a&&!s?(i.append("".concat(u,".min"),n(l[0])),i.append("".concat(u,".max"),r(l[0])),i):(i.append("".concat(u,".").concat(s?"max":"min"),s?r(l[0]):n(l[0])),i):(i.append("".concat(u,".min"),n(l[0])),i.append("".concat(u,".max"),r(l[1])),i)},PS=function(e){return e.slice(0,e.indexOf(".")).replace("T"," ")},YF=function(e){return S.jsx(XF,{metadata:e})};function er(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];throw Error("[Immer] minified error nr: "+e+(n.length?" "+n.map(function(o){return"'"+o+"'"}).join(","):"")+". Find the full error at: https://bit.ly/3cXEKWf")}function mo(e){return!!e&&!!e[Qe]}function Ar(e){var t;return!!e&&(function(n){if(!n||typeof n!="object")return!1;var r=Object.getPrototypeOf(n);if(r===null)return!0;var o=Object.hasOwnProperty.call(r,"constructor")&&r.constructor;return o===Object||typeof o=="function"&&Function.toString.call(o)===a4}(e)||Array.isArray(e)||!!e[G0]||!!(!((t=e.constructor)===null||t===void 0)&&t[G0])||gg(e)||vg(e))}function ti(e,t,n){n===void 0&&(n=!1),ba(e)===0?(n?Object.keys:Wi)(e).forEach(function(r){n&&typeof r=="symbol"||t(r,e[r],e)}):e.forEach(function(r,o){return t(o,r,e)})}function ba(e){var t=e[Qe];return t?t.i>3?t.i-4:t.i:Array.isArray(e)?1:gg(e)?2:vg(e)?3:0}function Ui(e,t){return ba(e)===2?e.has(t):Object.prototype.hasOwnProperty.call(e,t)}function JF(e,t){return ba(e)===2?e.get(t):e[t]}function kS(e,t,n){var r=ba(e);r===2?e.set(t,n):r===3?e.add(n):e[t]=n}function TS(e,t){return e===t?e!==0||1/e==1/t:e!=e&&t!=t}function gg(e){return o4&&e instanceof Map}function vg(e){return i4&&e instanceof Set}function To(e){return e.o||e.t}function yg(e){if(Array.isArray(e))return Array.prototype.slice.call(e);var t=OS(e);delete t[Qe];for(var n=Wi(t),r=0;r<n.length;r++){var o=n[r],i=t[o];i.writable===!1&&(i.writable=!0,i.configurable=!0),(i.get||i.set)&&(t[o]={configurable:!0,writable:!0,enumerable:i.enumerable,value:e[o]})}return Object.create(Object.getPrototypeOf(e),t)}function xg(e,t){return t===void 0&&(t=!1),bg(e)||mo(e)||!Ar(e)||(ba(e)>1&&(e.set=e.add=e.clear=e.delete=ZF),Object.freeze(e),t&&ti(e,function(n,r){return xg(r,!0)},!0)),e}function ZF(){er(2)}function bg(e){return e==null||typeof e!="object"||Object.isFrozen(e)}function xr(e){var t=dh[e];return t||er(18,e),t}function e4(e,t){dh[e]||(dh[e]=t)}function lh(){return Gs}function Tf(e,t){t&&(xr("Patches"),e.u=[],e.s=[],e.v=t)}function dc(e){uh(e),e.p.forEach(t4),e.p=null}function uh(e){e===Gs&&(Gs=e.l)}function U0(e){return Gs={p:[],l:Gs,h:e,m:!0,_:0}}function t4(e){var t=e[Qe];t.i===0||t.i===1?t.j():t.g=!0}function $f(e,t){t._=t.p.length;var n=t.p[0],r=e!==void 0&&e!==n;return t.h.O||xr("ES5").S(t,e,r),r?(n[Qe].P&&(dc(t),er(4)),Ar(e)&&(e=fc(t,e),t.l||pc(t,e)),t.u&&xr("Patches").M(n[Qe].t,e,t.u,t.s)):e=fc(t,n,[]),dc(t),t.u&&t.v(t.u,t.s),e!==$S?e:void 0}function fc(e,t,n){if(bg(t))return t;var r=t[Qe];if(!r)return ti(t,function(s,l){return W0(e,r,t,s,l,n)},!0),t;if(r.A!==e)return t;if(!r.P)return pc(e,r.t,!0),r.t;if(!r.I){r.I=!0,r.A._--;var o=r.i===4||r.i===5?r.o=yg(r.k):r.o,i=o,a=!1;r.i===3&&(i=new Set(o),o.clear(),a=!0),ti(i,function(s,l){return W0(e,r,o,s,l,n,a)}),pc(e,o,!1),n&&e.u&&xr("Patches").N(r,n,e.u,e.s)}return r.o}function W0(e,t,n,r,o,i,a){if(mo(o)){var s=fc(e,o,i&&t&&t.i!==3&&!Ui(t.R,r)?i.concat(r):void 0);if(kS(n,r,s),!mo(s))return;e.m=!1}else a&&n.add(o);if(Ar(o)&&!bg(o)){if(!e.h.D&&e._<1)return;fc(e,o),t&&t.A.l||pc(e,o)}}function pc(e,t,n){n===void 0&&(n=!1),!e.l&&e.h.D&&e.m&&xg(t,n)}function Of(e,t){var n=e[Qe];return(n?To(n):e)[t]}function H0(e,t){if(t in e)for(var n=Object.getPrototypeOf(e);n;){var r=Object.getOwnPropertyDescriptor(n,t);if(r)return r;n=Object.getPrototypeOf(n)}}function Jr(e){e.P||(e.P=!0,e.l&&Jr(e.l))}function Mf(e){e.o||(e.o=yg(e.t))}function ch(e,t,n){var r=gg(t)?xr("MapSet").F(t,n):vg(t)?xr("MapSet").T(t,n):e.O?function(o,i){var a=Array.isArray(o),s={i:a?1:0,A:i?i.A:lh(),P:!1,I:!1,R:{},l:i,t:o,k:null,o:null,j:null,C:!1},l=s,u=Xs;a&&(l=[s],u=Za);var c=Proxy.revocable(l,u),d=c.revoke,f=c.proxy;return s.k=f,s.j=d,f}(t,n):xr("ES5").J(t,n);return(n?n.A:lh()).p.push(r),r}function n4(e){return mo(e)||er(22,e),function t(n){if(!Ar(n))return n;var r,o=n[Qe],i=ba(n);if(o){if(!o.P&&(o.i<4||!xr("ES5").K(o)))return o.t;o.I=!0,r=V0(n,i),o.I=!1}else r=V0(n,i);return ti(r,function(a,s){o&&JF(o.t,a)===s||kS(r,a,t(s))}),i===3?new Set(r):r}(e)}function V0(e,t){switch(t){case 2:return new Map(e);case 3:return Array.from(e)}return yg(e)}function r4(){function e(i,a){var s=o[i];return s?s.enumerable=a:o[i]=s={configurable:!0,enumerable:a,get:function(){var l=this[Qe];return Xs.get(l,i)},set:function(l){var u=this[Qe];Xs.set(u,i,l)}},s}function t(i){for(var a=i.length-1;a>=0;a--){var s=i[a][Qe];if(!s.P)switch(s.i){case 5:r(s)&&Jr(s);break;case 4:n(s)&&Jr(s)}}}function n(i){for(var a=i.t,s=i.k,l=Wi(s),u=l.length-1;u>=0;u--){var c=l[u];if(c!==Qe){var d=a[c];if(d===void 0&&!Ui(a,c))return!0;var f=s[c],g=f&&f[Qe];if(g?g.t!==d:!TS(f,d))return!0}}var p=!!a[Qe];return l.length!==Wi(a).length+(p?0:1)}function r(i){var a=i.k;if(a.length!==i.t.length)return!0;var s=Object.getOwnPropertyDescriptor(a,a.length-1);if(s&&!s.get)return!0;for(var l=0;l<a.length;l++)if(!a.hasOwnProperty(l))return!0;return!1}var o={};e4("ES5",{J:function(i,a){var s=Array.isArray(i),l=function(c,d){if(c){for(var f=Array(d.length),g=0;g<d.length;g++)Object.defineProperty(f,""+g,e(g,!0));return f}var p=OS(d);delete p[Qe];for(var h=Wi(p),C=0;C<h.length;C++){var m=h[C];p[m]=e(m,c||!!p[m].enumerable)}return Object.create(Object.getPrototypeOf(d),p)}(s,i),u={i:s?5:4,A:a?a.A:lh(),P:!1,I:!1,R:{},l:a,t:i,k:l,o:null,g:!1,C:!1};return Object.defineProperty(l,Qe,{value:u,writable:!0}),l},S:function(i,a,s){s?mo(a)&&a[Qe].A===i&&t(i.p):(i.u&&function l(u){if(u&&typeof u=="object"){var c=u[Qe];if(c){var d=c.t,f=c.k,g=c.R,p=c.i;if(p===4)ti(f,function(v){v!==Qe&&(d[v]!==void 0||Ui(d,v)?g[v]||l(f[v]):(g[v]=!0,Jr(c)))}),ti(d,function(v){f[v]!==void 0||Ui(f,v)||(g[v]=!1,Jr(c))});else if(p===5){if(r(c)&&(Jr(c),g.length=!0),f.length<d.length)for(var h=f.length;h<d.length;h++)g[h]=!1;else for(var C=d.length;C<f.length;C++)g[C]=!0;for(var m=Math.min(f.length,d.length),y=0;y<m;y++)f.hasOwnProperty(y)||(g[y]=!0),g[y]===void 0&&l(f[y])}}}}(i.p[0]),t(i.p))},K:function(i){return i.i===4?n(i):r(i)}})}var K0,Gs,wg=typeof Symbol<"u"&&typeof Symbol("x")=="symbol",o4=typeof Map<"u",i4=typeof Set<"u",q0=typeof Proxy<"u"&&Proxy.revocable!==void 0&&typeof Reflect<"u",$S=wg?Symbol.for("immer-nothing"):((K0={})["immer-nothing"]=!0,K0),G0=wg?Symbol.for("immer-draftable"):"__$immer_draftable",Qe=wg?Symbol.for("immer-state"):"__$immer_state",a4=""+Object.prototype.constructor,Wi=typeof Reflect<"u"&&Reflect.ownKeys?Reflect.ownKeys:Object.getOwnPropertySymbols!==void 0?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:Object.getOwnPropertyNames,OS=Object.getOwnPropertyDescriptors||function(e){var t={};return Wi(e).forEach(function(n){t[n]=Object.getOwnPropertyDescriptor(e,n)}),t},dh={},Xs={get:function(e,t){if(t===Qe)return e;var n=To(e);if(!Ui(n,t))return function(o,i,a){var s,l=H0(i,a);return l?"value"in l?l.value:(s=l.get)===null||s===void 0?void 0:s.call(o.k):void 0}(e,n,t);var r=n[t];return e.I||!Ar(r)?r:r===Of(e.t,t)?(Mf(e),e.o[t]=ch(e.A.h,r,e)):r},has:function(e,t){return t in To(e)},ownKeys:function(e){return Reflect.ownKeys(To(e))},set:function(e,t,n){var r=H0(To(e),t);if(r!=null&&r.set)return r.set.call(e.k,n),!0;if(!e.P){var o=Of(To(e),t),i=o==null?void 0:o[Qe];if(i&&i.t===n)return e.o[t]=n,e.R[t]=!1,!0;if(TS(n,o)&&(n!==void 0||Ui(e.t,t)))return!0;Mf(e),Jr(e)}return e.o[t]===n&&(n!==void 0||t in e.o)||Number.isNaN(n)&&Number.isNaN(e.o[t])||(e.o[t]=n,e.R[t]=!0),!0},deleteProperty:function(e,t){return Of(e.t,t)!==void 0||t in e.t?(e.R[t]=!1,Mf(e),Jr(e)):delete e.R[t],e.o&&delete e.o[t],!0},getOwnPropertyDescriptor:function(e,t){var n=To(e),r=Reflect.getOwnPropertyDescriptor(n,t);return r&&{writable:!0,configurable:e.i!==1||t!=="length",enumerable:r.enumerable,value:n[t]}},defineProperty:function(){er(11)},getPrototypeOf:function(e){return Object.getPrototypeOf(e.t)},setPrototypeOf:function(){er(12)}},Za={};ti(Xs,function(e,t){Za[e]=function(){return arguments[0]=arguments[0][0],t.apply(this,arguments)}}),Za.deleteProperty=function(e,t){return Za.set.call(this,e,t,void 0)},Za.set=function(e,t,n){return Xs.set.call(this,e[0],t,n,e[0])};var s4=function(){function e(n){var r=this;this.O=q0,this.D=!0,this.produce=function(o,i,a){if(typeof o=="function"&&typeof i!="function"){var s=i;i=o;var l=r;return function(h){var C=this;h===void 0&&(h=s);for(var m=arguments.length,y=Array(m>1?m-1:0),v=1;v<m;v++)y[v-1]=arguments[v];return l.produce(h,function(w){var R;return(R=i).call.apply(R,[C,w].concat(y))})}}var u;if(typeof i!="function"&&er(6),a!==void 0&&typeof a!="function"&&er(7),Ar(o)){var c=U0(r),d=ch(r,o,void 0),f=!0;try{u=i(d),f=!1}finally{f?dc(c):uh(c)}return typeof Promise<"u"&&u instanceof Promise?u.then(function(h){return Tf(c,a),$f(h,c)},function(h){throw dc(c),h}):(Tf(c,a),$f(u,c))}if(!o||typeof o!="object"){if((u=i(o))===void 0&&(u=o),u===$S&&(u=void 0),r.D&&xg(u,!0),a){var g=[],p=[];xr("Patches").M(o,u,g,p),a(g,p)}return u}er(21,o)},this.produceWithPatches=function(o,i){if(typeof o=="function")return function(u){for(var c=arguments.length,d=Array(c>1?c-1:0),f=1;f<c;f++)d[f-1]=arguments[f];return r.produceWithPatches(u,function(g){return o.apply(void 0,[g].concat(d))})};var a,s,l=r.produce(o,i,function(u,c){a=u,s=c});return typeof Promise<"u"&&l instanceof Promise?l.then(function(u){return[u,a,s]}):[l,a,s]},typeof(n==null?void 0:n.useProxies)=="boolean"&&this.setUseProxies(n.useProxies),typeof(n==null?void 0:n.autoFreeze)=="boolean"&&this.setAutoFreeze(n.autoFreeze)}var t=e.prototype;return t.createDraft=function(n){Ar(n)||er(8),mo(n)&&(n=n4(n));var r=U0(this),o=ch(this,n,void 0);return o[Qe].C=!0,uh(r),o},t.finishDraft=function(n,r){var o=n&&n[Qe],i=o.A;return Tf(i,r),$f(void 0,i)},t.setAutoFreeze=function(n){this.D=n},t.setUseProxies=function(n){n&&!q0&&er(20),this.O=n},t.applyPatches=function(n,r){var o;for(o=r.length-1;o>=0;o--){var i=r[o];if(i.path.length===0&&i.op==="replace"){n=i.value;break}}o>-1&&(r=r.slice(o+1));var a=xr("Patches").$;return mo(n)?a(n,r):this.produce(n,function(s){return a(s,r)})},e}(),bn=new s4,l4=bn.produce;bn.produceWithPatches.bind(bn);bn.setAutoFreeze.bind(bn);bn.setUseProxies.bind(bn);bn.applyPatches.bind(bn);bn.createDraft.bind(bn);bn.finishDraft.bind(bn);const MS=l4;var _S=function(){var e=function(t,n){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(r,o){r.__proto__=o}||function(r,o){for(var i in o)Object.prototype.hasOwnProperty.call(o,i)&&(r[i]=o[i])},e(t,n)};return function(t,n){if(typeof n!="function"&&n!==null)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");e(t,n);function r(){this.constructor=t}t.prototype=n===null?Object.create(n):(r.prototype=n.prototype,new r)}}(),u4=function(e,t){var n={label:0,sent:function(){if(i[0]&1)throw i[1];return i[1]},trys:[],ops:[]},r,o,i,a;return a={next:s(0),throw:s(1),return:s(2)},typeof Symbol=="function"&&(a[Symbol.iterator]=function(){return this}),a;function s(u){return function(c){return l([u,c])}}function l(u){if(r)throw new TypeError("Generator is already executing.");for(;n;)try{if(r=1,o&&(i=u[0]&2?o.return:u[0]?o.throw||((i=o.return)&&i.call(o),0):o.next)&&!(i=i.call(o,u[1])).done)return i;switch(o=0,i&&(u=[u[0]&2,i.value]),u[0]){case 0:case 1:i=u;break;case 4:return n.label++,{value:u[1],done:!1};case 5:n.label++,o=u[1],u=[0];continue;case 7:u=n.ops.pop(),n.trys.pop();continue;default:if(i=n.trys,!(i=i.length>0&&i[i.length-1])&&(u[0]===6||u[0]===2)){n=0;continue}if(u[0]===3&&(!i||u[1]>i[0]&&u[1]<i[3])){n.label=u[1];break}if(u[0]===6&&n.label<i[1]){n.label=i[1],i=u;break}if(i&&n.label<i[2]){n.label=i[2],n.ops.push(u);break}i[2]&&n.ops.pop(),n.trys.pop();continue}u=t.call(e,n)}catch(c){u=[6,c],o=0}finally{r=i=0}if(u[0]&5)throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}},Qs=function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e},c4=Object.defineProperty,d4=Object.defineProperties,f4=Object.getOwnPropertyDescriptors,X0=Object.getOwnPropertySymbols,p4=Object.prototype.hasOwnProperty,h4=Object.prototype.propertyIsEnumerable,Q0=function(e,t,n){return t in e?c4(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n},Uo=function(e,t){for(var n in t||(t={}))p4.call(t,n)&&Q0(e,n,t[n]);if(X0)for(var r=0,o=X0(t);r<o.length;r++){var n=o[r];h4.call(t,n)&&Q0(e,n,t[n])}return e},_f=function(e,t){return d4(e,f4(t))},m4=function(e,t,n){return new Promise(function(r,o){var i=function(l){try{s(n.next(l))}catch(u){o(u)}},a=function(l){try{s(n.throw(l))}catch(u){o(u)}},s=function(l){return l.done?r(l.value):Promise.resolve(l.value).then(i,a)};s((n=n.apply(e,t)).next())})};function co(e,t){function n(){for(var r=[],o=0;o<arguments.length;o++)r[o]=arguments[o];if(t){var i=t.apply(void 0,r);if(!i)throw new Error("prepareAction did not return an object");return Uo(Uo({type:e,payload:i.payload},"meta"in i&&{meta:i.meta}),"error"in i&&{error:i.error})}return{type:e,payload:r[0]}}return n.toString=function(){return""+e},n.type=e,n.match=function(r){return r.type===e},n}(function(e){_S(t,e);function t(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];var o=e.apply(this,n)||this;return Object.setPrototypeOf(o,t.prototype),o}return Object.defineProperty(t,Symbol.species,{get:function(){return t},enumerable:!1,configurable:!0}),t.prototype.concat=function(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];return e.prototype.concat.apply(this,n)},t.prototype.prepend=function(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];return n.length===1&&Array.isArray(n[0])?new(t.bind.apply(t,Qs([void 0],n[0].concat(this)))):new(t.bind.apply(t,Qs([void 0],n.concat(this))))},t})(Array);(function(e){_S(t,e);function t(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];var o=e.apply(this,n)||this;return Object.setPrototypeOf(o,t.prototype),o}return Object.defineProperty(t,Symbol.species,{get:function(){return t},enumerable:!1,configurable:!0}),t.prototype.concat=function(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];return e.prototype.concat.apply(this,n)},t.prototype.prepend=function(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];return n.length===1&&Array.isArray(n[0])?new(t.bind.apply(t,Qs([void 0],n[0].concat(this)))):new(t.bind.apply(t,Qs([void 0],n.concat(this))))},t})(Array);function fh(e){return Ar(e)?MS(e,function(){}):e}function jS(e){var t={},n=[],r,o={addCase:function(i,a){var s=typeof i=="string"?i:i.type;if(!s)throw new Error("`builder.addCase` cannot be called with an empty action type");if(s in t)throw new Error("`builder.addCase` cannot be called with two reducers for the same action type");return t[s]=a,o},addMatcher:function(i,a){return n.push({matcher:i,reducer:a}),o},addDefaultCase:function(i){return r=i,o}};return e(o),[t,n,r]}function g4(e){return typeof e=="function"}function v4(e,t,n,r){n===void 0&&(n=[]);var o=typeof t=="function"?jS(t):[t,n,r],i=o[0],a=o[1],s=o[2],l;if(g4(e))l=function(){return fh(e())};else{var u=fh(e);l=function(){return u}}function c(d,f){d===void 0&&(d=l());var g=Qs([i[f.type]],a.filter(function(p){var h=p.matcher;return h(f)}).map(function(p){var h=p.reducer;return h}));return g.filter(function(p){return!!p}).length===0&&(g=[s]),g.reduce(function(p,h){if(h)if(mo(p)){var C=p,m=h(C,f);return m===void 0?p:m}else{if(Ar(p))return MS(p,function(y){return h(y,f)});var m=h(p,f);if(m===void 0){if(p===null)return p;throw Error("A case reducer on a non-draftable value must not return undefined")}return m}return p},d)}return c.getInitialState=l,c}function y4(e,t){return e+"/"+t}function Sg(e){var t=e.name;if(!t)throw new Error("`name` is a required option for createSlice");typeof process<"u";var n=typeof e.initialState=="function"?e.initialState:fh(e.initialState),r=e.reducers||{},o=Object.keys(r),i={},a={},s={};o.forEach(function(c){var d=r[c],f=y4(t,c),g,p;"reducer"in d?(g=d.reducer,p=d.prepare):g=d,i[c]=g,a[f]=g,s[c]=p?co(f,p):co(f)});function l(){var c=typeof e.extraReducers=="function"?jS(e.extraReducers):[e.extraReducers],d=c[0],f=d===void 0?{}:d,g=c[1],p=g===void 0?[]:g,h=c[2],C=h===void 0?void 0:h,m=Uo(Uo({},f),a);return v4(n,function(y){for(var v in m)y.addCase(v,m[v]);for(var w=0,R=p;w<R.length;w++){var P=R[w];y.addMatcher(P.matcher,P.reducer)}C&&y.addDefaultCase(C)})}var u;return{name:t,reducer:function(c,d){return u||(u=l()),u(c,d)},actions:s,caseReducers:i,getInitialState:function(){return u||(u=l()),u.getInitialState()}}}var x4="ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW",b4=function(e){e===void 0&&(e=21);for(var t="",n=e;n--;)t+=x4[Math.random()*64|0];return t},w4=["name","message","stack","code"],jf=function(){function e(t,n){this.payload=t,this.meta=n}return e}(),Y0=function(){function e(t,n){this.payload=t,this.meta=n}return e}(),S4=function(e){if(typeof e=="object"&&e!==null){for(var t={},n=0,r=w4;n<r.length;n++){var o=r[n];typeof e[o]=="string"&&(t[o]=e[o])}return t}return{message:String(e)}},yl=function(){function e(t,n,r){var o=co(t+"/fulfilled",function(u,c,d,f){return{payload:u,meta:_f(Uo({},f||{}),{arg:d,requestId:c,requestStatus:"fulfilled"})}}),i=co(t+"/pending",function(u,c,d){return{payload:void 0,meta:_f(Uo({},d||{}),{arg:c,requestId:u,requestStatus:"pending"})}}),a=co(t+"/rejected",function(u,c,d,f,g){return{payload:f,error:(r&&r.serializeError||S4)(u||"Rejected"),meta:_f(Uo({},g||{}),{arg:d,requestId:c,rejectedWithValue:!!f,requestStatus:"rejected",aborted:(u==null?void 0:u.name)==="AbortError",condition:(u==null?void 0:u.name)==="ConditionError"})}}),s=typeof AbortController<"u"?AbortController:function(){function u(){this.signal={aborted:!1,addEventListener:function(){},dispatchEvent:function(){return!1},onabort:function(){},removeEventListener:function(){},reason:void 0,throwIfAborted:function(){}}}return u.prototype.abort=function(){},u}();function l(u){return function(c,d,f){var g=r!=null&&r.idGenerator?r.idGenerator(u):b4(),p=new s,h;function C(y){h=y,p.abort()}var m=function(){return m4(this,null,function(){var y,v,w,R,P,x,k;return u4(this,function(M){switch(M.label){case 0:return M.trys.push([0,4,,5]),R=(y=r==null?void 0:r.condition)==null?void 0:y.call(r,u,{getState:d,extra:f}),E4(R)?[4,R]:[3,2];case 1:R=M.sent(),M.label=2;case 2:if(R===!1||p.signal.aborted)throw{name:"ConditionError",message:"Aborted due to condition callback returning false."};return P=new Promise(function(T,j){return p.signal.addEventListener("abort",function(){return j({name:"AbortError",message:h||"Aborted"})})}),c(i(g,u,(v=r==null?void 0:r.getPendingMeta)==null?void 0:v.call(r,{requestId:g,arg:u},{getState:d,extra:f}))),[4,Promise.race([P,Promise.resolve(n(u,{dispatch:c,getState:d,extra:f,requestId:g,signal:p.signal,abort:C,rejectWithValue:function(T,j){return new jf(T,j)},fulfillWithValue:function(T,j){return new Y0(T,j)}})).then(function(T){if(T instanceof jf)throw T;return T instanceof Y0?o(T.payload,g,u,T.meta):o(T,g,u)})])];case 3:return w=M.sent(),[3,5];case 4:return x=M.sent(),w=x instanceof jf?a(null,g,u,x.payload,x.meta):a(x,g,u),[3,5];case 5:return k=r&&!r.dispatchConditionRejection&&a.match(w)&&w.meta.condition,k||c(w),[2,w]}})})}();return Object.assign(m,{abort:C,requestId:g,arg:u,unwrap:function(){return m.then(C4)}})}}return Object.assign(l,{pending:i,rejected:a,fulfilled:o,typePrefix:t})}return e.withTypes=function(){return e},e}();function C4(e){if(e.meta&&e.meta.rejectedWithValue)throw e.payload;if(e.error)throw e.error;return e.payload}function E4(e){return e!==null&&typeof e=="object"&&typeof e.then=="function"}var Cg="listenerMiddleware";co(Cg+"/add");co(Cg+"/removeAll");co(Cg+"/remove");var J0;typeof queueMicrotask=="function"&&queueMicrotask.bind(typeof window<"u"?window:typeof global<"u"?global:globalThis);r4();var R4={s:RS,d:Bi,rqs:Bi,rps:Bi},P4=function(e){var t=new URL("log",aa().defaults.baseURL);return LF(e,R4).forEach(function(n,r){return t.searchParams.append(r,n)}),aa().get(t.toString())},k4=function(e,t,n,r){function o(i){return i instanceof n?i:new n(function(a){a(i)})}return new(n||(n=Promise))(function(i,a){function s(c){try{u(r.next(c))}catch(d){a(d)}}function l(c){try{u(r.throw(c))}catch(d){a(d)}}function u(c){c.done?i(c.value):o(c.value).then(s,l)}u((r=r.apply(e,t||[])).next())})},T4=function(e,t){var n={label:0,sent:function(){if(i[0]&1)throw i[1];return i[1]},trys:[],ops:[]},r,o,i,a;return a={next:s(0),throw:s(1),return:s(2)},typeof Symbol=="function"&&(a[Symbol.iterator]=function(){return this}),a;function s(u){return function(c){return l([u,c])}}function l(u){if(r)throw new TypeError("Generator is already executing.");for(;a&&(a=0,u[0]&&(n=0)),n;)try{if(r=1,o&&(i=u[0]&2?o.return:u[0]?o.throw||((i=o.return)&&i.call(o),0):o.next)&&!(i=i.call(o,u[1])).done)return i;switch(o=0,i&&(u=[u[0]&2,i.value]),u[0]){case 0:case 1:i=u;break;case 4:return n.label++,{value:u[1],done:!1};case 5:n.label++,o=u[1],u=[0];continue;case 7:u=n.ops.pop(),n.trys.pop();continue;default:if(i=n.trys,!(i=i.length>0&&i[i.length-1])&&(u[0]===6||u[0]===2)){n=0;continue}if(u[0]===3&&(!i||u[1]>i[0]&&u[1]<i[3])){n.label=u[1];break}if(u[0]===6&&n.label<i[1]){n.label=i[1],i=u;break}if(i&&n.label<i[2]){n.label=i[2],n.ops.push(u);break}i[2]&&n.ops.pop(),n.trys.pop();continue}u=t.call(e,n)}catch(c){u=[6,c],o=0}finally{r=i=0}if(u[0]&5)throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}},Nf=yl("logs/fetchLogs",function(e,t){return k4(void 0,void 0,void 0,function(){var n;return T4(this,function(r){switch(r.label){case 0:return[4,P4(e)];case 1:return n=r.sent(),n.status!==200?[2,t.rejectWithValue({message:"Failed to fetch logs."})]:[2,n.data]}})})}),vs=function(){return vs=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++){t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e},vs.apply(this,arguments)},hc,$4={logMessages:[],logMessageTotalCount:0,status:"loading",filters:{page:"0",size:"100"}},O4=Sg({name:"log",initialState:$4,reducers:{updateLogs:function(e,t){var n=t.payload;e.logMessages=n},updateFilters:function(e,t){var n=t.payload;e.filters=vs(vs({},e.filters),n)},clearFilters:function(e,t){var n=t.payload,r=vs({},e.filters);n.forEach(function(o){delete r[o]}),e.filters=r}},extraReducers:function(e){e.addCase(Nf.pending,function(t){t.status="loading",t.error="undefined"}),e.addCase(Nf.fulfilled,function(t,n){var r=n.payload;t.logMessages=r.content,t.logMessageTotalCount=r.totalElements,t.status="succeeded"}),e.addCase(Nf.rejected,function(t,n){var r=n.payload;r&&(t.error=r.message),t.status="failed"})}});hc=O4.actions,hc.updateLogs;hc.updateFilters;hc.clearFilters;var He={};/** @license React v17.0.2
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var jd=60103,Nd=60106,xl=60107,bl=60108,wl=60114,Sl=60109,Cl=60110,El=60112,Rl=60113,Eg=60120,Pl=60115,kl=60116,NS=60121,AS=60122,LS=60117,IS=60129,FS=60131;if(typeof Symbol=="function"&&Symbol.for){var Nt=Symbol.for;jd=Nt("react.element"),Nd=Nt("react.portal"),xl=Nt("react.fragment"),bl=Nt("react.strict_mode"),wl=Nt("react.profiler"),Sl=Nt("react.provider"),Cl=Nt("react.context"),El=Nt("react.forward_ref"),Rl=Nt("react.suspense"),Eg=Nt("react.suspense_list"),Pl=Nt("react.memo"),kl=Nt("react.lazy"),NS=Nt("react.block"),AS=Nt("react.server.block"),LS=Nt("react.fundamental"),IS=Nt("react.debug_trace_mode"),FS=Nt("react.legacy_hidden")}function ur(e){if(typeof e=="object"&&e!==null){var t=e.$$typeof;switch(t){case jd:switch(e=e.type,e){case xl:case wl:case bl:case Rl:case Eg:return e;default:switch(e=e&&e.$$typeof,e){case Cl:case El:case kl:case Pl:case Sl:return e;default:return t}}case Nd:return t}}}var M4=Sl,_4=jd,j4=El,N4=xl,A4=kl,L4=Pl,I4=Nd,F4=wl,D4=bl,z4=Rl;He.ContextConsumer=Cl;He.ContextProvider=M4;He.Element=_4;He.ForwardRef=j4;He.Fragment=N4;He.Lazy=A4;He.Memo=L4;He.Portal=I4;He.Profiler=F4;He.StrictMode=D4;He.Suspense=z4;He.isAsyncMode=function(){return!1};He.isConcurrentMode=function(){return!1};He.isContextConsumer=function(e){return ur(e)===Cl};He.isContextProvider=function(e){return ur(e)===Sl};He.isElement=function(e){return typeof e=="object"&&e!==null&&e.$$typeof===jd};He.isForwardRef=function(e){return ur(e)===El};He.isFragment=function(e){return ur(e)===xl};He.isLazy=function(e){return ur(e)===kl};He.isMemo=function(e){return ur(e)===Pl};He.isPortal=function(e){return ur(e)===Nd};He.isProfiler=function(e){return ur(e)===wl};He.isStrictMode=function(e){return ur(e)===bl};He.isSuspense=function(e){return ur(e)===Rl};He.isValidElementType=function(e){return typeof e=="string"||typeof e=="function"||e===xl||e===wl||e===IS||e===bl||e===Rl||e===Eg||e===FS||typeof e=="object"&&e!==null&&(e.$$typeof===kl||e.$$typeof===Pl||e.$$typeof===Sl||e.$$typeof===Cl||e.$$typeof===El||e.$$typeof===LS||e.$$typeof===NS||e[0]===AS)};He.typeOf=ur;var ph=function(){return ph=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++){t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e},ph.apply(this,arguments)},B4=[{id:"startTime",label:"Start time",renderValue:function(e){return PS(e)},minWidth:250,filterKey:"s",filterHelper:"yyyy-MM-dd HH:mm:ss - ?yyyy-MM-dd HH:mm:ss",filterValidator:zF,renderFilter:function(e){return S.jsx(FF,ph({},e))}},{id:"durationMs",label:"Duration, ms",minWidth:100,filterKey:"d",filterHelper:"number - ?number",filterValidator:kf},{id:"messageType",label:"Type",minWidth:100,filterKey:"m",filterHelper:"e.g. ControlValue/list"},{id:"protocol",label:"Protocol",minWidth:150,filterKey:"p",filterHelper:"e.g. http"},{id:"statusCode",label:"Status",minWidth:150,filterKey:"c",filterHelper:"e.g. 400"},{id:"messageChainId",label:"Message Chain ID",minWidth:150,filterKey:"mci",renderValue:function(e,t,n){return S.jsx(IF,{value:e.toString(),filterKey:t.filterKey,updateFilters:n})},filterHelper:"e.g. 123",filterValidator:DF},{id:"requestSize",label:"Request size",minWidth:150,filterKey:"rqs",filterHelper:"number - ?number",filterValidator:kf},{id:"responseSize",label:"Response size",minWidth:150,filterKey:"rps",filterHelper:"number - ?number",filterValidator:kf},{id:"metadata",label:"Metadata",renderValue:function(e){return YF(e)},minWidth:150,filterKey:"md",filterHelper:"A=a, B=b"}],U4=function(e){var t=e.onPageChange,n=e.logStatus,r=e.logRows,o=e.logFilters,i=e.logMessageTotalCount,a=e.onClickRowAction,s=e.onFilterChange,l=e.onFilterClear;return S.jsxs(S.Fragment,{children:[S.jsx(TF,{onPageChange:t,rows:r,columns:B4,filters:o,messageTotalCount:i,onClickRowAction:a,onFilterChange:s,onFilterClear:l}),n==="loading"&&S.jsx(Vw,{open:!0,children:S.jsx(qw,{})})]})};var Rg={},W4=wo;Object.defineProperty(Rg,"__esModule",{value:!0});var DS=Rg.default=void 0,H4=W4(xa()),V4=S;DS=Rg.default=(0,H4.default)((0,V4.jsx)("path",{d:"M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20z"}),"ArrowBack");var At=function(e){var t=e.label,n=e.value,r=e.isWide,o=e.isFull;return S.jsx(pn,{item:!0,xs:12,sm:o?12:6,md:o?12:r?6:3,children:S.jsx(Ks,{label:t,value:n,InputProps:{readOnly:!0},InputLabelProps:{style:{fontSize:20}},multiline:!0,fullWidth:!0})})},K4=function(e){var t=e.message,n=e.backAction,r=e.downloadDataAction;return S.jsxs(S.Fragment,{children:[S.jsx(Di,{variant:"contained",startIcon:S.jsx(DS,{}),onClick:function(){return n()},sx:{marginBottom:.5,width:200,backgroundColor:"secondary.main"},children:"Back"}),t?S.jsxs(pn,{container:!0,direction:"row",justifyContent:"flex-start",spacing:2,children:[S.jsx(pn,{item:!0,xs:12,md:12,lg:12,children:S.jsx("h1",{children:"Message Details"})}),S.jsx(At,{label:"Sent At",value:PS(t.startTime)}),S.jsx(At,{label:"Duration, ms",value:t.durationMs}),S.jsx(At,{label:"App Server",value:t.appServer}),S.jsx(At,{label:"App Version",value:t.appVersion}),S.jsx(At,{label:"Type",value:t.messageType}),S.jsx(At,{label:"Protocol",value:t.protocol}),S.jsx(At,{label:"Requesting system",value:t.requestingSystem}),S.jsx(At,{label:"Responding system",value:t.respondingSystem}),S.jsxs(pn,{item:!0,container:!0,xs:12,spacing:2,children:[S.jsx(At,{label:"Request headers",value:t.requestHeaders,isWide:!0}),S.jsx(At,{label:"Response headers",value:t.responseHeaders,isWide:!0})]}),S.jsx(At,{label:"Address",value:t.address,isFull:!0}),S.jsx(At,{label:"Status code",value:t.statusCode}),S.jsx(At,{label:"Status message",value:t.statusMessage}),S.jsx(At,{label:"Message chain ID",value:t.messageChainId}),S.jsx(At,{label:"Request Size (B)",value:t.requestSize}),S.jsx(At,{label:"Response Size (B)",value:t.responseSize}),S.jsx(pn,{item:!0,container:!0,xs:12,spacing:2,children:S.jsx(At,{label:"Metadata",value:Object.entries(t.metadata).map(function(o){var i=o[0],a=o[1];return"".concat(i," = ").concat(a)}).join(`
`),isFull:!0})}),S.jsxs(pn,{container:!0,item:!0,direction:"row",xs:12,spacing:2,children:[S.jsx(pn,{item:!0,xs:12,md:3,children:S.jsx(Di,{disabled:t.requestSize===0,variant:"contained",onClick:function(){return r(t.id,"request")},sx:{margin:1,width:200},children:"Download Request"})}),S.jsx(pn,{item:!0,xs:12,md:3,children:S.jsx(Di,{disabled:t.responseSize===0,variant:"contained",onClick:function(){return r(t.id,"response")},sx:{margin:1,width:200},children:"Download Response"})})]})]}):S.jsx("p",{children:"No message data found"})]})};const Ka={d:Bi,s:RS,rqs:Bi,rps:Bi},q4=e=>{const t=new URLSearchParams;return!e||Object.keys(e).length===0||Object.entries(e).forEach(([n,r])=>{var o;r&&(((o=Ka==null?void 0:Ka[n])==null?void 0:o.call(Ka,r,n))??new URLSearchParams({[n]:r})).forEach((a,s)=>{t.append(s,a)})}),t},G4=()=>{const e=ol(),[t,n]=JP(),r=_F(t,["v","p","s","d","c","mci","rqs","rps","md","page","size"]),o=xm(),{totalElements:i,content:a}=o;console.log("logRows",a);const s=d=>{console.log("page changed to",d)},l=(d,f)=>{e(`/system-logs/${d}`)},u=d=>{const f=q4(d);n(f)},c=d=>{const f=new URLSearchParams(t);f.delete(d),n(f)};return S.jsx(U4,{onPageChange:s,logStatus:"",logRows:a,logFilters:r,logMessageTotalCount:i,onClickRowAction:l,onFilterChange:u,onFilterClear:c})},Z0=async({request:e})=>{const n=new URL(e.url).searchParams,r=new URL("http://localhost:8080/log");n.forEach((i,a)=>{r.searchParams.append(a,i)});const o=await fetch(r,{method:"GET",headers:{"Content-Type":"application/json"}});if(!o.ok)throw new Error("Failed to fetch logs");return o.json()},X4=()=>{const e=ol(),t=xm(),{id:n}=yP(),r=n?parseInt(n,10):0,{content:o}=t,i=o.find(a=>a.id===r);return S.jsx(K4,{message:i,backAction:()=>e("..",{relative:"path"}),downloadDataAction:function(a,s){throw new Error("Function not implemented.")}})};var zS=function(){return aa().get("trigger")},Q4=function(e){return new URLSearchParams(e)},BS=function(e,t){var n=Q4(t),r=n.toString()?"?".concat(n.toString()):"";return aa().post("trigger/".concat(e,"/async").concat(r))},US=function(e,t,n,r){function o(i){return i instanceof n?i:new n(function(a){a(i)})}return new(n||(n=Promise))(function(i,a){function s(c){try{u(r.next(c))}catch(d){a(d)}}function l(c){try{u(r.throw(c))}catch(d){a(d)}}function u(c){c.done?i(c.value):o(c.value).then(s,l)}u((r=r.apply(e,t||[])).next())})},WS=function(e,t){var n={label:0,sent:function(){if(i[0]&1)throw i[1];return i[1]},trys:[],ops:[]},r,o,i,a;return a={next:s(0),throw:s(1),return:s(2)},typeof Symbol=="function"&&(a[Symbol.iterator]=function(){return this}),a;function s(u){return function(c){return l([u,c])}}function l(u){if(r)throw new TypeError("Generator is already executing.");for(;a&&(a=0,u[0]&&(n=0)),n;)try{if(r=1,o&&(i=u[0]&2?o.return:u[0]?o.throw||((i=o.return)&&i.call(o),0):o.next)&&!(i=i.call(o,u[1])).done)return i;switch(o=0,i&&(u=[u[0]&2,i.value]),u[0]){case 0:case 1:i=u;break;case 4:return n.label++,{value:u[1],done:!1};case 5:n.label++,o=u[1],u=[0];continue;case 7:u=n.ops.pop(),n.trys.pop();continue;default:if(i=n.trys,!(i=i.length>0&&i[i.length-1])&&(u[0]===6||u[0]===2)){n=0;continue}if(u[0]===3&&(!i||u[1]>i[0]&&u[1]<i[3])){n.label=u[1];break}if(u[0]===6&&n.label<i[1]){n.label=i[1],i=u;break}if(i&&n.label<i[2]){n.label=i[2],n.ops.push(u);break}i[2]&&n.ops.pop(),n.trys.pop();continue}u=t.call(e,n)}catch(c){u=[6,c],o=0}finally{r=i=0}if(u[0]&5)throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}},Af=yl("triggerables/fetchTriggerables",function(e,t){return US(void 0,void 0,void 0,function(){var n;return WS(this,function(r){switch(r.label){case 0:return[4,zS()];case 1:return n=r.sent(),n.status!==200?[2,t.rejectWithValue({message:"Failed to fetch triggerables"})]:[2,n.data]}})})}),Lf=yl("triggerables/trigger",function(e,t){return US(void 0,[e,t],void 0,function(n,r){var o,i=n.triggerName,a=n.triggerParams;return WS(this,function(s){switch(s.label){case 0:return[4,BS(i,a)];case 1:return o=s.sent(),o.status!==200?[2,r.rejectWithValue({message:"Failed to fetch triggerables"})]:[2,o.data]}})})}),Y4={triggerables:{},fetchStatus:"loading"};Sg({name:"triggerable",initialState:Y4,reducers:{},extraReducers:function(e){e.addCase(Af.pending,function(t){t.fetchStatus="loading",t.fetchError="undefined"}),e.addCase(Af.fulfilled,function(t,n){var r=n.payload;t.triggerables=r,t.fetchStatus="succeeded"}),e.addCase(Af.rejected,function(t,n){var r=n.payload;r&&(t.fetchError=r.message),t.fetchStatus="failed"}),e.addCase(Lf.pending,function(t){t.triggerStatus="loading"}),e.addCase(Lf.fulfilled,function(t,n){var r=n.payload;t.triggerResponse=r,t.triggerStatus="succeeded"}),e.addCase(Lf.rejected,function(t,n){var r=n.payload;r&&(t.triggerError=r.message),t.triggerStatus="failed"})}});var HS=function(){return aa().get("task/list/active")},J4=function(e){return aa().get("task/".concat(e))},VS=function(e,t,n,r){function o(i){return i instanceof n?i:new n(function(a){a(i)})}return new(n||(n=Promise))(function(i,a){function s(c){try{u(r.next(c))}catch(d){a(d)}}function l(c){try{u(r.throw(c))}catch(d){a(d)}}function u(c){c.done?i(c.value):o(c.value).then(s,l)}u((r=r.apply(e,t||[])).next())})},KS=function(e,t){var n={label:0,sent:function(){if(i[0]&1)throw i[1];return i[1]},trys:[],ops:[]},r,o,i,a;return a={next:s(0),throw:s(1),return:s(2)},typeof Symbol=="function"&&(a[Symbol.iterator]=function(){return this}),a;function s(u){return function(c){return l([u,c])}}function l(u){if(r)throw new TypeError("Generator is already executing.");for(;a&&(a=0,u[0]&&(n=0)),n;)try{if(r=1,o&&(i=u[0]&2?o.return:u[0]?o.throw||((i=o.return)&&i.call(o),0):o.next)&&!(i=i.call(o,u[1])).done)return i;switch(o=0,i&&(u=[u[0]&2,i.value]),u[0]){case 0:case 1:i=u;break;case 4:return n.label++,{value:u[1],done:!1};case 5:n.label++,o=u[1],u=[0];continue;case 7:u=n.ops.pop(),n.trys.pop();continue;default:if(i=n.trys,!(i=i.length>0&&i[i.length-1])&&(u[0]===6||u[0]===2)){n=0;continue}if(u[0]===3&&(!i||u[1]>i[0]&&u[1]<i[3])){n.label=u[1];break}if(u[0]===6&&n.label<i[1]){n.label=i[1],i=u;break}if(i&&n.label<i[2]){n.label=i[2],n.ops.push(u);break}i[2]&&n.ops.pop(),n.trys.pop();continue}u=t.call(e,n)}catch(c){u=[6,c],o=0}finally{r=i=0}if(u[0]&5)throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}},If=yl("task/fetchActiveTasks",function(e,t){return VS(void 0,void 0,void 0,function(){var n;return KS(this,function(r){switch(r.label){case 0:return[4,HS()];case 1:return n=r.sent(),n.status!==200?[2,t.rejectWithValue({message:"Failed to fetch task statuses"})]:[2,n.data]}})})}),Z4=yl("task/fetchTaskStatus",function(e,t){return VS(void 0,void 0,void 0,function(){var n;return KS(this,function(r){switch(r.label){case 0:return[4,J4(e)];case 1:return n=r.sent(),n.status!==200?[2,t.rejectWithValue({message:"Failed to fetch task status for ".concat(e)})]:[2,n.data]}})})}),hh=function(){return hh=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++){t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e},hh.apply(this,arguments)},eD={fetchStatus:"loading"};Sg({name:"taskStatus",initialState:eD,reducers:{},extraReducers:function(e){e.addCase(If.pending,function(t){t.fetchStatus="loading",t.fetchError="undefined"}),e.addCase(If.fulfilled,function(t,n){var r=n.payload,o={};t.triggeredTaskStatuses&&(o=hh({},t.triggeredTaskStatuses)),r.forEach(function(i){o[i.id]=i}),t.activeTaskStatuses=o,t.fetchStatus="succeeded"}),e.addCase(If.rejected,function(t,n){var r=n.payload;r&&(t.fetchError=r.message),t.fetchStatus="failed",t.activeTaskStatuses=void 0}),e.addCase(Z4.fulfilled,function(t,n){var r,o,i=n.payload;t.triggeredTaskStatuses?t.triggeredTaskStatuses[i.id]=i:t.triggeredTaskStatuses=(r={},r[i.id]=i,r),t.activeTaskStatuses?t.activeTaskStatuses[i.id]=i:t.activeTaskStatuses=(o={},o[i.id]=i,o)})}});var tD=function(e){var t=e.triggerResponse,n=e.showNotification,r=e.onClose;return t&&n?S.jsxs(CM,{onClose:r,sx:{marginBottom:20},elevation:6,severity:"success",variant:"filled",children:["Backend response: ",t]}):null},Pg={},nD=wo;Object.defineProperty(Pg,"__esModule",{value:!0});var qS=Pg.default=void 0,rD=nD(xa()),oD=S;qS=Pg.default=(0,rD.default)((0,oD.jsx)("path",{d:"M17 10H7v2h10zm2-7h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2m0 16H5V8h14zm-5-5H7v2h7z"}),"EventNote");var iD=function(e){var t=e.taskStatus,n=e.openMessageChain,r=Gt.useState(!1),o=r[0],i=r[1],a=function(){i(!o)};return S.jsxs(Zj,{children:[S.jsx(gN,{title:"#".concat(t.id," ").concat(t.group),subheader:t.description,avatar:t.state==="RUNNING"||t.state==="CANCELLING"?S.jsx(qw,{}):void 0}),S.jsxs(Zy,{children:[S.jsx(An,{variant:"body2",color:"textSecondary",component:"p",children:"Task state is ".concat(t.state,". ").concat(t.durationMs?"Run took ".concat(t.durationMs/1e3," seconds."):"")}),S.jsx(An,{variant:"body2",color:"textSecondary",component:"p",children:t.message})]}),S.jsxs(oN,{disableSpacing:!0,children:[S.jsx(w0,{title:"Show message chain",children:S.jsx(Nn,{"aria-label":"show message chain",onClick:function(){var s=t.metadata.find(function(l){return l.key==="MessageChainId"});s&&n(Number(s.value))},children:S.jsx(qS,{})})}),S.jsx(w0,{title:o?"Hide metadata":"Show metadata",children:S.jsx(Nn,{sx:{transform:o?"rotate(180deg)":"rotate(0deg)",marginLeft:"auto",transition:"transform duration.shortest",display:t.metadata.length?"flex":"none"},onClick:a,"aria-expanded":o,"aria-label":"show metadata",children:S.jsx(_d,{})})})]}),S.jsx(Vm,{in:o,timeout:"auto",unmountOnExit:!0,children:S.jsxs(Zy,{children:[S.jsx(An,{paragraph:!0,children:"Metadata:"}),t.metadata.map(function(s){return S.jsxs(An,{children:[s.key,": ",s.value]},"task-status-md-".concat(t.id,"-").concat(s.key))})]})})]})},aD=function(e){var t=e.activeTaskStatuses,n=e.openMessageChain;return t?S.jsx(pn,{container:!0,spacing:2,sx:{marginBottom:20},children:Object.values(t).map(function(r){return S.jsx(pn,{item:!0,xs:6,children:S.jsx(iD,{taskStatus:r,openMessageChain:n})},"task-status-grid-item-".concat(r.id))})}):null},sD=function(e){return!isNaN(parseFloat(e))&&!isNaN(Number(e)-0)},lD={"java.lang.Integer":!0,"java.lang.Long":!0,"java.lang.Double":!0,"java.lang.Float":!0},uD=function(e,t){if(!(!t.required&&!e)){if(t.required&&(!e||e.trim().length===0))return"".concat(t.name," is mandatory!");if(lD[t.type]){if(!sD(e))return"Value must be numeric!";var n=Number(e);if(t.type==="java.lang.Integer"&&!Number.isInteger(n))return"Value must be an Integer!";var r=t.minValue||Number.MIN_VALUE,o=t.maxValue||Number.MAX_VALUE;if(n<r)return"Value too small, must be >= ".concat(r);if(n>o)return"Value too large, must be <= ".concat(o)}var i=t.minLength||0,a=t.maxLength;if(e.length<i)return"Value too short, must at least ".concat(i," characters");if(a&&e.length>a)return"Value too long, must be at most ".concat(a," characters")}},$o=function(){return $o=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++){t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e},$o.apply(this,arguments)},cD=function(e){var t={};return e.forEach(function(n){n.required&&(t[n.name]="")}),t},dD=function(e){var t=e.triggerName,n=e.triggerParams,r=e.triggerAction,o=b.useState({}),i=o[0],a=o[1],s=b.useState(cD(n)),l=s[0],u=s[1],c=function(f){var g=$o({},l);delete g[f],u(g)},d=function(f,g){var p,h,C=f.name;a($o($o({},i),(p={},p[C]=g.target.value,p)));var m=uD(g.target.value,f);m?u($o($o({},l),(h={},h[C]=m,h))):c(C)};return S.jsx("form",{onSubmit:function(f){f.preventDefault(),r(t,i)},children:S.jsxs(eg,{display:"flex",flexWrap:"wrap",gap:4,rowGap:4,children:[n.length===0?S.jsx(An,{children:"Trigger does not support additional parameters"}):S.jsxs(S.Fragment,{children:[S.jsx(An,{minWidth:"100%",children:"Trigger parameters"}),n.map(function(f){var g=f.name,p=l?l[g]:void 0;return S.jsx(Ks,{sx:{marginBottom:10},error:!!p,id:"".concat(t,"-").concat(g,"-input"),helperText:p||"",required:f.required,label:g,onChange:function(h){return d(f,h)}},"".concat(t,"-").concat(g,"-input"))})]}),S.jsx(Di,{id:"".concat(t,"-submit-btn"),variant:"contained",type:"submit",disabled:l?Object.keys(l).length>0:!1,sx:{marginTop:10,float:"right",marginLeft:"auto",height:"fit-content"},children:"Trigger"})]})})},fD=function(e){var t=e.triggerables,n=e.triggerAction;return S.jsx(S.Fragment,{children:Object.entries(t).map(function(r){var o=r[0],i=r[1];return S.jsxs(M2,{sx:{width:"100%",marginBottom:"5px"},children:[S.jsx(iM,{expandIcon:S.jsx(_d,{}),"aria-controls":"".concat(o,"-content"),id:"".concat(o,"-header"),children:S.jsx(An,{sx:{fontSize:18,flexBasis:"33.33%",flexShrink:0},children:o})}),S.jsx(I2,{sx:{flexDirection:"column"},children:S.jsx(dD,{triggerName:o,triggerParams:i,triggerAction:n})})]},"".concat(o,"-container"))})})},pD=function(e){var t=e.activeTaskStatuses,n=e.triggerables,r=e.triggerResponse,o=e.openMessageChain,i=e.handleTriggerAction,a=b.useState(!0),s=a[0],l=a[1];return S.jsxs(S.Fragment,{children:[S.jsx(tD,{triggerResponse:r,showNotification:s,onClose:function(){return l(!1)}}),S.jsx(aD,{activeTaskStatuses:t,openMessageChain:o}),S.jsx(fD,{triggerables:n,triggerAction:i})]})};const hD=()=>{const e=ol(),t=PP(),[n,r]=b.useState(),o=xm(),{activeTaskStatuses:i,triggerables:a}=o,s=i.reduce((u,c)=>(u[c.id]=c,u),{}),l=async(u,c)=>{try{const d=await BS(u,c);r(d)}catch(d){console.error(d),r({status:500,data:`Failed to trigger ${u}`})}t.revalidate()};return S.jsx(pD,{triggerResponse:n==null?void 0:n.data,activeTaskStatuses:s,triggerables:a,openMessageChain:u=>{e(`/message-log/${u}`)},handleTriggerAction:l})},mD=async()=>{try{const e=await zS(),t=await HS(),{data:n}=e,{data:r}=t;return{triggerables:n,activeTaskStatuses:r}}catch(e){throw console.error(e),new Error("Failed to fetch triggerables")}};yF("http://localhost:8080",void 0,!0);const gD=FP([{path:"/",element:S.jsx(VI,{})},{path:"/message-log",element:S.jsx(G4,{}),loader:Z0},{path:"/message-log/:id",element:S.jsx(X4,{}),loader:Z0},{path:"/triggerables",element:S.jsx(hD,{}),loader:mD}],{basename:"/admin-ui"});Ff.createRoot(document.getElementById("root")).render(S.jsx(Gt.StrictMode,{children:S.jsx(qP,{router:gD})}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXgtMEpQcS0xMFUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LWpzeC1ydW50aW1lLnByb2R1Y3Rpb24ubWluLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvcmVhY3QvanN4LXJ1bnRpbWUuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2luZGV4LmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2NsaWVudC5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0ByZW1peC1ydW4vcm91dGVyL2Rpc3Qvcm91dGVyLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2Rpc3QvaW5kZXguanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2Rpc3QvaW5kZXguanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2NvbG9ycy9jb21tb24uanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2NvbG9ycy9yZWQuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2NvbG9ycy9wdXJwbGUuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2NvbG9ycy9ibHVlLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9jb2xvcnMvbGlnaHRCbHVlLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9jb2xvcnMvZ3JlZW4uanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2NvbG9ycy9vcmFuZ2UuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2NvbG9ycy9ncmV5LmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS91dGlscy9mb3JtYXRNdWlFcnJvck1lc3NhZ2UvZm9ybWF0TXVpRXJyb3JNZXNzYWdlLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9zdHlsZXMvaWRlbnRpZmllci5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQGVtb3Rpb24vbWVtb2l6ZS9kaXN0L2Vtb3Rpb24tbWVtb2l6ZS5lc20uanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AZW1vdGlvbi9pcy1wcm9wLXZhbGlkL2Rpc3QvZW1vdGlvbi1pcy1wcm9wLXZhbGlkLmVzbS5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BlbW90aW9uL3NoZWV0L2Rpc3QvZW1vdGlvbi1zaGVldC5icm93c2VyLmVzbS5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL3N0eWxpcy9zcmMvRW51bS5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL3N0eWxpcy9zcmMvVXRpbGl0eS5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL3N0eWxpcy9zcmMvVG9rZW5pemVyLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvc3R5bGlzL3NyYy9QYXJzZXIuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9zdHlsaXMvc3JjL1NlcmlhbGl6ZXIuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9zdHlsaXMvc3JjL01pZGRsZXdhcmUuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AZW1vdGlvbi9jYWNoZS9kaXN0L2Vtb3Rpb24tY2FjaGUuYnJvd3Nlci5lc20uanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9ub2RlX21vZHVsZXMvcmVhY3QtaXMvY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3Mvbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MvZGlzdC9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy5janMuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AZW1vdGlvbi91dGlscy9kaXN0L2Vtb3Rpb24tdXRpbHMuYnJvd3Nlci5lc20uanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AZW1vdGlvbi9oYXNoL2Rpc3QvZW1vdGlvbi1oYXNoLmVzbS5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BlbW90aW9uL3VuaXRsZXNzL2Rpc3QvZW1vdGlvbi11bml0bGVzcy5lc20uanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AZW1vdGlvbi9zZXJpYWxpemUvZGlzdC9lbW90aW9uLXNlcmlhbGl6ZS5icm93c2VyLmVzbS5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BlbW90aW9uL3VzZS1pbnNlcnRpb24tZWZmZWN0LXdpdGgtZmFsbGJhY2tzL2Rpc3QvZW1vdGlvbi11c2UtaW5zZXJ0aW9uLWVmZmVjdC13aXRoLWZhbGxiYWNrcy5icm93c2VyLmVzbS5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BlbW90aW9uL3JlYWN0L2Rpc3QvZW1vdGlvbi1lbGVtZW50LTQzYzZmZWEwLmJyb3dzZXIuZXNtLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQGVtb3Rpb24vcmVhY3QvZGlzdC9lbW90aW9uLXJlYWN0LmJyb3dzZXIuZXNtLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQGVtb3Rpb24vc3R5bGVkL2Jhc2UvZGlzdC9lbW90aW9uLXN0eWxlZC1iYXNlLmJyb3dzZXIuZXNtLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQGVtb3Rpb24vc3R5bGVkL2Rpc3QvZW1vdGlvbi1zdHlsZWQuYnJvd3Nlci5lc20uanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL3N0eWxlZC1lbmdpbmUvU3R5bGVkRW5naW5lUHJvdmlkZXIvU3R5bGVkRW5naW5lUHJvdmlkZXIuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL3N0eWxlZC1lbmdpbmUvR2xvYmFsU3R5bGVzL0dsb2JhbFN0eWxlcy5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvc3R5bGVkLWVuZ2luZS9pbmRleC5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZGVlcG1lcmdlL2RlZXBtZXJnZS5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9jcmVhdGVUaGVtZS9jcmVhdGVCcmVha3BvaW50cy5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9jcmVhdGVUaGVtZS9zaGFwZS5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9tZXJnZS5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9icmVha3BvaW50cy5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvY2FwaXRhbGl6ZS9jYXBpdGFsaXplLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3N0eWxlLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL21lbW9pemUuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vc3BhY2luZy5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9jcmVhdGVUaGVtZS9jcmVhdGVTcGFjaW5nLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2NvbXBvc2UuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vYm9yZGVycy5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9jc3NHcmlkLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3BhbGV0dGUuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vc2l6aW5nLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3N0eWxlRnVuY3Rpb25TeC9kZWZhdWx0U3hDb25maWcuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vc3R5bGVGdW5jdGlvblN4L3N0eWxlRnVuY3Rpb25TeC5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9jcmVhdGVUaGVtZS9hcHBseVN0eWxlcy5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9jcmVhdGVUaGVtZS9jcmVhdGVUaGVtZS5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS91c2VUaGVtZVdpdGhvdXREZWZhdWx0LmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3VzZVRoZW1lLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL0dsb2JhbFN0eWxlcy9HbG9iYWxTdHlsZXMuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vc3R5bGVGdW5jdGlvblN4L2V4dGVuZFN4UHJvcC5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvQ2xhc3NOYW1lR2VuZXJhdG9yL0NsYXNzTmFtZUdlbmVyYXRvci5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL2Nsc3gvZGlzdC9jbHN4Lm1qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9jcmVhdGVCb3guanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzL2dlbmVyYXRlVXRpbGl0eUNsYXNzLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9yZWFjdC1pcy9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9yZWFjdC1pcy9pbmRleC5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZ2V0RGlzcGxheU5hbWUvZ2V0RGlzcGxheU5hbWUuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vY3JlYXRlU3R5bGVkLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3N0eWxlZC5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvcmVzb2x2ZVByb3BzL3Jlc29sdmVQcm9wcy5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS91c2VUaGVtZVByb3BzL2dldFRoZW1lUHJvcHMuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vdXNlVGhlbWVQcm9wcy91c2VUaGVtZVByb3BzLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS91dGlscy91c2VFbmhhbmNlZEVmZmVjdC91c2VFbmhhbmNlZEVmZmVjdC5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvY2xhbXAvY2xhbXAuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2NyZWF0ZUNoYWluZWRGdW5jdGlvbi9jcmVhdGVDaGFpbmVkRnVuY3Rpb24uanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2RlYm91bmNlL2RlYm91bmNlLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS91dGlscy9kZXByZWNhdGVkUHJvcFR5cGUvZGVwcmVjYXRlZFByb3BUeXBlLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS91dGlscy9pc011aUVsZW1lbnQvaXNNdWlFbGVtZW50LmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS91dGlscy9vd25lckRvY3VtZW50L293bmVyRG9jdW1lbnQuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL293bmVyV2luZG93L293bmVyV2luZG93LmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS91dGlscy9yZXF1aXJlUHJvcEZhY3RvcnkvcmVxdWlyZVByb3BGYWN0b3J5LmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS91dGlscy9zZXRSZWYvc2V0UmVmLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS91dGlscy91c2VJZC91c2VJZC5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvdW5zdXBwb3J0ZWRQcm9wL3Vuc3VwcG9ydGVkUHJvcC5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvdXNlQ29udHJvbGxlZC91c2VDb250cm9sbGVkLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS91dGlscy91c2VFdmVudENhbGxiYWNrL3VzZUV2ZW50Q2FsbGJhY2suanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL3VzZUZvcmtSZWYvdXNlRm9ya1JlZi5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvdXNlTGF6eVJlZi91c2VMYXp5UmVmLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS91dGlscy91c2VPbk1vdW50L3VzZU9uTW91bnQuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL3VzZVRpbWVvdXQvdXNlVGltZW91dC5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvdXNlSXNGb2N1c1Zpc2libGUvdXNlSXNGb2N1c1Zpc2libGUuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2dldFNjcm9sbGJhclNpemUvZ2V0U2Nyb2xsYmFyU2l6ZS5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvY29tcG9zZUNsYXNzZXMvY29tcG9zZUNsYXNzZXMuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vUnRsUHJvdmlkZXIvaW5kZXguanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vU3RhY2svY3JlYXRlU3RhY2suanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy9jcmVhdGVNaXhpbnMuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdC5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2NvbG9yTWFuaXB1bGF0b3IuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy9jcmVhdGVQYWxldHRlLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9zdHlsZXMvY3JlYXRlVHlwb2dyYXBoeS5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvc3R5bGVzL3NoYWRvd3MuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy9jcmVhdGVUcmFuc2l0aW9ucy5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvc3R5bGVzL3pJbmRleC5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvc3R5bGVzL2NyZWF0ZVRoZW1lLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9zdHlsZXMvZGVmYXVsdFRoZW1lLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9zdHlsZXMvdXNlVGhlbWUuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy91c2VUaGVtZVByb3BzLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vY3JlYXRlU3R5bGVkLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9zdHlsZXMvc2xvdFNob3VsZEZvcndhcmRQcm9wLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9zdHlsZXMvcm9vdFNob3VsZEZvcndhcmRQcm9wLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9zdHlsZXMvc3R5bGVkLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9zdHlsZXMvZ2V0T3ZlcmxheUFscGhhLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9TdmdJY29uL3N2Z0ljb25DbGFzc2VzLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9TdmdJY29uL1N2Z0ljb24uanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3V0aWxzL2NyZWF0ZVN2Z0ljb24uanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3V0aWxzL2luZGV4LmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC96ZXJvLXN0eWxlZC9pbmRleC5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NldFByb3RvdHlwZU9mLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZS5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvZXNtL2NvbmZpZy5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvZXNtL1RyYW5zaXRpb25Hcm91cENvbnRleHQuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2VzbS91dGlscy9yZWZsb3cuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2VzbS9UcmFuc2l0aW9uLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXNzZXJ0VGhpc0luaXRpYWxpemVkLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9lc20vdXRpbHMvQ2hpbGRNYXBwaW5nLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9lc20vVHJhbnNpdGlvbkdyb3VwLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC90cmFuc2l0aW9ucy91dGlscy5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQ29sbGFwc2UvY29sbGFwc2VDbGFzc2VzLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9Db2xsYXBzZS9Db2xsYXBzZS5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvUGFwZXIvcGFwZXJDbGFzc2VzLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9QYXBlci9QYXBlci5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQWNjb3JkaW9uL0FjY29yZGlvbkNvbnRleHQuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL2Jhc2UvdXRpbHMvaXNIb3N0Q29tcG9uZW50LmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9iYXNlL3V0aWxzL2FwcGVuZE93bmVyU3RhdGUuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL2Jhc2UvdXRpbHMvQ2xhc3NOYW1lQ29uZmlndXJhdG9yLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9iYXNlL3V0aWxzL2V4dHJhY3RFdmVudEhhbmRsZXJzLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9iYXNlL3V0aWxzL3Jlc29sdmVDb21wb25lbnRQcm9wcy5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvYmFzZS91dGlscy9vbWl0RXZlbnRIYW5kbGVycy5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvYmFzZS91dGlscy9tZXJnZVNsb3RQcm9wcy5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvYmFzZS91dGlscy91c2VTbG90UHJvcHMuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3V0aWxzL3VzZVNsb3QuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0FjY29yZGlvbi9hY2NvcmRpb25DbGFzc2VzLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9BY2NvcmRpb24vQWNjb3JkaW9uLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9BY2NvcmRpb25EZXRhaWxzL2FjY29yZGlvbkRldGFpbHNDbGFzc2VzLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9BY2NvcmRpb25EZXRhaWxzL0FjY29yZGlvbkRldGFpbHMuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0J1dHRvbkJhc2UvUmlwcGxlLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9CdXR0b25CYXNlL3RvdWNoUmlwcGxlQ2xhc3Nlcy5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQnV0dG9uQmFzZS9Ub3VjaFJpcHBsZS5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQnV0dG9uQmFzZS9idXR0b25CYXNlQ2xhc3Nlcy5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQnV0dG9uQmFzZS9CdXR0b25CYXNlLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9BY2NvcmRpb25TdW1tYXJ5L2FjY29yZGlvblN1bW1hcnlDbGFzc2VzLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9BY2NvcmRpb25TdW1tYXJ5L0FjY29yZGlvblN1bW1hcnkuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0FsZXJ0L2FsZXJ0Q2xhc3Nlcy5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvSWNvbkJ1dHRvbi9pY29uQnV0dG9uQ2xhc3Nlcy5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvSWNvbkJ1dHRvbi9JY29uQnV0dG9uLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9pbnRlcm5hbC9zdmctaWNvbnMvU3VjY2Vzc091dGxpbmVkLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9pbnRlcm5hbC9zdmctaWNvbnMvUmVwb3J0UHJvYmxlbU91dGxpbmVkLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9pbnRlcm5hbC9zdmctaWNvbnMvRXJyb3JPdXRsaW5lLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9pbnRlcm5hbC9zdmctaWNvbnMvSW5mb091dGxpbmVkLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9pbnRlcm5hbC9zdmctaWNvbnMvQ2xvc2UuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0FsZXJ0L0FsZXJ0LmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9UeXBvZ3JhcGh5L3R5cG9ncmFwaHlDbGFzc2VzLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9UeXBvZ3JhcGh5L1R5cG9ncmFwaHkuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL2Jhc2UvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MvaW5kZXguanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL2Jhc2UvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcy9pbmRleC5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvYmFzZS9Gb2N1c1RyYXAvRm9jdXNUcmFwLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9iYXNlL1BvcnRhbC9Qb3J0YWwuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL2Jhc2UvdW5zdGFibGVfdXNlTW9kYWwvTW9kYWxNYW5hZ2VyLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9iYXNlL3Vuc3RhYmxlX3VzZU1vZGFsL3VzZU1vZGFsLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2VudW1zLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXROb2RlTmFtZS5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0V2luZG93LmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9pbnN0YW5jZU9mLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9hcHBseVN0eWxlcy5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9nZXRCYXNlUGxhY2VtZW50LmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL21hdGguanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvdXNlckFnZW50LmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9pc0xheW91dFZpZXdwb3J0LmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRCb3VuZGluZ0NsaWVudFJlY3QuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldExheW91dFJlY3QuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2NvbnRhaW5zLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRDb21wdXRlZFN0eWxlLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9pc1RhYmxlRWxlbWVudC5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0RG9jdW1lbnRFbGVtZW50LmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRQYXJlbnROb2RlLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRPZmZzZXRQYXJlbnQuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50LmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL3dpdGhpbi5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9nZXRGcmVzaFNpZGVPYmplY3QuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvbWVyZ2VQYWRkaW5nT2JqZWN0LmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2V4cGFuZFRvSGFzaE1hcC5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvYXJyb3cuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZ2V0VmFyaWF0aW9uLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9jb21wdXRlU3R5bGVzLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9ldmVudExpc3RlbmVycy5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9nZXRPcHBvc2l0ZVBsYWNlbWVudC5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9nZXRPcHBvc2l0ZVZhcmlhdGlvblBsYWNlbWVudC5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0V2luZG93U2Nyb2xsLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRXaW5kb3dTY3JvbGxCYXJYLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRWaWV3cG9ydFJlY3QuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldERvY3VtZW50UmVjdC5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvaXNTY3JvbGxQYXJlbnQuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldFNjcm9sbFBhcmVudC5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvbGlzdFNjcm9sbFBhcmVudHMuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvcmVjdFRvQ2xpZW50UmVjdC5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0Q2xpcHBpbmdSZWN0LmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2NvbXB1dGVPZmZzZXRzLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2RldGVjdE92ZXJmbG93LmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2NvbXB1dGVBdXRvUGxhY2VtZW50LmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9mbGlwLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9oaWRlLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9vZmZzZXQuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvbW9kaWZpZXJzL3BvcHBlck9mZnNldHMuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZ2V0QWx0QXhpcy5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvcHJldmVudE92ZXJmbG93LmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRIVE1MRWxlbWVudFNjcm9sbC5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0Tm9kZVNjcm9sbC5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0Q29tcG9zaXRlUmVjdC5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9vcmRlck1vZGlmaWVycy5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9kZWJvdW5jZS5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9tZXJnZUJ5TmFtZS5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9jcmVhdGVQb3BwZXIuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvcG9wcGVyLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9iYXNlL1BvcHBlci9wb3BwZXJDbGFzc2VzLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9iYXNlL1BvcHBlci9Qb3BwZXIuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL2Jhc2UvVGV4dGFyZWFBdXRvc2l6ZS9UZXh0YXJlYUF1dG9zaXplLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vdXNlVGhlbWVXaXRob3V0RGVmYXVsdC5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvUG9wcGVyL1BvcHBlci5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvRm9ybUNvbnRyb2wvZm9ybUNvbnRyb2xTdGF0ZS5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvRm9ybUNvbnRyb2wvRm9ybUNvbnRyb2xDb250ZXh0LmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9Gb3JtQ29udHJvbC91c2VGb3JtQ29udHJvbC5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvR2xvYmFsU3R5bGVzL0dsb2JhbFN0eWxlcy5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvSW5wdXRCYXNlL3V0aWxzLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9JbnB1dEJhc2UvaW5wdXRCYXNlQ2xhc3Nlcy5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvSW5wdXRCYXNlL0lucHV0QmFzZS5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvSW5wdXQvaW5wdXRDbGFzc2VzLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9PdXRsaW5lZElucHV0L291dGxpbmVkSW5wdXRDbGFzc2VzLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9GaWxsZWRJbnB1dC9maWxsZWRJbnB1dENsYXNzZXMuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2ludGVybmFsL3N2Zy1pY29ucy9BcnJvd0Ryb3BEb3duLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9GYWRlL0ZhZGUuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0JhY2tkcm9wL2JhY2tkcm9wQ2xhc3Nlcy5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQmFja2Ryb3AvQmFja2Ryb3AuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0JveC9ib3hDbGFzc2VzLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9Cb3gvQm94LmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9CdXR0b24vYnV0dG9uQ2xhc3Nlcy5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQnV0dG9uR3JvdXAvQnV0dG9uR3JvdXBDb250ZXh0LmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9CdXR0b25Hcm91cC9CdXR0b25Hcm91cEJ1dHRvbkNvbnRleHQuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0J1dHRvbi9CdXR0b24uanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0NhcmQvY2FyZENsYXNzZXMuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0NhcmQvQ2FyZC5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQ2FyZEFjdGlvbnMvY2FyZEFjdGlvbnNDbGFzc2VzLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9DYXJkQWN0aW9ucy9DYXJkQWN0aW9ucy5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQ2FyZENvbnRlbnQvY2FyZENvbnRlbnRDbGFzc2VzLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9DYXJkQ29udGVudC9DYXJkQ29udGVudC5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQ2FyZEhlYWRlci9jYXJkSGVhZGVyQ2xhc3Nlcy5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQ2FyZEhlYWRlci9DYXJkSGVhZGVyLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9DaXJjdWxhclByb2dyZXNzL2NpcmN1bGFyUHJvZ3Jlc3NDbGFzc2VzLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9DaXJjdWxhclByb2dyZXNzL0NpcmN1bGFyUHJvZ3Jlc3MuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL01vZGFsL21vZGFsQ2xhc3Nlcy5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvTW9kYWwvTW9kYWwuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0RpdmlkZXIvZGl2aWRlckNsYXNzZXMuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0ZpbGxlZElucHV0L0ZpbGxlZElucHV0LmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9Gb3JtQ29udHJvbC9mb3JtQ29udHJvbENsYXNzZXMuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0Zvcm1Db250cm9sL0Zvcm1Db250cm9sLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9TdGFjay9TdGFjay5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvRm9ybUhlbHBlclRleHQvZm9ybUhlbHBlclRleHRDbGFzc2VzLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9Gb3JtSGVscGVyVGV4dC9Gb3JtSGVscGVyVGV4dC5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvRm9ybUxhYmVsL2Zvcm1MYWJlbENsYXNzZXMuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0Zvcm1MYWJlbC9Gb3JtTGFiZWwuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0dyaWQvR3JpZENvbnRleHQuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0dyaWQvZ3JpZENsYXNzZXMuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0dyaWQvR3JpZC5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvR3Jvdy9Hcm93LmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9JbnB1dC9JbnB1dC5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvSW5wdXRBZG9ybm1lbnQvaW5wdXRBZG9ybm1lbnRDbGFzc2VzLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9JbnB1dEFkb3JubWVudC9JbnB1dEFkb3JubWVudC5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvSW5wdXRMYWJlbC9pbnB1dExhYmVsQ2xhc3Nlcy5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvSW5wdXRMYWJlbC9JbnB1dExhYmVsLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9MaXN0L0xpc3RDb250ZXh0LmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9MaXN0L2xpc3RDbGFzc2VzLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9MaXN0L0xpc3QuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0xpc3RJdGVtSWNvbi9saXN0SXRlbUljb25DbGFzc2VzLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9MaXN0SXRlbVRleHQvbGlzdEl0ZW1UZXh0Q2xhc3Nlcy5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvTWVudUxpc3QvTWVudUxpc3QuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL1BvcG92ZXIvcG9wb3ZlckNsYXNzZXMuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL1BvcG92ZXIvUG9wb3Zlci5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvTWVudS9tZW51Q2xhc3Nlcy5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvTWVudS9NZW51LmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9NZW51SXRlbS9tZW51SXRlbUNsYXNzZXMuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL01lbnVJdGVtL01lbnVJdGVtLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9OYXRpdmVTZWxlY3QvbmF0aXZlU2VsZWN0Q2xhc3Nlcy5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvTmF0aXZlU2VsZWN0L05hdGl2ZVNlbGVjdElucHV0LmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9PdXRsaW5lZElucHV0L05vdGNoZWRPdXRsaW5lLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9PdXRsaW5lZElucHV0L091dGxpbmVkSW5wdXQuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2ludGVybmFsL3N2Zy1pY29ucy9GaXJzdFBhZ2UuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2ludGVybmFsL3N2Zy1pY29ucy9MYXN0UGFnZS5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvU2VsZWN0L3NlbGVjdENsYXNzZXMuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL1NlbGVjdC9TZWxlY3RJbnB1dC5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvU2VsZWN0L1NlbGVjdC5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvVG9vbHRpcC90b29sdGlwQ2xhc3Nlcy5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvVG9vbHRpcC9Ub29sdGlwLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9UYWJsZS9UYWJsZUNvbnRleHQuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL1RhYmxlL3RhYmxlQ2xhc3Nlcy5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvVGFibGUvVGFibGUuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL1RhYmxlL1RhYmxlbHZsMkNvbnRleHQuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL1RhYmxlQm9keS90YWJsZUJvZHlDbGFzc2VzLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9UYWJsZUJvZHkvVGFibGVCb2R5LmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9UYWJsZUNlbGwvdGFibGVDZWxsQ2xhc3Nlcy5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvVGFibGVDZWxsL1RhYmxlQ2VsbC5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvVGFibGVDb250YWluZXIvdGFibGVDb250YWluZXJDbGFzc2VzLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9UYWJsZUNvbnRhaW5lci9UYWJsZUNvbnRhaW5lci5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvVGFibGVIZWFkL3RhYmxlSGVhZENsYXNzZXMuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL1RhYmxlSGVhZC9UYWJsZUhlYWQuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL1Rvb2xiYXIvdG9vbGJhckNsYXNzZXMuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL1Rvb2xiYXIvVG9vbGJhci5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvaW50ZXJuYWwvc3ZnLWljb25zL0tleWJvYXJkQXJyb3dMZWZ0LmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9pbnRlcm5hbC9zdmctaWNvbnMvS2V5Ym9hcmRBcnJvd1JpZ2h0LmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9UYWJsZVBhZ2luYXRpb24vVGFibGVQYWdpbmF0aW9uQWN0aW9ucy5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvVGFibGVQYWdpbmF0aW9uL3RhYmxlUGFnaW5hdGlvbkNsYXNzZXMuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL1RhYmxlUGFnaW5hdGlvbi9UYWJsZVBhZ2luYXRpb24uanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL1RhYmxlUm93L3RhYmxlUm93Q2xhc3Nlcy5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvVGFibGVSb3cvVGFibGVSb3cuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL1RleHRGaWVsZC90ZXh0RmllbGRDbGFzc2VzLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9UZXh0RmllbGQvVGV4dEZpZWxkLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9zcmMvQXBwLnRzeCIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2JpbmQuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9heGlvcy9saWIvdXRpbHMuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9BeGlvc0Vycm9yLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvbnVsbC5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3RvRm9ybURhdGEuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9BeGlvc1VSTFNlYXJjaFBhcmFtcy5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2J1aWxkVVJMLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvSW50ZXJjZXB0b3JNYW5hZ2VyLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzL3RyYW5zaXRpb25hbC5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9wbGF0Zm9ybS9icm93c2VyL2NsYXNzZXMvVVJMU2VhcmNoUGFyYW1zLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3BsYXRmb3JtL2Jyb3dzZXIvY2xhc3Nlcy9Gb3JtRGF0YS5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9wbGF0Zm9ybS9icm93c2VyL2NsYXNzZXMvQmxvYi5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9wbGF0Zm9ybS9icm93c2VyL2luZGV4LmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3BsYXRmb3JtL2NvbW1vbi91dGlscy5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9wbGF0Zm9ybS9pbmRleC5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3RvVVJMRW5jb2RlZEZvcm0uanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9mb3JtRGF0YVRvSlNPTi5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9kZWZhdWx0cy9pbmRleC5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zSGVhZGVycy5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3RyYW5zZm9ybURhdGEuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL2lzQ2FuY2VsLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWxlZEVycm9yLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvc2V0dGxlLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VQcm90b2NvbC5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3NwZWVkb21ldGVyLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvdGhyb3R0bGUuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9wcm9ncmVzc0V2ZW50UmVkdWNlci5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbi5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2Nvb2tpZXMuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc0Fic29sdXRlVVJMLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29tYmluZVVSTHMuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9idWlsZEZ1bGxQYXRoLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvbWVyZ2VDb25maWcuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9yZXNvbHZlQ29uZmlnLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2FkYXB0ZXJzL3hoci5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2NvbXBvc2VTaWduYWxzLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvdHJhY2tTdHJlYW0uanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9heGlvcy9saWIvYWRhcHRlcnMvZmV0Y2guanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9heGlvcy9saWIvYWRhcHRlcnMvYWRhcHRlcnMuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9kaXNwYXRjaFJlcXVlc3QuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9heGlvcy9saWIvZW52L2RhdGEuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy92YWxpZGF0b3IuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9BeGlvcy5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsVG9rZW4uanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9zcHJlYWQuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc0F4aW9zRXJyb3IuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9IdHRwU3RhdHVzQ29kZS5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9heGlvcy5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0Bldm9sdmVyLWZpL2V2b2x2ZXItYmFzaWNzL2Rpc3QvZXNtL2NvbW1vbi9ldm9sdmVyQ2xpZW50LmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQGV2b2x2ZXItZmkvZXZvbHZlci1iYXNpY3MvZGlzdC9lc20vY29tbW9uL2NvbXBvbmVudHMvTGlzdEhlYWRlci5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0Bldm9sdmVyLWZpL2V2b2x2ZXItYmFzaWNzL2Rpc3QvZXNtL2NvbW1vbi9jb21wb25lbnRzL0xpc3RSb3cuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL2ljb25zLW1hdGVyaWFsL3V0aWxzL2NyZWF0ZVN2Z0ljb24uanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AbXVpL2ljb25zLW1hdGVyaWFsL0JhY2tzcGFjZS5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0Bldm9sdmVyLWZpL2V2b2x2ZXItYmFzaWNzL2Rpc3QvZXNtL2NvbW1vbi9jb21wb25lbnRzL0xpc3RGaWx0ZXJGaWVsZC5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0Bldm9sdmVyLWZpL2V2b2x2ZXItYmFzaWNzL2Rpc3QvZXNtL2NvbW1vbi9jb21wb25lbnRzL0xpc3RGaWx0ZXJzLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQGV2b2x2ZXItZmkvZXZvbHZlci1iYXNpY3MvZGlzdC9lc20vY29tbW9uL2NvbXBvbmVudHMvTGlzdENvbnRyb2xzLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQGV2b2x2ZXItZmkvZXZvbHZlci1iYXNpY3MvZGlzdC9lc20vY29tbW9uL2NvbXBvbmVudHMvTGlzdFRhYmxlLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQG11aS9pY29ucy1tYXRlcmlhbC9TZWFyY2guanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AZXZvbHZlci1maS9ldm9sdmVyLWJhc2ljcy9kaXN0L2VzbS9jb21tb24vdXRpbHMvZmlsdGVyVXRpbHMuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AZXZvbHZlci1maS9ldm9sdmVyLWJhc2ljcy9kaXN0L2VzbS9jb21tb24vY29tcG9uZW50cy9WYWx1ZUZpbHRlckxpbmsuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AZXZvbHZlci1maS9ldm9sdmVyLWJhc2ljcy9kaXN0L2VzbS9jb21tb24vY29tcG9uZW50cy9EYXRlVGltZVJhbmdlRmlsdGVyRmllbGQuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AZXZvbHZlci1maS9ldm9sdmVyLWJhc2ljcy9kaXN0L2VzbS9jb21tb24vdXRpbHMvdmFsaWRhdGlvbi5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvaWNvbnMtbWF0ZXJpYWwvRXhwYW5kTGVzcy5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvaWNvbnMtbWF0ZXJpYWwvRXhwYW5kTW9yZS5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0Bldm9sdmVyLWZpL2V2b2x2ZXItYmFzaWNzL2Rpc3QvZXNtL2NvbW1vbi9jb21wb25lbnRzL0xpc3RNZXRhZGF0YS5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0Bldm9sdmVyLWZpL2V2b2x2ZXItYmFzaWNzL2Rpc3QvZXNtL2NvbW1vbi9jb21wb25lbnRzL2xpc3RVdGlscy5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL2ltbWVyL2Rpc3QvaW1tZXIuZXNtLm1qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0ByZWR1eGpzL3Rvb2xraXQvZGlzdC9yZWR1eC10b29sa2l0LmVzbS5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0Bldm9sdmVyLWZpL2V2b2x2ZXItYmFzaWNzL2Rpc3QvZXNtL21lc3NhZ2UtbG9nL3V0aWxzL2luZGV4LmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQGV2b2x2ZXItZmkvZXZvbHZlci1iYXNpY3MvZGlzdC9lc20vbWVzc2FnZS1sb2cvYWN0aW9ucy9pbmRleC5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0Bldm9sdmVyLWZpL2V2b2x2ZXItYmFzaWNzL2Rpc3QvZXNtL21lc3NhZ2UtbG9nL3NsaWNlcy9sb2dTbGljZS5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L25vZGVfbW9kdWxlcy9yZWFjdC1pcy9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AZXZvbHZlci1maS9ldm9sdmVyLWJhc2ljcy9kaXN0L2VzbS9tZXNzYWdlLWxvZy9jb21wb25lbnRzL2xvZ0xpc3RDb2x1bW5EZWZpbml0aW9ucy5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0Bldm9sdmVyLWZpL2V2b2x2ZXItYmFzaWNzL2Rpc3QvZXNtL21lc3NhZ2UtbG9nL2NvbXBvbmVudHMvTG9nTGlzdENvbXBvbmVudC5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvaWNvbnMtbWF0ZXJpYWwvQXJyb3dCYWNrLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQGV2b2x2ZXItZmkvZXZvbHZlci1iYXNpY3MvZGlzdC9lc20vbWVzc2FnZS1sb2cvY29tcG9uZW50cy9Mb2dNZXNzYWdlQ29tcG9uZW50LmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9zcmMvcm91dGVzL21lc3NhZ2UtbG9nL01lc3NhZ2VMb2dSb3V0ZS50c3giLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L3NyYy9yb3V0ZXMvbWVzc2FnZS1sb2cvbG9hZGVyLnRzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9zcmMvcm91dGVzL21lc3NhZ2UtbG9nL1NpbmdsZU1lc3NhZ2VSb3V0ZS50c3giLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AZXZvbHZlci1maS9ldm9sdmVyLWJhc2ljcy9kaXN0L2VzbS90cmlnZ2VyYWJsZS91dGlscy9pbmRleC5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0Bldm9sdmVyLWZpL2V2b2x2ZXItYmFzaWNzL2Rpc3QvZXNtL3RyaWdnZXJhYmxlL2FjdGlvbnMvaW5kZXguanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AZXZvbHZlci1maS9ldm9sdmVyLWJhc2ljcy9kaXN0L2VzbS90cmlnZ2VyYWJsZS9zbGljZXMvdHJpZ2dlcmFibGVTbGljZS5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0Bldm9sdmVyLWZpL2V2b2x2ZXItYmFzaWNzL2Rpc3QvZXNtL3Rhc2stc3RhdHVzL3V0aWxzL2luZGV4LmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQGV2b2x2ZXItZmkvZXZvbHZlci1iYXNpY3MvZGlzdC9lc20vdGFzay1zdGF0dXMvYWN0aW9ucy9pbmRleC5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0Bldm9sdmVyLWZpL2V2b2x2ZXItYmFzaWNzL2Rpc3QvZXNtL3Rhc2stc3RhdHVzL3NsaWNlcy90YXNrU3RhdHVzU2xpY2UuanMiLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy9AZXZvbHZlci1maS9ldm9sdmVyLWJhc2ljcy9kaXN0L2VzbS90cmlnZ2VyYWJsZS9jb21wb25lbnRzL1RyaWdnZXJSZXNwb25zZU5vdGlmaWNhdGlvbi5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0BtdWkvaWNvbnMtbWF0ZXJpYWwvRXZlbnROb3RlLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQGV2b2x2ZXItZmkvZXZvbHZlci1iYXNpY3MvZGlzdC9lc20vdGFzay1zdGF0dXMvY29tcG9uZW50cy9UYXNrU3RhdHVzQ2FyZC5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0Bldm9sdmVyLWZpL2V2b2x2ZXItYmFzaWNzL2Rpc3QvZXNtL3RyaWdnZXJhYmxlL2NvbXBvbmVudHMvQWN0aXZlVGFza1N0YXR1c2VzLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQGV2b2x2ZXItZmkvZXZvbHZlci1iYXNpY3MvZGlzdC9lc20vdHJpZ2dlcmFibGUvY29tcG9uZW50cy90cmlnZ2VyYWJsZVV0aWxzLmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9ub2RlX21vZHVsZXMvQGV2b2x2ZXItZmkvZXZvbHZlci1iYXNpY3MvZGlzdC9lc20vdHJpZ2dlcmFibGUvY29tcG9uZW50cy9UcmlnZ2VyRm9ybS5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0Bldm9sdmVyLWZpL2V2b2x2ZXItYmFzaWNzL2Rpc3QvZXNtL3RyaWdnZXJhYmxlL2NvbXBvbmVudHMvVHJpZ2dlcmFibGVzTGlzdC5qcyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvbm9kZV9tb2R1bGVzL0Bldm9sdmVyLWZpL2V2b2x2ZXItYmFzaWNzL2Rpc3QvZXNtL3RyaWdnZXJhYmxlL2NvbXBvbmVudHMvVHJpZ2dlcmFibGVzQ29tcG9uZW50LmpzIiwiLi4vLi4vLi4vLi4vamF2YXNjcmlwdC9zcmMvcm91dGVzL3RyaWdnZXJhYmxlcy9UcmlnZ2VyYWJsZXNSb3V0ZS50c3giLCIuLi8uLi8uLi8uLi9qYXZhc2NyaXB0L3NyYy9yb3V0ZXMvdHJpZ2dlcmFibGVzL2xvYWRlci50cyIsIi4uLy4uLy4uLy4uL2phdmFzY3JpcHQvc3JjL21haW4udHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHJlYWN0LnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgbD1TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKSxuPVN5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIikscD1TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIikscT1TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIikscj1TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIiksdD1TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIiksdT1TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKSx2PVN5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKSx3PVN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKSx4PVN5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpLHk9U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIiksej1TeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gQShhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9eiYmYVt6XXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfVxudmFyIEI9e2lzTW91bnRlZDpmdW5jdGlvbigpe3JldHVybiExfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbigpe319LEM9T2JqZWN0LmFzc2lnbixEPXt9O2Z1bmN0aW9uIEUoYSxiLGUpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9RDt0aGlzLnVwZGF0ZXI9ZXx8Qn1FLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O1xuRS5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oYSxiKXtpZihcIm9iamVjdFwiIT09dHlwZW9mIGEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZudWxsIT1hKXRocm93IEVycm9yKFwic2V0U3RhdGUoLi4uKTogdGFrZXMgYW4gb2JqZWN0IG9mIHN0YXRlIHZhcmlhYmxlcyB0byB1cGRhdGUgb3IgYSBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGFuIG9iamVjdCBvZiBzdGF0ZSB2YXJpYWJsZXMuXCIpO3RoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcyxhLGIsXCJzZXRTdGF0ZVwiKX07RS5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24oYSl7dGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLGEsXCJmb3JjZVVwZGF0ZVwiKX07ZnVuY3Rpb24gRigpe31GLnByb3RvdHlwZT1FLnByb3RvdHlwZTtmdW5jdGlvbiBHKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUQ7dGhpcy51cGRhdGVyPWV8fEJ9dmFyIEg9Ry5wcm90b3R5cGU9bmV3IEY7XG5ILmNvbnN0cnVjdG9yPUc7QyhILEUucHJvdG90eXBlKTtILmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwO3ZhciBJPUFycmF5LmlzQXJyYXksSj1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEs9e2N1cnJlbnQ6bnVsbH0sTD17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gTShhLGIsZSl7dmFyIGQsYz17fSxrPW51bGwsaD1udWxsO2lmKG51bGwhPWIpZm9yKGQgaW4gdm9pZCAwIT09Yi5yZWYmJihoPWIucmVmKSx2b2lkIDAhPT1iLmtleSYmKGs9XCJcIitiLmtleSksYilKLmNhbGwoYixkKSYmIUwuaGFzT3duUHJvcGVydHkoZCkmJihjW2RdPWJbZF0pO3ZhciBnPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZyljLmNoaWxkcmVuPWU7ZWxzZSBpZigxPGcpe2Zvcih2YXIgZj1BcnJheShnKSxtPTA7bTxnO20rKylmW21dPWFyZ3VtZW50c1ttKzJdO2MuY2hpbGRyZW49Zn1pZihhJiZhLmRlZmF1bHRQcm9wcylmb3IoZCBpbiBnPWEuZGVmYXVsdFByb3BzLGcpdm9pZCAwPT09Y1tkXSYmKGNbZF09Z1tkXSk7cmV0dXJueyQkdHlwZW9mOmwsdHlwZTphLGtleTprLHJlZjpoLHByb3BzOmMsX293bmVyOksuY3VycmVudH19XG5mdW5jdGlvbiBOKGEsYil7cmV0dXJueyQkdHlwZW9mOmwsdHlwZTphLnR5cGUsa2V5OmIscmVmOmEucmVmLHByb3BzOmEucHJvcHMsX293bmVyOmEuX293bmVyfX1mdW5jdGlvbiBPKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1sfWZ1bmN0aW9uIGVzY2FwZShhKXt2YXIgYj17XCI9XCI6XCI9MFwiLFwiOlwiOlwiPTJcIn07cmV0dXJuXCIkXCIrYS5yZXBsYWNlKC9bPTpdL2csZnVuY3Rpb24oYSl7cmV0dXJuIGJbYV19KX12YXIgUD0vXFwvKy9nO2Z1bmN0aW9uIFEoYSxiKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZudWxsIT1hLmtleT9lc2NhcGUoXCJcIithLmtleSk6Yi50b1N0cmluZygzNil9XG5mdW5jdGlvbiBSKGEsYixlLGQsYyl7dmFyIGs9dHlwZW9mIGE7aWYoXCJ1bmRlZmluZWRcIj09PWt8fFwiYm9vbGVhblwiPT09aylhPW51bGw7dmFyIGg9ITE7aWYobnVsbD09PWEpaD0hMDtlbHNlIHN3aXRjaChrKXtjYXNlIFwic3RyaW5nXCI6Y2FzZSBcIm51bWJlclwiOmg9ITA7YnJlYWs7Y2FzZSBcIm9iamVjdFwiOnN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIGw6Y2FzZSBuOmg9ITB9fWlmKGgpcmV0dXJuIGg9YSxjPWMoaCksYT1cIlwiPT09ZD9cIi5cIitRKGgsMCk6ZCxJKGMpPyhlPVwiXCIsbnVsbCE9YSYmKGU9YS5yZXBsYWNlKFAsXCIkJi9cIikrXCIvXCIpLFIoYyxiLGUsXCJcIixmdW5jdGlvbihhKXtyZXR1cm4gYX0pKTpudWxsIT1jJiYoTyhjKSYmKGM9TihjLGUrKCFjLmtleXx8aCYmaC5rZXk9PT1jLmtleT9cIlwiOihcIlwiK2Mua2V5KS5yZXBsYWNlKFAsXCIkJi9cIikrXCIvXCIpK2EpKSxiLnB1c2goYykpLDE7aD0wO2Q9XCJcIj09PWQ/XCIuXCI6ZCtcIjpcIjtpZihJKGEpKWZvcih2YXIgZz0wO2c8YS5sZW5ndGg7ZysrKXtrPVxuYVtnXTt2YXIgZj1kK1EoayxnKTtoKz1SKGssYixlLGYsYyl9ZWxzZSBpZihmPUEoYSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGYpZm9yKGE9Zi5jYWxsKGEpLGc9MDshKGs9YS5uZXh0KCkpLmRvbmU7KWs9ay52YWx1ZSxmPWQrUShrLGcrKyksaCs9UihrLGIsZSxmLGMpO2Vsc2UgaWYoXCJvYmplY3RcIj09PWspdGhyb3cgYj1TdHJpbmcoYSksRXJyb3IoXCJPYmplY3RzIGFyZSBub3QgdmFsaWQgYXMgYSBSZWFjdCBjaGlsZCAoZm91bmQ6IFwiKyhcIltvYmplY3QgT2JqZWN0XVwiPT09Yj9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGEpLmpvaW4oXCIsIFwiKStcIn1cIjpiKStcIikuIElmIHlvdSBtZWFudCB0byByZW5kZXIgYSBjb2xsZWN0aW9uIG9mIGNoaWxkcmVuLCB1c2UgYW4gYXJyYXkgaW5zdGVhZC5cIik7cmV0dXJuIGh9XG5mdW5jdGlvbiBTKGEsYixlKXtpZihudWxsPT1hKXJldHVybiBhO3ZhciBkPVtdLGM9MDtSKGEsZCxcIlwiLFwiXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGIuY2FsbChlLGEsYysrKX0pO3JldHVybiBkfWZ1bmN0aW9uIFQoYSl7aWYoLTE9PT1hLl9zdGF0dXMpe3ZhciBiPWEuX3Jlc3VsdDtiPWIoKTtiLnRoZW4oZnVuY3Rpb24oYil7aWYoMD09PWEuX3N0YXR1c3x8LTE9PT1hLl9zdGF0dXMpYS5fc3RhdHVzPTEsYS5fcmVzdWx0PWJ9LGZ1bmN0aW9uKGIpe2lmKDA9PT1hLl9zdGF0dXN8fC0xPT09YS5fc3RhdHVzKWEuX3N0YXR1cz0yLGEuX3Jlc3VsdD1ifSk7LTE9PT1hLl9zdGF0dXMmJihhLl9zdGF0dXM9MCxhLl9yZXN1bHQ9Yil9aWYoMT09PWEuX3N0YXR1cylyZXR1cm4gYS5fcmVzdWx0LmRlZmF1bHQ7dGhyb3cgYS5fcmVzdWx0O31cbnZhciBVPXtjdXJyZW50Om51bGx9LFY9e3RyYW5zaXRpb246bnVsbH0sVz17UmVhY3RDdXJyZW50RGlzcGF0Y2hlcjpVLFJlYWN0Q3VycmVudEJhdGNoQ29uZmlnOlYsUmVhY3RDdXJyZW50T3duZXI6S307ZnVuY3Rpb24gWCgpe3Rocm93IEVycm9yKFwiYWN0KC4uLikgaXMgbm90IHN1cHBvcnRlZCBpbiBwcm9kdWN0aW9uIGJ1aWxkcyBvZiBSZWFjdC5cIik7fVxuZXhwb3J0cy5DaGlsZHJlbj17bWFwOlMsZm9yRWFjaDpmdW5jdGlvbihhLGIsZSl7UyhhLGZ1bmN0aW9uKCl7Yi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LGUpfSxjb3VudDpmdW5jdGlvbihhKXt2YXIgYj0wO1MoYSxmdW5jdGlvbigpe2IrK30pO3JldHVybiBifSx0b0FycmF5OmZ1bmN0aW9uKGEpe3JldHVybiBTKGEsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KXx8W119LG9ubHk6ZnVuY3Rpb24oYSl7aWYoIU8oYSkpdGhyb3cgRXJyb3IoXCJSZWFjdC5DaGlsZHJlbi5vbmx5IGV4cGVjdGVkIHRvIHJlY2VpdmUgYSBzaW5nbGUgUmVhY3QgZWxlbWVudCBjaGlsZC5cIik7cmV0dXJuIGF9fTtleHBvcnRzLkNvbXBvbmVudD1FO2V4cG9ydHMuRnJhZ21lbnQ9cDtleHBvcnRzLlByb2ZpbGVyPXI7ZXhwb3J0cy5QdXJlQ29tcG9uZW50PUc7ZXhwb3J0cy5TdHJpY3RNb2RlPXE7ZXhwb3J0cy5TdXNwZW5zZT13O1xuZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD1XO2V4cG9ydHMuYWN0PVg7XG5leHBvcnRzLmNsb25lRWxlbWVudD1mdW5jdGlvbihhLGIsZSl7aWYobnVsbD09PWF8fHZvaWQgMD09PWEpdGhyb3cgRXJyb3IoXCJSZWFjdC5jbG9uZUVsZW1lbnQoLi4uKTogVGhlIGFyZ3VtZW50IG11c3QgYmUgYSBSZWFjdCBlbGVtZW50LCBidXQgeW91IHBhc3NlZCBcIithK1wiLlwiKTt2YXIgZD1DKHt9LGEucHJvcHMpLGM9YS5rZXksaz1hLnJlZixoPWEuX293bmVyO2lmKG51bGwhPWIpe3ZvaWQgMCE9PWIucmVmJiYoaz1iLnJlZixoPUsuY3VycmVudCk7dm9pZCAwIT09Yi5rZXkmJihjPVwiXCIrYi5rZXkpO2lmKGEudHlwZSYmYS50eXBlLmRlZmF1bHRQcm9wcyl2YXIgZz1hLnR5cGUuZGVmYXVsdFByb3BzO2ZvcihmIGluIGIpSi5jYWxsKGIsZikmJiFMLmhhc093blByb3BlcnR5KGYpJiYoZFtmXT12b2lkIDA9PT1iW2ZdJiZ2b2lkIDAhPT1nP2dbZl06YltmXSl9dmFyIGY9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1mKWQuY2hpbGRyZW49ZTtlbHNlIGlmKDE8Zil7Zz1BcnJheShmKTtcbmZvcih2YXIgbT0wO208ZjttKyspZ1ttXT1hcmd1bWVudHNbbSsyXTtkLmNoaWxkcmVuPWd9cmV0dXJueyQkdHlwZW9mOmwsdHlwZTphLnR5cGUsa2V5OmMscmVmOmsscHJvcHM6ZCxfb3duZXI6aH19O2V4cG9ydHMuY3JlYXRlQ29udGV4dD1mdW5jdGlvbihhKXthPXskJHR5cGVvZjp1LF9jdXJyZW50VmFsdWU6YSxfY3VycmVudFZhbHVlMjphLF90aHJlYWRDb3VudDowLFByb3ZpZGVyOm51bGwsQ29uc3VtZXI6bnVsbCxfZGVmYXVsdFZhbHVlOm51bGwsX2dsb2JhbE5hbWU6bnVsbH07YS5Qcm92aWRlcj17JCR0eXBlb2Y6dCxfY29udGV4dDphfTtyZXR1cm4gYS5Db25zdW1lcj1hfTtleHBvcnRzLmNyZWF0ZUVsZW1lbnQ9TTtleHBvcnRzLmNyZWF0ZUZhY3Rvcnk9ZnVuY3Rpb24oYSl7dmFyIGI9TS5iaW5kKG51bGwsYSk7Yi50eXBlPWE7cmV0dXJuIGJ9O2V4cG9ydHMuY3JlYXRlUmVmPWZ1bmN0aW9uKCl7cmV0dXJue2N1cnJlbnQ6bnVsbH19O1xuZXhwb3J0cy5mb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp2LHJlbmRlcjphfX07ZXhwb3J0cy5pc1ZhbGlkRWxlbWVudD1PO2V4cG9ydHMubGF6eT1mdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6eSxfcGF5bG9hZDp7X3N0YXR1czotMSxfcmVzdWx0OmF9LF9pbml0OlR9fTtleHBvcnRzLm1lbW89ZnVuY3Rpb24oYSxiKXtyZXR1cm57JCR0eXBlb2Y6eCx0eXBlOmEsY29tcGFyZTp2b2lkIDA9PT1iP251bGw6Yn19O2V4cG9ydHMuc3RhcnRUcmFuc2l0aW9uPWZ1bmN0aW9uKGEpe3ZhciBiPVYudHJhbnNpdGlvbjtWLnRyYW5zaXRpb249e307dHJ5e2EoKX1maW5hbGx5e1YudHJhbnNpdGlvbj1ifX07ZXhwb3J0cy51bnN0YWJsZV9hY3Q9WDtleHBvcnRzLnVzZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFUuY3VycmVudC51c2VDYWxsYmFjayhhLGIpfTtleHBvcnRzLnVzZUNvbnRleHQ9ZnVuY3Rpb24oYSl7cmV0dXJuIFUuY3VycmVudC51c2VDb250ZXh0KGEpfTtcbmV4cG9ydHMudXNlRGVidWdWYWx1ZT1mdW5jdGlvbigpe307ZXhwb3J0cy51c2VEZWZlcnJlZFZhbHVlPWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlRGVmZXJyZWRWYWx1ZShhKX07ZXhwb3J0cy51c2VFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZUVmZmVjdChhLGIpfTtleHBvcnRzLnVzZUlkPWZ1bmN0aW9uKCl7cmV0dXJuIFUuY3VycmVudC51c2VJZCgpfTtleHBvcnRzLnVzZUltcGVyYXRpdmVIYW5kbGU9ZnVuY3Rpb24oYSxiLGUpe3JldHVybiBVLmN1cnJlbnQudXNlSW1wZXJhdGl2ZUhhbmRsZShhLGIsZSl9O2V4cG9ydHMudXNlSW5zZXJ0aW9uRWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFUuY3VycmVudC51c2VJbnNlcnRpb25FZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VMYXlvdXRFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZUxheW91dEVmZmVjdChhLGIpfTtcbmV4cG9ydHMudXNlTWVtbz1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlTWVtbyhhLGIpfTtleHBvcnRzLnVzZVJlZHVjZXI9ZnVuY3Rpb24oYSxiLGUpe3JldHVybiBVLmN1cnJlbnQudXNlUmVkdWNlcihhLGIsZSl9O2V4cG9ydHMudXNlUmVmPWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlUmVmKGEpfTtleHBvcnRzLnVzZVN0YXRlPWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlU3RhdGUoYSl9O2V4cG9ydHMudXNlU3luY0V4dGVybmFsU3RvcmU9ZnVuY3Rpb24oYSxiLGUpe3JldHVybiBVLmN1cnJlbnQudXNlU3luY0V4dGVybmFsU3RvcmUoYSxiLGUpfTtleHBvcnRzLnVzZVRyYW5zaXRpb249ZnVuY3Rpb24oKXtyZXR1cm4gVS5jdXJyZW50LnVzZVRyYW5zaXRpb24oKX07ZXhwb3J0cy52ZXJzaW9uPVwiMTguMy4xXCI7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHJlYWN0LWpzeC1ydW50aW1lLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgZj1yZXF1aXJlKFwicmVhY3RcIiksaz1TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKSxsPVN5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKSxtPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksbj1mLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELlJlYWN0Q3VycmVudE93bmVyLHA9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIHEoYyxhLGcpe3ZhciBiLGQ9e30sZT1udWxsLGg9bnVsbDt2b2lkIDAhPT1nJiYoZT1cIlwiK2cpO3ZvaWQgMCE9PWEua2V5JiYoZT1cIlwiK2Eua2V5KTt2b2lkIDAhPT1hLnJlZiYmKGg9YS5yZWYpO2ZvcihiIGluIGEpbS5jYWxsKGEsYikmJiFwLmhhc093blByb3BlcnR5KGIpJiYoZFtiXT1hW2JdKTtpZihjJiZjLmRlZmF1bHRQcm9wcylmb3IoYiBpbiBhPWMuZGVmYXVsdFByb3BzLGEpdm9pZCAwPT09ZFtiXSYmKGRbYl09YVtiXSk7cmV0dXJueyQkdHlwZW9mOmssdHlwZTpjLGtleTplLHJlZjpoLHByb3BzOmQsX293bmVyOm4uY3VycmVudH19ZXhwb3J0cy5GcmFnbWVudD1sO2V4cG9ydHMuanN4PXE7ZXhwb3J0cy5qc3hzPXE7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LXJ1bnRpbWUuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHNjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7ZnVuY3Rpb24gZihhLGIpe3ZhciBjPWEubGVuZ3RoO2EucHVzaChiKTthOmZvcig7MDxjOyl7dmFyIGQ9Yy0xPj4+MSxlPWFbZF07aWYoMDxnKGUsYikpYVtkXT1iLGFbY109ZSxjPWQ7ZWxzZSBicmVhayBhfX1mdW5jdGlvbiBoKGEpe3JldHVybiAwPT09YS5sZW5ndGg/bnVsbDphWzBdfWZ1bmN0aW9uIGsoYSl7aWYoMD09PWEubGVuZ3RoKXJldHVybiBudWxsO3ZhciBiPWFbMF0sYz1hLnBvcCgpO2lmKGMhPT1iKXthWzBdPWM7YTpmb3IodmFyIGQ9MCxlPWEubGVuZ3RoLHc9ZT4+PjE7ZDx3Oyl7dmFyIG09MiooZCsxKS0xLEM9YVttXSxuPW0rMSx4PWFbbl07aWYoMD5nKEMsYykpbjxlJiYwPmcoeCxDKT8oYVtkXT14LGFbbl09YyxkPW4pOihhW2RdPUMsYVttXT1jLGQ9bSk7ZWxzZSBpZihuPGUmJjA+Zyh4LGMpKWFbZF09eCxhW25dPWMsZD1uO2Vsc2UgYnJlYWsgYX19cmV0dXJuIGJ9XG5mdW5jdGlvbiBnKGEsYil7dmFyIGM9YS5zb3J0SW5kZXgtYi5zb3J0SW5kZXg7cmV0dXJuIDAhPT1jP2M6YS5pZC1iLmlkfWlmKFwib2JqZWN0XCI9PT10eXBlb2YgcGVyZm9ybWFuY2UmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBwZXJmb3JtYW5jZS5ub3cpe3ZhciBsPXBlcmZvcm1hbmNlO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIGwubm93KCl9fWVsc2V7dmFyIHA9RGF0ZSxxPXAubm93KCk7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gcC5ub3coKS1xfX12YXIgcj1bXSx0PVtdLHU9MSx2PW51bGwseT0zLHo9ITEsQT0hMSxCPSExLEQ9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDpudWxsLEU9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6bnVsbCxGPVwidW5kZWZpbmVkXCIhPT10eXBlb2Ygc2V0SW1tZWRpYXRlP3NldEltbWVkaWF0ZTpudWxsO1xuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBuYXZpZ2F0b3ImJnZvaWQgMCE9PW5hdmlnYXRvci5zY2hlZHVsaW5nJiZ2b2lkIDAhPT1uYXZpZ2F0b3Iuc2NoZWR1bGluZy5pc0lucHV0UGVuZGluZyYmbmF2aWdhdG9yLnNjaGVkdWxpbmcuaXNJbnB1dFBlbmRpbmcuYmluZChuYXZpZ2F0b3Iuc2NoZWR1bGluZyk7ZnVuY3Rpb24gRyhhKXtmb3IodmFyIGI9aCh0KTtudWxsIT09Yjspe2lmKG51bGw9PT1iLmNhbGxiYWNrKWsodCk7ZWxzZSBpZihiLnN0YXJ0VGltZTw9YSlrKHQpLGIuc29ydEluZGV4PWIuZXhwaXJhdGlvblRpbWUsZihyLGIpO2Vsc2UgYnJlYWs7Yj1oKHQpfX1mdW5jdGlvbiBIKGEpe0I9ITE7RyhhKTtpZighQSlpZihudWxsIT09aChyKSlBPSEwLEkoSik7ZWxzZXt2YXIgYj1oKHQpO251bGwhPT1iJiZLKEgsYi5zdGFydFRpbWUtYSl9fVxuZnVuY3Rpb24gSihhLGIpe0E9ITE7QiYmKEI9ITEsRShMKSxMPS0xKTt6PSEwO3ZhciBjPXk7dHJ5e0coYik7Zm9yKHY9aChyKTtudWxsIT09diYmKCEodi5leHBpcmF0aW9uVGltZT5iKXx8YSYmIU0oKSk7KXt2YXIgZD12LmNhbGxiYWNrO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2LmNhbGxiYWNrPW51bGw7eT12LnByaW9yaXR5TGV2ZWw7dmFyIGU9ZCh2LmV4cGlyYXRpb25UaW1lPD1iKTtiPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGU/di5jYWxsYmFjaz1lOnY9PT1oKHIpJiZrKHIpO0coYil9ZWxzZSBrKHIpO3Y9aChyKX1pZihudWxsIT09dil2YXIgdz0hMDtlbHNle3ZhciBtPWgodCk7bnVsbCE9PW0mJksoSCxtLnN0YXJ0VGltZS1iKTt3PSExfXJldHVybiB3fWZpbmFsbHl7dj1udWxsLHk9Yyx6PSExfX12YXIgTj0hMSxPPW51bGwsTD0tMSxQPTUsUT0tMTtcbmZ1bmN0aW9uIE0oKXtyZXR1cm4gZXhwb3J0cy51bnN0YWJsZV9ub3coKS1RPFA/ITE6ITB9ZnVuY3Rpb24gUigpe2lmKG51bGwhPT1PKXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO1E9YTt2YXIgYj0hMDt0cnl7Yj1PKCEwLGEpfWZpbmFsbHl7Yj9TKCk6KE49ITEsTz1udWxsKX19ZWxzZSBOPSExfXZhciBTO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBGKVM9ZnVuY3Rpb24oKXtGKFIpfTtlbHNlIGlmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgTWVzc2FnZUNoYW5uZWwpe3ZhciBUPW5ldyBNZXNzYWdlQ2hhbm5lbCxVPVQucG9ydDI7VC5wb3J0MS5vbm1lc3NhZ2U9UjtTPWZ1bmN0aW9uKCl7VS5wb3N0TWVzc2FnZShudWxsKX19ZWxzZSBTPWZ1bmN0aW9uKCl7RChSLDApfTtmdW5jdGlvbiBJKGEpe089YTtOfHwoTj0hMCxTKCkpfWZ1bmN0aW9uIEsoYSxiKXtMPUQoZnVuY3Rpb24oKXthKGV4cG9ydHMudW5zdGFibGVfbm93KCkpfSxiKX1cbmV4cG9ydHMudW5zdGFibGVfSWRsZVByaW9yaXR5PTU7ZXhwb3J0cy51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eT0xO2V4cG9ydHMudW5zdGFibGVfTG93UHJpb3JpdHk9NDtleHBvcnRzLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5PTM7ZXhwb3J0cy51bnN0YWJsZV9Qcm9maWxpbmc9bnVsbDtleHBvcnRzLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5PTI7ZXhwb3J0cy51bnN0YWJsZV9jYW5jZWxDYWxsYmFjaz1mdW5jdGlvbihhKXthLmNhbGxiYWNrPW51bGx9O2V4cG9ydHMudW5zdGFibGVfY29udGludWVFeGVjdXRpb249ZnVuY3Rpb24oKXtBfHx6fHwoQT0hMCxJKEopKX07XG5leHBvcnRzLnVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlPWZ1bmN0aW9uKGEpezA+YXx8MTI1PGE/Y29uc29sZS5lcnJvcihcImZvcmNlRnJhbWVSYXRlIHRha2VzIGEgcG9zaXRpdmUgaW50IGJldHdlZW4gMCBhbmQgMTI1LCBmb3JjaW5nIGZyYW1lIHJhdGVzIGhpZ2hlciB0aGFuIDEyNSBmcHMgaXMgbm90IHN1cHBvcnRlZFwiKTpQPTA8YT9NYXRoLmZsb29yKDFFMy9hKTo1fTtleHBvcnRzLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsPWZ1bmN0aW9uKCl7cmV0dXJuIHl9O2V4cG9ydHMudW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGU9ZnVuY3Rpb24oKXtyZXR1cm4gaChyKX07ZXhwb3J0cy51bnN0YWJsZV9uZXh0PWZ1bmN0aW9uKGEpe3N3aXRjaCh5KXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzp2YXIgYj0zO2JyZWFrO2RlZmF1bHQ6Yj15fXZhciBjPXk7eT1iO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7eT1jfX07ZXhwb3J0cy51bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbj1mdW5jdGlvbigpe307XG5leHBvcnRzLnVuc3RhYmxlX3JlcXVlc3RQYWludD1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHk9ZnVuY3Rpb24oYSxiKXtzd2l0Y2goYSl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6Y2FzZSA0OmNhc2UgNTpicmVhaztkZWZhdWx0OmE9M312YXIgYz15O3k9YTt0cnl7cmV0dXJuIGIoKX1maW5hbGx5e3k9Y319O1xuZXhwb3J0cy51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1leHBvcnRzLnVuc3RhYmxlX25vdygpO1wib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWM/KGM9Yy5kZWxheSxjPVwibnVtYmVyXCI9PT10eXBlb2YgYyYmMDxjP2QrYzpkKTpjPWQ7c3dpdGNoKGEpe2Nhc2UgMTp2YXIgZT0tMTticmVhaztjYXNlIDI6ZT0yNTA7YnJlYWs7Y2FzZSA1OmU9MTA3Mzc0MTgyMzticmVhaztjYXNlIDQ6ZT0xRTQ7YnJlYWs7ZGVmYXVsdDplPTVFM31lPWMrZTthPXtpZDp1KyssY2FsbGJhY2s6Yixwcmlvcml0eUxldmVsOmEsc3RhcnRUaW1lOmMsZXhwaXJhdGlvblRpbWU6ZSxzb3J0SW5kZXg6LTF9O2M+ZD8oYS5zb3J0SW5kZXg9YyxmKHQsYSksbnVsbD09PWgocikmJmE9PT1oKHQpJiYoQj8oRShMKSxMPS0xKTpCPSEwLEsoSCxjLWQpKSk6KGEuc29ydEluZGV4PWUsZihyLGEpLEF8fHp8fChBPSEwLEkoSikpKTtyZXR1cm4gYX07XG5leHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkPU07ZXhwb3J0cy51bnN0YWJsZV93cmFwQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7dmFyIGI9eTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgYz15O3k9Yjt0cnl7cmV0dXJuIGEuYXBwbHkodGhpcyxhcmd1bWVudHMpfWZpbmFsbHl7eT1jfX19O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHJlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYWE9cmVxdWlyZShcInJlYWN0XCIpLGNhPXJlcXVpcmUoXCJzY2hlZHVsZXJcIik7ZnVuY3Rpb24gcChhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn12YXIgZGE9bmV3IFNldCxlYT17fTtmdW5jdGlvbiBmYShhLGIpe2hhKGEsYik7aGEoYStcIkNhcHR1cmVcIixiKX1cbmZ1bmN0aW9uIGhhKGEsYil7ZWFbYV09Yjtmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKWRhLmFkZChiW2FdKX1cbnZhciBpYT0hKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudHx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCksamE9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxrYT0vXls6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRF1bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRcXC0uMC05XFx1MDBCN1xcdTAzMDAtXFx1MDM2RlxcdTIwM0YtXFx1MjA0MF0qJC8sbGE9XG57fSxtYT17fTtmdW5jdGlvbiBvYShhKXtpZihqYS5jYWxsKG1hLGEpKXJldHVybiEwO2lmKGphLmNhbGwobGEsYSkpcmV0dXJuITE7aWYoa2EudGVzdChhKSlyZXR1cm4gbWFbYV09ITA7bGFbYV09ITA7cmV0dXJuITF9ZnVuY3Rpb24gcGEoYSxiLGMsZCl7aWYobnVsbCE9PWMmJjA9PT1jLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihkKXJldHVybiExO2lmKG51bGwhPT1jKXJldHVybiFjLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBxYShhLGIsYyxkKXtpZihudWxsPT09Ynx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBifHxwYShhLGIsYyxkKSlyZXR1cm4hMDtpZihkKXJldHVybiExO2lmKG51bGwhPT1jKXN3aXRjaChjLnR5cGUpe2Nhc2UgMzpyZXR1cm4hYjtjYXNlIDQ6cmV0dXJuITE9PT1iO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKXx8MT5ifXJldHVybiExfWZ1bmN0aW9uIHYoYSxiLGMsZCxlLGYsZyl7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yjt0aGlzLnNhbml0aXplVVJMPWY7dGhpcy5yZW1vdmVFbXB0eVN0cmluZz1nfXZhciB6PXt9O1xuXCJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMCwhMSxhLG51bGwsITEsITEpfSk7W1tcImFjY2VwdENoYXJzZXRcIixcImFjY2VwdC1jaGFyc2V0XCJdLFtcImNsYXNzTmFtZVwiLFwiY2xhc3NcIl0sW1wiaHRtbEZvclwiLFwiZm9yXCJdLFtcImh0dHBFcXVpdlwiLFwiaHR0cC1lcXVpdlwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hWzBdO3pbYl09bmV3IHYoYiwxLCExLGFbMV0sbnVsbCwhMSwhMSl9KTtbXCJjb250ZW50RWRpdGFibGVcIixcImRyYWdnYWJsZVwiLFwic3BlbGxDaGVja1wiLFwidmFsdWVcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbltcImF1dG9SZXZlcnNlXCIsXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsXCJmb2N1c2FibGVcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMiwhMSxhLG51bGwsITEsITEpfSk7XCJhbGxvd0Z1bGxTY3JlZW4gYXN5bmMgYXV0b0ZvY3VzIGF1dG9QbGF5IGNvbnRyb2xzIGRlZmF1bHQgZGVmZXIgZGlzYWJsZWQgZGlzYWJsZVBpY3R1cmVJblBpY3R1cmUgZGlzYWJsZVJlbW90ZVBsYXliYWNrIGZvcm1Ob1ZhbGlkYXRlIGhpZGRlbiBsb29wIG5vTW9kdWxlIG5vVmFsaWRhdGUgb3BlbiBwbGF5c0lubGluZSByZWFkT25seSByZXF1aXJlZCByZXZlcnNlZCBzY29wZWQgc2VhbWxlc3MgaXRlbVNjb3BlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDMsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5bXCJjaGVja2VkXCIsXCJtdWx0aXBsZVwiLFwibXV0ZWRcIixcInNlbGVjdGVkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDMsITAsYSxudWxsLCExLCExKX0pO1tcImNhcHR1cmVcIixcImRvd25sb2FkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDQsITEsYSxudWxsLCExLCExKX0pO1tcImNvbHNcIixcInJvd3NcIixcInNpemVcIixcInNwYW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsNiwhMSxhLG51bGwsITEsITEpfSk7W1wicm93U3BhblwiLFwic3RhcnRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsNSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTt2YXIgcmE9L1tcXC06XShbYS16XSkvZztmdW5jdGlvbiBzYShhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShyYSxcbnNhKTt6W2JdPW5ldyB2KGIsMSwhMSxhLG51bGwsITEsITEpfSk7XCJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6cm9sZSB4bGluazpzaG93IHhsaW5rOnRpdGxlIHhsaW5rOnR5cGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UocmEsc2EpO3pbYl09bmV3IHYoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITEsITEpfSk7W1wieG1sOmJhc2VcIixcInhtbDpsYW5nXCIsXCJ4bWw6c3BhY2VcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UocmEsc2EpO3pbYl09bmV3IHYoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIiwhMSwhMSl9KTtbXCJ0YWJJbmRleFwiLFwiY3Jvc3NPcmlnaW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbnoueGxpbmtIcmVmPW5ldyB2KFwieGxpbmtIcmVmXCIsMSwhMSxcInhsaW5rOmhyZWZcIixcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMCwhMSk7W1wic3JjXCIsXCJocmVmXCIsXCJhY3Rpb25cIixcImZvcm1BY3Rpb25cIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMCwhMCl9KTtcbmZ1bmN0aW9uIHRhKGEsYixjLGQpe3ZhciBlPXouaGFzT3duUHJvcGVydHkoYik/eltiXTpudWxsO2lmKG51bGwhPT1lPzAhPT1lLnR5cGU6ZHx8ISgyPGIubGVuZ3RoKXx8XCJvXCIhPT1iWzBdJiZcIk9cIiE9PWJbMF18fFwiblwiIT09YlsxXSYmXCJOXCIhPT1iWzFdKXFhKGIsYyxlLGQpJiYoYz1udWxsKSxkfHxudWxsPT09ZT9vYShiKSYmKG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSk6ZS5tdXN0VXNlUHJvcGVydHk/YVtlLnByb3BlcnR5TmFtZV09bnVsbD09PWM/Mz09PWUudHlwZT8hMTpcIlwiOmM6KGI9ZS5hdHRyaWJ1dGVOYW1lLGQ9ZS5hdHRyaWJ1dGVOYW1lc3BhY2UsbnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6KGU9ZS50eXBlLGM9Mz09PWV8fDQ9PT1lJiYhMD09PWM/XCJcIjpcIlwiK2MsZD9hLnNldEF0dHJpYnV0ZU5TKGQsYixjKTphLnNldEF0dHJpYnV0ZShiLGMpKSl9XG52YXIgdWE9YWEuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQsdmE9U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIiksd2E9U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKSx5YT1TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIiksemE9U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpLEFhPVN5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKSxCYT1TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIiksQ2E9U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIiksRGE9U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpLEVhPVN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKSxGYT1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKSxHYT1TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKSxIYT1TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTtTeW1ib2wuZm9yKFwicmVhY3Quc2NvcGVcIik7U3ltYm9sLmZvcihcInJlYWN0LmRlYnVnX3RyYWNlX21vZGVcIik7XG52YXIgSWE9U3ltYm9sLmZvcihcInJlYWN0Lm9mZnNjcmVlblwiKTtTeW1ib2wuZm9yKFwicmVhY3QubGVnYWN5X2hpZGRlblwiKTtTeW1ib2wuZm9yKFwicmVhY3QuY2FjaGVcIik7U3ltYm9sLmZvcihcInJlYWN0LnRyYWNpbmdfbWFya2VyXCIpO3ZhciBKYT1TeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gS2EoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPUphJiZhW0phXXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfXZhciBBPU9iamVjdC5hc3NpZ24sTGE7ZnVuY3Rpb24gTWEoYSl7aWYodm9pZCAwPT09TGEpdHJ5e3Rocm93IEVycm9yKCk7fWNhdGNoKGMpe3ZhciBiPWMuc3RhY2sudHJpbSgpLm1hdGNoKC9cXG4oICooYXQgKT8pLyk7TGE9YiYmYlsxXXx8XCJcIn1yZXR1cm5cIlxcblwiK0xhK2F9dmFyIE5hPSExO1xuZnVuY3Rpb24gT2EoYSxiKXtpZighYXx8TmEpcmV0dXJuXCJcIjtOYT0hMDt2YXIgYz1FcnJvci5wcmVwYXJlU3RhY2tUcmFjZTtFcnJvci5wcmVwYXJlU3RhY2tUcmFjZT12b2lkIDA7dHJ5e2lmKGIpaWYoYj1mdW5jdGlvbigpe3Rocm93IEVycm9yKCk7fSxPYmplY3QuZGVmaW5lUHJvcGVydHkoYi5wcm90b3R5cGUsXCJwcm9wc1wiLHtzZXQ6ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcigpO319KSxcIm9iamVjdFwiPT09dHlwZW9mIFJlZmxlY3QmJlJlZmxlY3QuY29uc3RydWN0KXt0cnl7UmVmbGVjdC5jb25zdHJ1Y3QoYixbXSl9Y2F0Y2gobCl7dmFyIGQ9bH1SZWZsZWN0LmNvbnN0cnVjdChhLFtdLGIpfWVsc2V7dHJ5e2IuY2FsbCgpfWNhdGNoKGwpe2Q9bH1hLmNhbGwoYi5wcm90b3R5cGUpfWVsc2V7dHJ5e3Rocm93IEVycm9yKCk7fWNhdGNoKGwpe2Q9bH1hKCl9fWNhdGNoKGwpe2lmKGwmJmQmJlwic3RyaW5nXCI9PT10eXBlb2YgbC5zdGFjayl7Zm9yKHZhciBlPWwuc3RhY2suc3BsaXQoXCJcXG5cIiksXG5mPWQuc3RhY2suc3BsaXQoXCJcXG5cIiksZz1lLmxlbmd0aC0xLGg9Zi5sZW5ndGgtMTsxPD1nJiYwPD1oJiZlW2ddIT09ZltoXTspaC0tO2Zvcig7MTw9ZyYmMDw9aDtnLS0saC0tKWlmKGVbZ10hPT1mW2hdKXtpZigxIT09Z3x8MSE9PWgpe2RvIGlmKGctLSxoLS0sMD5ofHxlW2ddIT09ZltoXSl7dmFyIGs9XCJcXG5cIitlW2ddLnJlcGxhY2UoXCIgYXQgbmV3IFwiLFwiIGF0IFwiKTthLmRpc3BsYXlOYW1lJiZrLmluY2x1ZGVzKFwiPGFub255bW91cz5cIikmJihrPWsucmVwbGFjZShcIjxhbm9ueW1vdXM+XCIsYS5kaXNwbGF5TmFtZSkpO3JldHVybiBrfXdoaWxlKDE8PWcmJjA8PWgpfWJyZWFrfX19ZmluYWxseXtOYT0hMSxFcnJvci5wcmVwYXJlU3RhY2tUcmFjZT1jfXJldHVybihhPWE/YS5kaXNwbGF5TmFtZXx8YS5uYW1lOlwiXCIpP01hKGEpOlwiXCJ9XG5mdW5jdGlvbiBQYShhKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTpyZXR1cm4gTWEoYS50eXBlKTtjYXNlIDE2OnJldHVybiBNYShcIkxhenlcIik7Y2FzZSAxMzpyZXR1cm4gTWEoXCJTdXNwZW5zZVwiKTtjYXNlIDE5OnJldHVybiBNYShcIlN1c3BlbnNlTGlzdFwiKTtjYXNlIDA6Y2FzZSAyOmNhc2UgMTU6cmV0dXJuIGE9T2EoYS50eXBlLCExKSxhO2Nhc2UgMTE6cmV0dXJuIGE9T2EoYS50eXBlLnJlbmRlciwhMSksYTtjYXNlIDE6cmV0dXJuIGE9T2EoYS50eXBlLCEwKSxhO2RlZmF1bHQ6cmV0dXJuXCJcIn19XG5mdW5jdGlvbiBRYShhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fG51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKXJldHVybiBhO3N3aXRjaChhKXtjYXNlIHlhOnJldHVyblwiRnJhZ21lbnRcIjtjYXNlIHdhOnJldHVyblwiUG9ydGFsXCI7Y2FzZSBBYTpyZXR1cm5cIlByb2ZpbGVyXCI7Y2FzZSB6YTpyZXR1cm5cIlN0cmljdE1vZGVcIjtjYXNlIEVhOnJldHVyblwiU3VzcGVuc2VcIjtjYXNlIEZhOnJldHVyblwiU3VzcGVuc2VMaXN0XCJ9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIENhOnJldHVybihhLmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuQ29uc3VtZXJcIjtjYXNlIEJhOnJldHVybihhLl9jb250ZXh0LmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuUHJvdmlkZXJcIjtjYXNlIERhOnZhciBiPWEucmVuZGVyO2E9YS5kaXNwbGF5TmFtZTthfHwoYT1iLmRpc3BsYXlOYW1lfHxcbmIubmFtZXx8XCJcIixhPVwiXCIhPT1hP1wiRm9yd2FyZFJlZihcIithK1wiKVwiOlwiRm9yd2FyZFJlZlwiKTtyZXR1cm4gYTtjYXNlIEdhOnJldHVybiBiPWEuZGlzcGxheU5hbWV8fG51bGwsbnVsbCE9PWI/YjpRYShhLnR5cGUpfHxcIk1lbW9cIjtjYXNlIEhhOmI9YS5fcGF5bG9hZDthPWEuX2luaXQ7dHJ5e3JldHVybiBRYShhKGIpKX1jYXRjaChjKXt9fXJldHVybiBudWxsfVxuZnVuY3Rpb24gUmEoYSl7dmFyIGI9YS50eXBlO3N3aXRjaChhLnRhZyl7Y2FzZSAyNDpyZXR1cm5cIkNhY2hlXCI7Y2FzZSA5OnJldHVybihiLmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuQ29uc3VtZXJcIjtjYXNlIDEwOnJldHVybihiLl9jb250ZXh0LmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuUHJvdmlkZXJcIjtjYXNlIDE4OnJldHVyblwiRGVoeWRyYXRlZEZyYWdtZW50XCI7Y2FzZSAxMTpyZXR1cm4gYT1iLnJlbmRlcixhPWEuZGlzcGxheU5hbWV8fGEubmFtZXx8XCJcIixiLmRpc3BsYXlOYW1lfHwoXCJcIiE9PWE/XCJGb3J3YXJkUmVmKFwiK2ErXCIpXCI6XCJGb3J3YXJkUmVmXCIpO2Nhc2UgNzpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSA1OnJldHVybiBiO2Nhc2UgNDpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgMzpyZXR1cm5cIlJvb3RcIjtjYXNlIDY6cmV0dXJuXCJUZXh0XCI7Y2FzZSAxNjpyZXR1cm4gUWEoYik7Y2FzZSA4OnJldHVybiBiPT09emE/XCJTdHJpY3RNb2RlXCI6XCJNb2RlXCI7Y2FzZSAyMjpyZXR1cm5cIk9mZnNjcmVlblwiO1xuY2FzZSAxMjpyZXR1cm5cIlByb2ZpbGVyXCI7Y2FzZSAyMTpyZXR1cm5cIlNjb3BlXCI7Y2FzZSAxMzpyZXR1cm5cIlN1c3BlbnNlXCI7Y2FzZSAxOTpyZXR1cm5cIlN1c3BlbnNlTGlzdFwiO2Nhc2UgMjU6cmV0dXJuXCJUcmFjaW5nTWFya2VyXCI7Y2FzZSAxOmNhc2UgMDpjYXNlIDE3OmNhc2UgMjpjYXNlIDE0OmNhc2UgMTU6aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpcmV0dXJuIGIuZGlzcGxheU5hbWV8fGIubmFtZXx8bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGIpcmV0dXJuIGJ9cmV0dXJuIG51bGx9ZnVuY3Rpb24gU2EoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwic3RyaW5nXCI6Y2FzZSBcInVuZGVmaW5lZFwiOnJldHVybiBhO2Nhc2UgXCJvYmplY3RcIjpyZXR1cm4gYTtkZWZhdWx0OnJldHVyblwiXCJ9fVxuZnVuY3Rpb24gVGEoYSl7dmFyIGI9YS50eXBlO3JldHVybihhPWEubm9kZU5hbWUpJiZcImlucHV0XCI9PT1hLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1ifHxcInJhZGlvXCI9PT1iKX1cbmZ1bmN0aW9uIFVhKGEpe3ZhciBiPVRhKGEpP1wiY2hlY2tlZFwiOlwidmFsdWVcIixjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsYiksZD1cIlwiK2FbYl07aWYoIWEuaGFzT3duUHJvcGVydHkoYikmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5zZXQpe3ZhciBlPWMuZ2V0LGY9Yy5zZXQ7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlLmNhbGwodGhpcyl9LHNldDpmdW5jdGlvbihhKXtkPVwiXCIrYTtmLmNhbGwodGhpcyxhKX19KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtlbnVtZXJhYmxlOmMuZW51bWVyYWJsZX0pO3JldHVybntnZXRWYWx1ZTpmdW5jdGlvbigpe3JldHVybiBkfSxzZXRWYWx1ZTpmdW5jdGlvbihhKXtkPVwiXCIrYX0sc3RvcFRyYWNraW5nOmZ1bmN0aW9uKCl7YS5fdmFsdWVUcmFja2VyPVxubnVsbDtkZWxldGUgYVtiXX19fX1mdW5jdGlvbiBWYShhKXthLl92YWx1ZVRyYWNrZXJ8fChhLl92YWx1ZVRyYWNrZXI9VWEoYSkpfWZ1bmN0aW9uIFdhKGEpe2lmKCFhKXJldHVybiExO3ZhciBiPWEuX3ZhbHVlVHJhY2tlcjtpZighYilyZXR1cm4hMDt2YXIgYz1iLmdldFZhbHVlKCk7dmFyIGQ9XCJcIjthJiYoZD1UYShhKT9hLmNoZWNrZWQ/XCJ0cnVlXCI6XCJmYWxzZVwiOmEudmFsdWUpO2E9ZDtyZXR1cm4gYSE9PWM/KGIuc2V0VmFsdWUoYSksITApOiExfWZ1bmN0aW9uIFhhKGEpe2E9YXx8KFwidW5kZWZpbmVkXCIhPT10eXBlb2YgZG9jdW1lbnQ/ZG9jdW1lbnQ6dm9pZCAwKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGEpcmV0dXJuIG51bGw7dHJ5e3JldHVybiBhLmFjdGl2ZUVsZW1lbnR8fGEuYm9keX1jYXRjaChiKXtyZXR1cm4gYS5ib2R5fX1cbmZ1bmN0aW9uIFlhKGEsYil7dmFyIGM9Yi5jaGVja2VkO3JldHVybiBBKHt9LGIse2RlZmF1bHRDaGVja2VkOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLHZhbHVlOnZvaWQgMCxjaGVja2VkOm51bGwhPWM/YzphLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWR9KX1mdW5jdGlvbiBaYShhLGIpe3ZhciBjPW51bGw9PWIuZGVmYXVsdFZhbHVlP1wiXCI6Yi5kZWZhdWx0VmFsdWUsZD1udWxsIT1iLmNoZWNrZWQ/Yi5jaGVja2VkOmIuZGVmYXVsdENoZWNrZWQ7Yz1TYShudWxsIT1iLnZhbHVlP2IudmFsdWU6Yyk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsQ2hlY2tlZDpkLGluaXRpYWxWYWx1ZTpjLGNvbnRyb2xsZWQ6XCJjaGVja2JveFwiPT09Yi50eXBlfHxcInJhZGlvXCI9PT1iLnR5cGU/bnVsbCE9Yi5jaGVja2VkOm51bGwhPWIudmFsdWV9fWZ1bmN0aW9uIGFiKGEsYil7Yj1iLmNoZWNrZWQ7bnVsbCE9YiYmdGEoYSxcImNoZWNrZWRcIixiLCExKX1cbmZ1bmN0aW9uIGJiKGEsYil7YWIoYSxiKTt2YXIgYz1TYShiLnZhbHVlKSxkPWIudHlwZTtpZihudWxsIT1jKWlmKFwibnVtYmVyXCI9PT1kKXtpZigwPT09YyYmXCJcIj09PWEudmFsdWV8fGEudmFsdWUhPWMpYS52YWx1ZT1cIlwiK2N9ZWxzZSBhLnZhbHVlIT09XCJcIitjJiYoYS52YWx1ZT1cIlwiK2MpO2Vsc2UgaWYoXCJzdWJtaXRcIj09PWR8fFwicmVzZXRcIj09PWQpe2EucmVtb3ZlQXR0cmlidXRlKFwidmFsdWVcIik7cmV0dXJufWIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKT9jYihhLGIudHlwZSxjKTpiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpJiZjYihhLGIudHlwZSxTYShiLmRlZmF1bHRWYWx1ZSkpO251bGw9PWIuY2hlY2tlZCYmbnVsbCE9Yi5kZWZhdWx0Q2hlY2tlZCYmKGEuZGVmYXVsdENoZWNrZWQ9ISFiLmRlZmF1bHRDaGVja2VkKX1cbmZ1bmN0aW9uIGRiKGEsYixjKXtpZihiLmhhc093blByb3BlcnR5KFwidmFsdWVcIil8fGIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikpe3ZhciBkPWIudHlwZTtpZighKFwic3VibWl0XCIhPT1kJiZcInJlc2V0XCIhPT1kfHx2b2lkIDAhPT1iLnZhbHVlJiZudWxsIT09Yi52YWx1ZSkpcmV0dXJuO2I9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlO2N8fGI9PT1hLnZhbHVlfHwoYS52YWx1ZT1iKTthLmRlZmF1bHRWYWx1ZT1ifWM9YS5uYW1lO1wiXCIhPT1jJiYoYS5uYW1lPVwiXCIpO2EuZGVmYXVsdENoZWNrZWQ9ISFhLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWQ7XCJcIiE9PWMmJihhLm5hbWU9Yyl9XG5mdW5jdGlvbiBjYihhLGIsYyl7aWYoXCJudW1iZXJcIiE9PWJ8fFhhKGEub3duZXJEb2N1bWVudCkhPT1hKW51bGw9PWM/YS5kZWZhdWx0VmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlOmEuZGVmYXVsdFZhbHVlIT09XCJcIitjJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitjKX12YXIgZWI9QXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIGZiKGEsYixjLGQpe2E9YS5vcHRpb25zO2lmKGIpe2I9e307Zm9yKHZhciBlPTA7ZTxjLmxlbmd0aDtlKyspYltcIiRcIitjW2VdXT0hMDtmb3IoYz0wO2M8YS5sZW5ndGg7YysrKWU9Yi5oYXNPd25Qcm9wZXJ0eShcIiRcIithW2NdLnZhbHVlKSxhW2NdLnNlbGVjdGVkIT09ZSYmKGFbY10uc2VsZWN0ZWQ9ZSksZSYmZCYmKGFbY10uZGVmYXVsdFNlbGVjdGVkPSEwKX1lbHNle2M9XCJcIitTYShjKTtiPW51bGw7Zm9yKGU9MDtlPGEubGVuZ3RoO2UrKyl7aWYoYVtlXS52YWx1ZT09PWMpe2FbZV0uc2VsZWN0ZWQ9ITA7ZCYmKGFbZV0uZGVmYXVsdFNlbGVjdGVkPSEwKTtyZXR1cm59bnVsbCE9PWJ8fGFbZV0uZGlzYWJsZWR8fChiPWFbZV0pfW51bGwhPT1iJiYoYi5zZWxlY3RlZD0hMCl9fVxuZnVuY3Rpb24gZ2IoYSxiKXtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXRocm93IEVycm9yKHAoOTEpKTtyZXR1cm4gQSh7fSxiLHt2YWx1ZTp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCxjaGlsZHJlbjpcIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWV9KX1mdW5jdGlvbiBoYihhLGIpe3ZhciBjPWIudmFsdWU7aWYobnVsbD09Yyl7Yz1iLmNoaWxkcmVuO2I9Yi5kZWZhdWx0VmFsdWU7aWYobnVsbCE9Yyl7aWYobnVsbCE9Yil0aHJvdyBFcnJvcihwKDkyKSk7aWYoZWIoYykpe2lmKDE8Yy5sZW5ndGgpdGhyb3cgRXJyb3IocCg5MykpO2M9Y1swXX1iPWN9bnVsbD09YiYmKGI9XCJcIik7Yz1ifWEuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOlNhKGMpfX1cbmZ1bmN0aW9uIGliKGEsYil7dmFyIGM9U2EoYi52YWx1ZSksZD1TYShiLmRlZmF1bHRWYWx1ZSk7bnVsbCE9YyYmKGM9XCJcIitjLGMhPT1hLnZhbHVlJiYoYS52YWx1ZT1jKSxudWxsPT1iLmRlZmF1bHRWYWx1ZSYmYS5kZWZhdWx0VmFsdWUhPT1jJiYoYS5kZWZhdWx0VmFsdWU9YykpO251bGwhPWQmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2QpfWZ1bmN0aW9uIGpiKGEpe3ZhciBiPWEudGV4dENvbnRlbnQ7Yj09PWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUmJlwiXCIhPT1iJiZudWxsIT09YiYmKGEudmFsdWU9Yil9ZnVuY3Rpb24ga2IoYSl7c3dpdGNoKGEpe2Nhc2UgXCJzdmdcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7Y2FzZSBcIm1hdGhcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIjtkZWZhdWx0OnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwifX1cbmZ1bmN0aW9uIGxiKGEsYil7cmV0dXJuIG51bGw9PWF8fFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9rYihiKTpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI9PT1hJiZcImZvcmVpZ25PYmplY3RcIj09PWI/XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI6YX1cbnZhciBtYixuYj1mdW5jdGlvbihhKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIE1TQXBwJiZNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbj9mdW5jdGlvbihiLGMsZCxlKXtNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbigpe3JldHVybiBhKGIsYyxkLGUpfSl9OmF9KGZ1bmN0aW9uKGEsYil7aWYoXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIT09YS5uYW1lc3BhY2VVUkl8fFwiaW5uZXJIVE1MXCJpbiBhKWEuaW5uZXJIVE1MPWI7ZWxzZXttYj1tYnx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTttYi5pbm5lckhUTUw9XCI8c3ZnPlwiK2IudmFsdWVPZigpLnRvU3RyaW5nKCkrXCI8L3N2Zz5cIjtmb3IoYj1tYi5maXJzdENoaWxkO2EuZmlyc3RDaGlsZDspYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Zvcig7Yi5maXJzdENoaWxkOylhLmFwcGVuZENoaWxkKGIuZmlyc3RDaGlsZCl9fSk7XG5mdW5jdGlvbiBvYihhLGIpe2lmKGIpe3ZhciBjPWEuZmlyc3RDaGlsZDtpZihjJiZjPT09YS5sYXN0Q2hpbGQmJjM9PT1jLm5vZGVUeXBlKXtjLm5vZGVWYWx1ZT1iO3JldHVybn19YS50ZXh0Q29udGVudD1ifVxudmFyIHBiPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxhc3BlY3RSYXRpbzohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRBcmVhOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsXG56b29tOiEwLGZpbGxPcGFjaXR5OiEwLGZsb29kT3BhY2l0eTohMCxzdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LHFiPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhwYikuZm9yRWFjaChmdW5jdGlvbihhKXtxYi5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO3BiW2JdPXBiW2FdfSl9KTtmdW5jdGlvbiByYihhLGIsYyl7cmV0dXJuIG51bGw9PWJ8fFwiYm9vbGVhblwiPT09dHlwZW9mIGJ8fFwiXCI9PT1iP1wiXCI6Y3x8XCJudW1iZXJcIiE9PXR5cGVvZiBifHwwPT09Ynx8cGIuaGFzT3duUHJvcGVydHkoYSkmJnBiW2FdPyhcIlwiK2IpLnRyaW0oKTpiK1wicHhcIn1cbmZ1bmN0aW9uIHNiKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKSxlPXJiKGMsYltjXSxkKTtcImZsb2F0XCI9PT1jJiYoYz1cImNzc0Zsb2F0XCIpO2Q/YS5zZXRQcm9wZXJ0eShjLGUpOmFbY109ZX19dmFyIHRiPUEoe21lbnVpdGVtOiEwfSx7YXJlYTohMCxiYXNlOiEwLGJyOiEwLGNvbDohMCxlbWJlZDohMCxocjohMCxpbWc6ITAsaW5wdXQ6ITAsa2V5Z2VuOiEwLGxpbms6ITAsbWV0YTohMCxwYXJhbTohMCxzb3VyY2U6ITAsdHJhY2s6ITAsd2JyOiEwfSk7XG5mdW5jdGlvbiB1YihhLGIpe2lmKGIpe2lmKHRiW2FdJiYobnVsbCE9Yi5jaGlsZHJlbnx8bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IocCgxMzcsYSkpO2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpe2lmKG51bGwhPWIuY2hpbGRyZW4pdGhyb3cgRXJyb3IocCg2MCkpO2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTHx8IShcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IocCg2MSkpO31pZihudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGUpdGhyb3cgRXJyb3IocCg2MikpO319XG5mdW5jdGlvbiB2YihhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19dmFyIHdiPW51bGw7ZnVuY3Rpb24geGIoYSl7YT1hLnRhcmdldHx8YS5zcmNFbGVtZW50fHx3aW5kb3c7YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCYmKGE9YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7cmV0dXJuIDM9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphfXZhciB5Yj1udWxsLHpiPW51bGwsQWI9bnVsbDtcbmZ1bmN0aW9uIEJiKGEpe2lmKGE9Q2IoYSkpe2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB5Yil0aHJvdyBFcnJvcihwKDI4MCkpO3ZhciBiPWEuc3RhdGVOb2RlO2ImJihiPURiKGIpLHliKGEuc3RhdGVOb2RlLGEudHlwZSxiKSl9fWZ1bmN0aW9uIEViKGEpe3piP0FiP0FiLnB1c2goYSk6QWI9W2FdOnpiPWF9ZnVuY3Rpb24gRmIoKXtpZih6Yil7dmFyIGE9emIsYj1BYjtBYj16Yj1udWxsO0JiKGEpO2lmKGIpZm9yKGE9MDthPGIubGVuZ3RoO2ErKylCYihiW2FdKX19ZnVuY3Rpb24gR2IoYSxiKXtyZXR1cm4gYShiKX1mdW5jdGlvbiBIYigpe312YXIgSWI9ITE7ZnVuY3Rpb24gSmIoYSxiLGMpe2lmKEliKXJldHVybiBhKGIsYyk7SWI9ITA7dHJ5e3JldHVybiBHYihhLGIsYyl9ZmluYWxseXtpZihJYj0hMSxudWxsIT09emJ8fG51bGwhPT1BYilIYigpLEZiKCl9fVxuZnVuY3Rpb24gS2IoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtpZihudWxsPT09YylyZXR1cm4gbnVsbDt2YXIgZD1EYihjKTtpZihudWxsPT09ZClyZXR1cm4gbnVsbDtjPWRbYl07YTpzd2l0Y2goYil7Y2FzZSBcIm9uQ2xpY2tcIjpjYXNlIFwib25DbGlja0NhcHR1cmVcIjpjYXNlIFwib25Eb3VibGVDbGlja1wiOmNhc2UgXCJvbkRvdWJsZUNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRG93blwiOmNhc2UgXCJvbk1vdXNlRG93bkNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZU1vdmVcIjpjYXNlIFwib25Nb3VzZU1vdmVDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VVcFwiOmNhc2UgXCJvbk1vdXNlVXBDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VFbnRlclwiOihkPSFkLmRpc2FibGVkKXx8KGE9YS50eXBlLGQ9IShcImJ1dHRvblwiPT09YXx8XCJpbnB1dFwiPT09YXx8XCJzZWxlY3RcIj09PWF8fFwidGV4dGFyZWFcIj09PWEpKTthPSFkO2JyZWFrIGE7ZGVmYXVsdDphPSExfWlmKGEpcmV0dXJuIG51bGw7aWYoYyYmXCJmdW5jdGlvblwiIT09XG50eXBlb2YgYyl0aHJvdyBFcnJvcihwKDIzMSxiLHR5cGVvZiBjKSk7cmV0dXJuIGN9dmFyIExiPSExO2lmKGlhKXRyeXt2YXIgTWI9e307T2JqZWN0LmRlZmluZVByb3BlcnR5KE1iLFwicGFzc2l2ZVwiLHtnZXQ6ZnVuY3Rpb24oKXtMYj0hMH19KTt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInRlc3RcIixNYixNYik7d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsTWIsTWIpfWNhdGNoKGEpe0xiPSExfWZ1bmN0aW9uIE5iKGEsYixjLGQsZSxmLGcsaCxrKXt2YXIgbD1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMyk7dHJ5e2IuYXBwbHkoYyxsKX1jYXRjaChtKXt0aGlzLm9uRXJyb3IobSl9fXZhciBPYj0hMSxQYj1udWxsLFFiPSExLFJiPW51bGwsU2I9e29uRXJyb3I6ZnVuY3Rpb24oYSl7T2I9ITA7UGI9YX19O2Z1bmN0aW9uIFRiKGEsYixjLGQsZSxmLGcsaCxrKXtPYj0hMTtQYj1udWxsO05iLmFwcGx5KFNiLGFyZ3VtZW50cyl9XG5mdW5jdGlvbiBVYihhLGIsYyxkLGUsZixnLGgsayl7VGIuYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKE9iKXtpZihPYil7dmFyIGw9UGI7T2I9ITE7UGI9bnVsbH1lbHNlIHRocm93IEVycm9yKHAoMTk4KSk7UWJ8fChRYj0hMCxSYj1sKX19ZnVuY3Rpb24gVmIoYSl7dmFyIGI9YSxjPWE7aWYoYS5hbHRlcm5hdGUpZm9yKDtiLnJldHVybjspYj1iLnJldHVybjtlbHNle2E9YjtkbyBiPWEsMCE9PShiLmZsYWdzJjQwOTgpJiYoYz1iLnJldHVybiksYT1iLnJldHVybjt3aGlsZShhKX1yZXR1cm4gMz09PWIudGFnP2M6bnVsbH1mdW5jdGlvbiBXYihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWImJihhPWEuYWx0ZXJuYXRlLG51bGwhPT1hJiYoYj1hLm1lbW9pemVkU3RhdGUpKTtpZihudWxsIT09YilyZXR1cm4gYi5kZWh5ZHJhdGVkfXJldHVybiBudWxsfWZ1bmN0aW9uIFhiKGEpe2lmKFZiKGEpIT09YSl0aHJvdyBFcnJvcihwKDE4OCkpO31cbmZ1bmN0aW9uIFliKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2lmKCFiKXtiPVZiKGEpO2lmKG51bGw9PT1iKXRocm93IEVycm9yKHAoMTg4KSk7cmV0dXJuIGIhPT1hP251bGw6YX1mb3IodmFyIGM9YSxkPWI7Oyl7dmFyIGU9Yy5yZXR1cm47aWYobnVsbD09PWUpYnJlYWs7dmFyIGY9ZS5hbHRlcm5hdGU7aWYobnVsbD09PWYpe2Q9ZS5yZXR1cm47aWYobnVsbCE9PWQpe2M9ZDtjb250aW51ZX1icmVha31pZihlLmNoaWxkPT09Zi5jaGlsZCl7Zm9yKGY9ZS5jaGlsZDtmOyl7aWYoZj09PWMpcmV0dXJuIFhiKGUpLGE7aWYoZj09PWQpcmV0dXJuIFhiKGUpLGI7Zj1mLnNpYmxpbmd9dGhyb3cgRXJyb3IocCgxODgpKTt9aWYoYy5yZXR1cm4hPT1kLnJldHVybiljPWUsZD1mO2Vsc2V7Zm9yKHZhciBnPSExLGg9ZS5jaGlsZDtoOyl7aWYoaD09PWMpe2c9ITA7Yz1lO2Q9ZjticmVha31pZihoPT09ZCl7Zz0hMDtkPWU7Yz1mO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXtmb3IoaD1mLmNoaWxkO2g7KXtpZihoPT09XG5jKXtnPSEwO2M9ZjtkPWU7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1mO2M9ZTticmVha31oPWguc2libGluZ31pZighZyl0aHJvdyBFcnJvcihwKDE4OSkpO319aWYoYy5hbHRlcm5hdGUhPT1kKXRocm93IEVycm9yKHAoMTkwKSk7fWlmKDMhPT1jLnRhZyl0aHJvdyBFcnJvcihwKDE4OCkpO3JldHVybiBjLnN0YXRlTm9kZS5jdXJyZW50PT09Yz9hOmJ9ZnVuY3Rpb24gWmIoYSl7YT1ZYihhKTtyZXR1cm4gbnVsbCE9PWE/JGIoYSk6bnVsbH1mdW5jdGlvbiAkYihhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYTtmb3IoYT1hLmNoaWxkO251bGwhPT1hOyl7dmFyIGI9JGIoYSk7aWYobnVsbCE9PWIpcmV0dXJuIGI7YT1hLnNpYmxpbmd9cmV0dXJuIG51bGx9XG52YXIgYWM9Y2EudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayxiYz1jYS51bnN0YWJsZV9jYW5jZWxDYWxsYmFjayxjYz1jYS51bnN0YWJsZV9zaG91bGRZaWVsZCxkYz1jYS51bnN0YWJsZV9yZXF1ZXN0UGFpbnQsQj1jYS51bnN0YWJsZV9ub3csZWM9Y2EudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwsZmM9Y2EudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHksZ2M9Y2EudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksaGM9Y2EudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksaWM9Y2EudW5zdGFibGVfTG93UHJpb3JpdHksamM9Y2EudW5zdGFibGVfSWRsZVByaW9yaXR5LGtjPW51bGwsbGM9bnVsbDtmdW5jdGlvbiBtYyhhKXtpZihsYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGxjLm9uQ29tbWl0RmliZXJSb290KXRyeXtsYy5vbkNvbW1pdEZpYmVyUm9vdChrYyxhLHZvaWQgMCwxMjg9PT0oYS5jdXJyZW50LmZsYWdzJjEyOCkpfWNhdGNoKGIpe319XG52YXIgb2M9TWF0aC5jbHozMj9NYXRoLmNsejMyOm5jLHBjPU1hdGgubG9nLHFjPU1hdGguTE4yO2Z1bmN0aW9uIG5jKGEpe2E+Pj49MDtyZXR1cm4gMD09PWE/MzI6MzEtKHBjKGEpL3FjfDApfDB9dmFyIHJjPTY0LHNjPTQxOTQzMDQ7XG5mdW5jdGlvbiB0YyhhKXtzd2l0Y2goYSYtYSl7Y2FzZSAxOnJldHVybiAxO2Nhc2UgMjpyZXR1cm4gMjtjYXNlIDQ6cmV0dXJuIDQ7Y2FzZSA4OnJldHVybiA4O2Nhc2UgMTY6cmV0dXJuIDE2O2Nhc2UgMzI6cmV0dXJuIDMyO2Nhc2UgNjQ6Y2FzZSAxMjg6Y2FzZSAyNTY6Y2FzZSA1MTI6Y2FzZSAxMDI0OmNhc2UgMjA0ODpjYXNlIDQwOTY6Y2FzZSA4MTkyOmNhc2UgMTYzODQ6Y2FzZSAzMjc2ODpjYXNlIDY1NTM2OmNhc2UgMTMxMDcyOmNhc2UgMjYyMTQ0OmNhc2UgNTI0Mjg4OmNhc2UgMTA0ODU3NjpjYXNlIDIwOTcxNTI6cmV0dXJuIGEmNDE5NDI0MDtjYXNlIDQxOTQzMDQ6Y2FzZSA4Mzg4NjA4OmNhc2UgMTY3NzcyMTY6Y2FzZSAzMzU1NDQzMjpjYXNlIDY3MTA4ODY0OnJldHVybiBhJjEzMDAyMzQyNDtjYXNlIDEzNDIxNzcyODpyZXR1cm4gMTM0MjE3NzI4O2Nhc2UgMjY4NDM1NDU2OnJldHVybiAyNjg0MzU0NTY7Y2FzZSA1MzY4NzA5MTI6cmV0dXJuIDUzNjg3MDkxMjtjYXNlIDEwNzM3NDE4MjQ6cmV0dXJuIDEwNzM3NDE4MjQ7XG5kZWZhdWx0OnJldHVybiBhfX1mdW5jdGlvbiB1YyhhLGIpe3ZhciBjPWEucGVuZGluZ0xhbmVzO2lmKDA9PT1jKXJldHVybiAwO3ZhciBkPTAsZT1hLnN1c3BlbmRlZExhbmVzLGY9YS5waW5nZWRMYW5lcyxnPWMmMjY4NDM1NDU1O2lmKDAhPT1nKXt2YXIgaD1nJn5lOzAhPT1oP2Q9dGMoaCk6KGYmPWcsMCE9PWYmJihkPXRjKGYpKSl9ZWxzZSBnPWMmfmUsMCE9PWc/ZD10YyhnKTowIT09ZiYmKGQ9dGMoZikpO2lmKDA9PT1kKXJldHVybiAwO2lmKDAhPT1iJiZiIT09ZCYmMD09PShiJmUpJiYoZT1kJi1kLGY9YiYtYixlPj1mfHwxNj09PWUmJjAhPT0oZiY0MTk0MjQwKSkpcmV0dXJuIGI7MCE9PShkJjQpJiYoZHw9YyYxNik7Yj1hLmVudGFuZ2xlZExhbmVzO2lmKDAhPT1iKWZvcihhPWEuZW50YW5nbGVtZW50cyxiJj1kOzA8YjspYz0zMS1vYyhiKSxlPTE8PGMsZHw9YVtjXSxiJj1+ZTtyZXR1cm4gZH1cbmZ1bmN0aW9uIHZjKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTpjYXNlIDI6Y2FzZSA0OnJldHVybiBiKzI1MDtjYXNlIDg6Y2FzZSAxNjpjYXNlIDMyOmNhc2UgNjQ6Y2FzZSAxMjg6Y2FzZSAyNTY6Y2FzZSA1MTI6Y2FzZSAxMDI0OmNhc2UgMjA0ODpjYXNlIDQwOTY6Y2FzZSA4MTkyOmNhc2UgMTYzODQ6Y2FzZSAzMjc2ODpjYXNlIDY1NTM2OmNhc2UgMTMxMDcyOmNhc2UgMjYyMTQ0OmNhc2UgNTI0Mjg4OmNhc2UgMTA0ODU3NjpjYXNlIDIwOTcxNTI6cmV0dXJuIGIrNUUzO2Nhc2UgNDE5NDMwNDpjYXNlIDgzODg2MDg6Y2FzZSAxNjc3NzIxNjpjYXNlIDMzNTU0NDMyOmNhc2UgNjcxMDg4NjQ6cmV0dXJuLTE7Y2FzZSAxMzQyMTc3Mjg6Y2FzZSAyNjg0MzU0NTY6Y2FzZSA1MzY4NzA5MTI6Y2FzZSAxMDczNzQxODI0OnJldHVybi0xO2RlZmF1bHQ6cmV0dXJuLTF9fVxuZnVuY3Rpb24gd2MoYSxiKXtmb3IodmFyIGM9YS5zdXNwZW5kZWRMYW5lcyxkPWEucGluZ2VkTGFuZXMsZT1hLmV4cGlyYXRpb25UaW1lcyxmPWEucGVuZGluZ0xhbmVzOzA8Zjspe3ZhciBnPTMxLW9jKGYpLGg9MTw8ZyxrPWVbZ107aWYoLTE9PT1rKXtpZigwPT09KGgmYyl8fDAhPT0oaCZkKSllW2ddPXZjKGgsYil9ZWxzZSBrPD1iJiYoYS5leHBpcmVkTGFuZXN8PWgpO2YmPX5ofX1mdW5jdGlvbiB4YyhhKXthPWEucGVuZGluZ0xhbmVzJi0xMDczNzQxODI1O3JldHVybiAwIT09YT9hOmEmMTA3Mzc0MTgyND8xMDczNzQxODI0OjB9ZnVuY3Rpb24geWMoKXt2YXIgYT1yYztyYzw8PTE7MD09PShyYyY0MTk0MjQwKSYmKHJjPTY0KTtyZXR1cm4gYX1mdW5jdGlvbiB6YyhhKXtmb3IodmFyIGI9W10sYz0wOzMxPmM7YysrKWIucHVzaChhKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIEFjKGEsYixjKXthLnBlbmRpbmdMYW5lc3w9Yjs1MzY4NzA5MTIhPT1iJiYoYS5zdXNwZW5kZWRMYW5lcz0wLGEucGluZ2VkTGFuZXM9MCk7YT1hLmV2ZW50VGltZXM7Yj0zMS1vYyhiKTthW2JdPWN9ZnVuY3Rpb24gQmMoYSxiKXt2YXIgYz1hLnBlbmRpbmdMYW5lcyZ+YjthLnBlbmRpbmdMYW5lcz1iO2Euc3VzcGVuZGVkTGFuZXM9MDthLnBpbmdlZExhbmVzPTA7YS5leHBpcmVkTGFuZXMmPWI7YS5tdXRhYmxlUmVhZExhbmVzJj1iO2EuZW50YW5nbGVkTGFuZXMmPWI7Yj1hLmVudGFuZ2xlbWVudHM7dmFyIGQ9YS5ldmVudFRpbWVzO2ZvcihhPWEuZXhwaXJhdGlvblRpbWVzOzA8Yzspe3ZhciBlPTMxLW9jKGMpLGY9MTw8ZTtiW2VdPTA7ZFtlXT0tMTthW2VdPS0xO2MmPX5mfX1cbmZ1bmN0aW9uIENjKGEsYil7dmFyIGM9YS5lbnRhbmdsZWRMYW5lc3w9Yjtmb3IoYT1hLmVudGFuZ2xlbWVudHM7Yzspe3ZhciBkPTMxLW9jKGMpLGU9MTw8ZDtlJmJ8YVtkXSZiJiYoYVtkXXw9Yik7YyY9fmV9fXZhciBDPTA7ZnVuY3Rpb24gRGMoYSl7YSY9LWE7cmV0dXJuIDE8YT80PGE/MCE9PShhJjI2ODQzNTQ1NSk/MTY6NTM2ODcwOTEyOjQ6MX12YXIgRWMsRmMsR2MsSGMsSWMsSmM9ITEsS2M9W10sTGM9bnVsbCxNYz1udWxsLE5jPW51bGwsT2M9bmV3IE1hcCxQYz1uZXcgTWFwLFFjPVtdLFJjPVwibW91c2Vkb3duIG1vdXNldXAgdG91Y2hjYW5jZWwgdG91Y2hlbmQgdG91Y2hzdGFydCBhdXhjbGljayBkYmxjbGljayBwb2ludGVyY2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJ1cCBkcmFnZW5kIGRyYWdzdGFydCBkcm9wIGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBpbnB1dCB0ZXh0SW5wdXQgY29weSBjdXQgcGFzdGUgY2xpY2sgY2hhbmdlIGNvbnRleHRtZW51IHJlc2V0IHN1Ym1pdFwiLnNwbGl0KFwiIFwiKTtcbmZ1bmN0aW9uIFNjKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c2luXCI6Y2FzZSBcImZvY3Vzb3V0XCI6TGM9bnVsbDticmVhaztjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdsZWF2ZVwiOk1jPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJtb3VzZW91dFwiOk5jPW51bGw7YnJlYWs7Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpPYy5kZWxldGUoYi5wb2ludGVySWQpO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpQYy5kZWxldGUoYi5wb2ludGVySWQpfX1cbmZ1bmN0aW9uIFRjKGEsYixjLGQsZSxmKXtpZihudWxsPT09YXx8YS5uYXRpdmVFdmVudCE9PWYpcmV0dXJuIGE9e2Jsb2NrZWRPbjpiLGRvbUV2ZW50TmFtZTpjLGV2ZW50U3lzdGVtRmxhZ3M6ZCxuYXRpdmVFdmVudDpmLHRhcmdldENvbnRhaW5lcnM6W2VdfSxudWxsIT09YiYmKGI9Q2IoYiksbnVsbCE9PWImJkZjKGIpKSxhO2EuZXZlbnRTeXN0ZW1GbGFnc3w9ZDtiPWEudGFyZ2V0Q29udGFpbmVycztudWxsIT09ZSYmLTE9PT1iLmluZGV4T2YoZSkmJmIucHVzaChlKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIFVjKGEsYixjLGQsZSl7c3dpdGNoKGIpe2Nhc2UgXCJmb2N1c2luXCI6cmV0dXJuIExjPVRjKExjLGEsYixjLGQsZSksITA7Y2FzZSBcImRyYWdlbnRlclwiOnJldHVybiBNYz1UYyhNYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJtb3VzZW92ZXJcIjpyZXR1cm4gTmM9VGMoTmMsYSxiLGMsZCxlKSwhMDtjYXNlIFwicG9pbnRlcm92ZXJcIjp2YXIgZj1lLnBvaW50ZXJJZDtPYy5zZXQoZixUYyhPYy5nZXQoZil8fG51bGwsYSxiLGMsZCxlKSk7cmV0dXJuITA7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6cmV0dXJuIGY9ZS5wb2ludGVySWQsUGMuc2V0KGYsVGMoUGMuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpLCEwfXJldHVybiExfVxuZnVuY3Rpb24gVmMoYSl7dmFyIGI9V2MoYS50YXJnZXQpO2lmKG51bGwhPT1iKXt2YXIgYz1WYihiKTtpZihudWxsIT09YylpZihiPWMudGFnLDEzPT09Yil7aWYoYj1XYihjKSxudWxsIT09Yil7YS5ibG9ja2VkT249YjtJYyhhLnByaW9yaXR5LGZ1bmN0aW9uKCl7R2MoYyl9KTtyZXR1cm59fWVsc2UgaWYoMz09PWImJmMuc3RhdGVOb2RlLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQpe2EuYmxvY2tlZE9uPTM9PT1jLnRhZz9jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7cmV0dXJufX1hLmJsb2NrZWRPbj1udWxsfVxuZnVuY3Rpb24gWGMoYSl7aWYobnVsbCE9PWEuYmxvY2tlZE9uKXJldHVybiExO2Zvcih2YXIgYj1hLnRhcmdldENvbnRhaW5lcnM7MDxiLmxlbmd0aDspe3ZhciBjPVljKGEuZG9tRXZlbnROYW1lLGEuZXZlbnRTeXN0ZW1GbGFncyxiWzBdLGEubmF0aXZlRXZlbnQpO2lmKG51bGw9PT1jKXtjPWEubmF0aXZlRXZlbnQ7dmFyIGQ9bmV3IGMuY29uc3RydWN0b3IoYy50eXBlLGMpO3diPWQ7Yy50YXJnZXQuZGlzcGF0Y2hFdmVudChkKTt3Yj1udWxsfWVsc2UgcmV0dXJuIGI9Q2IoYyksbnVsbCE9PWImJkZjKGIpLGEuYmxvY2tlZE9uPWMsITE7Yi5zaGlmdCgpfXJldHVybiEwfWZ1bmN0aW9uIFpjKGEsYixjKXtYYyhhKSYmYy5kZWxldGUoYil9ZnVuY3Rpb24gJGMoKXtKYz0hMTtudWxsIT09TGMmJlhjKExjKSYmKExjPW51bGwpO251bGwhPT1NYyYmWGMoTWMpJiYoTWM9bnVsbCk7bnVsbCE9PU5jJiZYYyhOYykmJihOYz1udWxsKTtPYy5mb3JFYWNoKFpjKTtQYy5mb3JFYWNoKFpjKX1cbmZ1bmN0aW9uIGFkKGEsYil7YS5ibG9ja2VkT249PT1iJiYoYS5ibG9ja2VkT249bnVsbCxKY3x8KEpjPSEwLGNhLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2soY2EudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksJGMpKSl9XG5mdW5jdGlvbiBiZChhKXtmdW5jdGlvbiBiKGIpe3JldHVybiBhZChiLGEpfWlmKDA8S2MubGVuZ3RoKXthZChLY1swXSxhKTtmb3IodmFyIGM9MTtjPEtjLmxlbmd0aDtjKyspe3ZhciBkPUtjW2NdO2QuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpfX1udWxsIT09TGMmJmFkKExjLGEpO251bGwhPT1NYyYmYWQoTWMsYSk7bnVsbCE9PU5jJiZhZChOYyxhKTtPYy5mb3JFYWNoKGIpO1BjLmZvckVhY2goYik7Zm9yKGM9MDtjPFFjLmxlbmd0aDtjKyspZD1RY1tjXSxkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKTtmb3IoOzA8UWMubGVuZ3RoJiYoYz1RY1swXSxudWxsPT09Yy5ibG9ja2VkT24pOylWYyhjKSxudWxsPT09Yy5ibG9ja2VkT24mJlFjLnNoaWZ0KCl9dmFyIGNkPXVhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLGRkPSEwO1xuZnVuY3Rpb24gZWQoYSxiLGMsZCl7dmFyIGU9QyxmPWNkLnRyYW5zaXRpb247Y2QudHJhbnNpdGlvbj1udWxsO3RyeXtDPTEsZmQoYSxiLGMsZCl9ZmluYWxseXtDPWUsY2QudHJhbnNpdGlvbj1mfX1mdW5jdGlvbiBnZChhLGIsYyxkKXt2YXIgZT1DLGY9Y2QudHJhbnNpdGlvbjtjZC50cmFuc2l0aW9uPW51bGw7dHJ5e0M9NCxmZChhLGIsYyxkKX1maW5hbGx5e0M9ZSxjZC50cmFuc2l0aW9uPWZ9fVxuZnVuY3Rpb24gZmQoYSxiLGMsZCl7aWYoZGQpe3ZhciBlPVljKGEsYixjLGQpO2lmKG51bGw9PT1lKWhkKGEsYixkLGlkLGMpLFNjKGEsZCk7ZWxzZSBpZihVYyhlLGEsYixjLGQpKWQuc3RvcFByb3BhZ2F0aW9uKCk7ZWxzZSBpZihTYyhhLGQpLGImNCYmLTE8UmMuaW5kZXhPZihhKSl7Zm9yKDtudWxsIT09ZTspe3ZhciBmPUNiKGUpO251bGwhPT1mJiZFYyhmKTtmPVljKGEsYixjLGQpO251bGw9PT1mJiZoZChhLGIsZCxpZCxjKTtpZihmPT09ZSlicmVhaztlPWZ9bnVsbCE9PWUmJmQuc3RvcFByb3BhZ2F0aW9uKCl9ZWxzZSBoZChhLGIsZCxudWxsLGMpfX12YXIgaWQ9bnVsbDtcbmZ1bmN0aW9uIFljKGEsYixjLGQpe2lkPW51bGw7YT14YihkKTthPVdjKGEpO2lmKG51bGwhPT1hKWlmKGI9VmIoYSksbnVsbD09PWIpYT1udWxsO2Vsc2UgaWYoYz1iLnRhZywxMz09PWMpe2E9V2IoYik7aWYobnVsbCE9PWEpcmV0dXJuIGE7YT1udWxsfWVsc2UgaWYoMz09PWMpe2lmKGIuc3RhdGVOb2RlLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQpcmV0dXJuIDM9PT1iLnRhZz9iLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7YT1udWxsfWVsc2UgYiE9PWEmJihhPW51bGwpO2lkPWE7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBqZChhKXtzd2l0Y2goYSl7Y2FzZSBcImNhbmNlbFwiOmNhc2UgXCJjbGlja1wiOmNhc2UgXCJjbG9zZVwiOmNhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJjb3B5XCI6Y2FzZSBcImN1dFwiOmNhc2UgXCJhdXhjbGlja1wiOmNhc2UgXCJkYmxjbGlja1wiOmNhc2UgXCJkcmFnZW5kXCI6Y2FzZSBcImRyYWdzdGFydFwiOmNhc2UgXCJkcm9wXCI6Y2FzZSBcImZvY3VzaW5cIjpjYXNlIFwiZm9jdXNvdXRcIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwiaW52YWxpZFwiOmNhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcImtleXVwXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcInBhc3RlXCI6Y2FzZSBcInBhdXNlXCI6Y2FzZSBcInBsYXlcIjpjYXNlIFwicG9pbnRlcmNhbmNlbFwiOmNhc2UgXCJwb2ludGVyZG93blwiOmNhc2UgXCJwb2ludGVydXBcIjpjYXNlIFwicmF0ZWNoYW5nZVwiOmNhc2UgXCJyZXNldFwiOmNhc2UgXCJyZXNpemVcIjpjYXNlIFwic2Vla2VkXCI6Y2FzZSBcInN1Ym1pdFwiOmNhc2UgXCJ0b3VjaGNhbmNlbFwiOmNhc2UgXCJ0b3VjaGVuZFwiOmNhc2UgXCJ0b3VjaHN0YXJ0XCI6Y2FzZSBcInZvbHVtZWNoYW5nZVwiOmNhc2UgXCJjaGFuZ2VcIjpjYXNlIFwic2VsZWN0aW9uY2hhbmdlXCI6Y2FzZSBcInRleHRJbnB1dFwiOmNhc2UgXCJjb21wb3NpdGlvbnN0YXJ0XCI6Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6Y2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6Y2FzZSBcImJlZm9yZWJsdXJcIjpjYXNlIFwiYWZ0ZXJibHVyXCI6Y2FzZSBcImJlZm9yZWlucHV0XCI6Y2FzZSBcImJsdXJcIjpjYXNlIFwiZnVsbHNjcmVlbmNoYW5nZVwiOmNhc2UgXCJmb2N1c1wiOmNhc2UgXCJoYXNoY2hhbmdlXCI6Y2FzZSBcInBvcHN0YXRlXCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJzZWxlY3RzdGFydFwiOnJldHVybiAxO2Nhc2UgXCJkcmFnXCI6Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnZXhpdFwiOmNhc2UgXCJkcmFnbGVhdmVcIjpjYXNlIFwiZHJhZ292ZXJcIjpjYXNlIFwibW91c2Vtb3ZlXCI6Y2FzZSBcIm1vdXNlb3V0XCI6Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJwb2ludGVybW92ZVwiOmNhc2UgXCJwb2ludGVyb3V0XCI6Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInNjcm9sbFwiOmNhc2UgXCJ0b2dnbGVcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcIndoZWVsXCI6Y2FzZSBcIm1vdXNlZW50ZXJcIjpjYXNlIFwibW91c2VsZWF2ZVwiOmNhc2UgXCJwb2ludGVyZW50ZXJcIjpjYXNlIFwicG9pbnRlcmxlYXZlXCI6cmV0dXJuIDQ7XG5jYXNlIFwibWVzc2FnZVwiOnN3aXRjaChlYygpKXtjYXNlIGZjOnJldHVybiAxO2Nhc2UgZ2M6cmV0dXJuIDQ7Y2FzZSBoYzpjYXNlIGljOnJldHVybiAxNjtjYXNlIGpjOnJldHVybiA1MzY4NzA5MTI7ZGVmYXVsdDpyZXR1cm4gMTZ9ZGVmYXVsdDpyZXR1cm4gMTZ9fXZhciBrZD1udWxsLGxkPW51bGwsbWQ9bnVsbDtmdW5jdGlvbiBuZCgpe2lmKG1kKXJldHVybiBtZDt2YXIgYSxiPWxkLGM9Yi5sZW5ndGgsZCxlPVwidmFsdWVcImluIGtkP2tkLnZhbHVlOmtkLnRleHRDb250ZW50LGY9ZS5sZW5ndGg7Zm9yKGE9MDthPGMmJmJbYV09PT1lW2FdO2ErKyk7dmFyIGc9Yy1hO2ZvcihkPTE7ZDw9ZyYmYltjLWRdPT09ZVtmLWRdO2QrKyk7cmV0dXJuIG1kPWUuc2xpY2UoYSwxPGQ/MS1kOnZvaWQgMCl9XG5mdW5jdGlvbiBvZChhKXt2YXIgYj1hLmtleUNvZGU7XCJjaGFyQ29kZVwiaW4gYT8oYT1hLmNoYXJDb2RlLDA9PT1hJiYxMz09PWImJihhPTEzKSk6YT1iOzEwPT09YSYmKGE9MTMpO3JldHVybiAzMjw9YXx8MTM9PT1hP2E6MH1mdW5jdGlvbiBwZCgpe3JldHVybiEwfWZ1bmN0aW9uIHFkKCl7cmV0dXJuITF9XG5mdW5jdGlvbiByZChhKXtmdW5jdGlvbiBiKGIsZCxlLGYsZyl7dGhpcy5fcmVhY3ROYW1lPWI7dGhpcy5fdGFyZ2V0SW5zdD1lO3RoaXMudHlwZT1kO3RoaXMubmF0aXZlRXZlbnQ9Zjt0aGlzLnRhcmdldD1nO3RoaXMuY3VycmVudFRhcmdldD1udWxsO2Zvcih2YXIgYyBpbiBhKWEuaGFzT3duUHJvcGVydHkoYykmJihiPWFbY10sdGhpc1tjXT1iP2IoZik6ZltjXSk7dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9KG51bGwhPWYuZGVmYXVsdFByZXZlbnRlZD9mLmRlZmF1bHRQcmV2ZW50ZWQ6ITE9PT1mLnJldHVyblZhbHVlKT9wZDpxZDt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXFkO3JldHVybiB0aGlzfUEoYi5wcm90b3R5cGUse3ByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwO3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOlwidW5rbm93blwiIT09dHlwZW9mIGEucmV0dXJuVmFsdWUmJlxuKGEucmV0dXJuVmFsdWU9ITEpLHRoaXMuaXNEZWZhdWx0UHJldmVudGVkPXBkKX0sc3RvcFByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5zdG9wUHJvcGFnYXRpb24/YS5zdG9wUHJvcGFnYXRpb24oKTpcInVua25vd25cIiE9PXR5cGVvZiBhLmNhbmNlbEJ1YmJsZSYmKGEuY2FuY2VsQnViYmxlPSEwKSx0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXBkKX0scGVyc2lzdDpmdW5jdGlvbigpe30saXNQZXJzaXN0ZW50OnBkfSk7cmV0dXJuIGJ9XG52YXIgc2Q9e2V2ZW50UGhhc2U6MCxidWJibGVzOjAsY2FuY2VsYWJsZTowLHRpbWVTdGFtcDpmdW5jdGlvbihhKXtyZXR1cm4gYS50aW1lU3RhbXB8fERhdGUubm93KCl9LGRlZmF1bHRQcmV2ZW50ZWQ6MCxpc1RydXN0ZWQ6MH0sdGQ9cmQoc2QpLHVkPUEoe30sc2Qse3ZpZXc6MCxkZXRhaWw6MH0pLHZkPXJkKHVkKSx3ZCx4ZCx5ZCxBZD1BKHt9LHVkLHtzY3JlZW5YOjAsc2NyZWVuWTowLGNsaWVudFg6MCxjbGllbnRZOjAscGFnZVg6MCxwYWdlWTowLGN0cmxLZXk6MCxzaGlmdEtleTowLGFsdEtleTowLG1ldGFLZXk6MCxnZXRNb2RpZmllclN0YXRlOnpkLGJ1dHRvbjowLGJ1dHRvbnM6MCxyZWxhdGVkVGFyZ2V0OmZ1bmN0aW9uKGEpe3JldHVybiB2b2lkIDA9PT1hLnJlbGF0ZWRUYXJnZXQ/YS5mcm9tRWxlbWVudD09PWEuc3JjRWxlbWVudD9hLnRvRWxlbWVudDphLmZyb21FbGVtZW50OmEucmVsYXRlZFRhcmdldH0sbW92ZW1lbnRYOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRYXCJpblxuYSlyZXR1cm4gYS5tb3ZlbWVudFg7YSE9PXlkJiYoeWQmJlwibW91c2Vtb3ZlXCI9PT1hLnR5cGU/KHdkPWEuc2NyZWVuWC15ZC5zY3JlZW5YLHhkPWEuc2NyZWVuWS15ZC5zY3JlZW5ZKTp4ZD13ZD0wLHlkPWEpO3JldHVybiB3ZH0sbW92ZW1lbnRZOmZ1bmN0aW9uKGEpe3JldHVyblwibW92ZW1lbnRZXCJpbiBhP2EubW92ZW1lbnRZOnhkfX0pLEJkPXJkKEFkKSxDZD1BKHt9LEFkLHtkYXRhVHJhbnNmZXI6MH0pLERkPXJkKENkKSxFZD1BKHt9LHVkLHtyZWxhdGVkVGFyZ2V0OjB9KSxGZD1yZChFZCksR2Q9QSh7fSxzZCx7YW5pbWF0aW9uTmFtZTowLGVsYXBzZWRUaW1lOjAscHNldWRvRWxlbWVudDowfSksSGQ9cmQoR2QpLElkPUEoe30sc2Qse2NsaXBib2FyZERhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuXCJjbGlwYm9hcmREYXRhXCJpbiBhP2EuY2xpcGJvYXJkRGF0YTp3aW5kb3cuY2xpcGJvYXJkRGF0YX19KSxKZD1yZChJZCksS2Q9QSh7fSxzZCx7ZGF0YTowfSksTGQ9cmQoS2QpLE1kPXtFc2M6XCJFc2NhcGVcIixcblNwYWNlYmFyOlwiIFwiLExlZnQ6XCJBcnJvd0xlZnRcIixVcDpcIkFycm93VXBcIixSaWdodDpcIkFycm93UmlnaHRcIixEb3duOlwiQXJyb3dEb3duXCIsRGVsOlwiRGVsZXRlXCIsV2luOlwiT1NcIixNZW51OlwiQ29udGV4dE1lbnVcIixBcHBzOlwiQ29udGV4dE1lbnVcIixTY3JvbGw6XCJTY3JvbGxMb2NrXCIsTW96UHJpbnRhYmxlS2V5OlwiVW5pZGVudGlmaWVkXCJ9LE5kPXs4OlwiQmFja3NwYWNlXCIsOTpcIlRhYlwiLDEyOlwiQ2xlYXJcIiwxMzpcIkVudGVyXCIsMTY6XCJTaGlmdFwiLDE3OlwiQ29udHJvbFwiLDE4OlwiQWx0XCIsMTk6XCJQYXVzZVwiLDIwOlwiQ2Fwc0xvY2tcIiwyNzpcIkVzY2FwZVwiLDMyOlwiIFwiLDMzOlwiUGFnZVVwXCIsMzQ6XCJQYWdlRG93blwiLDM1OlwiRW5kXCIsMzY6XCJIb21lXCIsMzc6XCJBcnJvd0xlZnRcIiwzODpcIkFycm93VXBcIiwzOTpcIkFycm93UmlnaHRcIiw0MDpcIkFycm93RG93blwiLDQ1OlwiSW5zZXJ0XCIsNDY6XCJEZWxldGVcIiwxMTI6XCJGMVwiLDExMzpcIkYyXCIsMTE0OlwiRjNcIiwxMTU6XCJGNFwiLDExNjpcIkY1XCIsMTE3OlwiRjZcIiwxMTg6XCJGN1wiLFxuMTE5OlwiRjhcIiwxMjA6XCJGOVwiLDEyMTpcIkYxMFwiLDEyMjpcIkYxMVwiLDEyMzpcIkYxMlwiLDE0NDpcIk51bUxvY2tcIiwxNDU6XCJTY3JvbGxMb2NrXCIsMjI0OlwiTWV0YVwifSxPZD17QWx0OlwiYWx0S2V5XCIsQ29udHJvbDpcImN0cmxLZXlcIixNZXRhOlwibWV0YUtleVwiLFNoaWZ0Olwic2hpZnRLZXlcIn07ZnVuY3Rpb24gUGQoYSl7dmFyIGI9dGhpcy5uYXRpdmVFdmVudDtyZXR1cm4gYi5nZXRNb2RpZmllclN0YXRlP2IuZ2V0TW9kaWZpZXJTdGF0ZShhKTooYT1PZFthXSk/ISFiW2FdOiExfWZ1bmN0aW9uIHpkKCl7cmV0dXJuIFBkfVxudmFyIFFkPUEoe30sdWQse2tleTpmdW5jdGlvbihhKXtpZihhLmtleSl7dmFyIGI9TWRbYS5rZXldfHxhLmtleTtpZihcIlVuaWRlbnRpZmllZFwiIT09YilyZXR1cm4gYn1yZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/KGE9b2QoYSksMTM9PT1hP1wiRW50ZXJcIjpTdHJpbmcuZnJvbUNoYXJDb2RlKGEpKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP05kW2Eua2V5Q29kZV18fFwiVW5pZGVudGlmaWVkXCI6XCJcIn0sY29kZTowLGxvY2F0aW9uOjAsY3RybEtleTowLHNoaWZ0S2V5OjAsYWx0S2V5OjAsbWV0YUtleTowLHJlcGVhdDowLGxvY2FsZTowLGdldE1vZGlmaWVyU3RhdGU6emQsY2hhckNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlP29kKGEpOjB9LGtleUNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH0sd2hpY2g6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09XG5hLnR5cGU/b2QoYSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH19KSxSZD1yZChRZCksU2Q9QSh7fSxBZCx7cG9pbnRlcklkOjAsd2lkdGg6MCxoZWlnaHQ6MCxwcmVzc3VyZTowLHRhbmdlbnRpYWxQcmVzc3VyZTowLHRpbHRYOjAsdGlsdFk6MCx0d2lzdDowLHBvaW50ZXJUeXBlOjAsaXNQcmltYXJ5OjB9KSxUZD1yZChTZCksVWQ9QSh7fSx1ZCx7dG91Y2hlczowLHRhcmdldFRvdWNoZXM6MCxjaGFuZ2VkVG91Y2hlczowLGFsdEtleTowLG1ldGFLZXk6MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxnZXRNb2RpZmllclN0YXRlOnpkfSksVmQ9cmQoVWQpLFdkPUEoe30sc2Qse3Byb3BlcnR5TmFtZTowLGVsYXBzZWRUaW1lOjAscHNldWRvRWxlbWVudDowfSksWGQ9cmQoV2QpLFlkPUEoe30sQWQse2RlbHRhWDpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWFwiaW4gYT9hLmRlbHRhWDpcIndoZWVsRGVsdGFYXCJpbiBhPy1hLndoZWVsRGVsdGFYOjB9LFxuZGVsdGFZOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFZXCJpbiBhP2EuZGVsdGFZOlwid2hlZWxEZWx0YVlcImluIGE/LWEud2hlZWxEZWx0YVk6XCJ3aGVlbERlbHRhXCJpbiBhPy1hLndoZWVsRGVsdGE6MH0sZGVsdGFaOjAsZGVsdGFNb2RlOjB9KSxaZD1yZChZZCksJGQ9WzksMTMsMjcsMzJdLGFlPWlhJiZcIkNvbXBvc2l0aW9uRXZlbnRcImluIHdpbmRvdyxiZT1udWxsO2lhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJihiZT1kb2N1bWVudC5kb2N1bWVudE1vZGUpO3ZhciBjZT1pYSYmXCJUZXh0RXZlbnRcImluIHdpbmRvdyYmIWJlLGRlPWlhJiYoIWFlfHxiZSYmODxiZSYmMTE+PWJlKSxlZT1TdHJpbmcuZnJvbUNoYXJDb2RlKDMyKSxmZT0hMTtcbmZ1bmN0aW9uIGdlKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJrZXl1cFwiOnJldHVybi0xIT09JGQuaW5kZXhPZihiLmtleUNvZGUpO2Nhc2UgXCJrZXlkb3duXCI6cmV0dXJuIDIyOSE9PWIua2V5Q29kZTtjYXNlIFwia2V5cHJlc3NcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcImZvY3Vzb3V0XCI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gaGUoYSl7YT1hLmRldGFpbDtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJlwiZGF0YVwiaW4gYT9hLmRhdGE6bnVsbH12YXIgaWU9ITE7ZnVuY3Rpb24gamUoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIGhlKGIpO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDMyIT09Yi53aGljaClyZXR1cm4gbnVsbDtmZT0hMDtyZXR1cm4gZWU7Y2FzZSBcInRleHRJbnB1dFwiOnJldHVybiBhPWIuZGF0YSxhPT09ZWUmJmZlP251bGw6YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIGtlKGEsYil7aWYoaWUpcmV0dXJuXCJjb21wb3NpdGlvbmVuZFwiPT09YXx8IWFlJiZnZShhLGIpPyhhPW5kKCksbWQ9bGQ9a2Q9bnVsbCxpZT0hMSxhKTpudWxsO3N3aXRjaChhKXtjYXNlIFwicGFzdGVcIjpyZXR1cm4gbnVsbDtjYXNlIFwia2V5cHJlc3NcIjppZighKGIuY3RybEtleXx8Yi5hbHRLZXl8fGIubWV0YUtleSl8fGIuY3RybEtleSYmYi5hbHRLZXkpe2lmKGIuY2hhciYmMTxiLmNoYXIubGVuZ3RoKXJldHVybiBiLmNoYXI7aWYoYi53aGljaClyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShiLndoaWNoKX1yZXR1cm4gbnVsbDtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gZGUmJlwia29cIiE9PWIubG9jYWxlP251bGw6Yi5kYXRhO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxudmFyIGxlPXtjb2xvcjohMCxkYXRlOiEwLGRhdGV0aW1lOiEwLFwiZGF0ZXRpbWUtbG9jYWxcIjohMCxlbWFpbDohMCxtb250aDohMCxudW1iZXI6ITAscGFzc3dvcmQ6ITAscmFuZ2U6ITAsc2VhcmNoOiEwLHRlbDohMCx0ZXh0OiEwLHRpbWU6ITAsdXJsOiEwLHdlZWs6ITB9O2Z1bmN0aW9uIG1lKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT1iPyEhbGVbYS50eXBlXTpcInRleHRhcmVhXCI9PT1iPyEwOiExfWZ1bmN0aW9uIG5lKGEsYixjLGQpe0ViKGQpO2I9b2UoYixcIm9uQ2hhbmdlXCIpOzA8Yi5sZW5ndGgmJihjPW5ldyB0ZChcIm9uQ2hhbmdlXCIsXCJjaGFuZ2VcIixudWxsLGMsZCksYS5wdXNoKHtldmVudDpjLGxpc3RlbmVyczpifSkpfXZhciBwZT1udWxsLHFlPW51bGw7ZnVuY3Rpb24gcmUoYSl7c2UoYSwwKX1mdW5jdGlvbiB0ZShhKXt2YXIgYj11ZShhKTtpZihXYShiKSlyZXR1cm4gYX1cbmZ1bmN0aW9uIHZlKGEsYil7aWYoXCJjaGFuZ2VcIj09PWEpcmV0dXJuIGJ9dmFyIHdlPSExO2lmKGlhKXt2YXIgeGU7aWYoaWEpe3ZhciB5ZT1cIm9uaW5wdXRcImluIGRvY3VtZW50O2lmKCF5ZSl7dmFyIHplPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7emUuc2V0QXR0cmlidXRlKFwib25pbnB1dFwiLFwicmV0dXJuO1wiKTt5ZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgemUub25pbnB1dH14ZT15ZX1lbHNlIHhlPSExO3dlPXhlJiYoIWRvY3VtZW50LmRvY3VtZW50TW9kZXx8OTxkb2N1bWVudC5kb2N1bWVudE1vZGUpfWZ1bmN0aW9uIEFlKCl7cGUmJihwZS5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixCZSkscWU9cGU9bnVsbCl9ZnVuY3Rpb24gQmUoYSl7aWYoXCJ2YWx1ZVwiPT09YS5wcm9wZXJ0eU5hbWUmJnRlKHFlKSl7dmFyIGI9W107bmUoYixxZSxhLHhiKGEpKTtKYihyZSxiKX19XG5mdW5jdGlvbiBDZShhLGIsYyl7XCJmb2N1c2luXCI9PT1hPyhBZSgpLHBlPWIscWU9YyxwZS5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixCZSkpOlwiZm9jdXNvdXRcIj09PWEmJkFlKCl9ZnVuY3Rpb24gRGUoYSl7aWYoXCJzZWxlY3Rpb25jaGFuZ2VcIj09PWF8fFwia2V5dXBcIj09PWF8fFwia2V5ZG93blwiPT09YSlyZXR1cm4gdGUocWUpfWZ1bmN0aW9uIEVlKGEsYil7aWYoXCJjbGlja1wiPT09YSlyZXR1cm4gdGUoYil9ZnVuY3Rpb24gRmUoYSxiKXtpZihcImlucHV0XCI9PT1hfHxcImNoYW5nZVwiPT09YSlyZXR1cm4gdGUoYil9ZnVuY3Rpb24gR2UoYSxiKXtyZXR1cm4gYT09PWImJigwIT09YXx8MS9hPT09MS9iKXx8YSE9PWEmJmIhPT1ifXZhciBIZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgT2JqZWN0LmlzP09iamVjdC5pczpHZTtcbmZ1bmN0aW9uIEllKGEsYil7aWYoSGUoYSxiKSlyZXR1cm4hMDtpZihcIm9iamVjdFwiIT09dHlwZW9mIGF8fG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGJ8fG51bGw9PT1iKXJldHVybiExO3ZhciBjPU9iamVjdC5rZXlzKGEpLGQ9T2JqZWN0LmtleXMoYik7aWYoYy5sZW5ndGghPT1kLmxlbmd0aClyZXR1cm4hMTtmb3IoZD0wO2Q8Yy5sZW5ndGg7ZCsrKXt2YXIgZT1jW2RdO2lmKCFqYS5jYWxsKGIsZSl8fCFIZShhW2VdLGJbZV0pKXJldHVybiExfXJldHVybiEwfWZ1bmN0aW9uIEplKGEpe2Zvcig7YSYmYS5maXJzdENoaWxkOylhPWEuZmlyc3RDaGlsZDtyZXR1cm4gYX1cbmZ1bmN0aW9uIEtlKGEsYil7dmFyIGM9SmUoYSk7YT0wO2Zvcih2YXIgZDtjOyl7aWYoMz09PWMubm9kZVR5cGUpe2Q9YStjLnRleHRDb250ZW50Lmxlbmd0aDtpZihhPD1iJiZkPj1iKXJldHVybntub2RlOmMsb2Zmc2V0OmItYX07YT1kfWE6e2Zvcig7Yzspe2lmKGMubmV4dFNpYmxpbmcpe2M9Yy5uZXh0U2libGluZzticmVhayBhfWM9Yy5wYXJlbnROb2RlfWM9dm9pZCAwfWM9SmUoYyl9fWZ1bmN0aW9uIExlKGEsYil7cmV0dXJuIGEmJmI/YT09PWI/ITA6YSYmMz09PWEubm9kZVR5cGU/ITE6YiYmMz09PWIubm9kZVR5cGU/TGUoYSxiLnBhcmVudE5vZGUpOlwiY29udGFpbnNcImluIGE/YS5jb250YWlucyhiKTphLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uPyEhKGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYikmMTYpOiExOiExfVxuZnVuY3Rpb24gTWUoKXtmb3IodmFyIGE9d2luZG93LGI9WGEoKTtiIGluc3RhbmNlb2YgYS5IVE1MSUZyYW1lRWxlbWVudDspe3RyeXt2YXIgYz1cInN0cmluZ1wiPT09dHlwZW9mIGIuY29udGVudFdpbmRvdy5sb2NhdGlvbi5ocmVmfWNhdGNoKGQpe2M9ITF9aWYoYylhPWIuY29udGVudFdpbmRvdztlbHNlIGJyZWFrO2I9WGEoYS5kb2N1bWVudCl9cmV0dXJuIGJ9ZnVuY3Rpb24gTmUoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBiJiYoXCJpbnB1dFwiPT09YiYmKFwidGV4dFwiPT09YS50eXBlfHxcInNlYXJjaFwiPT09YS50eXBlfHxcInRlbFwiPT09YS50eXBlfHxcInVybFwiPT09YS50eXBlfHxcInBhc3N3b3JkXCI9PT1hLnR5cGUpfHxcInRleHRhcmVhXCI9PT1ifHxcInRydWVcIj09PWEuY29udGVudEVkaXRhYmxlKX1cbmZ1bmN0aW9uIE9lKGEpe3ZhciBiPU1lKCksYz1hLmZvY3VzZWRFbGVtLGQ9YS5zZWxlY3Rpb25SYW5nZTtpZihiIT09YyYmYyYmYy5vd25lckRvY3VtZW50JiZMZShjLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LGMpKXtpZihudWxsIT09ZCYmTmUoYykpaWYoYj1kLnN0YXJ0LGE9ZC5lbmQsdm9pZCAwPT09YSYmKGE9YiksXCJzZWxlY3Rpb25TdGFydFwiaW4gYyljLnNlbGVjdGlvblN0YXJ0PWIsYy5zZWxlY3Rpb25FbmQ9TWF0aC5taW4oYSxjLnZhbHVlLmxlbmd0aCk7ZWxzZSBpZihhPShiPWMub3duZXJEb2N1bWVudHx8ZG9jdW1lbnQpJiZiLmRlZmF1bHRWaWV3fHx3aW5kb3csYS5nZXRTZWxlY3Rpb24pe2E9YS5nZXRTZWxlY3Rpb24oKTt2YXIgZT1jLnRleHRDb250ZW50Lmxlbmd0aCxmPU1hdGgubWluKGQuc3RhcnQsZSk7ZD12b2lkIDA9PT1kLmVuZD9mOk1hdGgubWluKGQuZW5kLGUpOyFhLmV4dGVuZCYmZj5kJiYoZT1kLGQ9ZixmPWUpO2U9S2UoYyxmKTt2YXIgZz1LZShjLFxuZCk7ZSYmZyYmKDEhPT1hLnJhbmdlQ291bnR8fGEuYW5jaG9yTm9kZSE9PWUubm9kZXx8YS5hbmNob3JPZmZzZXQhPT1lLm9mZnNldHx8YS5mb2N1c05vZGUhPT1nLm5vZGV8fGEuZm9jdXNPZmZzZXQhPT1nLm9mZnNldCkmJihiPWIuY3JlYXRlUmFuZ2UoKSxiLnNldFN0YXJ0KGUubm9kZSxlLm9mZnNldCksYS5yZW1vdmVBbGxSYW5nZXMoKSxmPmQ/KGEuYWRkUmFuZ2UoYiksYS5leHRlbmQoZy5ub2RlLGcub2Zmc2V0KSk6KGIuc2V0RW5kKGcubm9kZSxnLm9mZnNldCksYS5hZGRSYW5nZShiKSkpfWI9W107Zm9yKGE9YzthPWEucGFyZW50Tm9kZTspMT09PWEubm9kZVR5cGUmJmIucHVzaCh7ZWxlbWVudDphLGxlZnQ6YS5zY3JvbGxMZWZ0LHRvcDphLnNjcm9sbFRvcH0pO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmZvY3VzJiZjLmZvY3VzKCk7Zm9yKGM9MDtjPGIubGVuZ3RoO2MrKylhPWJbY10sYS5lbGVtZW50LnNjcm9sbExlZnQ9YS5sZWZ0LGEuZWxlbWVudC5zY3JvbGxUb3A9YS50b3B9fVxudmFyIFBlPWlhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJjExPj1kb2N1bWVudC5kb2N1bWVudE1vZGUsUWU9bnVsbCxSZT1udWxsLFNlPW51bGwsVGU9ITE7XG5mdW5jdGlvbiBVZShhLGIsYyl7dmFyIGQ9Yy53aW5kb3c9PT1jP2MuZG9jdW1lbnQ6OT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQ7VGV8fG51bGw9PVFlfHxRZSE9PVhhKGQpfHwoZD1RZSxcInNlbGVjdGlvblN0YXJ0XCJpbiBkJiZOZShkKT9kPXtzdGFydDpkLnNlbGVjdGlvblN0YXJ0LGVuZDpkLnNlbGVjdGlvbkVuZH06KGQ9KGQub3duZXJEb2N1bWVudCYmZC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3fHx3aW5kb3cpLmdldFNlbGVjdGlvbigpLGQ9e2FuY2hvck5vZGU6ZC5hbmNob3JOb2RlLGFuY2hvck9mZnNldDpkLmFuY2hvck9mZnNldCxmb2N1c05vZGU6ZC5mb2N1c05vZGUsZm9jdXNPZmZzZXQ6ZC5mb2N1c09mZnNldH0pLFNlJiZJZShTZSxkKXx8KFNlPWQsZD1vZShSZSxcIm9uU2VsZWN0XCIpLDA8ZC5sZW5ndGgmJihiPW5ldyB0ZChcIm9uU2VsZWN0XCIsXCJzZWxlY3RcIixudWxsLGIsYyksYS5wdXNoKHtldmVudDpiLGxpc3RlbmVyczpkfSksYi50YXJnZXQ9UWUpKSl9XG5mdW5jdGlvbiBWZShhLGIpe3ZhciBjPXt9O2NbYS50b0xvd2VyQ2FzZSgpXT1iLnRvTG93ZXJDYXNlKCk7Y1tcIldlYmtpdFwiK2FdPVwid2Via2l0XCIrYjtjW1wiTW96XCIrYV09XCJtb3pcIitiO3JldHVybiBjfXZhciBXZT17YW5pbWF0aW9uZW5kOlZlKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25FbmRcIiksYW5pbWF0aW9uaXRlcmF0aW9uOlZlKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25JdGVyYXRpb25cIiksYW5pbWF0aW9uc3RhcnQ6VmUoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvblN0YXJ0XCIpLHRyYW5zaXRpb25lbmQ6VmUoXCJUcmFuc2l0aW9uXCIsXCJUcmFuc2l0aW9uRW5kXCIpfSxYZT17fSxZZT17fTtcbmlhJiYoWWU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZSxcIkFuaW1hdGlvbkV2ZW50XCJpbiB3aW5kb3d8fChkZWxldGUgV2UuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbixkZWxldGUgV2UuYW5pbWF0aW9uaXRlcmF0aW9uLmFuaW1hdGlvbixkZWxldGUgV2UuYW5pbWF0aW9uc3RhcnQuYW5pbWF0aW9uKSxcIlRyYW5zaXRpb25FdmVudFwiaW4gd2luZG93fHxkZWxldGUgV2UudHJhbnNpdGlvbmVuZC50cmFuc2l0aW9uKTtmdW5jdGlvbiBaZShhKXtpZihYZVthXSlyZXR1cm4gWGVbYV07aWYoIVdlW2FdKXJldHVybiBhO3ZhciBiPVdlW2FdLGM7Zm9yKGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpJiZjIGluIFllKXJldHVybiBYZVthXT1iW2NdO3JldHVybiBhfXZhciAkZT1aZShcImFuaW1hdGlvbmVuZFwiKSxhZj1aZShcImFuaW1hdGlvbml0ZXJhdGlvblwiKSxiZj1aZShcImFuaW1hdGlvbnN0YXJ0XCIpLGNmPVplKFwidHJhbnNpdGlvbmVuZFwiKSxkZj1uZXcgTWFwLGVmPVwiYWJvcnQgYXV4Q2xpY2sgY2FuY2VsIGNhblBsYXkgY2FuUGxheVRocm91Z2ggY2xpY2sgY2xvc2UgY29udGV4dE1lbnUgY29weSBjdXQgZHJhZyBkcmFnRW5kIGRyYWdFbnRlciBkcmFnRXhpdCBkcmFnTGVhdmUgZHJhZ092ZXIgZHJhZ1N0YXJ0IGRyb3AgZHVyYXRpb25DaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgZ290UG9pbnRlckNhcHR1cmUgaW5wdXQgaW52YWxpZCBrZXlEb3duIGtleVByZXNzIGtleVVwIGxvYWQgbG9hZGVkRGF0YSBsb2FkZWRNZXRhZGF0YSBsb2FkU3RhcnQgbG9zdFBvaW50ZXJDYXB0dXJlIG1vdXNlRG93biBtb3VzZU1vdmUgbW91c2VPdXQgbW91c2VPdmVyIG1vdXNlVXAgcGFzdGUgcGF1c2UgcGxheSBwbGF5aW5nIHBvaW50ZXJDYW5jZWwgcG9pbnRlckRvd24gcG9pbnRlck1vdmUgcG9pbnRlck91dCBwb2ludGVyT3ZlciBwb2ludGVyVXAgcHJvZ3Jlc3MgcmF0ZUNoYW5nZSByZXNldCByZXNpemUgc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdWJtaXQgc3VzcGVuZCB0aW1lVXBkYXRlIHRvdWNoQ2FuY2VsIHRvdWNoRW5kIHRvdWNoU3RhcnQgdm9sdW1lQ2hhbmdlIHNjcm9sbCB0b2dnbGUgdG91Y2hNb3ZlIHdhaXRpbmcgd2hlZWxcIi5zcGxpdChcIiBcIik7XG5mdW5jdGlvbiBmZihhLGIpe2RmLnNldChhLGIpO2ZhKGIsW2FdKX1mb3IodmFyIGdmPTA7Z2Y8ZWYubGVuZ3RoO2dmKyspe3ZhciBoZj1lZltnZl0samY9aGYudG9Mb3dlckNhc2UoKSxrZj1oZlswXS50b1VwcGVyQ2FzZSgpK2hmLnNsaWNlKDEpO2ZmKGpmLFwib25cIitrZil9ZmYoJGUsXCJvbkFuaW1hdGlvbkVuZFwiKTtmZihhZixcIm9uQW5pbWF0aW9uSXRlcmF0aW9uXCIpO2ZmKGJmLFwib25BbmltYXRpb25TdGFydFwiKTtmZihcImRibGNsaWNrXCIsXCJvbkRvdWJsZUNsaWNrXCIpO2ZmKFwiZm9jdXNpblwiLFwib25Gb2N1c1wiKTtmZihcImZvY3Vzb3V0XCIsXCJvbkJsdXJcIik7ZmYoY2YsXCJvblRyYW5zaXRpb25FbmRcIik7aGEoXCJvbk1vdXNlRW50ZXJcIixbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdKTtoYShcIm9uTW91c2VMZWF2ZVwiLFtcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl0pO2hhKFwib25Qb2ludGVyRW50ZXJcIixbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXSk7XG5oYShcIm9uUG9pbnRlckxlYXZlXCIsW1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl0pO2ZhKFwib25DaGFuZ2VcIixcImNoYW5nZSBjbGljayBmb2N1c2luIGZvY3Vzb3V0IGlucHV0IGtleWRvd24ga2V5dXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpKTtmYShcIm9uU2VsZWN0XCIsXCJmb2N1c291dCBjb250ZXh0bWVudSBkcmFnZW5kIGZvY3VzaW4ga2V5ZG93biBrZXl1cCBtb3VzZWRvd24gbW91c2V1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIikpO2ZhKFwib25CZWZvcmVJbnB1dFwiLFtcImNvbXBvc2l0aW9uZW5kXCIsXCJrZXlwcmVzc1wiLFwidGV4dElucHV0XCIsXCJwYXN0ZVwiXSk7ZmEoXCJvbkNvbXBvc2l0aW9uRW5kXCIsXCJjb21wb3NpdGlvbmVuZCBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7ZmEoXCJvbkNvbXBvc2l0aW9uU3RhcnRcIixcImNvbXBvc2l0aW9uc3RhcnQgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO1xuZmEoXCJvbkNvbXBvc2l0aW9uVXBkYXRlXCIsXCJjb21wb3NpdGlvbnVwZGF0ZSBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7dmFyIGxmPVwiYWJvcnQgY2FucGxheSBjYW5wbGF5dGhyb3VnaCBkdXJhdGlvbmNoYW5nZSBlbXB0aWVkIGVuY3J5cHRlZCBlbmRlZCBlcnJvciBsb2FkZWRkYXRhIGxvYWRlZG1ldGFkYXRhIGxvYWRzdGFydCBwYXVzZSBwbGF5IHBsYXlpbmcgcHJvZ3Jlc3MgcmF0ZWNoYW5nZSByZXNpemUgc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdXNwZW5kIHRpbWV1cGRhdGUgdm9sdW1lY2hhbmdlIHdhaXRpbmdcIi5zcGxpdChcIiBcIiksbWY9bmV3IFNldChcImNhbmNlbCBjbG9zZSBpbnZhbGlkIGxvYWQgc2Nyb2xsIHRvZ2dsZVwiLnNwbGl0KFwiIFwiKS5jb25jYXQobGYpKTtcbmZ1bmN0aW9uIG5mKGEsYixjKXt2YXIgZD1hLnR5cGV8fFwidW5rbm93bi1ldmVudFwiO2EuY3VycmVudFRhcmdldD1jO1ViKGQsYix2b2lkIDAsYSk7YS5jdXJyZW50VGFyZ2V0PW51bGx9XG5mdW5jdGlvbiBzZShhLGIpe2I9MCE9PShiJjQpO2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7YysrKXt2YXIgZD1hW2NdLGU9ZC5ldmVudDtkPWQubGlzdGVuZXJzO2E6e3ZhciBmPXZvaWQgMDtpZihiKWZvcih2YXIgZz1kLmxlbmd0aC0xOzA8PWc7Zy0tKXt2YXIgaD1kW2ddLGs9aC5pbnN0YW5jZSxsPWguY3VycmVudFRhcmdldDtoPWgubGlzdGVuZXI7aWYoayE9PWYmJmUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlicmVhayBhO25mKGUsaCxsKTtmPWt9ZWxzZSBmb3IoZz0wO2c8ZC5sZW5ndGg7ZysrKXtoPWRbZ107az1oLmluc3RhbmNlO2w9aC5jdXJyZW50VGFyZ2V0O2g9aC5saXN0ZW5lcjtpZihrIT09ZiYmZS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKWJyZWFrIGE7bmYoZSxoLGwpO2Y9a319fWlmKFFiKXRocm93IGE9UmIsUWI9ITEsUmI9bnVsbCxhO31cbmZ1bmN0aW9uIEQoYSxiKXt2YXIgYz1iW29mXTt2b2lkIDA9PT1jJiYoYz1iW29mXT1uZXcgU2V0KTt2YXIgZD1hK1wiX19idWJibGVcIjtjLmhhcyhkKXx8KHBmKGIsYSwyLCExKSxjLmFkZChkKSl9ZnVuY3Rpb24gcWYoYSxiLGMpe3ZhciBkPTA7YiYmKGR8PTQpO3BmKGMsYSxkLGIpfXZhciByZj1cIl9yZWFjdExpc3RlbmluZ1wiK01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpO2Z1bmN0aW9uIHNmKGEpe2lmKCFhW3JmXSl7YVtyZl09ITA7ZGEuZm9yRWFjaChmdW5jdGlvbihiKXtcInNlbGVjdGlvbmNoYW5nZVwiIT09YiYmKG1mLmhhcyhiKXx8cWYoYiwhMSxhKSxxZihiLCEwLGEpKX0pO3ZhciBiPTk9PT1hLm5vZGVUeXBlP2E6YS5vd25lckRvY3VtZW50O251bGw9PT1ifHxiW3JmXXx8KGJbcmZdPSEwLHFmKFwic2VsZWN0aW9uY2hhbmdlXCIsITEsYikpfX1cbmZ1bmN0aW9uIHBmKGEsYixjLGQpe3N3aXRjaChqZChiKSl7Y2FzZSAxOnZhciBlPWVkO2JyZWFrO2Nhc2UgNDplPWdkO2JyZWFrO2RlZmF1bHQ6ZT1mZH1jPWUuYmluZChudWxsLGIsYyxhKTtlPXZvaWQgMDshTGJ8fFwidG91Y2hzdGFydFwiIT09YiYmXCJ0b3VjaG1vdmVcIiE9PWImJlwid2hlZWxcIiE9PWJ8fChlPSEwKTtkP3ZvaWQgMCE9PWU/YS5hZGRFdmVudExpc3RlbmVyKGIsYyx7Y2FwdHVyZTohMCxwYXNzaXZlOmV9KTphLmFkZEV2ZW50TGlzdGVuZXIoYixjLCEwKTp2b2lkIDAhPT1lP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGMse3Bhc3NpdmU6ZX0pOmEuYWRkRXZlbnRMaXN0ZW5lcihiLGMsITEpfVxuZnVuY3Rpb24gaGQoYSxiLGMsZCxlKXt2YXIgZj1kO2lmKDA9PT0oYiYxKSYmMD09PShiJjIpJiZudWxsIT09ZClhOmZvcig7Oyl7aWYobnVsbD09PWQpcmV0dXJuO3ZhciBnPWQudGFnO2lmKDM9PT1nfHw0PT09Zyl7dmFyIGg9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztpZihoPT09ZXx8OD09PWgubm9kZVR5cGUmJmgucGFyZW50Tm9kZT09PWUpYnJlYWs7aWYoND09PWcpZm9yKGc9ZC5yZXR1cm47bnVsbCE9PWc7KXt2YXIgaz1nLnRhZztpZigzPT09a3x8ND09PWspaWYoaz1nLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLGs9PT1lfHw4PT09ay5ub2RlVHlwZSYmay5wYXJlbnROb2RlPT09ZSlyZXR1cm47Zz1nLnJldHVybn1mb3IoO251bGwhPT1oOyl7Zz1XYyhoKTtpZihudWxsPT09ZylyZXR1cm47az1nLnRhZztpZig1PT09a3x8Nj09PWspe2Q9Zj1nO2NvbnRpbnVlIGF9aD1oLnBhcmVudE5vZGV9fWQ9ZC5yZXR1cm59SmIoZnVuY3Rpb24oKXt2YXIgZD1mLGU9eGIoYyksZz1bXTtcbmE6e3ZhciBoPWRmLmdldChhKTtpZih2b2lkIDAhPT1oKXt2YXIgaz10ZCxuPWE7c3dpdGNoKGEpe2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDA9PT1vZChjKSlicmVhayBhO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6az1SZDticmVhaztjYXNlIFwiZm9jdXNpblwiOm49XCJmb2N1c1wiO2s9RmQ7YnJlYWs7Y2FzZSBcImZvY3Vzb3V0XCI6bj1cImJsdXJcIjtrPUZkO2JyZWFrO2Nhc2UgXCJiZWZvcmVibHVyXCI6Y2FzZSBcImFmdGVyYmx1clwiOms9RmQ7YnJlYWs7Y2FzZSBcImNsaWNrXCI6aWYoMj09PWMuYnV0dG9uKWJyZWFrIGE7Y2FzZSBcImF1eGNsaWNrXCI6Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwiY29udGV4dG1lbnVcIjprPUJkO2JyZWFrO2Nhc2UgXCJkcmFnXCI6Y2FzZSBcImRyYWdlbmRcIjpjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdleGl0XCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmNhc2UgXCJkcmFnb3ZlclwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOms9XG5EZDticmVhaztjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjprPVZkO2JyZWFrO2Nhc2UgJGU6Y2FzZSBhZjpjYXNlIGJmOms9SGQ7YnJlYWs7Y2FzZSBjZjprPVhkO2JyZWFrO2Nhc2UgXCJzY3JvbGxcIjprPXZkO2JyZWFrO2Nhc2UgXCJ3aGVlbFwiOms9WmQ7YnJlYWs7Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcInBhc3RlXCI6az1KZDticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVydXBcIjprPVRkfXZhciB0PTAhPT0oYiY0KSxKPSF0JiZcInNjcm9sbFwiPT09YSx4PXQ/bnVsbCE9PWg/aCtcIkNhcHR1cmVcIjpudWxsOmg7dD1bXTtmb3IodmFyIHc9ZCx1O251bGwhPT1cbnc7KXt1PXc7dmFyIEY9dS5zdGF0ZU5vZGU7NT09PXUudGFnJiZudWxsIT09RiYmKHU9RixudWxsIT09eCYmKEY9S2Iodyx4KSxudWxsIT1GJiZ0LnB1c2godGYodyxGLHUpKSkpO2lmKEopYnJlYWs7dz13LnJldHVybn0wPHQubGVuZ3RoJiYoaD1uZXcgayhoLG4sbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6aCxsaXN0ZW5lcnM6dH0pKX19aWYoMD09PShiJjcpKXthOntoPVwibW91c2VvdmVyXCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hO2s9XCJtb3VzZW91dFwiPT09YXx8XCJwb2ludGVyb3V0XCI9PT1hO2lmKGgmJmMhPT13YiYmKG49Yy5yZWxhdGVkVGFyZ2V0fHxjLmZyb21FbGVtZW50KSYmKFdjKG4pfHxuW3VmXSkpYnJlYWsgYTtpZihrfHxoKXtoPWUud2luZG93PT09ZT9lOihoPWUub3duZXJEb2N1bWVudCk/aC5kZWZhdWx0Vmlld3x8aC5wYXJlbnRXaW5kb3c6d2luZG93O2lmKGspe2lmKG49Yy5yZWxhdGVkVGFyZ2V0fHxjLnRvRWxlbWVudCxrPWQsbj1uP1djKG4pOm51bGwsbnVsbCE9PVxubiYmKEo9VmIobiksbiE9PUp8fDUhPT1uLnRhZyYmNiE9PW4udGFnKSluPW51bGx9ZWxzZSBrPW51bGwsbj1kO2lmKGshPT1uKXt0PUJkO0Y9XCJvbk1vdXNlTGVhdmVcIjt4PVwib25Nb3VzZUVudGVyXCI7dz1cIm1vdXNlXCI7aWYoXCJwb2ludGVyb3V0XCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hKXQ9VGQsRj1cIm9uUG9pbnRlckxlYXZlXCIseD1cIm9uUG9pbnRlckVudGVyXCIsdz1cInBvaW50ZXJcIjtKPW51bGw9PWs/aDp1ZShrKTt1PW51bGw9PW4/aDp1ZShuKTtoPW5ldyB0KEYsdytcImxlYXZlXCIsayxjLGUpO2gudGFyZ2V0PUo7aC5yZWxhdGVkVGFyZ2V0PXU7Rj1udWxsO1djKGUpPT09ZCYmKHQ9bmV3IHQoeCx3K1wiZW50ZXJcIixuLGMsZSksdC50YXJnZXQ9dSx0LnJlbGF0ZWRUYXJnZXQ9SixGPXQpO0o9RjtpZihrJiZuKWI6e3Q9azt4PW47dz0wO2Zvcih1PXQ7dTt1PXZmKHUpKXcrKzt1PTA7Zm9yKEY9eDtGO0Y9dmYoRikpdSsrO2Zvcig7MDx3LXU7KXQ9dmYodCksdy0tO2Zvcig7MDx1LXc7KXg9XG52Zih4KSx1LS07Zm9yKDt3LS07KXtpZih0PT09eHx8bnVsbCE9PXgmJnQ9PT14LmFsdGVybmF0ZSlicmVhayBiO3Q9dmYodCk7eD12Zih4KX10PW51bGx9ZWxzZSB0PW51bGw7bnVsbCE9PWsmJndmKGcsaCxrLHQsITEpO251bGwhPT1uJiZudWxsIT09SiYmd2YoZyxKLG4sdCwhMCl9fX1hOntoPWQ/dWUoZCk6d2luZG93O2s9aC5ub2RlTmFtZSYmaC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO2lmKFwic2VsZWN0XCI9PT1rfHxcImlucHV0XCI9PT1rJiZcImZpbGVcIj09PWgudHlwZSl2YXIgbmE9dmU7ZWxzZSBpZihtZShoKSlpZih3ZSluYT1GZTtlbHNle25hPURlO3ZhciB4YT1DZX1lbHNlKGs9aC5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWsudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWgudHlwZXx8XCJyYWRpb1wiPT09aC50eXBlKSYmKG5hPUVlKTtpZihuYSYmKG5hPW5hKGEsZCkpKXtuZShnLG5hLGMsZSk7YnJlYWsgYX14YSYmeGEoYSxoLGQpO1wiZm9jdXNvdXRcIj09PWEmJih4YT1oLl93cmFwcGVyU3RhdGUpJiZcbnhhLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1oLnR5cGUmJmNiKGgsXCJudW1iZXJcIixoLnZhbHVlKX14YT1kP3VlKGQpOndpbmRvdztzd2l0Y2goYSl7Y2FzZSBcImZvY3VzaW5cIjppZihtZSh4YSl8fFwidHJ1ZVwiPT09eGEuY29udGVudEVkaXRhYmxlKVFlPXhhLFJlPWQsU2U9bnVsbDticmVhaztjYXNlIFwiZm9jdXNvdXRcIjpTZT1SZT1RZT1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZWRvd25cIjpUZT0hMDticmVhaztjYXNlIFwiY29udGV4dG1lbnVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJkcmFnZW5kXCI6VGU9ITE7VWUoZyxjLGUpO2JyZWFrO2Nhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjppZihQZSlicmVhaztjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOlVlKGcsYyxlKX12YXIgJGE7aWYoYWUpYjp7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbnN0YXJ0XCI6dmFyIGJhPVwib25Db21wb3NpdGlvblN0YXJ0XCI7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpiYT1cIm9uQ29tcG9zaXRpb25FbmRcIjtcbmJyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6YmE9XCJvbkNvbXBvc2l0aW9uVXBkYXRlXCI7YnJlYWsgYn1iYT12b2lkIDB9ZWxzZSBpZT9nZShhLGMpJiYoYmE9XCJvbkNvbXBvc2l0aW9uRW5kXCIpOlwia2V5ZG93blwiPT09YSYmMjI5PT09Yy5rZXlDb2RlJiYoYmE9XCJvbkNvbXBvc2l0aW9uU3RhcnRcIik7YmEmJihkZSYmXCJrb1wiIT09Yy5sb2NhbGUmJihpZXx8XCJvbkNvbXBvc2l0aW9uU3RhcnRcIiE9PWJhP1wib25Db21wb3NpdGlvbkVuZFwiPT09YmEmJmllJiYoJGE9bmQoKSk6KGtkPWUsbGQ9XCJ2YWx1ZVwiaW4ga2Q/a2QudmFsdWU6a2QudGV4dENvbnRlbnQsaWU9ITApKSx4YT1vZShkLGJhKSwwPHhhLmxlbmd0aCYmKGJhPW5ldyBMZChiYSxhLG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OmJhLGxpc3RlbmVyczp4YX0pLCRhP2JhLmRhdGE9JGE6KCRhPWhlKGMpLG51bGwhPT0kYSYmKGJhLmRhdGE9JGEpKSkpO2lmKCRhPWNlP2plKGEsYyk6a2UoYSxjKSlkPW9lKGQsXCJvbkJlZm9yZUlucHV0XCIpLFxuMDxkLmxlbmd0aCYmKGU9bmV3IExkKFwib25CZWZvcmVJbnB1dFwiLFwiYmVmb3JlaW5wdXRcIixudWxsLGMsZSksZy5wdXNoKHtldmVudDplLGxpc3RlbmVyczpkfSksZS5kYXRhPSRhKX1zZShnLGIpfSl9ZnVuY3Rpb24gdGYoYSxiLGMpe3JldHVybntpbnN0YW5jZTphLGxpc3RlbmVyOmIsY3VycmVudFRhcmdldDpjfX1mdW5jdGlvbiBvZShhLGIpe2Zvcih2YXIgYz1iK1wiQ2FwdHVyZVwiLGQ9W107bnVsbCE9PWE7KXt2YXIgZT1hLGY9ZS5zdGF0ZU5vZGU7NT09PWUudGFnJiZudWxsIT09ZiYmKGU9ZixmPUtiKGEsYyksbnVsbCE9ZiYmZC51bnNoaWZ0KHRmKGEsZixlKSksZj1LYihhLGIpLG51bGwhPWYmJmQucHVzaCh0ZihhLGYsZSkpKTthPWEucmV0dXJufXJldHVybiBkfWZ1bmN0aW9uIHZmKGEpe2lmKG51bGw9PT1hKXJldHVybiBudWxsO2RvIGE9YS5yZXR1cm47d2hpbGUoYSYmNSE9PWEudGFnKTtyZXR1cm4gYT9hOm51bGx9XG5mdW5jdGlvbiB3ZihhLGIsYyxkLGUpe2Zvcih2YXIgZj1iLl9yZWFjdE5hbWUsZz1bXTtudWxsIT09YyYmYyE9PWQ7KXt2YXIgaD1jLGs9aC5hbHRlcm5hdGUsbD1oLnN0YXRlTm9kZTtpZihudWxsIT09ayYmaz09PWQpYnJlYWs7NT09PWgudGFnJiZudWxsIT09bCYmKGg9bCxlPyhrPUtiKGMsZiksbnVsbCE9ayYmZy51bnNoaWZ0KHRmKGMsayxoKSkpOmV8fChrPUtiKGMsZiksbnVsbCE9ayYmZy5wdXNoKHRmKGMsayxoKSkpKTtjPWMucmV0dXJufTAhPT1nLmxlbmd0aCYmYS5wdXNoKHtldmVudDpiLGxpc3RlbmVyczpnfSl9dmFyIHhmPS9cXHJcXG4/L2cseWY9L1xcdTAwMDB8XFx1RkZGRC9nO2Z1bmN0aW9uIHpmKGEpe3JldHVybihcInN0cmluZ1wiPT09dHlwZW9mIGE/YTpcIlwiK2EpLnJlcGxhY2UoeGYsXCJcXG5cIikucmVwbGFjZSh5ZixcIlwiKX1mdW5jdGlvbiBBZihhLGIsYyl7Yj16ZihiKTtpZih6ZihhKSE9PWImJmMpdGhyb3cgRXJyb3IocCg0MjUpKTt9ZnVuY3Rpb24gQmYoKXt9XG52YXIgQ2Y9bnVsbCxEZj1udWxsO2Z1bmN0aW9uIEVmKGEsYil7cmV0dXJuXCJ0ZXh0YXJlYVwiPT09YXx8XCJub3NjcmlwdFwiPT09YXx8XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm51bWJlclwiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9PWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sfVxudmFyIEZmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6dm9pZCAwLEdmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0OnZvaWQgMCxIZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgUHJvbWlzZT9Qcm9taXNlOnZvaWQgMCxKZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgcXVldWVNaWNyb3Rhc2s/cXVldWVNaWNyb3Rhc2s6XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBIZj9mdW5jdGlvbihhKXtyZXR1cm4gSGYucmVzb2x2ZShudWxsKS50aGVuKGEpLmNhdGNoKElmKX06RmY7ZnVuY3Rpb24gSWYoYSl7c2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGE7fSl9XG5mdW5jdGlvbiBLZihhLGIpe3ZhciBjPWIsZD0wO2Rve3ZhciBlPWMubmV4dFNpYmxpbmc7YS5yZW1vdmVDaGlsZChjKTtpZihlJiY4PT09ZS5ub2RlVHlwZSlpZihjPWUuZGF0YSxcIi8kXCI9PT1jKXtpZigwPT09ZCl7YS5yZW1vdmVDaGlsZChlKTtiZChiKTtyZXR1cm59ZC0tfWVsc2VcIiRcIiE9PWMmJlwiJD9cIiE9PWMmJlwiJCFcIiE9PWN8fGQrKztjPWV9d2hpbGUoYyk7YmQoYil9ZnVuY3Rpb24gTGYoYSl7Zm9yKDtudWxsIT1hO2E9YS5uZXh0U2libGluZyl7dmFyIGI9YS5ub2RlVHlwZTtpZigxPT09Ynx8Mz09PWIpYnJlYWs7aWYoOD09PWIpe2I9YS5kYXRhO2lmKFwiJFwiPT09Ynx8XCIkIVwiPT09Ynx8XCIkP1wiPT09YilicmVhaztpZihcIi8kXCI9PT1iKXJldHVybiBudWxsfX1yZXR1cm4gYX1cbmZ1bmN0aW9uIE1mKGEpe2E9YS5wcmV2aW91c1NpYmxpbmc7Zm9yKHZhciBiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoXCIkXCI9PT1jfHxcIiQhXCI9PT1jfHxcIiQ/XCI9PT1jKXtpZigwPT09YilyZXR1cm4gYTtiLS19ZWxzZVwiLyRcIj09PWMmJmIrK31hPWEucHJldmlvdXNTaWJsaW5nfXJldHVybiBudWxsfXZhciBOZj1NYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKSxPZj1cIl9fcmVhY3RGaWJlciRcIitOZixQZj1cIl9fcmVhY3RQcm9wcyRcIitOZix1Zj1cIl9fcmVhY3RDb250YWluZXIkXCIrTmYsb2Y9XCJfX3JlYWN0RXZlbnRzJFwiK05mLFFmPVwiX19yZWFjdExpc3RlbmVycyRcIitOZixSZj1cIl9fcmVhY3RIYW5kbGVzJFwiK05mO1xuZnVuY3Rpb24gV2MoYSl7dmFyIGI9YVtPZl07aWYoYilyZXR1cm4gYjtmb3IodmFyIGM9YS5wYXJlbnROb2RlO2M7KXtpZihiPWNbdWZdfHxjW09mXSl7Yz1iLmFsdGVybmF0ZTtpZihudWxsIT09Yi5jaGlsZHx8bnVsbCE9PWMmJm51bGwhPT1jLmNoaWxkKWZvcihhPU1mKGEpO251bGwhPT1hOyl7aWYoYz1hW09mXSlyZXR1cm4gYzthPU1mKGEpfXJldHVybiBifWE9YztjPWEucGFyZW50Tm9kZX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBDYihhKXthPWFbT2ZdfHxhW3VmXTtyZXR1cm4hYXx8NSE9PWEudGFnJiY2IT09YS50YWcmJjEzIT09YS50YWcmJjMhPT1hLnRhZz9udWxsOmF9ZnVuY3Rpb24gdWUoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGEuc3RhdGVOb2RlO3Rocm93IEVycm9yKHAoMzMpKTt9ZnVuY3Rpb24gRGIoYSl7cmV0dXJuIGFbUGZdfHxudWxsfXZhciBTZj1bXSxUZj0tMTtmdW5jdGlvbiBVZihhKXtyZXR1cm57Y3VycmVudDphfX1cbmZ1bmN0aW9uIEUoYSl7MD5UZnx8KGEuY3VycmVudD1TZltUZl0sU2ZbVGZdPW51bGwsVGYtLSl9ZnVuY3Rpb24gRyhhLGIpe1RmKys7U2ZbVGZdPWEuY3VycmVudDthLmN1cnJlbnQ9Yn12YXIgVmY9e30sSD1VZihWZiksV2Y9VWYoITEpLFhmPVZmO2Z1bmN0aW9uIFlmKGEsYil7dmFyIGM9YS50eXBlLmNvbnRleHRUeXBlcztpZighYylyZXR1cm4gVmY7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoZCYmZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PT09YilyZXR1cm4gZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDt2YXIgZT17fSxmO2ZvcihmIGluIGMpZVtmXT1iW2ZdO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1iLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9ZSk7cmV0dXJuIGV9XG5mdW5jdGlvbiBaZihhKXthPWEuY2hpbGRDb250ZXh0VHlwZXM7cmV0dXJuIG51bGwhPT1hJiZ2b2lkIDAhPT1hfWZ1bmN0aW9uICRmKCl7RShXZik7RShIKX1mdW5jdGlvbiBhZyhhLGIsYyl7aWYoSC5jdXJyZW50IT09VmYpdGhyb3cgRXJyb3IocCgxNjgpKTtHKEgsYik7RyhXZixjKX1mdW5jdGlvbiBiZyhhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7Yj1iLmNoaWxkQ29udGV4dFR5cGVzO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmdldENoaWxkQ29udGV4dClyZXR1cm4gYztkPWQuZ2V0Q2hpbGRDb250ZXh0KCk7Zm9yKHZhciBlIGluIGQpaWYoIShlIGluIGIpKXRocm93IEVycm9yKHAoMTA4LFJhKGEpfHxcIlVua25vd25cIixlKSk7cmV0dXJuIEEoe30sYyxkKX1cbmZ1bmN0aW9uIGNnKGEpe2E9KGE9YS5zdGF0ZU5vZGUpJiZhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0fHxWZjtYZj1ILmN1cnJlbnQ7RyhILGEpO0coV2YsV2YuY3VycmVudCk7cmV0dXJuITB9ZnVuY3Rpb24gZGcoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2lmKCFkKXRocm93IEVycm9yKHAoMTY5KSk7Yz8oYT1iZyhhLGIsWGYpLGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9YSxFKFdmKSxFKEgpLEcoSCxhKSk6RShXZik7RyhXZixjKX12YXIgZWc9bnVsbCxmZz0hMSxnZz0hMTtmdW5jdGlvbiBoZyhhKXtudWxsPT09ZWc/ZWc9W2FdOmVnLnB1c2goYSl9ZnVuY3Rpb24gaWcoYSl7Zmc9ITA7aGcoYSl9XG5mdW5jdGlvbiBqZygpe2lmKCFnZyYmbnVsbCE9PWVnKXtnZz0hMDt2YXIgYT0wLGI9Qzt0cnl7dmFyIGM9ZWc7Zm9yKEM9MTthPGMubGVuZ3RoO2ErKyl7dmFyIGQ9Y1thXTtkbyBkPWQoITApO3doaWxlKG51bGwhPT1kKX1lZz1udWxsO2ZnPSExfWNhdGNoKGUpe3Rocm93IG51bGwhPT1lZyYmKGVnPWVnLnNsaWNlKGErMSkpLGFjKGZjLGpnKSxlO31maW5hbGx5e0M9YixnZz0hMX19cmV0dXJuIG51bGx9dmFyIGtnPVtdLGxnPTAsbWc9bnVsbCxuZz0wLG9nPVtdLHBnPTAscWc9bnVsbCxyZz0xLHNnPVwiXCI7ZnVuY3Rpb24gdGcoYSxiKXtrZ1tsZysrXT1uZztrZ1tsZysrXT1tZzttZz1hO25nPWJ9XG5mdW5jdGlvbiB1ZyhhLGIsYyl7b2dbcGcrK109cmc7b2dbcGcrK109c2c7b2dbcGcrK109cWc7cWc9YTt2YXIgZD1yZzthPXNnO3ZhciBlPTMyLW9jKGQpLTE7ZCY9figxPDxlKTtjKz0xO3ZhciBmPTMyLW9jKGIpK2U7aWYoMzA8Zil7dmFyIGc9ZS1lJTU7Zj0oZCYoMTw8ZyktMSkudG9TdHJpbmcoMzIpO2Q+Pj1nO2UtPWc7cmc9MTw8MzItb2MoYikrZXxjPDxlfGQ7c2c9ZithfWVsc2Ugcmc9MTw8ZnxjPDxlfGQsc2c9YX1mdW5jdGlvbiB2ZyhhKXtudWxsIT09YS5yZXR1cm4mJih0ZyhhLDEpLHVnKGEsMSwwKSl9ZnVuY3Rpb24gd2coYSl7Zm9yKDthPT09bWc7KW1nPWtnWy0tbGddLGtnW2xnXT1udWxsLG5nPWtnWy0tbGddLGtnW2xnXT1udWxsO2Zvcig7YT09PXFnOylxZz1vZ1stLXBnXSxvZ1twZ109bnVsbCxzZz1vZ1stLXBnXSxvZ1twZ109bnVsbCxyZz1vZ1stLXBnXSxvZ1twZ109bnVsbH12YXIgeGc9bnVsbCx5Zz1udWxsLEk9ITEsemc9bnVsbDtcbmZ1bmN0aW9uIEFnKGEsYil7dmFyIGM9QmcoNSxudWxsLG51bGwsMCk7Yy5lbGVtZW50VHlwZT1cIkRFTEVURURcIjtjLnN0YXRlTm9kZT1iO2MucmV0dXJuPWE7Yj1hLmRlbGV0aW9ucztudWxsPT09Yj8oYS5kZWxldGlvbnM9W2NdLGEuZmxhZ3N8PTE2KTpiLnB1c2goYyl9XG5mdW5jdGlvbiBDZyhhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnZhciBjPWEudHlwZTtiPTEhPT1iLm5vZGVUeXBlfHxjLnRvTG93ZXJDYXNlKCkhPT1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/bnVsbDpiO3JldHVybiBudWxsIT09Yj8oYS5zdGF0ZU5vZGU9Yix4Zz1hLHlnPUxmKGIuZmlyc3RDaGlsZCksITApOiExO2Nhc2UgNjpyZXR1cm4gYj1cIlwiPT09YS5wZW5kaW5nUHJvcHN8fDMhPT1iLm5vZGVUeXBlP251bGw6YixudWxsIT09Yj8oYS5zdGF0ZU5vZGU9Yix4Zz1hLHlnPW51bGwsITApOiExO2Nhc2UgMTM6cmV0dXJuIGI9OCE9PWIubm9kZVR5cGU/bnVsbDpiLG51bGwhPT1iPyhjPW51bGwhPT1xZz97aWQ6cmcsb3ZlcmZsb3c6c2d9Om51bGwsYS5tZW1vaXplZFN0YXRlPXtkZWh5ZHJhdGVkOmIsdHJlZUNvbnRleHQ6YyxyZXRyeUxhbmU6MTA3Mzc0MTgyNH0sYz1CZygxOCxudWxsLG51bGwsMCksYy5zdGF0ZU5vZGU9YixjLnJldHVybj1hLGEuY2hpbGQ9Yyx4Zz1hLHlnPVxubnVsbCwhMCk6ITE7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gRGcoYSl7cmV0dXJuIDAhPT0oYS5tb2RlJjEpJiYwPT09KGEuZmxhZ3MmMTI4KX1mdW5jdGlvbiBFZyhhKXtpZihJKXt2YXIgYj15ZztpZihiKXt2YXIgYz1iO2lmKCFDZyhhLGIpKXtpZihEZyhhKSl0aHJvdyBFcnJvcihwKDQxOCkpO2I9TGYoYy5uZXh0U2libGluZyk7dmFyIGQ9eGc7YiYmQ2coYSxiKT9BZyhkLGMpOihhLmZsYWdzPWEuZmxhZ3MmLTQwOTd8MixJPSExLHhnPWEpfX1lbHNle2lmKERnKGEpKXRocm93IEVycm9yKHAoNDE4KSk7YS5mbGFncz1hLmZsYWdzJi00MDk3fDI7ST0hMTt4Zz1hfX19ZnVuY3Rpb24gRmcoYSl7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWEmJjUhPT1hLnRhZyYmMyE9PWEudGFnJiYxMyE9PWEudGFnOylhPWEucmV0dXJuO3hnPWF9XG5mdW5jdGlvbiBHZyhhKXtpZihhIT09eGcpcmV0dXJuITE7aWYoIUkpcmV0dXJuIEZnKGEpLEk9ITAsITE7dmFyIGI7KGI9MyE9PWEudGFnKSYmIShiPTUhPT1hLnRhZykmJihiPWEudHlwZSxiPVwiaGVhZFwiIT09YiYmXCJib2R5XCIhPT1iJiYhRWYoYS50eXBlLGEubWVtb2l6ZWRQcm9wcykpO2lmKGImJihiPXlnKSl7aWYoRGcoYSkpdGhyb3cgSGcoKSxFcnJvcihwKDQxOCkpO2Zvcig7YjspQWcoYSxiKSxiPUxmKGIubmV4dFNpYmxpbmcpfUZnKGEpO2lmKDEzPT09YS50YWcpe2E9YS5tZW1vaXplZFN0YXRlO2E9bnVsbCE9PWE/YS5kZWh5ZHJhdGVkOm51bGw7aWYoIWEpdGhyb3cgRXJyb3IocCgzMTcpKTthOnthPWEubmV4dFNpYmxpbmc7Zm9yKGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihcIi8kXCI9PT1jKXtpZigwPT09Yil7eWc9TGYoYS5uZXh0U2libGluZyk7YnJlYWsgYX1iLS19ZWxzZVwiJFwiIT09YyYmXCIkIVwiIT09YyYmXCIkP1wiIT09Y3x8YisrfWE9YS5uZXh0U2libGluZ315Zz1cbm51bGx9fWVsc2UgeWc9eGc/TGYoYS5zdGF0ZU5vZGUubmV4dFNpYmxpbmcpOm51bGw7cmV0dXJuITB9ZnVuY3Rpb24gSGcoKXtmb3IodmFyIGE9eWc7YTspYT1MZihhLm5leHRTaWJsaW5nKX1mdW5jdGlvbiBJZygpe3lnPXhnPW51bGw7ST0hMX1mdW5jdGlvbiBKZyhhKXtudWxsPT09emc/emc9W2FdOnpnLnB1c2goYSl9dmFyIEtnPXVhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnO1xuZnVuY3Rpb24gTGcoYSxiLGMpe2E9Yy5yZWY7aWYobnVsbCE9PWEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZcIm9iamVjdFwiIT09dHlwZW9mIGEpe2lmKGMuX293bmVyKXtjPWMuX293bmVyO2lmKGMpe2lmKDEhPT1jLnRhZyl0aHJvdyBFcnJvcihwKDMwOSkpO3ZhciBkPWMuc3RhdGVOb2RlfWlmKCFkKXRocm93IEVycm9yKHAoMTQ3LGEpKTt2YXIgZT1kLGY9XCJcIithO2lmKG51bGwhPT1iJiZudWxsIT09Yi5yZWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnJlZiYmYi5yZWYuX3N0cmluZ1JlZj09PWYpcmV0dXJuIGIucmVmO2I9ZnVuY3Rpb24oYSl7dmFyIGI9ZS5yZWZzO251bGw9PT1hP2RlbGV0ZSBiW2ZdOmJbZl09YX07Yi5fc3RyaW5nUmVmPWY7cmV0dXJuIGJ9aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBhKXRocm93IEVycm9yKHAoMjg0KSk7aWYoIWMuX293bmVyKXRocm93IEVycm9yKHAoMjkwLGEpKTt9cmV0dXJuIGF9XG5mdW5jdGlvbiBNZyhhLGIpe2E9T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpO3Rocm93IEVycm9yKHAoMzEsXCJbb2JqZWN0IE9iamVjdF1cIj09PWE/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhiKS5qb2luKFwiLCBcIikrXCJ9XCI6YSkpO31mdW5jdGlvbiBOZyhhKXt2YXIgYj1hLl9pbml0O3JldHVybiBiKGEuX3BheWxvYWQpfVxuZnVuY3Rpb24gT2coYSl7ZnVuY3Rpb24gYihiLGMpe2lmKGEpe3ZhciBkPWIuZGVsZXRpb25zO251bGw9PT1kPyhiLmRlbGV0aW9ucz1bY10sYi5mbGFnc3w9MTYpOmQucHVzaChjKX19ZnVuY3Rpb24gYyhjLGQpe2lmKCFhKXJldHVybiBudWxsO2Zvcig7bnVsbCE9PWQ7KWIoYyxkKSxkPWQuc2libGluZztyZXR1cm4gbnVsbH1mdW5jdGlvbiBkKGEsYil7Zm9yKGE9bmV3IE1hcDtudWxsIT09YjspbnVsbCE9PWIua2V5P2Euc2V0KGIua2V5LGIpOmEuc2V0KGIuaW5kZXgsYiksYj1iLnNpYmxpbmc7cmV0dXJuIGF9ZnVuY3Rpb24gZShhLGIpe2E9UGcoYSxiKTthLmluZGV4PTA7YS5zaWJsaW5nPW51bGw7cmV0dXJuIGF9ZnVuY3Rpb24gZihiLGMsZCl7Yi5pbmRleD1kO2lmKCFhKXJldHVybiBiLmZsYWdzfD0xMDQ4NTc2LGM7ZD1iLmFsdGVybmF0ZTtpZihudWxsIT09ZClyZXR1cm4gZD1kLmluZGV4LGQ8Yz8oYi5mbGFnc3w9MixjKTpkO2IuZmxhZ3N8PTI7cmV0dXJuIGN9ZnVuY3Rpb24gZyhiKXthJiZcbm51bGw9PT1iLmFsdGVybmF0ZSYmKGIuZmxhZ3N8PTIpO3JldHVybiBifWZ1bmN0aW9uIGgoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDYhPT1iLnRhZylyZXR1cm4gYj1RZyhjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBrKGEsYixjLGQpe3ZhciBmPWMudHlwZTtpZihmPT09eWEpcmV0dXJuIG0oYSxiLGMucHJvcHMuY2hpbGRyZW4sZCxjLmtleSk7aWYobnVsbCE9PWImJihiLmVsZW1lbnRUeXBlPT09Znx8XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZiYmZi4kJHR5cGVvZj09PUhhJiZOZyhmKT09PWIudHlwZSkpcmV0dXJuIGQ9ZShiLGMucHJvcHMpLGQucmVmPUxnKGEsYixjKSxkLnJldHVybj1hLGQ7ZD1SZyhjLnR5cGUsYy5rZXksYy5wcm9wcyxudWxsLGEubW9kZSxkKTtkLnJlZj1MZyhhLGIsYyk7ZC5yZXR1cm49YTtyZXR1cm4gZH1mdW5jdGlvbiBsKGEsYixjLGQpe2lmKG51bGw9PT1ifHw0IT09Yi50YWd8fFxuYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyE9PWMuY29udGFpbmVySW5mb3x8Yi5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24hPT1jLmltcGxlbWVudGF0aW9uKXJldHVybiBiPVNnKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjLmNoaWxkcmVufHxbXSk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBtKGEsYixjLGQsZil7aWYobnVsbD09PWJ8fDchPT1iLnRhZylyZXR1cm4gYj1UZyhjLGEubW9kZSxkLGYpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIHEoYSxiLGMpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYiYmXCJcIiE9PWJ8fFwibnVtYmVyXCI9PT10eXBlb2YgYilyZXR1cm4gYj1RZyhcIlwiK2IsYS5tb2RlLGMpLGIucmV0dXJuPWEsYjtpZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iKXtzd2l0Y2goYi4kJHR5cGVvZil7Y2FzZSB2YTpyZXR1cm4gYz1SZyhiLnR5cGUsYi5rZXksYi5wcm9wcyxudWxsLGEubW9kZSxjKSxcbmMucmVmPUxnKGEsbnVsbCxiKSxjLnJldHVybj1hLGM7Y2FzZSB3YTpyZXR1cm4gYj1TZyhiLGEubW9kZSxjKSxiLnJldHVybj1hLGI7Y2FzZSBIYTp2YXIgZD1iLl9pbml0O3JldHVybiBxKGEsZChiLl9wYXlsb2FkKSxjKX1pZihlYihiKXx8S2EoYikpcmV0dXJuIGI9VGcoYixhLm1vZGUsYyxudWxsKSxiLnJldHVybj1hLGI7TWcoYSxiKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiByKGEsYixjLGQpe3ZhciBlPW51bGwhPT1iP2Iua2V5Om51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBjJiZcIlwiIT09Y3x8XCJudW1iZXJcIj09PXR5cGVvZiBjKXJldHVybiBudWxsIT09ZT9udWxsOmgoYSxiLFwiXCIrYyxkKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXtzd2l0Y2goYy4kJHR5cGVvZil7Y2FzZSB2YTpyZXR1cm4gYy5rZXk9PT1lP2soYSxiLGMsZCk6bnVsbDtjYXNlIHdhOnJldHVybiBjLmtleT09PWU/bChhLGIsYyxkKTpudWxsO2Nhc2UgSGE6cmV0dXJuIGU9Yy5faW5pdCxyKGEsXG5iLGUoYy5fcGF5bG9hZCksZCl9aWYoZWIoYyl8fEthKGMpKXJldHVybiBudWxsIT09ZT9udWxsOm0oYSxiLGMsZCxudWxsKTtNZyhhLGMpfXJldHVybiBudWxsfWZ1bmN0aW9uIHkoYSxiLGMsZCxlKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGQmJlwiXCIhPT1kfHxcIm51bWJlclwiPT09dHlwZW9mIGQpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsaChiLGEsXCJcIitkLGUpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQpe3N3aXRjaChkLiQkdHlwZW9mKXtjYXNlIHZhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxrKGIsYSxkLGUpO2Nhc2Ugd2E6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGwoYixhLGQsZSk7Y2FzZSBIYTp2YXIgZj1kLl9pbml0O3JldHVybiB5KGEsYixjLGYoZC5fcGF5bG9hZCksZSl9aWYoZWIoZCl8fEthKGQpKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLG0oYixhLGQsZSxudWxsKTtNZyhiLGQpfXJldHVybiBudWxsfVxuZnVuY3Rpb24gbihlLGcsaCxrKXtmb3IodmFyIGw9bnVsbCxtPW51bGwsdT1nLHc9Zz0wLHg9bnVsbDtudWxsIT09dSYmdzxoLmxlbmd0aDt3Kyspe3UuaW5kZXg+dz8oeD11LHU9bnVsbCk6eD11LnNpYmxpbmc7dmFyIG49cihlLHUsaFt3XSxrKTtpZihudWxsPT09bil7bnVsbD09PXUmJih1PXgpO2JyZWFrfWEmJnUmJm51bGw9PT1uLmFsdGVybmF0ZSYmYihlLHUpO2c9ZihuLGcsdyk7bnVsbD09PW0/bD1uOm0uc2libGluZz1uO209bjt1PXh9aWYodz09PWgubGVuZ3RoKXJldHVybiBjKGUsdSksSSYmdGcoZSx3KSxsO2lmKG51bGw9PT11KXtmb3IoO3c8aC5sZW5ndGg7dysrKXU9cShlLGhbd10sayksbnVsbCE9PXUmJihnPWYodSxnLHcpLG51bGw9PT1tP2w9dTptLnNpYmxpbmc9dSxtPXUpO0kmJnRnKGUsdyk7cmV0dXJuIGx9Zm9yKHU9ZChlLHUpO3c8aC5sZW5ndGg7dysrKXg9eSh1LGUsdyxoW3ddLGspLG51bGwhPT14JiYoYSYmbnVsbCE9PXguYWx0ZXJuYXRlJiZ1LmRlbGV0ZShudWxsPT09XG54LmtleT93Ongua2V5KSxnPWYoeCxnLHcpLG51bGw9PT1tP2w9eDptLnNpYmxpbmc9eCxtPXgpO2EmJnUuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7SSYmdGcoZSx3KTtyZXR1cm4gbH1mdW5jdGlvbiB0KGUsZyxoLGspe3ZhciBsPUthKGgpO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBsKXRocm93IEVycm9yKHAoMTUwKSk7aD1sLmNhbGwoaCk7aWYobnVsbD09aCl0aHJvdyBFcnJvcihwKDE1MSkpO2Zvcih2YXIgdT1sPW51bGwsbT1nLHc9Zz0wLHg9bnVsbCxuPWgubmV4dCgpO251bGwhPT1tJiYhbi5kb25lO3crKyxuPWgubmV4dCgpKXttLmluZGV4Pnc/KHg9bSxtPW51bGwpOng9bS5zaWJsaW5nO3ZhciB0PXIoZSxtLG4udmFsdWUsayk7aWYobnVsbD09PXQpe251bGw9PT1tJiYobT14KTticmVha31hJiZtJiZudWxsPT09dC5hbHRlcm5hdGUmJmIoZSxtKTtnPWYodCxnLHcpO251bGw9PT11P2w9dDp1LnNpYmxpbmc9dDt1PXQ7bT14fWlmKG4uZG9uZSlyZXR1cm4gYyhlLFxubSksSSYmdGcoZSx3KSxsO2lmKG51bGw9PT1tKXtmb3IoOyFuLmRvbmU7dysrLG49aC5uZXh0KCkpbj1xKGUsbi52YWx1ZSxrKSxudWxsIT09biYmKGc9ZihuLGcsdyksbnVsbD09PXU/bD1uOnUuc2libGluZz1uLHU9bik7SSYmdGcoZSx3KTtyZXR1cm4gbH1mb3IobT1kKGUsbSk7IW4uZG9uZTt3Kyssbj1oLm5leHQoKSluPXkobSxlLHcsbi52YWx1ZSxrKSxudWxsIT09biYmKGEmJm51bGwhPT1uLmFsdGVybmF0ZSYmbS5kZWxldGUobnVsbD09PW4ua2V5P3c6bi5rZXkpLGc9ZihuLGcsdyksbnVsbD09PXU/bD1uOnUuc2libGluZz1uLHU9bik7YSYmbS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtJJiZ0ZyhlLHcpO3JldHVybiBsfWZ1bmN0aW9uIEooYSxkLGYsaCl7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZiYmZi50eXBlPT09eWEmJm51bGw9PT1mLmtleSYmKGY9Zi5wcm9wcy5jaGlsZHJlbik7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zil7c3dpdGNoKGYuJCR0eXBlb2Ype2Nhc2UgdmE6YTp7Zm9yKHZhciBrPVxuZi5rZXksbD1kO251bGwhPT1sOyl7aWYobC5rZXk9PT1rKXtrPWYudHlwZTtpZihrPT09eWEpe2lmKDc9PT1sLnRhZyl7YyhhLGwuc2libGluZyk7ZD1lKGwsZi5wcm9wcy5jaGlsZHJlbik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX19ZWxzZSBpZihsLmVsZW1lbnRUeXBlPT09a3x8XCJvYmplY3RcIj09PXR5cGVvZiBrJiZudWxsIT09ayYmay4kJHR5cGVvZj09PUhhJiZOZyhrKT09PWwudHlwZSl7YyhhLGwuc2libGluZyk7ZD1lKGwsZi5wcm9wcyk7ZC5yZWY9TGcoYSxsLGYpO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9YyhhLGwpO2JyZWFrfWVsc2UgYihhLGwpO2w9bC5zaWJsaW5nfWYudHlwZT09PXlhPyhkPVRnKGYucHJvcHMuY2hpbGRyZW4sYS5tb2RlLGgsZi5rZXkpLGQucmV0dXJuPWEsYT1kKTooaD1SZyhmLnR5cGUsZi5rZXksZi5wcm9wcyxudWxsLGEubW9kZSxoKSxoLnJlZj1MZyhhLGQsZiksaC5yZXR1cm49YSxhPWgpfXJldHVybiBnKGEpO2Nhc2Ugd2E6YTp7Zm9yKGw9Zi5rZXk7bnVsbCE9PVxuZDspe2lmKGQua2V5PT09bClpZig0PT09ZC50YWcmJmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm89PT1mLmNvbnRhaW5lckluZm8mJmQuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uPT09Zi5pbXBsZW1lbnRhdGlvbil7YyhhLGQuc2libGluZyk7ZD1lKGQsZi5jaGlsZHJlbnx8W10pO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsZCk7YnJlYWt9ZWxzZSBiKGEsZCk7ZD1kLnNpYmxpbmd9ZD1TZyhmLGEubW9kZSxoKTtkLnJldHVybj1hO2E9ZH1yZXR1cm4gZyhhKTtjYXNlIEhhOnJldHVybiBsPWYuX2luaXQsSihhLGQsbChmLl9wYXlsb2FkKSxoKX1pZihlYihmKSlyZXR1cm4gbihhLGQsZixoKTtpZihLYShmKSlyZXR1cm4gdChhLGQsZixoKTtNZyhhLGYpfXJldHVyblwic3RyaW5nXCI9PT10eXBlb2YgZiYmXCJcIiE9PWZ8fFwibnVtYmVyXCI9PT10eXBlb2YgZj8oZj1cIlwiK2YsbnVsbCE9PWQmJjY9PT1kLnRhZz8oYyhhLGQuc2libGluZyksZD1lKGQsZiksZC5yZXR1cm49YSxhPWQpOlxuKGMoYSxkKSxkPVFnKGYsYS5tb2RlLGgpLGQucmV0dXJuPWEsYT1kKSxnKGEpKTpjKGEsZCl9cmV0dXJuIEp9dmFyIFVnPU9nKCEwKSxWZz1PZyghMSksV2c9VWYobnVsbCksWGc9bnVsbCxZZz1udWxsLFpnPW51bGw7ZnVuY3Rpb24gJGcoKXtaZz1ZZz1YZz1udWxsfWZ1bmN0aW9uIGFoKGEpe3ZhciBiPVdnLmN1cnJlbnQ7RShXZyk7YS5fY3VycmVudFZhbHVlPWJ9ZnVuY3Rpb24gYmgoYSxiLGMpe2Zvcig7bnVsbCE9PWE7KXt2YXIgZD1hLmFsdGVybmF0ZTsoYS5jaGlsZExhbmVzJmIpIT09Yj8oYS5jaGlsZExhbmVzfD1iLG51bGwhPT1kJiYoZC5jaGlsZExhbmVzfD1iKSk6bnVsbCE9PWQmJihkLmNoaWxkTGFuZXMmYikhPT1iJiYoZC5jaGlsZExhbmVzfD1iKTtpZihhPT09YylicmVhazthPWEucmV0dXJufX1cbmZ1bmN0aW9uIGNoKGEsYil7WGc9YTtaZz1ZZz1udWxsO2E9YS5kZXBlbmRlbmNpZXM7bnVsbCE9PWEmJm51bGwhPT1hLmZpcnN0Q29udGV4dCYmKDAhPT0oYS5sYW5lcyZiKSYmKGRoPSEwKSxhLmZpcnN0Q29udGV4dD1udWxsKX1mdW5jdGlvbiBlaChhKXt2YXIgYj1hLl9jdXJyZW50VmFsdWU7aWYoWmchPT1hKWlmKGE9e2NvbnRleHQ6YSxtZW1vaXplZFZhbHVlOmIsbmV4dDpudWxsfSxudWxsPT09WWcpe2lmKG51bGw9PT1YZyl0aHJvdyBFcnJvcihwKDMwOCkpO1lnPWE7WGcuZGVwZW5kZW5jaWVzPXtsYW5lczowLGZpcnN0Q29udGV4dDphfX1lbHNlIFlnPVlnLm5leHQ9YTtyZXR1cm4gYn12YXIgZmg9bnVsbDtmdW5jdGlvbiBnaChhKXtudWxsPT09Zmg/Zmg9W2FdOmZoLnB1c2goYSl9XG5mdW5jdGlvbiBoaChhLGIsYyxkKXt2YXIgZT1iLmludGVybGVhdmVkO251bGw9PT1lPyhjLm5leHQ9YyxnaChiKSk6KGMubmV4dD1lLm5leHQsZS5uZXh0PWMpO2IuaW50ZXJsZWF2ZWQ9YztyZXR1cm4gaWgoYSxkKX1mdW5jdGlvbiBpaChhLGIpe2EubGFuZXN8PWI7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJihjLmxhbmVzfD1iKTtjPWE7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWE7KWEuY2hpbGRMYW5lc3w9YixjPWEuYWx0ZXJuYXRlLG51bGwhPT1jJiYoYy5jaGlsZExhbmVzfD1iKSxjPWEsYT1hLnJldHVybjtyZXR1cm4gMz09PWMudGFnP2Muc3RhdGVOb2RlOm51bGx9dmFyIGpoPSExO2Z1bmN0aW9uIGtoKGEpe2EudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTphLm1lbW9pemVkU3RhdGUsZmlyc3RCYXNlVXBkYXRlOm51bGwsbGFzdEJhc2VVcGRhdGU6bnVsbCxzaGFyZWQ6e3BlbmRpbmc6bnVsbCxpbnRlcmxlYXZlZDpudWxsLGxhbmVzOjB9LGVmZmVjdHM6bnVsbH19XG5mdW5jdGlvbiBsaChhLGIpe2E9YS51cGRhdGVRdWV1ZTtiLnVwZGF0ZVF1ZXVlPT09YSYmKGIudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTphLmJhc2VTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6YS5maXJzdEJhc2VVcGRhdGUsbGFzdEJhc2VVcGRhdGU6YS5sYXN0QmFzZVVwZGF0ZSxzaGFyZWQ6YS5zaGFyZWQsZWZmZWN0czphLmVmZmVjdHN9KX1mdW5jdGlvbiBtaChhLGIpe3JldHVybntldmVudFRpbWU6YSxsYW5lOmIsdGFnOjAscGF5bG9hZDpudWxsLGNhbGxiYWNrOm51bGwsbmV4dDpudWxsfX1cbmZ1bmN0aW9uIG5oKGEsYixjKXt2YXIgZD1hLnVwZGF0ZVF1ZXVlO2lmKG51bGw9PT1kKXJldHVybiBudWxsO2Q9ZC5zaGFyZWQ7aWYoMCE9PShLJjIpKXt2YXIgZT1kLnBlbmRpbmc7bnVsbD09PWU/Yi5uZXh0PWI6KGIubmV4dD1lLm5leHQsZS5uZXh0PWIpO2QucGVuZGluZz1iO3JldHVybiBpaChhLGMpfWU9ZC5pbnRlcmxlYXZlZDtudWxsPT09ZT8oYi5uZXh0PWIsZ2goZCkpOihiLm5leHQ9ZS5uZXh0LGUubmV4dD1iKTtkLmludGVybGVhdmVkPWI7cmV0dXJuIGloKGEsYyl9ZnVuY3Rpb24gb2goYSxiLGMpe2I9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09YiYmKGI9Yi5zaGFyZWQsMCE9PShjJjQxOTQyNDApKSl7dmFyIGQ9Yi5sYW5lcztkJj1hLnBlbmRpbmdMYW5lcztjfD1kO2IubGFuZXM9YztDYyhhLGMpfX1cbmZ1bmN0aW9uIHBoKGEsYil7dmFyIGM9YS51cGRhdGVRdWV1ZSxkPWEuYWx0ZXJuYXRlO2lmKG51bGwhPT1kJiYoZD1kLnVwZGF0ZVF1ZXVlLGM9PT1kKSl7dmFyIGU9bnVsbCxmPW51bGw7Yz1jLmZpcnN0QmFzZVVwZGF0ZTtpZihudWxsIT09Yyl7ZG97dmFyIGc9e2V2ZW50VGltZTpjLmV2ZW50VGltZSxsYW5lOmMubGFuZSx0YWc6Yy50YWcscGF5bG9hZDpjLnBheWxvYWQsY2FsbGJhY2s6Yy5jYWxsYmFjayxuZXh0Om51bGx9O251bGw9PT1mP2U9Zj1nOmY9Zi5uZXh0PWc7Yz1jLm5leHR9d2hpbGUobnVsbCE9PWMpO251bGw9PT1mP2U9Zj1iOmY9Zi5uZXh0PWJ9ZWxzZSBlPWY9YjtjPXtiYXNlU3RhdGU6ZC5iYXNlU3RhdGUsZmlyc3RCYXNlVXBkYXRlOmUsbGFzdEJhc2VVcGRhdGU6ZixzaGFyZWQ6ZC5zaGFyZWQsZWZmZWN0czpkLmVmZmVjdHN9O2EudXBkYXRlUXVldWU9YztyZXR1cm59YT1jLmxhc3RCYXNlVXBkYXRlO251bGw9PT1hP2MuZmlyc3RCYXNlVXBkYXRlPWI6YS5uZXh0PVxuYjtjLmxhc3RCYXNlVXBkYXRlPWJ9XG5mdW5jdGlvbiBxaChhLGIsYyxkKXt2YXIgZT1hLnVwZGF0ZVF1ZXVlO2poPSExO3ZhciBmPWUuZmlyc3RCYXNlVXBkYXRlLGc9ZS5sYXN0QmFzZVVwZGF0ZSxoPWUuc2hhcmVkLnBlbmRpbmc7aWYobnVsbCE9PWgpe2Uuc2hhcmVkLnBlbmRpbmc9bnVsbDt2YXIgaz1oLGw9ay5uZXh0O2submV4dD1udWxsO251bGw9PT1nP2Y9bDpnLm5leHQ9bDtnPWs7dmFyIG09YS5hbHRlcm5hdGU7bnVsbCE9PW0mJihtPW0udXBkYXRlUXVldWUsaD1tLmxhc3RCYXNlVXBkYXRlLGghPT1nJiYobnVsbD09PWg/bS5maXJzdEJhc2VVcGRhdGU9bDpoLm5leHQ9bCxtLmxhc3RCYXNlVXBkYXRlPWspKX1pZihudWxsIT09Zil7dmFyIHE9ZS5iYXNlU3RhdGU7Zz0wO209bD1rPW51bGw7aD1mO2Rve3ZhciByPWgubGFuZSx5PWguZXZlbnRUaW1lO2lmKChkJnIpPT09cil7bnVsbCE9PW0mJihtPW0ubmV4dD17ZXZlbnRUaW1lOnksbGFuZTowLHRhZzpoLnRhZyxwYXlsb2FkOmgucGF5bG9hZCxjYWxsYmFjazpoLmNhbGxiYWNrLFxubmV4dDpudWxsfSk7YTp7dmFyIG49YSx0PWg7cj1iO3k9Yztzd2l0Y2godC50YWcpe2Nhc2UgMTpuPXQucGF5bG9hZDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygbil7cT1uLmNhbGwoeSxxLHIpO2JyZWFrIGF9cT1uO2JyZWFrIGE7Y2FzZSAzOm4uZmxhZ3M9bi5mbGFncyYtNjU1Mzd8MTI4O2Nhc2UgMDpuPXQucGF5bG9hZDtyPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBuP24uY2FsbCh5LHEscik6bjtpZihudWxsPT09cnx8dm9pZCAwPT09cilicmVhayBhO3E9QSh7fSxxLHIpO2JyZWFrIGE7Y2FzZSAyOmpoPSEwfX1udWxsIT09aC5jYWxsYmFjayYmMCE9PWgubGFuZSYmKGEuZmxhZ3N8PTY0LHI9ZS5lZmZlY3RzLG51bGw9PT1yP2UuZWZmZWN0cz1baF06ci5wdXNoKGgpKX1lbHNlIHk9e2V2ZW50VGltZTp5LGxhbmU6cix0YWc6aC50YWcscGF5bG9hZDpoLnBheWxvYWQsY2FsbGJhY2s6aC5jYWxsYmFjayxuZXh0Om51bGx9LG51bGw9PT1tPyhsPW09eSxrPXEpOm09bS5uZXh0PXksZ3w9cjtcbmg9aC5uZXh0O2lmKG51bGw9PT1oKWlmKGg9ZS5zaGFyZWQucGVuZGluZyxudWxsPT09aClicmVhaztlbHNlIHI9aCxoPXIubmV4dCxyLm5leHQ9bnVsbCxlLmxhc3RCYXNlVXBkYXRlPXIsZS5zaGFyZWQucGVuZGluZz1udWxsfXdoaWxlKDEpO251bGw9PT1tJiYoaz1xKTtlLmJhc2VTdGF0ZT1rO2UuZmlyc3RCYXNlVXBkYXRlPWw7ZS5sYXN0QmFzZVVwZGF0ZT1tO2I9ZS5zaGFyZWQuaW50ZXJsZWF2ZWQ7aWYobnVsbCE9PWIpe2U9YjtkbyBnfD1lLmxhbmUsZT1lLm5leHQ7d2hpbGUoZSE9PWIpfWVsc2UgbnVsbD09PWYmJihlLnNoYXJlZC5sYW5lcz0wKTtyaHw9ZzthLmxhbmVzPWc7YS5tZW1vaXplZFN0YXRlPXF9fVxuZnVuY3Rpb24gc2goYSxiLGMpe2E9Yi5lZmZlY3RzO2IuZWZmZWN0cz1udWxsO2lmKG51bGwhPT1hKWZvcihiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBkPWFbYl0sZT1kLmNhbGxiYWNrO2lmKG51bGwhPT1lKXtkLmNhbGxiYWNrPW51bGw7ZD1jO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlKXRocm93IEVycm9yKHAoMTkxLGUpKTtlLmNhbGwoZCl9fX12YXIgdGg9e30sdWg9VWYodGgpLHZoPVVmKHRoKSx3aD1VZih0aCk7ZnVuY3Rpb24geGgoYSl7aWYoYT09PXRoKXRocm93IEVycm9yKHAoMTc0KSk7cmV0dXJuIGF9XG5mdW5jdGlvbiB5aChhLGIpe0cod2gsYik7Ryh2aCxhKTtHKHVoLHRoKTthPWIubm9kZVR5cGU7c3dpdGNoKGEpe2Nhc2UgOTpjYXNlIDExOmI9KGI9Yi5kb2N1bWVudEVsZW1lbnQpP2IubmFtZXNwYWNlVVJJOmxiKG51bGwsXCJcIik7YnJlYWs7ZGVmYXVsdDphPTg9PT1hP2IucGFyZW50Tm9kZTpiLGI9YS5uYW1lc3BhY2VVUkl8fG51bGwsYT1hLnRhZ05hbWUsYj1sYihiLGEpfUUodWgpO0codWgsYil9ZnVuY3Rpb24gemgoKXtFKHVoKTtFKHZoKTtFKHdoKX1mdW5jdGlvbiBBaChhKXt4aCh3aC5jdXJyZW50KTt2YXIgYj14aCh1aC5jdXJyZW50KTt2YXIgYz1sYihiLGEudHlwZSk7YiE9PWMmJihHKHZoLGEpLEcodWgsYykpfWZ1bmN0aW9uIEJoKGEpe3ZoLmN1cnJlbnQ9PT1hJiYoRSh1aCksRSh2aCkpfXZhciBMPVVmKDApO1xuZnVuY3Rpb24gQ2goYSl7Zm9yKHZhciBiPWE7bnVsbCE9PWI7KXtpZigxMz09PWIudGFnKXt2YXIgYz1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWMmJihjPWMuZGVoeWRyYXRlZCxudWxsPT09Y3x8XCIkP1wiPT09Yy5kYXRhfHxcIiQhXCI9PT1jLmRhdGEpKXJldHVybiBifWVsc2UgaWYoMTk9PT1iLnRhZyYmdm9pZCAwIT09Yi5tZW1vaXplZFByb3BzLnJldmVhbE9yZGVyKXtpZigwIT09KGIuZmxhZ3MmMTI4KSlyZXR1cm4gYn1lbHNlIGlmKG51bGwhPT1iLmNoaWxkKXtiLmNoaWxkLnJldHVybj1iO2I9Yi5jaGlsZDtjb250aW51ZX1pZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9cmV0dXJuIG51bGx9dmFyIERoPVtdO1xuZnVuY3Rpb24gRWgoKXtmb3IodmFyIGE9MDthPERoLmxlbmd0aDthKyspRGhbYV0uX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnk9bnVsbDtEaC5sZW5ndGg9MH12YXIgRmg9dWEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixHaD11YS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyxIaD0wLE09bnVsbCxOPW51bGwsTz1udWxsLEloPSExLEpoPSExLEtoPTAsTGg9MDtmdW5jdGlvbiBQKCl7dGhyb3cgRXJyb3IocCgzMjEpKTt9ZnVuY3Rpb24gTWgoYSxiKXtpZihudWxsPT09YilyZXR1cm4hMTtmb3IodmFyIGM9MDtjPGIubGVuZ3RoJiZjPGEubGVuZ3RoO2MrKylpZighSGUoYVtjXSxiW2NdKSlyZXR1cm4hMTtyZXR1cm4hMH1cbmZ1bmN0aW9uIE5oKGEsYixjLGQsZSxmKXtIaD1mO009YjtiLm1lbW9pemVkU3RhdGU9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7Yi5sYW5lcz0wO0ZoLmN1cnJlbnQ9bnVsbD09PWF8fG51bGw9PT1hLm1lbW9pemVkU3RhdGU/T2g6UGg7YT1jKGQsZSk7aWYoSmgpe2Y9MDtkb3tKaD0hMTtLaD0wO2lmKDI1PD1mKXRocm93IEVycm9yKHAoMzAxKSk7Zis9MTtPPU49bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7RmguY3VycmVudD1RaDthPWMoZCxlKX13aGlsZShKaCl9RmguY3VycmVudD1SaDtiPW51bGwhPT1OJiZudWxsIT09Ti5uZXh0O0hoPTA7Tz1OPU09bnVsbDtJaD0hMTtpZihiKXRocm93IEVycm9yKHAoMzAwKSk7cmV0dXJuIGF9ZnVuY3Rpb24gU2goKXt2YXIgYT0wIT09S2g7S2g9MDtyZXR1cm4gYX1cbmZ1bmN0aW9uIFRoKCl7dmFyIGE9e21lbW9pemVkU3RhdGU6bnVsbCxiYXNlU3RhdGU6bnVsbCxiYXNlUXVldWU6bnVsbCxxdWV1ZTpudWxsLG5leHQ6bnVsbH07bnVsbD09PU8/TS5tZW1vaXplZFN0YXRlPU89YTpPPU8ubmV4dD1hO3JldHVybiBPfWZ1bmN0aW9uIFVoKCl7aWYobnVsbD09PU4pe3ZhciBhPU0uYWx0ZXJuYXRlO2E9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGx9ZWxzZSBhPU4ubmV4dDt2YXIgYj1udWxsPT09Tz9NLm1lbW9pemVkU3RhdGU6Ty5uZXh0O2lmKG51bGwhPT1iKU89YixOPWE7ZWxzZXtpZihudWxsPT09YSl0aHJvdyBFcnJvcihwKDMxMCkpO049YTthPXttZW1vaXplZFN0YXRlOk4ubWVtb2l6ZWRTdGF0ZSxiYXNlU3RhdGU6Ti5iYXNlU3RhdGUsYmFzZVF1ZXVlOk4uYmFzZVF1ZXVlLHF1ZXVlOk4ucXVldWUsbmV4dDpudWxsfTtudWxsPT09Tz9NLm1lbW9pemVkU3RhdGU9Tz1hOk89Ty5uZXh0PWF9cmV0dXJuIE99XG5mdW5jdGlvbiBWaChhLGIpe3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBiP2IoYSk6Yn1cbmZ1bmN0aW9uIFdoKGEpe3ZhciBiPVVoKCksYz1iLnF1ZXVlO2lmKG51bGw9PT1jKXRocm93IEVycm9yKHAoMzExKSk7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7dmFyIGQ9TixlPWQuYmFzZVF1ZXVlLGY9Yy5wZW5kaW5nO2lmKG51bGwhPT1mKXtpZihudWxsIT09ZSl7dmFyIGc9ZS5uZXh0O2UubmV4dD1mLm5leHQ7Zi5uZXh0PWd9ZC5iYXNlUXVldWU9ZT1mO2MucGVuZGluZz1udWxsfWlmKG51bGwhPT1lKXtmPWUubmV4dDtkPWQuYmFzZVN0YXRlO3ZhciBoPWc9bnVsbCxrPW51bGwsbD1mO2Rve3ZhciBtPWwubGFuZTtpZigoSGgmbSk9PT1tKW51bGwhPT1rJiYoaz1rLm5leHQ9e2xhbmU6MCxhY3Rpb246bC5hY3Rpb24saGFzRWFnZXJTdGF0ZTpsLmhhc0VhZ2VyU3RhdGUsZWFnZXJTdGF0ZTpsLmVhZ2VyU3RhdGUsbmV4dDpudWxsfSksZD1sLmhhc0VhZ2VyU3RhdGU/bC5lYWdlclN0YXRlOmEoZCxsLmFjdGlvbik7ZWxzZXt2YXIgcT17bGFuZTptLGFjdGlvbjpsLmFjdGlvbixoYXNFYWdlclN0YXRlOmwuaGFzRWFnZXJTdGF0ZSxcbmVhZ2VyU3RhdGU6bC5lYWdlclN0YXRlLG5leHQ6bnVsbH07bnVsbD09PWs/KGg9az1xLGc9ZCk6az1rLm5leHQ9cTtNLmxhbmVzfD1tO3JofD1tfWw9bC5uZXh0fXdoaWxlKG51bGwhPT1sJiZsIT09Zik7bnVsbD09PWs/Zz1kOmsubmV4dD1oO0hlKGQsYi5tZW1vaXplZFN0YXRlKXx8KGRoPSEwKTtiLm1lbW9pemVkU3RhdGU9ZDtiLmJhc2VTdGF0ZT1nO2IuYmFzZVF1ZXVlPWs7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1kfWE9Yy5pbnRlcmxlYXZlZDtpZihudWxsIT09YSl7ZT1hO2RvIGY9ZS5sYW5lLE0ubGFuZXN8PWYscmh8PWYsZT1lLm5leHQ7d2hpbGUoZSE9PWEpfWVsc2UgbnVsbD09PWUmJihjLmxhbmVzPTApO3JldHVybltiLm1lbW9pemVkU3RhdGUsYy5kaXNwYXRjaF19XG5mdW5jdGlvbiBYaChhKXt2YXIgYj1VaCgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcihwKDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPWMuZGlzcGF0Y2gsZT1jLnBlbmRpbmcsZj1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWUpe2MucGVuZGluZz1udWxsO3ZhciBnPWU9ZS5uZXh0O2RvIGY9YShmLGcuYWN0aW9uKSxnPWcubmV4dDt3aGlsZShnIT09ZSk7SGUoZixiLm1lbW9pemVkU3RhdGUpfHwoZGg9ITApO2IubWVtb2l6ZWRTdGF0ZT1mO251bGw9PT1iLmJhc2VRdWV1ZSYmKGIuYmFzZVN0YXRlPWYpO2MubGFzdFJlbmRlcmVkU3RhdGU9Zn1yZXR1cm5bZixkXX1mdW5jdGlvbiBZaCgpe31cbmZ1bmN0aW9uIFpoKGEsYil7dmFyIGM9TSxkPVVoKCksZT1iKCksZj0hSGUoZC5tZW1vaXplZFN0YXRlLGUpO2YmJihkLm1lbW9pemVkU3RhdGU9ZSxkaD0hMCk7ZD1kLnF1ZXVlOyRoKGFpLmJpbmQobnVsbCxjLGQsYSksW2FdKTtpZihkLmdldFNuYXBzaG90IT09Ynx8Znx8bnVsbCE9PU8mJk8ubWVtb2l6ZWRTdGF0ZS50YWcmMSl7Yy5mbGFnc3w9MjA0ODtiaSg5LGNpLmJpbmQobnVsbCxjLGQsZSxiKSx2b2lkIDAsbnVsbCk7aWYobnVsbD09PVEpdGhyb3cgRXJyb3IocCgzNDkpKTswIT09KEhoJjMwKXx8ZGkoYyxiLGUpfXJldHVybiBlfWZ1bmN0aW9uIGRpKGEsYixjKXthLmZsYWdzfD0xNjM4NDthPXtnZXRTbmFwc2hvdDpiLHZhbHVlOmN9O2I9TS51cGRhdGVRdWV1ZTtudWxsPT09Yj8oYj17bGFzdEVmZmVjdDpudWxsLHN0b3JlczpudWxsfSxNLnVwZGF0ZVF1ZXVlPWIsYi5zdG9yZXM9W2FdKTooYz1iLnN0b3JlcyxudWxsPT09Yz9iLnN0b3Jlcz1bYV06Yy5wdXNoKGEpKX1cbmZ1bmN0aW9uIGNpKGEsYixjLGQpe2IudmFsdWU9YztiLmdldFNuYXBzaG90PWQ7ZWkoYikmJmZpKGEpfWZ1bmN0aW9uIGFpKGEsYixjKXtyZXR1cm4gYyhmdW5jdGlvbigpe2VpKGIpJiZmaShhKX0pfWZ1bmN0aW9uIGVpKGEpe3ZhciBiPWEuZ2V0U25hcHNob3Q7YT1hLnZhbHVlO3RyeXt2YXIgYz1iKCk7cmV0dXJuIUhlKGEsYyl9Y2F0Y2goZCl7cmV0dXJuITB9fWZ1bmN0aW9uIGZpKGEpe3ZhciBiPWloKGEsMSk7bnVsbCE9PWImJmdpKGIsYSwxLC0xKX1cbmZ1bmN0aW9uIGhpKGEpe3ZhciBiPVRoKCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGEmJihhPWEoKSk7Yi5tZW1vaXplZFN0YXRlPWIuYmFzZVN0YXRlPWE7YT17cGVuZGluZzpudWxsLGludGVybGVhdmVkOm51bGwsbGFuZXM6MCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6VmgsbGFzdFJlbmRlcmVkU3RhdGU6YX07Yi5xdWV1ZT1hO2E9YS5kaXNwYXRjaD1paS5iaW5kKG51bGwsTSxhKTtyZXR1cm5bYi5tZW1vaXplZFN0YXRlLGFdfVxuZnVuY3Rpb24gYmkoYSxiLGMsZCl7YT17dGFnOmEsY3JlYXRlOmIsZGVzdHJveTpjLGRlcHM6ZCxuZXh0Om51bGx9O2I9TS51cGRhdGVRdWV1ZTtudWxsPT09Yj8oYj17bGFzdEVmZmVjdDpudWxsLHN0b3JlczpudWxsfSxNLnVwZGF0ZVF1ZXVlPWIsYi5sYXN0RWZmZWN0PWEubmV4dD1hKTooYz1iLmxhc3RFZmZlY3QsbnVsbD09PWM/Yi5sYXN0RWZmZWN0PWEubmV4dD1hOihkPWMubmV4dCxjLm5leHQ9YSxhLm5leHQ9ZCxiLmxhc3RFZmZlY3Q9YSkpO3JldHVybiBhfWZ1bmN0aW9uIGppKCl7cmV0dXJuIFVoKCkubWVtb2l6ZWRTdGF0ZX1mdW5jdGlvbiBraShhLGIsYyxkKXt2YXIgZT1UaCgpO00uZmxhZ3N8PWE7ZS5tZW1vaXplZFN0YXRlPWJpKDF8YixjLHZvaWQgMCx2b2lkIDA9PT1kP251bGw6ZCl9XG5mdW5jdGlvbiBsaShhLGIsYyxkKXt2YXIgZT1VaCgpO2Q9dm9pZCAwPT09ZD9udWxsOmQ7dmFyIGY9dm9pZCAwO2lmKG51bGwhPT1OKXt2YXIgZz1OLm1lbW9pemVkU3RhdGU7Zj1nLmRlc3Ryb3k7aWYobnVsbCE9PWQmJk1oKGQsZy5kZXBzKSl7ZS5tZW1vaXplZFN0YXRlPWJpKGIsYyxmLGQpO3JldHVybn19TS5mbGFnc3w9YTtlLm1lbW9pemVkU3RhdGU9YmkoMXxiLGMsZixkKX1mdW5jdGlvbiBtaShhLGIpe3JldHVybiBraSg4MzkwNjU2LDgsYSxiKX1mdW5jdGlvbiAkaChhLGIpe3JldHVybiBsaSgyMDQ4LDgsYSxiKX1mdW5jdGlvbiBuaShhLGIpe3JldHVybiBsaSg0LDIsYSxiKX1mdW5jdGlvbiBvaShhLGIpe3JldHVybiBsaSg0LDQsYSxiKX1cbmZ1bmN0aW9uIHBpKGEsYil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpcmV0dXJuIGE9YSgpLGIoYSksZnVuY3Rpb24oKXtiKG51bGwpfTtpZihudWxsIT09YiYmdm9pZCAwIT09YilyZXR1cm4gYT1hKCksYi5jdXJyZW50PWEsZnVuY3Rpb24oKXtiLmN1cnJlbnQ9bnVsbH19ZnVuY3Rpb24gcWkoYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiBsaSg0LDQscGkuYmluZChudWxsLGIsYSksYyl9ZnVuY3Rpb24gcmkoKXt9ZnVuY3Rpb24gc2koYSxiKXt2YXIgYz1VaCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmTWgoYixkWzFdKSlyZXR1cm4gZFswXTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9XG5mdW5jdGlvbiB0aShhLGIpe3ZhciBjPVVoKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZNaChiLGRbMV0pKXJldHVybiBkWzBdO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1mdW5jdGlvbiB1aShhLGIsYyl7aWYoMD09PShIaCYyMSkpcmV0dXJuIGEuYmFzZVN0YXRlJiYoYS5iYXNlU3RhdGU9ITEsZGg9ITApLGEubWVtb2l6ZWRTdGF0ZT1jO0hlKGMsYil8fChjPXljKCksTS5sYW5lc3w9YyxyaHw9YyxhLmJhc2VTdGF0ZT0hMCk7cmV0dXJuIGJ9ZnVuY3Rpb24gdmkoYSxiKXt2YXIgYz1DO0M9MCE9PWMmJjQ+Yz9jOjQ7YSghMCk7dmFyIGQ9R2gudHJhbnNpdGlvbjtHaC50cmFuc2l0aW9uPXt9O3RyeXthKCExKSxiKCl9ZmluYWxseXtDPWMsR2gudHJhbnNpdGlvbj1kfX1mdW5jdGlvbiB3aSgpe3JldHVybiBVaCgpLm1lbW9pemVkU3RhdGV9XG5mdW5jdGlvbiB4aShhLGIsYyl7dmFyIGQ9eWkoYSk7Yz17bGFuZTpkLGFjdGlvbjpjLGhhc0VhZ2VyU3RhdGU6ITEsZWFnZXJTdGF0ZTpudWxsLG5leHQ6bnVsbH07aWYoemkoYSkpQWkoYixjKTtlbHNlIGlmKGM9aGgoYSxiLGMsZCksbnVsbCE9PWMpe3ZhciBlPVIoKTtnaShjLGEsZCxlKTtCaShjLGIsZCl9fVxuZnVuY3Rpb24gaWkoYSxiLGMpe3ZhciBkPXlpKGEpLGU9e2xhbmU6ZCxhY3Rpb246YyxoYXNFYWdlclN0YXRlOiExLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9O2lmKHppKGEpKUFpKGIsZSk7ZWxzZXt2YXIgZj1hLmFsdGVybmF0ZTtpZigwPT09YS5sYW5lcyYmKG51bGw9PT1mfHwwPT09Zi5sYW5lcykmJihmPWIubGFzdFJlbmRlcmVkUmVkdWNlcixudWxsIT09ZikpdHJ5e3ZhciBnPWIubGFzdFJlbmRlcmVkU3RhdGUsaD1mKGcsYyk7ZS5oYXNFYWdlclN0YXRlPSEwO2UuZWFnZXJTdGF0ZT1oO2lmKEhlKGgsZykpe3ZhciBrPWIuaW50ZXJsZWF2ZWQ7bnVsbD09PWs/KGUubmV4dD1lLGdoKGIpKTooZS5uZXh0PWsubmV4dCxrLm5leHQ9ZSk7Yi5pbnRlcmxlYXZlZD1lO3JldHVybn19Y2F0Y2gobCl7fWZpbmFsbHl7fWM9aGgoYSxiLGUsZCk7bnVsbCE9PWMmJihlPVIoKSxnaShjLGEsZCxlKSxCaShjLGIsZCkpfX1cbmZ1bmN0aW9uIHppKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO3JldHVybiBhPT09TXx8bnVsbCE9PWImJmI9PT1NfWZ1bmN0aW9uIEFpKGEsYil7Smg9SWg9ITA7dmFyIGM9YS5wZW5kaW5nO251bGw9PT1jP2IubmV4dD1iOihiLm5leHQ9Yy5uZXh0LGMubmV4dD1iKTthLnBlbmRpbmc9Yn1mdW5jdGlvbiBCaShhLGIsYyl7aWYoMCE9PShjJjQxOTQyNDApKXt2YXIgZD1iLmxhbmVzO2QmPWEucGVuZGluZ0xhbmVzO2N8PWQ7Yi5sYW5lcz1jO0NjKGEsYyl9fVxudmFyIFJoPXtyZWFkQ29udGV4dDplaCx1c2VDYWxsYmFjazpQLHVzZUNvbnRleHQ6UCx1c2VFZmZlY3Q6UCx1c2VJbXBlcmF0aXZlSGFuZGxlOlAsdXNlSW5zZXJ0aW9uRWZmZWN0OlAsdXNlTGF5b3V0RWZmZWN0OlAsdXNlTWVtbzpQLHVzZVJlZHVjZXI6UCx1c2VSZWY6UCx1c2VTdGF0ZTpQLHVzZURlYnVnVmFsdWU6UCx1c2VEZWZlcnJlZFZhbHVlOlAsdXNlVHJhbnNpdGlvbjpQLHVzZU11dGFibGVTb3VyY2U6UCx1c2VTeW5jRXh0ZXJuYWxTdG9yZTpQLHVzZUlkOlAsdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxPaD17cmVhZENvbnRleHQ6ZWgsdXNlQ2FsbGJhY2s6ZnVuY3Rpb24oYSxiKXtUaCgpLm1lbW9pemVkU3RhdGU9W2Esdm9pZCAwPT09Yj9udWxsOmJdO3JldHVybiBhfSx1c2VDb250ZXh0OmVoLHVzZUVmZmVjdDptaSx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4ga2koNDE5NDMwOCxcbjQscGkuYmluZChudWxsLGIsYSksYyl9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBraSg0MTk0MzA4LDQsYSxiKX0sdXNlSW5zZXJ0aW9uRWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIGtpKDQsMixhLGIpfSx1c2VNZW1vOmZ1bmN0aW9uKGEsYil7dmFyIGM9VGgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX0sdXNlUmVkdWNlcjpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9VGgoKTtiPXZvaWQgMCE9PWM/YyhiKTpiO2QubWVtb2l6ZWRTdGF0ZT1kLmJhc2VTdGF0ZT1iO2E9e3BlbmRpbmc6bnVsbCxpbnRlcmxlYXZlZDpudWxsLGxhbmVzOjAsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOmEsbGFzdFJlbmRlcmVkU3RhdGU6Yn07ZC5xdWV1ZT1hO2E9YS5kaXNwYXRjaD14aS5iaW5kKG51bGwsTSxhKTtyZXR1cm5bZC5tZW1vaXplZFN0YXRlLGFdfSx1c2VSZWY6ZnVuY3Rpb24oYSl7dmFyIGI9XG5UaCgpO2E9e2N1cnJlbnQ6YX07cmV0dXJuIGIubWVtb2l6ZWRTdGF0ZT1hfSx1c2VTdGF0ZTpoaSx1c2VEZWJ1Z1ZhbHVlOnJpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7cmV0dXJuIFRoKCkubWVtb2l6ZWRTdGF0ZT1hfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9aGkoITEpLGI9YVswXTthPXZpLmJpbmQobnVsbCxhWzFdKTtUaCgpLm1lbW9pemVkU3RhdGU9YTtyZXR1cm5bYixhXX0sdXNlTXV0YWJsZVNvdXJjZTpmdW5jdGlvbigpe30sdXNlU3luY0V4dGVybmFsU3RvcmU6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPU0sZT1UaCgpO2lmKEkpe2lmKHZvaWQgMD09PWMpdGhyb3cgRXJyb3IocCg0MDcpKTtjPWMoKX1lbHNle2M9YigpO2lmKG51bGw9PT1RKXRocm93IEVycm9yKHAoMzQ5KSk7MCE9PShIaCYzMCl8fGRpKGQsYixjKX1lLm1lbW9pemVkU3RhdGU9Yzt2YXIgZj17dmFsdWU6YyxnZXRTbmFwc2hvdDpifTtlLnF1ZXVlPWY7bWkoYWkuYmluZChudWxsLGQsXG5mLGEpLFthXSk7ZC5mbGFnc3w9MjA0ODtiaSg5LGNpLmJpbmQobnVsbCxkLGYsYyxiKSx2b2lkIDAsbnVsbCk7cmV0dXJuIGN9LHVzZUlkOmZ1bmN0aW9uKCl7dmFyIGE9VGgoKSxiPVEuaWRlbnRpZmllclByZWZpeDtpZihJKXt2YXIgYz1zZzt2YXIgZD1yZztjPShkJn4oMTw8MzItb2MoZCktMSkpLnRvU3RyaW5nKDMyKStjO2I9XCI6XCIrYitcIlJcIitjO2M9S2grKzswPGMmJihiKz1cIkhcIitjLnRvU3RyaW5nKDMyKSk7Yis9XCI6XCJ9ZWxzZSBjPUxoKyssYj1cIjpcIitiK1wiclwiK2MudG9TdHJpbmcoMzIpK1wiOlwiO3JldHVybiBhLm1lbW9pemVkU3RhdGU9Yn0sdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxQaD17cmVhZENvbnRleHQ6ZWgsdXNlQ2FsbGJhY2s6c2ksdXNlQ29udGV4dDplaCx1c2VFZmZlY3Q6JGgsdXNlSW1wZXJhdGl2ZUhhbmRsZTpxaSx1c2VJbnNlcnRpb25FZmZlY3Q6bmksdXNlTGF5b3V0RWZmZWN0Om9pLHVzZU1lbW86dGksdXNlUmVkdWNlcjpXaCx1c2VSZWY6amksdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gV2goVmgpfSxcbnVzZURlYnVnVmFsdWU6cmksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXt2YXIgYj1VaCgpO3JldHVybiB1aShiLE4ubWVtb2l6ZWRTdGF0ZSxhKX0sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPVdoKFZoKVswXSxiPVVoKCkubWVtb2l6ZWRTdGF0ZTtyZXR1cm5bYSxiXX0sdXNlTXV0YWJsZVNvdXJjZTpZaCx1c2VTeW5jRXh0ZXJuYWxTdG9yZTpaaCx1c2VJZDp3aSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LFFoPXtyZWFkQ29udGV4dDplaCx1c2VDYWxsYmFjazpzaSx1c2VDb250ZXh0OmVoLHVzZUVmZmVjdDokaCx1c2VJbXBlcmF0aXZlSGFuZGxlOnFpLHVzZUluc2VydGlvbkVmZmVjdDpuaSx1c2VMYXlvdXRFZmZlY3Q6b2ksdXNlTWVtbzp0aSx1c2VSZWR1Y2VyOlhoLHVzZVJlZjpqaSx1c2VTdGF0ZTpmdW5jdGlvbigpe3JldHVybiBYaChWaCl9LHVzZURlYnVnVmFsdWU6cmksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXt2YXIgYj1VaCgpO3JldHVybiBudWxsPT09XG5OP2IubWVtb2l6ZWRTdGF0ZT1hOnVpKGIsTi5tZW1vaXplZFN0YXRlLGEpfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9WGgoVmgpWzBdLGI9VWgoKS5tZW1vaXplZFN0YXRlO3JldHVyblthLGJdfSx1c2VNdXRhYmxlU291cmNlOlloLHVzZVN5bmNFeHRlcm5hbFN0b3JlOlpoLHVzZUlkOndpLHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX07ZnVuY3Rpb24gQ2koYSxiKXtpZihhJiZhLmRlZmF1bHRQcm9wcyl7Yj1BKHt9LGIpO2E9YS5kZWZhdWx0UHJvcHM7Zm9yKHZhciBjIGluIGEpdm9pZCAwPT09YltjXSYmKGJbY109YVtjXSk7cmV0dXJuIGJ9cmV0dXJuIGJ9ZnVuY3Rpb24gRGkoYSxiLGMsZCl7Yj1hLm1lbW9pemVkU3RhdGU7Yz1jKGQsYik7Yz1udWxsPT09Y3x8dm9pZCAwPT09Yz9iOkEoe30sYixjKTthLm1lbW9pemVkU3RhdGU9YzswPT09YS5sYW5lcyYmKGEudXBkYXRlUXVldWUuYmFzZVN0YXRlPWMpfVxudmFyIEVpPXtpc01vdW50ZWQ6ZnVuY3Rpb24oYSl7cmV0dXJuKGE9YS5fcmVhY3RJbnRlcm5hbHMpP1ZiKGEpPT09YTohMX0sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxzO3ZhciBkPVIoKSxlPXlpKGEpLGY9bWgoZCxlKTtmLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGYuY2FsbGJhY2s9Yyk7Yj1uaChhLGYsZSk7bnVsbCE9PWImJihnaShiLGEsZSxkKSxvaChiLGEsZSkpfSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxzO3ZhciBkPVIoKSxlPXlpKGEpLGY9bWgoZCxlKTtmLnRhZz0xO2YucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZi5jYWxsYmFjaz1jKTtiPW5oKGEsZixlKTtudWxsIT09YiYmKGdpKGIsYSxlLGQpLG9oKGIsYSxlKSl9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbihhLGIpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGM9UigpLGQ9XG55aShhKSxlPW1oKGMsZCk7ZS50YWc9Mjt2b2lkIDAhPT1iJiZudWxsIT09YiYmKGUuY2FsbGJhY2s9Yik7Yj1uaChhLGUsZCk7bnVsbCE9PWImJihnaShiLGEsZCxjKSxvaChiLGEsZCkpfX07ZnVuY3Rpb24gRmkoYSxiLGMsZCxlLGYsZyl7YT1hLnN0YXRlTm9kZTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5zaG91bGRDb21wb25lbnRVcGRhdGU/YS5zaG91bGRDb21wb25lbnRVcGRhdGUoZCxmLGcpOmIucHJvdG90eXBlJiZiLnByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudD8hSWUoYyxkKXx8IUllKGUsZik6ITB9XG5mdW5jdGlvbiBHaShhLGIsYyl7dmFyIGQ9ITEsZT1WZjt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/Zj1laChmKTooZT1aZihiKT9YZjpILmN1cnJlbnQsZD1iLmNvbnRleHRUeXBlcyxmPShkPW51bGwhPT1kJiZ2b2lkIDAhPT1kKT9ZZihhLGUpOlZmKTtiPW5ldyBiKGMsZik7YS5tZW1vaXplZFN0YXRlPW51bGwhPT1iLnN0YXRlJiZ2b2lkIDAhPT1iLnN0YXRlP2Iuc3RhdGU6bnVsbDtiLnVwZGF0ZXI9RWk7YS5zdGF0ZU5vZGU9YjtiLl9yZWFjdEludGVybmFscz1hO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1lLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9Zik7cmV0dXJuIGJ9XG5mdW5jdGlvbiBIaShhLGIsYyxkKXthPWIuc3RhdGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtiLnN0YXRlIT09YSYmRWkuZW5xdWV1ZVJlcGxhY2VTdGF0ZShiLGIuc3RhdGUsbnVsbCl9XG5mdW5jdGlvbiBJaShhLGIsYyxkKXt2YXIgZT1hLnN0YXRlTm9kZTtlLnByb3BzPWM7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZS5yZWZzPXt9O2toKGEpO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9lLmNvbnRleHQ9ZWgoZik6KGY9WmYoYik/WGY6SC5jdXJyZW50LGUuY29udGV4dD1ZZihhLGYpKTtlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtmPWIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBmJiYoRGkoYSxiLGYsYyksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc3x8XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudHx8KGI9ZS5zdGF0ZSxcblwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudCYmZS5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSxiIT09ZS5zdGF0ZSYmRWkuZW5xdWV1ZVJlcGxhY2VTdGF0ZShlLGUuc3RhdGUsbnVsbCkscWgoYSxjLGUsZCksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudERpZE1vdW50JiYoYS5mbGFnc3w9NDE5NDMwOCl9ZnVuY3Rpb24gSmkoYSxiKXt0cnl7dmFyIGM9XCJcIixkPWI7ZG8gYys9UGEoZCksZD1kLnJldHVybjt3aGlsZShkKTt2YXIgZT1jfWNhdGNoKGYpe2U9XCJcXG5FcnJvciBnZW5lcmF0aW5nIHN0YWNrOiBcIitmLm1lc3NhZ2UrXCJcXG5cIitmLnN0YWNrfXJldHVybnt2YWx1ZTphLHNvdXJjZTpiLHN0YWNrOmUsZGlnZXN0Om51bGx9fVxuZnVuY3Rpb24gS2koYSxiLGMpe3JldHVybnt2YWx1ZTphLHNvdXJjZTpudWxsLHN0YWNrOm51bGwhPWM/YzpudWxsLGRpZ2VzdDpudWxsIT1iP2I6bnVsbH19ZnVuY3Rpb24gTGkoYSxiKXt0cnl7Y29uc29sZS5lcnJvcihiLnZhbHVlKX1jYXRjaChjKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgYzt9KX19dmFyIE1pPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrTWFwP1dlYWtNYXA6TWFwO2Z1bmN0aW9uIE5pKGEsYixjKXtjPW1oKC0xLGMpO2MudGFnPTM7Yy5wYXlsb2FkPXtlbGVtZW50Om51bGx9O3ZhciBkPWIudmFsdWU7Yy5jYWxsYmFjaz1mdW5jdGlvbigpe09pfHwoT2k9ITAsUGk9ZCk7TGkoYSxiKX07cmV0dXJuIGN9XG5mdW5jdGlvbiBRaShhLGIsYyl7Yz1taCgtMSxjKTtjLnRhZz0zO3ZhciBkPWEudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBlPWIudmFsdWU7Yy5wYXlsb2FkPWZ1bmN0aW9uKCl7cmV0dXJuIGQoZSl9O2MuY2FsbGJhY2s9ZnVuY3Rpb24oKXtMaShhLGIpfX12YXIgZj1hLnN0YXRlTm9kZTtudWxsIT09ZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuY29tcG9uZW50RGlkQ2F0Y2gmJihjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7TGkoYSxiKTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgZCYmKG51bGw9PT1SaT9SaT1uZXcgU2V0KFt0aGlzXSk6UmkuYWRkKHRoaXMpKTt2YXIgYz1iLnN0YWNrO3RoaXMuY29tcG9uZW50RGlkQ2F0Y2goYi52YWx1ZSx7Y29tcG9uZW50U3RhY2s6bnVsbCE9PWM/YzpcIlwifSl9KTtyZXR1cm4gY31cbmZ1bmN0aW9uIFNpKGEsYixjKXt2YXIgZD1hLnBpbmdDYWNoZTtpZihudWxsPT09ZCl7ZD1hLnBpbmdDYWNoZT1uZXcgTWk7dmFyIGU9bmV3IFNldDtkLnNldChiLGUpfWVsc2UgZT1kLmdldChiKSx2b2lkIDA9PT1lJiYoZT1uZXcgU2V0LGQuc2V0KGIsZSkpO2UuaGFzKGMpfHwoZS5hZGQoYyksYT1UaS5iaW5kKG51bGwsYSxiLGMpLGIudGhlbihhLGEpKX1mdW5jdGlvbiBVaShhKXtkb3t2YXIgYjtpZihiPTEzPT09YS50YWcpYj1hLm1lbW9pemVkU3RhdGUsYj1udWxsIT09Yj9udWxsIT09Yi5kZWh5ZHJhdGVkPyEwOiExOiEwO2lmKGIpcmV0dXJuIGE7YT1hLnJldHVybn13aGlsZShudWxsIT09YSk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBWaShhLGIsYyxkLGUpe2lmKDA9PT0oYS5tb2RlJjEpKXJldHVybiBhPT09Yj9hLmZsYWdzfD02NTUzNjooYS5mbGFnc3w9MTI4LGMuZmxhZ3N8PTEzMTA3MixjLmZsYWdzJj0tNTI4MDUsMT09PWMudGFnJiYobnVsbD09PWMuYWx0ZXJuYXRlP2MudGFnPTE3OihiPW1oKC0xLDEpLGIudGFnPTIsbmgoYyxiLDEpKSksYy5sYW5lc3w9MSksYTthLmZsYWdzfD02NTUzNjthLmxhbmVzPWU7cmV0dXJuIGF9dmFyIFdpPXVhLlJlYWN0Q3VycmVudE93bmVyLGRoPSExO2Z1bmN0aW9uIFhpKGEsYixjLGQpe2IuY2hpbGQ9bnVsbD09PWE/VmcoYixudWxsLGMsZCk6VWcoYixhLmNoaWxkLGMsZCl9XG5mdW5jdGlvbiBZaShhLGIsYyxkLGUpe2M9Yy5yZW5kZXI7dmFyIGY9Yi5yZWY7Y2goYixlKTtkPU5oKGEsYixjLGQsZixlKTtjPVNoKCk7aWYobnVsbCE9PWEmJiFkaClyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZmxhZ3MmPS0yMDUzLGEubGFuZXMmPX5lLFppKGEsYixlKTtJJiZjJiZ2ZyhiKTtiLmZsYWdzfD0xO1hpKGEsYixkLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gJGkoYSxiLGMsZCxlKXtpZihudWxsPT09YSl7dmFyIGY9Yy50eXBlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmJiYhYWooZikmJnZvaWQgMD09PWYuZGVmYXVsdFByb3BzJiZudWxsPT09Yy5jb21wYXJlJiZ2b2lkIDA9PT1jLmRlZmF1bHRQcm9wcylyZXR1cm4gYi50YWc9MTUsYi50eXBlPWYsYmooYSxiLGYsZCxlKTthPVJnKGMudHlwZSxudWxsLGQsYixiLm1vZGUsZSk7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfWY9YS5jaGlsZDtpZigwPT09KGEubGFuZXMmZSkpe3ZhciBnPWYubWVtb2l6ZWRQcm9wcztjPWMuY29tcGFyZTtjPW51bGwhPT1jP2M6SWU7aWYoYyhnLGQpJiZhLnJlZj09PWIucmVmKXJldHVybiBaaShhLGIsZSl9Yi5mbGFnc3w9MTthPVBnKGYsZCk7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfVxuZnVuY3Rpb24gYmooYSxiLGMsZCxlKXtpZihudWxsIT09YSl7dmFyIGY9YS5tZW1vaXplZFByb3BzO2lmKEllKGYsZCkmJmEucmVmPT09Yi5yZWYpaWYoZGg9ITEsYi5wZW5kaW5nUHJvcHM9ZD1mLDAhPT0oYS5sYW5lcyZlKSkwIT09KGEuZmxhZ3MmMTMxMDcyKSYmKGRoPSEwKTtlbHNlIHJldHVybiBiLmxhbmVzPWEubGFuZXMsWmkoYSxiLGUpfXJldHVybiBjaihhLGIsYyxkLGUpfVxuZnVuY3Rpb24gZGooYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5jaGlsZHJlbixmPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsO2lmKFwiaGlkZGVuXCI9PT1kLm1vZGUpaWYoMD09PShiLm1vZGUmMSkpYi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6MCxjYWNoZVBvb2w6bnVsbCx0cmFuc2l0aW9uczpudWxsfSxHKGVqLGZqKSxmanw9YztlbHNle2lmKDA9PT0oYyYxMDczNzQxODI0KSlyZXR1cm4gYT1udWxsIT09Zj9mLmJhc2VMYW5lc3xjOmMsYi5sYW5lcz1iLmNoaWxkTGFuZXM9MTA3Mzc0MTgyNCxiLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczphLGNhY2hlUG9vbDpudWxsLHRyYW5zaXRpb25zOm51bGx9LGIudXBkYXRlUXVldWU9bnVsbCxHKGVqLGZqKSxmanw9YSxudWxsO2IubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOjAsY2FjaGVQb29sOm51bGwsdHJhbnNpdGlvbnM6bnVsbH07ZD1udWxsIT09Zj9mLmJhc2VMYW5lczpjO0coZWosZmopO2ZqfD1kfWVsc2UgbnVsbCE9PVxuZj8oZD1mLmJhc2VMYW5lc3xjLGIubWVtb2l6ZWRTdGF0ZT1udWxsKTpkPWMsRyhlaixmaiksZmp8PWQ7WGkoYSxiLGUsYyk7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gZ2ooYSxiKXt2YXIgYz1iLnJlZjtpZihudWxsPT09YSYmbnVsbCE9PWN8fG51bGwhPT1hJiZhLnJlZiE9PWMpYi5mbGFnc3w9NTEyLGIuZmxhZ3N8PTIwOTcxNTJ9ZnVuY3Rpb24gY2ooYSxiLGMsZCxlKXt2YXIgZj1aZihjKT9YZjpILmN1cnJlbnQ7Zj1ZZihiLGYpO2NoKGIsZSk7Yz1OaChhLGIsYyxkLGYsZSk7ZD1TaCgpO2lmKG51bGwhPT1hJiYhZGgpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmZsYWdzJj0tMjA1MyxhLmxhbmVzJj1+ZSxaaShhLGIsZSk7SSYmZCYmdmcoYik7Yi5mbGFnc3w9MTtYaShhLGIsYyxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGhqKGEsYixjLGQsZSl7aWYoWmYoYykpe3ZhciBmPSEwO2NnKGIpfWVsc2UgZj0hMTtjaChiLGUpO2lmKG51bGw9PT1iLnN0YXRlTm9kZSlpaihhLGIpLEdpKGIsYyxkKSxJaShiLGMsZCxlKSxkPSEwO2Vsc2UgaWYobnVsbD09PWEpe3ZhciBnPWIuc3RhdGVOb2RlLGg9Yi5tZW1vaXplZFByb3BzO2cucHJvcHM9aDt2YXIgaz1nLmNvbnRleHQsbD1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgbCYmbnVsbCE9PWw/bD1laChsKToobD1aZihjKT9YZjpILmN1cnJlbnQsbD1ZZihiLGwpKTt2YXIgbT1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyxxPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBtfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZTtxfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8XG4oaCE9PWR8fGshPT1sKSYmSGkoYixnLGQsbCk7amg9ITE7dmFyIHI9Yi5tZW1vaXplZFN0YXRlO2cuc3RhdGU9cjtxaChiLGQsZyxlKTtrPWIubWVtb2l6ZWRTdGF0ZTtoIT09ZHx8ciE9PWt8fFdmLmN1cnJlbnR8fGpoPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbSYmKERpKGIsYyxtLGQpLGs9Yi5tZW1vaXplZFN0YXRlKSwoaD1qaHx8RmkoYixjLGgsZCxyLGssbCkpPyhxfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnR8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnQmJmcuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NDE5NDMwOCkpOlxuKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NDE5NDMwOCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPWspLGcucHJvcHM9ZCxnLnN0YXRlPWssZy5jb250ZXh0PWwsZD1oKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00MTk0MzA4KSxkPSExKX1lbHNle2c9Yi5zdGF0ZU5vZGU7bGgoYSxiKTtoPWIubWVtb2l6ZWRQcm9wcztsPWIudHlwZT09PWIuZWxlbWVudFR5cGU/aDpDaShiLnR5cGUsaCk7Zy5wcm9wcz1sO3E9Yi5wZW5kaW5nUHJvcHM7cj1nLmNvbnRleHQ7az1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWs/az1laChrKTooaz1aZihjKT9YZjpILmN1cnJlbnQsaz1ZZihiLGspKTt2YXIgeT1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczsobT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgeXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpfHxcblwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PXF8fHIhPT1rKSYmSGkoYixnLGQsayk7amg9ITE7cj1iLm1lbW9pemVkU3RhdGU7Zy5zdGF0ZT1yO3FoKGIsZCxnLGUpO3ZhciBuPWIubWVtb2l6ZWRTdGF0ZTtoIT09cXx8ciE9PW58fFdmLmN1cnJlbnR8fGpoPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgeSYmKERpKGIsYyx5LGQpLG49Yi5tZW1vaXplZFN0YXRlKSwobD1qaHx8RmkoYixjLGwsZCxyLG4sayl8fCExKT8obXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGV8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlJiZnLmNvbXBvbmVudFdpbGxVcGRhdGUoZCxuLGspLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZcbmcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUoZCxuLGspKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGUmJihiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSYmKGIuZmxhZ3N8PTEwMjQpKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZyPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnI9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD0xMDI0KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9biksZy5wcm9wcz1kLGcuc3RhdGU9bixnLmNvbnRleHQ9ayxkPWwpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnI9PT1cbmEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZyPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9MTAyNCksZD0hMSl9cmV0dXJuIGpqKGEsYixjLGQsZixlKX1cbmZ1bmN0aW9uIGpqKGEsYixjLGQsZSxmKXtnaihhLGIpO3ZhciBnPTAhPT0oYi5mbGFncyYxMjgpO2lmKCFkJiYhZylyZXR1cm4gZSYmZGcoYixjLCExKSxaaShhLGIsZik7ZD1iLnN0YXRlTm9kZTtXaS5jdXJyZW50PWI7dmFyIGg9ZyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yP251bGw6ZC5yZW5kZXIoKTtiLmZsYWdzfD0xO251bGwhPT1hJiZnPyhiLmNoaWxkPVVnKGIsYS5jaGlsZCxudWxsLGYpLGIuY2hpbGQ9VWcoYixudWxsLGgsZikpOlhpKGEsYixoLGYpO2IubWVtb2l6ZWRTdGF0ZT1kLnN0YXRlO2UmJmRnKGIsYywhMCk7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24ga2ooYSl7dmFyIGI9YS5zdGF0ZU5vZGU7Yi5wZW5kaW5nQ29udGV4dD9hZyhhLGIucGVuZGluZ0NvbnRleHQsYi5wZW5kaW5nQ29udGV4dCE9PWIuY29udGV4dCk6Yi5jb250ZXh0JiZhZyhhLGIuY29udGV4dCwhMSk7eWgoYSxiLmNvbnRhaW5lckluZm8pfVxuZnVuY3Rpb24gbGooYSxiLGMsZCxlKXtJZygpO0pnKGUpO2IuZmxhZ3N8PTI1NjtYaShhLGIsYyxkKTtyZXR1cm4gYi5jaGlsZH12YXIgbWo9e2RlaHlkcmF0ZWQ6bnVsbCx0cmVlQ29udGV4dDpudWxsLHJldHJ5TGFuZTowfTtmdW5jdGlvbiBuaihhKXtyZXR1cm57YmFzZUxhbmVzOmEsY2FjaGVQb29sOm51bGwsdHJhbnNpdGlvbnM6bnVsbH19XG5mdW5jdGlvbiBvaihhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1MLmN1cnJlbnQsZj0hMSxnPTAhPT0oYi5mbGFncyYxMjgpLGg7KGg9Zyl8fChoPW51bGwhPT1hJiZudWxsPT09YS5tZW1vaXplZFN0YXRlPyExOjAhPT0oZSYyKSk7aWYoaClmPSEwLGIuZmxhZ3MmPS0xMjk7ZWxzZSBpZihudWxsPT09YXx8bnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSllfD0xO0coTCxlJjEpO2lmKG51bGw9PT1hKXtFZyhiKTthPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YSYmKGE9YS5kZWh5ZHJhdGVkLG51bGwhPT1hKSlyZXR1cm4gMD09PShiLm1vZGUmMSk/Yi5sYW5lcz0xOlwiJCFcIj09PWEuZGF0YT9iLmxhbmVzPTg6Yi5sYW5lcz0xMDczNzQxODI0LG51bGw7Zz1kLmNoaWxkcmVuO2E9ZC5mYWxsYmFjaztyZXR1cm4gZj8oZD1iLm1vZGUsZj1iLmNoaWxkLGc9e21vZGU6XCJoaWRkZW5cIixjaGlsZHJlbjpnfSwwPT09KGQmMSkmJm51bGwhPT1mPyhmLmNoaWxkTGFuZXM9MCxmLnBlbmRpbmdQcm9wcz1cbmcpOmY9cGooZyxkLDAsbnVsbCksYT1UZyhhLGQsYyxudWxsKSxmLnJldHVybj1iLGEucmV0dXJuPWIsZi5zaWJsaW5nPWEsYi5jaGlsZD1mLGIuY2hpbGQubWVtb2l6ZWRTdGF0ZT1uaihjKSxiLm1lbW9pemVkU3RhdGU9bWosYSk6cWooYixnKX1lPWEubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZSYmKGg9ZS5kZWh5ZHJhdGVkLG51bGwhPT1oKSlyZXR1cm4gcmooYSxiLGcsZCxoLGUsYyk7aWYoZil7Zj1kLmZhbGxiYWNrO2c9Yi5tb2RlO2U9YS5jaGlsZDtoPWUuc2libGluZzt2YXIgaz17bW9kZTpcImhpZGRlblwiLGNoaWxkcmVuOmQuY2hpbGRyZW59OzA9PT0oZyYxKSYmYi5jaGlsZCE9PWU/KGQ9Yi5jaGlsZCxkLmNoaWxkTGFuZXM9MCxkLnBlbmRpbmdQcm9wcz1rLGIuZGVsZXRpb25zPW51bGwpOihkPVBnKGUsayksZC5zdWJ0cmVlRmxhZ3M9ZS5zdWJ0cmVlRmxhZ3MmMTQ2ODAwNjQpO251bGwhPT1oP2Y9UGcoaCxmKTooZj1UZyhmLGcsYyxudWxsKSxmLmZsYWdzfD0yKTtmLnJldHVybj1cbmI7ZC5yZXR1cm49YjtkLnNpYmxpbmc9ZjtiLmNoaWxkPWQ7ZD1mO2Y9Yi5jaGlsZDtnPWEuY2hpbGQubWVtb2l6ZWRTdGF0ZTtnPW51bGw9PT1nP25qKGMpOntiYXNlTGFuZXM6Zy5iYXNlTGFuZXN8YyxjYWNoZVBvb2w6bnVsbCx0cmFuc2l0aW9uczpnLnRyYW5zaXRpb25zfTtmLm1lbW9pemVkU3RhdGU9ZztmLmNoaWxkTGFuZXM9YS5jaGlsZExhbmVzJn5jO2IubWVtb2l6ZWRTdGF0ZT1tajtyZXR1cm4gZH1mPWEuY2hpbGQ7YT1mLnNpYmxpbmc7ZD1QZyhmLHttb2RlOlwidmlzaWJsZVwiLGNoaWxkcmVuOmQuY2hpbGRyZW59KTswPT09KGIubW9kZSYxKSYmKGQubGFuZXM9Yyk7ZC5yZXR1cm49YjtkLnNpYmxpbmc9bnVsbDtudWxsIT09YSYmKGM9Yi5kZWxldGlvbnMsbnVsbD09PWM/KGIuZGVsZXRpb25zPVthXSxiLmZsYWdzfD0xNik6Yy5wdXNoKGEpKTtiLmNoaWxkPWQ7Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGR9XG5mdW5jdGlvbiBxaihhLGIpe2I9cGooe21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46Yn0sYS5tb2RlLDAsbnVsbCk7Yi5yZXR1cm49YTtyZXR1cm4gYS5jaGlsZD1ifWZ1bmN0aW9uIHNqKGEsYixjLGQpe251bGwhPT1kJiZKZyhkKTtVZyhiLGEuY2hpbGQsbnVsbCxjKTthPXFqKGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4pO2EuZmxhZ3N8PTI7Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGF9XG5mdW5jdGlvbiByaihhLGIsYyxkLGUsZixnKXtpZihjKXtpZihiLmZsYWdzJjI1NilyZXR1cm4gYi5mbGFncyY9LTI1NyxkPUtpKEVycm9yKHAoNDIyKSkpLHNqKGEsYixnLGQpO2lmKG51bGwhPT1iLm1lbW9pemVkU3RhdGUpcmV0dXJuIGIuY2hpbGQ9YS5jaGlsZCxiLmZsYWdzfD0xMjgsbnVsbDtmPWQuZmFsbGJhY2s7ZT1iLm1vZGU7ZD1waih7bW9kZTpcInZpc2libGVcIixjaGlsZHJlbjpkLmNoaWxkcmVufSxlLDAsbnVsbCk7Zj1UZyhmLGUsZyxudWxsKTtmLmZsYWdzfD0yO2QucmV0dXJuPWI7Zi5yZXR1cm49YjtkLnNpYmxpbmc9ZjtiLmNoaWxkPWQ7MCE9PShiLm1vZGUmMSkmJlVnKGIsYS5jaGlsZCxudWxsLGcpO2IuY2hpbGQubWVtb2l6ZWRTdGF0ZT1uaihnKTtiLm1lbW9pemVkU3RhdGU9bWo7cmV0dXJuIGZ9aWYoMD09PShiLm1vZGUmMSkpcmV0dXJuIHNqKGEsYixnLG51bGwpO2lmKFwiJCFcIj09PWUuZGF0YSl7ZD1lLm5leHRTaWJsaW5nJiZlLm5leHRTaWJsaW5nLmRhdGFzZXQ7XG5pZihkKXZhciBoPWQuZGdzdDtkPWg7Zj1FcnJvcihwKDQxOSkpO2Q9S2koZixkLHZvaWQgMCk7cmV0dXJuIHNqKGEsYixnLGQpfWg9MCE9PShnJmEuY2hpbGRMYW5lcyk7aWYoZGh8fGgpe2Q9UTtpZihudWxsIT09ZCl7c3dpdGNoKGcmLWcpe2Nhc2UgNDplPTI7YnJlYWs7Y2FzZSAxNjplPTg7YnJlYWs7Y2FzZSA2NDpjYXNlIDEyODpjYXNlIDI1NjpjYXNlIDUxMjpjYXNlIDEwMjQ6Y2FzZSAyMDQ4OmNhc2UgNDA5NjpjYXNlIDgxOTI6Y2FzZSAxNjM4NDpjYXNlIDMyNzY4OmNhc2UgNjU1MzY6Y2FzZSAxMzEwNzI6Y2FzZSAyNjIxNDQ6Y2FzZSA1MjQyODg6Y2FzZSAxMDQ4NTc2OmNhc2UgMjA5NzE1MjpjYXNlIDQxOTQzMDQ6Y2FzZSA4Mzg4NjA4OmNhc2UgMTY3NzcyMTY6Y2FzZSAzMzU1NDQzMjpjYXNlIDY3MTA4ODY0OmU9MzI7YnJlYWs7Y2FzZSA1MzY4NzA5MTI6ZT0yNjg0MzU0NTY7YnJlYWs7ZGVmYXVsdDplPTB9ZT0wIT09KGUmKGQuc3VzcGVuZGVkTGFuZXN8ZykpPzA6ZTtcbjAhPT1lJiZlIT09Zi5yZXRyeUxhbmUmJihmLnJldHJ5TGFuZT1lLGloKGEsZSksZ2koZCxhLGUsLTEpKX10aigpO2Q9S2koRXJyb3IocCg0MjEpKSk7cmV0dXJuIHNqKGEsYixnLGQpfWlmKFwiJD9cIj09PWUuZGF0YSlyZXR1cm4gYi5mbGFnc3w9MTI4LGIuY2hpbGQ9YS5jaGlsZCxiPXVqLmJpbmQobnVsbCxhKSxlLl9yZWFjdFJldHJ5PWIsbnVsbDthPWYudHJlZUNvbnRleHQ7eWc9TGYoZS5uZXh0U2libGluZyk7eGc9YjtJPSEwO3pnPW51bGw7bnVsbCE9PWEmJihvZ1twZysrXT1yZyxvZ1twZysrXT1zZyxvZ1twZysrXT1xZyxyZz1hLmlkLHNnPWEub3ZlcmZsb3cscWc9Yik7Yj1xaihiLGQuY2hpbGRyZW4pO2IuZmxhZ3N8PTQwOTY7cmV0dXJuIGJ9ZnVuY3Rpb24gdmooYSxiLGMpe2EubGFuZXN8PWI7dmFyIGQ9YS5hbHRlcm5hdGU7bnVsbCE9PWQmJihkLmxhbmVzfD1iKTtiaChhLnJldHVybixiLGMpfVxuZnVuY3Rpb24gd2ooYSxiLGMsZCxlKXt2YXIgZj1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWY/YS5tZW1vaXplZFN0YXRlPXtpc0JhY2t3YXJkczpiLHJlbmRlcmluZzpudWxsLHJlbmRlcmluZ1N0YXJ0VGltZTowLGxhc3Q6ZCx0YWlsOmMsdGFpbE1vZGU6ZX06KGYuaXNCYWNrd2FyZHM9YixmLnJlbmRlcmluZz1udWxsLGYucmVuZGVyaW5nU3RhcnRUaW1lPTAsZi5sYXN0PWQsZi50YWlsPWMsZi50YWlsTW9kZT1lKX1cbmZ1bmN0aW9uIHhqKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPWQucmV2ZWFsT3JkZXIsZj1kLnRhaWw7WGkoYSxiLGQuY2hpbGRyZW4sYyk7ZD1MLmN1cnJlbnQ7aWYoMCE9PShkJjIpKWQ9ZCYxfDIsYi5mbGFnc3w9MTI4O2Vsc2V7aWYobnVsbCE9PWEmJjAhPT0oYS5mbGFncyYxMjgpKWE6Zm9yKGE9Yi5jaGlsZDtudWxsIT09YTspe2lmKDEzPT09YS50YWcpbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYmdmooYSxjLGIpO2Vsc2UgaWYoMTk9PT1hLnRhZyl2aihhLGMsYik7ZWxzZSBpZihudWxsIT09YS5jaGlsZCl7YS5jaGlsZC5yZXR1cm49YTthPWEuY2hpbGQ7Y29udGludWV9aWYoYT09PWIpYnJlYWsgYTtmb3IoO251bGw9PT1hLnNpYmxpbmc7KXtpZihudWxsPT09YS5yZXR1cm58fGEucmV0dXJuPT09YilicmVhayBhO2E9YS5yZXR1cm59YS5zaWJsaW5nLnJldHVybj1hLnJldHVybjthPWEuc2libGluZ31kJj0xfUcoTCxkKTtpZigwPT09KGIubW9kZSYxKSliLm1lbW9pemVkU3RhdGU9XG5udWxsO2Vsc2Ugc3dpdGNoKGUpe2Nhc2UgXCJmb3J3YXJkc1wiOmM9Yi5jaGlsZDtmb3IoZT1udWxsO251bGwhPT1jOylhPWMuYWx0ZXJuYXRlLG51bGwhPT1hJiZudWxsPT09Q2goYSkmJihlPWMpLGM9Yy5zaWJsaW5nO2M9ZTtudWxsPT09Yz8oZT1iLmNoaWxkLGIuY2hpbGQ9bnVsbCk6KGU9Yy5zaWJsaW5nLGMuc2libGluZz1udWxsKTt3aihiLCExLGUsYyxmKTticmVhaztjYXNlIFwiYmFja3dhcmRzXCI6Yz1udWxsO2U9Yi5jaGlsZDtmb3IoYi5jaGlsZD1udWxsO251bGwhPT1lOyl7YT1lLmFsdGVybmF0ZTtpZihudWxsIT09YSYmbnVsbD09PUNoKGEpKXtiLmNoaWxkPWU7YnJlYWt9YT1lLnNpYmxpbmc7ZS5zaWJsaW5nPWM7Yz1lO2U9YX13aihiLCEwLGMsbnVsbCxmKTticmVhaztjYXNlIFwidG9nZXRoZXJcIjp3aihiLCExLG51bGwsbnVsbCx2b2lkIDApO2JyZWFrO2RlZmF1bHQ6Yi5tZW1vaXplZFN0YXRlPW51bGx9cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBpaihhLGIpezA9PT0oYi5tb2RlJjEpJiZudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKX1mdW5jdGlvbiBaaShhLGIsYyl7bnVsbCE9PWEmJihiLmRlcGVuZGVuY2llcz1hLmRlcGVuZGVuY2llcyk7cmh8PWIubGFuZXM7aWYoMD09PShjJmIuY2hpbGRMYW5lcykpcmV0dXJuIG51bGw7aWYobnVsbCE9PWEmJmIuY2hpbGQhPT1hLmNoaWxkKXRocm93IEVycm9yKHAoMTUzKSk7aWYobnVsbCE9PWIuY2hpbGQpe2E9Yi5jaGlsZDtjPVBnKGEsYS5wZW5kaW5nUHJvcHMpO2IuY2hpbGQ9Yztmb3IoYy5yZXR1cm49YjtudWxsIT09YS5zaWJsaW5nOylhPWEuc2libGluZyxjPWMuc2libGluZz1QZyhhLGEucGVuZGluZ1Byb3BzKSxjLnJldHVybj1iO2Muc2libGluZz1udWxsfXJldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24geWooYSxiLGMpe3N3aXRjaChiLnRhZyl7Y2FzZSAzOmtqKGIpO0lnKCk7YnJlYWs7Y2FzZSA1OkFoKGIpO2JyZWFrO2Nhc2UgMTpaZihiLnR5cGUpJiZjZyhiKTticmVhaztjYXNlIDQ6eWgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTticmVhaztjYXNlIDEwOnZhciBkPWIudHlwZS5fY29udGV4dCxlPWIubWVtb2l6ZWRQcm9wcy52YWx1ZTtHKFdnLGQuX2N1cnJlbnRWYWx1ZSk7ZC5fY3VycmVudFZhbHVlPWU7YnJlYWs7Y2FzZSAxMzpkPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCl7aWYobnVsbCE9PWQuZGVoeWRyYXRlZClyZXR1cm4gRyhMLEwuY3VycmVudCYxKSxiLmZsYWdzfD0xMjgsbnVsbDtpZigwIT09KGMmYi5jaGlsZC5jaGlsZExhbmVzKSlyZXR1cm4gb2ooYSxiLGMpO0coTCxMLmN1cnJlbnQmMSk7YT1aaShhLGIsYyk7cmV0dXJuIG51bGwhPT1hP2Euc2libGluZzpudWxsfUcoTCxMLmN1cnJlbnQmMSk7YnJlYWs7Y2FzZSAxOTpkPTAhPT0oYyZcbmIuY2hpbGRMYW5lcyk7aWYoMCE9PShhLmZsYWdzJjEyOCkpe2lmKGQpcmV0dXJuIHhqKGEsYixjKTtiLmZsYWdzfD0xMjh9ZT1iLm1lbW9pemVkU3RhdGU7bnVsbCE9PWUmJihlLnJlbmRlcmluZz1udWxsLGUudGFpbD1udWxsLGUubGFzdEVmZmVjdD1udWxsKTtHKEwsTC5jdXJyZW50KTtpZihkKWJyZWFrO2Vsc2UgcmV0dXJuIG51bGw7Y2FzZSAyMjpjYXNlIDIzOnJldHVybiBiLmxhbmVzPTAsZGooYSxiLGMpfXJldHVybiBaaShhLGIsYyl9dmFyIHpqLEFqLEJqLENqO1xuemo9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9Yi5jaGlsZDtudWxsIT09Yzspe2lmKDU9PT1jLnRhZ3x8Nj09PWMudGFnKWEuYXBwZW5kQ2hpbGQoYy5zdGF0ZU5vZGUpO2Vsc2UgaWYoNCE9PWMudGFnJiZudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWIpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWIpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319O0FqPWZ1bmN0aW9uKCl7fTtcbkJqPWZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWEubWVtb2l6ZWRQcm9wcztpZihlIT09ZCl7YT1iLnN0YXRlTm9kZTt4aCh1aC5jdXJyZW50KTt2YXIgZj1udWxsO3N3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjplPVlhKGEsZSk7ZD1ZYShhLGQpO2Y9W107YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmU9QSh7fSxlLHt2YWx1ZTp2b2lkIDB9KTtkPUEoe30sZCx7dmFsdWU6dm9pZCAwfSk7Zj1bXTticmVhaztjYXNlIFwidGV4dGFyZWFcIjplPWdiKGEsZSk7ZD1nYihhLGQpO2Y9W107YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5vbkNsaWNrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoYS5vbmNsaWNrPUJmKX11YihjLGQpO3ZhciBnO2M9bnVsbDtmb3IobCBpbiBlKWlmKCFkLmhhc093blByb3BlcnR5KGwpJiZlLmhhc093blByb3BlcnR5KGwpJiZudWxsIT1lW2xdKWlmKFwic3R5bGVcIj09PWwpe3ZhciBoPWVbbF07Zm9yKGcgaW4gaCloLmhhc093blByb3BlcnR5KGcpJiZcbihjfHwoYz17fSksY1tnXT1cIlwiKX1lbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09bCYmXCJjaGlsZHJlblwiIT09bCYmXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWwmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1sJiZcImF1dG9Gb2N1c1wiIT09bCYmKGVhLmhhc093blByb3BlcnR5KGwpP2Z8fChmPVtdKTooZj1mfHxbXSkucHVzaChsLG51bGwpKTtmb3IobCBpbiBkKXt2YXIgaz1kW2xdO2g9bnVsbCE9ZT9lW2xdOnZvaWQgMDtpZihkLmhhc093blByb3BlcnR5KGwpJiZrIT09aCYmKG51bGwhPWt8fG51bGwhPWgpKWlmKFwic3R5bGVcIj09PWwpaWYoaCl7Zm9yKGcgaW4gaCkhaC5oYXNPd25Qcm9wZXJ0eShnKXx8ayYmay5oYXNPd25Qcm9wZXJ0eShnKXx8KGN8fChjPXt9KSxjW2ddPVwiXCIpO2ZvcihnIGluIGspay5oYXNPd25Qcm9wZXJ0eShnKSYmaFtnXSE9PWtbZ10mJihjfHwoYz17fSksY1tnXT1rW2ddKX1lbHNlIGN8fChmfHwoZj1bXSksZi5wdXNoKGwsXG5jKSksYz1rO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1sPyhrPWs/ay5fX2h0bWw6dm9pZCAwLGg9aD9oLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmaCE9PWsmJihmPWZ8fFtdKS5wdXNoKGwsaykpOlwiY2hpbGRyZW5cIj09PWw/XCJzdHJpbmdcIiE9PXR5cGVvZiBrJiZcIm51bWJlclwiIT09dHlwZW9mIGt8fChmPWZ8fFtdKS5wdXNoKGwsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09bCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWwmJihlYS5oYXNPd25Qcm9wZXJ0eShsKT8obnVsbCE9ayYmXCJvblNjcm9sbFwiPT09bCYmRChcInNjcm9sbFwiLGEpLGZ8fGg9PT1rfHwoZj1bXSkpOihmPWZ8fFtdKS5wdXNoKGwsaykpfWMmJihmPWZ8fFtdKS5wdXNoKFwic3R5bGVcIixjKTt2YXIgbD1mO2lmKGIudXBkYXRlUXVldWU9bCliLmZsYWdzfD00fX07Q2o9ZnVuY3Rpb24oYSxiLGMsZCl7YyE9PWQmJihiLmZsYWdzfD00KX07XG5mdW5jdGlvbiBEaihhLGIpe2lmKCFJKXN3aXRjaChhLnRhaWxNb2RlKXtjYXNlIFwiaGlkZGVuXCI6Yj1hLnRhaWw7Zm9yKHZhciBjPW51bGw7bnVsbCE9PWI7KW51bGwhPT1iLmFsdGVybmF0ZSYmKGM9YiksYj1iLnNpYmxpbmc7bnVsbD09PWM/YS50YWlsPW51bGw6Yy5zaWJsaW5nPW51bGw7YnJlYWs7Y2FzZSBcImNvbGxhcHNlZFwiOmM9YS50YWlsO2Zvcih2YXIgZD1udWxsO251bGwhPT1jOyludWxsIT09Yy5hbHRlcm5hdGUmJihkPWMpLGM9Yy5zaWJsaW5nO251bGw9PT1kP2J8fG51bGw9PT1hLnRhaWw/YS50YWlsPW51bGw6YS50YWlsLnNpYmxpbmc9bnVsbDpkLnNpYmxpbmc9bnVsbH19XG5mdW5jdGlvbiBTKGEpe3ZhciBiPW51bGwhPT1hLmFsdGVybmF0ZSYmYS5hbHRlcm5hdGUuY2hpbGQ9PT1hLmNoaWxkLGM9MCxkPTA7aWYoYilmb3IodmFyIGU9YS5jaGlsZDtudWxsIT09ZTspY3w9ZS5sYW5lc3xlLmNoaWxkTGFuZXMsZHw9ZS5zdWJ0cmVlRmxhZ3MmMTQ2ODAwNjQsZHw9ZS5mbGFncyYxNDY4MDA2NCxlLnJldHVybj1hLGU9ZS5zaWJsaW5nO2Vsc2UgZm9yKGU9YS5jaGlsZDtudWxsIT09ZTspY3w9ZS5sYW5lc3xlLmNoaWxkTGFuZXMsZHw9ZS5zdWJ0cmVlRmxhZ3MsZHw9ZS5mbGFncyxlLnJldHVybj1hLGU9ZS5zaWJsaW5nO2Euc3VidHJlZUZsYWdzfD1kO2EuY2hpbGRMYW5lcz1jO3JldHVybiBifVxuZnVuY3Rpb24gRWooYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzO3dnKGIpO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmNhc2UgMTY6Y2FzZSAxNTpjYXNlIDA6Y2FzZSAxMTpjYXNlIDc6Y2FzZSA4OmNhc2UgMTI6Y2FzZSA5OmNhc2UgMTQ6cmV0dXJuIFMoYiksbnVsbDtjYXNlIDE6cmV0dXJuIFpmKGIudHlwZSkmJiRmKCksUyhiKSxudWxsO2Nhc2UgMzpkPWIuc3RhdGVOb2RlO3poKCk7RShXZik7RShIKTtFaCgpO2QucGVuZGluZ0NvbnRleHQmJihkLmNvbnRleHQ9ZC5wZW5kaW5nQ29udGV4dCxkLnBlbmRpbmdDb250ZXh0PW51bGwpO2lmKG51bGw9PT1hfHxudWxsPT09YS5jaGlsZClHZyhiKT9iLmZsYWdzfD00Om51bGw9PT1hfHxhLm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkJiYwPT09KGIuZmxhZ3MmMjU2KXx8KGIuZmxhZ3N8PTEwMjQsbnVsbCE9PXpnJiYoRmooemcpLHpnPW51bGwpKTtBaihhLGIpO1MoYik7cmV0dXJuIG51bGw7Y2FzZSA1OkJoKGIpO3ZhciBlPXhoKHdoLmN1cnJlbnQpO1xuYz1iLnR5cGU7aWYobnVsbCE9PWEmJm51bGwhPWIuc3RhdGVOb2RlKUJqKGEsYixjLGQsZSksYS5yZWYhPT1iLnJlZiYmKGIuZmxhZ3N8PTUxMixiLmZsYWdzfD0yMDk3MTUyKTtlbHNle2lmKCFkKXtpZihudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IocCgxNjYpKTtTKGIpO3JldHVybiBudWxsfWE9eGgodWguY3VycmVudCk7aWYoR2coYikpe2Q9Yi5zdGF0ZU5vZGU7Yz1iLnR5cGU7dmFyIGY9Yi5tZW1vaXplZFByb3BzO2RbT2ZdPWI7ZFtQZl09ZjthPTAhPT0oYi5tb2RlJjEpO3N3aXRjaChjKXtjYXNlIFwiZGlhbG9nXCI6RChcImNhbmNlbFwiLGQpO0QoXCJjbG9zZVwiLGQpO2JyZWFrO2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RChcImxvYWRcIixkKTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoZT0wO2U8bGYubGVuZ3RoO2UrKylEKGxmW2VdLGQpO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpEKFwiZXJyb3JcIixkKTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpEKFwiZXJyb3JcIixcbmQpO0QoXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpEKFwidG9nZ2xlXCIsZCk7YnJlYWs7Y2FzZSBcImlucHV0XCI6WmEoZCxmKTtEKFwiaW52YWxpZFwiLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpkLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhZi5tdWx0aXBsZX07RChcImludmFsaWRcIixkKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpoYihkLGYpLEQoXCJpbnZhbGlkXCIsZCl9dWIoYyxmKTtlPW51bGw7Zm9yKHZhciBnIGluIGYpaWYoZi5oYXNPd25Qcm9wZXJ0eShnKSl7dmFyIGg9ZltnXTtcImNoaWxkcmVuXCI9PT1nP1wic3RyaW5nXCI9PT10eXBlb2YgaD9kLnRleHRDb250ZW50IT09aCYmKCEwIT09Zi5zdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcmJkFmKGQudGV4dENvbnRlbnQsaCxhKSxlPVtcImNoaWxkcmVuXCIsaF0pOlwibnVtYmVyXCI9PT10eXBlb2YgaCYmZC50ZXh0Q29udGVudCE9PVwiXCIraCYmKCEwIT09Zi5zdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcmJkFmKGQudGV4dENvbnRlbnQsXG5oLGEpLGU9W1wiY2hpbGRyZW5cIixcIlwiK2hdKTplYS5oYXNPd25Qcm9wZXJ0eShnKSYmbnVsbCE9aCYmXCJvblNjcm9sbFwiPT09ZyYmRChcInNjcm9sbFwiLGQpfXN3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpWYShkKTtkYihkLGYsITApO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZhKGQpO2piKGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpjYXNlIFwib3B0aW9uXCI6YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5vbkNsaWNrJiYoZC5vbmNsaWNrPUJmKX1kPWU7Yi51cGRhdGVRdWV1ZT1kO251bGwhPT1kJiYoYi5mbGFnc3w9NCl9ZWxzZXtnPTk9PT1lLm5vZGVUeXBlP2U6ZS5vd25lckRvY3VtZW50O1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YSYmKGE9a2IoYykpO1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9cInNjcmlwdFwiPT09Yz8oYT1nLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYS5pbm5lckhUTUw9XCI8c2NyaXB0PlxceDNjL3NjcmlwdD5cIixhPWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKSk6XG5cInN0cmluZ1wiPT09dHlwZW9mIGQuaXM/YT1nLmNyZWF0ZUVsZW1lbnQoYyx7aXM6ZC5pc30pOihhPWcuY3JlYXRlRWxlbWVudChjKSxcInNlbGVjdFwiPT09YyYmKGc9YSxkLm11bHRpcGxlP2cubXVsdGlwbGU9ITA6ZC5zaXplJiYoZy5zaXplPWQuc2l6ZSkpKTphPWcuY3JlYXRlRWxlbWVudE5TKGEsYyk7YVtPZl09YjthW1BmXT1kO3pqKGEsYiwhMSwhMSk7Yi5zdGF0ZU5vZGU9YTthOntnPXZiKGMsZCk7c3dpdGNoKGMpe2Nhc2UgXCJkaWFsb2dcIjpEKFwiY2FuY2VsXCIsYSk7RChcImNsb3NlXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RChcImxvYWRcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGU9MDtlPGxmLmxlbmd0aDtlKyspRChsZltlXSxhKTtlPWQ7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkQoXCJlcnJvclwiLGEpO2U9ZDticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpEKFwiZXJyb3JcIixcbmEpO0QoXCJsb2FkXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RChcInRvZ2dsZVwiLGEpO2U9ZDticmVhaztjYXNlIFwiaW5wdXRcIjpaYShhLGQpO2U9WWEoYSxkKTtEKFwiaW52YWxpZFwiLGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjplPWQ7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEuX3dyYXBwZXJTdGF0ZT17d2FzTXVsdGlwbGU6ISFkLm11bHRpcGxlfTtlPUEoe30sZCx7dmFsdWU6dm9pZCAwfSk7RChcImludmFsaWRcIixhKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpoYihhLGQpO2U9Z2IoYSxkKTtEKFwiaW52YWxpZFwiLGEpO2JyZWFrO2RlZmF1bHQ6ZT1kfXViKGMsZSk7aD1lO2ZvcihmIGluIGgpaWYoaC5oYXNPd25Qcm9wZXJ0eShmKSl7dmFyIGs9aFtmXTtcInN0eWxlXCI9PT1mP3NiKGEsayk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zj8oaz1rP2suX19odG1sOnZvaWQgMCxudWxsIT1rJiZuYihhLGspKTpcImNoaWxkcmVuXCI9PT1mP1wic3RyaW5nXCI9PT10eXBlb2Ygaz8oXCJ0ZXh0YXJlYVwiIT09XG5jfHxcIlwiIT09aykmJm9iKGEsayk6XCJudW1iZXJcIj09PXR5cGVvZiBrJiZvYihhLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWYmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1mJiZcImF1dG9Gb2N1c1wiIT09ZiYmKGVhLmhhc093blByb3BlcnR5KGYpP251bGwhPWsmJlwib25TY3JvbGxcIj09PWYmJkQoXCJzY3JvbGxcIixhKTpudWxsIT1rJiZ0YShhLGYsayxnKSl9c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOlZhKGEpO2RiKGEsZCwhMSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6VmEoYSk7amIoYSk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOm51bGwhPWQudmFsdWUmJmEuc2V0QXR0cmlidXRlKFwidmFsdWVcIixcIlwiK1NhKGQudmFsdWUpKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5tdWx0aXBsZT0hIWQubXVsdGlwbGU7Zj1kLnZhbHVlO251bGwhPWY/ZmIoYSwhIWQubXVsdGlwbGUsZiwhMSk6bnVsbCE9ZC5kZWZhdWx0VmFsdWUmJmZiKGEsISFkLm11bHRpcGxlLGQuZGVmYXVsdFZhbHVlLFxuITApO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGUub25DbGljayYmKGEub25jbGljaz1CZil9c3dpdGNoKGMpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6ZD0hIWQuYXV0b0ZvY3VzO2JyZWFrIGE7Y2FzZSBcImltZ1wiOmQ9ITA7YnJlYWsgYTtkZWZhdWx0OmQ9ITF9fWQmJihiLmZsYWdzfD00KX1udWxsIT09Yi5yZWYmJihiLmZsYWdzfD01MTIsYi5mbGFnc3w9MjA5NzE1Mil9UyhiKTtyZXR1cm4gbnVsbDtjYXNlIDY6aWYoYSYmbnVsbCE9Yi5zdGF0ZU5vZGUpQ2ooYSxiLGEubWVtb2l6ZWRQcm9wcyxkKTtlbHNle2lmKFwic3RyaW5nXCIhPT10eXBlb2YgZCYmbnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHAoMTY2KSk7Yz14aCh3aC5jdXJyZW50KTt4aCh1aC5jdXJyZW50KTtpZihHZyhiKSl7ZD1iLnN0YXRlTm9kZTtjPWIubWVtb2l6ZWRQcm9wcztkW09mXT1iO2lmKGY9ZC5ub2RlVmFsdWUhPT1jKWlmKGE9XG54ZyxudWxsIT09YSlzd2l0Y2goYS50YWcpe2Nhc2UgMzpBZihkLm5vZGVWYWx1ZSxjLDAhPT0oYS5tb2RlJjEpKTticmVhaztjYXNlIDU6ITAhPT1hLm1lbW9pemVkUHJvcHMuc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nJiZBZihkLm5vZGVWYWx1ZSxjLDAhPT0oYS5tb2RlJjEpKX1mJiYoYi5mbGFnc3w9NCl9ZWxzZSBkPSg5PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoZCksZFtPZl09YixiLnN0YXRlTm9kZT1kfVMoYik7cmV0dXJuIG51bGw7Y2FzZSAxMzpFKEwpO2Q9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGw9PT1hfHxudWxsIT09YS5tZW1vaXplZFN0YXRlJiZudWxsIT09YS5tZW1vaXplZFN0YXRlLmRlaHlkcmF0ZWQpe2lmKEkmJm51bGwhPT15ZyYmMCE9PShiLm1vZGUmMSkmJjA9PT0oYi5mbGFncyYxMjgpKUhnKCksSWcoKSxiLmZsYWdzfD05ODU2MCxmPSExO2Vsc2UgaWYoZj1HZyhiKSxudWxsIT09ZCYmbnVsbCE9PWQuZGVoeWRyYXRlZCl7aWYobnVsbD09PVxuYSl7aWYoIWYpdGhyb3cgRXJyb3IocCgzMTgpKTtmPWIubWVtb2l6ZWRTdGF0ZTtmPW51bGwhPT1mP2YuZGVoeWRyYXRlZDpudWxsO2lmKCFmKXRocm93IEVycm9yKHAoMzE3KSk7ZltPZl09Yn1lbHNlIElnKCksMD09PShiLmZsYWdzJjEyOCkmJihiLm1lbW9pemVkU3RhdGU9bnVsbCksYi5mbGFnc3w9NDtTKGIpO2Y9ITF9ZWxzZSBudWxsIT09emcmJihGaih6Zyksemc9bnVsbCksZj0hMDtpZighZilyZXR1cm4gYi5mbGFncyY2NTUzNj9iOm51bGx9aWYoMCE9PShiLmZsYWdzJjEyOCkpcmV0dXJuIGIubGFuZXM9YyxiO2Q9bnVsbCE9PWQ7ZCE9PShudWxsIT09YSYmbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSkmJmQmJihiLmNoaWxkLmZsYWdzfD04MTkyLDAhPT0oYi5tb2RlJjEpJiYobnVsbD09PWF8fDAhPT0oTC5jdXJyZW50JjEpPzA9PT1UJiYoVD0zKTp0aigpKSk7bnVsbCE9PWIudXBkYXRlUXVldWUmJihiLmZsYWdzfD00KTtTKGIpO3JldHVybiBudWxsO2Nhc2UgNDpyZXR1cm4gemgoKSxcbkFqKGEsYiksbnVsbD09PWEmJnNmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLFMoYiksbnVsbDtjYXNlIDEwOnJldHVybiBhaChiLnR5cGUuX2NvbnRleHQpLFMoYiksbnVsbDtjYXNlIDE3OnJldHVybiBaZihiLnR5cGUpJiYkZigpLFMoYiksbnVsbDtjYXNlIDE5OkUoTCk7Zj1iLm1lbW9pemVkU3RhdGU7aWYobnVsbD09PWYpcmV0dXJuIFMoYiksbnVsbDtkPTAhPT0oYi5mbGFncyYxMjgpO2c9Zi5yZW5kZXJpbmc7aWYobnVsbD09PWcpaWYoZClEaihmLCExKTtlbHNle2lmKDAhPT1UfHxudWxsIT09YSYmMCE9PShhLmZsYWdzJjEyOCkpZm9yKGE9Yi5jaGlsZDtudWxsIT09YTspe2c9Q2goYSk7aWYobnVsbCE9PWcpe2IuZmxhZ3N8PTEyODtEaihmLCExKTtkPWcudXBkYXRlUXVldWU7bnVsbCE9PWQmJihiLnVwZGF0ZVF1ZXVlPWQsYi5mbGFnc3w9NCk7Yi5zdWJ0cmVlRmxhZ3M9MDtkPWM7Zm9yKGM9Yi5jaGlsZDtudWxsIT09YzspZj1jLGE9ZCxmLmZsYWdzJj0xNDY4MDA2Nixcbmc9Zi5hbHRlcm5hdGUsbnVsbD09PWc/KGYuY2hpbGRMYW5lcz0wLGYubGFuZXM9YSxmLmNoaWxkPW51bGwsZi5zdWJ0cmVlRmxhZ3M9MCxmLm1lbW9pemVkUHJvcHM9bnVsbCxmLm1lbW9pemVkU3RhdGU9bnVsbCxmLnVwZGF0ZVF1ZXVlPW51bGwsZi5kZXBlbmRlbmNpZXM9bnVsbCxmLnN0YXRlTm9kZT1udWxsKTooZi5jaGlsZExhbmVzPWcuY2hpbGRMYW5lcyxmLmxhbmVzPWcubGFuZXMsZi5jaGlsZD1nLmNoaWxkLGYuc3VidHJlZUZsYWdzPTAsZi5kZWxldGlvbnM9bnVsbCxmLm1lbW9pemVkUHJvcHM9Zy5tZW1vaXplZFByb3BzLGYubWVtb2l6ZWRTdGF0ZT1nLm1lbW9pemVkU3RhdGUsZi51cGRhdGVRdWV1ZT1nLnVwZGF0ZVF1ZXVlLGYudHlwZT1nLnR5cGUsYT1nLmRlcGVuZGVuY2llcyxmLmRlcGVuZGVuY2llcz1udWxsPT09YT9udWxsOntsYW5lczphLmxhbmVzLGZpcnN0Q29udGV4dDphLmZpcnN0Q29udGV4dH0pLGM9Yy5zaWJsaW5nO0coTCxMLmN1cnJlbnQmMXwyKTtyZXR1cm4gYi5jaGlsZH1hPVxuYS5zaWJsaW5nfW51bGwhPT1mLnRhaWwmJkIoKT5HaiYmKGIuZmxhZ3N8PTEyOCxkPSEwLERqKGYsITEpLGIubGFuZXM9NDE5NDMwNCl9ZWxzZXtpZighZClpZihhPUNoKGcpLG51bGwhPT1hKXtpZihiLmZsYWdzfD0xMjgsZD0hMCxjPWEudXBkYXRlUXVldWUsbnVsbCE9PWMmJihiLnVwZGF0ZVF1ZXVlPWMsYi5mbGFnc3w9NCksRGooZiwhMCksbnVsbD09PWYudGFpbCYmXCJoaWRkZW5cIj09PWYudGFpbE1vZGUmJiFnLmFsdGVybmF0ZSYmIUkpcmV0dXJuIFMoYiksbnVsbH1lbHNlIDIqQigpLWYucmVuZGVyaW5nU3RhcnRUaW1lPkdqJiYxMDczNzQxODI0IT09YyYmKGIuZmxhZ3N8PTEyOCxkPSEwLERqKGYsITEpLGIubGFuZXM9NDE5NDMwNCk7Zi5pc0JhY2t3YXJkcz8oZy5zaWJsaW5nPWIuY2hpbGQsYi5jaGlsZD1nKTooYz1mLmxhc3QsbnVsbCE9PWM/Yy5zaWJsaW5nPWc6Yi5jaGlsZD1nLGYubGFzdD1nKX1pZihudWxsIT09Zi50YWlsKXJldHVybiBiPWYudGFpbCxmLnJlbmRlcmluZz1cbmIsZi50YWlsPWIuc2libGluZyxmLnJlbmRlcmluZ1N0YXJ0VGltZT1CKCksYi5zaWJsaW5nPW51bGwsYz1MLmN1cnJlbnQsRyhMLGQ/YyYxfDI6YyYxKSxiO1MoYik7cmV0dXJuIG51bGw7Y2FzZSAyMjpjYXNlIDIzOnJldHVybiBIaigpLGQ9bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSxudWxsIT09YSYmbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSE9PWQmJihiLmZsYWdzfD04MTkyKSxkJiYwIT09KGIubW9kZSYxKT8wIT09KGZqJjEwNzM3NDE4MjQpJiYoUyhiKSxiLnN1YnRyZWVGbGFncyY2JiYoYi5mbGFnc3w9ODE5MikpOlMoYiksbnVsbDtjYXNlIDI0OnJldHVybiBudWxsO2Nhc2UgMjU6cmV0dXJuIG51bGx9dGhyb3cgRXJyb3IocCgxNTYsYi50YWcpKTt9XG5mdW5jdGlvbiBJaihhLGIpe3dnKGIpO3N3aXRjaChiLnRhZyl7Y2FzZSAxOnJldHVybiBaZihiLnR5cGUpJiYkZigpLGE9Yi5mbGFncyxhJjY1NTM2PyhiLmZsYWdzPWEmLTY1NTM3fDEyOCxiKTpudWxsO2Nhc2UgMzpyZXR1cm4gemgoKSxFKFdmKSxFKEgpLEVoKCksYT1iLmZsYWdzLDAhPT0oYSY2NTUzNikmJjA9PT0oYSYxMjgpPyhiLmZsYWdzPWEmLTY1NTM3fDEyOCxiKTpudWxsO2Nhc2UgNTpyZXR1cm4gQmgoYiksbnVsbDtjYXNlIDEzOkUoTCk7YT1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWEmJm51bGwhPT1hLmRlaHlkcmF0ZWQpe2lmKG51bGw9PT1iLmFsdGVybmF0ZSl0aHJvdyBFcnJvcihwKDM0MCkpO0lnKCl9YT1iLmZsYWdzO3JldHVybiBhJjY1NTM2PyhiLmZsYWdzPWEmLTY1NTM3fDEyOCxiKTpudWxsO2Nhc2UgMTk6cmV0dXJuIEUoTCksbnVsbDtjYXNlIDQ6cmV0dXJuIHpoKCksbnVsbDtjYXNlIDEwOnJldHVybiBhaChiLnR5cGUuX2NvbnRleHQpLG51bGw7Y2FzZSAyMjpjYXNlIDIzOnJldHVybiBIaigpLFxubnVsbDtjYXNlIDI0OnJldHVybiBudWxsO2RlZmF1bHQ6cmV0dXJuIG51bGx9fXZhciBKaj0hMSxVPSExLEtqPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrU2V0P1dlYWtTZXQ6U2V0LFY9bnVsbDtmdW5jdGlvbiBMaihhLGIpe3ZhciBjPWEucmVmO2lmKG51bGwhPT1jKWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjKXRyeXtjKG51bGwpfWNhdGNoKGQpe1coYSxiLGQpfWVsc2UgYy5jdXJyZW50PW51bGx9ZnVuY3Rpb24gTWooYSxiLGMpe3RyeXtjKCl9Y2F0Y2goZCl7VyhhLGIsZCl9fXZhciBOaj0hMTtcbmZ1bmN0aW9uIE9qKGEsYil7Q2Y9ZGQ7YT1NZSgpO2lmKE5lKGEpKXtpZihcInNlbGVjdGlvblN0YXJ0XCJpbiBhKXZhciBjPXtzdGFydDphLnNlbGVjdGlvblN0YXJ0LGVuZDphLnNlbGVjdGlvbkVuZH07ZWxzZSBhOntjPShjPWEub3duZXJEb2N1bWVudCkmJmMuZGVmYXVsdFZpZXd8fHdpbmRvdzt2YXIgZD1jLmdldFNlbGVjdGlvbiYmYy5nZXRTZWxlY3Rpb24oKTtpZihkJiYwIT09ZC5yYW5nZUNvdW50KXtjPWQuYW5jaG9yTm9kZTt2YXIgZT1kLmFuY2hvck9mZnNldCxmPWQuZm9jdXNOb2RlO2Q9ZC5mb2N1c09mZnNldDt0cnl7Yy5ub2RlVHlwZSxmLm5vZGVUeXBlfWNhdGNoKEYpe2M9bnVsbDticmVhayBhfXZhciBnPTAsaD0tMSxrPS0xLGw9MCxtPTAscT1hLHI9bnVsbDtiOmZvcig7Oyl7Zm9yKHZhciB5Ozspe3EhPT1jfHwwIT09ZSYmMyE9PXEubm9kZVR5cGV8fChoPWcrZSk7cSE9PWZ8fDAhPT1kJiYzIT09cS5ub2RlVHlwZXx8KGs9ZytkKTszPT09cS5ub2RlVHlwZSYmKGcrPVxucS5ub2RlVmFsdWUubGVuZ3RoKTtpZihudWxsPT09KHk9cS5maXJzdENoaWxkKSlicmVhaztyPXE7cT15fWZvcig7Oyl7aWYocT09PWEpYnJlYWsgYjtyPT09YyYmKytsPT09ZSYmKGg9Zyk7cj09PWYmJisrbT09PWQmJihrPWcpO2lmKG51bGwhPT0oeT1xLm5leHRTaWJsaW5nKSlicmVhaztxPXI7cj1xLnBhcmVudE5vZGV9cT15fWM9LTE9PT1ofHwtMT09PWs/bnVsbDp7c3RhcnQ6aCxlbmQ6a319ZWxzZSBjPW51bGx9Yz1jfHx7c3RhcnQ6MCxlbmQ6MH19ZWxzZSBjPW51bGw7RGY9e2ZvY3VzZWRFbGVtOmEsc2VsZWN0aW9uUmFuZ2U6Y307ZGQ9ITE7Zm9yKFY9YjtudWxsIT09VjspaWYoYj1WLGE9Yi5jaGlsZCwwIT09KGIuc3VidHJlZUZsYWdzJjEwMjgpJiZudWxsIT09YSlhLnJldHVybj1iLFY9YTtlbHNlIGZvcig7bnVsbCE9PVY7KXtiPVY7dHJ5e3ZhciBuPWIuYWx0ZXJuYXRlO2lmKDAhPT0oYi5mbGFncyYxMDI0KSlzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6YnJlYWs7XG5jYXNlIDE6aWYobnVsbCE9PW4pe3ZhciB0PW4ubWVtb2l6ZWRQcm9wcyxKPW4ubWVtb2l6ZWRTdGF0ZSx4PWIuc3RhdGVOb2RlLHc9eC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShiLmVsZW1lbnRUeXBlPT09Yi50eXBlP3Q6Q2koYi50eXBlLHQpLEopO3guX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGU9d31icmVhaztjYXNlIDM6dmFyIHU9Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzsxPT09dS5ub2RlVHlwZT91LnRleHRDb250ZW50PVwiXCI6OT09PXUubm9kZVR5cGUmJnUuZG9jdW1lbnRFbGVtZW50JiZ1LnJlbW92ZUNoaWxkKHUuZG9jdW1lbnRFbGVtZW50KTticmVhaztjYXNlIDU6Y2FzZSA2OmNhc2UgNDpjYXNlIDE3OmJyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IocCgxNjMpKTt9fWNhdGNoKEYpe1coYixiLnJldHVybixGKX1hPWIuc2libGluZztpZihudWxsIT09YSl7YS5yZXR1cm49Yi5yZXR1cm47Vj1hO2JyZWFrfVY9Yi5yZXR1cm59bj1OajtOaj0hMTtyZXR1cm4gbn1cbmZ1bmN0aW9uIFBqKGEsYixjKXt2YXIgZD1iLnVwZGF0ZVF1ZXVlO2Q9bnVsbCE9PWQ/ZC5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWQpe3ZhciBlPWQ9ZC5uZXh0O2Rve2lmKChlLnRhZyZhKT09PWEpe3ZhciBmPWUuZGVzdHJveTtlLmRlc3Ryb3k9dm9pZCAwO3ZvaWQgMCE9PWYmJk1qKGIsYyxmKX1lPWUubmV4dH13aGlsZShlIT09ZCl9fWZ1bmN0aW9uIFFqKGEsYil7Yj1iLnVwZGF0ZVF1ZXVlO2I9bnVsbCE9PWI/Yi5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWIpe3ZhciBjPWI9Yi5uZXh0O2Rve2lmKChjLnRhZyZhKT09PWEpe3ZhciBkPWMuY3JlYXRlO2MuZGVzdHJveT1kKCl9Yz1jLm5leHR9d2hpbGUoYyE9PWIpfX1mdW5jdGlvbiBSaihhKXt2YXIgYj1hLnJlZjtpZihudWxsIT09Yil7dmFyIGM9YS5zdGF0ZU5vZGU7c3dpdGNoKGEudGFnKXtjYXNlIDU6YT1jO2JyZWFrO2RlZmF1bHQ6YT1jfVwiZnVuY3Rpb25cIj09PXR5cGVvZiBiP2IoYSk6Yi5jdXJyZW50PWF9fVxuZnVuY3Rpb24gU2ooYSl7dmFyIGI9YS5hbHRlcm5hdGU7bnVsbCE9PWImJihhLmFsdGVybmF0ZT1udWxsLFNqKGIpKTthLmNoaWxkPW51bGw7YS5kZWxldGlvbnM9bnVsbDthLnNpYmxpbmc9bnVsbDs1PT09YS50YWcmJihiPWEuc3RhdGVOb2RlLG51bGwhPT1iJiYoZGVsZXRlIGJbT2ZdLGRlbGV0ZSBiW1BmXSxkZWxldGUgYltvZl0sZGVsZXRlIGJbUWZdLGRlbGV0ZSBiW1JmXSkpO2Euc3RhdGVOb2RlPW51bGw7YS5yZXR1cm49bnVsbDthLmRlcGVuZGVuY2llcz1udWxsO2EubWVtb2l6ZWRQcm9wcz1udWxsO2EubWVtb2l6ZWRTdGF0ZT1udWxsO2EucGVuZGluZ1Byb3BzPW51bGw7YS5zdGF0ZU5vZGU9bnVsbDthLnVwZGF0ZVF1ZXVlPW51bGx9ZnVuY3Rpb24gVGooYSl7cmV0dXJuIDU9PT1hLnRhZ3x8Mz09PWEudGFnfHw0PT09YS50YWd9XG5mdW5jdGlvbiBVaihhKXthOmZvcig7Oyl7Zm9yKDtudWxsPT09YS5zaWJsaW5nOyl7aWYobnVsbD09PWEucmV0dXJufHxUaihhLnJldHVybikpcmV0dXJuIG51bGw7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2ZvcihhPWEuc2libGluZzs1IT09YS50YWcmJjYhPT1hLnRhZyYmMTghPT1hLnRhZzspe2lmKGEuZmxhZ3MmMiljb250aW51ZSBhO2lmKG51bGw9PT1hLmNoaWxkfHw0PT09YS50YWcpY29udGludWUgYTtlbHNlIGEuY2hpbGQucmV0dXJuPWEsYT1hLmNoaWxkfWlmKCEoYS5mbGFncyYyKSlyZXR1cm4gYS5zdGF0ZU5vZGV9fVxuZnVuY3Rpb24gVmooYSxiLGMpe3ZhciBkPWEudGFnO2lmKDU9PT1kfHw2PT09ZClhPWEuc3RhdGVOb2RlLGI/OD09PWMubm9kZVR5cGU/Yy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLGIpOmMuaW5zZXJ0QmVmb3JlKGEsYik6KDg9PT1jLm5vZGVUeXBlPyhiPWMucGFyZW50Tm9kZSxiLmluc2VydEJlZm9yZShhLGMpKTooYj1jLGIuYXBwZW5kQ2hpbGQoYSkpLGM9Yy5fcmVhY3RSb290Q29udGFpbmVyLG51bGwhPT1jJiZ2b2lkIDAhPT1jfHxudWxsIT09Yi5vbmNsaWNrfHwoYi5vbmNsaWNrPUJmKSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKFZqKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspVmooYSxiLGMpLGE9YS5zaWJsaW5nfVxuZnVuY3Rpb24gV2ooYSxiLGMpe3ZhciBkPWEudGFnO2lmKDU9PT1kfHw2PT09ZClhPWEuc3RhdGVOb2RlLGI/Yy5pbnNlcnRCZWZvcmUoYSxiKTpjLmFwcGVuZENoaWxkKGEpO2Vsc2UgaWYoNCE9PWQmJihhPWEuY2hpbGQsbnVsbCE9PWEpKWZvcihXaihhLGIsYyksYT1hLnNpYmxpbmc7bnVsbCE9PWE7KVdqKGEsYixjKSxhPWEuc2libGluZ312YXIgWD1udWxsLFhqPSExO2Z1bmN0aW9uIFlqKGEsYixjKXtmb3IoYz1jLmNoaWxkO251bGwhPT1jOylaaihhLGIsYyksYz1jLnNpYmxpbmd9XG5mdW5jdGlvbiBaaihhLGIsYyl7aWYobGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBsYy5vbkNvbW1pdEZpYmVyVW5tb3VudCl0cnl7bGMub25Db21taXRGaWJlclVubW91bnQoa2MsYyl9Y2F0Y2goaCl7fXN3aXRjaChjLnRhZyl7Y2FzZSA1OlV8fExqKGMsYik7Y2FzZSA2OnZhciBkPVgsZT1YajtYPW51bGw7WWooYSxiLGMpO1g9ZDtYaj1lO251bGwhPT1YJiYoWGo/KGE9WCxjPWMuc3RhdGVOb2RlLDg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChjKTphLnJlbW92ZUNoaWxkKGMpKTpYLnJlbW92ZUNoaWxkKGMuc3RhdGVOb2RlKSk7YnJlYWs7Y2FzZSAxODpudWxsIT09WCYmKFhqPyhhPVgsYz1jLnN0YXRlTm9kZSw4PT09YS5ub2RlVHlwZT9LZihhLnBhcmVudE5vZGUsYyk6MT09PWEubm9kZVR5cGUmJktmKGEsYyksYmQoYSkpOktmKFgsYy5zdGF0ZU5vZGUpKTticmVhaztjYXNlIDQ6ZD1YO2U9WGo7WD1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO1hqPSEwO1xuWWooYSxiLGMpO1g9ZDtYaj1lO2JyZWFrO2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTppZighVSYmKGQ9Yy51cGRhdGVRdWV1ZSxudWxsIT09ZCYmKGQ9ZC5sYXN0RWZmZWN0LG51bGwhPT1kKSkpe2U9ZD1kLm5leHQ7ZG97dmFyIGY9ZSxnPWYuZGVzdHJveTtmPWYudGFnO3ZvaWQgMCE9PWcmJigwIT09KGYmMik/TWooYyxiLGcpOjAhPT0oZiY0KSYmTWooYyxiLGcpKTtlPWUubmV4dH13aGlsZShlIT09ZCl9WWooYSxiLGMpO2JyZWFrO2Nhc2UgMTppZighVSYmKExqKGMsYiksZD1jLnN0YXRlTm9kZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnRXaWxsVW5tb3VudCkpdHJ5e2QucHJvcHM9Yy5tZW1vaXplZFByb3BzLGQuc3RhdGU9Yy5tZW1vaXplZFN0YXRlLGQuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaChoKXtXKGMsYixoKX1ZaihhLGIsYyk7YnJlYWs7Y2FzZSAyMTpZaihhLGIsYyk7YnJlYWs7Y2FzZSAyMjpjLm1vZGUmMT8oVT0oZD1VKXx8bnVsbCE9PVxuYy5tZW1vaXplZFN0YXRlLFlqKGEsYixjKSxVPWQpOllqKGEsYixjKTticmVhaztkZWZhdWx0OllqKGEsYixjKX19ZnVuY3Rpb24gYWsoYSl7dmFyIGI9YS51cGRhdGVRdWV1ZTtpZihudWxsIT09Yil7YS51cGRhdGVRdWV1ZT1udWxsO3ZhciBjPWEuc3RhdGVOb2RlO251bGw9PT1jJiYoYz1hLnN0YXRlTm9kZT1uZXcgS2opO2IuZm9yRWFjaChmdW5jdGlvbihiKXt2YXIgZD1iay5iaW5kKG51bGwsYSxiKTtjLmhhcyhiKXx8KGMuYWRkKGIpLGIudGhlbihkLGQpKX0pfX1cbmZ1bmN0aW9uIGNrKGEsYil7dmFyIGM9Yi5kZWxldGlvbnM7aWYobnVsbCE9PWMpZm9yKHZhciBkPTA7ZDxjLmxlbmd0aDtkKyspe3ZhciBlPWNbZF07dHJ5e3ZhciBmPWEsZz1iLGg9ZzthOmZvcig7bnVsbCE9PWg7KXtzd2l0Y2goaC50YWcpe2Nhc2UgNTpYPWguc3RhdGVOb2RlO1hqPSExO2JyZWFrIGE7Y2FzZSAzOlg9aC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztYaj0hMDticmVhayBhO2Nhc2UgNDpYPWguc3RhdGVOb2RlLmNvbnRhaW5lckluZm87WGo9ITA7YnJlYWsgYX1oPWgucmV0dXJufWlmKG51bGw9PT1YKXRocm93IEVycm9yKHAoMTYwKSk7WmooZixnLGUpO1g9bnVsbDtYaj0hMTt2YXIgaz1lLmFsdGVybmF0ZTtudWxsIT09ayYmKGsucmV0dXJuPW51bGwpO2UucmV0dXJuPW51bGx9Y2F0Y2gobCl7VyhlLGIsbCl9fWlmKGIuc3VidHJlZUZsYWdzJjEyODU0KWZvcihiPWIuY2hpbGQ7bnVsbCE9PWI7KWRrKGIsYSksYj1iLnNpYmxpbmd9XG5mdW5jdGlvbiBkayhhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlLGQ9YS5mbGFncztzd2l0Y2goYS50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpjayhiLGEpO2VrKGEpO2lmKGQmNCl7dHJ5e1BqKDMsYSxhLnJldHVybiksUWooMyxhKX1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9dHJ5e1BqKDUsYSxhLnJldHVybil9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfX1icmVhaztjYXNlIDE6Y2soYixhKTtlayhhKTtkJjUxMiYmbnVsbCE9PWMmJkxqKGMsYy5yZXR1cm4pO2JyZWFrO2Nhc2UgNTpjayhiLGEpO2VrKGEpO2QmNTEyJiZudWxsIT09YyYmTGooYyxjLnJldHVybik7aWYoYS5mbGFncyYzMil7dmFyIGU9YS5zdGF0ZU5vZGU7dHJ5e29iKGUsXCJcIil9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfX1pZihkJjQmJihlPWEuc3RhdGVOb2RlLG51bGwhPWUpKXt2YXIgZj1hLm1lbW9pemVkUHJvcHMsZz1udWxsIT09Yz9jLm1lbW9pemVkUHJvcHM6ZixoPWEudHlwZSxrPWEudXBkYXRlUXVldWU7XG5hLnVwZGF0ZVF1ZXVlPW51bGw7aWYobnVsbCE9PWspdHJ5e1wiaW5wdXRcIj09PWgmJlwicmFkaW9cIj09PWYudHlwZSYmbnVsbCE9Zi5uYW1lJiZhYihlLGYpO3ZiKGgsZyk7dmFyIGw9dmIoaCxmKTtmb3IoZz0wO2c8ay5sZW5ndGg7Zys9Mil7dmFyIG09a1tnXSxxPWtbZysxXTtcInN0eWxlXCI9PT1tP3NiKGUscSk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09bT9uYihlLHEpOlwiY2hpbGRyZW5cIj09PW0/b2IoZSxxKTp0YShlLG0scSxsKX1zd2l0Y2goaCl7Y2FzZSBcImlucHV0XCI6YmIoZSxmKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjppYihlLGYpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjp2YXIgcj1lLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU7ZS5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlPSEhZi5tdWx0aXBsZTt2YXIgeT1mLnZhbHVlO251bGwhPXk/ZmIoZSwhIWYubXVsdGlwbGUseSwhMSk6ciE9PSEhZi5tdWx0aXBsZSYmKG51bGwhPWYuZGVmYXVsdFZhbHVlP2ZiKGUsISFmLm11bHRpcGxlLFxuZi5kZWZhdWx0VmFsdWUsITApOmZiKGUsISFmLm11bHRpcGxlLGYubXVsdGlwbGU/W106XCJcIiwhMSkpfWVbUGZdPWZ9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfX1icmVhaztjYXNlIDY6Y2soYixhKTtlayhhKTtpZihkJjQpe2lmKG51bGw9PT1hLnN0YXRlTm9kZSl0aHJvdyBFcnJvcihwKDE2MikpO2U9YS5zdGF0ZU5vZGU7Zj1hLm1lbW9pemVkUHJvcHM7dHJ5e2Uubm9kZVZhbHVlPWZ9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfX1icmVhaztjYXNlIDM6Y2soYixhKTtlayhhKTtpZihkJjQmJm51bGwhPT1jJiZjLm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkKXRyeXtiZChiLmNvbnRhaW5lckluZm8pfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX1icmVhaztjYXNlIDQ6Y2soYixhKTtlayhhKTticmVhaztjYXNlIDEzOmNrKGIsYSk7ZWsoYSk7ZT1hLmNoaWxkO2UuZmxhZ3MmODE5MiYmKGY9bnVsbCE9PWUubWVtb2l6ZWRTdGF0ZSxlLnN0YXRlTm9kZS5pc0hpZGRlbj1mLCFmfHxcbm51bGwhPT1lLmFsdGVybmF0ZSYmbnVsbCE9PWUuYWx0ZXJuYXRlLm1lbW9pemVkU3RhdGV8fChmaz1CKCkpKTtkJjQmJmFrKGEpO2JyZWFrO2Nhc2UgMjI6bT1udWxsIT09YyYmbnVsbCE9PWMubWVtb2l6ZWRTdGF0ZTthLm1vZGUmMT8oVT0obD1VKXx8bSxjayhiLGEpLFU9bCk6Y2soYixhKTtlayhhKTtpZihkJjgxOTIpe2w9bnVsbCE9PWEubWVtb2l6ZWRTdGF0ZTtpZigoYS5zdGF0ZU5vZGUuaXNIaWRkZW49bCkmJiFtJiYwIT09KGEubW9kZSYxKSlmb3IoVj1hLG09YS5jaGlsZDtudWxsIT09bTspe2ZvcihxPVY9bTtudWxsIT09Vjspe3I9Vjt5PXIuY2hpbGQ7c3dpdGNoKHIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6UGooNCxyLHIucmV0dXJuKTticmVhaztjYXNlIDE6TGoocixyLnJldHVybik7dmFyIG49ci5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIG4uY29tcG9uZW50V2lsbFVubW91bnQpe2Q9cjtjPXIucmV0dXJuO3RyeXtiPWQsbi5wcm9wcz1cbmIubWVtb2l6ZWRQcm9wcyxuLnN0YXRlPWIubWVtb2l6ZWRTdGF0ZSxuLmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2godCl7VyhkLGMsdCl9fWJyZWFrO2Nhc2UgNTpMaihyLHIucmV0dXJuKTticmVhaztjYXNlIDIyOmlmKG51bGwhPT1yLm1lbW9pemVkU3RhdGUpe2drKHEpO2NvbnRpbnVlfX1udWxsIT09eT8oeS5yZXR1cm49cixWPXkpOmdrKHEpfW09bS5zaWJsaW5nfWE6Zm9yKG09bnVsbCxxPWE7Oyl7aWYoNT09PXEudGFnKXtpZihudWxsPT09bSl7bT1xO3RyeXtlPXEuc3RhdGVOb2RlLGw/KGY9ZS5zdHlsZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5zZXRQcm9wZXJ0eT9mLnNldFByb3BlcnR5KFwiZGlzcGxheVwiLFwibm9uZVwiLFwiaW1wb3J0YW50XCIpOmYuZGlzcGxheT1cIm5vbmVcIik6KGg9cS5zdGF0ZU5vZGUsaz1xLm1lbW9pemVkUHJvcHMuc3R5bGUsZz12b2lkIDAhPT1rJiZudWxsIT09ayYmay5oYXNPd25Qcm9wZXJ0eShcImRpc3BsYXlcIik/ay5kaXNwbGF5Om51bGwsaC5zdHlsZS5kaXNwbGF5PVxucmIoXCJkaXNwbGF5XCIsZykpfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19fWVsc2UgaWYoNj09PXEudGFnKXtpZihudWxsPT09bSl0cnl7cS5zdGF0ZU5vZGUubm9kZVZhbHVlPWw/XCJcIjpxLm1lbW9pemVkUHJvcHN9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfX1lbHNlIGlmKCgyMiE9PXEudGFnJiYyMyE9PXEudGFnfHxudWxsPT09cS5tZW1vaXplZFN0YXRlfHxxPT09YSkmJm51bGwhPT1xLmNoaWxkKXtxLmNoaWxkLnJldHVybj1xO3E9cS5jaGlsZDtjb250aW51ZX1pZihxPT09YSlicmVhayBhO2Zvcig7bnVsbD09PXEuc2libGluZzspe2lmKG51bGw9PT1xLnJldHVybnx8cS5yZXR1cm49PT1hKWJyZWFrIGE7bT09PXEmJihtPW51bGwpO3E9cS5yZXR1cm59bT09PXEmJihtPW51bGwpO3Euc2libGluZy5yZXR1cm49cS5yZXR1cm47cT1xLnNpYmxpbmd9fWJyZWFrO2Nhc2UgMTk6Y2soYixhKTtlayhhKTtkJjQmJmFrKGEpO2JyZWFrO2Nhc2UgMjE6YnJlYWs7ZGVmYXVsdDpjayhiLFxuYSksZWsoYSl9fWZ1bmN0aW9uIGVrKGEpe3ZhciBiPWEuZmxhZ3M7aWYoYiYyKXt0cnl7YTp7Zm9yKHZhciBjPWEucmV0dXJuO251bGwhPT1jOyl7aWYoVGooYykpe3ZhciBkPWM7YnJlYWsgYX1jPWMucmV0dXJufXRocm93IEVycm9yKHAoMTYwKSk7fXN3aXRjaChkLnRhZyl7Y2FzZSA1OnZhciBlPWQuc3RhdGVOb2RlO2QuZmxhZ3MmMzImJihvYihlLFwiXCIpLGQuZmxhZ3MmPS0zMyk7dmFyIGY9VWooYSk7V2ooYSxmLGUpO2JyZWFrO2Nhc2UgMzpjYXNlIDQ6dmFyIGc9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyxoPVVqKGEpO1ZqKGEsaCxnKTticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHAoMTYxKSk7fX1jYXRjaChrKXtXKGEsYS5yZXR1cm4sayl9YS5mbGFncyY9LTN9YiY0MDk2JiYoYS5mbGFncyY9LTQwOTcpfWZ1bmN0aW9uIGhrKGEsYixjKXtWPWE7aWsoYSxiLGMpfVxuZnVuY3Rpb24gaWsoYSxiLGMpe2Zvcih2YXIgZD0wIT09KGEubW9kZSYxKTtudWxsIT09Vjspe3ZhciBlPVYsZj1lLmNoaWxkO2lmKDIyPT09ZS50YWcmJmQpe3ZhciBnPW51bGwhPT1lLm1lbW9pemVkU3RhdGV8fEpqO2lmKCFnKXt2YXIgaD1lLmFsdGVybmF0ZSxrPW51bGwhPT1oJiZudWxsIT09aC5tZW1vaXplZFN0YXRlfHxVO2g9Smo7dmFyIGw9VTtKaj1nO2lmKChVPWspJiYhbClmb3IoVj1lO251bGwhPT1WOylnPVYsaz1nLmNoaWxkLDIyPT09Zy50YWcmJm51bGwhPT1nLm1lbW9pemVkU3RhdGU/amsoZSk6bnVsbCE9PWs/KGsucmV0dXJuPWcsVj1rKTpqayhlKTtmb3IoO251bGwhPT1mOylWPWYsaWsoZixiLGMpLGY9Zi5zaWJsaW5nO1Y9ZTtKaj1oO1U9bH1rayhhLGIsYyl9ZWxzZSAwIT09KGUuc3VidHJlZUZsYWdzJjg3NzIpJiZudWxsIT09Zj8oZi5yZXR1cm49ZSxWPWYpOmtrKGEsYixjKX19XG5mdW5jdGlvbiBrayhhKXtmb3IoO251bGwhPT1WOyl7dmFyIGI9VjtpZigwIT09KGIuZmxhZ3MmODc3Mikpe3ZhciBjPWIuYWx0ZXJuYXRlO3RyeXtpZigwIT09KGIuZmxhZ3MmODc3Mikpc3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OlV8fFFqKDUsYik7YnJlYWs7Y2FzZSAxOnZhciBkPWIuc3RhdGVOb2RlO2lmKGIuZmxhZ3MmNCYmIVUpaWYobnVsbD09PWMpZC5jb21wb25lbnREaWRNb3VudCgpO2Vsc2V7dmFyIGU9Yi5lbGVtZW50VHlwZT09PWIudHlwZT9jLm1lbW9pemVkUHJvcHM6Q2koYi50eXBlLGMubWVtb2l6ZWRQcm9wcyk7ZC5jb21wb25lbnREaWRVcGRhdGUoZSxjLm1lbW9pemVkU3RhdGUsZC5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSl9dmFyIGY9Yi51cGRhdGVRdWV1ZTtudWxsIT09ZiYmc2goYixmLGQpO2JyZWFrO2Nhc2UgMzp2YXIgZz1iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1nKXtjPW51bGw7aWYobnVsbCE9PWIuY2hpbGQpc3dpdGNoKGIuY2hpbGQudGFnKXtjYXNlIDU6Yz1cbmIuY2hpbGQuc3RhdGVOb2RlO2JyZWFrO2Nhc2UgMTpjPWIuY2hpbGQuc3RhdGVOb2RlfXNoKGIsZyxjKX1icmVhaztjYXNlIDU6dmFyIGg9Yi5zdGF0ZU5vZGU7aWYobnVsbD09PWMmJmIuZmxhZ3MmNCl7Yz1oO3ZhciBrPWIubWVtb2l6ZWRQcm9wcztzd2l0Y2goYi50eXBlKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOmsuYXV0b0ZvY3VzJiZjLmZvY3VzKCk7YnJlYWs7Y2FzZSBcImltZ1wiOmsuc3JjJiYoYy5zcmM9ay5zcmMpfX1icmVhaztjYXNlIDY6YnJlYWs7Y2FzZSA0OmJyZWFrO2Nhc2UgMTI6YnJlYWs7Y2FzZSAxMzppZihudWxsPT09Yi5tZW1vaXplZFN0YXRlKXt2YXIgbD1iLmFsdGVybmF0ZTtpZihudWxsIT09bCl7dmFyIG09bC5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1tKXt2YXIgcT1tLmRlaHlkcmF0ZWQ7bnVsbCE9PXEmJmJkKHEpfX19YnJlYWs7Y2FzZSAxOTpjYXNlIDE3OmNhc2UgMjE6Y2FzZSAyMjpjYXNlIDIzOmNhc2UgMjU6YnJlYWs7XG5kZWZhdWx0OnRocm93IEVycm9yKHAoMTYzKSk7fVV8fGIuZmxhZ3MmNTEyJiZSaihiKX1jYXRjaChyKXtXKGIsYi5yZXR1cm4scil9fWlmKGI9PT1hKXtWPW51bGw7YnJlYWt9Yz1iLnNpYmxpbmc7aWYobnVsbCE9PWMpe2MucmV0dXJuPWIucmV0dXJuO1Y9YzticmVha31WPWIucmV0dXJufX1mdW5jdGlvbiBnayhhKXtmb3IoO251bGwhPT1WOyl7dmFyIGI9VjtpZihiPT09YSl7Vj1udWxsO2JyZWFrfXZhciBjPWIuc2libGluZztpZihudWxsIT09Yyl7Yy5yZXR1cm49Yi5yZXR1cm47Vj1jO2JyZWFrfVY9Yi5yZXR1cm59fVxuZnVuY3Rpb24gamsoYSl7Zm9yKDtudWxsIT09Vjspe3ZhciBiPVY7dHJ5e3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTp2YXIgYz1iLnJldHVybjt0cnl7UWooNCxiKX1jYXRjaChrKXtXKGIsYyxrKX1icmVhaztjYXNlIDE6dmFyIGQ9Yi5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkTW91bnQpe3ZhciBlPWIucmV0dXJuO3RyeXtkLmNvbXBvbmVudERpZE1vdW50KCl9Y2F0Y2goayl7VyhiLGUsayl9fXZhciBmPWIucmV0dXJuO3RyeXtSaihiKX1jYXRjaChrKXtXKGIsZixrKX1icmVhaztjYXNlIDU6dmFyIGc9Yi5yZXR1cm47dHJ5e1JqKGIpfWNhdGNoKGspe1coYixnLGspfX19Y2F0Y2goayl7VyhiLGIucmV0dXJuLGspfWlmKGI9PT1hKXtWPW51bGw7YnJlYWt9dmFyIGg9Yi5zaWJsaW5nO2lmKG51bGwhPT1oKXtoLnJldHVybj1iLnJldHVybjtWPWg7YnJlYWt9Vj1iLnJldHVybn19XG52YXIgbGs9TWF0aC5jZWlsLG1rPXVhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsbms9dWEuUmVhY3RDdXJyZW50T3duZXIsb2s9dWEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcsSz0wLFE9bnVsbCxZPW51bGwsWj0wLGZqPTAsZWo9VWYoMCksVD0wLHBrPW51bGwscmg9MCxxaz0wLHJrPTAsc2s9bnVsbCx0az1udWxsLGZrPTAsR2o9SW5maW5pdHksdWs9bnVsbCxPaT0hMSxQaT1udWxsLFJpPW51bGwsdms9ITEsd2s9bnVsbCx4az0wLHlrPTAsems9bnVsbCxBaz0tMSxCaz0wO2Z1bmN0aW9uIFIoKXtyZXR1cm4gMCE9PShLJjYpP0IoKTotMSE9PUFrP0FrOkFrPUIoKX1cbmZ1bmN0aW9uIHlpKGEpe2lmKDA9PT0oYS5tb2RlJjEpKXJldHVybiAxO2lmKDAhPT0oSyYyKSYmMCE9PVopcmV0dXJuIFomLVo7aWYobnVsbCE9PUtnLnRyYW5zaXRpb24pcmV0dXJuIDA9PT1CayYmKEJrPXljKCkpLEJrO2E9QztpZigwIT09YSlyZXR1cm4gYTthPXdpbmRvdy5ldmVudDthPXZvaWQgMD09PWE/MTY6amQoYS50eXBlKTtyZXR1cm4gYX1mdW5jdGlvbiBnaShhLGIsYyxkKXtpZig1MDx5ayl0aHJvdyB5az0wLHprPW51bGwsRXJyb3IocCgxODUpKTtBYyhhLGMsZCk7aWYoMD09PShLJjIpfHxhIT09USlhPT09USYmKDA9PT0oSyYyKSYmKHFrfD1jKSw0PT09VCYmQ2soYSxaKSksRGsoYSxkKSwxPT09YyYmMD09PUsmJjA9PT0oYi5tb2RlJjEpJiYoR2o9QigpKzUwMCxmZyYmamcoKSl9XG5mdW5jdGlvbiBEayhhLGIpe3ZhciBjPWEuY2FsbGJhY2tOb2RlO3djKGEsYik7dmFyIGQ9dWMoYSxhPT09UT9aOjApO2lmKDA9PT1kKW51bGwhPT1jJiZiYyhjKSxhLmNhbGxiYWNrTm9kZT1udWxsLGEuY2FsbGJhY2tQcmlvcml0eT0wO2Vsc2UgaWYoYj1kJi1kLGEuY2FsbGJhY2tQcmlvcml0eSE9PWIpe251bGwhPWMmJmJjKGMpO2lmKDE9PT1iKTA9PT1hLnRhZz9pZyhFay5iaW5kKG51bGwsYSkpOmhnKEVrLmJpbmQobnVsbCxhKSksSmYoZnVuY3Rpb24oKXswPT09KEsmNikmJmpnKCl9KSxjPW51bGw7ZWxzZXtzd2l0Y2goRGMoZCkpe2Nhc2UgMTpjPWZjO2JyZWFrO2Nhc2UgNDpjPWdjO2JyZWFrO2Nhc2UgMTY6Yz1oYzticmVhaztjYXNlIDUzNjg3MDkxMjpjPWpjO2JyZWFrO2RlZmF1bHQ6Yz1oY31jPUZrKGMsR2suYmluZChudWxsLGEpKX1hLmNhbGxiYWNrUHJpb3JpdHk9YjthLmNhbGxiYWNrTm9kZT1jfX1cbmZ1bmN0aW9uIEdrKGEsYil7QWs9LTE7Qms9MDtpZigwIT09KEsmNikpdGhyb3cgRXJyb3IocCgzMjcpKTt2YXIgYz1hLmNhbGxiYWNrTm9kZTtpZihIaygpJiZhLmNhbGxiYWNrTm9kZSE9PWMpcmV0dXJuIG51bGw7dmFyIGQ9dWMoYSxhPT09UT9aOjApO2lmKDA9PT1kKXJldHVybiBudWxsO2lmKDAhPT0oZCYzMCl8fDAhPT0oZCZhLmV4cGlyZWRMYW5lcyl8fGIpYj1JayhhLGQpO2Vsc2V7Yj1kO3ZhciBlPUs7S3w9Mjt2YXIgZj1KaygpO2lmKFEhPT1hfHxaIT09Yil1az1udWxsLEdqPUIoKSs1MDAsS2soYSxiKTtkbyB0cnl7TGsoKTticmVha31jYXRjaChoKXtNayhhLGgpfXdoaWxlKDEpOyRnKCk7bWsuY3VycmVudD1mO0s9ZTtudWxsIT09WT9iPTA6KFE9bnVsbCxaPTAsYj1UKX1pZigwIT09Yil7Mj09PWImJihlPXhjKGEpLDAhPT1lJiYoZD1lLGI9TmsoYSxlKSkpO2lmKDE9PT1iKXRocm93IGM9cGssS2soYSwwKSxDayhhLGQpLERrKGEsQigpKSxjO2lmKDY9PT1iKUNrKGEsZCk7XG5lbHNle2U9YS5jdXJyZW50LmFsdGVybmF0ZTtpZigwPT09KGQmMzApJiYhT2soZSkmJihiPUlrKGEsZCksMj09PWImJihmPXhjKGEpLDAhPT1mJiYoZD1mLGI9TmsoYSxmKSkpLDE9PT1iKSl0aHJvdyBjPXBrLEtrKGEsMCksQ2soYSxkKSxEayhhLEIoKSksYzthLmZpbmlzaGVkV29yaz1lO2EuZmluaXNoZWRMYW5lcz1kO3N3aXRjaChiKXtjYXNlIDA6Y2FzZSAxOnRocm93IEVycm9yKHAoMzQ1KSk7Y2FzZSAyOlBrKGEsdGssdWspO2JyZWFrO2Nhc2UgMzpDayhhLGQpO2lmKChkJjEzMDAyMzQyNCk9PT1kJiYoYj1mays1MDAtQigpLDEwPGIpKXtpZigwIT09dWMoYSwwKSlicmVhaztlPWEuc3VzcGVuZGVkTGFuZXM7aWYoKGUmZCkhPT1kKXtSKCk7YS5waW5nZWRMYW5lc3w9YS5zdXNwZW5kZWRMYW5lcyZlO2JyZWFrfWEudGltZW91dEhhbmRsZT1GZihQay5iaW5kKG51bGwsYSx0ayx1ayksYik7YnJlYWt9UGsoYSx0ayx1ayk7YnJlYWs7Y2FzZSA0OkNrKGEsZCk7aWYoKGQmNDE5NDI0MCk9PT1cbmQpYnJlYWs7Yj1hLmV2ZW50VGltZXM7Zm9yKGU9LTE7MDxkOyl7dmFyIGc9MzEtb2MoZCk7Zj0xPDxnO2c9YltnXTtnPmUmJihlPWcpO2QmPX5mfWQ9ZTtkPUIoKS1kO2Q9KDEyMD5kPzEyMDo0ODA+ZD80ODA6MTA4MD5kPzEwODA6MTkyMD5kPzE5MjA6M0UzPmQ/M0UzOjQzMjA+ZD80MzIwOjE5NjAqbGsoZC8xOTYwKSktZDtpZigxMDxkKXthLnRpbWVvdXRIYW5kbGU9RmYoUGsuYmluZChudWxsLGEsdGssdWspLGQpO2JyZWFrfVBrKGEsdGssdWspO2JyZWFrO2Nhc2UgNTpQayhhLHRrLHVrKTticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHAoMzI5KSk7fX19RGsoYSxCKCkpO3JldHVybiBhLmNhbGxiYWNrTm9kZT09PWM/R2suYmluZChudWxsLGEpOm51bGx9XG5mdW5jdGlvbiBOayhhLGIpe3ZhciBjPXNrO2EuY3VycmVudC5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCYmKEtrKGEsYikuZmxhZ3N8PTI1Nik7YT1JayhhLGIpOzIhPT1hJiYoYj10ayx0az1jLG51bGwhPT1iJiZGaihiKSk7cmV0dXJuIGF9ZnVuY3Rpb24gRmooYSl7bnVsbD09PXRrP3RrPWE6dGsucHVzaC5hcHBseSh0ayxhKX1cbmZ1bmN0aW9uIE9rKGEpe2Zvcih2YXIgYj1hOzspe2lmKGIuZmxhZ3MmMTYzODQpe3ZhciBjPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWMmJihjPWMuc3RvcmVzLG51bGwhPT1jKSlmb3IodmFyIGQ9MDtkPGMubGVuZ3RoO2QrKyl7dmFyIGU9Y1tkXSxmPWUuZ2V0U25hcHNob3Q7ZT1lLnZhbHVlO3RyeXtpZighSGUoZigpLGUpKXJldHVybiExfWNhdGNoKGcpe3JldHVybiExfX19Yz1iLmNoaWxkO2lmKGIuc3VidHJlZUZsYWdzJjE2Mzg0JiZudWxsIT09YyljLnJldHVybj1iLGI9YztlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWIuc2libGluZzspe2lmKG51bGw9PT1iLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiEwO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ319cmV0dXJuITB9XG5mdW5jdGlvbiBDayhhLGIpe2ImPX5yaztiJj1+cWs7YS5zdXNwZW5kZWRMYW5lc3w9YjthLnBpbmdlZExhbmVzJj1+Yjtmb3IoYT1hLmV4cGlyYXRpb25UaW1lczswPGI7KXt2YXIgYz0zMS1vYyhiKSxkPTE8PGM7YVtjXT0tMTtiJj1+ZH19ZnVuY3Rpb24gRWsoYSl7aWYoMCE9PShLJjYpKXRocm93IEVycm9yKHAoMzI3KSk7SGsoKTt2YXIgYj11YyhhLDApO2lmKDA9PT0oYiYxKSlyZXR1cm4gRGsoYSxCKCkpLG51bGw7dmFyIGM9SWsoYSxiKTtpZigwIT09YS50YWcmJjI9PT1jKXt2YXIgZD14YyhhKTswIT09ZCYmKGI9ZCxjPU5rKGEsZCkpfWlmKDE9PT1jKXRocm93IGM9cGssS2soYSwwKSxDayhhLGIpLERrKGEsQigpKSxjO2lmKDY9PT1jKXRocm93IEVycm9yKHAoMzQ1KSk7YS5maW5pc2hlZFdvcms9YS5jdXJyZW50LmFsdGVybmF0ZTthLmZpbmlzaGVkTGFuZXM9YjtQayhhLHRrLHVrKTtEayhhLEIoKSk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBRayhhLGIpe3ZhciBjPUs7S3w9MTt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtLPWMsMD09PUsmJihHaj1CKCkrNTAwLGZnJiZqZygpKX19ZnVuY3Rpb24gUmsoYSl7bnVsbCE9PXdrJiYwPT09d2sudGFnJiYwPT09KEsmNikmJkhrKCk7dmFyIGI9SztLfD0xO3ZhciBjPW9rLnRyYW5zaXRpb24sZD1DO3RyeXtpZihvay50cmFuc2l0aW9uPW51bGwsQz0xLGEpcmV0dXJuIGEoKX1maW5hbGx5e0M9ZCxvay50cmFuc2l0aW9uPWMsSz1iLDA9PT0oSyY2KSYmamcoKX19ZnVuY3Rpb24gSGooKXtmaj1lai5jdXJyZW50O0UoZWopfVxuZnVuY3Rpb24gS2soYSxiKXthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRMYW5lcz0wO3ZhciBjPWEudGltZW91dEhhbmRsZTstMSE9PWMmJihhLnRpbWVvdXRIYW5kbGU9LTEsR2YoYykpO2lmKG51bGwhPT1ZKWZvcihjPVkucmV0dXJuO251bGwhPT1jOyl7dmFyIGQ9Yzt3ZyhkKTtzd2l0Y2goZC50YWcpe2Nhc2UgMTpkPWQudHlwZS5jaGlsZENvbnRleHRUeXBlcztudWxsIT09ZCYmdm9pZCAwIT09ZCYmJGYoKTticmVhaztjYXNlIDM6emgoKTtFKFdmKTtFKEgpO0VoKCk7YnJlYWs7Y2FzZSA1OkJoKGQpO2JyZWFrO2Nhc2UgNDp6aCgpO2JyZWFrO2Nhc2UgMTM6RShMKTticmVhaztjYXNlIDE5OkUoTCk7YnJlYWs7Y2FzZSAxMDphaChkLnR5cGUuX2NvbnRleHQpO2JyZWFrO2Nhc2UgMjI6Y2FzZSAyMzpIaigpfWM9Yy5yZXR1cm59UT1hO1k9YT1QZyhhLmN1cnJlbnQsbnVsbCk7Wj1maj1iO1Q9MDtwaz1udWxsO3JrPXFrPXJoPTA7dGs9c2s9bnVsbDtpZihudWxsIT09Zmgpe2ZvcihiPVxuMDtiPGZoLmxlbmd0aDtiKyspaWYoYz1maFtiXSxkPWMuaW50ZXJsZWF2ZWQsbnVsbCE9PWQpe2MuaW50ZXJsZWF2ZWQ9bnVsbDt2YXIgZT1kLm5leHQsZj1jLnBlbmRpbmc7aWYobnVsbCE9PWYpe3ZhciBnPWYubmV4dDtmLm5leHQ9ZTtkLm5leHQ9Z31jLnBlbmRpbmc9ZH1maD1udWxsfXJldHVybiBhfVxuZnVuY3Rpb24gTWsoYSxiKXtkb3t2YXIgYz1ZO3RyeXskZygpO0ZoLmN1cnJlbnQ9Umg7aWYoSWgpe2Zvcih2YXIgZD1NLm1lbW9pemVkU3RhdGU7bnVsbCE9PWQ7KXt2YXIgZT1kLnF1ZXVlO251bGwhPT1lJiYoZS5wZW5kaW5nPW51bGwpO2Q9ZC5uZXh0fUloPSExfUhoPTA7Tz1OPU09bnVsbDtKaD0hMTtLaD0wO25rLmN1cnJlbnQ9bnVsbDtpZihudWxsPT09Y3x8bnVsbD09PWMucmV0dXJuKXtUPTE7cGs9YjtZPW51bGw7YnJlYWt9YTp7dmFyIGY9YSxnPWMucmV0dXJuLGg9YyxrPWI7Yj1aO2guZmxhZ3N8PTMyNzY4O2lmKG51bGwhPT1rJiZcIm9iamVjdFwiPT09dHlwZW9mIGsmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBrLnRoZW4pe3ZhciBsPWssbT1oLHE9bS50YWc7aWYoMD09PShtLm1vZGUmMSkmJigwPT09cXx8MTE9PT1xfHwxNT09PXEpKXt2YXIgcj1tLmFsdGVybmF0ZTtyPyhtLnVwZGF0ZVF1ZXVlPXIudXBkYXRlUXVldWUsbS5tZW1vaXplZFN0YXRlPXIubWVtb2l6ZWRTdGF0ZSxcbm0ubGFuZXM9ci5sYW5lcyk6KG0udXBkYXRlUXVldWU9bnVsbCxtLm1lbW9pemVkU3RhdGU9bnVsbCl9dmFyIHk9VWkoZyk7aWYobnVsbCE9PXkpe3kuZmxhZ3MmPS0yNTc7VmkoeSxnLGgsZixiKTt5Lm1vZGUmMSYmU2koZixsLGIpO2I9eTtrPWw7dmFyIG49Yi51cGRhdGVRdWV1ZTtpZihudWxsPT09bil7dmFyIHQ9bmV3IFNldDt0LmFkZChrKTtiLnVwZGF0ZVF1ZXVlPXR9ZWxzZSBuLmFkZChrKTticmVhayBhfWVsc2V7aWYoMD09PShiJjEpKXtTaShmLGwsYik7dGooKTticmVhayBhfWs9RXJyb3IocCg0MjYpKX19ZWxzZSBpZihJJiZoLm1vZGUmMSl7dmFyIEo9VWkoZyk7aWYobnVsbCE9PUopezA9PT0oSi5mbGFncyY2NTUzNikmJihKLmZsYWdzfD0yNTYpO1ZpKEosZyxoLGYsYik7SmcoSmkoayxoKSk7YnJlYWsgYX19Zj1rPUppKGssaCk7NCE9PVQmJihUPTIpO251bGw9PT1zaz9zaz1bZl06c2sucHVzaChmKTtmPWc7ZG97c3dpdGNoKGYudGFnKXtjYXNlIDM6Zi5mbGFnc3w9NjU1MzY7XG5iJj0tYjtmLmxhbmVzfD1iO3ZhciB4PU5pKGYsayxiKTtwaChmLHgpO2JyZWFrIGE7Y2FzZSAxOmg9azt2YXIgdz1mLnR5cGUsdT1mLnN0YXRlTm9kZTtpZigwPT09KGYuZmxhZ3MmMTI4KSYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiB3LmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8bnVsbCE9PXUmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiB1LmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PVJpfHwhUmkuaGFzKHUpKSkpe2YuZmxhZ3N8PTY1NTM2O2ImPS1iO2YubGFuZXN8PWI7dmFyIEY9UWkoZixoLGIpO3BoKGYsRik7YnJlYWsgYX19Zj1mLnJldHVybn13aGlsZShudWxsIT09Zil9U2soYyl9Y2F0Y2gobmEpe2I9bmE7WT09PWMmJm51bGwhPT1jJiYoWT1jPWMucmV0dXJuKTtjb250aW51ZX1icmVha313aGlsZSgxKX1mdW5jdGlvbiBKaygpe3ZhciBhPW1rLmN1cnJlbnQ7bWsuY3VycmVudD1SaDtyZXR1cm4gbnVsbD09PWE/Umg6YX1cbmZ1bmN0aW9uIHRqKCl7aWYoMD09PVR8fDM9PT1UfHwyPT09VClUPTQ7bnVsbD09PVF8fDA9PT0ocmgmMjY4NDM1NDU1KSYmMD09PShxayYyNjg0MzU0NTUpfHxDayhRLFopfWZ1bmN0aW9uIElrKGEsYil7dmFyIGM9SztLfD0yO3ZhciBkPUprKCk7aWYoUSE9PWF8fFohPT1iKXVrPW51bGwsS2soYSxiKTtkbyB0cnl7VGsoKTticmVha31jYXRjaChlKXtNayhhLGUpfXdoaWxlKDEpOyRnKCk7Sz1jO21rLmN1cnJlbnQ9ZDtpZihudWxsIT09WSl0aHJvdyBFcnJvcihwKDI2MSkpO1E9bnVsbDtaPTA7cmV0dXJuIFR9ZnVuY3Rpb24gVGsoKXtmb3IoO251bGwhPT1ZOylVayhZKX1mdW5jdGlvbiBMaygpe2Zvcig7bnVsbCE9PVkmJiFjYygpOylVayhZKX1mdW5jdGlvbiBVayhhKXt2YXIgYj1WayhhLmFsdGVybmF0ZSxhLGZqKTthLm1lbW9pemVkUHJvcHM9YS5wZW5kaW5nUHJvcHM7bnVsbD09PWI/U2soYSk6WT1iO25rLmN1cnJlbnQ9bnVsbH1cbmZ1bmN0aW9uIFNrKGEpe3ZhciBiPWE7ZG97dmFyIGM9Yi5hbHRlcm5hdGU7YT1iLnJldHVybjtpZigwPT09KGIuZmxhZ3MmMzI3NjgpKXtpZihjPUVqKGMsYixmaiksbnVsbCE9PWMpe1k9YztyZXR1cm59fWVsc2V7Yz1JaihjLGIpO2lmKG51bGwhPT1jKXtjLmZsYWdzJj0zMjc2NztZPWM7cmV0dXJufWlmKG51bGwhPT1hKWEuZmxhZ3N8PTMyNzY4LGEuc3VidHJlZUZsYWdzPTAsYS5kZWxldGlvbnM9bnVsbDtlbHNle1Q9NjtZPW51bGw7cmV0dXJufX1iPWIuc2libGluZztpZihudWxsIT09Yil7WT1iO3JldHVybn1ZPWI9YX13aGlsZShudWxsIT09Yik7MD09PVQmJihUPTUpfWZ1bmN0aW9uIFBrKGEsYixjKXt2YXIgZD1DLGU9b2sudHJhbnNpdGlvbjt0cnl7b2sudHJhbnNpdGlvbj1udWxsLEM9MSxXayhhLGIsYyxkKX1maW5hbGx5e29rLnRyYW5zaXRpb249ZSxDPWR9cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBXayhhLGIsYyxkKXtkbyBIaygpO3doaWxlKG51bGwhPT13ayk7aWYoMCE9PShLJjYpKXRocm93IEVycm9yKHAoMzI3KSk7Yz1hLmZpbmlzaGVkV29yazt2YXIgZT1hLmZpbmlzaGVkTGFuZXM7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkTGFuZXM9MDtpZihjPT09YS5jdXJyZW50KXRocm93IEVycm9yKHAoMTc3KSk7YS5jYWxsYmFja05vZGU9bnVsbDthLmNhbGxiYWNrUHJpb3JpdHk9MDt2YXIgZj1jLmxhbmVzfGMuY2hpbGRMYW5lcztCYyhhLGYpO2E9PT1RJiYoWT1RPW51bGwsWj0wKTswPT09KGMuc3VidHJlZUZsYWdzJjIwNjQpJiYwPT09KGMuZmxhZ3MmMjA2NCl8fHZrfHwodms9ITAsRmsoaGMsZnVuY3Rpb24oKXtIaygpO3JldHVybiBudWxsfSkpO2Y9MCE9PShjLmZsYWdzJjE1OTkwKTtpZigwIT09KGMuc3VidHJlZUZsYWdzJjE1OTkwKXx8Zil7Zj1vay50cmFuc2l0aW9uO29rLnRyYW5zaXRpb249bnVsbDtcbnZhciBnPUM7Qz0xO3ZhciBoPUs7S3w9NDtuay5jdXJyZW50PW51bGw7T2ooYSxjKTtkayhjLGEpO09lKERmKTtkZD0hIUNmO0RmPUNmPW51bGw7YS5jdXJyZW50PWM7aGsoYyxhLGUpO2RjKCk7Sz1oO0M9Zztvay50cmFuc2l0aW9uPWZ9ZWxzZSBhLmN1cnJlbnQ9Yzt2ayYmKHZrPSExLHdrPWEseGs9ZSk7Zj1hLnBlbmRpbmdMYW5lczswPT09ZiYmKFJpPW51bGwpO21jKGMuc3RhdGVOb2RlLGQpO0RrKGEsQigpKTtpZihudWxsIT09Yilmb3IoZD1hLm9uUmVjb3ZlcmFibGVFcnJvcixjPTA7YzxiLmxlbmd0aDtjKyspZT1iW2NdLGQoZS52YWx1ZSx7Y29tcG9uZW50U3RhY2s6ZS5zdGFjayxkaWdlc3Q6ZS5kaWdlc3R9KTtpZihPaSl0aHJvdyBPaT0hMSxhPVBpLFBpPW51bGwsYTswIT09KHhrJjEpJiYwIT09YS50YWcmJkhrKCk7Zj1hLnBlbmRpbmdMYW5lczswIT09KGYmMSk/YT09PXprP3lrKys6KHlrPTAsems9YSk6eWs9MDtqZygpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gSGsoKXtpZihudWxsIT09d2spe3ZhciBhPURjKHhrKSxiPW9rLnRyYW5zaXRpb24sYz1DO3RyeXtvay50cmFuc2l0aW9uPW51bGw7Qz0xNj5hPzE2OmE7aWYobnVsbD09PXdrKXZhciBkPSExO2Vsc2V7YT13azt3az1udWxsO3hrPTA7aWYoMCE9PShLJjYpKXRocm93IEVycm9yKHAoMzMxKSk7dmFyIGU9SztLfD00O2ZvcihWPWEuY3VycmVudDtudWxsIT09Vjspe3ZhciBmPVYsZz1mLmNoaWxkO2lmKDAhPT0oVi5mbGFncyYxNikpe3ZhciBoPWYuZGVsZXRpb25zO2lmKG51bGwhPT1oKXtmb3IodmFyIGs9MDtrPGgubGVuZ3RoO2srKyl7dmFyIGw9aFtrXTtmb3IoVj1sO251bGwhPT1WOyl7dmFyIG09Vjtzd2l0Y2gobS50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6UGooOCxtLGYpfXZhciBxPW0uY2hpbGQ7aWYobnVsbCE9PXEpcS5yZXR1cm49bSxWPXE7ZWxzZSBmb3IoO251bGwhPT1WOyl7bT1WO3ZhciByPW0uc2libGluZyx5PW0ucmV0dXJuO1NqKG0pO2lmKG09PT1cbmwpe1Y9bnVsbDticmVha31pZihudWxsIT09cil7ci5yZXR1cm49eTtWPXI7YnJlYWt9Vj15fX19dmFyIG49Zi5hbHRlcm5hdGU7aWYobnVsbCE9PW4pe3ZhciB0PW4uY2hpbGQ7aWYobnVsbCE9PXQpe24uY2hpbGQ9bnVsbDtkb3t2YXIgSj10LnNpYmxpbmc7dC5zaWJsaW5nPW51bGw7dD1KfXdoaWxlKG51bGwhPT10KX19Vj1mfX1pZigwIT09KGYuc3VidHJlZUZsYWdzJjIwNjQpJiZudWxsIT09ZylnLnJldHVybj1mLFY9ZztlbHNlIGI6Zm9yKDtudWxsIT09Vjspe2Y9VjtpZigwIT09KGYuZmxhZ3MmMjA0OCkpc3dpdGNoKGYudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OlBqKDksZixmLnJldHVybil9dmFyIHg9Zi5zaWJsaW5nO2lmKG51bGwhPT14KXt4LnJldHVybj1mLnJldHVybjtWPXg7YnJlYWsgYn1WPWYucmV0dXJufX12YXIgdz1hLmN1cnJlbnQ7Zm9yKFY9dztudWxsIT09Vjspe2c9Vjt2YXIgdT1nLmNoaWxkO2lmKDAhPT0oZy5zdWJ0cmVlRmxhZ3MmMjA2NCkmJm51bGwhPT1cbnUpdS5yZXR1cm49ZyxWPXU7ZWxzZSBiOmZvcihnPXc7bnVsbCE9PVY7KXtoPVY7aWYoMCE9PShoLmZsYWdzJjIwNDgpKXRyeXtzd2l0Y2goaC50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6UWooOSxoKX19Y2F0Y2gobmEpe1coaCxoLnJldHVybixuYSl9aWYoaD09PWcpe1Y9bnVsbDticmVhayBifXZhciBGPWguc2libGluZztpZihudWxsIT09Ril7Ri5yZXR1cm49aC5yZXR1cm47Vj1GO2JyZWFrIGJ9Vj1oLnJldHVybn19Sz1lO2pnKCk7aWYobGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBsYy5vblBvc3RDb21taXRGaWJlclJvb3QpdHJ5e2xjLm9uUG9zdENvbW1pdEZpYmVyUm9vdChrYyxhKX1jYXRjaChuYSl7fWQ9ITB9cmV0dXJuIGR9ZmluYWxseXtDPWMsb2sudHJhbnNpdGlvbj1ifX1yZXR1cm4hMX1mdW5jdGlvbiBYayhhLGIsYyl7Yj1KaShjLGIpO2I9TmkoYSxiLDEpO2E9bmgoYSxiLDEpO2I9UigpO251bGwhPT1hJiYoQWMoYSwxLGIpLERrKGEsYikpfVxuZnVuY3Rpb24gVyhhLGIsYyl7aWYoMz09PWEudGFnKVhrKGEsYSxjKTtlbHNlIGZvcig7bnVsbCE9PWI7KXtpZigzPT09Yi50YWcpe1hrKGIsYSxjKTticmVha31lbHNlIGlmKDE9PT1iLnRhZyl7dmFyIGQ9Yi5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PVJpfHwhUmkuaGFzKGQpKSl7YT1KaShjLGEpO2E9UWkoYixhLDEpO2I9bmgoYixhLDEpO2E9UigpO251bGwhPT1iJiYoQWMoYiwxLGEpLERrKGIsYSkpO2JyZWFrfX1iPWIucmV0dXJufX1cbmZ1bmN0aW9uIFRpKGEsYixjKXt2YXIgZD1hLnBpbmdDYWNoZTtudWxsIT09ZCYmZC5kZWxldGUoYik7Yj1SKCk7YS5waW5nZWRMYW5lc3w9YS5zdXNwZW5kZWRMYW5lcyZjO1E9PT1hJiYoWiZjKT09PWMmJig0PT09VHx8Mz09PVQmJihaJjEzMDAyMzQyNCk9PT1aJiY1MDA+QigpLWZrP0trKGEsMCk6cmt8PWMpO0RrKGEsYil9ZnVuY3Rpb24gWWsoYSxiKXswPT09YiYmKDA9PT0oYS5tb2RlJjEpP2I9MTooYj1zYyxzYzw8PTEsMD09PShzYyYxMzAwMjM0MjQpJiYoc2M9NDE5NDMwNCkpKTt2YXIgYz1SKCk7YT1paChhLGIpO251bGwhPT1hJiYoQWMoYSxiLGMpLERrKGEsYykpfWZ1bmN0aW9uIHVqKGEpe3ZhciBiPWEubWVtb2l6ZWRTdGF0ZSxjPTA7bnVsbCE9PWImJihjPWIucmV0cnlMYW5lKTtZayhhLGMpfVxuZnVuY3Rpb24gYmsoYSxiKXt2YXIgYz0wO3N3aXRjaChhLnRhZyl7Y2FzZSAxMzp2YXIgZD1hLnN0YXRlTm9kZTt2YXIgZT1hLm1lbW9pemVkU3RhdGU7bnVsbCE9PWUmJihjPWUucmV0cnlMYW5lKTticmVhaztjYXNlIDE5OmQ9YS5zdGF0ZU5vZGU7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihwKDMxNCkpO31udWxsIT09ZCYmZC5kZWxldGUoYik7WWsoYSxjKX12YXIgVms7XG5Waz1mdW5jdGlvbihhLGIsYyl7aWYobnVsbCE9PWEpaWYoYS5tZW1vaXplZFByb3BzIT09Yi5wZW5kaW5nUHJvcHN8fFdmLmN1cnJlbnQpZGg9ITA7ZWxzZXtpZigwPT09KGEubGFuZXMmYykmJjA9PT0oYi5mbGFncyYxMjgpKXJldHVybiBkaD0hMSx5aihhLGIsYyk7ZGg9MCE9PShhLmZsYWdzJjEzMTA3Mik/ITA6ITF9ZWxzZSBkaD0hMSxJJiYwIT09KGIuZmxhZ3MmMTA0ODU3NikmJnVnKGIsbmcsYi5pbmRleCk7Yi5sYW5lcz0wO3N3aXRjaChiLnRhZyl7Y2FzZSAyOnZhciBkPWIudHlwZTtpaihhLGIpO2E9Yi5wZW5kaW5nUHJvcHM7dmFyIGU9WWYoYixILmN1cnJlbnQpO2NoKGIsYyk7ZT1OaChudWxsLGIsZCxhLGUsYyk7dmFyIGY9U2goKTtiLmZsYWdzfD0xO1wib2JqZWN0XCI9PT10eXBlb2YgZSYmbnVsbCE9PWUmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLnJlbmRlciYmdm9pZCAwPT09ZS4kJHR5cGVvZj8oYi50YWc9MSxiLm1lbW9pemVkU3RhdGU9bnVsbCxiLnVwZGF0ZVF1ZXVlPVxubnVsbCxaZihkKT8oZj0hMCxjZyhiKSk6Zj0hMSxiLm1lbW9pemVkU3RhdGU9bnVsbCE9PWUuc3RhdGUmJnZvaWQgMCE9PWUuc3RhdGU/ZS5zdGF0ZTpudWxsLGtoKGIpLGUudXBkYXRlcj1FaSxiLnN0YXRlTm9kZT1lLGUuX3JlYWN0SW50ZXJuYWxzPWIsSWkoYixkLGEsYyksYj1qaihudWxsLGIsZCwhMCxmLGMpKTooYi50YWc9MCxJJiZmJiZ2ZyhiKSxYaShudWxsLGIsZSxjKSxiPWIuY2hpbGQpO3JldHVybiBiO2Nhc2UgMTY6ZD1iLmVsZW1lbnRUeXBlO2E6e2lqKGEsYik7YT1iLnBlbmRpbmdQcm9wcztlPWQuX2luaXQ7ZD1lKGQuX3BheWxvYWQpO2IudHlwZT1kO2U9Yi50YWc9WmsoZCk7YT1DaShkLGEpO3N3aXRjaChlKXtjYXNlIDA6Yj1jaihudWxsLGIsZCxhLGMpO2JyZWFrIGE7Y2FzZSAxOmI9aGoobnVsbCxiLGQsYSxjKTticmVhayBhO2Nhc2UgMTE6Yj1ZaShudWxsLGIsZCxhLGMpO2JyZWFrIGE7Y2FzZSAxNDpiPSRpKG51bGwsYixkLENpKGQudHlwZSxhKSxjKTticmVhayBhfXRocm93IEVycm9yKHAoMzA2LFxuZCxcIlwiKSk7fXJldHVybiBiO2Nhc2UgMDpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6Q2koZCxlKSxjaihhLGIsZCxlLGMpO2Nhc2UgMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6Q2koZCxlKSxoaihhLGIsZCxlLGMpO2Nhc2UgMzphOntraihiKTtpZihudWxsPT09YSl0aHJvdyBFcnJvcihwKDM4NykpO2Q9Yi5wZW5kaW5nUHJvcHM7Zj1iLm1lbW9pemVkU3RhdGU7ZT1mLmVsZW1lbnQ7bGgoYSxiKTtxaChiLGQsbnVsbCxjKTt2YXIgZz1iLm1lbW9pemVkU3RhdGU7ZD1nLmVsZW1lbnQ7aWYoZi5pc0RlaHlkcmF0ZWQpaWYoZj17ZWxlbWVudDpkLGlzRGVoeWRyYXRlZDohMSxjYWNoZTpnLmNhY2hlLHBlbmRpbmdTdXNwZW5zZUJvdW5kYXJpZXM6Zy5wZW5kaW5nU3VzcGVuc2VCb3VuZGFyaWVzLHRyYW5zaXRpb25zOmcudHJhbnNpdGlvbnN9LGIudXBkYXRlUXVldWUuYmFzZVN0YXRlPVxuZixiLm1lbW9pemVkU3RhdGU9ZixiLmZsYWdzJjI1Nil7ZT1KaShFcnJvcihwKDQyMykpLGIpO2I9bGooYSxiLGQsYyxlKTticmVhayBhfWVsc2UgaWYoZCE9PWUpe2U9SmkoRXJyb3IocCg0MjQpKSxiKTtiPWxqKGEsYixkLGMsZSk7YnJlYWsgYX1lbHNlIGZvcih5Zz1MZihiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLmZpcnN0Q2hpbGQpLHhnPWIsST0hMCx6Zz1udWxsLGM9VmcoYixudWxsLGQsYyksYi5jaGlsZD1jO2M7KWMuZmxhZ3M9Yy5mbGFncyYtM3w0MDk2LGM9Yy5zaWJsaW5nO2Vsc2V7SWcoKTtpZihkPT09ZSl7Yj1aaShhLGIsYyk7YnJlYWsgYX1YaShhLGIsZCxjKX1iPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA1OnJldHVybiBBaChiKSxudWxsPT09YSYmRWcoYiksZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxmPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpudWxsLGc9ZS5jaGlsZHJlbixFZihkLGUpP2c9bnVsbDpudWxsIT09ZiYmRWYoZCxmKSYmKGIuZmxhZ3N8PTMyKSxcbmdqKGEsYiksWGkoYSxiLGcsYyksYi5jaGlsZDtjYXNlIDY6cmV0dXJuIG51bGw9PT1hJiZFZyhiKSxudWxsO2Nhc2UgMTM6cmV0dXJuIG9qKGEsYixjKTtjYXNlIDQ6cmV0dXJuIHloKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksZD1iLnBlbmRpbmdQcm9wcyxudWxsPT09YT9iLmNoaWxkPVVnKGIsbnVsbCxkLGMpOlhpKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6Q2koZCxlKSxZaShhLGIsZCxlLGMpO2Nhc2UgNzpyZXR1cm4gWGkoYSxiLGIucGVuZGluZ1Byb3BzLGMpLGIuY2hpbGQ7Y2FzZSA4OnJldHVybiBYaShhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sYyksYi5jaGlsZDtjYXNlIDEyOnJldHVybiBYaShhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sYyksYi5jaGlsZDtjYXNlIDEwOmE6e2Q9Yi50eXBlLl9jb250ZXh0O2U9Yi5wZW5kaW5nUHJvcHM7Zj1iLm1lbW9pemVkUHJvcHM7XG5nPWUudmFsdWU7RyhXZyxkLl9jdXJyZW50VmFsdWUpO2QuX2N1cnJlbnRWYWx1ZT1nO2lmKG51bGwhPT1mKWlmKEhlKGYudmFsdWUsZykpe2lmKGYuY2hpbGRyZW49PT1lLmNoaWxkcmVuJiYhV2YuY3VycmVudCl7Yj1aaShhLGIsYyk7YnJlYWsgYX19ZWxzZSBmb3IoZj1iLmNoaWxkLG51bGwhPT1mJiYoZi5yZXR1cm49Yik7bnVsbCE9PWY7KXt2YXIgaD1mLmRlcGVuZGVuY2llcztpZihudWxsIT09aCl7Zz1mLmNoaWxkO2Zvcih2YXIgaz1oLmZpcnN0Q29udGV4dDtudWxsIT09azspe2lmKGsuY29udGV4dD09PWQpe2lmKDE9PT1mLnRhZyl7az1taCgtMSxjJi1jKTtrLnRhZz0yO3ZhciBsPWYudXBkYXRlUXVldWU7aWYobnVsbCE9PWwpe2w9bC5zaGFyZWQ7dmFyIG09bC5wZW5kaW5nO251bGw9PT1tP2submV4dD1rOihrLm5leHQ9bS5uZXh0LG0ubmV4dD1rKTtsLnBlbmRpbmc9a319Zi5sYW5lc3w9YztrPWYuYWx0ZXJuYXRlO251bGwhPT1rJiYoay5sYW5lc3w9Yyk7YmgoZi5yZXR1cm4sXG5jLGIpO2gubGFuZXN8PWM7YnJlYWt9az1rLm5leHR9fWVsc2UgaWYoMTA9PT1mLnRhZylnPWYudHlwZT09PWIudHlwZT9udWxsOmYuY2hpbGQ7ZWxzZSBpZigxOD09PWYudGFnKXtnPWYucmV0dXJuO2lmKG51bGw9PT1nKXRocm93IEVycm9yKHAoMzQxKSk7Zy5sYW5lc3w9YztoPWcuYWx0ZXJuYXRlO251bGwhPT1oJiYoaC5sYW5lc3w9Yyk7YmgoZyxjLGIpO2c9Zi5zaWJsaW5nfWVsc2UgZz1mLmNoaWxkO2lmKG51bGwhPT1nKWcucmV0dXJuPWY7ZWxzZSBmb3IoZz1mO251bGwhPT1nOyl7aWYoZz09PWIpe2c9bnVsbDticmVha31mPWcuc2libGluZztpZihudWxsIT09Zil7Zi5yZXR1cm49Zy5yZXR1cm47Zz1mO2JyZWFrfWc9Zy5yZXR1cm59Zj1nfVhpKGEsYixlLmNoaWxkcmVuLGMpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDk6cmV0dXJuIGU9Yi50eXBlLGQ9Yi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sY2goYixjKSxlPWVoKGUpLGQ9ZChlKSxiLmZsYWdzfD0xLFhpKGEsYixkLGMpLFxuYi5jaGlsZDtjYXNlIDE0OnJldHVybiBkPWIudHlwZSxlPUNpKGQsYi5wZW5kaW5nUHJvcHMpLGU9Q2koZC50eXBlLGUpLCRpKGEsYixkLGUsYyk7Y2FzZSAxNTpyZXR1cm4gYmooYSxiLGIudHlwZSxiLnBlbmRpbmdQcm9wcyxjKTtjYXNlIDE3OnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpDaShkLGUpLGlqKGEsYiksYi50YWc9MSxaZihkKT8oYT0hMCxjZyhiKSk6YT0hMSxjaChiLGMpLEdpKGIsZCxlKSxJaShiLGQsZSxjKSxqaihudWxsLGIsZCwhMCxhLGMpO2Nhc2UgMTk6cmV0dXJuIHhqKGEsYixjKTtjYXNlIDIyOnJldHVybiBkaihhLGIsYyl9dGhyb3cgRXJyb3IocCgxNTYsYi50YWcpKTt9O2Z1bmN0aW9uIEZrKGEsYil7cmV0dXJuIGFjKGEsYil9XG5mdW5jdGlvbiAkayhhLGIsYyxkKXt0aGlzLnRhZz1hO3RoaXMua2V5PWM7dGhpcy5zaWJsaW5nPXRoaXMuY2hpbGQ9dGhpcy5yZXR1cm49dGhpcy5zdGF0ZU5vZGU9dGhpcy50eXBlPXRoaXMuZWxlbWVudFR5cGU9bnVsbDt0aGlzLmluZGV4PTA7dGhpcy5yZWY9bnVsbDt0aGlzLnBlbmRpbmdQcm9wcz1iO3RoaXMuZGVwZW5kZW5jaWVzPXRoaXMubWVtb2l6ZWRTdGF0ZT10aGlzLnVwZGF0ZVF1ZXVlPXRoaXMubWVtb2l6ZWRQcm9wcz1udWxsO3RoaXMubW9kZT1kO3RoaXMuc3VidHJlZUZsYWdzPXRoaXMuZmxhZ3M9MDt0aGlzLmRlbGV0aW9ucz1udWxsO3RoaXMuY2hpbGRMYW5lcz10aGlzLmxhbmVzPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1mdW5jdGlvbiBCZyhhLGIsYyxkKXtyZXR1cm4gbmV3ICRrKGEsYixjLGQpfWZ1bmN0aW9uIGFqKGEpe2E9YS5wcm90b3R5cGU7cmV0dXJuISghYXx8IWEuaXNSZWFjdENvbXBvbmVudCl9XG5mdW5jdGlvbiBaayhhKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYWooYSk/MTowO2lmKHZvaWQgMCE9PWEmJm51bGwhPT1hKXthPWEuJCR0eXBlb2Y7aWYoYT09PURhKXJldHVybiAxMTtpZihhPT09R2EpcmV0dXJuIDE0fXJldHVybiAyfVxuZnVuY3Rpb24gUGcoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsPT09Yz8oYz1CZyhhLnRhZyxiLGEua2V5LGEubW9kZSksYy5lbGVtZW50VHlwZT1hLmVsZW1lbnRUeXBlLGMudHlwZT1hLnR5cGUsYy5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGUsYy5hbHRlcm5hdGU9YSxhLmFsdGVybmF0ZT1jKTooYy5wZW5kaW5nUHJvcHM9YixjLnR5cGU9YS50eXBlLGMuZmxhZ3M9MCxjLnN1YnRyZWVGbGFncz0wLGMuZGVsZXRpb25zPW51bGwpO2MuZmxhZ3M9YS5mbGFncyYxNDY4MDA2NDtjLmNoaWxkTGFuZXM9YS5jaGlsZExhbmVzO2MubGFuZXM9YS5sYW5lcztjLmNoaWxkPWEuY2hpbGQ7Yy5tZW1vaXplZFByb3BzPWEubWVtb2l6ZWRQcm9wcztjLm1lbW9pemVkU3RhdGU9YS5tZW1vaXplZFN0YXRlO2MudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZTtiPWEuZGVwZW5kZW5jaWVzO2MuZGVwZW5kZW5jaWVzPW51bGw9PT1iP251bGw6e2xhbmVzOmIubGFuZXMsZmlyc3RDb250ZXh0OmIuZmlyc3RDb250ZXh0fTtcbmMuc2libGluZz1hLnNpYmxpbmc7Yy5pbmRleD1hLmluZGV4O2MucmVmPWEucmVmO3JldHVybiBjfVxuZnVuY3Rpb24gUmcoYSxiLGMsZCxlLGYpe3ZhciBnPTI7ZD1hO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKWFqKGEpJiYoZz0xKTtlbHNlIGlmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlnPTU7ZWxzZSBhOnN3aXRjaChhKXtjYXNlIHlhOnJldHVybiBUZyhjLmNoaWxkcmVuLGUsZixiKTtjYXNlIHphOmc9ODtlfD04O2JyZWFrO2Nhc2UgQWE6cmV0dXJuIGE9QmcoMTIsYyxiLGV8MiksYS5lbGVtZW50VHlwZT1BYSxhLmxhbmVzPWYsYTtjYXNlIEVhOnJldHVybiBhPUJnKDEzLGMsYixlKSxhLmVsZW1lbnRUeXBlPUVhLGEubGFuZXM9ZixhO2Nhc2UgRmE6cmV0dXJuIGE9QmcoMTksYyxiLGUpLGEuZWxlbWVudFR5cGU9RmEsYS5sYW5lcz1mLGE7Y2FzZSBJYTpyZXR1cm4gcGooYyxlLGYsYik7ZGVmYXVsdDppZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIEJhOmc9MTA7YnJlYWsgYTtjYXNlIENhOmc9OTticmVhayBhO2Nhc2UgRGE6Zz0xMTtcbmJyZWFrIGE7Y2FzZSBHYTpnPTE0O2JyZWFrIGE7Y2FzZSBIYTpnPTE2O2Q9bnVsbDticmVhayBhfXRocm93IEVycm9yKHAoMTMwLG51bGw9PWE/YTp0eXBlb2YgYSxcIlwiKSk7fWI9QmcoZyxjLGIsZSk7Yi5lbGVtZW50VHlwZT1hO2IudHlwZT1kO2IubGFuZXM9ZjtyZXR1cm4gYn1mdW5jdGlvbiBUZyhhLGIsYyxkKXthPUJnKDcsYSxkLGIpO2EubGFuZXM9YztyZXR1cm4gYX1mdW5jdGlvbiBwaihhLGIsYyxkKXthPUJnKDIyLGEsZCxiKTthLmVsZW1lbnRUeXBlPUlhO2EubGFuZXM9YzthLnN0YXRlTm9kZT17aXNIaWRkZW46ITF9O3JldHVybiBhfWZ1bmN0aW9uIFFnKGEsYixjKXthPUJnKDYsYSxudWxsLGIpO2EubGFuZXM9YztyZXR1cm4gYX1cbmZ1bmN0aW9uIFNnKGEsYixjKXtiPUJnKDQsbnVsbCE9PWEuY2hpbGRyZW4/YS5jaGlsZHJlbjpbXSxhLmtleSxiKTtiLmxhbmVzPWM7Yi5zdGF0ZU5vZGU9e2NvbnRhaW5lckluZm86YS5jb250YWluZXJJbmZvLHBlbmRpbmdDaGlsZHJlbjpudWxsLGltcGxlbWVudGF0aW9uOmEuaW1wbGVtZW50YXRpb259O3JldHVybiBifVxuZnVuY3Rpb24gYWwoYSxiLGMsZCxlKXt0aGlzLnRhZz1iO3RoaXMuY29udGFpbmVySW5mbz1hO3RoaXMuZmluaXNoZWRXb3JrPXRoaXMucGluZ0NhY2hlPXRoaXMuY3VycmVudD10aGlzLnBlbmRpbmdDaGlsZHJlbj1udWxsO3RoaXMudGltZW91dEhhbmRsZT0tMTt0aGlzLmNhbGxiYWNrTm9kZT10aGlzLnBlbmRpbmdDb250ZXh0PXRoaXMuY29udGV4dD1udWxsO3RoaXMuY2FsbGJhY2tQcmlvcml0eT0wO3RoaXMuZXZlbnRUaW1lcz16YygwKTt0aGlzLmV4cGlyYXRpb25UaW1lcz16YygtMSk7dGhpcy5lbnRhbmdsZWRMYW5lcz10aGlzLmZpbmlzaGVkTGFuZXM9dGhpcy5tdXRhYmxlUmVhZExhbmVzPXRoaXMuZXhwaXJlZExhbmVzPXRoaXMucGluZ2VkTGFuZXM9dGhpcy5zdXNwZW5kZWRMYW5lcz10aGlzLnBlbmRpbmdMYW5lcz0wO3RoaXMuZW50YW5nbGVtZW50cz16YygwKTt0aGlzLmlkZW50aWZpZXJQcmVmaXg9ZDt0aGlzLm9uUmVjb3ZlcmFibGVFcnJvcj1lO3RoaXMubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT1cbm51bGx9ZnVuY3Rpb24gYmwoYSxiLGMsZCxlLGYsZyxoLGspe2E9bmV3IGFsKGEsYixjLGgsayk7MT09PWI/KGI9MSwhMD09PWYmJihifD04KSk6Yj0wO2Y9QmcoMyxudWxsLG51bGwsYik7YS5jdXJyZW50PWY7Zi5zdGF0ZU5vZGU9YTtmLm1lbW9pemVkU3RhdGU9e2VsZW1lbnQ6ZCxpc0RlaHlkcmF0ZWQ6YyxjYWNoZTpudWxsLHRyYW5zaXRpb25zOm51bGwscGVuZGluZ1N1c3BlbnNlQm91bmRhcmllczpudWxsfTtraChmKTtyZXR1cm4gYX1mdW5jdGlvbiBjbChhLGIsYyl7dmFyIGQ9Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm51bGw7cmV0dXJueyQkdHlwZW9mOndhLGtleTpudWxsPT1kP251bGw6XCJcIitkLGNoaWxkcmVuOmEsY29udGFpbmVySW5mbzpiLGltcGxlbWVudGF0aW9uOmN9fVxuZnVuY3Rpb24gZGwoYSl7aWYoIWEpcmV0dXJuIFZmO2E9YS5fcmVhY3RJbnRlcm5hbHM7YTp7aWYoVmIoYSkhPT1hfHwxIT09YS50YWcpdGhyb3cgRXJyb3IocCgxNzApKTt2YXIgYj1hO2Rve3N3aXRjaChiLnRhZyl7Y2FzZSAzOmI9Yi5zdGF0ZU5vZGUuY29udGV4dDticmVhayBhO2Nhc2UgMTppZihaZihiLnR5cGUpKXtiPWIuc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0O2JyZWFrIGF9fWI9Yi5yZXR1cm59d2hpbGUobnVsbCE9PWIpO3Rocm93IEVycm9yKHAoMTcxKSk7fWlmKDE9PT1hLnRhZyl7dmFyIGM9YS50eXBlO2lmKFpmKGMpKXJldHVybiBiZyhhLGMsYil9cmV0dXJuIGJ9XG5mdW5jdGlvbiBlbChhLGIsYyxkLGUsZixnLGgsayl7YT1ibChjLGQsITAsYSxlLGYsZyxoLGspO2EuY29udGV4dD1kbChudWxsKTtjPWEuY3VycmVudDtkPVIoKTtlPXlpKGMpO2Y9bWgoZCxlKTtmLmNhbGxiYWNrPXZvaWQgMCE9PWImJm51bGwhPT1iP2I6bnVsbDtuaChjLGYsZSk7YS5jdXJyZW50LmxhbmVzPWU7QWMoYSxlLGQpO0RrKGEsZCk7cmV0dXJuIGF9ZnVuY3Rpb24gZmwoYSxiLGMsZCl7dmFyIGU9Yi5jdXJyZW50LGY9UigpLGc9eWkoZSk7Yz1kbChjKTtudWxsPT09Yi5jb250ZXh0P2IuY29udGV4dD1jOmIucGVuZGluZ0NvbnRleHQ9YztiPW1oKGYsZyk7Yi5wYXlsb2FkPXtlbGVtZW50OmF9O2Q9dm9pZCAwPT09ZD9udWxsOmQ7bnVsbCE9PWQmJihiLmNhbGxiYWNrPWQpO2E9bmgoZSxiLGcpO251bGwhPT1hJiYoZ2koYSxlLGcsZiksb2goYSxlLGcpKTtyZXR1cm4gZ31cbmZ1bmN0aW9uIGdsKGEpe2E9YS5jdXJyZW50O2lmKCFhLmNoaWxkKXJldHVybiBudWxsO3N3aXRjaChhLmNoaWxkLnRhZyl7Y2FzZSA1OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZTtkZWZhdWx0OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZX19ZnVuY3Rpb24gaGwoYSxiKXthPWEubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YSYmbnVsbCE9PWEuZGVoeWRyYXRlZCl7dmFyIGM9YS5yZXRyeUxhbmU7YS5yZXRyeUxhbmU9MCE9PWMmJmM8Yj9jOmJ9fWZ1bmN0aW9uIGlsKGEsYil7aGwoYSxiKTsoYT1hLmFsdGVybmF0ZSkmJmhsKGEsYil9ZnVuY3Rpb24gamwoKXtyZXR1cm4gbnVsbH12YXIga2w9XCJmdW5jdGlvblwiPT09dHlwZW9mIHJlcG9ydEVycm9yP3JlcG9ydEVycm9yOmZ1bmN0aW9uKGEpe2NvbnNvbGUuZXJyb3IoYSl9O2Z1bmN0aW9uIGxsKGEpe3RoaXMuX2ludGVybmFsUm9vdD1hfVxubWwucHJvdG90eXBlLnJlbmRlcj1sbC5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuX2ludGVybmFsUm9vdDtpZihudWxsPT09Yil0aHJvdyBFcnJvcihwKDQwOSkpO2ZsKGEsYixudWxsLG51bGwpfTttbC5wcm90b3R5cGUudW5tb3VudD1sbC5wcm90b3R5cGUudW5tb3VudD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuX2ludGVybmFsUm9vdDtpZihudWxsIT09YSl7dGhpcy5faW50ZXJuYWxSb290PW51bGw7dmFyIGI9YS5jb250YWluZXJJbmZvO1JrKGZ1bmN0aW9uKCl7ZmwobnVsbCxhLG51bGwsbnVsbCl9KTtiW3VmXT1udWxsfX07ZnVuY3Rpb24gbWwoYSl7dGhpcy5faW50ZXJuYWxSb290PWF9XG5tbC5wcm90b3R5cGUudW5zdGFibGVfc2NoZWR1bGVIeWRyYXRpb249ZnVuY3Rpb24oYSl7aWYoYSl7dmFyIGI9SGMoKTthPXtibG9ja2VkT246bnVsbCx0YXJnZXQ6YSxwcmlvcml0eTpifTtmb3IodmFyIGM9MDtjPFFjLmxlbmd0aCYmMCE9PWImJmI8UWNbY10ucHJpb3JpdHk7YysrKTtRYy5zcGxpY2UoYywwLGEpOzA9PT1jJiZWYyhhKX19O2Z1bmN0aW9uIG5sKGEpe3JldHVybiEoIWF8fDEhPT1hLm5vZGVUeXBlJiY5IT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlKX1mdW5jdGlvbiBvbChhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSYmKDghPT1hLm5vZGVUeXBlfHxcIiByZWFjdC1tb3VudC1wb2ludC11bnN0YWJsZSBcIiE9PWEubm9kZVZhbHVlKSl9ZnVuY3Rpb24gcGwoKXt9XG5mdW5jdGlvbiBxbChhLGIsYyxkLGUpe2lmKGUpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgZj1kO2Q9ZnVuY3Rpb24oKXt2YXIgYT1nbChnKTtmLmNhbGwoYSl9fXZhciBnPWVsKGIsZCxhLDAsbnVsbCwhMSwhMSxcIlwiLHBsKTthLl9yZWFjdFJvb3RDb250YWluZXI9ZzthW3VmXT1nLmN1cnJlbnQ7c2YoOD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmEpO1JrKCk7cmV0dXJuIGd9Zm9yKDtlPWEubGFzdENoaWxkOylhLnJlbW92ZUNoaWxkKGUpO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgaD1kO2Q9ZnVuY3Rpb24oKXt2YXIgYT1nbChrKTtoLmNhbGwoYSl9fXZhciBrPWJsKGEsMCwhMSxudWxsLG51bGwsITEsITEsXCJcIixwbCk7YS5fcmVhY3RSb290Q29udGFpbmVyPWs7YVt1Zl09ay5jdXJyZW50O3NmKDg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphKTtSayhmdW5jdGlvbigpe2ZsKGIsayxjLGQpfSk7cmV0dXJuIGt9XG5mdW5jdGlvbiBybChhLGIsYyxkLGUpe3ZhciBmPWMuX3JlYWN0Um9vdENvbnRhaW5lcjtpZihmKXt2YXIgZz1mO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaD1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1nbChnKTtoLmNhbGwoYSl9fWZsKGIsZyxhLGUpfWVsc2UgZz1xbChjLGIsYSxlLGQpO3JldHVybiBnbChnKX1FYz1mdW5jdGlvbihhKXtzd2l0Y2goYS50YWcpe2Nhc2UgMzp2YXIgYj1hLnN0YXRlTm9kZTtpZihiLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQpe3ZhciBjPXRjKGIucGVuZGluZ0xhbmVzKTswIT09YyYmKENjKGIsY3wxKSxEayhiLEIoKSksMD09PShLJjYpJiYoR2o9QigpKzUwMCxqZygpKSl9YnJlYWs7Y2FzZSAxMzpSayhmdW5jdGlvbigpe3ZhciBiPWloKGEsMSk7aWYobnVsbCE9PWIpe3ZhciBjPVIoKTtnaShiLGEsMSxjKX19KSxpbChhLDEpfX07XG5GYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1paChhLDEzNDIxNzcyOCk7aWYobnVsbCE9PWIpe3ZhciBjPVIoKTtnaShiLGEsMTM0MjE3NzI4LGMpfWlsKGEsMTM0MjE3NzI4KX19O0djPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPXlpKGEpLGM9aWgoYSxiKTtpZihudWxsIT09Yyl7dmFyIGQ9UigpO2dpKGMsYSxiLGQpfWlsKGEsYil9fTtIYz1mdW5jdGlvbigpe3JldHVybiBDfTtJYz1mdW5jdGlvbihhLGIpe3ZhciBjPUM7dHJ5e3JldHVybiBDPWEsYigpfWZpbmFsbHl7Qz1jfX07XG55Yj1mdW5jdGlvbihhLGIsYyl7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOmJiKGEsYyk7Yj1jLm5hbWU7aWYoXCJyYWRpb1wiPT09Yy50eXBlJiZudWxsIT1iKXtmb3IoYz1hO2MucGFyZW50Tm9kZTspYz1jLnBhcmVudE5vZGU7Yz1jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtuYW1lPVwiK0pTT04uc3RyaW5naWZ5KFwiXCIrYikrJ11bdHlwZT1cInJhZGlvXCJdJyk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKyl7dmFyIGQ9Y1tiXTtpZihkIT09YSYmZC5mb3JtPT09YS5mb3JtKXt2YXIgZT1EYihkKTtpZighZSl0aHJvdyBFcnJvcihwKDkwKSk7V2EoZCk7YmIoZCxlKX19fWJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmliKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy52YWx1ZSxudWxsIT1iJiZmYihhLCEhYy5tdWx0aXBsZSxiLCExKX19O0diPVFrO0hiPVJrO1xudmFyIHNsPXt1c2luZ0NsaWVudEVudHJ5UG9pbnQ6ITEsRXZlbnRzOltDYix1ZSxEYixFYixGYixRa119LHRsPXtmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTpXYyxidW5kbGVUeXBlOjAsdmVyc2lvbjpcIjE4LjMuMVwiLHJlbmRlcmVyUGFja2FnZU5hbWU6XCJyZWFjdC1kb21cIn07XG52YXIgdWw9e2J1bmRsZVR5cGU6dGwuYnVuZGxlVHlwZSx2ZXJzaW9uOnRsLnZlcnNpb24scmVuZGVyZXJQYWNrYWdlTmFtZTp0bC5yZW5kZXJlclBhY2thZ2VOYW1lLHJlbmRlcmVyQ29uZmlnOnRsLnJlbmRlcmVyQ29uZmlnLG92ZXJyaWRlSG9va1N0YXRlOm51bGwsb3ZlcnJpZGVIb29rU3RhdGVEZWxldGVQYXRoOm51bGwsb3ZlcnJpZGVIb29rU3RhdGVSZW5hbWVQYXRoOm51bGwsb3ZlcnJpZGVQcm9wczpudWxsLG92ZXJyaWRlUHJvcHNEZWxldGVQYXRoOm51bGwsb3ZlcnJpZGVQcm9wc1JlbmFtZVBhdGg6bnVsbCxzZXRFcnJvckhhbmRsZXI6bnVsbCxzZXRTdXNwZW5zZUhhbmRsZXI6bnVsbCxzY2hlZHVsZVVwZGF0ZTpudWxsLGN1cnJlbnREaXNwYXRjaGVyUmVmOnVhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsZmluZEhvc3RJbnN0YW5jZUJ5RmliZXI6ZnVuY3Rpb24oYSl7YT1aYihhKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX0sZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6dGwuZmluZEZpYmVyQnlIb3N0SW5zdGFuY2V8fFxuamwsZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoOm51bGwsc2NoZWR1bGVSZWZyZXNoOm51bGwsc2NoZWR1bGVSb290Om51bGwsc2V0UmVmcmVzaEhhbmRsZXI6bnVsbCxnZXRDdXJyZW50RmliZXI6bnVsbCxyZWNvbmNpbGVyVmVyc2lvbjpcIjE4LjMuMS1uZXh0LWYxMzM4ZjgwODAtMjAyNDA0MjZcIn07aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pe3ZhciB2bD1fX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX187aWYoIXZsLmlzRGlzYWJsZWQmJnZsLnN1cHBvcnRzRmliZXIpdHJ5e2tjPXZsLmluamVjdCh1bCksbGM9dmx9Y2F0Y2goYSl7fX1leHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPXNsO1xuZXhwb3J0cy5jcmVhdGVQb3J0YWw9ZnVuY3Rpb24oYSxiKXt2YXIgYz0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbDtpZighbmwoYikpdGhyb3cgRXJyb3IocCgyMDApKTtyZXR1cm4gY2woYSxiLG51bGwsYyl9O2V4cG9ydHMuY3JlYXRlUm9vdD1mdW5jdGlvbihhLGIpe2lmKCFubChhKSl0aHJvdyBFcnJvcihwKDI5OSkpO3ZhciBjPSExLGQ9XCJcIixlPWtsO251bGwhPT1iJiZ2b2lkIDAhPT1iJiYoITA9PT1iLnVuc3RhYmxlX3N0cmljdE1vZGUmJihjPSEwKSx2b2lkIDAhPT1iLmlkZW50aWZpZXJQcmVmaXgmJihkPWIuaWRlbnRpZmllclByZWZpeCksdm9pZCAwIT09Yi5vblJlY292ZXJhYmxlRXJyb3ImJihlPWIub25SZWNvdmVyYWJsZUVycm9yKSk7Yj1ibChhLDEsITEsbnVsbCxudWxsLGMsITEsZCxlKTthW3VmXT1iLmN1cnJlbnQ7c2YoOD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmEpO3JldHVybiBuZXcgbGwoYil9O1xuZXhwb3J0cy5maW5kRE9NTm9kZT1mdW5jdGlvbihhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKDE9PT1hLm5vZGVUeXBlKXJldHVybiBhO3ZhciBiPWEuX3JlYWN0SW50ZXJuYWxzO2lmKHZvaWQgMD09PWIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnJlbmRlcil0aHJvdyBFcnJvcihwKDE4OCkpO2E9T2JqZWN0LmtleXMoYSkuam9pbihcIixcIik7dGhyb3cgRXJyb3IocCgyNjgsYSkpO31hPVpiKGIpO2E9bnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZTtyZXR1cm4gYX07ZXhwb3J0cy5mbHVzaFN5bmM9ZnVuY3Rpb24oYSl7cmV0dXJuIFJrKGEpfTtleHBvcnRzLmh5ZHJhdGU9ZnVuY3Rpb24oYSxiLGMpe2lmKCFvbChiKSl0aHJvdyBFcnJvcihwKDIwMCkpO3JldHVybiBybChudWxsLGEsYiwhMCxjKX07XG5leHBvcnRzLmh5ZHJhdGVSb290PWZ1bmN0aW9uKGEsYixjKXtpZighbmwoYSkpdGhyb3cgRXJyb3IocCg0MDUpKTt2YXIgZD1udWxsIT1jJiZjLmh5ZHJhdGVkU291cmNlc3x8bnVsbCxlPSExLGY9XCJcIixnPWtsO251bGwhPT1jJiZ2b2lkIDAhPT1jJiYoITA9PT1jLnVuc3RhYmxlX3N0cmljdE1vZGUmJihlPSEwKSx2b2lkIDAhPT1jLmlkZW50aWZpZXJQcmVmaXgmJihmPWMuaWRlbnRpZmllclByZWZpeCksdm9pZCAwIT09Yy5vblJlY292ZXJhYmxlRXJyb3ImJihnPWMub25SZWNvdmVyYWJsZUVycm9yKSk7Yj1lbChiLG51bGwsYSwxLG51bGwhPWM/YzpudWxsLGUsITEsZixnKTthW3VmXT1iLmN1cnJlbnQ7c2YoYSk7aWYoZClmb3IoYT0wO2E8ZC5sZW5ndGg7YSsrKWM9ZFthXSxlPWMuX2dldFZlcnNpb24sZT1lKGMuX3NvdXJjZSksbnVsbD09Yi5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhP2IubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT1bYyxlXTpiLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGEucHVzaChjLFxuZSk7cmV0dXJuIG5ldyBtbChiKX07ZXhwb3J0cy5yZW5kZXI9ZnVuY3Rpb24oYSxiLGMpe2lmKCFvbChiKSl0aHJvdyBFcnJvcihwKDIwMCkpO3JldHVybiBybChudWxsLGEsYiwhMSxjKX07ZXhwb3J0cy51bm1vdW50Q29tcG9uZW50QXROb2RlPWZ1bmN0aW9uKGEpe2lmKCFvbChhKSl0aHJvdyBFcnJvcihwKDQwKSk7cmV0dXJuIGEuX3JlYWN0Um9vdENvbnRhaW5lcj8oUmsoZnVuY3Rpb24oKXtybChudWxsLG51bGwsYSwhMSxmdW5jdGlvbigpe2EuX3JlYWN0Um9vdENvbnRhaW5lcj1udWxsO2FbdWZdPW51bGx9KX0pLCEwKTohMX07ZXhwb3J0cy51bnN0YWJsZV9iYXRjaGVkVXBkYXRlcz1RaztcbmV4cG9ydHMudW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI9ZnVuY3Rpb24oYSxiLGMsZCl7aWYoIW9sKGMpKXRocm93IEVycm9yKHAoMjAwKSk7aWYobnVsbD09YXx8dm9pZCAwPT09YS5fcmVhY3RJbnRlcm5hbHMpdGhyb3cgRXJyb3IocCgzOCkpO3JldHVybiBybChhLGIsYywhMSxkKX07ZXhwb3J0cy52ZXJzaW9uPVwiMTguMy4xLW5leHQtZjEzMzhmODA4MC0yMDI0MDQyNlwiO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjaGVja0RDRSgpIHtcbiAgLyogZ2xvYmFsIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAqL1xuICBpZiAoXG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRoaXMgYnJhbmNoIGlzIHVucmVhY2hhYmxlIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZFxuICAgIC8vIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgY29uZGl0aW9uIGlzIHRydWUgb25seSBpbiBkZXZlbG9wbWVudC5cbiAgICAvLyBUaGVyZWZvcmUgaWYgdGhlIGJyYW5jaCBpcyBzdGlsbCBoZXJlLCBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2Fzbid0XG4gICAgLy8gcHJvcGVybHkgYXBwbGllZC5cbiAgICAvLyBEb24ndCBjaGFuZ2UgdGhlIG1lc3NhZ2UuIFJlYWN0IERldlRvb2xzIHJlbGllcyBvbiBpdC4gQWxzbyBtYWtlIHN1cmVcbiAgICAvLyB0aGlzIG1lc3NhZ2UgZG9lc24ndCBvY2N1ciBlbHNld2hlcmUgaW4gdGhpcyBmdW5jdGlvbiwgb3IgaXQgd2lsbCBjYXVzZVxuICAgIC8vIGEgZmFsc2UgcG9zaXRpdmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdeX14nKTtcbiAgfVxuICB0cnkge1xuICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBjb2RlIGFib3ZlIGhhcyBiZWVuIGRlYWQgY29kZSBlbGltaW5hdGVkIChEQ0UnZCkuXG4gICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFKGNoZWNrRENFKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gRGV2VG9vbHMgc2hvdWxkbid0IGNyYXNoIFJlYWN0LCBubyBtYXR0ZXIgd2hhdC5cbiAgICAvLyBXZSBzaG91bGQgc3RpbGwgcmVwb3J0IGluIGNhc2Ugd2UgYnJlYWsgdGhpcyBjb2RlLlxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBEQ0UgY2hlY2sgc2hvdWxkIGhhcHBlbiBiZWZvcmUgUmVhY3RET00gYnVuZGxlIGV4ZWN1dGVzIHNvIHRoYXRcbiAgLy8gRGV2VG9vbHMgY2FuIHJlcG9ydCBiYWQgbWluaWZpY2F0aW9uIGR1cmluZyBpbmplY3Rpb24uXG4gIGNoZWNrRENFKCk7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgbSA9IHJlcXVpcmUoJ3JlYWN0LWRvbScpO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgZXhwb3J0cy5jcmVhdGVSb290ID0gbS5jcmVhdGVSb290O1xuICBleHBvcnRzLmh5ZHJhdGVSb290ID0gbS5oeWRyYXRlUm9vdDtcbn0gZWxzZSB7XG4gIHZhciBpID0gbS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDtcbiAgZXhwb3J0cy5jcmVhdGVSb290ID0gZnVuY3Rpb24oYywgbykge1xuICAgIGkudXNpbmdDbGllbnRFbnRyeVBvaW50ID0gdHJ1ZTtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIG0uY3JlYXRlUm9vdChjLCBvKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaS51c2luZ0NsaWVudEVudHJ5UG9pbnQgPSBmYWxzZTtcbiAgICB9XG4gIH07XG4gIGV4cG9ydHMuaHlkcmF0ZVJvb3QgPSBmdW5jdGlvbihjLCBoLCBvKSB7XG4gICAgaS51c2luZ0NsaWVudEVudHJ5UG9pbnQgPSB0cnVlO1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gbS5oeWRyYXRlUm9vdChjLCBoLCBvKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaS51c2luZ0NsaWVudEVudHJ5UG9pbnQgPSBmYWxzZTtcbiAgICB9XG4gIH07XG59XG4iLCIvKipcbiAqIEByZW1peC1ydW4vcm91dGVyIHYxLjE2LjFcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIFJlbWl4IFNvZnR3YXJlIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UubWQgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyNyZWdpb24gVHlwZXMgYW5kIENvbnN0YW50c1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8qKlxuICogQWN0aW9ucyByZXByZXNlbnQgdGhlIHR5cGUgb2YgY2hhbmdlIHRvIGEgbG9jYXRpb24gdmFsdWUuXG4gKi9cbnZhciBBY3Rpb247XG4oZnVuY3Rpb24gKEFjdGlvbikge1xuICAvKipcbiAgICogQSBQT1AgaW5kaWNhdGVzIGEgY2hhbmdlIHRvIGFuIGFyYml0cmFyeSBpbmRleCBpbiB0aGUgaGlzdG9yeSBzdGFjaywgc3VjaFxuICAgKiBhcyBhIGJhY2sgb3IgZm9yd2FyZCBuYXZpZ2F0aW9uLiBJdCBkb2VzIG5vdCBkZXNjcmliZSB0aGUgZGlyZWN0aW9uIG9mIHRoZVxuICAgKiBuYXZpZ2F0aW9uLCBvbmx5IHRoYXQgdGhlIGN1cnJlbnQgaW5kZXggY2hhbmdlZC5cbiAgICpcbiAgICogTm90ZTogVGhpcyBpcyB0aGUgZGVmYXVsdCBhY3Rpb24gZm9yIG5ld2x5IGNyZWF0ZWQgaGlzdG9yeSBvYmplY3RzLlxuICAgKi9cbiAgQWN0aW9uW1wiUG9wXCJdID0gXCJQT1BcIjtcbiAgLyoqXG4gICAqIEEgUFVTSCBpbmRpY2F0ZXMgYSBuZXcgZW50cnkgYmVpbmcgYWRkZWQgdG8gdGhlIGhpc3Rvcnkgc3RhY2ssIHN1Y2ggYXMgd2hlblxuICAgKiBhIGxpbmsgaXMgY2xpY2tlZCBhbmQgYSBuZXcgcGFnZSBsb2Fkcy4gV2hlbiB0aGlzIGhhcHBlbnMsIGFsbCBzdWJzZXF1ZW50XG4gICAqIGVudHJpZXMgaW4gdGhlIHN0YWNrIGFyZSBsb3N0LlxuICAgKi9cbiAgQWN0aW9uW1wiUHVzaFwiXSA9IFwiUFVTSFwiO1xuICAvKipcbiAgICogQSBSRVBMQUNFIGluZGljYXRlcyB0aGUgZW50cnkgYXQgdGhlIGN1cnJlbnQgaW5kZXggaW4gdGhlIGhpc3Rvcnkgc3RhY2tcbiAgICogYmVpbmcgcmVwbGFjZWQgYnkgYSBuZXcgb25lLlxuICAgKi9cbiAgQWN0aW9uW1wiUmVwbGFjZVwiXSA9IFwiUkVQTEFDRVwiO1xufSkoQWN0aW9uIHx8IChBY3Rpb24gPSB7fSkpO1xuY29uc3QgUG9wU3RhdGVFdmVudFR5cGUgPSBcInBvcHN0YXRlXCI7XG4vKipcbiAqIE1lbW9yeSBoaXN0b3J5IHN0b3JlcyB0aGUgY3VycmVudCBsb2NhdGlvbiBpbiBtZW1vcnkuIEl0IGlzIGRlc2lnbmVkIGZvciB1c2VcbiAqIGluIHN0YXRlZnVsIG5vbi1icm93c2VyIGVudmlyb25tZW50cyBsaWtlIHRlc3RzIGFuZCBSZWFjdCBOYXRpdmUuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZU1lbW9yeUhpc3Rvcnkob3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG4gIGxldCB7XG4gICAgaW5pdGlhbEVudHJpZXMgPSBbXCIvXCJdLFxuICAgIGluaXRpYWxJbmRleCxcbiAgICB2NUNvbXBhdCA9IGZhbHNlXG4gIH0gPSBvcHRpb25zO1xuICBsZXQgZW50cmllczsgLy8gRGVjbGFyZSBzbyB3ZSBjYW4gYWNjZXNzIGZyb20gY3JlYXRlTWVtb3J5TG9jYXRpb25cbiAgZW50cmllcyA9IGluaXRpYWxFbnRyaWVzLm1hcCgoZW50cnksIGluZGV4KSA9PiBjcmVhdGVNZW1vcnlMb2NhdGlvbihlbnRyeSwgdHlwZW9mIGVudHJ5ID09PSBcInN0cmluZ1wiID8gbnVsbCA6IGVudHJ5LnN0YXRlLCBpbmRleCA9PT0gMCA/IFwiZGVmYXVsdFwiIDogdW5kZWZpbmVkKSk7XG4gIGxldCBpbmRleCA9IGNsYW1wSW5kZXgoaW5pdGlhbEluZGV4ID09IG51bGwgPyBlbnRyaWVzLmxlbmd0aCAtIDEgOiBpbml0aWFsSW5kZXgpO1xuICBsZXQgYWN0aW9uID0gQWN0aW9uLlBvcDtcbiAgbGV0IGxpc3RlbmVyID0gbnVsbDtcbiAgZnVuY3Rpb24gY2xhbXBJbmRleChuKSB7XG4gICAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KG4sIDApLCBlbnRyaWVzLmxlbmd0aCAtIDEpO1xuICB9XG4gIGZ1bmN0aW9uIGdldEN1cnJlbnRMb2NhdGlvbigpIHtcbiAgICByZXR1cm4gZW50cmllc1tpbmRleF07XG4gIH1cbiAgZnVuY3Rpb24gY3JlYXRlTWVtb3J5TG9jYXRpb24odG8sIHN0YXRlLCBrZXkpIHtcbiAgICBpZiAoc3RhdGUgPT09IHZvaWQgMCkge1xuICAgICAgc3RhdGUgPSBudWxsO1xuICAgIH1cbiAgICBsZXQgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihlbnRyaWVzID8gZ2V0Q3VycmVudExvY2F0aW9uKCkucGF0aG5hbWUgOiBcIi9cIiwgdG8sIHN0YXRlLCBrZXkpO1xuICAgIHdhcm5pbmcobG9jYXRpb24ucGF0aG5hbWUuY2hhckF0KDApID09PSBcIi9cIiwgXCJyZWxhdGl2ZSBwYXRobmFtZXMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gbWVtb3J5IGhpc3Rvcnk6IFwiICsgSlNPTi5zdHJpbmdpZnkodG8pKTtcbiAgICByZXR1cm4gbG9jYXRpb247XG4gIH1cbiAgZnVuY3Rpb24gY3JlYXRlSHJlZih0bykge1xuICAgIHJldHVybiB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyB0byA6IGNyZWF0ZVBhdGgodG8pO1xuICB9XG4gIGxldCBoaXN0b3J5ID0ge1xuICAgIGdldCBpbmRleCgpIHtcbiAgICAgIHJldHVybiBpbmRleDtcbiAgICB9LFxuICAgIGdldCBhY3Rpb24oKSB7XG4gICAgICByZXR1cm4gYWN0aW9uO1xuICAgIH0sXG4gICAgZ2V0IGxvY2F0aW9uKCkge1xuICAgICAgcmV0dXJuIGdldEN1cnJlbnRMb2NhdGlvbigpO1xuICAgIH0sXG4gICAgY3JlYXRlSHJlZixcbiAgICBjcmVhdGVVUkwodG8pIHtcbiAgICAgIHJldHVybiBuZXcgVVJMKGNyZWF0ZUhyZWYodG8pLCBcImh0dHA6Ly9sb2NhbGhvc3RcIik7XG4gICAgfSxcbiAgICBlbmNvZGVMb2NhdGlvbih0bykge1xuICAgICAgbGV0IHBhdGggPSB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgodG8pIDogdG87XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwYXRobmFtZTogcGF0aC5wYXRobmFtZSB8fCBcIlwiLFxuICAgICAgICBzZWFyY2g6IHBhdGguc2VhcmNoIHx8IFwiXCIsXG4gICAgICAgIGhhc2g6IHBhdGguaGFzaCB8fCBcIlwiXG4gICAgICB9O1xuICAgIH0sXG4gICAgcHVzaCh0bywgc3RhdGUpIHtcbiAgICAgIGFjdGlvbiA9IEFjdGlvbi5QdXNoO1xuICAgICAgbGV0IG5leHRMb2NhdGlvbiA9IGNyZWF0ZU1lbW9yeUxvY2F0aW9uKHRvLCBzdGF0ZSk7XG4gICAgICBpbmRleCArPSAxO1xuICAgICAgZW50cmllcy5zcGxpY2UoaW5kZXgsIGVudHJpZXMubGVuZ3RoLCBuZXh0TG9jYXRpb24pO1xuICAgICAgaWYgKHY1Q29tcGF0ICYmIGxpc3RlbmVyKSB7XG4gICAgICAgIGxpc3RlbmVyKHtcbiAgICAgICAgICBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IG5leHRMb2NhdGlvbixcbiAgICAgICAgICBkZWx0YTogMVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHJlcGxhY2UodG8sIHN0YXRlKSB7XG4gICAgICBhY3Rpb24gPSBBY3Rpb24uUmVwbGFjZTtcbiAgICAgIGxldCBuZXh0TG9jYXRpb24gPSBjcmVhdGVNZW1vcnlMb2NhdGlvbih0bywgc3RhdGUpO1xuICAgICAgZW50cmllc1tpbmRleF0gPSBuZXh0TG9jYXRpb247XG4gICAgICBpZiAodjVDb21wYXQgJiYgbGlzdGVuZXIpIHtcbiAgICAgICAgbGlzdGVuZXIoe1xuICAgICAgICAgIGFjdGlvbixcbiAgICAgICAgICBsb2NhdGlvbjogbmV4dExvY2F0aW9uLFxuICAgICAgICAgIGRlbHRhOiAwXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgZ28oZGVsdGEpIHtcbiAgICAgIGFjdGlvbiA9IEFjdGlvbi5Qb3A7XG4gICAgICBsZXQgbmV4dEluZGV4ID0gY2xhbXBJbmRleChpbmRleCArIGRlbHRhKTtcbiAgICAgIGxldCBuZXh0TG9jYXRpb24gPSBlbnRyaWVzW25leHRJbmRleF07XG4gICAgICBpbmRleCA9IG5leHRJbmRleDtcbiAgICAgIGlmIChsaXN0ZW5lcikge1xuICAgICAgICBsaXN0ZW5lcih7XG4gICAgICAgICAgYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBuZXh0TG9jYXRpb24sXG4gICAgICAgICAgZGVsdGFcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBsaXN0ZW4oZm4pIHtcbiAgICAgIGxpc3RlbmVyID0gZm47XG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBsaXN0ZW5lciA9IG51bGw7XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG4vKipcbiAqIEJyb3dzZXIgaGlzdG9yeSBzdG9yZXMgdGhlIGxvY2F0aW9uIGluIHJlZ3VsYXIgVVJMcy4gVGhpcyBpcyB0aGUgc3RhbmRhcmQgZm9yXG4gKiBtb3N0IHdlYiBhcHBzLCBidXQgaXQgcmVxdWlyZXMgc29tZSBjb25maWd1cmF0aW9uIG9uIHRoZSBzZXJ2ZXIgdG8gZW5zdXJlIHlvdVxuICogc2VydmUgdGhlIHNhbWUgYXBwIGF0IG11bHRpcGxlIFVSTHMuXG4gKlxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vcmVtaXgtcnVuL2hpc3RvcnkvdHJlZS9tYWluL2RvY3MvYXBpLXJlZmVyZW5jZS5tZCNjcmVhdGVicm93c2VyaGlzdG9yeVxuICovXG5mdW5jdGlvbiBjcmVhdGVCcm93c2VySGlzdG9yeShvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cbiAgZnVuY3Rpb24gY3JlYXRlQnJvd3NlckxvY2F0aW9uKHdpbmRvdywgZ2xvYmFsSGlzdG9yeSkge1xuICAgIGxldCB7XG4gICAgICBwYXRobmFtZSxcbiAgICAgIHNlYXJjaCxcbiAgICAgIGhhc2hcbiAgICB9ID0gd2luZG93LmxvY2F0aW9uO1xuICAgIHJldHVybiBjcmVhdGVMb2NhdGlvbihcIlwiLCB7XG4gICAgICBwYXRobmFtZSxcbiAgICAgIHNlYXJjaCxcbiAgICAgIGhhc2hcbiAgICB9LFxuICAgIC8vIHN0YXRlIGRlZmF1bHRzIHRvIGBudWxsYCBiZWNhdXNlIGB3aW5kb3cuaGlzdG9yeS5zdGF0ZWAgZG9lc1xuICAgIGdsb2JhbEhpc3Rvcnkuc3RhdGUgJiYgZ2xvYmFsSGlzdG9yeS5zdGF0ZS51c3IgfHwgbnVsbCwgZ2xvYmFsSGlzdG9yeS5zdGF0ZSAmJiBnbG9iYWxIaXN0b3J5LnN0YXRlLmtleSB8fCBcImRlZmF1bHRcIik7XG4gIH1cbiAgZnVuY3Rpb24gY3JlYXRlQnJvd3NlckhyZWYod2luZG93LCB0bykge1xuICAgIHJldHVybiB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyB0byA6IGNyZWF0ZVBhdGgodG8pO1xuICB9XG4gIHJldHVybiBnZXRVcmxCYXNlZEhpc3RvcnkoY3JlYXRlQnJvd3NlckxvY2F0aW9uLCBjcmVhdGVCcm93c2VySHJlZiwgbnVsbCwgb3B0aW9ucyk7XG59XG4vKipcbiAqIEhhc2ggaGlzdG9yeSBzdG9yZXMgdGhlIGxvY2F0aW9uIGluIHdpbmRvdy5sb2NhdGlvbi5oYXNoLiBUaGlzIG1ha2VzIGl0IGlkZWFsXG4gKiBmb3Igc2l0dWF0aW9ucyB3aGVyZSB5b3UgZG9uJ3Qgd2FudCB0byBzZW5kIHRoZSBsb2NhdGlvbiB0byB0aGUgc2VydmVyIGZvclxuICogc29tZSByZWFzb24sIGVpdGhlciBiZWNhdXNlIHlvdSBkbyBjYW5ub3QgY29uZmlndXJlIGl0IG9yIHRoZSBVUkwgc3BhY2UgaXNcbiAqIHJlc2VydmVkIGZvciBzb21ldGhpbmcgZWxzZS5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZW1peC1ydW4vaGlzdG9yeS90cmVlL21haW4vZG9jcy9hcGktcmVmZXJlbmNlLm1kI2NyZWF0ZWhhc2hoaXN0b3J5XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUhhc2hIaXN0b3J5KG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuICBmdW5jdGlvbiBjcmVhdGVIYXNoTG9jYXRpb24od2luZG93LCBnbG9iYWxIaXN0b3J5KSB7XG4gICAgbGV0IHtcbiAgICAgIHBhdGhuYW1lID0gXCIvXCIsXG4gICAgICBzZWFyY2ggPSBcIlwiLFxuICAgICAgaGFzaCA9IFwiXCJcbiAgICB9ID0gcGFyc2VQYXRoKHdpbmRvdy5sb2NhdGlvbi5oYXNoLnN1YnN0cigxKSk7XG4gICAgLy8gSGFzaCBVUkwgc2hvdWxkIGFsd2F5cyBoYXZlIGEgbGVhZGluZyAvIGp1c3QgbGlrZSB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWVcbiAgICAvLyBkb2VzLCBzbyBpZiBhbiBhcHAgZW5kcyB1cCBhdCBhIHJvdXRlIGxpa2UgLyNzb21ldGhpbmcgdGhlbiB3ZSBhZGQgYVxuICAgIC8vIGxlYWRpbmcgc2xhc2ggc28gYWxsIG9mIG91ciBwYXRoLW1hdGNoaW5nIGJlaGF2ZXMgdGhlIHNhbWUgYXMgaWYgaXQgd291bGRcbiAgICAvLyBpbiBhIGJyb3dzZXIgcm91dGVyLiAgVGhpcyBpcyBwYXJ0aWN1bGFybHkgaW1wb3J0YW50IHdoZW4gdGhlcmUgZXhpc3RzIGFcbiAgICAvLyByb290IHNwbGF0IHJvdXRlICg8Um91dGUgcGF0aD1cIipcIj4pIHNpbmNlIHRoYXQgbWF0Y2hlcyBpbnRlcm5hbGx5IGFnYWluc3RcbiAgICAvLyBcIi8qXCIgYW5kIHdlJ2QgZXhwZWN0IC8jc29tZXRoaW5nIHRvIDQwNCBpbiBhIGhhc2ggcm91dGVyIGFwcC5cbiAgICBpZiAoIXBhdGhuYW1lLnN0YXJ0c1dpdGgoXCIvXCIpICYmICFwYXRobmFtZS5zdGFydHNXaXRoKFwiLlwiKSkge1xuICAgICAgcGF0aG5hbWUgPSBcIi9cIiArIHBhdGhuYW1lO1xuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24oXCJcIiwge1xuICAgICAgcGF0aG5hbWUsXG4gICAgICBzZWFyY2gsXG4gICAgICBoYXNoXG4gICAgfSxcbiAgICAvLyBzdGF0ZSBkZWZhdWx0cyB0byBgbnVsbGAgYmVjYXVzZSBgd2luZG93Lmhpc3Rvcnkuc3RhdGVgIGRvZXNcbiAgICBnbG9iYWxIaXN0b3J5LnN0YXRlICYmIGdsb2JhbEhpc3Rvcnkuc3RhdGUudXNyIHx8IG51bGwsIGdsb2JhbEhpc3Rvcnkuc3RhdGUgJiYgZ2xvYmFsSGlzdG9yeS5zdGF0ZS5rZXkgfHwgXCJkZWZhdWx0XCIpO1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZUhhc2hIcmVmKHdpbmRvdywgdG8pIHtcbiAgICBsZXQgYmFzZSA9IHdpbmRvdy5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiYmFzZVwiKTtcbiAgICBsZXQgaHJlZiA9IFwiXCI7XG4gICAgaWYgKGJhc2UgJiYgYmFzZS5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpKSB7XG4gICAgICBsZXQgdXJsID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gICAgICBsZXQgaGFzaEluZGV4ID0gdXJsLmluZGV4T2YoXCIjXCIpO1xuICAgICAgaHJlZiA9IGhhc2hJbmRleCA9PT0gLTEgPyB1cmwgOiB1cmwuc2xpY2UoMCwgaGFzaEluZGV4KTtcbiAgICB9XG4gICAgcmV0dXJuIGhyZWYgKyBcIiNcIiArICh0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyB0byA6IGNyZWF0ZVBhdGgodG8pKTtcbiAgfVxuICBmdW5jdGlvbiB2YWxpZGF0ZUhhc2hMb2NhdGlvbihsb2NhdGlvbiwgdG8pIHtcbiAgICB3YXJuaW5nKGxvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gXCIvXCIsIFwicmVsYXRpdmUgcGF0aG5hbWVzIGFyZSBub3Qgc3VwcG9ydGVkIGluIGhhc2ggaGlzdG9yeS5wdXNoKFwiICsgSlNPTi5zdHJpbmdpZnkodG8pICsgXCIpXCIpO1xuICB9XG4gIHJldHVybiBnZXRVcmxCYXNlZEhpc3RvcnkoY3JlYXRlSGFzaExvY2F0aW9uLCBjcmVhdGVIYXNoSHJlZiwgdmFsaWRhdGVIYXNoTG9jYXRpb24sIG9wdGlvbnMpO1xufVxuZnVuY3Rpb24gaW52YXJpYW50KHZhbHVlLCBtZXNzYWdlKSB7XG4gIGlmICh2YWx1ZSA9PT0gZmFsc2UgfHwgdmFsdWUgPT09IG51bGwgfHwgdHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICB9XG59XG5mdW5jdGlvbiB3YXJuaW5nKGNvbmQsIG1lc3NhZ2UpIHtcbiAgaWYgKCFjb25kKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09IFwidW5kZWZpbmVkXCIpIGNvbnNvbGUud2FybihtZXNzYWdlKTtcbiAgICB0cnkge1xuICAgICAgLy8gV2VsY29tZSB0byBkZWJ1Z2dpbmcgaGlzdG9yeSFcbiAgICAgIC8vXG4gICAgICAvLyBUaGlzIGVycm9yIGlzIHRocm93biBhcyBhIGNvbnZlbmllbmNlLCBzbyB5b3UgY2FuIG1vcmUgZWFzaWx5XG4gICAgICAvLyBmaW5kIHRoZSBzb3VyY2UgZm9yIGEgd2FybmluZyB0aGF0IGFwcGVhcnMgaW4gdGhlIGNvbnNvbGUgYnlcbiAgICAgIC8vIGVuYWJsaW5nIFwicGF1c2Ugb24gZXhjZXB0aW9uc1wiIGluIHlvdXIgSmF2YVNjcmlwdCBkZWJ1Z2dlci5cbiAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lbXB0eVxuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCA4KTtcbn1cbi8qKlxuICogRm9yIGJyb3dzZXItYmFzZWQgaGlzdG9yaWVzLCB3ZSBjb21iaW5lIHRoZSBzdGF0ZSBhbmQga2V5IGludG8gYW4gb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGdldEhpc3RvcnlTdGF0ZShsb2NhdGlvbiwgaW5kZXgpIHtcbiAgcmV0dXJuIHtcbiAgICB1c3I6IGxvY2F0aW9uLnN0YXRlLFxuICAgIGtleTogbG9jYXRpb24ua2V5LFxuICAgIGlkeDogaW5kZXhcbiAgfTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIExvY2F0aW9uIG9iamVjdCB3aXRoIGEgdW5pcXVlIGtleSBmcm9tIHRoZSBnaXZlbiBQYXRoXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUxvY2F0aW9uKGN1cnJlbnQsIHRvLCBzdGF0ZSwga2V5KSB7XG4gIGlmIChzdGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgc3RhdGUgPSBudWxsO1xuICB9XG4gIGxldCBsb2NhdGlvbiA9IF9leHRlbmRzKHtcbiAgICBwYXRobmFtZTogdHlwZW9mIGN1cnJlbnQgPT09IFwic3RyaW5nXCIgPyBjdXJyZW50IDogY3VycmVudC5wYXRobmFtZSxcbiAgICBzZWFyY2g6IFwiXCIsXG4gICAgaGFzaDogXCJcIlxuICB9LCB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgodG8pIDogdG8sIHtcbiAgICBzdGF0ZSxcbiAgICAvLyBUT0RPOiBUaGlzIGNvdWxkIGJlIGNsZWFuZWQgdXAuICBwdXNoL3JlcGxhY2Ugc2hvdWxkIHByb2JhYmx5IGp1c3QgdGFrZVxuICAgIC8vIGZ1bGwgTG9jYXRpb25zIG5vdyBhbmQgYXZvaWQgdGhlIG5lZWQgdG8gcnVuIHRocm91Z2ggdGhpcyBmbG93IGF0IGFsbFxuICAgIC8vIEJ1dCB0aGF0J3MgYSBwcmV0dHkgYmlnIHJlZmFjdG9yIHRvIHRoZSBjdXJyZW50IHRlc3Qgc3VpdGUgc28gZ29pbmcgdG9cbiAgICAvLyBrZWVwIGFzIGlzIGZvciB0aGUgdGltZSBiZWluZyBhbmQganVzdCBsZXQgYW55IGluY29taW5nIGtleXMgdGFrZSBwcmVjZWRlbmNlXG4gICAga2V5OiB0byAmJiB0by5rZXkgfHwga2V5IHx8IGNyZWF0ZUtleSgpXG4gIH0pO1xuICByZXR1cm4gbG9jYXRpb247XG59XG4vKipcbiAqIENyZWF0ZXMgYSBzdHJpbmcgVVJMIHBhdGggZnJvbSB0aGUgZ2l2ZW4gcGF0aG5hbWUsIHNlYXJjaCwgYW5kIGhhc2ggY29tcG9uZW50cy5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUGF0aChfcmVmKSB7XG4gIGxldCB7XG4gICAgcGF0aG5hbWUgPSBcIi9cIixcbiAgICBzZWFyY2ggPSBcIlwiLFxuICAgIGhhc2ggPSBcIlwiXG4gIH0gPSBfcmVmO1xuICBpZiAoc2VhcmNoICYmIHNlYXJjaCAhPT0gXCI/XCIpIHBhdGhuYW1lICs9IHNlYXJjaC5jaGFyQXQoMCkgPT09IFwiP1wiID8gc2VhcmNoIDogXCI/XCIgKyBzZWFyY2g7XG4gIGlmIChoYXNoICYmIGhhc2ggIT09IFwiI1wiKSBwYXRobmFtZSArPSBoYXNoLmNoYXJBdCgwKSA9PT0gXCIjXCIgPyBoYXNoIDogXCIjXCIgKyBoYXNoO1xuICByZXR1cm4gcGF0aG5hbWU7XG59XG4vKipcbiAqIFBhcnNlcyBhIHN0cmluZyBVUkwgcGF0aCBpbnRvIGl0cyBzZXBhcmF0ZSBwYXRobmFtZSwgc2VhcmNoLCBhbmQgaGFzaCBjb21wb25lbnRzLlxuICovXG5mdW5jdGlvbiBwYXJzZVBhdGgocGF0aCkge1xuICBsZXQgcGFyc2VkUGF0aCA9IHt9O1xuICBpZiAocGF0aCkge1xuICAgIGxldCBoYXNoSW5kZXggPSBwYXRoLmluZGV4T2YoXCIjXCIpO1xuICAgIGlmIChoYXNoSW5kZXggPj0gMCkge1xuICAgICAgcGFyc2VkUGF0aC5oYXNoID0gcGF0aC5zdWJzdHIoaGFzaEluZGV4KTtcbiAgICAgIHBhdGggPSBwYXRoLnN1YnN0cigwLCBoYXNoSW5kZXgpO1xuICAgIH1cbiAgICBsZXQgc2VhcmNoSW5kZXggPSBwYXRoLmluZGV4T2YoXCI/XCIpO1xuICAgIGlmIChzZWFyY2hJbmRleCA+PSAwKSB7XG4gICAgICBwYXJzZWRQYXRoLnNlYXJjaCA9IHBhdGguc3Vic3RyKHNlYXJjaEluZGV4KTtcbiAgICAgIHBhdGggPSBwYXRoLnN1YnN0cigwLCBzZWFyY2hJbmRleCk7XG4gICAgfVxuICAgIGlmIChwYXRoKSB7XG4gICAgICBwYXJzZWRQYXRoLnBhdGhuYW1lID0gcGF0aDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHBhcnNlZFBhdGg7XG59XG5mdW5jdGlvbiBnZXRVcmxCYXNlZEhpc3RvcnkoZ2V0TG9jYXRpb24sIGNyZWF0ZUhyZWYsIHZhbGlkYXRlTG9jYXRpb24sIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuICBsZXQge1xuICAgIHdpbmRvdyA9IGRvY3VtZW50LmRlZmF1bHRWaWV3LFxuICAgIHY1Q29tcGF0ID0gZmFsc2VcbiAgfSA9IG9wdGlvbnM7XG4gIGxldCBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIGxldCBhY3Rpb24gPSBBY3Rpb24uUG9wO1xuICBsZXQgbGlzdGVuZXIgPSBudWxsO1xuICBsZXQgaW5kZXggPSBnZXRJbmRleCgpO1xuICAvLyBJbmRleCBzaG91bGQgb25seSBiZSBudWxsIHdoZW4gd2UgaW5pdGlhbGl6ZS4gSWYgbm90LCBpdCdzIGJlY2F1c2UgdGhlXG4gIC8vIHVzZXIgY2FsbGVkIGhpc3RvcnkucHVzaFN0YXRlIG9yIGhpc3RvcnkucmVwbGFjZVN0YXRlIGRpcmVjdGx5LCBpbiB3aGljaFxuICAvLyBjYXNlIHdlIHNob3VsZCBsb2cgYSB3YXJuaW5nIGFzIGl0IHdpbGwgcmVzdWx0IGluIGJ1Z3MuXG4gIGlmIChpbmRleCA9PSBudWxsKSB7XG4gICAgaW5kZXggPSAwO1xuICAgIGdsb2JhbEhpc3RvcnkucmVwbGFjZVN0YXRlKF9leHRlbmRzKHt9LCBnbG9iYWxIaXN0b3J5LnN0YXRlLCB7XG4gICAgICBpZHg6IGluZGV4XG4gICAgfSksIFwiXCIpO1xuICB9XG4gIGZ1bmN0aW9uIGdldEluZGV4KCkge1xuICAgIGxldCBzdGF0ZSA9IGdsb2JhbEhpc3Rvcnkuc3RhdGUgfHwge1xuICAgICAgaWR4OiBudWxsXG4gICAgfTtcbiAgICByZXR1cm4gc3RhdGUuaWR4O1xuICB9XG4gIGZ1bmN0aW9uIGhhbmRsZVBvcCgpIHtcbiAgICBhY3Rpb24gPSBBY3Rpb24uUG9wO1xuICAgIGxldCBuZXh0SW5kZXggPSBnZXRJbmRleCgpO1xuICAgIGxldCBkZWx0YSA9IG5leHRJbmRleCA9PSBudWxsID8gbnVsbCA6IG5leHRJbmRleCAtIGluZGV4O1xuICAgIGluZGV4ID0gbmV4dEluZGV4O1xuICAgIGlmIChsaXN0ZW5lcikge1xuICAgICAgbGlzdGVuZXIoe1xuICAgICAgICBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uLFxuICAgICAgICBkZWx0YVxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHB1c2godG8sIHN0YXRlKSB7XG4gICAgYWN0aW9uID0gQWN0aW9uLlB1c2g7XG4gICAgbGV0IGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oaGlzdG9yeS5sb2NhdGlvbiwgdG8sIHN0YXRlKTtcbiAgICBpZiAodmFsaWRhdGVMb2NhdGlvbikgdmFsaWRhdGVMb2NhdGlvbihsb2NhdGlvbiwgdG8pO1xuICAgIGluZGV4ID0gZ2V0SW5kZXgoKSArIDE7XG4gICAgbGV0IGhpc3RvcnlTdGF0ZSA9IGdldEhpc3RvcnlTdGF0ZShsb2NhdGlvbiwgaW5kZXgpO1xuICAgIGxldCB1cmwgPSBoaXN0b3J5LmNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgIC8vIHRyeS4uLmNhdGNoIGJlY2F1c2UgaU9TIGxpbWl0cyB1cyB0byAxMDAgcHVzaFN0YXRlIGNhbGxzIDovXG4gICAgdHJ5IHtcbiAgICAgIGdsb2JhbEhpc3RvcnkucHVzaFN0YXRlKGhpc3RvcnlTdGF0ZSwgXCJcIiwgdXJsKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgLy8gSWYgdGhlIGV4Y2VwdGlvbiBpcyBiZWNhdXNlIGBzdGF0ZWAgY2FuJ3QgYmUgc2VyaWFsaXplZCwgbGV0IHRoYXQgdGhyb3dcbiAgICAgIC8vIG91dHdhcmRzIGp1c3QgbGlrZSBhIHJlcGxhY2UgY2FsbCB3b3VsZCBzbyB0aGUgZGV2IGtub3dzIHRoZSBjYXVzZVxuICAgICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvbmF2LWhpc3RvcnktYXBpcy5odG1sI3NoYXJlZC1oaXN0b3J5LXB1c2gvcmVwbGFjZS1zdGF0ZS1zdGVwc1xuICAgICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3RydWN0dXJlZC1kYXRhLmh0bWwjc3RydWN0dXJlZHNlcmlhbGl6ZWludGVybmFsXG4gICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBET01FeGNlcHRpb24gJiYgZXJyb3IubmFtZSA9PT0gXCJEYXRhQ2xvbmVFcnJvclwiKSB7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuICAgICAgLy8gVGhleSBhcmUgZ29pbmcgdG8gbG9zZSBzdGF0ZSBoZXJlLCBidXQgdGhlcmUgaXMgbm8gcmVhbFxuICAgICAgLy8gd2F5IHRvIHdhcm4gdGhlbSBhYm91dCBpdCBzaW5jZSB0aGUgcGFnZSB3aWxsIHJlZnJlc2guLi5cbiAgICAgIHdpbmRvdy5sb2NhdGlvbi5hc3NpZ24odXJsKTtcbiAgICB9XG4gICAgaWYgKHY1Q29tcGF0ICYmIGxpc3RlbmVyKSB7XG4gICAgICBsaXN0ZW5lcih7XG4gICAgICAgIGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb24sXG4gICAgICAgIGRlbHRhOiAxXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gcmVwbGFjZSh0bywgc3RhdGUpIHtcbiAgICBhY3Rpb24gPSBBY3Rpb24uUmVwbGFjZTtcbiAgICBsZXQgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihoaXN0b3J5LmxvY2F0aW9uLCB0bywgc3RhdGUpO1xuICAgIGlmICh2YWxpZGF0ZUxvY2F0aW9uKSB2YWxpZGF0ZUxvY2F0aW9uKGxvY2F0aW9uLCB0byk7XG4gICAgaW5kZXggPSBnZXRJbmRleCgpO1xuICAgIGxldCBoaXN0b3J5U3RhdGUgPSBnZXRIaXN0b3J5U3RhdGUobG9jYXRpb24sIGluZGV4KTtcbiAgICBsZXQgdXJsID0gaGlzdG9yeS5jcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICBnbG9iYWxIaXN0b3J5LnJlcGxhY2VTdGF0ZShoaXN0b3J5U3RhdGUsIFwiXCIsIHVybCk7XG4gICAgaWYgKHY1Q29tcGF0ICYmIGxpc3RlbmVyKSB7XG4gICAgICBsaXN0ZW5lcih7XG4gICAgICAgIGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb24sXG4gICAgICAgIGRlbHRhOiAwXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gY3JlYXRlVVJMKHRvKSB7XG4gICAgLy8gd2luZG93LmxvY2F0aW9uLm9yaWdpbiBpcyBcIm51bGxcIiAodGhlIGxpdGVyYWwgc3RyaW5nIHZhbHVlKSBpbiBGaXJlZm94XG4gICAgLy8gdW5kZXIgY2VydGFpbiBjb25kaXRpb25zLCBub3RhYmx5IHdoZW4gc2VydmluZyBmcm9tIGEgbG9jYWwgSFRNTCBmaWxlXG4gICAgLy8gU2VlIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTg3ODI5N1xuICAgIGxldCBiYXNlID0gd2luZG93LmxvY2F0aW9uLm9yaWdpbiAhPT0gXCJudWxsXCIgPyB3aW5kb3cubG9jYXRpb24ub3JpZ2luIDogd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gICAgbGV0IGhyZWYgPSB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyB0byA6IGNyZWF0ZVBhdGgodG8pO1xuICAgIC8vIFRyZWF0aW5nIHRoaXMgYXMgYSBmdWxsIFVSTCB3aWxsIHN0cmlwIGFueSB0cmFpbGluZyBzcGFjZXMgc28gd2UgbmVlZCB0b1xuICAgIC8vIHByZS1lbmNvZGUgdGhlbSBzaW5jZSB0aGV5IG1pZ2h0IGJlIHBhcnQgb2YgYSBtYXRjaGluZyBzcGxhdCBwYXJhbSBmcm9tXG4gICAgLy8gYW4gYW5jZXN0b3Igcm91dGVcbiAgICBocmVmID0gaHJlZi5yZXBsYWNlKC8gJC8sIFwiJTIwXCIpO1xuICAgIGludmFyaWFudChiYXNlLCBcIk5vIHdpbmRvdy5sb2NhdGlvbi4ob3JpZ2lufGhyZWYpIGF2YWlsYWJsZSB0byBjcmVhdGUgVVJMIGZvciBocmVmOiBcIiArIGhyZWYpO1xuICAgIHJldHVybiBuZXcgVVJMKGhyZWYsIGJhc2UpO1xuICB9XG4gIGxldCBoaXN0b3J5ID0ge1xuICAgIGdldCBhY3Rpb24oKSB7XG4gICAgICByZXR1cm4gYWN0aW9uO1xuICAgIH0sXG4gICAgZ2V0IGxvY2F0aW9uKCkge1xuICAgICAgcmV0dXJuIGdldExvY2F0aW9uKHdpbmRvdywgZ2xvYmFsSGlzdG9yeSk7XG4gICAgfSxcbiAgICBsaXN0ZW4oZm4pIHtcbiAgICAgIGlmIChsaXN0ZW5lcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIGhpc3Rvcnkgb25seSBhY2NlcHRzIG9uZSBhY3RpdmUgbGlzdGVuZXJcIik7XG4gICAgICB9XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihQb3BTdGF0ZUV2ZW50VHlwZSwgaGFuZGxlUG9wKTtcbiAgICAgIGxpc3RlbmVyID0gZm47XG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihQb3BTdGF0ZUV2ZW50VHlwZSwgaGFuZGxlUG9wKTtcbiAgICAgICAgbGlzdGVuZXIgPSBudWxsO1xuICAgICAgfTtcbiAgICB9LFxuICAgIGNyZWF0ZUhyZWYodG8pIHtcbiAgICAgIHJldHVybiBjcmVhdGVIcmVmKHdpbmRvdywgdG8pO1xuICAgIH0sXG4gICAgY3JlYXRlVVJMLFxuICAgIGVuY29kZUxvY2F0aW9uKHRvKSB7XG4gICAgICAvLyBFbmNvZGUgYSBMb2NhdGlvbiB0aGUgc2FtZSB3YXkgd2luZG93LmxvY2F0aW9uIHdvdWxkXG4gICAgICBsZXQgdXJsID0gY3JlYXRlVVJMKHRvKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBhdGhuYW1lOiB1cmwucGF0aG5hbWUsXG4gICAgICAgIHNlYXJjaDogdXJsLnNlYXJjaCxcbiAgICAgICAgaGFzaDogdXJsLmhhc2hcbiAgICAgIH07XG4gICAgfSxcbiAgICBwdXNoLFxuICAgIHJlcGxhY2UsXG4gICAgZ28obikge1xuICAgICAgcmV0dXJuIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gICAgfVxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cbi8vI2VuZHJlZ2lvblxuXG52YXIgUmVzdWx0VHlwZTtcbihmdW5jdGlvbiAoUmVzdWx0VHlwZSkge1xuICBSZXN1bHRUeXBlW1wiZGF0YVwiXSA9IFwiZGF0YVwiO1xuICBSZXN1bHRUeXBlW1wiZGVmZXJyZWRcIl0gPSBcImRlZmVycmVkXCI7XG4gIFJlc3VsdFR5cGVbXCJyZWRpcmVjdFwiXSA9IFwicmVkaXJlY3RcIjtcbiAgUmVzdWx0VHlwZVtcImVycm9yXCJdID0gXCJlcnJvclwiO1xufSkoUmVzdWx0VHlwZSB8fCAoUmVzdWx0VHlwZSA9IHt9KSk7XG5jb25zdCBpbW11dGFibGVSb3V0ZUtleXMgPSBuZXcgU2V0KFtcImxhenlcIiwgXCJjYXNlU2Vuc2l0aXZlXCIsIFwicGF0aFwiLCBcImlkXCIsIFwiaW5kZXhcIiwgXCJjaGlsZHJlblwiXSk7XG5mdW5jdGlvbiBpc0luZGV4Um91dGUocm91dGUpIHtcbiAgcmV0dXJuIHJvdXRlLmluZGV4ID09PSB0cnVlO1xufVxuLy8gV2FsayB0aGUgcm91dGUgdHJlZSBnZW5lcmF0aW5nIHVuaXF1ZSBJRHMgd2hlcmUgbmVjZXNzYXJ5LCBzbyB3ZSBhcmUgd29ya2luZ1xuLy8gc29sZWx5IHdpdGggQWdub3N0aWNEYXRhUm91dGVPYmplY3QncyB3aXRoaW4gdGhlIFJvdXRlclxuZnVuY3Rpb24gY29udmVydFJvdXRlc1RvRGF0YVJvdXRlcyhyb3V0ZXMsIG1hcFJvdXRlUHJvcGVydGllcywgcGFyZW50UGF0aCwgbWFuaWZlc3QpIHtcbiAgaWYgKHBhcmVudFBhdGggPT09IHZvaWQgMCkge1xuICAgIHBhcmVudFBhdGggPSBbXTtcbiAgfVxuICBpZiAobWFuaWZlc3QgPT09IHZvaWQgMCkge1xuICAgIG1hbmlmZXN0ID0ge307XG4gIH1cbiAgcmV0dXJuIHJvdXRlcy5tYXAoKHJvdXRlLCBpbmRleCkgPT4ge1xuICAgIGxldCB0cmVlUGF0aCA9IFsuLi5wYXJlbnRQYXRoLCBpbmRleF07XG4gICAgbGV0IGlkID0gdHlwZW9mIHJvdXRlLmlkID09PSBcInN0cmluZ1wiID8gcm91dGUuaWQgOiB0cmVlUGF0aC5qb2luKFwiLVwiKTtcbiAgICBpbnZhcmlhbnQocm91dGUuaW5kZXggIT09IHRydWUgfHwgIXJvdXRlLmNoaWxkcmVuLCBcIkNhbm5vdCBzcGVjaWZ5IGNoaWxkcmVuIG9uIGFuIGluZGV4IHJvdXRlXCIpO1xuICAgIGludmFyaWFudCghbWFuaWZlc3RbaWRdLCBcIkZvdW5kIGEgcm91dGUgaWQgY29sbGlzaW9uIG9uIGlkIFxcXCJcIiArIGlkICsgXCJcXFwiLiAgUm91dGUgXCIgKyBcImlkJ3MgbXVzdCBiZSBnbG9iYWxseSB1bmlxdWUgd2l0aGluIERhdGEgUm91dGVyIHVzYWdlc1wiKTtcbiAgICBpZiAoaXNJbmRleFJvdXRlKHJvdXRlKSkge1xuICAgICAgbGV0IGluZGV4Um91dGUgPSBfZXh0ZW5kcyh7fSwgcm91dGUsIG1hcFJvdXRlUHJvcGVydGllcyhyb3V0ZSksIHtcbiAgICAgICAgaWRcbiAgICAgIH0pO1xuICAgICAgbWFuaWZlc3RbaWRdID0gaW5kZXhSb3V0ZTtcbiAgICAgIHJldHVybiBpbmRleFJvdXRlO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgcGF0aE9yTGF5b3V0Um91dGUgPSBfZXh0ZW5kcyh7fSwgcm91dGUsIG1hcFJvdXRlUHJvcGVydGllcyhyb3V0ZSksIHtcbiAgICAgICAgaWQsXG4gICAgICAgIGNoaWxkcmVuOiB1bmRlZmluZWRcbiAgICAgIH0pO1xuICAgICAgbWFuaWZlc3RbaWRdID0gcGF0aE9yTGF5b3V0Um91dGU7XG4gICAgICBpZiAocm91dGUuY2hpbGRyZW4pIHtcbiAgICAgICAgcGF0aE9yTGF5b3V0Um91dGUuY2hpbGRyZW4gPSBjb252ZXJ0Um91dGVzVG9EYXRhUm91dGVzKHJvdXRlLmNoaWxkcmVuLCBtYXBSb3V0ZVByb3BlcnRpZXMsIHRyZWVQYXRoLCBtYW5pZmVzdCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcGF0aE9yTGF5b3V0Um91dGU7XG4gICAgfVxuICB9KTtcbn1cbi8qKlxuICogTWF0Y2hlcyB0aGUgZ2l2ZW4gcm91dGVzIHRvIGEgbG9jYXRpb24gYW5kIHJldHVybnMgdGhlIG1hdGNoIGRhdGEuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS91dGlscy9tYXRjaC1yb3V0ZXNcbiAqL1xuZnVuY3Rpb24gbWF0Y2hSb3V0ZXMocm91dGVzLCBsb2NhdGlvbkFyZywgYmFzZW5hbWUpIHtcbiAgaWYgKGJhc2VuYW1lID09PSB2b2lkIDApIHtcbiAgICBiYXNlbmFtZSA9IFwiL1wiO1xuICB9XG4gIGxldCBsb2NhdGlvbiA9IHR5cGVvZiBsb2NhdGlvbkFyZyA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aChsb2NhdGlvbkFyZykgOiBsb2NhdGlvbkFyZztcbiAgbGV0IHBhdGhuYW1lID0gc3RyaXBCYXNlbmFtZShsb2NhdGlvbi5wYXRobmFtZSB8fCBcIi9cIiwgYmFzZW5hbWUpO1xuICBpZiAocGF0aG5hbWUgPT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGxldCBicmFuY2hlcyA9IGZsYXR0ZW5Sb3V0ZXMocm91dGVzKTtcbiAgcmFua1JvdXRlQnJhbmNoZXMoYnJhbmNoZXMpO1xuICBsZXQgbWF0Y2hlcyA9IG51bGw7XG4gIGZvciAobGV0IGkgPSAwOyBtYXRjaGVzID09IG51bGwgJiYgaSA8IGJyYW5jaGVzLmxlbmd0aDsgKytpKSB7XG4gICAgLy8gSW5jb21pbmcgcGF0aG5hbWVzIGFyZSBnZW5lcmFsbHkgZW5jb2RlZCBmcm9tIGVpdGhlciB3aW5kb3cubG9jYXRpb25cbiAgICAvLyBvciBmcm9tIHJvdXRlci5uYXZpZ2F0ZSwgYnV0IHdlIHdhbnQgdG8gbWF0Y2ggYWdhaW5zdCB0aGUgdW5lbmNvZGVkXG4gICAgLy8gcGF0aHMgaW4gdGhlIHJvdXRlIGRlZmluaXRpb25zLiAgTWVtb3J5IHJvdXRlciBsb2NhdGlvbnMgd29uJ3QgYmVcbiAgICAvLyBlbmNvZGVkIGhlcmUgYnV0IHRoZXJlIGFsc28gc2hvdWxkbid0IGJlIGFueXRoaW5nIHRvIGRlY29kZSBzbyB0aGlzXG4gICAgLy8gc2hvdWxkIGJlIGEgc2FmZSBvcGVyYXRpb24uICBUaGlzIGF2b2lkcyBuZWVkaW5nIG1hdGNoUm91dGVzIHRvIGJlXG4gICAgLy8gaGlzdG9yeS1hd2FyZS5cbiAgICBsZXQgZGVjb2RlZCA9IGRlY29kZVBhdGgocGF0aG5hbWUpO1xuICAgIG1hdGNoZXMgPSBtYXRjaFJvdXRlQnJhbmNoKGJyYW5jaGVzW2ldLCBkZWNvZGVkKTtcbiAgfVxuICByZXR1cm4gbWF0Y2hlcztcbn1cbmZ1bmN0aW9uIGNvbnZlcnRSb3V0ZU1hdGNoVG9VaU1hdGNoKG1hdGNoLCBsb2FkZXJEYXRhKSB7XG4gIGxldCB7XG4gICAgcm91dGUsXG4gICAgcGF0aG5hbWUsXG4gICAgcGFyYW1zXG4gIH0gPSBtYXRjaDtcbiAgcmV0dXJuIHtcbiAgICBpZDogcm91dGUuaWQsXG4gICAgcGF0aG5hbWUsXG4gICAgcGFyYW1zLFxuICAgIGRhdGE6IGxvYWRlckRhdGFbcm91dGUuaWRdLFxuICAgIGhhbmRsZTogcm91dGUuaGFuZGxlXG4gIH07XG59XG5mdW5jdGlvbiBmbGF0dGVuUm91dGVzKHJvdXRlcywgYnJhbmNoZXMsIHBhcmVudHNNZXRhLCBwYXJlbnRQYXRoKSB7XG4gIGlmIChicmFuY2hlcyA9PT0gdm9pZCAwKSB7XG4gICAgYnJhbmNoZXMgPSBbXTtcbiAgfVxuICBpZiAocGFyZW50c01ldGEgPT09IHZvaWQgMCkge1xuICAgIHBhcmVudHNNZXRhID0gW107XG4gIH1cbiAgaWYgKHBhcmVudFBhdGggPT09IHZvaWQgMCkge1xuICAgIHBhcmVudFBhdGggPSBcIlwiO1xuICB9XG4gIGxldCBmbGF0dGVuUm91dGUgPSAocm91dGUsIGluZGV4LCByZWxhdGl2ZVBhdGgpID0+IHtcbiAgICBsZXQgbWV0YSA9IHtcbiAgICAgIHJlbGF0aXZlUGF0aDogcmVsYXRpdmVQYXRoID09PSB1bmRlZmluZWQgPyByb3V0ZS5wYXRoIHx8IFwiXCIgOiByZWxhdGl2ZVBhdGgsXG4gICAgICBjYXNlU2Vuc2l0aXZlOiByb3V0ZS5jYXNlU2Vuc2l0aXZlID09PSB0cnVlLFxuICAgICAgY2hpbGRyZW5JbmRleDogaW5kZXgsXG4gICAgICByb3V0ZVxuICAgIH07XG4gICAgaWYgKG1ldGEucmVsYXRpdmVQYXRoLnN0YXJ0c1dpdGgoXCIvXCIpKSB7XG4gICAgICBpbnZhcmlhbnQobWV0YS5yZWxhdGl2ZVBhdGguc3RhcnRzV2l0aChwYXJlbnRQYXRoKSwgXCJBYnNvbHV0ZSByb3V0ZSBwYXRoIFxcXCJcIiArIG1ldGEucmVsYXRpdmVQYXRoICsgXCJcXFwiIG5lc3RlZCB1bmRlciBwYXRoIFwiICsgKFwiXFxcIlwiICsgcGFyZW50UGF0aCArIFwiXFxcIiBpcyBub3QgdmFsaWQuIEFuIGFic29sdXRlIGNoaWxkIHJvdXRlIHBhdGggXCIpICsgXCJtdXN0IHN0YXJ0IHdpdGggdGhlIGNvbWJpbmVkIHBhdGggb2YgYWxsIGl0cyBwYXJlbnQgcm91dGVzLlwiKTtcbiAgICAgIG1ldGEucmVsYXRpdmVQYXRoID0gbWV0YS5yZWxhdGl2ZVBhdGguc2xpY2UocGFyZW50UGF0aC5sZW5ndGgpO1xuICAgIH1cbiAgICBsZXQgcGF0aCA9IGpvaW5QYXRocyhbcGFyZW50UGF0aCwgbWV0YS5yZWxhdGl2ZVBhdGhdKTtcbiAgICBsZXQgcm91dGVzTWV0YSA9IHBhcmVudHNNZXRhLmNvbmNhdChtZXRhKTtcbiAgICAvLyBBZGQgdGhlIGNoaWxkcmVuIGJlZm9yZSBhZGRpbmcgdGhpcyByb3V0ZSB0byB0aGUgYXJyYXksIHNvIHdlIHRyYXZlcnNlIHRoZVxuICAgIC8vIHJvdXRlIHRyZWUgZGVwdGgtZmlyc3QgYW5kIGNoaWxkIHJvdXRlcyBhcHBlYXIgYmVmb3JlIHRoZWlyIHBhcmVudHMgaW5cbiAgICAvLyB0aGUgXCJmbGF0dGVuZWRcIiB2ZXJzaW9uLlxuICAgIGlmIChyb3V0ZS5jaGlsZHJlbiAmJiByb3V0ZS5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICBpbnZhcmlhbnQoXG4gICAgICAvLyBPdXIgdHlwZXMga25vdyBiZXR0ZXIsIGJ1dCBydW50aW1lIEpTIG1heSBub3QhXG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICByb3V0ZS5pbmRleCAhPT0gdHJ1ZSwgXCJJbmRleCByb3V0ZXMgbXVzdCBub3QgaGF2ZSBjaGlsZCByb3V0ZXMuIFBsZWFzZSByZW1vdmUgXCIgKyAoXCJhbGwgY2hpbGQgcm91dGVzIGZyb20gcm91dGUgcGF0aCBcXFwiXCIgKyBwYXRoICsgXCJcXFwiLlwiKSk7XG4gICAgICBmbGF0dGVuUm91dGVzKHJvdXRlLmNoaWxkcmVuLCBicmFuY2hlcywgcm91dGVzTWV0YSwgcGF0aCk7XG4gICAgfVxuICAgIC8vIFJvdXRlcyB3aXRob3V0IGEgcGF0aCBzaG91bGRuJ3QgZXZlciBtYXRjaCBieSB0aGVtc2VsdmVzIHVubGVzcyB0aGV5IGFyZVxuICAgIC8vIGluZGV4IHJvdXRlcywgc28gZG9uJ3QgYWRkIHRoZW0gdG8gdGhlIGxpc3Qgb2YgcG9zc2libGUgYnJhbmNoZXMuXG4gICAgaWYgKHJvdXRlLnBhdGggPT0gbnVsbCAmJiAhcm91dGUuaW5kZXgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgYnJhbmNoZXMucHVzaCh7XG4gICAgICBwYXRoLFxuICAgICAgc2NvcmU6IGNvbXB1dGVTY29yZShwYXRoLCByb3V0ZS5pbmRleCksXG4gICAgICByb3V0ZXNNZXRhXG4gICAgfSk7XG4gIH07XG4gIHJvdXRlcy5mb3JFYWNoKChyb3V0ZSwgaW5kZXgpID0+IHtcbiAgICB2YXIgX3JvdXRlJHBhdGg7XG4gICAgLy8gY29hcnNlLWdyYWluIGNoZWNrIGZvciBvcHRpb25hbCBwYXJhbXNcbiAgICBpZiAocm91dGUucGF0aCA9PT0gXCJcIiB8fCAhKChfcm91dGUkcGF0aCA9IHJvdXRlLnBhdGgpICE9IG51bGwgJiYgX3JvdXRlJHBhdGguaW5jbHVkZXMoXCI/XCIpKSkge1xuICAgICAgZmxhdHRlblJvdXRlKHJvdXRlLCBpbmRleCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAobGV0IGV4cGxvZGVkIG9mIGV4cGxvZGVPcHRpb25hbFNlZ21lbnRzKHJvdXRlLnBhdGgpKSB7XG4gICAgICAgIGZsYXR0ZW5Sb3V0ZShyb3V0ZSwgaW5kZXgsIGV4cGxvZGVkKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICByZXR1cm4gYnJhbmNoZXM7XG59XG4vKipcbiAqIENvbXB1dGVzIGFsbCBjb21iaW5hdGlvbnMgb2Ygb3B0aW9uYWwgcGF0aCBzZWdtZW50cyBmb3IgYSBnaXZlbiBwYXRoLFxuICogZXhjbHVkaW5nIGNvbWJpbmF0aW9ucyB0aGF0IGFyZSBhbWJpZ3VvdXMgYW5kIG9mIGxvd2VyIHByaW9yaXR5LlxuICpcbiAqIEZvciBleGFtcGxlLCBgL29uZS86dHdvPy90aHJlZS86Zm91cj8vOmZpdmU/YCBleHBsb2RlcyB0bzpcbiAqIC0gYC9vbmUvdGhyZWVgXG4gKiAtIGAvb25lLzp0d28vdGhyZWVgXG4gKiAtIGAvb25lL3RocmVlLzpmb3VyYFxuICogLSBgL29uZS90aHJlZS86Zml2ZWBcbiAqIC0gYC9vbmUvOnR3by90aHJlZS86Zm91cmBcbiAqIC0gYC9vbmUvOnR3by90aHJlZS86Zml2ZWBcbiAqIC0gYC9vbmUvdGhyZWUvOmZvdXIvOmZpdmVgXG4gKiAtIGAvb25lLzp0d28vdGhyZWUvOmZvdXIvOmZpdmVgXG4gKi9cbmZ1bmN0aW9uIGV4cGxvZGVPcHRpb25hbFNlZ21lbnRzKHBhdGgpIHtcbiAgbGV0IHNlZ21lbnRzID0gcGF0aC5zcGxpdChcIi9cIik7XG4gIGlmIChzZWdtZW50cy5sZW5ndGggPT09IDApIHJldHVybiBbXTtcbiAgbGV0IFtmaXJzdCwgLi4ucmVzdF0gPSBzZWdtZW50cztcbiAgLy8gT3B0aW9uYWwgcGF0aCBzZWdtZW50cyBhcmUgZGVub3RlZCBieSBhIHRyYWlsaW5nIGA/YFxuICBsZXQgaXNPcHRpb25hbCA9IGZpcnN0LmVuZHNXaXRoKFwiP1wiKTtcbiAgLy8gQ29tcHV0ZSB0aGUgY29ycmVzcG9uZGluZyByZXF1aXJlZCBzZWdtZW50OiBgZm9vP2AgLT4gYGZvb2BcbiAgbGV0IHJlcXVpcmVkID0gZmlyc3QucmVwbGFjZSgvXFw/JC8sIFwiXCIpO1xuICBpZiAocmVzdC5sZW5ndGggPT09IDApIHtcbiAgICAvLyBJbnRlcHJldCBlbXB0eSBzdHJpbmcgYXMgb21pdHRpbmcgYW4gb3B0aW9uYWwgc2VnbWVudFxuICAgIC8vIGBbXCJvbmVcIiwgXCJcIiwgXCJ0aHJlZVwiXWAgY29ycmVzcG9uZHMgdG8gb21pdHRpbmcgYDp0d29gIGZyb20gYC9vbmUvOnR3bz8vdGhyZWVgIC0+IGAvb25lL3RocmVlYFxuICAgIHJldHVybiBpc09wdGlvbmFsID8gW3JlcXVpcmVkLCBcIlwiXSA6IFtyZXF1aXJlZF07XG4gIH1cbiAgbGV0IHJlc3RFeHBsb2RlZCA9IGV4cGxvZGVPcHRpb25hbFNlZ21lbnRzKHJlc3Quam9pbihcIi9cIikpO1xuICBsZXQgcmVzdWx0ID0gW107XG4gIC8vIEFsbCBjaGlsZCBwYXRocyB3aXRoIHRoZSBwcmVmaXguICBEbyB0aGlzIGZvciBhbGwgY2hpbGRyZW4gYmVmb3JlIHRoZVxuICAvLyBvcHRpb25hbCB2ZXJzaW9uIGZvciBhbGwgY2hpbGRyZW4sIHNvIHdlIGdldCBjb25zaXN0ZW50IG9yZGVyaW5nIHdoZXJlIHRoZVxuICAvLyBwYXJlbnQgb3B0aW9uYWwgYXNwZWN0IGlzIHByZWZlcnJlZCBhcyByZXF1aXJlZC4gIE90aGVyd2lzZSwgd2UgY2FuIGdldFxuICAvLyBjaGlsZCBzZWN0aW9ucyBpbnRlcnNwZXJzZWQgd2hlcmUgZGVlcGVyIG9wdGlvbmFsIHNlZ21lbnRzIGFyZSBoaWdoZXIgdGhhblxuICAvLyBwYXJlbnQgb3B0aW9uYWwgc2VnbWVudHMsIHdoZXJlIGZvciBleGFtcGxlLCAvOnR3byB3b3VsZCBleHBsb2RlIF9lYXJsaWVyX1xuICAvLyB0aGVuIC86b25lLiAgQnkgYWx3YXlzIGluY2x1ZGluZyB0aGUgcGFyZW50IGFzIHJlcXVpcmVkIF9mb3IgYWxsIGNoaWxkcmVuX1xuICAvLyBmaXJzdCwgd2UgYXZvaWQgdGhpcyBpc3N1ZVxuICByZXN1bHQucHVzaCguLi5yZXN0RXhwbG9kZWQubWFwKHN1YnBhdGggPT4gc3VicGF0aCA9PT0gXCJcIiA/IHJlcXVpcmVkIDogW3JlcXVpcmVkLCBzdWJwYXRoXS5qb2luKFwiL1wiKSkpO1xuICAvLyBUaGVuLCBpZiB0aGlzIGlzIGFuIG9wdGlvbmFsIHZhbHVlLCBhZGQgYWxsIGNoaWxkIHZlcnNpb25zIHdpdGhvdXRcbiAgaWYgKGlzT3B0aW9uYWwpIHtcbiAgICByZXN1bHQucHVzaCguLi5yZXN0RXhwbG9kZWQpO1xuICB9XG4gIC8vIGZvciBhYnNvbHV0ZSBwYXRocywgZW5zdXJlIGAvYCBpbnN0ZWFkIG9mIGVtcHR5IHNlZ21lbnRcbiAgcmV0dXJuIHJlc3VsdC5tYXAoZXhwbG9kZWQgPT4gcGF0aC5zdGFydHNXaXRoKFwiL1wiKSAmJiBleHBsb2RlZCA9PT0gXCJcIiA/IFwiL1wiIDogZXhwbG9kZWQpO1xufVxuZnVuY3Rpb24gcmFua1JvdXRlQnJhbmNoZXMoYnJhbmNoZXMpIHtcbiAgYnJhbmNoZXMuc29ydCgoYSwgYikgPT4gYS5zY29yZSAhPT0gYi5zY29yZSA/IGIuc2NvcmUgLSBhLnNjb3JlIC8vIEhpZ2hlciBzY29yZSBmaXJzdFxuICA6IGNvbXBhcmVJbmRleGVzKGEucm91dGVzTWV0YS5tYXAobWV0YSA9PiBtZXRhLmNoaWxkcmVuSW5kZXgpLCBiLnJvdXRlc01ldGEubWFwKG1ldGEgPT4gbWV0YS5jaGlsZHJlbkluZGV4KSkpO1xufVxuY29uc3QgcGFyYW1SZSA9IC9eOltcXHctXSskLztcbmNvbnN0IGR5bmFtaWNTZWdtZW50VmFsdWUgPSAzO1xuY29uc3QgaW5kZXhSb3V0ZVZhbHVlID0gMjtcbmNvbnN0IGVtcHR5U2VnbWVudFZhbHVlID0gMTtcbmNvbnN0IHN0YXRpY1NlZ21lbnRWYWx1ZSA9IDEwO1xuY29uc3Qgc3BsYXRQZW5hbHR5ID0gLTI7XG5jb25zdCBpc1NwbGF0ID0gcyA9PiBzID09PSBcIipcIjtcbmZ1bmN0aW9uIGNvbXB1dGVTY29yZShwYXRoLCBpbmRleCkge1xuICBsZXQgc2VnbWVudHMgPSBwYXRoLnNwbGl0KFwiL1wiKTtcbiAgbGV0IGluaXRpYWxTY29yZSA9IHNlZ21lbnRzLmxlbmd0aDtcbiAgaWYgKHNlZ21lbnRzLnNvbWUoaXNTcGxhdCkpIHtcbiAgICBpbml0aWFsU2NvcmUgKz0gc3BsYXRQZW5hbHR5O1xuICB9XG4gIGlmIChpbmRleCkge1xuICAgIGluaXRpYWxTY29yZSArPSBpbmRleFJvdXRlVmFsdWU7XG4gIH1cbiAgcmV0dXJuIHNlZ21lbnRzLmZpbHRlcihzID0+ICFpc1NwbGF0KHMpKS5yZWR1Y2UoKHNjb3JlLCBzZWdtZW50KSA9PiBzY29yZSArIChwYXJhbVJlLnRlc3Qoc2VnbWVudCkgPyBkeW5hbWljU2VnbWVudFZhbHVlIDogc2VnbWVudCA9PT0gXCJcIiA/IGVtcHR5U2VnbWVudFZhbHVlIDogc3RhdGljU2VnbWVudFZhbHVlKSwgaW5pdGlhbFNjb3JlKTtcbn1cbmZ1bmN0aW9uIGNvbXBhcmVJbmRleGVzKGEsIGIpIHtcbiAgbGV0IHNpYmxpbmdzID0gYS5sZW5ndGggPT09IGIubGVuZ3RoICYmIGEuc2xpY2UoMCwgLTEpLmV2ZXJ5KChuLCBpKSA9PiBuID09PSBiW2ldKTtcbiAgcmV0dXJuIHNpYmxpbmdzID9cbiAgLy8gSWYgdHdvIHJvdXRlcyBhcmUgc2libGluZ3MsIHdlIHNob3VsZCB0cnkgdG8gbWF0Y2ggdGhlIGVhcmxpZXIgc2libGluZ1xuICAvLyBmaXJzdC4gVGhpcyBhbGxvd3MgcGVvcGxlIHRvIGhhdmUgZmluZS1ncmFpbmVkIGNvbnRyb2wgb3ZlciB0aGUgbWF0Y2hpbmdcbiAgLy8gYmVoYXZpb3IgYnkgc2ltcGx5IHB1dHRpbmcgcm91dGVzIHdpdGggaWRlbnRpY2FsIHBhdGhzIGluIHRoZSBvcmRlciB0aGV5XG4gIC8vIHdhbnQgdGhlbSB0cmllZC5cbiAgYVthLmxlbmd0aCAtIDFdIC0gYltiLmxlbmd0aCAtIDFdIDpcbiAgLy8gT3RoZXJ3aXNlLCBpdCBkb2Vzbid0IHJlYWxseSBtYWtlIHNlbnNlIHRvIHJhbmsgbm9uLXNpYmxpbmdzIGJ5IGluZGV4LFxuICAvLyBzbyB0aGV5IHNvcnQgZXF1YWxseS5cbiAgMDtcbn1cbmZ1bmN0aW9uIG1hdGNoUm91dGVCcmFuY2goYnJhbmNoLCBwYXRobmFtZSkge1xuICBsZXQge1xuICAgIHJvdXRlc01ldGFcbiAgfSA9IGJyYW5jaDtcbiAgbGV0IG1hdGNoZWRQYXJhbXMgPSB7fTtcbiAgbGV0IG1hdGNoZWRQYXRobmFtZSA9IFwiL1wiO1xuICBsZXQgbWF0Y2hlcyA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHJvdXRlc01ldGEubGVuZ3RoOyArK2kpIHtcbiAgICBsZXQgbWV0YSA9IHJvdXRlc01ldGFbaV07XG4gICAgbGV0IGVuZCA9IGkgPT09IHJvdXRlc01ldGEubGVuZ3RoIC0gMTtcbiAgICBsZXQgcmVtYWluaW5nUGF0aG5hbWUgPSBtYXRjaGVkUGF0aG5hbWUgPT09IFwiL1wiID8gcGF0aG5hbWUgOiBwYXRobmFtZS5zbGljZShtYXRjaGVkUGF0aG5hbWUubGVuZ3RoKSB8fCBcIi9cIjtcbiAgICBsZXQgbWF0Y2ggPSBtYXRjaFBhdGgoe1xuICAgICAgcGF0aDogbWV0YS5yZWxhdGl2ZVBhdGgsXG4gICAgICBjYXNlU2Vuc2l0aXZlOiBtZXRhLmNhc2VTZW5zaXRpdmUsXG4gICAgICBlbmRcbiAgICB9LCByZW1haW5pbmdQYXRobmFtZSk7XG4gICAgaWYgKCFtYXRjaCkgcmV0dXJuIG51bGw7XG4gICAgT2JqZWN0LmFzc2lnbihtYXRjaGVkUGFyYW1zLCBtYXRjaC5wYXJhbXMpO1xuICAgIGxldCByb3V0ZSA9IG1ldGEucm91dGU7XG4gICAgbWF0Y2hlcy5wdXNoKHtcbiAgICAgIC8vIFRPRE86IENhbiB0aGlzIGFzIGJlIGF2b2lkZWQ/XG4gICAgICBwYXJhbXM6IG1hdGNoZWRQYXJhbXMsXG4gICAgICBwYXRobmFtZTogam9pblBhdGhzKFttYXRjaGVkUGF0aG5hbWUsIG1hdGNoLnBhdGhuYW1lXSksXG4gICAgICBwYXRobmFtZUJhc2U6IG5vcm1hbGl6ZVBhdGhuYW1lKGpvaW5QYXRocyhbbWF0Y2hlZFBhdGhuYW1lLCBtYXRjaC5wYXRobmFtZUJhc2VdKSksXG4gICAgICByb3V0ZVxuICAgIH0pO1xuICAgIGlmIChtYXRjaC5wYXRobmFtZUJhc2UgIT09IFwiL1wiKSB7XG4gICAgICBtYXRjaGVkUGF0aG5hbWUgPSBqb2luUGF0aHMoW21hdGNoZWRQYXRobmFtZSwgbWF0Y2gucGF0aG5hbWVCYXNlXSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBtYXRjaGVzO1xufVxuLyoqXG4gKiBSZXR1cm5zIGEgcGF0aCB3aXRoIHBhcmFtcyBpbnRlcnBvbGF0ZWQuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS91dGlscy9nZW5lcmF0ZS1wYXRoXG4gKi9cbmZ1bmN0aW9uIGdlbmVyYXRlUGF0aChvcmlnaW5hbFBhdGgsIHBhcmFtcykge1xuICBpZiAocGFyYW1zID09PSB2b2lkIDApIHtcbiAgICBwYXJhbXMgPSB7fTtcbiAgfVxuICBsZXQgcGF0aCA9IG9yaWdpbmFsUGF0aDtcbiAgaWYgKHBhdGguZW5kc1dpdGgoXCIqXCIpICYmIHBhdGggIT09IFwiKlwiICYmICFwYXRoLmVuZHNXaXRoKFwiLypcIikpIHtcbiAgICB3YXJuaW5nKGZhbHNlLCBcIlJvdXRlIHBhdGggXFxcIlwiICsgcGF0aCArIFwiXFxcIiB3aWxsIGJlIHRyZWF0ZWQgYXMgaWYgaXQgd2VyZSBcIiArIChcIlxcXCJcIiArIHBhdGgucmVwbGFjZSgvXFwqJC8sIFwiLypcIikgKyBcIlxcXCIgYmVjYXVzZSB0aGUgYCpgIGNoYXJhY3RlciBtdXN0IFwiKSArIFwiYWx3YXlzIGZvbGxvdyBhIGAvYCBpbiB0aGUgcGF0dGVybi4gVG8gZ2V0IHJpZCBvZiB0aGlzIHdhcm5pbmcsIFwiICsgKFwicGxlYXNlIGNoYW5nZSB0aGUgcm91dGUgcGF0aCB0byBcXFwiXCIgKyBwYXRoLnJlcGxhY2UoL1xcKiQvLCBcIi8qXCIpICsgXCJcXFwiLlwiKSk7XG4gICAgcGF0aCA9IHBhdGgucmVwbGFjZSgvXFwqJC8sIFwiLypcIik7XG4gIH1cbiAgLy8gZW5zdXJlIGAvYCBpcyBhZGRlZCBhdCB0aGUgYmVnaW5uaW5nIGlmIHRoZSBwYXRoIGlzIGFic29sdXRlXG4gIGNvbnN0IHByZWZpeCA9IHBhdGguc3RhcnRzV2l0aChcIi9cIikgPyBcIi9cIiA6IFwiXCI7XG4gIGNvbnN0IHN0cmluZ2lmeSA9IHAgPT4gcCA9PSBudWxsID8gXCJcIiA6IHR5cGVvZiBwID09PSBcInN0cmluZ1wiID8gcCA6IFN0cmluZyhwKTtcbiAgY29uc3Qgc2VnbWVudHMgPSBwYXRoLnNwbGl0KC9cXC8rLykubWFwKChzZWdtZW50LCBpbmRleCwgYXJyYXkpID0+IHtcbiAgICBjb25zdCBpc0xhc3RTZWdtZW50ID0gaW5kZXggPT09IGFycmF5Lmxlbmd0aCAtIDE7XG4gICAgLy8gb25seSBhcHBseSB0aGUgc3BsYXQgaWYgaXQncyB0aGUgbGFzdCBzZWdtZW50XG4gICAgaWYgKGlzTGFzdFNlZ21lbnQgJiYgc2VnbWVudCA9PT0gXCIqXCIpIHtcbiAgICAgIGNvbnN0IHN0YXIgPSBcIipcIjtcbiAgICAgIC8vIEFwcGx5IHRoZSBzcGxhdFxuICAgICAgcmV0dXJuIHN0cmluZ2lmeShwYXJhbXNbc3Rhcl0pO1xuICAgIH1cbiAgICBjb25zdCBrZXlNYXRjaCA9IHNlZ21lbnQubWF0Y2goL146KFtcXHctXSspKFxcPz8pJC8pO1xuICAgIGlmIChrZXlNYXRjaCkge1xuICAgICAgY29uc3QgWywga2V5LCBvcHRpb25hbF0gPSBrZXlNYXRjaDtcbiAgICAgIGxldCBwYXJhbSA9IHBhcmFtc1trZXldO1xuICAgICAgaW52YXJpYW50KG9wdGlvbmFsID09PSBcIj9cIiB8fCBwYXJhbSAhPSBudWxsLCBcIk1pc3NpbmcgXFxcIjpcIiArIGtleSArIFwiXFxcIiBwYXJhbVwiKTtcbiAgICAgIHJldHVybiBzdHJpbmdpZnkocGFyYW0pO1xuICAgIH1cbiAgICAvLyBSZW1vdmUgYW55IG9wdGlvbmFsIG1hcmtlcnMgZnJvbSBvcHRpb25hbCBzdGF0aWMgc2VnbWVudHNcbiAgICByZXR1cm4gc2VnbWVudC5yZXBsYWNlKC9cXD8kL2csIFwiXCIpO1xuICB9KVxuICAvLyBSZW1vdmUgZW1wdHkgc2VnbWVudHNcbiAgLmZpbHRlcihzZWdtZW50ID0+ICEhc2VnbWVudCk7XG4gIHJldHVybiBwcmVmaXggKyBzZWdtZW50cy5qb2luKFwiL1wiKTtcbn1cbi8qKlxuICogUGVyZm9ybXMgcGF0dGVybiBtYXRjaGluZyBvbiBhIFVSTCBwYXRobmFtZSBhbmQgcmV0dXJucyBpbmZvcm1hdGlvbiBhYm91dFxuICogdGhlIG1hdGNoLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vdXRpbHMvbWF0Y2gtcGF0aFxuICovXG5mdW5jdGlvbiBtYXRjaFBhdGgocGF0dGVybiwgcGF0aG5hbWUpIHtcbiAgaWYgKHR5cGVvZiBwYXR0ZXJuID09PSBcInN0cmluZ1wiKSB7XG4gICAgcGF0dGVybiA9IHtcbiAgICAgIHBhdGg6IHBhdHRlcm4sXG4gICAgICBjYXNlU2Vuc2l0aXZlOiBmYWxzZSxcbiAgICAgIGVuZDogdHJ1ZVxuICAgIH07XG4gIH1cbiAgbGV0IFttYXRjaGVyLCBjb21waWxlZFBhcmFtc10gPSBjb21waWxlUGF0aChwYXR0ZXJuLnBhdGgsIHBhdHRlcm4uY2FzZVNlbnNpdGl2ZSwgcGF0dGVybi5lbmQpO1xuICBsZXQgbWF0Y2ggPSBwYXRobmFtZS5tYXRjaChtYXRjaGVyKTtcbiAgaWYgKCFtYXRjaCkgcmV0dXJuIG51bGw7XG4gIGxldCBtYXRjaGVkUGF0aG5hbWUgPSBtYXRjaFswXTtcbiAgbGV0IHBhdGhuYW1lQmFzZSA9IG1hdGNoZWRQYXRobmFtZS5yZXBsYWNlKC8oLilcXC8rJC8sIFwiJDFcIik7XG4gIGxldCBjYXB0dXJlR3JvdXBzID0gbWF0Y2guc2xpY2UoMSk7XG4gIGxldCBwYXJhbXMgPSBjb21waWxlZFBhcmFtcy5yZWR1Y2UoKG1lbW8sIF9yZWYsIGluZGV4KSA9PiB7XG4gICAgbGV0IHtcbiAgICAgIHBhcmFtTmFtZSxcbiAgICAgIGlzT3B0aW9uYWxcbiAgICB9ID0gX3JlZjtcbiAgICAvLyBXZSBuZWVkIHRvIGNvbXB1dGUgdGhlIHBhdGhuYW1lQmFzZSBoZXJlIHVzaW5nIHRoZSByYXcgc3BsYXQgdmFsdWVcbiAgICAvLyBpbnN0ZWFkIG9mIHVzaW5nIHBhcmFtc1tcIipcIl0gbGF0ZXIgYmVjYXVzZSBpdCB3aWxsIGJlIGRlY29kZWQgdGhlblxuICAgIGlmIChwYXJhbU5hbWUgPT09IFwiKlwiKSB7XG4gICAgICBsZXQgc3BsYXRWYWx1ZSA9IGNhcHR1cmVHcm91cHNbaW5kZXhdIHx8IFwiXCI7XG4gICAgICBwYXRobmFtZUJhc2UgPSBtYXRjaGVkUGF0aG5hbWUuc2xpY2UoMCwgbWF0Y2hlZFBhdGhuYW1lLmxlbmd0aCAtIHNwbGF0VmFsdWUubGVuZ3RoKS5yZXBsYWNlKC8oLilcXC8rJC8sIFwiJDFcIik7XG4gICAgfVxuICAgIGNvbnN0IHZhbHVlID0gY2FwdHVyZUdyb3Vwc1tpbmRleF07XG4gICAgaWYgKGlzT3B0aW9uYWwgJiYgIXZhbHVlKSB7XG4gICAgICBtZW1vW3BhcmFtTmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIG1lbW9bcGFyYW1OYW1lXSA9ICh2YWx1ZSB8fCBcIlwiKS5yZXBsYWNlKC8lMkYvZywgXCIvXCIpO1xuICAgIH1cbiAgICByZXR1cm4gbWVtbztcbiAgfSwge30pO1xuICByZXR1cm4ge1xuICAgIHBhcmFtcyxcbiAgICBwYXRobmFtZTogbWF0Y2hlZFBhdGhuYW1lLFxuICAgIHBhdGhuYW1lQmFzZSxcbiAgICBwYXR0ZXJuXG4gIH07XG59XG5mdW5jdGlvbiBjb21waWxlUGF0aChwYXRoLCBjYXNlU2Vuc2l0aXZlLCBlbmQpIHtcbiAgaWYgKGNhc2VTZW5zaXRpdmUgPT09IHZvaWQgMCkge1xuICAgIGNhc2VTZW5zaXRpdmUgPSBmYWxzZTtcbiAgfVxuICBpZiAoZW5kID09PSB2b2lkIDApIHtcbiAgICBlbmQgPSB0cnVlO1xuICB9XG4gIHdhcm5pbmcocGF0aCA9PT0gXCIqXCIgfHwgIXBhdGguZW5kc1dpdGgoXCIqXCIpIHx8IHBhdGguZW5kc1dpdGgoXCIvKlwiKSwgXCJSb3V0ZSBwYXRoIFxcXCJcIiArIHBhdGggKyBcIlxcXCIgd2lsbCBiZSB0cmVhdGVkIGFzIGlmIGl0IHdlcmUgXCIgKyAoXCJcXFwiXCIgKyBwYXRoLnJlcGxhY2UoL1xcKiQvLCBcIi8qXCIpICsgXCJcXFwiIGJlY2F1c2UgdGhlIGAqYCBjaGFyYWN0ZXIgbXVzdCBcIikgKyBcImFsd2F5cyBmb2xsb3cgYSBgL2AgaW4gdGhlIHBhdHRlcm4uIFRvIGdldCByaWQgb2YgdGhpcyB3YXJuaW5nLCBcIiArIChcInBsZWFzZSBjaGFuZ2UgdGhlIHJvdXRlIHBhdGggdG8gXFxcIlwiICsgcGF0aC5yZXBsYWNlKC9cXCokLywgXCIvKlwiKSArIFwiXFxcIi5cIikpO1xuICBsZXQgcGFyYW1zID0gW107XG4gIGxldCByZWdleHBTb3VyY2UgPSBcIl5cIiArIHBhdGgucmVwbGFjZSgvXFwvKlxcKj8kLywgXCJcIikgLy8gSWdub3JlIHRyYWlsaW5nIC8gYW5kIC8qLCB3ZSdsbCBoYW5kbGUgaXQgYmVsb3dcbiAgLnJlcGxhY2UoL15cXC8qLywgXCIvXCIpIC8vIE1ha2Ugc3VyZSBpdCBoYXMgYSBsZWFkaW5nIC9cbiAgLnJlcGxhY2UoL1tcXFxcLiorXiR7fXwoKVtcXF1dL2csIFwiXFxcXCQmXCIpIC8vIEVzY2FwZSBzcGVjaWFsIHJlZ2V4IGNoYXJzXG4gIC5yZXBsYWNlKC9cXC86KFtcXHctXSspKFxcPyk/L2csIChfLCBwYXJhbU5hbWUsIGlzT3B0aW9uYWwpID0+IHtcbiAgICBwYXJhbXMucHVzaCh7XG4gICAgICBwYXJhbU5hbWUsXG4gICAgICBpc09wdGlvbmFsOiBpc09wdGlvbmFsICE9IG51bGxcbiAgICB9KTtcbiAgICByZXR1cm4gaXNPcHRpb25hbCA/IFwiLz8oW15cXFxcL10rKT9cIiA6IFwiLyhbXlxcXFwvXSspXCI7XG4gIH0pO1xuICBpZiAocGF0aC5lbmRzV2l0aChcIipcIikpIHtcbiAgICBwYXJhbXMucHVzaCh7XG4gICAgICBwYXJhbU5hbWU6IFwiKlwiXG4gICAgfSk7XG4gICAgcmVnZXhwU291cmNlICs9IHBhdGggPT09IFwiKlwiIHx8IHBhdGggPT09IFwiLypcIiA/IFwiKC4qKSRcIiAvLyBBbHJlYWR5IG1hdGNoZWQgdGhlIGluaXRpYWwgLywganVzdCBtYXRjaCB0aGUgcmVzdFxuICAgIDogXCIoPzpcXFxcLyguKyl8XFxcXC8qKSRcIjsgLy8gRG9uJ3QgaW5jbHVkZSB0aGUgLyBpbiBwYXJhbXNbXCIqXCJdXG4gIH0gZWxzZSBpZiAoZW5kKSB7XG4gICAgLy8gV2hlbiBtYXRjaGluZyB0byB0aGUgZW5kLCBpZ25vcmUgdHJhaWxpbmcgc2xhc2hlc1xuICAgIHJlZ2V4cFNvdXJjZSArPSBcIlxcXFwvKiRcIjtcbiAgfSBlbHNlIGlmIChwYXRoICE9PSBcIlwiICYmIHBhdGggIT09IFwiL1wiKSB7XG4gICAgLy8gSWYgb3VyIHBhdGggaXMgbm9uLWVtcHR5IGFuZCBjb250YWlucyBhbnl0aGluZyBiZXlvbmQgYW4gaW5pdGlhbCBzbGFzaCxcbiAgICAvLyB0aGVuIHdlIGhhdmUgX3NvbWVfIGZvcm0gb2YgcGF0aCBpbiBvdXIgcmVnZXgsIHNvIHdlIHNob3VsZCBleHBlY3QgdG9cbiAgICAvLyBtYXRjaCBvbmx5IGlmIHdlIGZpbmQgdGhlIGVuZCBvZiB0aGlzIHBhdGggc2VnbWVudC4gIExvb2sgZm9yIGFuIG9wdGlvbmFsXG4gICAgLy8gbm9uLWNhcHR1cmVkIHRyYWlsaW5nIHNsYXNoICh0byBtYXRjaCBhIHBvcnRpb24gb2YgdGhlIFVSTCkgb3IgdGhlIGVuZFxuICAgIC8vIG9mIHRoZSBwYXRoIChpZiB3ZSd2ZSBtYXRjaGVkIHRvIHRoZSBlbmQpLiAgV2UgdXNlZCB0byBkbyB0aGlzIHdpdGggYVxuICAgIC8vIHdvcmQgYm91bmRhcnkgYnV0IHRoYXQgZ2l2ZXMgZmFsc2UgcG9zaXRpdmVzIG9uIHJvdXRlcyBsaWtlXG4gICAgLy8gL3VzZXItcHJlZmVyZW5jZXMgc2luY2UgYC1gIGNvdW50cyBhcyBhIHdvcmQgYm91bmRhcnkuXG4gICAgcmVnZXhwU291cmNlICs9IFwiKD86KD89XFxcXC98JCkpXCI7XG4gIH0gZWxzZSA7XG4gIGxldCBtYXRjaGVyID0gbmV3IFJlZ0V4cChyZWdleHBTb3VyY2UsIGNhc2VTZW5zaXRpdmUgPyB1bmRlZmluZWQgOiBcImlcIik7XG4gIHJldHVybiBbbWF0Y2hlciwgcGFyYW1zXTtcbn1cbmZ1bmN0aW9uIGRlY29kZVBhdGgodmFsdWUpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gdmFsdWUuc3BsaXQoXCIvXCIpLm1hcCh2ID0+IGRlY29kZVVSSUNvbXBvbmVudCh2KS5yZXBsYWNlKC9cXC8vZywgXCIlMkZcIikpLmpvaW4oXCIvXCIpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHdhcm5pbmcoZmFsc2UsIFwiVGhlIFVSTCBwYXRoIFxcXCJcIiArIHZhbHVlICsgXCJcXFwiIGNvdWxkIG5vdCBiZSBkZWNvZGVkIGJlY2F1c2UgaXQgaXMgaXMgYSBcIiArIFwibWFsZm9ybWVkIFVSTCBzZWdtZW50LiBUaGlzIGlzIHByb2JhYmx5IGR1ZSB0byBhIGJhZCBwZXJjZW50IFwiICsgKFwiZW5jb2RpbmcgKFwiICsgZXJyb3IgKyBcIikuXCIpKTtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbn1cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShwYXRobmFtZSwgYmFzZW5hbWUpIHtcbiAgaWYgKGJhc2VuYW1lID09PSBcIi9cIikgcmV0dXJuIHBhdGhuYW1lO1xuICBpZiAoIXBhdGhuYW1lLnRvTG93ZXJDYXNlKCkuc3RhcnRzV2l0aChiYXNlbmFtZS50b0xvd2VyQ2FzZSgpKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIC8vIFdlIHdhbnQgdG8gbGVhdmUgdHJhaWxpbmcgc2xhc2ggYmVoYXZpb3IgaW4gdGhlIHVzZXIncyBjb250cm9sLCBzbyBpZiB0aGV5XG4gIC8vIHNwZWNpZnkgYSBiYXNlbmFtZSB3aXRoIGEgdHJhaWxpbmcgc2xhc2gsIHdlIHNob3VsZCBzdXBwb3J0IGl0XG4gIGxldCBzdGFydEluZGV4ID0gYmFzZW5hbWUuZW5kc1dpdGgoXCIvXCIpID8gYmFzZW5hbWUubGVuZ3RoIC0gMSA6IGJhc2VuYW1lLmxlbmd0aDtcbiAgbGV0IG5leHRDaGFyID0gcGF0aG5hbWUuY2hhckF0KHN0YXJ0SW5kZXgpO1xuICBpZiAobmV4dENoYXIgJiYgbmV4dENoYXIgIT09IFwiL1wiKSB7XG4gICAgLy8gcGF0aG5hbWUgZG9lcyBub3Qgc3RhcnQgd2l0aCBiYXNlbmFtZS9cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gcGF0aG5hbWUuc2xpY2Uoc3RhcnRJbmRleCkgfHwgXCIvXCI7XG59XG4vKipcbiAqIFJldHVybnMgYSByZXNvbHZlZCBwYXRoIG9iamVjdCByZWxhdGl2ZSB0byB0aGUgZ2l2ZW4gcGF0aG5hbWUuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS91dGlscy9yZXNvbHZlLXBhdGhcbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZVBhdGgodG8sIGZyb21QYXRobmFtZSkge1xuICBpZiAoZnJvbVBhdGhuYW1lID09PSB2b2lkIDApIHtcbiAgICBmcm9tUGF0aG5hbWUgPSBcIi9cIjtcbiAgfVxuICBsZXQge1xuICAgIHBhdGhuYW1lOiB0b1BhdGhuYW1lLFxuICAgIHNlYXJjaCA9IFwiXCIsXG4gICAgaGFzaCA9IFwiXCJcbiAgfSA9IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aCh0bykgOiB0bztcbiAgbGV0IHBhdGhuYW1lID0gdG9QYXRobmFtZSA/IHRvUGF0aG5hbWUuc3RhcnRzV2l0aChcIi9cIikgPyB0b1BhdGhuYW1lIDogcmVzb2x2ZVBhdGhuYW1lKHRvUGF0aG5hbWUsIGZyb21QYXRobmFtZSkgOiBmcm9tUGF0aG5hbWU7XG4gIHJldHVybiB7XG4gICAgcGF0aG5hbWUsXG4gICAgc2VhcmNoOiBub3JtYWxpemVTZWFyY2goc2VhcmNoKSxcbiAgICBoYXNoOiBub3JtYWxpemVIYXNoKGhhc2gpXG4gIH07XG59XG5mdW5jdGlvbiByZXNvbHZlUGF0aG5hbWUocmVsYXRpdmVQYXRoLCBmcm9tUGF0aG5hbWUpIHtcbiAgbGV0IHNlZ21lbnRzID0gZnJvbVBhdGhuYW1lLnJlcGxhY2UoL1xcLyskLywgXCJcIikuc3BsaXQoXCIvXCIpO1xuICBsZXQgcmVsYXRpdmVTZWdtZW50cyA9IHJlbGF0aXZlUGF0aC5zcGxpdChcIi9cIik7XG4gIHJlbGF0aXZlU2VnbWVudHMuZm9yRWFjaChzZWdtZW50ID0+IHtcbiAgICBpZiAoc2VnbWVudCA9PT0gXCIuLlwiKSB7XG4gICAgICAvLyBLZWVwIHRoZSByb290IFwiXCIgc2VnbWVudCBzbyB0aGUgcGF0aG5hbWUgc3RhcnRzIGF0IC9cbiAgICAgIGlmIChzZWdtZW50cy5sZW5ndGggPiAxKSBzZWdtZW50cy5wb3AoKTtcbiAgICB9IGVsc2UgaWYgKHNlZ21lbnQgIT09IFwiLlwiKSB7XG4gICAgICBzZWdtZW50cy5wdXNoKHNlZ21lbnQpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBzZWdtZW50cy5sZW5ndGggPiAxID8gc2VnbWVudHMuam9pbihcIi9cIikgOiBcIi9cIjtcbn1cbmZ1bmN0aW9uIGdldEludmFsaWRQYXRoRXJyb3IoY2hhciwgZmllbGQsIGRlc3QsIHBhdGgpIHtcbiAgcmV0dXJuIFwiQ2Fubm90IGluY2x1ZGUgYSAnXCIgKyBjaGFyICsgXCInIGNoYXJhY3RlciBpbiBhIG1hbnVhbGx5IHNwZWNpZmllZCBcIiArIChcImB0by5cIiArIGZpZWxkICsgXCJgIGZpZWxkIFtcIiArIEpTT04uc3RyaW5naWZ5KHBhdGgpICsgXCJdLiAgUGxlYXNlIHNlcGFyYXRlIGl0IG91dCB0byB0aGUgXCIpICsgKFwiYHRvLlwiICsgZGVzdCArIFwiYCBmaWVsZC4gQWx0ZXJuYXRpdmVseSB5b3UgbWF5IHByb3ZpZGUgdGhlIGZ1bGwgcGF0aCBhcyBcIikgKyBcImEgc3RyaW5nIGluIDxMaW5rIHRvPVxcXCIuLi5cXFwiPiBhbmQgdGhlIHJvdXRlciB3aWxsIHBhcnNlIGl0IGZvciB5b3UuXCI7XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKlxuICogV2hlbiBwcm9jZXNzaW5nIHJlbGF0aXZlIG5hdmlnYXRpb24gd2Ugd2FudCB0byBpZ25vcmUgYW5jZXN0b3Igcm91dGVzIHRoYXRcbiAqIGRvIG5vdCBjb250cmlidXRlIHRvIHRoZSBwYXRoLCBzdWNoIHRoYXQgaW5kZXgvcGF0aGxlc3MgbGF5b3V0IHJvdXRlcyBkb24ndFxuICogaW50ZXJmZXJlLlxuICpcbiAqIEZvciBleGFtcGxlLCB3aGVuIG1vdmluZyBhIHJvdXRlIGVsZW1lbnQgaW50byBhbiBpbmRleCByb3V0ZSBhbmQvb3IgYVxuICogcGF0aGxlc3MgbGF5b3V0IHJvdXRlLCByZWxhdGl2ZSBsaW5rIGJlaGF2aW9yIGNvbnRhaW5lZCB3aXRoaW4gc2hvdWxkIHN0YXlcbiAqIHRoZSBzYW1lLiAgQm90aCBvZiB0aGUgZm9sbG93aW5nIGV4YW1wbGVzIHNob3VsZCBsaW5rIGJhY2sgdG8gdGhlIHJvb3Q6XG4gKlxuICogICA8Um91dGUgcGF0aD1cIi9cIj5cbiAqICAgICA8Um91dGUgcGF0aD1cImFjY291bnRzXCIgZWxlbWVudD17PExpbmsgdG89XCIuLlwifT5cbiAqICAgPC9Sb3V0ZT5cbiAqXG4gKiAgIDxSb3V0ZSBwYXRoPVwiL1wiPlxuICogICAgIDxSb3V0ZSBwYXRoPVwiYWNjb3VudHNcIj5cbiAqICAgICAgIDxSb3V0ZSBlbGVtZW50PXs8QWNjb3VudHNMYXlvdXQgLz59PiAgICAgICAvLyA8LS0gRG9lcyBub3QgY29udHJpYnV0ZVxuICogICAgICAgICA8Um91dGUgaW5kZXggZWxlbWVudD17PExpbmsgdG89XCIuLlwifSAvPiAgLy8gPC0tIERvZXMgbm90IGNvbnRyaWJ1dGVcbiAqICAgICAgIDwvUm91dGVcbiAqICAgICA8L1JvdXRlPlxuICogICA8L1JvdXRlPlxuICovXG5mdW5jdGlvbiBnZXRQYXRoQ29udHJpYnV0aW5nTWF0Y2hlcyhtYXRjaGVzKSB7XG4gIHJldHVybiBtYXRjaGVzLmZpbHRlcigobWF0Y2gsIGluZGV4KSA9PiBpbmRleCA9PT0gMCB8fCBtYXRjaC5yb3V0ZS5wYXRoICYmIG1hdGNoLnJvdXRlLnBhdGgubGVuZ3RoID4gMCk7XG59XG4vLyBSZXR1cm4gdGhlIGFycmF5IG9mIHBhdGhuYW1lcyBmb3IgdGhlIGN1cnJlbnQgcm91dGUgbWF0Y2hlcyAtIHVzZWQgdG9cbi8vIGdlbmVyYXRlIHRoZSByb3V0ZVBhdGhuYW1lcyBpbnB1dCBmb3IgcmVzb2x2ZVRvKClcbmZ1bmN0aW9uIGdldFJlc29sdmVUb01hdGNoZXMobWF0Y2hlcywgdjdfcmVsYXRpdmVTcGxhdFBhdGgpIHtcbiAgbGV0IHBhdGhNYXRjaGVzID0gZ2V0UGF0aENvbnRyaWJ1dGluZ01hdGNoZXMobWF0Y2hlcyk7XG4gIC8vIFdoZW4gdjdfcmVsYXRpdmVTcGxhdFBhdGggaXMgZW5hYmxlZCwgdXNlIHRoZSBmdWxsIHBhdGhuYW1lIGZvciB0aGUgbGVhZlxuICAvLyBtYXRjaCBzbyB3ZSBpbmNsdWRlIHNwbGF0IHZhbHVlcyBmb3IgXCIuXCIgbGlua3MuICBTZWU6XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yZW1peC1ydW4vcmVhY3Qtcm91dGVyL2lzc3Vlcy8xMTA1MiNpc3N1ZWNvbW1lbnQtMTgzNjU4OTMyOVxuICBpZiAodjdfcmVsYXRpdmVTcGxhdFBhdGgpIHtcbiAgICByZXR1cm4gcGF0aE1hdGNoZXMubWFwKChtYXRjaCwgaWR4KSA9PiBpZHggPT09IG1hdGNoZXMubGVuZ3RoIC0gMSA/IG1hdGNoLnBhdGhuYW1lIDogbWF0Y2gucGF0aG5hbWVCYXNlKTtcbiAgfVxuICByZXR1cm4gcGF0aE1hdGNoZXMubWFwKG1hdGNoID0+IG1hdGNoLnBhdGhuYW1lQmFzZSk7XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVUbyh0b0FyZywgcm91dGVQYXRobmFtZXMsIGxvY2F0aW9uUGF0aG5hbWUsIGlzUGF0aFJlbGF0aXZlKSB7XG4gIGlmIChpc1BhdGhSZWxhdGl2ZSA9PT0gdm9pZCAwKSB7XG4gICAgaXNQYXRoUmVsYXRpdmUgPSBmYWxzZTtcbiAgfVxuICBsZXQgdG87XG4gIGlmICh0eXBlb2YgdG9BcmcgPT09IFwic3RyaW5nXCIpIHtcbiAgICB0byA9IHBhcnNlUGF0aCh0b0FyZyk7XG4gIH0gZWxzZSB7XG4gICAgdG8gPSBfZXh0ZW5kcyh7fSwgdG9BcmcpO1xuICAgIGludmFyaWFudCghdG8ucGF0aG5hbWUgfHwgIXRvLnBhdGhuYW1lLmluY2x1ZGVzKFwiP1wiKSwgZ2V0SW52YWxpZFBhdGhFcnJvcihcIj9cIiwgXCJwYXRobmFtZVwiLCBcInNlYXJjaFwiLCB0bykpO1xuICAgIGludmFyaWFudCghdG8ucGF0aG5hbWUgfHwgIXRvLnBhdGhuYW1lLmluY2x1ZGVzKFwiI1wiKSwgZ2V0SW52YWxpZFBhdGhFcnJvcihcIiNcIiwgXCJwYXRobmFtZVwiLCBcImhhc2hcIiwgdG8pKTtcbiAgICBpbnZhcmlhbnQoIXRvLnNlYXJjaCB8fCAhdG8uc2VhcmNoLmluY2x1ZGVzKFwiI1wiKSwgZ2V0SW52YWxpZFBhdGhFcnJvcihcIiNcIiwgXCJzZWFyY2hcIiwgXCJoYXNoXCIsIHRvKSk7XG4gIH1cbiAgbGV0IGlzRW1wdHlQYXRoID0gdG9BcmcgPT09IFwiXCIgfHwgdG8ucGF0aG5hbWUgPT09IFwiXCI7XG4gIGxldCB0b1BhdGhuYW1lID0gaXNFbXB0eVBhdGggPyBcIi9cIiA6IHRvLnBhdGhuYW1lO1xuICBsZXQgZnJvbTtcbiAgLy8gUm91dGluZyBpcyByZWxhdGl2ZSB0byB0aGUgY3VycmVudCBwYXRobmFtZSBpZiBleHBsaWNpdGx5IHJlcXVlc3RlZC5cbiAgLy9cbiAgLy8gSWYgYSBwYXRobmFtZSBpcyBleHBsaWNpdGx5IHByb3ZpZGVkIGluIGB0b2AsIGl0IHNob3VsZCBiZSByZWxhdGl2ZSB0byB0aGVcbiAgLy8gcm91dGUgY29udGV4dC4gVGhpcyBpcyBleHBsYWluZWQgaW4gYE5vdGUgb24gYDxMaW5rIHRvPmAgdmFsdWVzYCBpbiBvdXJcbiAgLy8gbWlncmF0aW9uIGd1aWRlIGZyb20gdjUgYXMgYSBtZWFucyBvZiBkaXNhbWJpZ3VhdGlvbiBiZXR3ZWVuIGB0b2AgdmFsdWVzXG4gIC8vIHRoYXQgYmVnaW4gd2l0aCBgL2AgYW5kIHRob3NlIHRoYXQgZG8gbm90LiBIb3dldmVyLCB0aGlzIGlzIHByb2JsZW1hdGljIGZvclxuICAvLyBgdG9gIHZhbHVlcyB0aGF0IGRvIG5vdCBwcm92aWRlIGEgcGF0aG5hbWUuIGB0b2AgY2FuIHNpbXBseSBiZSBhIHNlYXJjaCBvclxuICAvLyBoYXNoIHN0cmluZywgaW4gd2hpY2ggY2FzZSB3ZSBzaG91bGQgYXNzdW1lIHRoYXQgdGhlIG5hdmlnYXRpb24gaXMgcmVsYXRpdmVcbiAgLy8gdG8gdGhlIGN1cnJlbnQgbG9jYXRpb24ncyBwYXRobmFtZSBhbmQgKm5vdCogdGhlIHJvdXRlIHBhdGhuYW1lLlxuICBpZiAodG9QYXRobmFtZSA9PSBudWxsKSB7XG4gICAgZnJvbSA9IGxvY2F0aW9uUGF0aG5hbWU7XG4gIH0gZWxzZSB7XG4gICAgbGV0IHJvdXRlUGF0aG5hbWVJbmRleCA9IHJvdXRlUGF0aG5hbWVzLmxlbmd0aCAtIDE7XG4gICAgLy8gV2l0aCByZWxhdGl2ZT1cInJvdXRlXCIgKHRoZSBkZWZhdWx0KSwgZWFjaCBsZWFkaW5nIC4uIHNlZ21lbnQgbWVhbnNcbiAgICAvLyBcImdvIHVwIG9uZSByb3V0ZVwiIGluc3RlYWQgb2YgXCJnbyB1cCBvbmUgVVJMIHNlZ21lbnRcIi4gIFRoaXMgaXMgYSBrZXlcbiAgICAvLyBkaWZmZXJlbmNlIGZyb20gaG93IDxhIGhyZWY+IHdvcmtzIGFuZCBhIG1ham9yIHJlYXNvbiB3ZSBjYWxsIHRoaXMgYVxuICAgIC8vIFwidG9cIiB2YWx1ZSBpbnN0ZWFkIG9mIGEgXCJocmVmXCIuXG4gICAgaWYgKCFpc1BhdGhSZWxhdGl2ZSAmJiB0b1BhdGhuYW1lLnN0YXJ0c1dpdGgoXCIuLlwiKSkge1xuICAgICAgbGV0IHRvU2VnbWVudHMgPSB0b1BhdGhuYW1lLnNwbGl0KFwiL1wiKTtcbiAgICAgIHdoaWxlICh0b1NlZ21lbnRzWzBdID09PSBcIi4uXCIpIHtcbiAgICAgICAgdG9TZWdtZW50cy5zaGlmdCgpO1xuICAgICAgICByb3V0ZVBhdGhuYW1lSW5kZXggLT0gMTtcbiAgICAgIH1cbiAgICAgIHRvLnBhdGhuYW1lID0gdG9TZWdtZW50cy5qb2luKFwiL1wiKTtcbiAgICB9XG4gICAgZnJvbSA9IHJvdXRlUGF0aG5hbWVJbmRleCA+PSAwID8gcm91dGVQYXRobmFtZXNbcm91dGVQYXRobmFtZUluZGV4XSA6IFwiL1wiO1xuICB9XG4gIGxldCBwYXRoID0gcmVzb2x2ZVBhdGgodG8sIGZyb20pO1xuICAvLyBFbnN1cmUgdGhlIHBhdGhuYW1lIGhhcyBhIHRyYWlsaW5nIHNsYXNoIGlmIHRoZSBvcmlnaW5hbCBcInRvXCIgaGFkIG9uZVxuICBsZXQgaGFzRXhwbGljaXRUcmFpbGluZ1NsYXNoID0gdG9QYXRobmFtZSAmJiB0b1BhdGhuYW1lICE9PSBcIi9cIiAmJiB0b1BhdGhuYW1lLmVuZHNXaXRoKFwiL1wiKTtcbiAgLy8gT3IgaWYgdGhpcyB3YXMgYSBsaW5rIHRvIHRoZSBjdXJyZW50IHBhdGggd2hpY2ggaGFzIGEgdHJhaWxpbmcgc2xhc2hcbiAgbGV0IGhhc0N1cnJlbnRUcmFpbGluZ1NsYXNoID0gKGlzRW1wdHlQYXRoIHx8IHRvUGF0aG5hbWUgPT09IFwiLlwiKSAmJiBsb2NhdGlvblBhdGhuYW1lLmVuZHNXaXRoKFwiL1wiKTtcbiAgaWYgKCFwYXRoLnBhdGhuYW1lLmVuZHNXaXRoKFwiL1wiKSAmJiAoaGFzRXhwbGljaXRUcmFpbGluZ1NsYXNoIHx8IGhhc0N1cnJlbnRUcmFpbGluZ1NsYXNoKSkge1xuICAgIHBhdGgucGF0aG5hbWUgKz0gXCIvXCI7XG4gIH1cbiAgcmV0dXJuIHBhdGg7XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGdldFRvUGF0aG5hbWUodG8pIHtcbiAgLy8gRW1wdHkgc3RyaW5ncyBzaG91bGQgYmUgdHJlYXRlZCB0aGUgc2FtZSBhcyAvIHBhdGhzXG4gIHJldHVybiB0byA9PT0gXCJcIiB8fCB0by5wYXRobmFtZSA9PT0gXCJcIiA/IFwiL1wiIDogdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gcGFyc2VQYXRoKHRvKS5wYXRobmFtZSA6IHRvLnBhdGhuYW1lO1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5jb25zdCBqb2luUGF0aHMgPSBwYXRocyA9PiBwYXRocy5qb2luKFwiL1wiKS5yZXBsYWNlKC9cXC9cXC8rL2csIFwiL1wiKTtcbi8qKlxuICogQHByaXZhdGVcbiAqL1xuY29uc3Qgbm9ybWFsaXplUGF0aG5hbWUgPSBwYXRobmFtZSA9PiBwYXRobmFtZS5yZXBsYWNlKC9cXC8rJC8sIFwiXCIpLnJlcGxhY2UoL15cXC8qLywgXCIvXCIpO1xuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5jb25zdCBub3JtYWxpemVTZWFyY2ggPSBzZWFyY2ggPT4gIXNlYXJjaCB8fCBzZWFyY2ggPT09IFwiP1wiID8gXCJcIiA6IHNlYXJjaC5zdGFydHNXaXRoKFwiP1wiKSA/IHNlYXJjaCA6IFwiP1wiICsgc2VhcmNoO1xuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5jb25zdCBub3JtYWxpemVIYXNoID0gaGFzaCA9PiAhaGFzaCB8fCBoYXNoID09PSBcIiNcIiA/IFwiXCIgOiBoYXNoLnN0YXJ0c1dpdGgoXCIjXCIpID8gaGFzaCA6IFwiI1wiICsgaGFzaDtcbi8qKlxuICogVGhpcyBpcyBhIHNob3J0Y3V0IGZvciBjcmVhdGluZyBgYXBwbGljYXRpb24vanNvbmAgcmVzcG9uc2VzLiBDb252ZXJ0cyBgZGF0YWBcbiAqIHRvIEpTT04gYW5kIHNldHMgdGhlIGBDb250ZW50LVR5cGVgIGhlYWRlci5cbiAqL1xuY29uc3QganNvbiA9IGZ1bmN0aW9uIGpzb24oZGF0YSwgaW5pdCkge1xuICBpZiAoaW5pdCA9PT0gdm9pZCAwKSB7XG4gICAgaW5pdCA9IHt9O1xuICB9XG4gIGxldCByZXNwb25zZUluaXQgPSB0eXBlb2YgaW5pdCA9PT0gXCJudW1iZXJcIiA/IHtcbiAgICBzdGF0dXM6IGluaXRcbiAgfSA6IGluaXQ7XG4gIGxldCBoZWFkZXJzID0gbmV3IEhlYWRlcnMocmVzcG9uc2VJbml0LmhlYWRlcnMpO1xuICBpZiAoIWhlYWRlcnMuaGFzKFwiQ29udGVudC1UeXBlXCIpKSB7XG4gICAgaGVhZGVycy5zZXQoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04XCIpO1xuICB9XG4gIHJldHVybiBuZXcgUmVzcG9uc2UoSlNPTi5zdHJpbmdpZnkoZGF0YSksIF9leHRlbmRzKHt9LCByZXNwb25zZUluaXQsIHtcbiAgICBoZWFkZXJzXG4gIH0pKTtcbn07XG5jbGFzcyBBYm9ydGVkRGVmZXJyZWRFcnJvciBleHRlbmRzIEVycm9yIHt9XG5jbGFzcyBEZWZlcnJlZERhdGEge1xuICBjb25zdHJ1Y3RvcihkYXRhLCByZXNwb25zZUluaXQpIHtcbiAgICB0aGlzLnBlbmRpbmdLZXlzU2V0ID0gbmV3IFNldCgpO1xuICAgIHRoaXMuc3Vic2NyaWJlcnMgPSBuZXcgU2V0KCk7XG4gICAgdGhpcy5kZWZlcnJlZEtleXMgPSBbXTtcbiAgICBpbnZhcmlhbnQoZGF0YSAmJiB0eXBlb2YgZGF0YSA9PT0gXCJvYmplY3RcIiAmJiAhQXJyYXkuaXNBcnJheShkYXRhKSwgXCJkZWZlcigpIG9ubHkgYWNjZXB0cyBwbGFpbiBvYmplY3RzXCIpO1xuICAgIC8vIFNldCB1cCBhbiBBYm9ydENvbnRyb2xsZXIgKyBQcm9taXNlIHdlIGNhbiByYWNlIGFnYWluc3QgdG8gZXhpdCBlYXJseVxuICAgIC8vIGNhbmNlbGxhdGlvblxuICAgIGxldCByZWplY3Q7XG4gICAgdGhpcy5hYm9ydFByb21pc2UgPSBuZXcgUHJvbWlzZSgoXywgcikgPT4gcmVqZWN0ID0gcik7XG4gICAgdGhpcy5jb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICAgIGxldCBvbkFib3J0ID0gKCkgPT4gcmVqZWN0KG5ldyBBYm9ydGVkRGVmZXJyZWRFcnJvcihcIkRlZmVycmVkIGRhdGEgYWJvcnRlZFwiKSk7XG4gICAgdGhpcy51bmxpc3RlbkFib3J0U2lnbmFsID0gKCkgPT4gdGhpcy5jb250cm9sbGVyLnNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgb25BYm9ydCk7XG4gICAgdGhpcy5jb250cm9sbGVyLnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgb25BYm9ydCk7XG4gICAgdGhpcy5kYXRhID0gT2JqZWN0LmVudHJpZXMoZGF0YSkucmVkdWNlKChhY2MsIF9yZWYyKSA9PiB7XG4gICAgICBsZXQgW2tleSwgdmFsdWVdID0gX3JlZjI7XG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihhY2MsIHtcbiAgICAgICAgW2tleV06IHRoaXMudHJhY2tQcm9taXNlKGtleSwgdmFsdWUpXG4gICAgICB9KTtcbiAgICB9LCB7fSk7XG4gICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgLy8gQWxsIGluY29taW5nIHZhbHVlcyB3ZXJlIHJlc29sdmVkXG4gICAgICB0aGlzLnVubGlzdGVuQWJvcnRTaWduYWwoKTtcbiAgICB9XG4gICAgdGhpcy5pbml0ID0gcmVzcG9uc2VJbml0O1xuICB9XG4gIHRyYWNrUHJvbWlzZShrZXksIHZhbHVlKSB7XG4gICAgaWYgKCEodmFsdWUgaW5zdGFuY2VvZiBQcm9taXNlKSkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICB0aGlzLmRlZmVycmVkS2V5cy5wdXNoKGtleSk7XG4gICAgdGhpcy5wZW5kaW5nS2V5c1NldC5hZGQoa2V5KTtcbiAgICAvLyBXZSBzdG9yZSBhIGxpdHRsZSB3cmFwcGVyIHByb21pc2UgdGhhdCB3aWxsIGJlIGV4dGVuZGVkIHdpdGhcbiAgICAvLyBfZGF0YS9fZXJyb3IgcHJvcHMgdXBvbiByZXNvbHZlL3JlamVjdFxuICAgIGxldCBwcm9taXNlID0gUHJvbWlzZS5yYWNlKFt2YWx1ZSwgdGhpcy5hYm9ydFByb21pc2VdKS50aGVuKGRhdGEgPT4gdGhpcy5vblNldHRsZShwcm9taXNlLCBrZXksIHVuZGVmaW5lZCwgZGF0YSksIGVycm9yID0+IHRoaXMub25TZXR0bGUocHJvbWlzZSwga2V5LCBlcnJvcikpO1xuICAgIC8vIFJlZ2lzdGVyIHJlamVjdGlvbiBsaXN0ZW5lcnMgdG8gYXZvaWQgdW5jYXVnaHQgcHJvbWlzZSByZWplY3Rpb25zIG9uXG4gICAgLy8gZXJyb3JzIG9yIGFib3J0ZWQgZGVmZXJyZWQgdmFsdWVzXG4gICAgcHJvbWlzZS5jYXRjaCgoKSA9PiB7fSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX3RyYWNrZWRcIiwge1xuICAgICAgZ2V0OiAoKSA9PiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cbiAgb25TZXR0bGUocHJvbWlzZSwga2V5LCBlcnJvciwgZGF0YSkge1xuICAgIGlmICh0aGlzLmNvbnRyb2xsZXIuc2lnbmFsLmFib3J0ZWQgJiYgZXJyb3IgaW5zdGFuY2VvZiBBYm9ydGVkRGVmZXJyZWRFcnJvcikge1xuICAgICAgdGhpcy51bmxpc3RlbkFib3J0U2lnbmFsKCk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvbWlzZSwgXCJfZXJyb3JcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IGVycm9yXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgfVxuICAgIHRoaXMucGVuZGluZ0tleXNTZXQuZGVsZXRlKGtleSk7XG4gICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgLy8gTm90aGluZyBsZWZ0IHRvIGFib3J0IVxuICAgICAgdGhpcy51bmxpc3RlbkFib3J0U2lnbmFsKCk7XG4gICAgfVxuICAgIC8vIElmIHRoZSBwcm9taXNlIHdhcyByZXNvbHZlZC9yZWplY3RlZCB3aXRoIHVuZGVmaW5lZCwgd2UnbGwgdGhyb3cgYW4gZXJyb3IgYXMgeW91XG4gICAgLy8gc2hvdWxkIGFsd2F5cyByZXNvbHZlIHdpdGggYSB2YWx1ZSBvciBudWxsXG4gICAgaWYgKGVycm9yID09PSB1bmRlZmluZWQgJiYgZGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBsZXQgdW5kZWZpbmVkRXJyb3IgPSBuZXcgRXJyb3IoXCJEZWZlcnJlZCBkYXRhIGZvciBrZXkgXFxcIlwiICsga2V5ICsgXCJcXFwiIHJlc29sdmVkL3JlamVjdGVkIHdpdGggYHVuZGVmaW5lZGAsIFwiICsgXCJ5b3UgbXVzdCByZXNvbHZlL3JlamVjdCB3aXRoIGEgdmFsdWUgb3IgYG51bGxgLlwiKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlLCBcIl9lcnJvclwiLCB7XG4gICAgICAgIGdldDogKCkgPT4gdW5kZWZpbmVkRXJyb3JcbiAgICAgIH0pO1xuICAgICAgdGhpcy5lbWl0KGZhbHNlLCBrZXkpO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHVuZGVmaW5lZEVycm9yKTtcbiAgICB9XG4gICAgaWYgKGRhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX2Vycm9yXCIsIHtcbiAgICAgICAgZ2V0OiAoKSA9PiBlcnJvclxuICAgICAgfSk7XG4gICAgICB0aGlzLmVtaXQoZmFsc2UsIGtleSk7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvbWlzZSwgXCJfZGF0YVwiLCB7XG4gICAgICBnZXQ6ICgpID0+IGRhdGFcbiAgICB9KTtcbiAgICB0aGlzLmVtaXQoZmFsc2UsIGtleSk7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cbiAgZW1pdChhYm9ydGVkLCBzZXR0bGVkS2V5KSB7XG4gICAgdGhpcy5zdWJzY3JpYmVycy5mb3JFYWNoKHN1YnNjcmliZXIgPT4gc3Vic2NyaWJlcihhYm9ydGVkLCBzZXR0bGVkS2V5KSk7XG4gIH1cbiAgc3Vic2NyaWJlKGZuKSB7XG4gICAgdGhpcy5zdWJzY3JpYmVycy5hZGQoZm4pO1xuICAgIHJldHVybiAoKSA9PiB0aGlzLnN1YnNjcmliZXJzLmRlbGV0ZShmbik7XG4gIH1cbiAgY2FuY2VsKCkge1xuICAgIHRoaXMuY29udHJvbGxlci5hYm9ydCgpO1xuICAgIHRoaXMucGVuZGluZ0tleXNTZXQuZm9yRWFjaCgodiwgaykgPT4gdGhpcy5wZW5kaW5nS2V5c1NldC5kZWxldGUoaykpO1xuICAgIHRoaXMuZW1pdCh0cnVlKTtcbiAgfVxuICBhc3luYyByZXNvbHZlRGF0YShzaWduYWwpIHtcbiAgICBsZXQgYWJvcnRlZCA9IGZhbHNlO1xuICAgIGlmICghdGhpcy5kb25lKSB7XG4gICAgICBsZXQgb25BYm9ydCA9ICgpID0+IHRoaXMuY2FuY2VsKCk7XG4gICAgICBzaWduYWwuYWRkRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIG9uQWJvcnQpO1xuICAgICAgYWJvcnRlZCA9IGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICB0aGlzLnN1YnNjcmliZShhYm9ydGVkID0+IHtcbiAgICAgICAgICBzaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIG9uQWJvcnQpO1xuICAgICAgICAgIGlmIChhYm9ydGVkIHx8IHRoaXMuZG9uZSkge1xuICAgICAgICAgICAgcmVzb2x2ZShhYm9ydGVkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBhYm9ydGVkO1xuICB9XG4gIGdldCBkb25lKCkge1xuICAgIHJldHVybiB0aGlzLnBlbmRpbmdLZXlzU2V0LnNpemUgPT09IDA7XG4gIH1cbiAgZ2V0IHVud3JhcHBlZERhdGEoKSB7XG4gICAgaW52YXJpYW50KHRoaXMuZGF0YSAhPT0gbnVsbCAmJiB0aGlzLmRvbmUsIFwiQ2FuIG9ubHkgdW53cmFwIGRhdGEgb24gaW5pdGlhbGl6ZWQgYW5kIHNldHRsZWQgZGVmZXJyZWRzXCIpO1xuICAgIHJldHVybiBPYmplY3QuZW50cmllcyh0aGlzLmRhdGEpLnJlZHVjZSgoYWNjLCBfcmVmMykgPT4ge1xuICAgICAgbGV0IFtrZXksIHZhbHVlXSA9IF9yZWYzO1xuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oYWNjLCB7XG4gICAgICAgIFtrZXldOiB1bndyYXBUcmFja2VkUHJvbWlzZSh2YWx1ZSlcbiAgICAgIH0pO1xuICAgIH0sIHt9KTtcbiAgfVxuICBnZXQgcGVuZGluZ0tleXMoKSB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5wZW5kaW5nS2V5c1NldCk7XG4gIH1cbn1cbmZ1bmN0aW9uIGlzVHJhY2tlZFByb21pc2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUHJvbWlzZSAmJiB2YWx1ZS5fdHJhY2tlZCA9PT0gdHJ1ZTtcbn1cbmZ1bmN0aW9uIHVud3JhcFRyYWNrZWRQcm9taXNlKHZhbHVlKSB7XG4gIGlmICghaXNUcmFja2VkUHJvbWlzZSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKHZhbHVlLl9lcnJvcikge1xuICAgIHRocm93IHZhbHVlLl9lcnJvcjtcbiAgfVxuICByZXR1cm4gdmFsdWUuX2RhdGE7XG59XG5jb25zdCBkZWZlciA9IGZ1bmN0aW9uIGRlZmVyKGRhdGEsIGluaXQpIHtcbiAgaWYgKGluaXQgPT09IHZvaWQgMCkge1xuICAgIGluaXQgPSB7fTtcbiAgfVxuICBsZXQgcmVzcG9uc2VJbml0ID0gdHlwZW9mIGluaXQgPT09IFwibnVtYmVyXCIgPyB7XG4gICAgc3RhdHVzOiBpbml0XG4gIH0gOiBpbml0O1xuICByZXR1cm4gbmV3IERlZmVycmVkRGF0YShkYXRhLCByZXNwb25zZUluaXQpO1xufTtcbi8qKlxuICogQSByZWRpcmVjdCByZXNwb25zZS4gU2V0cyB0aGUgc3RhdHVzIGNvZGUgYW5kIHRoZSBgTG9jYXRpb25gIGhlYWRlci5cbiAqIERlZmF1bHRzIHRvIFwiMzAyIEZvdW5kXCIuXG4gKi9cbmNvbnN0IHJlZGlyZWN0ID0gZnVuY3Rpb24gcmVkaXJlY3QodXJsLCBpbml0KSB7XG4gIGlmIChpbml0ID09PSB2b2lkIDApIHtcbiAgICBpbml0ID0gMzAyO1xuICB9XG4gIGxldCByZXNwb25zZUluaXQgPSBpbml0O1xuICBpZiAodHlwZW9mIHJlc3BvbnNlSW5pdCA9PT0gXCJudW1iZXJcIikge1xuICAgIHJlc3BvbnNlSW5pdCA9IHtcbiAgICAgIHN0YXR1czogcmVzcG9uc2VJbml0XG4gICAgfTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgcmVzcG9uc2VJbml0LnN0YXR1cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJlc3BvbnNlSW5pdC5zdGF0dXMgPSAzMDI7XG4gIH1cbiAgbGV0IGhlYWRlcnMgPSBuZXcgSGVhZGVycyhyZXNwb25zZUluaXQuaGVhZGVycyk7XG4gIGhlYWRlcnMuc2V0KFwiTG9jYXRpb25cIiwgdXJsKTtcbiAgcmV0dXJuIG5ldyBSZXNwb25zZShudWxsLCBfZXh0ZW5kcyh7fSwgcmVzcG9uc2VJbml0LCB7XG4gICAgaGVhZGVyc1xuICB9KSk7XG59O1xuLyoqXG4gKiBBIHJlZGlyZWN0IHJlc3BvbnNlIHRoYXQgd2lsbCBmb3JjZSBhIGRvY3VtZW50IHJlbG9hZCB0byB0aGUgbmV3IGxvY2F0aW9uLlxuICogU2V0cyB0aGUgc3RhdHVzIGNvZGUgYW5kIHRoZSBgTG9jYXRpb25gIGhlYWRlci5cbiAqIERlZmF1bHRzIHRvIFwiMzAyIEZvdW5kXCIuXG4gKi9cbmNvbnN0IHJlZGlyZWN0RG9jdW1lbnQgPSAodXJsLCBpbml0KSA9PiB7XG4gIGxldCByZXNwb25zZSA9IHJlZGlyZWN0KHVybCwgaW5pdCk7XG4gIHJlc3BvbnNlLmhlYWRlcnMuc2V0KFwiWC1SZW1peC1SZWxvYWQtRG9jdW1lbnRcIiwgXCJ0cnVlXCIpO1xuICByZXR1cm4gcmVzcG9uc2U7XG59O1xuLyoqXG4gKiBAcHJpdmF0ZVxuICogVXRpbGl0eSBjbGFzcyB3ZSB1c2UgdG8gaG9sZCBhdXRvLXVud3JhcHBlZCA0eHgvNXh4IFJlc3BvbnNlIGJvZGllc1xuICpcbiAqIFdlIGRvbid0IGV4cG9ydCB0aGUgY2xhc3MgZm9yIHB1YmxpYyB1c2Ugc2luY2UgaXQncyBhbiBpbXBsZW1lbnRhdGlvblxuICogZGV0YWlsLCBidXQgd2UgZXhwb3J0IHRoZSBpbnRlcmZhY2UgYWJvdmUgc28gZm9sa3MgY2FuIGJ1aWxkIHRoZWlyIG93blxuICogYWJzdHJhY3Rpb25zIGFyb3VuZCBpbnN0YW5jZXMgdmlhIGlzUm91dGVFcnJvclJlc3BvbnNlKClcbiAqL1xuY2xhc3MgRXJyb3JSZXNwb25zZUltcGwge1xuICBjb25zdHJ1Y3RvcihzdGF0dXMsIHN0YXR1c1RleHQsIGRhdGEsIGludGVybmFsKSB7XG4gICAgaWYgKGludGVybmFsID09PSB2b2lkIDApIHtcbiAgICAgIGludGVybmFsID0gZmFsc2U7XG4gICAgfVxuICAgIHRoaXMuc3RhdHVzID0gc3RhdHVzO1xuICAgIHRoaXMuc3RhdHVzVGV4dCA9IHN0YXR1c1RleHQgfHwgXCJcIjtcbiAgICB0aGlzLmludGVybmFsID0gaW50ZXJuYWw7XG4gICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgdGhpcy5kYXRhID0gZGF0YS50b1N0cmluZygpO1xuICAgICAgdGhpcy5lcnJvciA9IGRhdGE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgfVxuICB9XG59XG4vKipcbiAqIENoZWNrIGlmIHRoZSBnaXZlbiBlcnJvciBpcyBhbiBFcnJvclJlc3BvbnNlIGdlbmVyYXRlZCBmcm9tIGEgNHh4LzV4eFxuICogUmVzcG9uc2UgdGhyb3duIGZyb20gYW4gYWN0aW9uL2xvYWRlclxuICovXG5mdW5jdGlvbiBpc1JvdXRlRXJyb3JSZXNwb25zZShlcnJvcikge1xuICByZXR1cm4gZXJyb3IgIT0gbnVsbCAmJiB0eXBlb2YgZXJyb3Iuc3RhdHVzID09PSBcIm51bWJlclwiICYmIHR5cGVvZiBlcnJvci5zdGF0dXNUZXh0ID09PSBcInN0cmluZ1wiICYmIHR5cGVvZiBlcnJvci5pbnRlcm5hbCA9PT0gXCJib29sZWFuXCIgJiYgXCJkYXRhXCIgaW4gZXJyb3I7XG59XG5cbmNvbnN0IHZhbGlkTXV0YXRpb25NZXRob2RzQXJyID0gW1wicG9zdFwiLCBcInB1dFwiLCBcInBhdGNoXCIsIFwiZGVsZXRlXCJdO1xuY29uc3QgdmFsaWRNdXRhdGlvbk1ldGhvZHMgPSBuZXcgU2V0KHZhbGlkTXV0YXRpb25NZXRob2RzQXJyKTtcbmNvbnN0IHZhbGlkUmVxdWVzdE1ldGhvZHNBcnIgPSBbXCJnZXRcIiwgLi4udmFsaWRNdXRhdGlvbk1ldGhvZHNBcnJdO1xuY29uc3QgdmFsaWRSZXF1ZXN0TWV0aG9kcyA9IG5ldyBTZXQodmFsaWRSZXF1ZXN0TWV0aG9kc0Fycik7XG5jb25zdCByZWRpcmVjdFN0YXR1c0NvZGVzID0gbmV3IFNldChbMzAxLCAzMDIsIDMwMywgMzA3LCAzMDhdKTtcbmNvbnN0IHJlZGlyZWN0UHJlc2VydmVNZXRob2RTdGF0dXNDb2RlcyA9IG5ldyBTZXQoWzMwNywgMzA4XSk7XG5jb25zdCBJRExFX05BVklHQVRJT04gPSB7XG4gIHN0YXRlOiBcImlkbGVcIixcbiAgbG9jYXRpb246IHVuZGVmaW5lZCxcbiAgZm9ybU1ldGhvZDogdW5kZWZpbmVkLFxuICBmb3JtQWN0aW9uOiB1bmRlZmluZWQsXG4gIGZvcm1FbmNUeXBlOiB1bmRlZmluZWQsXG4gIGZvcm1EYXRhOiB1bmRlZmluZWQsXG4gIGpzb246IHVuZGVmaW5lZCxcbiAgdGV4dDogdW5kZWZpbmVkXG59O1xuY29uc3QgSURMRV9GRVRDSEVSID0ge1xuICBzdGF0ZTogXCJpZGxlXCIsXG4gIGRhdGE6IHVuZGVmaW5lZCxcbiAgZm9ybU1ldGhvZDogdW5kZWZpbmVkLFxuICBmb3JtQWN0aW9uOiB1bmRlZmluZWQsXG4gIGZvcm1FbmNUeXBlOiB1bmRlZmluZWQsXG4gIGZvcm1EYXRhOiB1bmRlZmluZWQsXG4gIGpzb246IHVuZGVmaW5lZCxcbiAgdGV4dDogdW5kZWZpbmVkXG59O1xuY29uc3QgSURMRV9CTE9DS0VSID0ge1xuICBzdGF0ZTogXCJ1bmJsb2NrZWRcIixcbiAgcHJvY2VlZDogdW5kZWZpbmVkLFxuICByZXNldDogdW5kZWZpbmVkLFxuICBsb2NhdGlvbjogdW5kZWZpbmVkXG59O1xuY29uc3QgQUJTT0xVVEVfVVJMX1JFR0VYID0gL14oPzpbYS16XVthLXowLTkrLi1dKjp8XFwvXFwvKS9pO1xuY29uc3QgZGVmYXVsdE1hcFJvdXRlUHJvcGVydGllcyA9IHJvdXRlID0+ICh7XG4gIGhhc0Vycm9yQm91bmRhcnk6IEJvb2xlYW4ocm91dGUuaGFzRXJyb3JCb3VuZGFyeSlcbn0pO1xuY29uc3QgVFJBTlNJVElPTlNfU1RPUkFHRV9LRVkgPSBcInJlbWl4LXJvdXRlci10cmFuc2l0aW9uc1wiO1xuLy8jZW5kcmVnaW9uXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8jcmVnaW9uIGNyZWF0ZVJvdXRlclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8qKlxuICogQ3JlYXRlIGEgcm91dGVyIGFuZCBsaXN0ZW4gdG8gaGlzdG9yeSBQT1AgbmF2aWdhdGlvbnNcbiAqL1xuZnVuY3Rpb24gY3JlYXRlUm91dGVyKGluaXQpIHtcbiAgY29uc3Qgcm91dGVyV2luZG93ID0gaW5pdC53aW5kb3cgPyBpbml0LndpbmRvdyA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB1bmRlZmluZWQ7XG4gIGNvbnN0IGlzQnJvd3NlciA9IHR5cGVvZiByb3V0ZXJXaW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIHJvdXRlcldpbmRvdy5kb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2Ygcm91dGVyV2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgIT09IFwidW5kZWZpbmVkXCI7XG4gIGNvbnN0IGlzU2VydmVyID0gIWlzQnJvd3NlcjtcbiAgaW52YXJpYW50KGluaXQucm91dGVzLmxlbmd0aCA+IDAsIFwiWW91IG11c3QgcHJvdmlkZSBhIG5vbi1lbXB0eSByb3V0ZXMgYXJyYXkgdG8gY3JlYXRlUm91dGVyXCIpO1xuICBsZXQgbWFwUm91dGVQcm9wZXJ0aWVzO1xuICBpZiAoaW5pdC5tYXBSb3V0ZVByb3BlcnRpZXMpIHtcbiAgICBtYXBSb3V0ZVByb3BlcnRpZXMgPSBpbml0Lm1hcFJvdXRlUHJvcGVydGllcztcbiAgfSBlbHNlIGlmIChpbml0LmRldGVjdEVycm9yQm91bmRhcnkpIHtcbiAgICAvLyBJZiB0aGV5IGFyZSBzdGlsbCB1c2luZyB0aGUgZGVwcmVjYXRlZCB2ZXJzaW9uLCB3cmFwIGl0IHdpdGggdGhlIG5ldyBBUElcbiAgICBsZXQgZGV0ZWN0RXJyb3JCb3VuZGFyeSA9IGluaXQuZGV0ZWN0RXJyb3JCb3VuZGFyeTtcbiAgICBtYXBSb3V0ZVByb3BlcnRpZXMgPSByb3V0ZSA9PiAoe1xuICAgICAgaGFzRXJyb3JCb3VuZGFyeTogZGV0ZWN0RXJyb3JCb3VuZGFyeShyb3V0ZSlcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBtYXBSb3V0ZVByb3BlcnRpZXMgPSBkZWZhdWx0TWFwUm91dGVQcm9wZXJ0aWVzO1xuICB9XG4gIC8vIFJvdXRlcyBrZXllZCBieSBJRFxuICBsZXQgbWFuaWZlc3QgPSB7fTtcbiAgLy8gUm91dGVzIGluIHRyZWUgZm9ybWF0IGZvciBtYXRjaGluZ1xuICBsZXQgZGF0YVJvdXRlcyA9IGNvbnZlcnRSb3V0ZXNUb0RhdGFSb3V0ZXMoaW5pdC5yb3V0ZXMsIG1hcFJvdXRlUHJvcGVydGllcywgdW5kZWZpbmVkLCBtYW5pZmVzdCk7XG4gIGxldCBpbkZsaWdodERhdGFSb3V0ZXM7XG4gIGxldCBiYXNlbmFtZSA9IGluaXQuYmFzZW5hbWUgfHwgXCIvXCI7XG4gIGxldCBkYXRhU3RyYXRlZ3lJbXBsID0gaW5pdC51bnN0YWJsZV9kYXRhU3RyYXRlZ3kgfHwgZGVmYXVsdERhdGFTdHJhdGVneTtcbiAgLy8gQ29uZmlnIGRyaXZlbiBiZWhhdmlvciBmbGFnc1xuICBsZXQgZnV0dXJlID0gX2V4dGVuZHMoe1xuICAgIHY3X2ZldGNoZXJQZXJzaXN0OiBmYWxzZSxcbiAgICB2N19ub3JtYWxpemVGb3JtTWV0aG9kOiBmYWxzZSxcbiAgICB2N19wYXJ0aWFsSHlkcmF0aW9uOiBmYWxzZSxcbiAgICB2N19wcmVwZW5kQmFzZW5hbWU6IGZhbHNlLFxuICAgIHY3X3JlbGF0aXZlU3BsYXRQYXRoOiBmYWxzZSxcbiAgICB1bnN0YWJsZV9za2lwQWN0aW9uRXJyb3JSZXZhbGlkYXRpb246IGZhbHNlXG4gIH0sIGluaXQuZnV0dXJlKTtcbiAgLy8gQ2xlYW51cCBmdW5jdGlvbiBmb3IgaGlzdG9yeVxuICBsZXQgdW5saXN0ZW5IaXN0b3J5ID0gbnVsbDtcbiAgLy8gRXh0ZXJuYWxseS1wcm92aWRlZCBmdW5jdGlvbnMgdG8gY2FsbCBvbiBhbGwgc3RhdGUgY2hhbmdlc1xuICBsZXQgc3Vic2NyaWJlcnMgPSBuZXcgU2V0KCk7XG4gIC8vIEV4dGVybmFsbHktcHJvdmlkZWQgb2JqZWN0IHRvIGhvbGQgc2Nyb2xsIHJlc3RvcmF0aW9uIGxvY2F0aW9ucyBkdXJpbmcgcm91dGluZ1xuICBsZXQgc2F2ZWRTY3JvbGxQb3NpdGlvbnMgPSBudWxsO1xuICAvLyBFeHRlcm5hbGx5LXByb3ZpZGVkIGZ1bmN0aW9uIHRvIGdldCBzY3JvbGwgcmVzdG9yYXRpb24ga2V5c1xuICBsZXQgZ2V0U2Nyb2xsUmVzdG9yYXRpb25LZXkgPSBudWxsO1xuICAvLyBFeHRlcm5hbGx5LXByb3ZpZGVkIGZ1bmN0aW9uIHRvIGdldCBjdXJyZW50IHNjcm9sbCBwb3NpdGlvblxuICBsZXQgZ2V0U2Nyb2xsUG9zaXRpb24gPSBudWxsO1xuICAvLyBPbmUtdGltZSBmbGFnIHRvIGNvbnRyb2wgdGhlIGluaXRpYWwgaHlkcmF0aW9uIHNjcm9sbCByZXN0b3JhdGlvbi4gIEJlY2F1c2VcbiAgLy8gd2UgZG9uJ3QgZ2V0IHRoZSBzYXZlZCBwb3NpdGlvbnMgZnJvbSA8U2Nyb2xsUmVzdG9yYXRpb24gLz4gdW50aWwgX2FmdGVyX1xuICAvLyB0aGUgaW5pdGlhbCByZW5kZXIsIHdlIG5lZWQgdG8gbWFudWFsbHkgdHJpZ2dlciBhIHNlcGFyYXRlIHVwZGF0ZVN0YXRlIHRvXG4gIC8vIHNlbmQgYWxvbmcgdGhlIHJlc3RvcmVTY3JvbGxQb3NpdGlvblxuICAvLyBTZXQgdG8gdHJ1ZSBpZiB3ZSBoYXZlIGBoeWRyYXRpb25EYXRhYCBzaW5jZSB3ZSBhc3N1bWUgd2Ugd2VyZSBTU1InZCBhbmQgdGhhdFxuICAvLyBTU1IgZGlkIHRoZSBpbml0aWFsIHNjcm9sbCByZXN0b3JhdGlvbi5cbiAgbGV0IGluaXRpYWxTY3JvbGxSZXN0b3JlZCA9IGluaXQuaHlkcmF0aW9uRGF0YSAhPSBudWxsO1xuICBsZXQgaW5pdGlhbE1hdGNoZXMgPSBtYXRjaFJvdXRlcyhkYXRhUm91dGVzLCBpbml0Lmhpc3RvcnkubG9jYXRpb24sIGJhc2VuYW1lKTtcbiAgbGV0IGluaXRpYWxFcnJvcnMgPSBudWxsO1xuICBpZiAoaW5pdGlhbE1hdGNoZXMgPT0gbnVsbCkge1xuICAgIC8vIElmIHdlIGRvIG5vdCBtYXRjaCBhIHVzZXItcHJvdmlkZWQtcm91dGUsIGZhbGwgYmFjayB0byB0aGUgcm9vdFxuICAgIC8vIHRvIGFsbG93IHRoZSBlcnJvciBib3VuZGFyeSB0byB0YWtlIG92ZXJcbiAgICBsZXQgZXJyb3IgPSBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNCwge1xuICAgICAgcGF0aG5hbWU6IGluaXQuaGlzdG9yeS5sb2NhdGlvbi5wYXRobmFtZVxuICAgIH0pO1xuICAgIGxldCB7XG4gICAgICBtYXRjaGVzLFxuICAgICAgcm91dGVcbiAgICB9ID0gZ2V0U2hvcnRDaXJjdWl0TWF0Y2hlcyhkYXRhUm91dGVzKTtcbiAgICBpbml0aWFsTWF0Y2hlcyA9IG1hdGNoZXM7XG4gICAgaW5pdGlhbEVycm9ycyA9IHtcbiAgICAgIFtyb3V0ZS5pZF06IGVycm9yXG4gICAgfTtcbiAgfVxuICBsZXQgaW5pdGlhbGl6ZWQ7XG4gIGxldCBoYXNMYXp5Um91dGVzID0gaW5pdGlhbE1hdGNoZXMuc29tZShtID0+IG0ucm91dGUubGF6eSk7XG4gIGxldCBoYXNMb2FkZXJzID0gaW5pdGlhbE1hdGNoZXMuc29tZShtID0+IG0ucm91dGUubG9hZGVyKTtcbiAgaWYgKGhhc0xhenlSb3V0ZXMpIHtcbiAgICAvLyBBbGwgaW5pdGlhbE1hdGNoZXMgbmVlZCB0byBiZSBsb2FkZWQgYmVmb3JlIHdlJ3JlIHJlYWR5LiAgSWYgd2UgaGF2ZSBsYXp5XG4gICAgLy8gZnVuY3Rpb25zIGFyb3VuZCBzdGlsbCB0aGVuIHdlJ2xsIG5lZWQgdG8gcnVuIHRoZW0gaW4gaW5pdGlhbGl6ZSgpXG4gICAgaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgfSBlbHNlIGlmICghaGFzTG9hZGVycykge1xuICAgIC8vIElmIHdlJ3ZlIGdvdCBubyBsb2FkZXJzIHRvIHJ1biwgdGhlbiB3ZSdyZSBnb29kIHRvIGdvXG4gICAgaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICB9IGVsc2UgaWYgKGZ1dHVyZS52N19wYXJ0aWFsSHlkcmF0aW9uKSB7XG4gICAgLy8gSWYgcGFydGlhbCBoeWRyYXRpb24gaXMgZW5hYmxlZCwgd2UncmUgaW5pdGlhbGl6ZWQgc28gbG9uZyBhcyB3ZSB3ZXJlXG4gICAgLy8gcHJvdmlkZWQgd2l0aCBoeWRyYXRpb25EYXRhIGZvciBldmVyeSByb3V0ZSB3aXRoIGEgbG9hZGVyLCBhbmQgbm8gbG9hZGVyc1xuICAgIC8vIHdlcmUgbWFya2VkIGZvciBleHBsaWNpdCBoeWRyYXRpb25cbiAgICBsZXQgbG9hZGVyRGF0YSA9IGluaXQuaHlkcmF0aW9uRGF0YSA/IGluaXQuaHlkcmF0aW9uRGF0YS5sb2FkZXJEYXRhIDogbnVsbDtcbiAgICBsZXQgZXJyb3JzID0gaW5pdC5oeWRyYXRpb25EYXRhID8gaW5pdC5oeWRyYXRpb25EYXRhLmVycm9ycyA6IG51bGw7XG4gICAgbGV0IGlzUm91dGVJbml0aWFsaXplZCA9IG0gPT4ge1xuICAgICAgLy8gTm8gbG9hZGVyLCBub3RoaW5nIHRvIGluaXRpYWxpemVcbiAgICAgIGlmICghbS5yb3V0ZS5sb2FkZXIpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICAvLyBFeHBsaWNpdGx5IG9wdGluZy1pbiB0byBydW5uaW5nIG9uIGh5ZHJhdGlvblxuICAgICAgaWYgKHR5cGVvZiBtLnJvdXRlLmxvYWRlciA9PT0gXCJmdW5jdGlvblwiICYmIG0ucm91dGUubG9hZGVyLmh5ZHJhdGUgPT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgLy8gT3RoZXJ3aXNlLCBpbml0aWFsaXplZCBpZiBoeWRyYXRlZCB3aXRoIGRhdGEgb3IgYW4gZXJyb3JcbiAgICAgIHJldHVybiBsb2FkZXJEYXRhICYmIGxvYWRlckRhdGFbbS5yb3V0ZS5pZF0gIT09IHVuZGVmaW5lZCB8fCBlcnJvcnMgJiYgZXJyb3JzW20ucm91dGUuaWRdICE9PSB1bmRlZmluZWQ7XG4gICAgfTtcbiAgICAvLyBJZiBlcnJvcnMgZXhpc3QsIGRvbid0IGNvbnNpZGVyIHJvdXRlcyBiZWxvdyB0aGUgYm91bmRhcnlcbiAgICBpZiAoZXJyb3JzKSB7XG4gICAgICBsZXQgaWR4ID0gaW5pdGlhbE1hdGNoZXMuZmluZEluZGV4KG0gPT4gZXJyb3JzW20ucm91dGUuaWRdICE9PSB1bmRlZmluZWQpO1xuICAgICAgaW5pdGlhbGl6ZWQgPSBpbml0aWFsTWF0Y2hlcy5zbGljZSgwLCBpZHggKyAxKS5ldmVyeShpc1JvdXRlSW5pdGlhbGl6ZWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbml0aWFsaXplZCA9IGluaXRpYWxNYXRjaGVzLmV2ZXJ5KGlzUm91dGVJbml0aWFsaXplZCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIFdpdGhvdXQgcGFydGlhbCBoeWRyYXRpb24gLSB3ZSdyZSBpbml0aWFsaXplZCBpZiB3ZSB3ZXJlIHByb3ZpZGVkIGFueVxuICAgIC8vIGh5ZHJhdGlvbkRhdGEgLSB3aGljaCBpcyBleHBlY3RlZCB0byBiZSBjb21wbGV0ZVxuICAgIGluaXRpYWxpemVkID0gaW5pdC5oeWRyYXRpb25EYXRhICE9IG51bGw7XG4gIH1cbiAgbGV0IHJvdXRlcjtcbiAgbGV0IHN0YXRlID0ge1xuICAgIGhpc3RvcnlBY3Rpb246IGluaXQuaGlzdG9yeS5hY3Rpb24sXG4gICAgbG9jYXRpb246IGluaXQuaGlzdG9yeS5sb2NhdGlvbixcbiAgICBtYXRjaGVzOiBpbml0aWFsTWF0Y2hlcyxcbiAgICBpbml0aWFsaXplZCxcbiAgICBuYXZpZ2F0aW9uOiBJRExFX05BVklHQVRJT04sXG4gICAgLy8gRG9uJ3QgcmVzdG9yZSBvbiBpbml0aWFsIHVwZGF0ZVN0YXRlKCkgaWYgd2Ugd2VyZSBTU1InZFxuICAgIHJlc3RvcmVTY3JvbGxQb3NpdGlvbjogaW5pdC5oeWRyYXRpb25EYXRhICE9IG51bGwgPyBmYWxzZSA6IG51bGwsXG4gICAgcHJldmVudFNjcm9sbFJlc2V0OiBmYWxzZSxcbiAgICByZXZhbGlkYXRpb246IFwiaWRsZVwiLFxuICAgIGxvYWRlckRhdGE6IGluaXQuaHlkcmF0aW9uRGF0YSAmJiBpbml0Lmh5ZHJhdGlvbkRhdGEubG9hZGVyRGF0YSB8fCB7fSxcbiAgICBhY3Rpb25EYXRhOiBpbml0Lmh5ZHJhdGlvbkRhdGEgJiYgaW5pdC5oeWRyYXRpb25EYXRhLmFjdGlvbkRhdGEgfHwgbnVsbCxcbiAgICBlcnJvcnM6IGluaXQuaHlkcmF0aW9uRGF0YSAmJiBpbml0Lmh5ZHJhdGlvbkRhdGEuZXJyb3JzIHx8IGluaXRpYWxFcnJvcnMsXG4gICAgZmV0Y2hlcnM6IG5ldyBNYXAoKSxcbiAgICBibG9ja2VyczogbmV3IE1hcCgpXG4gIH07XG4gIC8vIC0tIFN0YXRlZnVsIGludGVybmFsIHZhcmlhYmxlcyB0byBtYW5hZ2UgbmF2aWdhdGlvbnMgLS1cbiAgLy8gQ3VycmVudCBuYXZpZ2F0aW9uIGluIHByb2dyZXNzICh0byBiZSBjb21taXR0ZWQgaW4gY29tcGxldGVOYXZpZ2F0aW9uKVxuICBsZXQgcGVuZGluZ0FjdGlvbiA9IEFjdGlvbi5Qb3A7XG4gIC8vIFNob3VsZCB0aGUgY3VycmVudCBuYXZpZ2F0aW9uIHByZXZlbnQgdGhlIHNjcm9sbCByZXNldCBpZiBzY3JvbGwgY2Fubm90XG4gIC8vIGJlIHJlc3RvcmVkP1xuICBsZXQgcGVuZGluZ1ByZXZlbnRTY3JvbGxSZXNldCA9IGZhbHNlO1xuICAvLyBBYm9ydENvbnRyb2xsZXIgZm9yIHRoZSBhY3RpdmUgbmF2aWdhdGlvblxuICBsZXQgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyO1xuICAvLyBTaG91bGQgdGhlIGN1cnJlbnQgbmF2aWdhdGlvbiBlbmFibGUgZG9jdW1lbnQuc3RhcnRWaWV3VHJhbnNpdGlvbj9cbiAgbGV0IHBlbmRpbmdWaWV3VHJhbnNpdGlvbkVuYWJsZWQgPSBmYWxzZTtcbiAgLy8gU3RvcmUgYXBwbGllZCB2aWV3IHRyYW5zaXRpb25zIHNvIHdlIGNhbiBhcHBseSB0aGVtIG9uIFBPUFxuICBsZXQgYXBwbGllZFZpZXdUcmFuc2l0aW9ucyA9IG5ldyBNYXAoKTtcbiAgLy8gQ2xlYW51cCBmdW5jdGlvbiBmb3IgcGVyc2lzdGluZyBhcHBsaWVkIHRyYW5zaXRpb25zIHRvIHNlc3Npb25TdG9yYWdlXG4gIGxldCByZW1vdmVQYWdlSGlkZUV2ZW50TGlzdGVuZXIgPSBudWxsO1xuICAvLyBXZSB1c2UgdGhpcyB0byBhdm9pZCB0b3VjaGluZyBoaXN0b3J5IGluIGNvbXBsZXRlTmF2aWdhdGlvbiBpZiBhXG4gIC8vIHJldmFsaWRhdGlvbiBpcyBlbnRpcmVseSB1bmludGVycnVwdGVkXG4gIGxldCBpc1VuaW50ZXJydXB0ZWRSZXZhbGlkYXRpb24gPSBmYWxzZTtcbiAgLy8gVXNlIHRoaXMgaW50ZXJuYWwgZmxhZyB0byBmb3JjZSByZXZhbGlkYXRpb24gb2YgYWxsIGxvYWRlcnM6XG4gIC8vICAtIHN1Ym1pc3Npb25zIChjb21wbGV0ZWQgb3IgaW50ZXJydXB0ZWQpXG4gIC8vICAtIHVzZVJldmFsaWRhdG9yKClcbiAgLy8gIC0gWC1SZW1peC1SZXZhbGlkYXRlIChmcm9tIHJlZGlyZWN0KVxuICBsZXQgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCA9IGZhbHNlO1xuICAvLyBVc2UgdGhpcyBpbnRlcm5hbCBhcnJheSB0byBjYXB0dXJlIHJvdXRlcyB0aGF0IHJlcXVpcmUgcmV2YWxpZGF0aW9uIGR1ZVxuICAvLyB0byBhIGNhbmNlbGxlZCBkZWZlcnJlZCBvbiBhY3Rpb24gc3VibWlzc2lvblxuICBsZXQgY2FuY2VsbGVkRGVmZXJyZWRSb3V0ZXMgPSBbXTtcbiAgLy8gVXNlIHRoaXMgaW50ZXJuYWwgYXJyYXkgdG8gY2FwdHVyZSBmZXRjaGVyIGxvYWRzIHRoYXQgd2VyZSBjYW5jZWxsZWQgYnkgYW5cbiAgLy8gYWN0aW9uIG5hdmlnYXRpb24gYW5kIHJlcXVpcmUgcmV2YWxpZGF0aW9uXG4gIGxldCBjYW5jZWxsZWRGZXRjaGVyTG9hZHMgPSBbXTtcbiAgLy8gQWJvcnRDb250cm9sbGVycyBmb3IgYW55IGluLWZsaWdodCBmZXRjaGVyc1xuICBsZXQgZmV0Y2hDb250cm9sbGVycyA9IG5ldyBNYXAoKTtcbiAgLy8gVHJhY2sgbG9hZHMgYmFzZWQgb24gdGhlIG9yZGVyIGluIHdoaWNoIHRoZXkgc3RhcnRlZFxuICBsZXQgaW5jcmVtZW50aW5nTG9hZElkID0gMDtcbiAgLy8gVHJhY2sgdGhlIG91dHN0YW5kaW5nIHBlbmRpbmcgbmF2aWdhdGlvbiBkYXRhIGxvYWQgdG8gYmUgY29tcGFyZWQgYWdhaW5zdFxuICAvLyB0aGUgZ2xvYmFsbHkgaW5jcmVtZW50aW5nIGxvYWQgd2hlbiBhIGZldGNoZXIgbG9hZCBsYW5kcyBhZnRlciBhIGNvbXBsZXRlZFxuICAvLyBuYXZpZ2F0aW9uXG4gIGxldCBwZW5kaW5nTmF2aWdhdGlvbkxvYWRJZCA9IC0xO1xuICAvLyBGZXRjaGVycyB0aGF0IHRyaWdnZXJlZCBkYXRhIHJlbG9hZHMgYXMgYSByZXN1bHQgb2YgdGhlaXIgYWN0aW9uc1xuICBsZXQgZmV0Y2hSZWxvYWRJZHMgPSBuZXcgTWFwKCk7XG4gIC8vIEZldGNoZXJzIHRoYXQgdHJpZ2dlcmVkIHJlZGlyZWN0IG5hdmlnYXRpb25zXG4gIGxldCBmZXRjaFJlZGlyZWN0SWRzID0gbmV3IFNldCgpO1xuICAvLyBNb3N0IHJlY2VudCBocmVmL21hdGNoIGZvciBmZXRjaGVyLmxvYWQgY2FsbHMgZm9yIGZldGNoZXJzXG4gIGxldCBmZXRjaExvYWRNYXRjaGVzID0gbmV3IE1hcCgpO1xuICAvLyBSZWYtY291bnQgbW91bnRlZCBmZXRjaGVycyBzbyB3ZSBrbm93IHdoZW4gaXQncyBvayB0byBjbGVhbiB0aGVtIHVwXG4gIGxldCBhY3RpdmVGZXRjaGVycyA9IG5ldyBNYXAoKTtcbiAgLy8gRmV0Y2hlcnMgdGhhdCBoYXZlIHJlcXVlc3RlZCBhIGRlbGV0ZSB3aGVuIHVzaW5nIHY3X2ZldGNoZXJQZXJzaXN0LFxuICAvLyB0aGV5J2xsIGJlIG9mZmljaWFsbHkgcmVtb3ZlZCBhZnRlciB0aGV5IHJldHVybiB0byBpZGxlXG4gIGxldCBkZWxldGVkRmV0Y2hlcnMgPSBuZXcgU2V0KCk7XG4gIC8vIFN0b3JlIERlZmVycmVkRGF0YSBpbnN0YW5jZXMgZm9yIGFjdGl2ZSByb3V0ZSBtYXRjaGVzLiAgV2hlbiBhXG4gIC8vIHJvdXRlIGxvYWRlciByZXR1cm5zIGRlZmVyKCkgd2Ugc3RpY2sgb25lIGluIGhlcmUuICBUaGVuLCB3aGVuIGEgbmVzdGVkXG4gIC8vIHByb21pc2UgcmVzb2x2ZXMgd2UgdXBkYXRlIGxvYWRlckRhdGEuICBJZiBhIG5ldyBuYXZpZ2F0aW9uIHN0YXJ0cyB3ZVxuICAvLyBjYW5jZWwgYWN0aXZlIGRlZmVycmVkcyBmb3IgZWxpbWluYXRlZCByb3V0ZXMuXG4gIGxldCBhY3RpdmVEZWZlcnJlZHMgPSBuZXcgTWFwKCk7XG4gIC8vIFN0b3JlIGJsb2NrZXIgZnVuY3Rpb25zIGluIGEgc2VwYXJhdGUgTWFwIG91dHNpZGUgb2Ygcm91dGVyIHN0YXRlIHNpbmNlXG4gIC8vIHdlIGRvbid0IG5lZWQgdG8gdXBkYXRlIFVJIHN0YXRlIGlmIHRoZXkgY2hhbmdlXG4gIGxldCBibG9ja2VyRnVuY3Rpb25zID0gbmV3IE1hcCgpO1xuICAvLyBGbGFnIHRvIGlnbm9yZSB0aGUgbmV4dCBoaXN0b3J5IHVwZGF0ZSwgc28gd2UgY2FuIHJldmVydCB0aGUgVVJMIGNoYW5nZSBvblxuICAvLyBhIFBPUCBuYXZpZ2F0aW9uIHRoYXQgd2FzIGJsb2NrZWQgYnkgdGhlIHVzZXIgd2l0aG91dCB0b3VjaGluZyByb3V0ZXIgc3RhdGVcbiAgbGV0IGlnbm9yZU5leHRIaXN0b3J5VXBkYXRlID0gZmFsc2U7XG4gIC8vIEluaXRpYWxpemUgdGhlIHJvdXRlciwgYWxsIHNpZGUgZWZmZWN0cyBzaG91bGQgYmUga2lja2VkIG9mZiBmcm9tIGhlcmUuXG4gIC8vIEltcGxlbWVudGVkIGFzIGEgRmx1ZW50IEFQSSBmb3IgZWFzZSBvZjpcbiAgLy8gICBsZXQgcm91dGVyID0gY3JlYXRlUm91dGVyKGluaXQpLmluaXRpYWxpemUoKTtcbiAgZnVuY3Rpb24gaW5pdGlhbGl6ZSgpIHtcbiAgICAvLyBJZiBoaXN0b3J5IGluZm9ybXMgdXMgb2YgYSBQT1AgbmF2aWdhdGlvbiwgc3RhcnQgdGhlIG5hdmlnYXRpb24gYnV0IGRvIG5vdCB1cGRhdGVcbiAgICAvLyBzdGF0ZS4gIFdlJ2xsIHVwZGF0ZSBvdXIgb3duIHN0YXRlIG9uY2UgdGhlIG5hdmlnYXRpb24gY29tcGxldGVzXG4gICAgdW5saXN0ZW5IaXN0b3J5ID0gaW5pdC5oaXN0b3J5Lmxpc3RlbihfcmVmID0+IHtcbiAgICAgIGxldCB7XG4gICAgICAgIGFjdGlvbjogaGlzdG9yeUFjdGlvbixcbiAgICAgICAgbG9jYXRpb24sXG4gICAgICAgIGRlbHRhXG4gICAgICB9ID0gX3JlZjtcbiAgICAgIC8vIElnbm9yZSB0aGlzIGV2ZW50IGlmIGl0IHdhcyBqdXN0IHVzIHJlc2V0dGluZyB0aGUgVVJMIGZyb20gYVxuICAgICAgLy8gYmxvY2tlZCBQT1AgbmF2aWdhdGlvblxuICAgICAgaWYgKGlnbm9yZU5leHRIaXN0b3J5VXBkYXRlKSB7XG4gICAgICAgIGlnbm9yZU5leHRIaXN0b3J5VXBkYXRlID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHdhcm5pbmcoYmxvY2tlckZ1bmN0aW9ucy5zaXplID09PSAwIHx8IGRlbHRhICE9IG51bGwsIFwiWW91IGFyZSB0cnlpbmcgdG8gdXNlIGEgYmxvY2tlciBvbiBhIFBPUCBuYXZpZ2F0aW9uIHRvIGEgbG9jYXRpb24gXCIgKyBcInRoYXQgd2FzIG5vdCBjcmVhdGVkIGJ5IEByZW1peC1ydW4vcm91dGVyLiBUaGlzIHdpbGwgZmFpbCBzaWxlbnRseSBpbiBcIiArIFwicHJvZHVjdGlvbi4gVGhpcyBjYW4gaGFwcGVuIGlmIHlvdSBhcmUgbmF2aWdhdGluZyBvdXRzaWRlIHRoZSByb3V0ZXIgXCIgKyBcInZpYSBgd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlYC9gd2luZG93LmxvY2F0aW9uLmhhc2hgIGluc3RlYWQgb2YgdXNpbmcgXCIgKyBcInJvdXRlciBuYXZpZ2F0aW9uIEFQSXMuICBUaGlzIGNhbiBhbHNvIGhhcHBlbiBpZiB5b3UgYXJlIHVzaW5nIFwiICsgXCJjcmVhdGVIYXNoUm91dGVyIGFuZCB0aGUgdXNlciBtYW51YWxseSBjaGFuZ2VzIHRoZSBVUkwuXCIpO1xuICAgICAgbGV0IGJsb2NrZXJLZXkgPSBzaG91bGRCbG9ja05hdmlnYXRpb24oe1xuICAgICAgICBjdXJyZW50TG9jYXRpb246IHN0YXRlLmxvY2F0aW9uLFxuICAgICAgICBuZXh0TG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICBoaXN0b3J5QWN0aW9uXG4gICAgICB9KTtcbiAgICAgIGlmIChibG9ja2VyS2V5ICYmIGRlbHRhICE9IG51bGwpIHtcbiAgICAgICAgLy8gUmVzdG9yZSB0aGUgVVJMIHRvIG1hdGNoIHRoZSBjdXJyZW50IFVJLCBidXQgZG9uJ3QgdXBkYXRlIHJvdXRlciBzdGF0ZVxuICAgICAgICBpZ25vcmVOZXh0SGlzdG9yeVVwZGF0ZSA9IHRydWU7XG4gICAgICAgIGluaXQuaGlzdG9yeS5nbyhkZWx0YSAqIC0xKTtcbiAgICAgICAgLy8gUHV0IHRoZSBibG9ja2VyIGludG8gYSBibG9ja2VkIHN0YXRlXG4gICAgICAgIHVwZGF0ZUJsb2NrZXIoYmxvY2tlcktleSwge1xuICAgICAgICAgIHN0YXRlOiBcImJsb2NrZWRcIixcbiAgICAgICAgICBsb2NhdGlvbixcbiAgICAgICAgICBwcm9jZWVkKCkge1xuICAgICAgICAgICAgdXBkYXRlQmxvY2tlcihibG9ja2VyS2V5LCB7XG4gICAgICAgICAgICAgIHN0YXRlOiBcInByb2NlZWRpbmdcIixcbiAgICAgICAgICAgICAgcHJvY2VlZDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICByZXNldDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICBsb2NhdGlvblxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBSZS1kbyB0aGUgc2FtZSBQT1AgbmF2aWdhdGlvbiB3ZSBqdXN0IGJsb2NrZWRcbiAgICAgICAgICAgIGluaXQuaGlzdG9yeS5nbyhkZWx0YSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICByZXNldCgpIHtcbiAgICAgICAgICAgIGxldCBibG9ja2VycyA9IG5ldyBNYXAoc3RhdGUuYmxvY2tlcnMpO1xuICAgICAgICAgICAgYmxvY2tlcnMuc2V0KGJsb2NrZXJLZXksIElETEVfQkxPQ0tFUik7XG4gICAgICAgICAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICAgICAgICAgIGJsb2NrZXJzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RhcnROYXZpZ2F0aW9uKGhpc3RvcnlBY3Rpb24sIGxvY2F0aW9uKTtcbiAgICB9KTtcbiAgICBpZiAoaXNCcm93c2VyKSB7XG4gICAgICAvLyBGSVhNRTogVGhpcyBmZWVscyBncm9zcy4gIEhvdyBjYW4gd2UgY2xlYW51cCB0aGUgbGluZXMgYmV0d2VlblxuICAgICAgLy8gc2Nyb2xsUmVzdG9yYXRpb24vYXBwbGllZFRyYW5zaXRpb25zIHBlcnNpc3RhbmNlP1xuICAgICAgcmVzdG9yZUFwcGxpZWRUcmFuc2l0aW9ucyhyb3V0ZXJXaW5kb3csIGFwcGxpZWRWaWV3VHJhbnNpdGlvbnMpO1xuICAgICAgbGV0IF9zYXZlQXBwbGllZFRyYW5zaXRpb25zID0gKCkgPT4gcGVyc2lzdEFwcGxpZWRUcmFuc2l0aW9ucyhyb3V0ZXJXaW5kb3csIGFwcGxpZWRWaWV3VHJhbnNpdGlvbnMpO1xuICAgICAgcm91dGVyV2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJwYWdlaGlkZVwiLCBfc2F2ZUFwcGxpZWRUcmFuc2l0aW9ucyk7XG4gICAgICByZW1vdmVQYWdlSGlkZUV2ZW50TGlzdGVuZXIgPSAoKSA9PiByb3V0ZXJXaW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInBhZ2VoaWRlXCIsIF9zYXZlQXBwbGllZFRyYW5zaXRpb25zKTtcbiAgICB9XG4gICAgLy8gS2ljayBvZmYgaW5pdGlhbCBkYXRhIGxvYWQgaWYgbmVlZGVkLiAgVXNlIFBvcCB0byBhdm9pZCBtb2RpZnlpbmcgaGlzdG9yeVxuICAgIC8vIE5vdGUgd2UgZG9uJ3QgZG8gYW55IGhhbmRsaW5nIG9mIGxhenkgaGVyZS4gIEZvciBTUEEncyBpdCdsbCBnZXQgaGFuZGxlZFxuICAgIC8vIGluIHRoZSBub3JtYWwgbmF2aWdhdGlvbiBmbG93LiAgRm9yIFNTUiBpdCdzIGV4cGVjdGVkIHRoYXQgbGF6eSBtb2R1bGVzIGFyZVxuICAgIC8vIHJlc29sdmVkIHByaW9yIHRvIHJvdXRlciBjcmVhdGlvbiBzaW5jZSB3ZSBjYW4ndCBnbyBpbnRvIGEgZmFsbGJhY2tFbGVtZW50XG4gICAgLy8gVUkgZm9yIFNTUidkIGFwcHNcbiAgICBpZiAoIXN0YXRlLmluaXRpYWxpemVkKSB7XG4gICAgICBzdGFydE5hdmlnYXRpb24oQWN0aW9uLlBvcCwgc3RhdGUubG9jYXRpb24sIHtcbiAgICAgICAgaW5pdGlhbEh5ZHJhdGlvbjogdHJ1ZVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiByb3V0ZXI7XG4gIH1cbiAgLy8gQ2xlYW4gdXAgYSByb3V0ZXIgYW5kIGl0J3Mgc2lkZSBlZmZlY3RzXG4gIGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgaWYgKHVubGlzdGVuSGlzdG9yeSkge1xuICAgICAgdW5saXN0ZW5IaXN0b3J5KCk7XG4gICAgfVxuICAgIGlmIChyZW1vdmVQYWdlSGlkZUV2ZW50TGlzdGVuZXIpIHtcbiAgICAgIHJlbW92ZVBhZ2VIaWRlRXZlbnRMaXN0ZW5lcigpO1xuICAgIH1cbiAgICBzdWJzY3JpYmVycy5jbGVhcigpO1xuICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciAmJiBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICBzdGF0ZS5mZXRjaGVycy5mb3JFYWNoKChfLCBrZXkpID0+IGRlbGV0ZUZldGNoZXIoa2V5KSk7XG4gICAgc3RhdGUuYmxvY2tlcnMuZm9yRWFjaCgoXywga2V5KSA9PiBkZWxldGVCbG9ja2VyKGtleSkpO1xuICB9XG4gIC8vIFN1YnNjcmliZSB0byBzdGF0ZSB1cGRhdGVzIGZvciB0aGUgcm91dGVyXG4gIGZ1bmN0aW9uIHN1YnNjcmliZShmbikge1xuICAgIHN1YnNjcmliZXJzLmFkZChmbik7XG4gICAgcmV0dXJuICgpID0+IHN1YnNjcmliZXJzLmRlbGV0ZShmbik7XG4gIH1cbiAgLy8gVXBkYXRlIG91ciBzdGF0ZSBhbmQgbm90aWZ5IHRoZSBjYWxsaW5nIGNvbnRleHQgb2YgdGhlIGNoYW5nZVxuICBmdW5jdGlvbiB1cGRhdGVTdGF0ZShuZXdTdGF0ZSwgb3B0cykge1xuICAgIGlmIChvcHRzID09PSB2b2lkIDApIHtcbiAgICAgIG9wdHMgPSB7fTtcbiAgICB9XG4gICAgc3RhdGUgPSBfZXh0ZW5kcyh7fSwgc3RhdGUsIG5ld1N0YXRlKTtcbiAgICAvLyBQcmVwIGZldGNoZXIgY2xlYW51cCBzbyB3ZSBjYW4gdGVsbCB0aGUgVUkgd2hpY2ggZmV0Y2hlciBkYXRhIGVudHJpZXNcbiAgICAvLyBjYW4gYmUgcmVtb3ZlZFxuICAgIGxldCBjb21wbGV0ZWRGZXRjaGVycyA9IFtdO1xuICAgIGxldCBkZWxldGVkRmV0Y2hlcnNLZXlzID0gW107XG4gICAgaWYgKGZ1dHVyZS52N19mZXRjaGVyUGVyc2lzdCkge1xuICAgICAgc3RhdGUuZmV0Y2hlcnMuZm9yRWFjaCgoZmV0Y2hlciwga2V5KSA9PiB7XG4gICAgICAgIGlmIChmZXRjaGVyLnN0YXRlID09PSBcImlkbGVcIikge1xuICAgICAgICAgIGlmIChkZWxldGVkRmV0Y2hlcnMuaGFzKGtleSkpIHtcbiAgICAgICAgICAgIC8vIFVubW91bnRlZCBmcm9tIHRoZSBVSSBhbmQgY2FuIGJlIHRvdGFsbHkgcmVtb3ZlZFxuICAgICAgICAgICAgZGVsZXRlZEZldGNoZXJzS2V5cy5wdXNoKGtleSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIFJldHVybmVkIHRvIGlkbGUgYnV0IHN0aWxsIG1vdW50ZWQgaW4gdGhlIFVJLCBzbyBzZW1pLXJlbWFpbnMgZm9yXG4gICAgICAgICAgICAvLyByZXZhbGlkYXRpb25zIGFuZCBzdWNoXG4gICAgICAgICAgICBjb21wbGV0ZWRGZXRjaGVycy5wdXNoKGtleSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgLy8gSXRlcmF0ZSBvdmVyIGEgbG9jYWwgY29weSBzbyB0aGF0IGlmIGZsdXNoU3luYyBpcyB1c2VkIGFuZCB3ZSBlbmQgdXBcbiAgICAvLyByZW1vdmluZyBhbmQgYWRkaW5nIGEgbmV3IHN1YnNjcmliZXIgZHVlIHRvIHRoZSB1c2VDYWxsYmFjayBkZXBlbmRlbmNpZXMsXG4gICAgLy8gd2UgZG9uJ3QgZ2V0IG91cnNlbHZlcyBpbnRvIGEgbG9vcCBjYWxsaW5nIHRoZSBuZXcgc3Vic2NyaWJlciBpbW1lZGlhdGVseVxuICAgIFsuLi5zdWJzY3JpYmVyc10uZm9yRWFjaChzdWJzY3JpYmVyID0+IHN1YnNjcmliZXIoc3RhdGUsIHtcbiAgICAgIGRlbGV0ZWRGZXRjaGVyczogZGVsZXRlZEZldGNoZXJzS2V5cyxcbiAgICAgIHVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uT3B0czogb3B0cy52aWV3VHJhbnNpdGlvbk9wdHMsXG4gICAgICB1bnN0YWJsZV9mbHVzaFN5bmM6IG9wdHMuZmx1c2hTeW5jID09PSB0cnVlXG4gICAgfSkpO1xuICAgIC8vIFJlbW92ZSBpZGxlIGZldGNoZXJzIGZyb20gc3RhdGUgc2luY2Ugd2Ugb25seSBjYXJlIGFib3V0IGluLWZsaWdodCBmZXRjaGVycy5cbiAgICBpZiAoZnV0dXJlLnY3X2ZldGNoZXJQZXJzaXN0KSB7XG4gICAgICBjb21wbGV0ZWRGZXRjaGVycy5mb3JFYWNoKGtleSA9PiBzdGF0ZS5mZXRjaGVycy5kZWxldGUoa2V5KSk7XG4gICAgICBkZWxldGVkRmV0Y2hlcnNLZXlzLmZvckVhY2goa2V5ID0+IGRlbGV0ZUZldGNoZXIoa2V5KSk7XG4gICAgfVxuICB9XG4gIC8vIENvbXBsZXRlIGEgbmF2aWdhdGlvbiByZXR1cm5pbmcgdGhlIHN0YXRlLm5hdmlnYXRpb24gYmFjayB0byB0aGUgSURMRV9OQVZJR0FUSU9OXG4gIC8vIGFuZCBzZXR0aW5nIHN0YXRlLltoaXN0b3J5QWN0aW9uL2xvY2F0aW9uL21hdGNoZXNdIHRvIHRoZSBuZXcgcm91dGUuXG4gIC8vIC0gTG9jYXRpb24gaXMgYSByZXF1aXJlZCBwYXJhbVxuICAvLyAtIE5hdmlnYXRpb24gd2lsbCBhbHdheXMgYmUgc2V0IHRvIElETEVfTkFWSUdBVElPTlxuICAvLyAtIENhbiBwYXNzIGFueSBvdGhlciBzdGF0ZSBpbiBuZXdTdGF0ZVxuICBmdW5jdGlvbiBjb21wbGV0ZU5hdmlnYXRpb24obG9jYXRpb24sIG5ld1N0YXRlLCBfdGVtcCkge1xuICAgIHZhciBfbG9jYXRpb24kc3RhdGUsIF9sb2NhdGlvbiRzdGF0ZTI7XG4gICAgbGV0IHtcbiAgICAgIGZsdXNoU3luY1xuICAgIH0gPSBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDtcbiAgICAvLyBEZWR1Y2UgaWYgd2UncmUgaW4gYSBsb2FkaW5nL2FjdGlvblJlbG9hZCBzdGF0ZTpcbiAgICAvLyAtIFdlIGhhdmUgY29tbWl0dGVkIGFjdGlvbkRhdGEgaW4gdGhlIHN0b3JlXG4gICAgLy8gLSBUaGUgY3VycmVudCBuYXZpZ2F0aW9uIHdhcyBhIG11dGF0aW9uIHN1Ym1pc3Npb25cbiAgICAvLyAtIFdlJ3JlIHBhc3QgdGhlIHN1Ym1pdHRpbmcgc3RhdGUgYW5kIGludG8gdGhlIGxvYWRpbmcgc3RhdGVcbiAgICAvLyAtIFRoZSBsb2NhdGlvbiBiZWluZyBsb2FkZWQgaXMgbm90IHRoZSByZXN1bHQgb2YgYSByZWRpcmVjdFxuICAgIGxldCBpc0FjdGlvblJlbG9hZCA9IHN0YXRlLmFjdGlvbkRhdGEgIT0gbnVsbCAmJiBzdGF0ZS5uYXZpZ2F0aW9uLmZvcm1NZXRob2QgIT0gbnVsbCAmJiBpc011dGF0aW9uTWV0aG9kKHN0YXRlLm5hdmlnYXRpb24uZm9ybU1ldGhvZCkgJiYgc3RhdGUubmF2aWdhdGlvbi5zdGF0ZSA9PT0gXCJsb2FkaW5nXCIgJiYgKChfbG9jYXRpb24kc3RhdGUgPSBsb2NhdGlvbi5zdGF0ZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9sb2NhdGlvbiRzdGF0ZS5faXNSZWRpcmVjdCkgIT09IHRydWU7XG4gICAgbGV0IGFjdGlvbkRhdGE7XG4gICAgaWYgKG5ld1N0YXRlLmFjdGlvbkRhdGEpIHtcbiAgICAgIGlmIChPYmplY3Qua2V5cyhuZXdTdGF0ZS5hY3Rpb25EYXRhKS5sZW5ndGggPiAwKSB7XG4gICAgICAgIGFjdGlvbkRhdGEgPSBuZXdTdGF0ZS5hY3Rpb25EYXRhO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRW1wdHkgYWN0aW9uRGF0YSAtPiBjbGVhciBwcmlvciBhY3Rpb25EYXRhIGR1ZSB0byBhbiBhY3Rpb24gZXJyb3JcbiAgICAgICAgYWN0aW9uRGF0YSA9IG51bGw7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc0FjdGlvblJlbG9hZCkge1xuICAgICAgLy8gS2VlcCB0aGUgY3VycmVudCBkYXRhIGlmIHdlJ3JlIHdyYXBwaW5nIHVwIHRoZSBhY3Rpb24gcmVsb2FkXG4gICAgICBhY3Rpb25EYXRhID0gc3RhdGUuYWN0aW9uRGF0YTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ2xlYXIgYWN0aW9uRGF0YSBvbiBhbnkgb3RoZXIgY29tcGxldGVkIG5hdmlnYXRpb25zXG4gICAgICBhY3Rpb25EYXRhID0gbnVsbDtcbiAgICB9XG4gICAgLy8gQWx3YXlzIHByZXNlcnZlIGFueSBleGlzdGluZyBsb2FkZXJEYXRhIGZyb20gcmUtdXNlZCByb3V0ZXNcbiAgICBsZXQgbG9hZGVyRGF0YSA9IG5ld1N0YXRlLmxvYWRlckRhdGEgPyBtZXJnZUxvYWRlckRhdGEoc3RhdGUubG9hZGVyRGF0YSwgbmV3U3RhdGUubG9hZGVyRGF0YSwgbmV3U3RhdGUubWF0Y2hlcyB8fCBbXSwgbmV3U3RhdGUuZXJyb3JzKSA6IHN0YXRlLmxvYWRlckRhdGE7XG4gICAgLy8gT24gYSBzdWNjZXNzZnVsIG5hdmlnYXRpb24gd2UgY2FuIGFzc3VtZSB3ZSBnb3QgdGhyb3VnaCBhbGwgYmxvY2tlcnNcbiAgICAvLyBzbyB3ZSBjYW4gc3RhcnQgZnJlc2hcbiAgICBsZXQgYmxvY2tlcnMgPSBzdGF0ZS5ibG9ja2VycztcbiAgICBpZiAoYmxvY2tlcnMuc2l6ZSA+IDApIHtcbiAgICAgIGJsb2NrZXJzID0gbmV3IE1hcChibG9ja2Vycyk7XG4gICAgICBibG9ja2Vycy5mb3JFYWNoKChfLCBrKSA9PiBibG9ja2Vycy5zZXQoaywgSURMRV9CTE9DS0VSKSk7XG4gICAgfVxuICAgIC8vIEFsd2F5cyByZXNwZWN0IHRoZSB1c2VyIGZsYWcuICBPdGhlcndpc2UgZG9uJ3QgcmVzZXQgb24gbXV0YXRpb25cbiAgICAvLyBzdWJtaXNzaW9uIG5hdmlnYXRpb25zIHVubGVzcyB0aGV5IHJlZGlyZWN0XG4gICAgbGV0IHByZXZlbnRTY3JvbGxSZXNldCA9IHBlbmRpbmdQcmV2ZW50U2Nyb2xsUmVzZXQgPT09IHRydWUgfHwgc3RhdGUubmF2aWdhdGlvbi5mb3JtTWV0aG9kICE9IG51bGwgJiYgaXNNdXRhdGlvbk1ldGhvZChzdGF0ZS5uYXZpZ2F0aW9uLmZvcm1NZXRob2QpICYmICgoX2xvY2F0aW9uJHN0YXRlMiA9IGxvY2F0aW9uLnN0YXRlKSA9PSBudWxsID8gdm9pZCAwIDogX2xvY2F0aW9uJHN0YXRlMi5faXNSZWRpcmVjdCkgIT09IHRydWU7XG4gICAgaWYgKGluRmxpZ2h0RGF0YVJvdXRlcykge1xuICAgICAgZGF0YVJvdXRlcyA9IGluRmxpZ2h0RGF0YVJvdXRlcztcbiAgICAgIGluRmxpZ2h0RGF0YVJvdXRlcyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKGlzVW5pbnRlcnJ1cHRlZFJldmFsaWRhdGlvbikgOyBlbHNlIGlmIChwZW5kaW5nQWN0aW9uID09PSBBY3Rpb24uUG9wKSA7IGVsc2UgaWYgKHBlbmRpbmdBY3Rpb24gPT09IEFjdGlvbi5QdXNoKSB7XG4gICAgICBpbml0Lmhpc3RvcnkucHVzaChsb2NhdGlvbiwgbG9jYXRpb24uc3RhdGUpO1xuICAgIH0gZWxzZSBpZiAocGVuZGluZ0FjdGlvbiA9PT0gQWN0aW9uLlJlcGxhY2UpIHtcbiAgICAgIGluaXQuaGlzdG9yeS5yZXBsYWNlKGxvY2F0aW9uLCBsb2NhdGlvbi5zdGF0ZSk7XG4gICAgfVxuICAgIGxldCB2aWV3VHJhbnNpdGlvbk9wdHM7XG4gICAgLy8gT24gUE9QLCBlbmFibGUgdHJhbnNpdGlvbnMgaWYgdGhleSB3ZXJlIGVuYWJsZWQgb24gdGhlIG9yaWdpbmFsIG5hdmlnYXRpb25cbiAgICBpZiAocGVuZGluZ0FjdGlvbiA9PT0gQWN0aW9uLlBvcCkge1xuICAgICAgLy8gRm9yd2FyZCB0YWtlcyBwcmVjZWRlbmNlIHNvIHRoZXkgYmVoYXZlIGxpa2UgdGhlIG9yaWdpbmFsIG5hdmlnYXRpb25cbiAgICAgIGxldCBwcmlvclBhdGhzID0gYXBwbGllZFZpZXdUcmFuc2l0aW9ucy5nZXQoc3RhdGUubG9jYXRpb24ucGF0aG5hbWUpO1xuICAgICAgaWYgKHByaW9yUGF0aHMgJiYgcHJpb3JQYXRocy5oYXMobG9jYXRpb24ucGF0aG5hbWUpKSB7XG4gICAgICAgIHZpZXdUcmFuc2l0aW9uT3B0cyA9IHtcbiAgICAgICAgICBjdXJyZW50TG9jYXRpb246IHN0YXRlLmxvY2F0aW9uLFxuICAgICAgICAgIG5leHRMb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSBpZiAoYXBwbGllZFZpZXdUcmFuc2l0aW9ucy5oYXMobG9jYXRpb24ucGF0aG5hbWUpKSB7XG4gICAgICAgIC8vIElmIHdlIGRvbid0IGhhdmUgYSBwcmV2aW91cyBmb3J3YXJkIG5hdiwgYXNzdW1lIHdlJ3JlIHBvcHBpbmcgYmFjayB0b1xuICAgICAgICAvLyB0aGUgbmV3IGxvY2F0aW9uIGFuZCBlbmFibGUgaWYgdGhhdCBsb2NhdGlvbiBwcmV2aW91c2x5IGVuYWJsZWRcbiAgICAgICAgdmlld1RyYW5zaXRpb25PcHRzID0ge1xuICAgICAgICAgIGN1cnJlbnRMb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgICAgbmV4dExvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvblxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocGVuZGluZ1ZpZXdUcmFuc2l0aW9uRW5hYmxlZCkge1xuICAgICAgLy8gU3RvcmUgdGhlIGFwcGxpZWQgdHJhbnNpdGlvbiBvbiBQVVNIL1JFUExBQ0VcbiAgICAgIGxldCB0b1BhdGhzID0gYXBwbGllZFZpZXdUcmFuc2l0aW9ucy5nZXQoc3RhdGUubG9jYXRpb24ucGF0aG5hbWUpO1xuICAgICAgaWYgKHRvUGF0aHMpIHtcbiAgICAgICAgdG9QYXRocy5hZGQobG9jYXRpb24ucGF0aG5hbWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdG9QYXRocyA9IG5ldyBTZXQoW2xvY2F0aW9uLnBhdGhuYW1lXSk7XG4gICAgICAgIGFwcGxpZWRWaWV3VHJhbnNpdGlvbnMuc2V0KHN0YXRlLmxvY2F0aW9uLnBhdGhuYW1lLCB0b1BhdGhzKTtcbiAgICAgIH1cbiAgICAgIHZpZXdUcmFuc2l0aW9uT3B0cyA9IHtcbiAgICAgICAgY3VycmVudExvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICAgICAgbmV4dExvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgfTtcbiAgICB9XG4gICAgdXBkYXRlU3RhdGUoX2V4dGVuZHMoe30sIG5ld1N0YXRlLCB7XG4gICAgICBhY3Rpb25EYXRhLFxuICAgICAgbG9hZGVyRGF0YSxcbiAgICAgIGhpc3RvcnlBY3Rpb246IHBlbmRpbmdBY3Rpb24sXG4gICAgICBsb2NhdGlvbixcbiAgICAgIGluaXRpYWxpemVkOiB0cnVlLFxuICAgICAgbmF2aWdhdGlvbjogSURMRV9OQVZJR0FUSU9OLFxuICAgICAgcmV2YWxpZGF0aW9uOiBcImlkbGVcIixcbiAgICAgIHJlc3RvcmVTY3JvbGxQb3NpdGlvbjogZ2V0U2F2ZWRTY3JvbGxQb3NpdGlvbihsb2NhdGlvbiwgbmV3U3RhdGUubWF0Y2hlcyB8fCBzdGF0ZS5tYXRjaGVzKSxcbiAgICAgIHByZXZlbnRTY3JvbGxSZXNldCxcbiAgICAgIGJsb2NrZXJzXG4gICAgfSksIHtcbiAgICAgIHZpZXdUcmFuc2l0aW9uT3B0cyxcbiAgICAgIGZsdXNoU3luYzogZmx1c2hTeW5jID09PSB0cnVlXG4gICAgfSk7XG4gICAgLy8gUmVzZXQgc3RhdGVmdWwgbmF2aWdhdGlvbiB2YXJzXG4gICAgcGVuZGluZ0FjdGlvbiA9IEFjdGlvbi5Qb3A7XG4gICAgcGVuZGluZ1ByZXZlbnRTY3JvbGxSZXNldCA9IGZhbHNlO1xuICAgIHBlbmRpbmdWaWV3VHJhbnNpdGlvbkVuYWJsZWQgPSBmYWxzZTtcbiAgICBpc1VuaW50ZXJydXB0ZWRSZXZhbGlkYXRpb24gPSBmYWxzZTtcbiAgICBpc1JldmFsaWRhdGlvblJlcXVpcmVkID0gZmFsc2U7XG4gICAgY2FuY2VsbGVkRGVmZXJyZWRSb3V0ZXMgPSBbXTtcbiAgICBjYW5jZWxsZWRGZXRjaGVyTG9hZHMgPSBbXTtcbiAgfVxuICAvLyBUcmlnZ2VyIGEgbmF2aWdhdGlvbiBldmVudCwgd2hpY2ggY2FuIGVpdGhlciBiZSBhIG51bWVyaWNhbCBQT1Agb3IgYSBQVVNIXG4gIC8vIHJlcGxhY2Ugd2l0aCBhbiBvcHRpb25hbCBzdWJtaXNzaW9uXG4gIGFzeW5jIGZ1bmN0aW9uIG5hdmlnYXRlKHRvLCBvcHRzKSB7XG4gICAgaWYgKHR5cGVvZiB0byA9PT0gXCJudW1iZXJcIikge1xuICAgICAgaW5pdC5oaXN0b3J5LmdvKHRvKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IG5vcm1hbGl6ZWRQYXRoID0gbm9ybWFsaXplVG8oc3RhdGUubG9jYXRpb24sIHN0YXRlLm1hdGNoZXMsIGJhc2VuYW1lLCBmdXR1cmUudjdfcHJlcGVuZEJhc2VuYW1lLCB0bywgZnV0dXJlLnY3X3JlbGF0aXZlU3BsYXRQYXRoLCBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLmZyb21Sb3V0ZUlkLCBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLnJlbGF0aXZlKTtcbiAgICBsZXQge1xuICAgICAgcGF0aCxcbiAgICAgIHN1Ym1pc3Npb24sXG4gICAgICBlcnJvclxuICAgIH0gPSBub3JtYWxpemVOYXZpZ2F0ZU9wdGlvbnMoZnV0dXJlLnY3X25vcm1hbGl6ZUZvcm1NZXRob2QsIGZhbHNlLCBub3JtYWxpemVkUGF0aCwgb3B0cyk7XG4gICAgbGV0IGN1cnJlbnRMb2NhdGlvbiA9IHN0YXRlLmxvY2F0aW9uO1xuICAgIGxldCBuZXh0TG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihzdGF0ZS5sb2NhdGlvbiwgcGF0aCwgb3B0cyAmJiBvcHRzLnN0YXRlKTtcbiAgICAvLyBXaGVuIHVzaW5nIG5hdmlnYXRlIGFzIGEgUFVTSC9SRVBMQUNFIHdlIGFyZW4ndCByZWFkaW5nIGFuIGFscmVhZHktZW5jb2RlZFxuICAgIC8vIFVSTCBmcm9tIHdpbmRvdy5sb2NhdGlvbiwgc28gd2UgbmVlZCB0byBlbmNvZGUgaXQgaGVyZSBzbyB0aGUgYmVoYXZpb3JcbiAgICAvLyByZW1haW5zIHRoZSBzYW1lIGFzIFBPUCBhbmQgbm9uLWRhdGEtcm91dGVyIHVzYWdlcy4gIG5ldyBVUkwoKSBkb2VzIGFsbFxuICAgIC8vIHRoZSBzYW1lIGVuY29kaW5nIHdlJ2QgZ2V0IGZyb20gYSBoaXN0b3J5LnB1c2hTdGF0ZS93aW5kb3cubG9jYXRpb24gcmVhZFxuICAgIC8vIHdpdGhvdXQgaGF2aW5nIHRvIHRvdWNoIGhpc3RvcnlcbiAgICBuZXh0TG9jYXRpb24gPSBfZXh0ZW5kcyh7fSwgbmV4dExvY2F0aW9uLCBpbml0Lmhpc3RvcnkuZW5jb2RlTG9jYXRpb24obmV4dExvY2F0aW9uKSk7XG4gICAgbGV0IHVzZXJSZXBsYWNlID0gb3B0cyAmJiBvcHRzLnJlcGxhY2UgIT0gbnVsbCA/IG9wdHMucmVwbGFjZSA6IHVuZGVmaW5lZDtcbiAgICBsZXQgaGlzdG9yeUFjdGlvbiA9IEFjdGlvbi5QdXNoO1xuICAgIGlmICh1c2VyUmVwbGFjZSA9PT0gdHJ1ZSkge1xuICAgICAgaGlzdG9yeUFjdGlvbiA9IEFjdGlvbi5SZXBsYWNlO1xuICAgIH0gZWxzZSBpZiAodXNlclJlcGxhY2UgPT09IGZhbHNlKSA7IGVsc2UgaWYgKHN1Ym1pc3Npb24gIT0gbnVsbCAmJiBpc011dGF0aW9uTWV0aG9kKHN1Ym1pc3Npb24uZm9ybU1ldGhvZCkgJiYgc3VibWlzc2lvbi5mb3JtQWN0aW9uID09PSBzdGF0ZS5sb2NhdGlvbi5wYXRobmFtZSArIHN0YXRlLmxvY2F0aW9uLnNlYXJjaCkge1xuICAgICAgLy8gQnkgZGVmYXVsdCBvbiBzdWJtaXNzaW9ucyB0byB0aGUgY3VycmVudCBsb2NhdGlvbiB3ZSBSRVBMQUNFIHNvIHRoYXRcbiAgICAgIC8vIHVzZXJzIGRvbid0IGhhdmUgdG8gZG91YmxlLWNsaWNrIHRoZSBiYWNrIGJ1dHRvbiB0byBnZXQgdG8gdGhlIHByaW9yXG4gICAgICAvLyBsb2NhdGlvbi4gIElmIHRoZSB1c2VyIHJlZGlyZWN0cyB0byBhIGRpZmZlcmVudCBsb2NhdGlvbiBmcm9tIHRoZVxuICAgICAgLy8gYWN0aW9uL2xvYWRlciB0aGlzIHdpbGwgYmUgaWdub3JlZCBhbmQgdGhlIHJlZGlyZWN0IHdpbGwgYmUgYSBQVVNIXG4gICAgICBoaXN0b3J5QWN0aW9uID0gQWN0aW9uLlJlcGxhY2U7XG4gICAgfVxuICAgIGxldCBwcmV2ZW50U2Nyb2xsUmVzZXQgPSBvcHRzICYmIFwicHJldmVudFNjcm9sbFJlc2V0XCIgaW4gb3B0cyA/IG9wdHMucHJldmVudFNjcm9sbFJlc2V0ID09PSB0cnVlIDogdW5kZWZpbmVkO1xuICAgIGxldCBmbHVzaFN5bmMgPSAob3B0cyAmJiBvcHRzLnVuc3RhYmxlX2ZsdXNoU3luYykgPT09IHRydWU7XG4gICAgbGV0IGJsb2NrZXJLZXkgPSBzaG91bGRCbG9ja05hdmlnYXRpb24oe1xuICAgICAgY3VycmVudExvY2F0aW9uLFxuICAgICAgbmV4dExvY2F0aW9uLFxuICAgICAgaGlzdG9yeUFjdGlvblxuICAgIH0pO1xuICAgIGlmIChibG9ja2VyS2V5KSB7XG4gICAgICAvLyBQdXQgdGhlIGJsb2NrZXIgaW50byBhIGJsb2NrZWQgc3RhdGVcbiAgICAgIHVwZGF0ZUJsb2NrZXIoYmxvY2tlcktleSwge1xuICAgICAgICBzdGF0ZTogXCJibG9ja2VkXCIsXG4gICAgICAgIGxvY2F0aW9uOiBuZXh0TG9jYXRpb24sXG4gICAgICAgIHByb2NlZWQoKSB7XG4gICAgICAgICAgdXBkYXRlQmxvY2tlcihibG9ja2VyS2V5LCB7XG4gICAgICAgICAgICBzdGF0ZTogXCJwcm9jZWVkaW5nXCIsXG4gICAgICAgICAgICBwcm9jZWVkOiB1bmRlZmluZWQsXG4gICAgICAgICAgICByZXNldDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgbG9jYXRpb246IG5leHRMb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICAgIC8vIFNlbmQgdGhlIHNhbWUgbmF2aWdhdGlvbiB0aHJvdWdoXG4gICAgICAgICAgbmF2aWdhdGUodG8sIG9wdHMpO1xuICAgICAgICB9LFxuICAgICAgICByZXNldCgpIHtcbiAgICAgICAgICBsZXQgYmxvY2tlcnMgPSBuZXcgTWFwKHN0YXRlLmJsb2NrZXJzKTtcbiAgICAgICAgICBibG9ja2Vycy5zZXQoYmxvY2tlcktleSwgSURMRV9CTE9DS0VSKTtcbiAgICAgICAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICAgICAgICBibG9ja2Vyc1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcmV0dXJuIGF3YWl0IHN0YXJ0TmF2aWdhdGlvbihoaXN0b3J5QWN0aW9uLCBuZXh0TG9jYXRpb24sIHtcbiAgICAgIHN1Ym1pc3Npb24sXG4gICAgICAvLyBTZW5kIHRocm91Z2ggdGhlIGZvcm1EYXRhIHNlcmlhbGl6YXRpb24gZXJyb3IgaWYgd2UgaGF2ZSBvbmUgc28gd2UgY2FuXG4gICAgICAvLyByZW5kZXIgYXQgdGhlIHJpZ2h0IGVycm9yIGJvdW5kYXJ5IGFmdGVyIHdlIG1hdGNoIHJvdXRlc1xuICAgICAgcGVuZGluZ0Vycm9yOiBlcnJvcixcbiAgICAgIHByZXZlbnRTY3JvbGxSZXNldCxcbiAgICAgIHJlcGxhY2U6IG9wdHMgJiYgb3B0cy5yZXBsYWNlLFxuICAgICAgZW5hYmxlVmlld1RyYW5zaXRpb246IG9wdHMgJiYgb3B0cy51bnN0YWJsZV92aWV3VHJhbnNpdGlvbixcbiAgICAgIGZsdXNoU3luY1xuICAgIH0pO1xuICB9XG4gIC8vIFJldmFsaWRhdGUgYWxsIGN1cnJlbnQgbG9hZGVycy4gIElmIGEgbmF2aWdhdGlvbiBpcyBpbiBwcm9ncmVzcyBvciBpZiB0aGlzXG4gIC8vIGlzIGludGVycnVwdGVkIGJ5IGEgbmF2aWdhdGlvbiwgYWxsb3cgdGhpcyB0byBcInN1Y2NlZWRcIiBieSBjYWxsaW5nIGFsbFxuICAvLyBsb2FkZXJzIGR1cmluZyB0aGUgbmV4dCBsb2FkZXIgcm91bmRcbiAgZnVuY3Rpb24gcmV2YWxpZGF0ZSgpIHtcbiAgICBpbnRlcnJ1cHRBY3RpdmVMb2FkcygpO1xuICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgIHJldmFsaWRhdGlvbjogXCJsb2FkaW5nXCJcbiAgICB9KTtcbiAgICAvLyBJZiB3ZSdyZSBjdXJyZW50bHkgc3VibWl0dGluZyBhbiBhY3Rpb24sIHdlIGRvbid0IG5lZWQgdG8gc3RhcnQgYSBuZXdcbiAgICAvLyBuYXZpZ2F0aW9uLCB3ZSdsbCBqdXN0IGxldCB0aGUgZm9sbG93IHVwIGxvYWRlciBleGVjdXRpb24gY2FsbCBhbGwgbG9hZGVyc1xuICAgIGlmIChzdGF0ZS5uYXZpZ2F0aW9uLnN0YXRlID09PSBcInN1Ym1pdHRpbmdcIikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBJZiB3ZSdyZSBjdXJyZW50bHkgaW4gYW4gaWRsZSBzdGF0ZSwgc3RhcnQgYSBuZXcgbmF2aWdhdGlvbiBmb3IgdGhlIGN1cnJlbnRcbiAgICAvLyBhY3Rpb24vbG9jYXRpb24gYW5kIG1hcmsgaXQgYXMgdW5pbnRlcnJ1cHRlZCwgd2hpY2ggd2lsbCBza2lwIHRoZSBoaXN0b3J5XG4gICAgLy8gdXBkYXRlIGluIGNvbXBsZXRlTmF2aWdhdGlvblxuICAgIGlmIChzdGF0ZS5uYXZpZ2F0aW9uLnN0YXRlID09PSBcImlkbGVcIikge1xuICAgICAgc3RhcnROYXZpZ2F0aW9uKHN0YXRlLmhpc3RvcnlBY3Rpb24sIHN0YXRlLmxvY2F0aW9uLCB7XG4gICAgICAgIHN0YXJ0VW5pbnRlcnJ1cHRlZFJldmFsaWRhdGlvbjogdHJ1ZVxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIE90aGVyd2lzZSwgaWYgd2UncmUgY3VycmVudGx5IGluIGEgbG9hZGluZyBzdGF0ZSwganVzdCBzdGFydCBhIG5ld1xuICAgIC8vIG5hdmlnYXRpb24gdG8gdGhlIG5hdmlnYXRpb24ubG9jYXRpb24gYnV0IGRvIG5vdCB0cmlnZ2VyIGFuIHVuaW50ZXJydXB0ZWRcbiAgICAvLyByZXZhbGlkYXRpb24gc28gdGhhdCBoaXN0b3J5IGNvcnJlY3RseSB1cGRhdGVzIG9uY2UgdGhlIG5hdmlnYXRpb24gY29tcGxldGVzXG4gICAgc3RhcnROYXZpZ2F0aW9uKHBlbmRpbmdBY3Rpb24gfHwgc3RhdGUuaGlzdG9yeUFjdGlvbiwgc3RhdGUubmF2aWdhdGlvbi5sb2NhdGlvbiwge1xuICAgICAgb3ZlcnJpZGVOYXZpZ2F0aW9uOiBzdGF0ZS5uYXZpZ2F0aW9uXG4gICAgfSk7XG4gIH1cbiAgLy8gU3RhcnQgYSBuYXZpZ2F0aW9uIHRvIHRoZSBnaXZlbiBhY3Rpb24vbG9jYXRpb24uICBDYW4gb3B0aW9uYWxseSBwcm92aWRlIGFcbiAgLy8gb3ZlcnJpZGVOYXZpZ2F0aW9uIHdoaWNoIHdpbGwgb3ZlcnJpZGUgdGhlIG5vcm1hbExvYWQgaW4gdGhlIGNhc2Ugb2YgYSByZWRpcmVjdFxuICAvLyBuYXZpZ2F0aW9uXG4gIGFzeW5jIGZ1bmN0aW9uIHN0YXJ0TmF2aWdhdGlvbihoaXN0b3J5QWN0aW9uLCBsb2NhdGlvbiwgb3B0cykge1xuICAgIC8vIEFib3J0IGFueSBpbi1wcm9ncmVzcyBuYXZpZ2F0aW9ucyBhbmQgc3RhcnQgYSBuZXcgb25lLiBVbnNldCBhbnkgb25nb2luZ1xuICAgIC8vIHVuaW50ZXJydXB0ZWQgcmV2YWxpZGF0aW9ucyB1bmxlc3MgdG9sZCBvdGhlcndpc2UsIHNpbmNlIHdlIHdhbnQgdGhpc1xuICAgIC8vIG5ldyBuYXZpZ2F0aW9uIHRvIHVwZGF0ZSBoaXN0b3J5IG5vcm1hbGx5XG4gICAgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyICYmIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlci5hYm9ydCgpO1xuICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciA9IG51bGw7XG4gICAgcGVuZGluZ0FjdGlvbiA9IGhpc3RvcnlBY3Rpb247XG4gICAgaXNVbmludGVycnVwdGVkUmV2YWxpZGF0aW9uID0gKG9wdHMgJiYgb3B0cy5zdGFydFVuaW50ZXJydXB0ZWRSZXZhbGlkYXRpb24pID09PSB0cnVlO1xuICAgIC8vIFNhdmUgdGhlIGN1cnJlbnQgc2Nyb2xsIHBvc2l0aW9uIGV2ZXJ5IHRpbWUgd2Ugc3RhcnQgYSBuZXcgbmF2aWdhdGlvbixcbiAgICAvLyBhbmQgdHJhY2sgd2hldGhlciB3ZSBzaG91bGQgcmVzZXQgc2Nyb2xsIG9uIGNvbXBsZXRpb25cbiAgICBzYXZlU2Nyb2xsUG9zaXRpb24oc3RhdGUubG9jYXRpb24sIHN0YXRlLm1hdGNoZXMpO1xuICAgIHBlbmRpbmdQcmV2ZW50U2Nyb2xsUmVzZXQgPSAob3B0cyAmJiBvcHRzLnByZXZlbnRTY3JvbGxSZXNldCkgPT09IHRydWU7XG4gICAgcGVuZGluZ1ZpZXdUcmFuc2l0aW9uRW5hYmxlZCA9IChvcHRzICYmIG9wdHMuZW5hYmxlVmlld1RyYW5zaXRpb24pID09PSB0cnVlO1xuICAgIGxldCByb3V0ZXNUb1VzZSA9IGluRmxpZ2h0RGF0YVJvdXRlcyB8fCBkYXRhUm91dGVzO1xuICAgIGxldCBsb2FkaW5nTmF2aWdhdGlvbiA9IG9wdHMgJiYgb3B0cy5vdmVycmlkZU5hdmlnYXRpb247XG4gICAgbGV0IG1hdGNoZXMgPSBtYXRjaFJvdXRlcyhyb3V0ZXNUb1VzZSwgbG9jYXRpb24sIGJhc2VuYW1lKTtcbiAgICBsZXQgZmx1c2hTeW5jID0gKG9wdHMgJiYgb3B0cy5mbHVzaFN5bmMpID09PSB0cnVlO1xuICAgIC8vIFNob3J0IGNpcmN1aXQgd2l0aCBhIDQwNCBvbiB0aGUgcm9vdCBlcnJvciBib3VuZGFyeSBpZiB3ZSBtYXRjaCBub3RoaW5nXG4gICAgaWYgKCFtYXRjaGVzKSB7XG4gICAgICBsZXQgZXJyb3IgPSBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNCwge1xuICAgICAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWVcbiAgICAgIH0pO1xuICAgICAgbGV0IHtcbiAgICAgICAgbWF0Y2hlczogbm90Rm91bmRNYXRjaGVzLFxuICAgICAgICByb3V0ZVxuICAgICAgfSA9IGdldFNob3J0Q2lyY3VpdE1hdGNoZXMocm91dGVzVG9Vc2UpO1xuICAgICAgLy8gQ2FuY2VsIGFsbCBwZW5kaW5nIGRlZmVycmVkIG9uIDQwNHMgc2luY2Ugd2UgZG9uJ3Qga2VlcCBhbnkgcm91dGVzXG4gICAgICBjYW5jZWxBY3RpdmVEZWZlcnJlZHMoKTtcbiAgICAgIGNvbXBsZXRlTmF2aWdhdGlvbihsb2NhdGlvbiwge1xuICAgICAgICBtYXRjaGVzOiBub3RGb3VuZE1hdGNoZXMsXG4gICAgICAgIGxvYWRlckRhdGE6IHt9LFxuICAgICAgICBlcnJvcnM6IHtcbiAgICAgICAgICBbcm91dGUuaWRdOiBlcnJvclxuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGZsdXNoU3luY1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIFNob3J0IGNpcmN1aXQgaWYgaXQncyBvbmx5IGEgaGFzaCBjaGFuZ2UgYW5kIG5vdCBhIHJldmFsaWRhdGlvbiBvclxuICAgIC8vIG11dGF0aW9uIHN1Ym1pc3Npb24uXG4gICAgLy9cbiAgICAvLyBJZ25vcmUgb24gaW5pdGlhbCBwYWdlIGxvYWRzIGJlY2F1c2Ugc2luY2UgdGhlIGluaXRpYWwgbG9hZCB3aWxsIGFsd2F5c1xuICAgIC8vIGJlIFwic2FtZSBoYXNoXCIuICBGb3IgZXhhbXBsZSwgb24gL3BhZ2UjaGFzaCBhbmQgc3VibWl0IGEgPEZvcm0gbWV0aG9kPVwicG9zdFwiPlxuICAgIC8vIHdoaWNoIHdpbGwgZGVmYXVsdCB0byBhIG5hdmlnYXRpb24gdG8gL3BhZ2VcbiAgICBpZiAoc3RhdGUuaW5pdGlhbGl6ZWQgJiYgIWlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgJiYgaXNIYXNoQ2hhbmdlT25seShzdGF0ZS5sb2NhdGlvbiwgbG9jYXRpb24pICYmICEob3B0cyAmJiBvcHRzLnN1Ym1pc3Npb24gJiYgaXNNdXRhdGlvbk1ldGhvZChvcHRzLnN1Ym1pc3Npb24uZm9ybU1ldGhvZCkpKSB7XG4gICAgICBjb21wbGV0ZU5hdmlnYXRpb24obG9jYXRpb24sIHtcbiAgICAgICAgbWF0Y2hlc1xuICAgICAgfSwge1xuICAgICAgICBmbHVzaFN5bmNcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBDcmVhdGUgYSBjb250cm9sbGVyL1JlcXVlc3QgZm9yIHRoaXMgbmF2aWdhdGlvblxuICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAgICBsZXQgcmVxdWVzdCA9IGNyZWF0ZUNsaWVudFNpZGVSZXF1ZXN0KGluaXQuaGlzdG9yeSwgbG9jYXRpb24sIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlci5zaWduYWwsIG9wdHMgJiYgb3B0cy5zdWJtaXNzaW9uKTtcbiAgICBsZXQgcGVuZGluZ0FjdGlvblJlc3VsdDtcbiAgICBpZiAob3B0cyAmJiBvcHRzLnBlbmRpbmdFcnJvcikge1xuICAgICAgLy8gSWYgd2UgaGF2ZSBhIHBlbmRpbmdFcnJvciwgaXQgbWVhbnMgdGhlIHVzZXIgYXR0ZW1wdGVkIGEgR0VUIHN1Ym1pc3Npb25cbiAgICAgIC8vIHdpdGggYmluYXJ5IEZvcm1EYXRhIHNvIGFzc2lnbiBoZXJlIGFuZCBza2lwIHRvIGhhbmRsZUxvYWRlcnMuICBUaGF0XG4gICAgICAvLyB3YXkgd2UgaGFuZGxlIGNhbGxpbmcgbG9hZGVycyBhYm92ZSB0aGUgYm91bmRhcnkgZXRjLiAgSXQncyBub3QgcmVhbGx5XG4gICAgICAvLyBkaWZmZXJlbnQgZnJvbSBhbiBhY3Rpb25FcnJvciBpbiB0aGF0IHNlbnNlLlxuICAgICAgcGVuZGluZ0FjdGlvblJlc3VsdCA9IFtmaW5kTmVhcmVzdEJvdW5kYXJ5KG1hdGNoZXMpLnJvdXRlLmlkLCB7XG4gICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZXJyb3IsXG4gICAgICAgIGVycm9yOiBvcHRzLnBlbmRpbmdFcnJvclxuICAgICAgfV07XG4gICAgfSBlbHNlIGlmIChvcHRzICYmIG9wdHMuc3VibWlzc2lvbiAmJiBpc011dGF0aW9uTWV0aG9kKG9wdHMuc3VibWlzc2lvbi5mb3JtTWV0aG9kKSkge1xuICAgICAgLy8gQ2FsbCBhY3Rpb24gaWYgd2UgcmVjZWl2ZWQgYW4gYWN0aW9uIHN1Ym1pc3Npb25cbiAgICAgIGxldCBhY3Rpb25SZXN1bHQgPSBhd2FpdCBoYW5kbGVBY3Rpb24ocmVxdWVzdCwgbG9jYXRpb24sIG9wdHMuc3VibWlzc2lvbiwgbWF0Y2hlcywge1xuICAgICAgICByZXBsYWNlOiBvcHRzLnJlcGxhY2UsXG4gICAgICAgIGZsdXNoU3luY1xuICAgICAgfSk7XG4gICAgICBpZiAoYWN0aW9uUmVzdWx0LnNob3J0Q2lyY3VpdGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHBlbmRpbmdBY3Rpb25SZXN1bHQgPSBhY3Rpb25SZXN1bHQucGVuZGluZ0FjdGlvblJlc3VsdDtcbiAgICAgIGxvYWRpbmdOYXZpZ2F0aW9uID0gZ2V0TG9hZGluZ05hdmlnYXRpb24obG9jYXRpb24sIG9wdHMuc3VibWlzc2lvbik7XG4gICAgICBmbHVzaFN5bmMgPSBmYWxzZTtcbiAgICAgIC8vIENyZWF0ZSBhIEdFVCByZXF1ZXN0IGZvciB0aGUgbG9hZGVyc1xuICAgICAgcmVxdWVzdCA9IGNyZWF0ZUNsaWVudFNpZGVSZXF1ZXN0KGluaXQuaGlzdG9yeSwgcmVxdWVzdC51cmwsIHJlcXVlc3Quc2lnbmFsKTtcbiAgICB9XG4gICAgLy8gQ2FsbCBsb2FkZXJzXG4gICAgbGV0IHtcbiAgICAgIHNob3J0Q2lyY3VpdGVkLFxuICAgICAgbG9hZGVyRGF0YSxcbiAgICAgIGVycm9yc1xuICAgIH0gPSBhd2FpdCBoYW5kbGVMb2FkZXJzKHJlcXVlc3QsIGxvY2F0aW9uLCBtYXRjaGVzLCBsb2FkaW5nTmF2aWdhdGlvbiwgb3B0cyAmJiBvcHRzLnN1Ym1pc3Npb24sIG9wdHMgJiYgb3B0cy5mZXRjaGVyU3VibWlzc2lvbiwgb3B0cyAmJiBvcHRzLnJlcGxhY2UsIG9wdHMgJiYgb3B0cy5pbml0aWFsSHlkcmF0aW9uID09PSB0cnVlLCBmbHVzaFN5bmMsIHBlbmRpbmdBY3Rpb25SZXN1bHQpO1xuICAgIGlmIChzaG9ydENpcmN1aXRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBDbGVhbiB1cCBub3cgdGhhdCB0aGUgYWN0aW9uL2xvYWRlcnMgaGF2ZSBjb21wbGV0ZWQuICBEb24ndCBjbGVhbiB1cCBpZlxuICAgIC8vIHdlIHNob3J0IGNpcmN1aXRlZCBiZWNhdXNlIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciB3aWxsIGhhdmUgYWxyZWFkeVxuICAgIC8vIGJlZW4gYXNzaWduZWQgdG8gYSBuZXcgY29udHJvbGxlciBmb3IgdGhlIG5leHQgbmF2aWdhdGlvblxuICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciA9IG51bGw7XG4gICAgY29tcGxldGVOYXZpZ2F0aW9uKGxvY2F0aW9uLCBfZXh0ZW5kcyh7XG4gICAgICBtYXRjaGVzXG4gICAgfSwgZ2V0QWN0aW9uRGF0YUZvckNvbW1pdChwZW5kaW5nQWN0aW9uUmVzdWx0KSwge1xuICAgICAgbG9hZGVyRGF0YSxcbiAgICAgIGVycm9yc1xuICAgIH0pKTtcbiAgfVxuICAvLyBDYWxsIHRoZSBhY3Rpb24gbWF0Y2hlZCBieSB0aGUgbGVhZiByb3V0ZSBmb3IgdGhpcyBuYXZpZ2F0aW9uIGFuZCBoYW5kbGVcbiAgLy8gcmVkaXJlY3RzL2Vycm9yc1xuICBhc3luYyBmdW5jdGlvbiBoYW5kbGVBY3Rpb24ocmVxdWVzdCwgbG9jYXRpb24sIHN1Ym1pc3Npb24sIG1hdGNoZXMsIG9wdHMpIHtcbiAgICBpZiAob3B0cyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRzID0ge307XG4gICAgfVxuICAgIGludGVycnVwdEFjdGl2ZUxvYWRzKCk7XG4gICAgLy8gUHV0IHVzIGluIGEgc3VibWl0dGluZyBzdGF0ZVxuICAgIGxldCBuYXZpZ2F0aW9uID0gZ2V0U3VibWl0dGluZ05hdmlnYXRpb24obG9jYXRpb24sIHN1Ym1pc3Npb24pO1xuICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgIG5hdmlnYXRpb25cbiAgICB9LCB7XG4gICAgICBmbHVzaFN5bmM6IG9wdHMuZmx1c2hTeW5jID09PSB0cnVlXG4gICAgfSk7XG4gICAgLy8gQ2FsbCBvdXIgYWN0aW9uIGFuZCBnZXQgdGhlIHJlc3VsdFxuICAgIGxldCByZXN1bHQ7XG4gICAgbGV0IGFjdGlvbk1hdGNoID0gZ2V0VGFyZ2V0TWF0Y2gobWF0Y2hlcywgbG9jYXRpb24pO1xuICAgIGlmICghYWN0aW9uTWF0Y2gucm91dGUuYWN0aW9uICYmICFhY3Rpb25NYXRjaC5yb3V0ZS5sYXp5KSB7XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZXJyb3IsXG4gICAgICAgIGVycm9yOiBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNSwge1xuICAgICAgICAgIG1ldGhvZDogcmVxdWVzdC5tZXRob2QsXG4gICAgICAgICAgcGF0aG5hbWU6IGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgICAgIHJvdXRlSWQ6IGFjdGlvbk1hdGNoLnJvdXRlLmlkXG4gICAgICAgIH0pXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgcmVzdWx0cyA9IGF3YWl0IGNhbGxEYXRhU3RyYXRlZ3koXCJhY3Rpb25cIiwgcmVxdWVzdCwgW2FjdGlvbk1hdGNoXSwgbWF0Y2hlcyk7XG4gICAgICByZXN1bHQgPSByZXN1bHRzWzBdO1xuICAgICAgaWYgKHJlcXVlc3Quc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzaG9ydENpcmN1aXRlZDogdHJ1ZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNSZWRpcmVjdFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICBsZXQgcmVwbGFjZTtcbiAgICAgIGlmIChvcHRzICYmIG9wdHMucmVwbGFjZSAhPSBudWxsKSB7XG4gICAgICAgIHJlcGxhY2UgPSBvcHRzLnJlcGxhY2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBJZiB0aGUgdXNlciBkaWRuJ3QgZXhwbGljaXR5IGluZGljYXRlIHJlcGxhY2UgYmVoYXZpb3IsIHJlcGxhY2UgaWZcbiAgICAgICAgLy8gd2UgcmVkaXJlY3RlZCB0byB0aGUgZXhhY3Qgc2FtZSBsb2NhdGlvbiB3ZSdyZSBjdXJyZW50bHkgYXQgdG8gYXZvaWRcbiAgICAgICAgLy8gZG91YmxlIGJhY2stYnV0dG9uc1xuICAgICAgICBsZXQgbG9jYXRpb24gPSBub3JtYWxpemVSZWRpcmVjdExvY2F0aW9uKHJlc3VsdC5yZXNwb25zZS5oZWFkZXJzLmdldChcIkxvY2F0aW9uXCIpLCBuZXcgVVJMKHJlcXVlc3QudXJsKSwgYmFzZW5hbWUpO1xuICAgICAgICByZXBsYWNlID0gbG9jYXRpb24gPT09IHN0YXRlLmxvY2F0aW9uLnBhdGhuYW1lICsgc3RhdGUubG9jYXRpb24uc2VhcmNoO1xuICAgICAgfVxuICAgICAgYXdhaXQgc3RhcnRSZWRpcmVjdE5hdmlnYXRpb24ocmVxdWVzdCwgcmVzdWx0LCB7XG4gICAgICAgIHN1Ym1pc3Npb24sXG4gICAgICAgIHJlcGxhY2VcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc2hvcnRDaXJjdWl0ZWQ6IHRydWVcbiAgICAgIH07XG4gICAgfVxuICAgIGlmIChpc0RlZmVycmVkUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIHRocm93IGdldEludGVybmFsUm91dGVyRXJyb3IoNDAwLCB7XG4gICAgICAgIHR5cGU6IFwiZGVmZXItYWN0aW9uXCJcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoaXNFcnJvclJlc3VsdChyZXN1bHQpKSB7XG4gICAgICAvLyBTdG9yZSBvZmYgdGhlIHBlbmRpbmcgZXJyb3IgLSB3ZSB1c2UgaXQgdG8gZGV0ZXJtaW5lIHdoaWNoIGxvYWRlcnNcbiAgICAgIC8vIHRvIGNhbGwgYW5kIHdpbGwgY29tbWl0IGl0IHdoZW4gd2UgY29tcGxldGUgdGhlIG5hdmlnYXRpb25cbiAgICAgIGxldCBib3VuZGFyeU1hdGNoID0gZmluZE5lYXJlc3RCb3VuZGFyeShtYXRjaGVzLCBhY3Rpb25NYXRjaC5yb3V0ZS5pZCk7XG4gICAgICAvLyBCeSBkZWZhdWx0LCBhbGwgc3VibWlzc2lvbnMgYXJlIFJFUExBQ0UgbmF2aWdhdGlvbnMsIGJ1dCBpZiB0aGVcbiAgICAgIC8vIGFjdGlvbiB0aHJldyBhbiBlcnJvciB0aGF0J2xsIGJlIHJlbmRlcmVkIGluIGFuIGVycm9yRWxlbWVudCwgd2UgZmFsbFxuICAgICAgLy8gYmFjayB0byBQVVNIIHNvIHRoYXQgdGhlIHVzZXIgY2FuIHVzZSB0aGUgYmFjayBidXR0b24gdG8gZ2V0IGJhY2sgdG9cbiAgICAgIC8vIHRoZSBwcmUtc3VibWlzc2lvbiBmb3JtIGxvY2F0aW9uIHRvIHRyeSBhZ2FpblxuICAgICAgaWYgKChvcHRzICYmIG9wdHMucmVwbGFjZSkgIT09IHRydWUpIHtcbiAgICAgICAgcGVuZGluZ0FjdGlvbiA9IEFjdGlvbi5QdXNoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGVuZGluZ0FjdGlvblJlc3VsdDogW2JvdW5kYXJ5TWF0Y2gucm91dGUuaWQsIHJlc3VsdF1cbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBwZW5kaW5nQWN0aW9uUmVzdWx0OiBbYWN0aW9uTWF0Y2gucm91dGUuaWQsIHJlc3VsdF1cbiAgICB9O1xuICB9XG4gIC8vIENhbGwgYWxsIGFwcGxpY2FibGUgbG9hZGVycyBmb3IgdGhlIGdpdmVuIG1hdGNoZXMsIGhhbmRsaW5nIHJlZGlyZWN0cyxcbiAgLy8gZXJyb3JzLCBldGMuXG4gIGFzeW5jIGZ1bmN0aW9uIGhhbmRsZUxvYWRlcnMocmVxdWVzdCwgbG9jYXRpb24sIG1hdGNoZXMsIG92ZXJyaWRlTmF2aWdhdGlvbiwgc3VibWlzc2lvbiwgZmV0Y2hlclN1Ym1pc3Npb24sIHJlcGxhY2UsIGluaXRpYWxIeWRyYXRpb24sIGZsdXNoU3luYywgcGVuZGluZ0FjdGlvblJlc3VsdCkge1xuICAgIC8vIEZpZ3VyZSBvdXQgdGhlIHJpZ2h0IG5hdmlnYXRpb24gd2Ugd2FudCB0byB1c2UgZm9yIGRhdGEgbG9hZGluZ1xuICAgIGxldCBsb2FkaW5nTmF2aWdhdGlvbiA9IG92ZXJyaWRlTmF2aWdhdGlvbiB8fCBnZXRMb2FkaW5nTmF2aWdhdGlvbihsb2NhdGlvbiwgc3VibWlzc2lvbik7XG4gICAgLy8gSWYgdGhpcyB3YXMgYSByZWRpcmVjdCBmcm9tIGFuIGFjdGlvbiB3ZSBkb24ndCBoYXZlIGEgXCJzdWJtaXNzaW9uXCIgYnV0XG4gICAgLy8gd2UgaGF2ZSBpdCBvbiB0aGUgbG9hZGluZyBuYXZpZ2F0aW9uIHNvIHVzZSB0aGF0IGlmIGF2YWlsYWJsZVxuICAgIGxldCBhY3RpdmVTdWJtaXNzaW9uID0gc3VibWlzc2lvbiB8fCBmZXRjaGVyU3VibWlzc2lvbiB8fCBnZXRTdWJtaXNzaW9uRnJvbU5hdmlnYXRpb24obG9hZGluZ05hdmlnYXRpb24pO1xuICAgIGxldCByb3V0ZXNUb1VzZSA9IGluRmxpZ2h0RGF0YVJvdXRlcyB8fCBkYXRhUm91dGVzO1xuICAgIGxldCBbbWF0Y2hlc1RvTG9hZCwgcmV2YWxpZGF0aW5nRmV0Y2hlcnNdID0gZ2V0TWF0Y2hlc1RvTG9hZChpbml0Lmhpc3RvcnksIHN0YXRlLCBtYXRjaGVzLCBhY3RpdmVTdWJtaXNzaW9uLCBsb2NhdGlvbiwgZnV0dXJlLnY3X3BhcnRpYWxIeWRyYXRpb24gJiYgaW5pdGlhbEh5ZHJhdGlvbiA9PT0gdHJ1ZSwgZnV0dXJlLnVuc3RhYmxlX3NraXBBY3Rpb25FcnJvclJldmFsaWRhdGlvbiwgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCwgY2FuY2VsbGVkRGVmZXJyZWRSb3V0ZXMsIGNhbmNlbGxlZEZldGNoZXJMb2FkcywgZGVsZXRlZEZldGNoZXJzLCBmZXRjaExvYWRNYXRjaGVzLCBmZXRjaFJlZGlyZWN0SWRzLCByb3V0ZXNUb1VzZSwgYmFzZW5hbWUsIHBlbmRpbmdBY3Rpb25SZXN1bHQpO1xuICAgIC8vIENhbmNlbCBwZW5kaW5nIGRlZmVycmVkcyBmb3Igbm8tbG9uZ2VyLW1hdGNoZWQgcm91dGVzIG9yIHJvdXRlcyB3ZSdyZVxuICAgIC8vIGFib3V0IHRvIHJlbG9hZC4gIE5vdGUgdGhhdCBpZiB0aGlzIGlzIGFuIGFjdGlvbiByZWxvYWQgd2Ugd291bGQgaGF2ZVxuICAgIC8vIGFscmVhZHkgY2FuY2VsbGVkIGFsbCBwZW5kaW5nIGRlZmVycmVkcyBzbyB0aGlzIHdvdWxkIGJlIGEgbm8tb3BcbiAgICBjYW5jZWxBY3RpdmVEZWZlcnJlZHMocm91dGVJZCA9PiAhKG1hdGNoZXMgJiYgbWF0Y2hlcy5zb21lKG0gPT4gbS5yb3V0ZS5pZCA9PT0gcm91dGVJZCkpIHx8IG1hdGNoZXNUb0xvYWQgJiYgbWF0Y2hlc1RvTG9hZC5zb21lKG0gPT4gbS5yb3V0ZS5pZCA9PT0gcm91dGVJZCkpO1xuICAgIHBlbmRpbmdOYXZpZ2F0aW9uTG9hZElkID0gKytpbmNyZW1lbnRpbmdMb2FkSWQ7XG4gICAgLy8gU2hvcnQgY2lyY3VpdCBpZiB3ZSBoYXZlIG5vIGxvYWRlcnMgdG8gcnVuXG4gICAgaWYgKG1hdGNoZXNUb0xvYWQubGVuZ3RoID09PSAwICYmIHJldmFsaWRhdGluZ0ZldGNoZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgbGV0IHVwZGF0ZWRGZXRjaGVycyA9IG1hcmtGZXRjaFJlZGlyZWN0c0RvbmUoKTtcbiAgICAgIGNvbXBsZXRlTmF2aWdhdGlvbihsb2NhdGlvbiwgX2V4dGVuZHMoe1xuICAgICAgICBtYXRjaGVzLFxuICAgICAgICBsb2FkZXJEYXRhOiB7fSxcbiAgICAgICAgLy8gQ29tbWl0IHBlbmRpbmcgZXJyb3IgaWYgd2UncmUgc2hvcnQgY2lyY3VpdGluZ1xuICAgICAgICBlcnJvcnM6IHBlbmRpbmdBY3Rpb25SZXN1bHQgJiYgaXNFcnJvclJlc3VsdChwZW5kaW5nQWN0aW9uUmVzdWx0WzFdKSA/IHtcbiAgICAgICAgICBbcGVuZGluZ0FjdGlvblJlc3VsdFswXV06IHBlbmRpbmdBY3Rpb25SZXN1bHRbMV0uZXJyb3JcbiAgICAgICAgfSA6IG51bGxcbiAgICAgIH0sIGdldEFjdGlvbkRhdGFGb3JDb21taXQocGVuZGluZ0FjdGlvblJlc3VsdCksIHVwZGF0ZWRGZXRjaGVycyA/IHtcbiAgICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgICB9IDoge30pLCB7XG4gICAgICAgIGZsdXNoU3luY1xuICAgICAgfSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzaG9ydENpcmN1aXRlZDogdHJ1ZVxuICAgICAgfTtcbiAgICB9XG4gICAgLy8gSWYgdGhpcyBpcyBhbiB1bmludGVycnVwdGVkIHJldmFsaWRhdGlvbiwgd2UgcmVtYWluIGluIG91ciBjdXJyZW50IGlkbGVcbiAgICAvLyBzdGF0ZS4gIElmIG5vdCwgd2UgbmVlZCB0byBzd2l0Y2ggdG8gb3VyIGxvYWRpbmcgc3RhdGUgYW5kIGxvYWQgZGF0YSxcbiAgICAvLyBwcmVzZXJ2aW5nIGFueSBuZXcgYWN0aW9uIGRhdGEgb3IgZXhpc3RpbmcgYWN0aW9uIGRhdGEgKGluIHRoZSBjYXNlIG9mXG4gICAgLy8gYSByZXZhbGlkYXRpb24gaW50ZXJydXB0aW5nIGFuIGFjdGlvblJlbG9hZClcbiAgICAvLyBJZiB3ZSBoYXZlIHBhcnRpYWxIeWRyYXRpb24gZW5hYmxlZCwgdGhlbiBkb24ndCB1cGRhdGUgdGhlIHN0YXRlIGZvciB0aGVcbiAgICAvLyBpbml0aWFsIGRhdGEgbG9hZCBzaW5jZSBpdCdzIG5vdCBhIFwibmF2aWdhdGlvblwiXG4gICAgaWYgKCFpc1VuaW50ZXJydXB0ZWRSZXZhbGlkYXRpb24gJiYgKCFmdXR1cmUudjdfcGFydGlhbEh5ZHJhdGlvbiB8fCAhaW5pdGlhbEh5ZHJhdGlvbikpIHtcbiAgICAgIHJldmFsaWRhdGluZ0ZldGNoZXJzLmZvckVhY2gocmYgPT4ge1xuICAgICAgICBsZXQgZmV0Y2hlciA9IHN0YXRlLmZldGNoZXJzLmdldChyZi5rZXkpO1xuICAgICAgICBsZXQgcmV2YWxpZGF0aW5nRmV0Y2hlciA9IGdldExvYWRpbmdGZXRjaGVyKHVuZGVmaW5lZCwgZmV0Y2hlciA/IGZldGNoZXIuZGF0YSA6IHVuZGVmaW5lZCk7XG4gICAgICAgIHN0YXRlLmZldGNoZXJzLnNldChyZi5rZXksIHJldmFsaWRhdGluZ0ZldGNoZXIpO1xuICAgICAgfSk7XG4gICAgICBsZXQgYWN0aW9uRGF0YTtcbiAgICAgIGlmIChwZW5kaW5nQWN0aW9uUmVzdWx0ICYmICFpc0Vycm9yUmVzdWx0KHBlbmRpbmdBY3Rpb25SZXN1bHRbMV0pKSB7XG4gICAgICAgIC8vIFRoaXMgaXMgY2FzdCB0byBgYW55YCBjdXJyZW50bHkgYmVjYXVzZSBgUm91dGVEYXRhYHVzZXMgYW55IGFuZCBpdFxuICAgICAgICAvLyB3b3VsZCBiZSBhIGJyZWFraW5nIGNoYW5nZSB0byB1c2UgYW55LlxuICAgICAgICAvLyBUT0RPOiB2NyAtIGNoYW5nZSBgUm91dGVEYXRhYCB0byB1c2UgYHVua25vd25gIGluc3RlYWQgb2YgYGFueWBcbiAgICAgICAgYWN0aW9uRGF0YSA9IHtcbiAgICAgICAgICBbcGVuZGluZ0FjdGlvblJlc3VsdFswXV06IHBlbmRpbmdBY3Rpb25SZXN1bHRbMV0uZGF0YVxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIGlmIChzdGF0ZS5hY3Rpb25EYXRhKSB7XG4gICAgICAgIGlmIChPYmplY3Qua2V5cyhzdGF0ZS5hY3Rpb25EYXRhKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBhY3Rpb25EYXRhID0gbnVsbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhY3Rpb25EYXRhID0gc3RhdGUuYWN0aW9uRGF0YTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdXBkYXRlU3RhdGUoX2V4dGVuZHMoe1xuICAgICAgICBuYXZpZ2F0aW9uOiBsb2FkaW5nTmF2aWdhdGlvblxuICAgICAgfSwgYWN0aW9uRGF0YSAhPT0gdW5kZWZpbmVkID8ge1xuICAgICAgICBhY3Rpb25EYXRhXG4gICAgICB9IDoge30sIHJldmFsaWRhdGluZ0ZldGNoZXJzLmxlbmd0aCA+IDAgPyB7XG4gICAgICAgIGZldGNoZXJzOiBuZXcgTWFwKHN0YXRlLmZldGNoZXJzKVxuICAgICAgfSA6IHt9KSwge1xuICAgICAgICBmbHVzaFN5bmNcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXZhbGlkYXRpbmdGZXRjaGVycy5mb3JFYWNoKHJmID0+IHtcbiAgICAgIGlmIChmZXRjaENvbnRyb2xsZXJzLmhhcyhyZi5rZXkpKSB7XG4gICAgICAgIGFib3J0RmV0Y2hlcihyZi5rZXkpO1xuICAgICAgfVxuICAgICAgaWYgKHJmLmNvbnRyb2xsZXIpIHtcbiAgICAgICAgLy8gRmV0Y2hlcnMgdXNlIGFuIGluZGVwZW5kZW50IEFib3J0Q29udHJvbGxlciBzbyB0aGF0IGFib3J0aW5nIGEgZmV0Y2hlclxuICAgICAgICAvLyAodmlhIGRlbGV0ZUZldGNoZXIpIGRvZXMgbm90IGFib3J0IHRoZSB0cmlnZ2VyaW5nIG5hdmlnYXRpb24gdGhhdFxuICAgICAgICAvLyB0cmlnZ2VyZWQgdGhlIHJldmFsaWRhdGlvblxuICAgICAgICBmZXRjaENvbnRyb2xsZXJzLnNldChyZi5rZXksIHJmLmNvbnRyb2xsZXIpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIC8vIFByb3h5IG5hdmlnYXRpb24gYWJvcnQgdGhyb3VnaCB0byByZXZhbGlkYXRpb24gZmV0Y2hlcnNcbiAgICBsZXQgYWJvcnRQZW5kaW5nRmV0Y2hSZXZhbGlkYXRpb25zID0gKCkgPT4gcmV2YWxpZGF0aW5nRmV0Y2hlcnMuZm9yRWFjaChmID0+IGFib3J0RmV0Y2hlcihmLmtleSkpO1xuICAgIGlmIChwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIpIHtcbiAgICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlci5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIGFib3J0UGVuZGluZ0ZldGNoUmV2YWxpZGF0aW9ucyk7XG4gICAgfVxuICAgIGxldCB7XG4gICAgICBsb2FkZXJSZXN1bHRzLFxuICAgICAgZmV0Y2hlclJlc3VsdHNcbiAgICB9ID0gYXdhaXQgY2FsbExvYWRlcnNBbmRNYXliZVJlc29sdmVEYXRhKHN0YXRlLm1hdGNoZXMsIG1hdGNoZXMsIG1hdGNoZXNUb0xvYWQsIHJldmFsaWRhdGluZ0ZldGNoZXJzLCByZXF1ZXN0KTtcbiAgICBpZiAocmVxdWVzdC5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc2hvcnRDaXJjdWl0ZWQ6IHRydWVcbiAgICAgIH07XG4gICAgfVxuICAgIC8vIENsZWFuIHVwIF9hZnRlcl8gbG9hZGVycyBoYXZlIGNvbXBsZXRlZC4gIERvbid0IGNsZWFuIHVwIGlmIHdlIHNob3J0XG4gICAgLy8gY2lyY3VpdGVkIGJlY2F1c2UgZmV0Y2hDb250cm9sbGVycyB3b3VsZCBoYXZlIGJlZW4gYWJvcnRlZCBhbmRcbiAgICAvLyByZWFzc2lnbmVkIHRvIG5ldyBjb250cm9sbGVycyBmb3IgdGhlIG5leHQgbmF2aWdhdGlvblxuICAgIGlmIChwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIpIHtcbiAgICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlci5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIGFib3J0UGVuZGluZ0ZldGNoUmV2YWxpZGF0aW9ucyk7XG4gICAgfVxuICAgIHJldmFsaWRhdGluZ0ZldGNoZXJzLmZvckVhY2gocmYgPT4gZmV0Y2hDb250cm9sbGVycy5kZWxldGUocmYua2V5KSk7XG4gICAgLy8gSWYgYW55IGxvYWRlcnMgcmV0dXJuZWQgYSByZWRpcmVjdCBSZXNwb25zZSwgc3RhcnQgYSBuZXcgUkVQTEFDRSBuYXZpZ2F0aW9uXG4gICAgbGV0IHJlZGlyZWN0ID0gZmluZFJlZGlyZWN0KFsuLi5sb2FkZXJSZXN1bHRzLCAuLi5mZXRjaGVyUmVzdWx0c10pO1xuICAgIGlmIChyZWRpcmVjdCkge1xuICAgICAgaWYgKHJlZGlyZWN0LmlkeCA+PSBtYXRjaGVzVG9Mb2FkLmxlbmd0aCkge1xuICAgICAgICAvLyBJZiB0aGlzIHJlZGlyZWN0IGNhbWUgZnJvbSBhIGZldGNoZXIgbWFrZSBzdXJlIHdlIG1hcmsgaXQgaW5cbiAgICAgICAgLy8gZmV0Y2hSZWRpcmVjdElkcyBzbyBpdCBkb2Vzbid0IGdldCByZXZhbGlkYXRlZCBvbiB0aGUgbmV4dCBzZXQgb2ZcbiAgICAgICAgLy8gbG9hZGVyIGV4ZWN1dGlvbnNcbiAgICAgICAgbGV0IGZldGNoZXJLZXkgPSByZXZhbGlkYXRpbmdGZXRjaGVyc1tyZWRpcmVjdC5pZHggLSBtYXRjaGVzVG9Mb2FkLmxlbmd0aF0ua2V5O1xuICAgICAgICBmZXRjaFJlZGlyZWN0SWRzLmFkZChmZXRjaGVyS2V5KTtcbiAgICAgIH1cbiAgICAgIGF3YWl0IHN0YXJ0UmVkaXJlY3ROYXZpZ2F0aW9uKHJlcXVlc3QsIHJlZGlyZWN0LnJlc3VsdCwge1xuICAgICAgICByZXBsYWNlXG4gICAgICB9KTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNob3J0Q2lyY3VpdGVkOiB0cnVlXG4gICAgICB9O1xuICAgIH1cbiAgICAvLyBQcm9jZXNzIGFuZCBjb21taXQgb3V0cHV0IGZyb20gbG9hZGVyc1xuICAgIGxldCB7XG4gICAgICBsb2FkZXJEYXRhLFxuICAgICAgZXJyb3JzXG4gICAgfSA9IHByb2Nlc3NMb2FkZXJEYXRhKHN0YXRlLCBtYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCBsb2FkZXJSZXN1bHRzLCBwZW5kaW5nQWN0aW9uUmVzdWx0LCByZXZhbGlkYXRpbmdGZXRjaGVycywgZmV0Y2hlclJlc3VsdHMsIGFjdGl2ZURlZmVycmVkcyk7XG4gICAgLy8gV2lyZSB1cCBzdWJzY3JpYmVycyB0byB1cGRhdGUgbG9hZGVyRGF0YSBhcyBwcm9taXNlcyBzZXR0bGVcbiAgICBhY3RpdmVEZWZlcnJlZHMuZm9yRWFjaCgoZGVmZXJyZWREYXRhLCByb3V0ZUlkKSA9PiB7XG4gICAgICBkZWZlcnJlZERhdGEuc3Vic2NyaWJlKGFib3J0ZWQgPT4ge1xuICAgICAgICAvLyBOb3RlOiBObyBuZWVkIHRvIHVwZGF0ZVN0YXRlIGhlcmUgc2luY2UgdGhlIFRyYWNrZWRQcm9taXNlIG9uXG4gICAgICAgIC8vIGxvYWRlckRhdGEgaXMgc3RhYmxlIGFjcm9zcyByZXNvbHZlL3JlamVjdFxuICAgICAgICAvLyBSZW1vdmUgdGhpcyBpbnN0YW5jZSBpZiB3ZSB3ZXJlIGFib3J0ZWQgb3IgaWYgcHJvbWlzZXMgaGF2ZSBzZXR0bGVkXG4gICAgICAgIGlmIChhYm9ydGVkIHx8IGRlZmVycmVkRGF0YS5kb25lKSB7XG4gICAgICAgICAgYWN0aXZlRGVmZXJyZWRzLmRlbGV0ZShyb3V0ZUlkKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgLy8gRHVyaW5nIHBhcnRpYWwgaHlkcmF0aW9uLCBwcmVzZXJ2ZSBTU1IgZXJyb3JzIGZvciByb3V0ZXMgdGhhdCBkb24ndCByZS1ydW5cbiAgICBpZiAoZnV0dXJlLnY3X3BhcnRpYWxIeWRyYXRpb24gJiYgaW5pdGlhbEh5ZHJhdGlvbiAmJiBzdGF0ZS5lcnJvcnMpIHtcbiAgICAgIE9iamVjdC5lbnRyaWVzKHN0YXRlLmVycm9ycykuZmlsdGVyKF9yZWYyID0+IHtcbiAgICAgICAgbGV0IFtpZF0gPSBfcmVmMjtcbiAgICAgICAgcmV0dXJuICFtYXRjaGVzVG9Mb2FkLnNvbWUobSA9PiBtLnJvdXRlLmlkID09PSBpZCk7XG4gICAgICB9KS5mb3JFYWNoKF9yZWYzID0+IHtcbiAgICAgICAgbGV0IFtyb3V0ZUlkLCBlcnJvcl0gPSBfcmVmMztcbiAgICAgICAgZXJyb3JzID0gT2JqZWN0LmFzc2lnbihlcnJvcnMgfHwge30sIHtcbiAgICAgICAgICBbcm91dGVJZF06IGVycm9yXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGxldCB1cGRhdGVkRmV0Y2hlcnMgPSBtYXJrRmV0Y2hSZWRpcmVjdHNEb25lKCk7XG4gICAgbGV0IGRpZEFib3J0RmV0Y2hMb2FkcyA9IGFib3J0U3RhbGVGZXRjaExvYWRzKHBlbmRpbmdOYXZpZ2F0aW9uTG9hZElkKTtcbiAgICBsZXQgc2hvdWxkVXBkYXRlRmV0Y2hlcnMgPSB1cGRhdGVkRmV0Y2hlcnMgfHwgZGlkQWJvcnRGZXRjaExvYWRzIHx8IHJldmFsaWRhdGluZ0ZldGNoZXJzLmxlbmd0aCA+IDA7XG4gICAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAgIGxvYWRlckRhdGEsXG4gICAgICBlcnJvcnNcbiAgICB9LCBzaG91bGRVcGRhdGVGZXRjaGVycyA/IHtcbiAgICAgIGZldGNoZXJzOiBuZXcgTWFwKHN0YXRlLmZldGNoZXJzKVxuICAgIH0gOiB7fSk7XG4gIH1cbiAgLy8gVHJpZ2dlciBhIGZldGNoZXIgbG9hZC9zdWJtaXQgZm9yIHRoZSBnaXZlbiBmZXRjaGVyIGtleVxuICBmdW5jdGlvbiBmZXRjaChrZXksIHJvdXRlSWQsIGhyZWYsIG9wdHMpIHtcbiAgICBpZiAoaXNTZXJ2ZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcInJvdXRlci5mZXRjaCgpIHdhcyBjYWxsZWQgZHVyaW5nIHRoZSBzZXJ2ZXIgcmVuZGVyLCBidXQgaXQgc2hvdWxkbid0IGJlLiBcIiArIFwiWW91IGFyZSBsaWtlbHkgY2FsbGluZyBhIHVzZUZldGNoZXIoKSBtZXRob2QgaW4gdGhlIGJvZHkgb2YgeW91ciBjb21wb25lbnQuIFwiICsgXCJUcnkgbW92aW5nIGl0IHRvIGEgdXNlRWZmZWN0IG9yIGEgY2FsbGJhY2suXCIpO1xuICAgIH1cbiAgICBpZiAoZmV0Y2hDb250cm9sbGVycy5oYXMoa2V5KSkgYWJvcnRGZXRjaGVyKGtleSk7XG4gICAgbGV0IGZsdXNoU3luYyA9IChvcHRzICYmIG9wdHMudW5zdGFibGVfZmx1c2hTeW5jKSA9PT0gdHJ1ZTtcbiAgICBsZXQgcm91dGVzVG9Vc2UgPSBpbkZsaWdodERhdGFSb3V0ZXMgfHwgZGF0YVJvdXRlcztcbiAgICBsZXQgbm9ybWFsaXplZFBhdGggPSBub3JtYWxpemVUbyhzdGF0ZS5sb2NhdGlvbiwgc3RhdGUubWF0Y2hlcywgYmFzZW5hbWUsIGZ1dHVyZS52N19wcmVwZW5kQmFzZW5hbWUsIGhyZWYsIGZ1dHVyZS52N19yZWxhdGl2ZVNwbGF0UGF0aCwgcm91dGVJZCwgb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5yZWxhdGl2ZSk7XG4gICAgbGV0IG1hdGNoZXMgPSBtYXRjaFJvdXRlcyhyb3V0ZXNUb1VzZSwgbm9ybWFsaXplZFBhdGgsIGJhc2VuYW1lKTtcbiAgICBpZiAoIW1hdGNoZXMpIHtcbiAgICAgIHNldEZldGNoZXJFcnJvcihrZXksIHJvdXRlSWQsIGdldEludGVybmFsUm91dGVyRXJyb3IoNDA0LCB7XG4gICAgICAgIHBhdGhuYW1lOiBub3JtYWxpemVkUGF0aFxuICAgICAgfSksIHtcbiAgICAgICAgZmx1c2hTeW5jXG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IHtcbiAgICAgIHBhdGgsXG4gICAgICBzdWJtaXNzaW9uLFxuICAgICAgZXJyb3JcbiAgICB9ID0gbm9ybWFsaXplTmF2aWdhdGVPcHRpb25zKGZ1dHVyZS52N19ub3JtYWxpemVGb3JtTWV0aG9kLCB0cnVlLCBub3JtYWxpemVkUGF0aCwgb3B0cyk7XG4gICAgaWYgKGVycm9yKSB7XG4gICAgICBzZXRGZXRjaGVyRXJyb3Ioa2V5LCByb3V0ZUlkLCBlcnJvciwge1xuICAgICAgICBmbHVzaFN5bmNcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgbWF0Y2ggPSBnZXRUYXJnZXRNYXRjaChtYXRjaGVzLCBwYXRoKTtcbiAgICBwZW5kaW5nUHJldmVudFNjcm9sbFJlc2V0ID0gKG9wdHMgJiYgb3B0cy5wcmV2ZW50U2Nyb2xsUmVzZXQpID09PSB0cnVlO1xuICAgIGlmIChzdWJtaXNzaW9uICYmIGlzTXV0YXRpb25NZXRob2Qoc3VibWlzc2lvbi5mb3JtTWV0aG9kKSkge1xuICAgICAgaGFuZGxlRmV0Y2hlckFjdGlvbihrZXksIHJvdXRlSWQsIHBhdGgsIG1hdGNoLCBtYXRjaGVzLCBmbHVzaFN5bmMsIHN1Ym1pc3Npb24pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBTdG9yZSBvZmYgdGhlIG1hdGNoIHNvIHdlIGNhbiBjYWxsIGl0J3Mgc2hvdWxkUmV2YWxpZGF0ZSBvbiBzdWJzZXF1ZW50XG4gICAgLy8gcmV2YWxpZGF0aW9uc1xuICAgIGZldGNoTG9hZE1hdGNoZXMuc2V0KGtleSwge1xuICAgICAgcm91dGVJZCxcbiAgICAgIHBhdGhcbiAgICB9KTtcbiAgICBoYW5kbGVGZXRjaGVyTG9hZGVyKGtleSwgcm91dGVJZCwgcGF0aCwgbWF0Y2gsIG1hdGNoZXMsIGZsdXNoU3luYywgc3VibWlzc2lvbik7XG4gIH1cbiAgLy8gQ2FsbCB0aGUgYWN0aW9uIGZvciB0aGUgbWF0Y2hlZCBmZXRjaGVyLnN1Ym1pdCgpLCBhbmQgdGhlbiBoYW5kbGUgcmVkaXJlY3RzLFxuICAvLyBlcnJvcnMsIGFuZCByZXZhbGlkYXRpb25cbiAgYXN5bmMgZnVuY3Rpb24gaGFuZGxlRmV0Y2hlckFjdGlvbihrZXksIHJvdXRlSWQsIHBhdGgsIG1hdGNoLCByZXF1ZXN0TWF0Y2hlcywgZmx1c2hTeW5jLCBzdWJtaXNzaW9uKSB7XG4gICAgaW50ZXJydXB0QWN0aXZlTG9hZHMoKTtcbiAgICBmZXRjaExvYWRNYXRjaGVzLmRlbGV0ZShrZXkpO1xuICAgIGlmICghbWF0Y2gucm91dGUuYWN0aW9uICYmICFtYXRjaC5yb3V0ZS5sYXp5KSB7XG4gICAgICBsZXQgZXJyb3IgPSBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNSwge1xuICAgICAgICBtZXRob2Q6IHN1Ym1pc3Npb24uZm9ybU1ldGhvZCxcbiAgICAgICAgcGF0aG5hbWU6IHBhdGgsXG4gICAgICAgIHJvdXRlSWQ6IHJvdXRlSWRcbiAgICAgIH0pO1xuICAgICAgc2V0RmV0Y2hlckVycm9yKGtleSwgcm91dGVJZCwgZXJyb3IsIHtcbiAgICAgICAgZmx1c2hTeW5jXG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gUHV0IHRoaXMgZmV0Y2hlciBpbnRvIGl0J3Mgc3VibWl0dGluZyBzdGF0ZVxuICAgIGxldCBleGlzdGluZ0ZldGNoZXIgPSBzdGF0ZS5mZXRjaGVycy5nZXQoa2V5KTtcbiAgICB1cGRhdGVGZXRjaGVyU3RhdGUoa2V5LCBnZXRTdWJtaXR0aW5nRmV0Y2hlcihzdWJtaXNzaW9uLCBleGlzdGluZ0ZldGNoZXIpLCB7XG4gICAgICBmbHVzaFN5bmNcbiAgICB9KTtcbiAgICAvLyBDYWxsIHRoZSBhY3Rpb24gZm9yIHRoZSBmZXRjaGVyXG4gICAgbGV0IGFib3J0Q29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAgICBsZXQgZmV0Y2hSZXF1ZXN0ID0gY3JlYXRlQ2xpZW50U2lkZVJlcXVlc3QoaW5pdC5oaXN0b3J5LCBwYXRoLCBhYm9ydENvbnRyb2xsZXIuc2lnbmFsLCBzdWJtaXNzaW9uKTtcbiAgICBmZXRjaENvbnRyb2xsZXJzLnNldChrZXksIGFib3J0Q29udHJvbGxlcik7XG4gICAgbGV0IG9yaWdpbmF0aW5nTG9hZElkID0gaW5jcmVtZW50aW5nTG9hZElkO1xuICAgIGxldCBhY3Rpb25SZXN1bHRzID0gYXdhaXQgY2FsbERhdGFTdHJhdGVneShcImFjdGlvblwiLCBmZXRjaFJlcXVlc3QsIFttYXRjaF0sIHJlcXVlc3RNYXRjaGVzKTtcbiAgICBsZXQgYWN0aW9uUmVzdWx0ID0gYWN0aW9uUmVzdWx0c1swXTtcbiAgICBpZiAoZmV0Y2hSZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICAvLyBXZSBjYW4gZGVsZXRlIHRoaXMgc28gbG9uZyBhcyB3ZSB3ZXJlbid0IGFib3J0ZWQgYnkgb3VyIG93biBmZXRjaGVyXG4gICAgICAvLyByZS1zdWJtaXQgd2hpY2ggd291bGQgaGF2ZSBwdXQgX25ld18gY29udHJvbGxlciBpcyBpbiBmZXRjaENvbnRyb2xsZXJzXG4gICAgICBpZiAoZmV0Y2hDb250cm9sbGVycy5nZXQoa2V5KSA9PT0gYWJvcnRDb250cm9sbGVyKSB7XG4gICAgICAgIGZldGNoQ29udHJvbGxlcnMuZGVsZXRlKGtleSk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIFdoZW4gdXNpbmcgdjdfZmV0Y2hlclBlcnNpc3QsIHdlIGRvbid0IHdhbnQgZXJyb3JzIGJ1YmJsaW5nIHVwIHRvIHRoZSBVSVxuICAgIC8vIG9yIHJlZGlyZWN0cyBwcm9jZXNzZWQgZm9yIHVubW91bnRlZCBmZXRjaGVycyBzbyB3ZSBqdXN0IHJldmVydCB0aGVtIHRvXG4gICAgLy8gaWRsZVxuICAgIGlmIChmdXR1cmUudjdfZmV0Y2hlclBlcnNpc3QgJiYgZGVsZXRlZEZldGNoZXJzLmhhcyhrZXkpKSB7XG4gICAgICBpZiAoaXNSZWRpcmVjdFJlc3VsdChhY3Rpb25SZXN1bHQpIHx8IGlzRXJyb3JSZXN1bHQoYWN0aW9uUmVzdWx0KSkge1xuICAgICAgICB1cGRhdGVGZXRjaGVyU3RhdGUoa2V5LCBnZXREb25lRmV0Y2hlcih1bmRlZmluZWQpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gTGV0IFN1Y2Nlc3NSZXN1bHQncyBmYWxsIHRocm91Z2ggZm9yIHJldmFsaWRhdGlvblxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaXNSZWRpcmVjdFJlc3VsdChhY3Rpb25SZXN1bHQpKSB7XG4gICAgICAgIGZldGNoQ29udHJvbGxlcnMuZGVsZXRlKGtleSk7XG4gICAgICAgIGlmIChwZW5kaW5nTmF2aWdhdGlvbkxvYWRJZCA+IG9yaWdpbmF0aW5nTG9hZElkKSB7XG4gICAgICAgICAgLy8gQSBuZXcgbmF2aWdhdGlvbiB3YXMga2lja2VkIG9mZiBhZnRlciBvdXIgYWN0aW9uIHN0YXJ0ZWQsIHNvIHRoYXRcbiAgICAgICAgICAvLyBzaG91bGQgdGFrZSBwcmVjZWRlbmNlIG92ZXIgdGhpcyByZWRpcmVjdCBuYXZpZ2F0aW9uLiAgV2UgYWxyZWFkeVxuICAgICAgICAgIC8vIHNldCBpc1JldmFsaWRhdGlvblJlcXVpcmVkIHNvIGFsbCBsb2FkZXJzIGZvciB0aGUgbmV3IHJvdXRlIHNob3VsZFxuICAgICAgICAgIC8vIGZpcmUgdW5sZXNzIG9wdGVkIG91dCB2aWEgc2hvdWxkUmV2YWxpZGF0ZVxuICAgICAgICAgIHVwZGF0ZUZldGNoZXJTdGF0ZShrZXksIGdldERvbmVGZXRjaGVyKHVuZGVmaW5lZCkpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmZXRjaFJlZGlyZWN0SWRzLmFkZChrZXkpO1xuICAgICAgICAgIHVwZGF0ZUZldGNoZXJTdGF0ZShrZXksIGdldExvYWRpbmdGZXRjaGVyKHN1Ym1pc3Npb24pKTtcbiAgICAgICAgICByZXR1cm4gc3RhcnRSZWRpcmVjdE5hdmlnYXRpb24oZmV0Y2hSZXF1ZXN0LCBhY3Rpb25SZXN1bHQsIHtcbiAgICAgICAgICAgIGZldGNoZXJTdWJtaXNzaW9uOiBzdWJtaXNzaW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIFByb2Nlc3MgYW55IG5vbi1yZWRpcmVjdCBlcnJvcnMgdGhyb3duXG4gICAgICBpZiAoaXNFcnJvclJlc3VsdChhY3Rpb25SZXN1bHQpKSB7XG4gICAgICAgIHNldEZldGNoZXJFcnJvcihrZXksIHJvdXRlSWQsIGFjdGlvblJlc3VsdC5lcnJvcik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzRGVmZXJyZWRSZXN1bHQoYWN0aW9uUmVzdWx0KSkge1xuICAgICAgdGhyb3cgZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDAsIHtcbiAgICAgICAgdHlwZTogXCJkZWZlci1hY3Rpb25cIlxuICAgICAgfSk7XG4gICAgfVxuICAgIC8vIFN0YXJ0IHRoZSBkYXRhIGxvYWQgZm9yIGN1cnJlbnQgbWF0Y2hlcywgb3IgdGhlIG5leHQgbG9jYXRpb24gaWYgd2UncmVcbiAgICAvLyBpbiB0aGUgbWlkZGxlIG9mIGEgbmF2aWdhdGlvblxuICAgIGxldCBuZXh0TG9jYXRpb24gPSBzdGF0ZS5uYXZpZ2F0aW9uLmxvY2F0aW9uIHx8IHN0YXRlLmxvY2F0aW9uO1xuICAgIGxldCByZXZhbGlkYXRpb25SZXF1ZXN0ID0gY3JlYXRlQ2xpZW50U2lkZVJlcXVlc3QoaW5pdC5oaXN0b3J5LCBuZXh0TG9jYXRpb24sIGFib3J0Q29udHJvbGxlci5zaWduYWwpO1xuICAgIGxldCByb3V0ZXNUb1VzZSA9IGluRmxpZ2h0RGF0YVJvdXRlcyB8fCBkYXRhUm91dGVzO1xuICAgIGxldCBtYXRjaGVzID0gc3RhdGUubmF2aWdhdGlvbi5zdGF0ZSAhPT0gXCJpZGxlXCIgPyBtYXRjaFJvdXRlcyhyb3V0ZXNUb1VzZSwgc3RhdGUubmF2aWdhdGlvbi5sb2NhdGlvbiwgYmFzZW5hbWUpIDogc3RhdGUubWF0Y2hlcztcbiAgICBpbnZhcmlhbnQobWF0Y2hlcywgXCJEaWRuJ3QgZmluZCBhbnkgbWF0Y2hlcyBhZnRlciBmZXRjaGVyIGFjdGlvblwiKTtcbiAgICBsZXQgbG9hZElkID0gKytpbmNyZW1lbnRpbmdMb2FkSWQ7XG4gICAgZmV0Y2hSZWxvYWRJZHMuc2V0KGtleSwgbG9hZElkKTtcbiAgICBsZXQgbG9hZEZldGNoZXIgPSBnZXRMb2FkaW5nRmV0Y2hlcihzdWJtaXNzaW9uLCBhY3Rpb25SZXN1bHQuZGF0YSk7XG4gICAgc3RhdGUuZmV0Y2hlcnMuc2V0KGtleSwgbG9hZEZldGNoZXIpO1xuICAgIGxldCBbbWF0Y2hlc1RvTG9hZCwgcmV2YWxpZGF0aW5nRmV0Y2hlcnNdID0gZ2V0TWF0Y2hlc1RvTG9hZChpbml0Lmhpc3RvcnksIHN0YXRlLCBtYXRjaGVzLCBzdWJtaXNzaW9uLCBuZXh0TG9jYXRpb24sIGZhbHNlLCBmdXR1cmUudW5zdGFibGVfc2tpcEFjdGlvbkVycm9yUmV2YWxpZGF0aW9uLCBpc1JldmFsaWRhdGlvblJlcXVpcmVkLCBjYW5jZWxsZWREZWZlcnJlZFJvdXRlcywgY2FuY2VsbGVkRmV0Y2hlckxvYWRzLCBkZWxldGVkRmV0Y2hlcnMsIGZldGNoTG9hZE1hdGNoZXMsIGZldGNoUmVkaXJlY3RJZHMsIHJvdXRlc1RvVXNlLCBiYXNlbmFtZSwgW21hdGNoLnJvdXRlLmlkLCBhY3Rpb25SZXN1bHRdKTtcbiAgICAvLyBQdXQgYWxsIHJldmFsaWRhdGluZyBmZXRjaGVycyBpbnRvIHRoZSBsb2FkaW5nIHN0YXRlLCBleGNlcHQgZm9yIHRoZVxuICAgIC8vIGN1cnJlbnQgZmV0Y2hlciB3aGljaCB3ZSB3YW50IHRvIGtlZXAgaW4gaXQncyBjdXJyZW50IGxvYWRpbmcgc3RhdGUgd2hpY2hcbiAgICAvLyBjb250YWlucyBpdCdzIGFjdGlvbiBzdWJtaXNzaW9uIGluZm8gKyBhY3Rpb24gZGF0YVxuICAgIHJldmFsaWRhdGluZ0ZldGNoZXJzLmZpbHRlcihyZiA9PiByZi5rZXkgIT09IGtleSkuZm9yRWFjaChyZiA9PiB7XG4gICAgICBsZXQgc3RhbGVLZXkgPSByZi5rZXk7XG4gICAgICBsZXQgZXhpc3RpbmdGZXRjaGVyID0gc3RhdGUuZmV0Y2hlcnMuZ2V0KHN0YWxlS2V5KTtcbiAgICAgIGxldCByZXZhbGlkYXRpbmdGZXRjaGVyID0gZ2V0TG9hZGluZ0ZldGNoZXIodW5kZWZpbmVkLCBleGlzdGluZ0ZldGNoZXIgPyBleGlzdGluZ0ZldGNoZXIuZGF0YSA6IHVuZGVmaW5lZCk7XG4gICAgICBzdGF0ZS5mZXRjaGVycy5zZXQoc3RhbGVLZXksIHJldmFsaWRhdGluZ0ZldGNoZXIpO1xuICAgICAgaWYgKGZldGNoQ29udHJvbGxlcnMuaGFzKHN0YWxlS2V5KSkge1xuICAgICAgICBhYm9ydEZldGNoZXIoc3RhbGVLZXkpO1xuICAgICAgfVxuICAgICAgaWYgKHJmLmNvbnRyb2xsZXIpIHtcbiAgICAgICAgZmV0Y2hDb250cm9sbGVycy5zZXQoc3RhbGVLZXksIHJmLmNvbnRyb2xsZXIpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgIGZldGNoZXJzOiBuZXcgTWFwKHN0YXRlLmZldGNoZXJzKVxuICAgIH0pO1xuICAgIGxldCBhYm9ydFBlbmRpbmdGZXRjaFJldmFsaWRhdGlvbnMgPSAoKSA9PiByZXZhbGlkYXRpbmdGZXRjaGVycy5mb3JFYWNoKHJmID0+IGFib3J0RmV0Y2hlcihyZi5rZXkpKTtcbiAgICBhYm9ydENvbnRyb2xsZXIuc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBhYm9ydFBlbmRpbmdGZXRjaFJldmFsaWRhdGlvbnMpO1xuICAgIGxldCB7XG4gICAgICBsb2FkZXJSZXN1bHRzLFxuICAgICAgZmV0Y2hlclJlc3VsdHNcbiAgICB9ID0gYXdhaXQgY2FsbExvYWRlcnNBbmRNYXliZVJlc29sdmVEYXRhKHN0YXRlLm1hdGNoZXMsIG1hdGNoZXMsIG1hdGNoZXNUb0xvYWQsIHJldmFsaWRhdGluZ0ZldGNoZXJzLCByZXZhbGlkYXRpb25SZXF1ZXN0KTtcbiAgICBpZiAoYWJvcnRDb250cm9sbGVyLnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGFib3J0Q29udHJvbGxlci5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIGFib3J0UGVuZGluZ0ZldGNoUmV2YWxpZGF0aW9ucyk7XG4gICAgZmV0Y2hSZWxvYWRJZHMuZGVsZXRlKGtleSk7XG4gICAgZmV0Y2hDb250cm9sbGVycy5kZWxldGUoa2V5KTtcbiAgICByZXZhbGlkYXRpbmdGZXRjaGVycy5mb3JFYWNoKHIgPT4gZmV0Y2hDb250cm9sbGVycy5kZWxldGUoci5rZXkpKTtcbiAgICBsZXQgcmVkaXJlY3QgPSBmaW5kUmVkaXJlY3QoWy4uLmxvYWRlclJlc3VsdHMsIC4uLmZldGNoZXJSZXN1bHRzXSk7XG4gICAgaWYgKHJlZGlyZWN0KSB7XG4gICAgICBpZiAocmVkaXJlY3QuaWR4ID49IG1hdGNoZXNUb0xvYWQubGVuZ3RoKSB7XG4gICAgICAgIC8vIElmIHRoaXMgcmVkaXJlY3QgY2FtZSBmcm9tIGEgZmV0Y2hlciBtYWtlIHN1cmUgd2UgbWFyayBpdCBpblxuICAgICAgICAvLyBmZXRjaFJlZGlyZWN0SWRzIHNvIGl0IGRvZXNuJ3QgZ2V0IHJldmFsaWRhdGVkIG9uIHRoZSBuZXh0IHNldCBvZlxuICAgICAgICAvLyBsb2FkZXIgZXhlY3V0aW9uc1xuICAgICAgICBsZXQgZmV0Y2hlcktleSA9IHJldmFsaWRhdGluZ0ZldGNoZXJzW3JlZGlyZWN0LmlkeCAtIG1hdGNoZXNUb0xvYWQubGVuZ3RoXS5rZXk7XG4gICAgICAgIGZldGNoUmVkaXJlY3RJZHMuYWRkKGZldGNoZXJLZXkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN0YXJ0UmVkaXJlY3ROYXZpZ2F0aW9uKHJldmFsaWRhdGlvblJlcXVlc3QsIHJlZGlyZWN0LnJlc3VsdCk7XG4gICAgfVxuICAgIC8vIFByb2Nlc3MgYW5kIGNvbW1pdCBvdXRwdXQgZnJvbSBsb2FkZXJzXG4gICAgbGV0IHtcbiAgICAgIGxvYWRlckRhdGEsXG4gICAgICBlcnJvcnNcbiAgICB9ID0gcHJvY2Vzc0xvYWRlckRhdGEoc3RhdGUsIHN0YXRlLm1hdGNoZXMsIG1hdGNoZXNUb0xvYWQsIGxvYWRlclJlc3VsdHMsIHVuZGVmaW5lZCwgcmV2YWxpZGF0aW5nRmV0Y2hlcnMsIGZldGNoZXJSZXN1bHRzLCBhY3RpdmVEZWZlcnJlZHMpO1xuICAgIC8vIFNpbmNlIHdlIGxldCByZXZhbGlkYXRpb25zIGNvbXBsZXRlIGV2ZW4gaWYgdGhlIHN1Ym1pdHRpbmcgZmV0Y2hlciB3YXNcbiAgICAvLyBkZWxldGVkLCBvbmx5IHB1dCBpdCBiYWNrIHRvIGlkbGUgaWYgaXQgaGFzbid0IGJlZW4gZGVsZXRlZFxuICAgIGlmIChzdGF0ZS5mZXRjaGVycy5oYXMoa2V5KSkge1xuICAgICAgbGV0IGRvbmVGZXRjaGVyID0gZ2V0RG9uZUZldGNoZXIoYWN0aW9uUmVzdWx0LmRhdGEpO1xuICAgICAgc3RhdGUuZmV0Y2hlcnMuc2V0KGtleSwgZG9uZUZldGNoZXIpO1xuICAgIH1cbiAgICBhYm9ydFN0YWxlRmV0Y2hMb2Fkcyhsb2FkSWQpO1xuICAgIC8vIElmIHdlIGFyZSBjdXJyZW50bHkgaW4gYSBuYXZpZ2F0aW9uIGxvYWRpbmcgc3RhdGUgYW5kIHRoaXMgZmV0Y2hlciBpc1xuICAgIC8vIG1vcmUgcmVjZW50IHRoYW4gdGhlIG5hdmlnYXRpb24sIHdlIHdhbnQgdGhlIG5ld2VyIGRhdGEgc28gYWJvcnQgdGhlXG4gICAgLy8gbmF2aWdhdGlvbiBhbmQgY29tcGxldGUgaXQgd2l0aCB0aGUgZmV0Y2hlciBkYXRhXG4gICAgaWYgKHN0YXRlLm5hdmlnYXRpb24uc3RhdGUgPT09IFwibG9hZGluZ1wiICYmIGxvYWRJZCA+IHBlbmRpbmdOYXZpZ2F0aW9uTG9hZElkKSB7XG4gICAgICBpbnZhcmlhbnQocGVuZGluZ0FjdGlvbiwgXCJFeHBlY3RlZCBwZW5kaW5nIGFjdGlvblwiKTtcbiAgICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciAmJiBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICAgIGNvbXBsZXRlTmF2aWdhdGlvbihzdGF0ZS5uYXZpZ2F0aW9uLmxvY2F0aW9uLCB7XG4gICAgICAgIG1hdGNoZXMsXG4gICAgICAgIGxvYWRlckRhdGEsXG4gICAgICAgIGVycm9ycyxcbiAgICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gb3RoZXJ3aXNlIGp1c3QgdXBkYXRlIHdpdGggdGhlIGZldGNoZXIgZGF0YSwgcHJlc2VydmluZyBhbnkgZXhpc3RpbmdcbiAgICAgIC8vIGxvYWRlckRhdGEgZm9yIGxvYWRlcnMgdGhhdCBkaWQgbm90IG5lZWQgdG8gcmVsb2FkLiAgV2UgaGF2ZSB0b1xuICAgICAgLy8gbWFudWFsbHkgbWVyZ2UgaGVyZSBzaW5jZSB3ZSBhcmVuJ3QgZ29pbmcgdGhyb3VnaCBjb21wbGV0ZU5hdmlnYXRpb25cbiAgICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgICAgZXJyb3JzLFxuICAgICAgICBsb2FkZXJEYXRhOiBtZXJnZUxvYWRlckRhdGEoc3RhdGUubG9hZGVyRGF0YSwgbG9hZGVyRGF0YSwgbWF0Y2hlcywgZXJyb3JzKSxcbiAgICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgICB9KTtcbiAgICAgIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgLy8gQ2FsbCB0aGUgbWF0Y2hlZCBsb2FkZXIgZm9yIGZldGNoZXIubG9hZCgpLCBoYW5kbGluZyByZWRpcmVjdHMsIGVycm9ycywgZXRjLlxuICBhc3luYyBmdW5jdGlvbiBoYW5kbGVGZXRjaGVyTG9hZGVyKGtleSwgcm91dGVJZCwgcGF0aCwgbWF0Y2gsIG1hdGNoZXMsIGZsdXNoU3luYywgc3VibWlzc2lvbikge1xuICAgIGxldCBleGlzdGluZ0ZldGNoZXIgPSBzdGF0ZS5mZXRjaGVycy5nZXQoa2V5KTtcbiAgICB1cGRhdGVGZXRjaGVyU3RhdGUoa2V5LCBnZXRMb2FkaW5nRmV0Y2hlcihzdWJtaXNzaW9uLCBleGlzdGluZ0ZldGNoZXIgPyBleGlzdGluZ0ZldGNoZXIuZGF0YSA6IHVuZGVmaW5lZCksIHtcbiAgICAgIGZsdXNoU3luY1xuICAgIH0pO1xuICAgIC8vIENhbGwgdGhlIGxvYWRlciBmb3IgdGhpcyBmZXRjaGVyIHJvdXRlIG1hdGNoXG4gICAgbGV0IGFib3J0Q29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAgICBsZXQgZmV0Y2hSZXF1ZXN0ID0gY3JlYXRlQ2xpZW50U2lkZVJlcXVlc3QoaW5pdC5oaXN0b3J5LCBwYXRoLCBhYm9ydENvbnRyb2xsZXIuc2lnbmFsKTtcbiAgICBmZXRjaENvbnRyb2xsZXJzLnNldChrZXksIGFib3J0Q29udHJvbGxlcik7XG4gICAgbGV0IG9yaWdpbmF0aW5nTG9hZElkID0gaW5jcmVtZW50aW5nTG9hZElkO1xuICAgIGxldCByZXN1bHRzID0gYXdhaXQgY2FsbERhdGFTdHJhdGVneShcImxvYWRlclwiLCBmZXRjaFJlcXVlc3QsIFttYXRjaF0sIG1hdGNoZXMpO1xuICAgIGxldCByZXN1bHQgPSByZXN1bHRzWzBdO1xuICAgIC8vIERlZmVycmVkIGlzbid0IHN1cHBvcnRlZCBmb3IgZmV0Y2hlciBsb2FkcywgYXdhaXQgZXZlcnl0aGluZyBhbmQgdHJlYXQgaXRcbiAgICAvLyBhcyBhIG5vcm1hbCBsb2FkLiAgcmVzb2x2ZURlZmVycmVkRGF0YSB3aWxsIHJldHVybiB1bmRlZmluZWQgaWYgdGhpc1xuICAgIC8vIGZldGNoZXIgZ2V0cyBhYm9ydGVkLCBzbyB3ZSBqdXN0IGxlYXZlIHJlc3VsdCB1bnRvdWNoZWQgYW5kIHNob3J0IGNpcmN1aXRcbiAgICAvLyBiZWxvdyBpZiB0aGF0IGhhcHBlbnNcbiAgICBpZiAoaXNEZWZlcnJlZFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICByZXN1bHQgPSAoYXdhaXQgcmVzb2x2ZURlZmVycmVkRGF0YShyZXN1bHQsIGZldGNoUmVxdWVzdC5zaWduYWwsIHRydWUpKSB8fCByZXN1bHQ7XG4gICAgfVxuICAgIC8vIFdlIGNhbiBkZWxldGUgdGhpcyBzbyBsb25nIGFzIHdlIHdlcmVuJ3QgYWJvcnRlZCBieSBvdXIgb3VyIG93biBmZXRjaGVyXG4gICAgLy8gcmUtbG9hZCB3aGljaCB3b3VsZCBoYXZlIHB1dCBfbmV3XyBjb250cm9sbGVyIGlzIGluIGZldGNoQ29udHJvbGxlcnNcbiAgICBpZiAoZmV0Y2hDb250cm9sbGVycy5nZXQoa2V5KSA9PT0gYWJvcnRDb250cm9sbGVyKSB7XG4gICAgICBmZXRjaENvbnRyb2xsZXJzLmRlbGV0ZShrZXkpO1xuICAgIH1cbiAgICBpZiAoZmV0Y2hSZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIFdlIGRvbid0IHdhbnQgZXJyb3JzIGJ1YmJsaW5nIHVwIG9yIHJlZGlyZWN0cyBmb2xsb3dlZCBmb3IgdW5tb3VudGVkXG4gICAgLy8gZmV0Y2hlcnMsIHNvIHNob3J0IGNpcmN1aXQgaGVyZSBpZiBpdCB3YXMgcmVtb3ZlZCBmcm9tIHRoZSBVSVxuICAgIGlmIChkZWxldGVkRmV0Y2hlcnMuaGFzKGtleSkpIHtcbiAgICAgIHVwZGF0ZUZldGNoZXJTdGF0ZShrZXksIGdldERvbmVGZXRjaGVyKHVuZGVmaW5lZCkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBJZiB0aGUgbG9hZGVyIHRocmV3IGEgcmVkaXJlY3QgUmVzcG9uc2UsIHN0YXJ0IGEgbmV3IFJFUExBQ0UgbmF2aWdhdGlvblxuICAgIGlmIChpc1JlZGlyZWN0UmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIGlmIChwZW5kaW5nTmF2aWdhdGlvbkxvYWRJZCA+IG9yaWdpbmF0aW5nTG9hZElkKSB7XG4gICAgICAgIC8vIEEgbmV3IG5hdmlnYXRpb24gd2FzIGtpY2tlZCBvZmYgYWZ0ZXIgb3VyIGxvYWRlciBzdGFydGVkLCBzbyB0aGF0XG4gICAgICAgIC8vIHNob3VsZCB0YWtlIHByZWNlZGVuY2Ugb3ZlciB0aGlzIHJlZGlyZWN0IG5hdmlnYXRpb25cbiAgICAgICAgdXBkYXRlRmV0Y2hlclN0YXRlKGtleSwgZ2V0RG9uZUZldGNoZXIodW5kZWZpbmVkKSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZldGNoUmVkaXJlY3RJZHMuYWRkKGtleSk7XG4gICAgICAgIGF3YWl0IHN0YXJ0UmVkaXJlY3ROYXZpZ2F0aW9uKGZldGNoUmVxdWVzdCwgcmVzdWx0KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBQcm9jZXNzIGFueSBub24tcmVkaXJlY3QgZXJyb3JzIHRocm93blxuICAgIGlmIChpc0Vycm9yUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIHNldEZldGNoZXJFcnJvcihrZXksIHJvdXRlSWQsIHJlc3VsdC5lcnJvcik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGludmFyaWFudCghaXNEZWZlcnJlZFJlc3VsdChyZXN1bHQpLCBcIlVuaGFuZGxlZCBmZXRjaGVyIGRlZmVycmVkIGRhdGFcIik7XG4gICAgLy8gUHV0IHRoZSBmZXRjaGVyIGJhY2sgaW50byBhbiBpZGxlIHN0YXRlXG4gICAgdXBkYXRlRmV0Y2hlclN0YXRlKGtleSwgZ2V0RG9uZUZldGNoZXIocmVzdWx0LmRhdGEpKTtcbiAgfVxuICAvKipcbiAgICogVXRpbGl0eSBmdW5jdGlvbiB0byBoYW5kbGUgcmVkaXJlY3RzIHJldHVybmVkIGZyb20gYW4gYWN0aW9uIG9yIGxvYWRlci5cbiAgICogTm9ybWFsbHksIGEgcmVkaXJlY3QgXCJyZXBsYWNlc1wiIHRoZSBuYXZpZ2F0aW9uIHRoYXQgdHJpZ2dlcmVkIGl0LiAgU28sIGZvclxuICAgKiBleGFtcGxlOlxuICAgKlxuICAgKiAgLSB1c2VyIGlzIG9uIC9hXG4gICAqICAtIHVzZXIgY2xpY2tzIGEgbGluayB0byAvYlxuICAgKiAgLSBsb2FkZXIgZm9yIC9iIHJlZGlyZWN0cyB0byAvY1xuICAgKlxuICAgKiBJbiBhIG5vbi1KUyBhcHAgdGhlIGJyb3dzZXIgd291bGQgdHJhY2sgdGhlIGluLWZsaWdodCBuYXZpZ2F0aW9uIHRvIC9iIGFuZFxuICAgKiB0aGVuIHJlcGxhY2UgaXQgd2l0aCAvYyB3aGVuIGl0IGVuY291bnRlcmVkIHRoZSByZWRpcmVjdCByZXNwb25zZS4gIEluXG4gICAqIHRoZSBlbmQgaXQgd291bGQgb25seSBldmVyIHVwZGF0ZSB0aGUgVVJMIGJhciB3aXRoIC9jLlxuICAgKlxuICAgKiBJbiBjbGllbnQtc2lkZSByb3V0aW5nIHVzaW5nIHB1c2hTdGF0ZS9yZXBsYWNlU3RhdGUsIHdlIGFpbSB0byBlbXVsYXRlXG4gICAqIHRoaXMgYmVoYXZpb3IgYW5kIHdlIGFsc28gZG8gbm90IHVwZGF0ZSBoaXN0b3J5IHVudGlsIHRoZSBlbmQgb2YgdGhlXG4gICAqIG5hdmlnYXRpb24gKGluY2x1ZGluZyBwcm9jZXNzZWQgcmVkaXJlY3RzKS4gIFRoaXMgbWVhbnMgdGhhdCB3ZSBuZXZlclxuICAgKiBhY3R1YWxseSB0b3VjaCBoaXN0b3J5IHVudGlsIHdlJ3ZlIHByb2Nlc3NlZCByZWRpcmVjdHMsIHNvIHdlIGp1c3QgdXNlXG4gICAqIHRoZSBoaXN0b3J5IGFjdGlvbiBmcm9tIHRoZSBvcmlnaW5hbCBuYXZpZ2F0aW9uIChQVVNIIG9yIFJFUExBQ0UpLlxuICAgKi9cbiAgYXN5bmMgZnVuY3Rpb24gc3RhcnRSZWRpcmVjdE5hdmlnYXRpb24ocmVxdWVzdCwgcmVkaXJlY3QsIF90ZW1wMikge1xuICAgIGxldCB7XG4gICAgICBzdWJtaXNzaW9uLFxuICAgICAgZmV0Y2hlclN1Ym1pc3Npb24sXG4gICAgICByZXBsYWNlXG4gICAgfSA9IF90ZW1wMiA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDI7XG4gICAgaWYgKHJlZGlyZWN0LnJlc3BvbnNlLmhlYWRlcnMuaGFzKFwiWC1SZW1peC1SZXZhbGlkYXRlXCIpKSB7XG4gICAgICBpc1JldmFsaWRhdGlvblJlcXVpcmVkID0gdHJ1ZTtcbiAgICB9XG4gICAgbGV0IGxvY2F0aW9uID0gcmVkaXJlY3QucmVzcG9uc2UuaGVhZGVycy5nZXQoXCJMb2NhdGlvblwiKTtcbiAgICBpbnZhcmlhbnQobG9jYXRpb24sIFwiRXhwZWN0ZWQgYSBMb2NhdGlvbiBoZWFkZXIgb24gdGhlIHJlZGlyZWN0IFJlc3BvbnNlXCIpO1xuICAgIGxvY2F0aW9uID0gbm9ybWFsaXplUmVkaXJlY3RMb2NhdGlvbihsb2NhdGlvbiwgbmV3IFVSTChyZXF1ZXN0LnVybCksIGJhc2VuYW1lKTtcbiAgICBsZXQgcmVkaXJlY3RMb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHN0YXRlLmxvY2F0aW9uLCBsb2NhdGlvbiwge1xuICAgICAgX2lzUmVkaXJlY3Q6IHRydWVcbiAgICB9KTtcbiAgICBpZiAoaXNCcm93c2VyKSB7XG4gICAgICBsZXQgaXNEb2N1bWVudFJlbG9hZCA9IGZhbHNlO1xuICAgICAgaWYgKHJlZGlyZWN0LnJlc3BvbnNlLmhlYWRlcnMuaGFzKFwiWC1SZW1peC1SZWxvYWQtRG9jdW1lbnRcIikpIHtcbiAgICAgICAgLy8gSGFyZCByZWxvYWQgaWYgdGhlIHJlc3BvbnNlIGNvbnRhaW5lZCBYLVJlbWl4LVJlbG9hZC1Eb2N1bWVudFxuICAgICAgICBpc0RvY3VtZW50UmVsb2FkID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAoQUJTT0xVVEVfVVJMX1JFR0VYLnRlc3QobG9jYXRpb24pKSB7XG4gICAgICAgIGNvbnN0IHVybCA9IGluaXQuaGlzdG9yeS5jcmVhdGVVUkwobG9jYXRpb24pO1xuICAgICAgICBpc0RvY3VtZW50UmVsb2FkID1cbiAgICAgICAgLy8gSGFyZCByZWxvYWQgaWYgaXQncyBhbiBhYnNvbHV0ZSBVUkwgdG8gYSBuZXcgb3JpZ2luXG4gICAgICAgIHVybC5vcmlnaW4gIT09IHJvdXRlcldpbmRvdy5sb2NhdGlvbi5vcmlnaW4gfHxcbiAgICAgICAgLy8gSGFyZCByZWxvYWQgaWYgaXQncyBhbiBhYnNvbHV0ZSBVUkwgdGhhdCBkb2VzIG5vdCBtYXRjaCBvdXIgYmFzZW5hbWVcbiAgICAgICAgc3RyaXBCYXNlbmFtZSh1cmwucGF0aG5hbWUsIGJhc2VuYW1lKSA9PSBudWxsO1xuICAgICAgfVxuICAgICAgaWYgKGlzRG9jdW1lbnRSZWxvYWQpIHtcbiAgICAgICAgaWYgKHJlcGxhY2UpIHtcbiAgICAgICAgICByb3V0ZXJXaW5kb3cubG9jYXRpb24ucmVwbGFjZShsb2NhdGlvbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcm91dGVyV2luZG93LmxvY2F0aW9uLmFzc2lnbihsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBUaGVyZSdzIG5vIG5lZWQgdG8gYWJvcnQgb24gcmVkaXJlY3RzLCBzaW5jZSB3ZSBkb24ndCBkZXRlY3QgdGhlXG4gICAgLy8gcmVkaXJlY3QgdW50aWwgdGhlIGFjdGlvbi9sb2FkZXJzIGhhdmUgc2V0dGxlZFxuICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciA9IG51bGw7XG4gICAgbGV0IHJlZGlyZWN0SGlzdG9yeUFjdGlvbiA9IHJlcGxhY2UgPT09IHRydWUgPyBBY3Rpb24uUmVwbGFjZSA6IEFjdGlvbi5QdXNoO1xuICAgIC8vIFVzZSB0aGUgaW5jb21pbmcgc3VibWlzc2lvbiBpZiBwcm92aWRlZCwgZmFsbGJhY2sgb24gdGhlIGFjdGl2ZSBvbmUgaW5cbiAgICAvLyBzdGF0ZS5uYXZpZ2F0aW9uXG4gICAgbGV0IHtcbiAgICAgIGZvcm1NZXRob2QsXG4gICAgICBmb3JtQWN0aW9uLFxuICAgICAgZm9ybUVuY1R5cGVcbiAgICB9ID0gc3RhdGUubmF2aWdhdGlvbjtcbiAgICBpZiAoIXN1Ym1pc3Npb24gJiYgIWZldGNoZXJTdWJtaXNzaW9uICYmIGZvcm1NZXRob2QgJiYgZm9ybUFjdGlvbiAmJiBmb3JtRW5jVHlwZSkge1xuICAgICAgc3VibWlzc2lvbiA9IGdldFN1Ym1pc3Npb25Gcm9tTmF2aWdhdGlvbihzdGF0ZS5uYXZpZ2F0aW9uKTtcbiAgICB9XG4gICAgLy8gSWYgdGhpcyB3YXMgYSAzMDcvMzA4IHN1Ym1pc3Npb24gd2Ugd2FudCB0byBwcmVzZXJ2ZSB0aGUgSFRUUCBtZXRob2QgYW5kXG4gICAgLy8gcmUtc3VibWl0IHRoZSBHRVQvUE9TVC9QVVQvUEFUQ0gvREVMRVRFIGFzIGEgc3VibWlzc2lvbiBuYXZpZ2F0aW9uIHRvIHRoZVxuICAgIC8vIHJlZGlyZWN0ZWQgbG9jYXRpb25cbiAgICBsZXQgYWN0aXZlU3VibWlzc2lvbiA9IHN1Ym1pc3Npb24gfHwgZmV0Y2hlclN1Ym1pc3Npb247XG4gICAgaWYgKHJlZGlyZWN0UHJlc2VydmVNZXRob2RTdGF0dXNDb2Rlcy5oYXMocmVkaXJlY3QucmVzcG9uc2Uuc3RhdHVzKSAmJiBhY3RpdmVTdWJtaXNzaW9uICYmIGlzTXV0YXRpb25NZXRob2QoYWN0aXZlU3VibWlzc2lvbi5mb3JtTWV0aG9kKSkge1xuICAgICAgYXdhaXQgc3RhcnROYXZpZ2F0aW9uKHJlZGlyZWN0SGlzdG9yeUFjdGlvbiwgcmVkaXJlY3RMb2NhdGlvbiwge1xuICAgICAgICBzdWJtaXNzaW9uOiBfZXh0ZW5kcyh7fSwgYWN0aXZlU3VibWlzc2lvbiwge1xuICAgICAgICAgIGZvcm1BY3Rpb246IGxvY2F0aW9uXG4gICAgICAgIH0pLFxuICAgICAgICAvLyBQcmVzZXJ2ZSB0aGlzIGZsYWcgYWNyb3NzIHJlZGlyZWN0c1xuICAgICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQ6IHBlbmRpbmdQcmV2ZW50U2Nyb2xsUmVzZXRcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBJZiB3ZSBoYXZlIGEgbmF2aWdhdGlvbiBzdWJtaXNzaW9uLCB3ZSB3aWxsIHByZXNlcnZlIGl0IHRocm91Z2ggdGhlXG4gICAgICAvLyByZWRpcmVjdCBuYXZpZ2F0aW9uXG4gICAgICBsZXQgb3ZlcnJpZGVOYXZpZ2F0aW9uID0gZ2V0TG9hZGluZ05hdmlnYXRpb24ocmVkaXJlY3RMb2NhdGlvbiwgc3VibWlzc2lvbik7XG4gICAgICBhd2FpdCBzdGFydE5hdmlnYXRpb24ocmVkaXJlY3RIaXN0b3J5QWN0aW9uLCByZWRpcmVjdExvY2F0aW9uLCB7XG4gICAgICAgIG92ZXJyaWRlTmF2aWdhdGlvbixcbiAgICAgICAgLy8gU2VuZCBmZXRjaGVyIHN1Ym1pc3Npb25zIHRocm91Z2ggZm9yIHNob3VsZFJldmFsaWRhdGVcbiAgICAgICAgZmV0Y2hlclN1Ym1pc3Npb24sXG4gICAgICAgIC8vIFByZXNlcnZlIHRoaXMgZmxhZyBhY3Jvc3MgcmVkaXJlY3RzXG4gICAgICAgIHByZXZlbnRTY3JvbGxSZXNldDogcGVuZGluZ1ByZXZlbnRTY3JvbGxSZXNldFxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIC8vIFV0aWxpdHkgd3JhcHBlciBmb3IgY2FsbGluZyBkYXRhU3RyYXRlZ3kgY2xpZW50LXNpZGUgd2l0aG91dCBoYXZpbmcgdG9cbiAgLy8gcGFzcyBhcm91bmQgdGhlIG1hbmlmZXN0LCBtYXBSb3V0ZVByb3BlcnRpZXMsIGV0Yy5cbiAgYXN5bmMgZnVuY3Rpb24gY2FsbERhdGFTdHJhdGVneSh0eXBlLCByZXF1ZXN0LCBtYXRjaGVzVG9Mb2FkLCBtYXRjaGVzKSB7XG4gICAgdHJ5IHtcbiAgICAgIGxldCByZXN1bHRzID0gYXdhaXQgY2FsbERhdGFTdHJhdGVneUltcGwoZGF0YVN0cmF0ZWd5SW1wbCwgdHlwZSwgcmVxdWVzdCwgbWF0Y2hlc1RvTG9hZCwgbWF0Y2hlcywgbWFuaWZlc3QsIG1hcFJvdXRlUHJvcGVydGllcyk7XG4gICAgICByZXR1cm4gYXdhaXQgUHJvbWlzZS5hbGwocmVzdWx0cy5tYXAoKHJlc3VsdCwgaSkgPT4ge1xuICAgICAgICBpZiAoaXNSZWRpcmVjdEhhbmRsZXJSZXN1bHQocmVzdWx0KSkge1xuICAgICAgICAgIGxldCByZXNwb25zZSA9IHJlc3VsdC5yZXN1bHQ7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6IFJlc3VsdFR5cGUucmVkaXJlY3QsXG4gICAgICAgICAgICByZXNwb25zZTogbm9ybWFsaXplUmVsYXRpdmVSb3V0aW5nUmVkaXJlY3RSZXNwb25zZShyZXNwb25zZSwgcmVxdWVzdCwgbWF0Y2hlc1RvTG9hZFtpXS5yb3V0ZS5pZCwgbWF0Y2hlcywgYmFzZW5hbWUsIGZ1dHVyZS52N19yZWxhdGl2ZVNwbGF0UGF0aClcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb252ZXJ0SGFuZGxlclJlc3VsdFRvRGF0YVJlc3VsdChyZXN1bHQpO1xuICAgICAgfSkpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIElmIHRoZSBvdXRlciBkYXRhU3RyYXRlZ3kgbWV0aG9kIHRocm93cywganVzdCByZXR1cm4gdGhlIGVycm9yIGZvciBhbGxcbiAgICAgIC8vIG1hdGNoZXMgLSBhbmQgaXQnbGwgbmF0dXJhbGx5IGJ1YmJsZSB0byB0aGUgcm9vdFxuICAgICAgcmV0dXJuIG1hdGNoZXNUb0xvYWQubWFwKCgpID0+ICh7XG4gICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZXJyb3IsXG4gICAgICAgIGVycm9yOiBlXG4gICAgICB9KSk7XG4gICAgfVxuICB9XG4gIGFzeW5jIGZ1bmN0aW9uIGNhbGxMb2FkZXJzQW5kTWF5YmVSZXNvbHZlRGF0YShjdXJyZW50TWF0Y2hlcywgbWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgZmV0Y2hlcnNUb0xvYWQsIHJlcXVlc3QpIHtcbiAgICBsZXQgW2xvYWRlclJlc3VsdHMsIC4uLmZldGNoZXJSZXN1bHRzXSA9IGF3YWl0IFByb21pc2UuYWxsKFttYXRjaGVzVG9Mb2FkLmxlbmd0aCA/IGNhbGxEYXRhU3RyYXRlZ3koXCJsb2FkZXJcIiwgcmVxdWVzdCwgbWF0Y2hlc1RvTG9hZCwgbWF0Y2hlcykgOiBbXSwgLi4uZmV0Y2hlcnNUb0xvYWQubWFwKGYgPT4ge1xuICAgICAgaWYgKGYubWF0Y2hlcyAmJiBmLm1hdGNoICYmIGYuY29udHJvbGxlcikge1xuICAgICAgICBsZXQgZmV0Y2hlclJlcXVlc3QgPSBjcmVhdGVDbGllbnRTaWRlUmVxdWVzdChpbml0Lmhpc3RvcnksIGYucGF0aCwgZi5jb250cm9sbGVyLnNpZ25hbCk7XG4gICAgICAgIHJldHVybiBjYWxsRGF0YVN0cmF0ZWd5KFwibG9hZGVyXCIsIGZldGNoZXJSZXF1ZXN0LCBbZi5tYXRjaF0sIGYubWF0Y2hlcykudGhlbihyID0+IHJbMF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7XG4gICAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5lcnJvcixcbiAgICAgICAgICBlcnJvcjogZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDQsIHtcbiAgICAgICAgICAgIHBhdGhuYW1lOiBmLnBhdGhcbiAgICAgICAgICB9KVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KV0pO1xuICAgIGF3YWl0IFByb21pc2UuYWxsKFtyZXNvbHZlRGVmZXJyZWRSZXN1bHRzKGN1cnJlbnRNYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCBsb2FkZXJSZXN1bHRzLCBsb2FkZXJSZXN1bHRzLm1hcCgoKSA9PiByZXF1ZXN0LnNpZ25hbCksIGZhbHNlLCBzdGF0ZS5sb2FkZXJEYXRhKSwgcmVzb2x2ZURlZmVycmVkUmVzdWx0cyhjdXJyZW50TWF0Y2hlcywgZmV0Y2hlcnNUb0xvYWQubWFwKGYgPT4gZi5tYXRjaCksIGZldGNoZXJSZXN1bHRzLCBmZXRjaGVyc1RvTG9hZC5tYXAoZiA9PiBmLmNvbnRyb2xsZXIgPyBmLmNvbnRyb2xsZXIuc2lnbmFsIDogbnVsbCksIHRydWUpXSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxvYWRlclJlc3VsdHMsXG4gICAgICBmZXRjaGVyUmVzdWx0c1xuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gaW50ZXJydXB0QWN0aXZlTG9hZHMoKSB7XG4gICAgLy8gRXZlcnkgaW50ZXJydXB0aW9uIHRyaWdnZXJzIGEgcmV2YWxpZGF0aW9uXG4gICAgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCA9IHRydWU7XG4gICAgLy8gQ2FuY2VsIHBlbmRpbmcgcm91dGUtbGV2ZWwgZGVmZXJyZWRzIGFuZCBtYXJrIGNhbmNlbGxlZCByb3V0ZXMgZm9yXG4gICAgLy8gcmV2YWxpZGF0aW9uXG4gICAgY2FuY2VsbGVkRGVmZXJyZWRSb3V0ZXMucHVzaCguLi5jYW5jZWxBY3RpdmVEZWZlcnJlZHMoKSk7XG4gICAgLy8gQWJvcnQgaW4tZmxpZ2h0IGZldGNoZXIgbG9hZHNcbiAgICBmZXRjaExvYWRNYXRjaGVzLmZvckVhY2goKF8sIGtleSkgPT4ge1xuICAgICAgaWYgKGZldGNoQ29udHJvbGxlcnMuaGFzKGtleSkpIHtcbiAgICAgICAgY2FuY2VsbGVkRmV0Y2hlckxvYWRzLnB1c2goa2V5KTtcbiAgICAgICAgYWJvcnRGZXRjaGVyKGtleSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gdXBkYXRlRmV0Y2hlclN0YXRlKGtleSwgZmV0Y2hlciwgb3B0cykge1xuICAgIGlmIChvcHRzID09PSB2b2lkIDApIHtcbiAgICAgIG9wdHMgPSB7fTtcbiAgICB9XG4gICAgc3RhdGUuZmV0Y2hlcnMuc2V0KGtleSwgZmV0Y2hlcik7XG4gICAgdXBkYXRlU3RhdGUoe1xuICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgfSwge1xuICAgICAgZmx1c2hTeW5jOiAob3B0cyAmJiBvcHRzLmZsdXNoU3luYykgPT09IHRydWVcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBzZXRGZXRjaGVyRXJyb3Ioa2V5LCByb3V0ZUlkLCBlcnJvciwgb3B0cykge1xuICAgIGlmIChvcHRzID09PSB2b2lkIDApIHtcbiAgICAgIG9wdHMgPSB7fTtcbiAgICB9XG4gICAgbGV0IGJvdW5kYXJ5TWF0Y2ggPSBmaW5kTmVhcmVzdEJvdW5kYXJ5KHN0YXRlLm1hdGNoZXMsIHJvdXRlSWQpO1xuICAgIGRlbGV0ZUZldGNoZXIoa2V5KTtcbiAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICBlcnJvcnM6IHtcbiAgICAgICAgW2JvdW5kYXJ5TWF0Y2gucm91dGUuaWRdOiBlcnJvclxuICAgICAgfSxcbiAgICAgIGZldGNoZXJzOiBuZXcgTWFwKHN0YXRlLmZldGNoZXJzKVxuICAgIH0sIHtcbiAgICAgIGZsdXNoU3luYzogKG9wdHMgJiYgb3B0cy5mbHVzaFN5bmMpID09PSB0cnVlXG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0RmV0Y2hlcihrZXkpIHtcbiAgICBpZiAoZnV0dXJlLnY3X2ZldGNoZXJQZXJzaXN0KSB7XG4gICAgICBhY3RpdmVGZXRjaGVycy5zZXQoa2V5LCAoYWN0aXZlRmV0Y2hlcnMuZ2V0KGtleSkgfHwgMCkgKyAxKTtcbiAgICAgIC8vIElmIHRoaXMgZmV0Y2hlciB3YXMgcHJldmlvdXNseSBtYXJrZWQgZm9yIGRlbGV0aW9uLCB1bm1hcmsgaXQgc2luY2Ugd2VcbiAgICAgIC8vIGhhdmUgYSBuZXcgaW5zdGFuY2VcbiAgICAgIGlmIChkZWxldGVkRmV0Y2hlcnMuaGFzKGtleSkpIHtcbiAgICAgICAgZGVsZXRlZEZldGNoZXJzLmRlbGV0ZShrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3RhdGUuZmV0Y2hlcnMuZ2V0KGtleSkgfHwgSURMRV9GRVRDSEVSO1xuICB9XG4gIGZ1bmN0aW9uIGRlbGV0ZUZldGNoZXIoa2V5KSB7XG4gICAgbGV0IGZldGNoZXIgPSBzdGF0ZS5mZXRjaGVycy5nZXQoa2V5KTtcbiAgICAvLyBEb24ndCBhYm9ydCB0aGUgY29udHJvbGxlciBpZiB0aGlzIGlzIGEgZGVsZXRpb24gb2YgYSBmZXRjaGVyLnN1Ym1pdCgpXG4gICAgLy8gaW4gaXQncyBsb2FkaW5nIHBoYXNlIHNpbmNlIC0gd2UgZG9uJ3Qgd2FudCB0byBhYm9ydCB0aGUgY29ycmVzcG9uZGluZ1xuICAgIC8vIHJldmFsaWRhdGlvbiBhbmQgd2FudCB0aGVtIHRvIGNvbXBsZXRlIGFuZCBsYW5kXG4gICAgaWYgKGZldGNoQ29udHJvbGxlcnMuaGFzKGtleSkgJiYgIShmZXRjaGVyICYmIGZldGNoZXIuc3RhdGUgPT09IFwibG9hZGluZ1wiICYmIGZldGNoUmVsb2FkSWRzLmhhcyhrZXkpKSkge1xuICAgICAgYWJvcnRGZXRjaGVyKGtleSk7XG4gICAgfVxuICAgIGZldGNoTG9hZE1hdGNoZXMuZGVsZXRlKGtleSk7XG4gICAgZmV0Y2hSZWxvYWRJZHMuZGVsZXRlKGtleSk7XG4gICAgZmV0Y2hSZWRpcmVjdElkcy5kZWxldGUoa2V5KTtcbiAgICBkZWxldGVkRmV0Y2hlcnMuZGVsZXRlKGtleSk7XG4gICAgc3RhdGUuZmV0Y2hlcnMuZGVsZXRlKGtleSk7XG4gIH1cbiAgZnVuY3Rpb24gZGVsZXRlRmV0Y2hlckFuZFVwZGF0ZVN0YXRlKGtleSkge1xuICAgIGlmIChmdXR1cmUudjdfZmV0Y2hlclBlcnNpc3QpIHtcbiAgICAgIGxldCBjb3VudCA9IChhY3RpdmVGZXRjaGVycy5nZXQoa2V5KSB8fCAwKSAtIDE7XG4gICAgICBpZiAoY291bnQgPD0gMCkge1xuICAgICAgICBhY3RpdmVGZXRjaGVycy5kZWxldGUoa2V5KTtcbiAgICAgICAgZGVsZXRlZEZldGNoZXJzLmFkZChrZXkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWN0aXZlRmV0Y2hlcnMuc2V0KGtleSwgY291bnQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGVGZXRjaGVyKGtleSk7XG4gICAgfVxuICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgIGZldGNoZXJzOiBuZXcgTWFwKHN0YXRlLmZldGNoZXJzKVxuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIGFib3J0RmV0Y2hlcihrZXkpIHtcbiAgICBsZXQgY29udHJvbGxlciA9IGZldGNoQ29udHJvbGxlcnMuZ2V0KGtleSk7XG4gICAgaW52YXJpYW50KGNvbnRyb2xsZXIsIFwiRXhwZWN0ZWQgZmV0Y2ggY29udHJvbGxlcjogXCIgKyBrZXkpO1xuICAgIGNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICBmZXRjaENvbnRyb2xsZXJzLmRlbGV0ZShrZXkpO1xuICB9XG4gIGZ1bmN0aW9uIG1hcmtGZXRjaGVyc0RvbmUoa2V5cykge1xuICAgIGZvciAobGV0IGtleSBvZiBrZXlzKSB7XG4gICAgICBsZXQgZmV0Y2hlciA9IGdldEZldGNoZXIoa2V5KTtcbiAgICAgIGxldCBkb25lRmV0Y2hlciA9IGdldERvbmVGZXRjaGVyKGZldGNoZXIuZGF0YSk7XG4gICAgICBzdGF0ZS5mZXRjaGVycy5zZXQoa2V5LCBkb25lRmV0Y2hlcik7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIG1hcmtGZXRjaFJlZGlyZWN0c0RvbmUoKSB7XG4gICAgbGV0IGRvbmVLZXlzID0gW107XG4gICAgbGV0IHVwZGF0ZWRGZXRjaGVycyA9IGZhbHNlO1xuICAgIGZvciAobGV0IGtleSBvZiBmZXRjaFJlZGlyZWN0SWRzKSB7XG4gICAgICBsZXQgZmV0Y2hlciA9IHN0YXRlLmZldGNoZXJzLmdldChrZXkpO1xuICAgICAgaW52YXJpYW50KGZldGNoZXIsIFwiRXhwZWN0ZWQgZmV0Y2hlcjogXCIgKyBrZXkpO1xuICAgICAgaWYgKGZldGNoZXIuc3RhdGUgPT09IFwibG9hZGluZ1wiKSB7XG4gICAgICAgIGZldGNoUmVkaXJlY3RJZHMuZGVsZXRlKGtleSk7XG4gICAgICAgIGRvbmVLZXlzLnB1c2goa2V5KTtcbiAgICAgICAgdXBkYXRlZEZldGNoZXJzID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgbWFya0ZldGNoZXJzRG9uZShkb25lS2V5cyk7XG4gICAgcmV0dXJuIHVwZGF0ZWRGZXRjaGVycztcbiAgfVxuICBmdW5jdGlvbiBhYm9ydFN0YWxlRmV0Y2hMb2FkcyhsYW5kZWRJZCkge1xuICAgIGxldCB5ZWV0ZWRLZXlzID0gW107XG4gICAgZm9yIChsZXQgW2tleSwgaWRdIG9mIGZldGNoUmVsb2FkSWRzKSB7XG4gICAgICBpZiAoaWQgPCBsYW5kZWRJZCkge1xuICAgICAgICBsZXQgZmV0Y2hlciA9IHN0YXRlLmZldGNoZXJzLmdldChrZXkpO1xuICAgICAgICBpbnZhcmlhbnQoZmV0Y2hlciwgXCJFeHBlY3RlZCBmZXRjaGVyOiBcIiArIGtleSk7XG4gICAgICAgIGlmIChmZXRjaGVyLnN0YXRlID09PSBcImxvYWRpbmdcIikge1xuICAgICAgICAgIGFib3J0RmV0Y2hlcihrZXkpO1xuICAgICAgICAgIGZldGNoUmVsb2FkSWRzLmRlbGV0ZShrZXkpO1xuICAgICAgICAgIHllZXRlZEtleXMucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIG1hcmtGZXRjaGVyc0RvbmUoeWVldGVkS2V5cyk7XG4gICAgcmV0dXJuIHllZXRlZEtleXMubGVuZ3RoID4gMDtcbiAgfVxuICBmdW5jdGlvbiBnZXRCbG9ja2VyKGtleSwgZm4pIHtcbiAgICBsZXQgYmxvY2tlciA9IHN0YXRlLmJsb2NrZXJzLmdldChrZXkpIHx8IElETEVfQkxPQ0tFUjtcbiAgICBpZiAoYmxvY2tlckZ1bmN0aW9ucy5nZXQoa2V5KSAhPT0gZm4pIHtcbiAgICAgIGJsb2NrZXJGdW5jdGlvbnMuc2V0KGtleSwgZm4pO1xuICAgIH1cbiAgICByZXR1cm4gYmxvY2tlcjtcbiAgfVxuICBmdW5jdGlvbiBkZWxldGVCbG9ja2VyKGtleSkge1xuICAgIHN0YXRlLmJsb2NrZXJzLmRlbGV0ZShrZXkpO1xuICAgIGJsb2NrZXJGdW5jdGlvbnMuZGVsZXRlKGtleSk7XG4gIH1cbiAgLy8gVXRpbGl0eSBmdW5jdGlvbiB0byB1cGRhdGUgYmxvY2tlcnMsIGVuc3VyaW5nIHZhbGlkIHN0YXRlIHRyYW5zaXRpb25zXG4gIGZ1bmN0aW9uIHVwZGF0ZUJsb2NrZXIoa2V5LCBuZXdCbG9ja2VyKSB7XG4gICAgbGV0IGJsb2NrZXIgPSBzdGF0ZS5ibG9ja2Vycy5nZXQoa2V5KSB8fCBJRExFX0JMT0NLRVI7XG4gICAgLy8gUG9vciBtYW5zIHN0YXRlIG1hY2hpbmUgOilcbiAgICAvLyBodHRwczovL21lcm1haWQubGl2ZS9lZGl0I3Bha286ZU5xVmtjOU93ekFNeGw4bDhubmpBWXJFdERJT0hFQklnd3ZLSlRSZUd5M19sRHBJcU8yN2s2YXdNRzBYY3JMbG56ODdud2RvbkVTb2dLWFhCdUU3OXJxNzVYWk8zLXlIZHMwUkpWdXY3MFlyUGxVckNFZTJIZnJPUlMzcnVicVpmdWh0cGc1Qzl3azV0WjRWS2NSVXE4OHE5WjhSUzAtNDhjRTFpSEprTDB1Z2JIdUZMdXM5TDZzcFp5OG5YOU1QMkNOZG9tVmFwb3NxdTNmR2F5VDhUOC1qSlF3aGVwb19VdHBnQlFhREVVb20wNGRaaEFOMWFKQkRsVUtKQnhFMWNlQjJTbWowTWxuLUlCVzVBRlUyZHdVaWt0dF8yUWFxMmRCZmFLZEV1cDg1VVY3WWQtZEtqbG5rYWJsMlB2cjBEVGtUcmVNXG4gICAgaW52YXJpYW50KGJsb2NrZXIuc3RhdGUgPT09IFwidW5ibG9ja2VkXCIgJiYgbmV3QmxvY2tlci5zdGF0ZSA9PT0gXCJibG9ja2VkXCIgfHwgYmxvY2tlci5zdGF0ZSA9PT0gXCJibG9ja2VkXCIgJiYgbmV3QmxvY2tlci5zdGF0ZSA9PT0gXCJibG9ja2VkXCIgfHwgYmxvY2tlci5zdGF0ZSA9PT0gXCJibG9ja2VkXCIgJiYgbmV3QmxvY2tlci5zdGF0ZSA9PT0gXCJwcm9jZWVkaW5nXCIgfHwgYmxvY2tlci5zdGF0ZSA9PT0gXCJibG9ja2VkXCIgJiYgbmV3QmxvY2tlci5zdGF0ZSA9PT0gXCJ1bmJsb2NrZWRcIiB8fCBibG9ja2VyLnN0YXRlID09PSBcInByb2NlZWRpbmdcIiAmJiBuZXdCbG9ja2VyLnN0YXRlID09PSBcInVuYmxvY2tlZFwiLCBcIkludmFsaWQgYmxvY2tlciBzdGF0ZSB0cmFuc2l0aW9uOiBcIiArIGJsb2NrZXIuc3RhdGUgKyBcIiAtPiBcIiArIG5ld0Jsb2NrZXIuc3RhdGUpO1xuICAgIGxldCBibG9ja2VycyA9IG5ldyBNYXAoc3RhdGUuYmxvY2tlcnMpO1xuICAgIGJsb2NrZXJzLnNldChrZXksIG5ld0Jsb2NrZXIpO1xuICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgIGJsb2NrZXJzXG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gc2hvdWxkQmxvY2tOYXZpZ2F0aW9uKF9yZWY0KSB7XG4gICAgbGV0IHtcbiAgICAgIGN1cnJlbnRMb2NhdGlvbixcbiAgICAgIG5leHRMb2NhdGlvbixcbiAgICAgIGhpc3RvcnlBY3Rpb25cbiAgICB9ID0gX3JlZjQ7XG4gICAgaWYgKGJsb2NrZXJGdW5jdGlvbnMuc2l6ZSA9PT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBXZSBvbnkgc3VwcG9ydCBhIHNpbmdsZSBhY3RpdmUgYmxvY2tlciBhdCB0aGUgbW9tZW50IHNpbmNlIHdlIGRvbid0IGhhdmVcbiAgICAvLyBhbnkgY29tcGVsbGluZyB1c2UgY2FzZXMgZm9yIG11bHRpLWJsb2NrZXIgeWV0XG4gICAgaWYgKGJsb2NrZXJGdW5jdGlvbnMuc2l6ZSA+IDEpIHtcbiAgICAgIHdhcm5pbmcoZmFsc2UsIFwiQSByb3V0ZXIgb25seSBzdXBwb3J0cyBvbmUgYmxvY2tlciBhdCBhIHRpbWVcIik7XG4gICAgfVxuICAgIGxldCBlbnRyaWVzID0gQXJyYXkuZnJvbShibG9ja2VyRnVuY3Rpb25zLmVudHJpZXMoKSk7XG4gICAgbGV0IFtibG9ja2VyS2V5LCBibG9ja2VyRnVuY3Rpb25dID0gZW50cmllc1tlbnRyaWVzLmxlbmd0aCAtIDFdO1xuICAgIGxldCBibG9ja2VyID0gc3RhdGUuYmxvY2tlcnMuZ2V0KGJsb2NrZXJLZXkpO1xuICAgIGlmIChibG9ja2VyICYmIGJsb2NrZXIuc3RhdGUgPT09IFwicHJvY2VlZGluZ1wiKSB7XG4gICAgICAvLyBJZiB0aGUgYmxvY2tlciBpcyBjdXJyZW50bHkgcHJvY2VlZGluZywgd2UgZG9uJ3QgbmVlZCB0byByZS1jaGVja1xuICAgICAgLy8gaXQgYW5kIGNhbiBsZXQgdGhpcyBuYXZpZ2F0aW9uIGNvbnRpbnVlXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIEF0IHRoaXMgcG9pbnQsIHdlIGtub3cgd2UncmUgdW5ibG9ja2VkL2Jsb2NrZWQgc28gd2UgbmVlZCB0byBjaGVjayB0aGVcbiAgICAvLyB1c2VyLXByb3ZpZGVkIGJsb2NrZXIgZnVuY3Rpb25cbiAgICBpZiAoYmxvY2tlckZ1bmN0aW9uKHtcbiAgICAgIGN1cnJlbnRMb2NhdGlvbixcbiAgICAgIG5leHRMb2NhdGlvbixcbiAgICAgIGhpc3RvcnlBY3Rpb25cbiAgICB9KSkge1xuICAgICAgcmV0dXJuIGJsb2NrZXJLZXk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGNhbmNlbEFjdGl2ZURlZmVycmVkcyhwcmVkaWNhdGUpIHtcbiAgICBsZXQgY2FuY2VsbGVkUm91dGVJZHMgPSBbXTtcbiAgICBhY3RpdmVEZWZlcnJlZHMuZm9yRWFjaCgoZGZkLCByb3V0ZUlkKSA9PiB7XG4gICAgICBpZiAoIXByZWRpY2F0ZSB8fCBwcmVkaWNhdGUocm91dGVJZCkpIHtcbiAgICAgICAgLy8gQ2FuY2VsIHRoZSBkZWZlcnJlZCAtIGJ1dCBkbyBub3QgcmVtb3ZlIGZyb20gYWN0aXZlRGVmZXJyZWRzIGhlcmUgLVxuICAgICAgICAvLyB3ZSByZWx5IG9uIHRoZSBzdWJzY3JpYmVycyB0byBkbyB0aGF0IHNvIG91ciB0ZXN0cyBjYW4gYXNzZXJ0IHByb3BlclxuICAgICAgICAvLyBjbGVhbnVwIHZpYSBfaW50ZXJuYWxBY3RpdmVEZWZlcnJlZHNcbiAgICAgICAgZGZkLmNhbmNlbCgpO1xuICAgICAgICBjYW5jZWxsZWRSb3V0ZUlkcy5wdXNoKHJvdXRlSWQpO1xuICAgICAgICBhY3RpdmVEZWZlcnJlZHMuZGVsZXRlKHJvdXRlSWQpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBjYW5jZWxsZWRSb3V0ZUlkcztcbiAgfVxuICAvLyBPcHQgaW4gdG8gY2FwdHVyaW5nIGFuZCByZXBvcnRpbmcgc2Nyb2xsIHBvc2l0aW9ucyBkdXJpbmcgbmF2aWdhdGlvbnMsXG4gIC8vIHVzZWQgYnkgdGhlIDxTY3JvbGxSZXN0b3JhdGlvbj4gY29tcG9uZW50XG4gIGZ1bmN0aW9uIGVuYWJsZVNjcm9sbFJlc3RvcmF0aW9uKHBvc2l0aW9ucywgZ2V0UG9zaXRpb24sIGdldEtleSkge1xuICAgIHNhdmVkU2Nyb2xsUG9zaXRpb25zID0gcG9zaXRpb25zO1xuICAgIGdldFNjcm9sbFBvc2l0aW9uID0gZ2V0UG9zaXRpb247XG4gICAgZ2V0U2Nyb2xsUmVzdG9yYXRpb25LZXkgPSBnZXRLZXkgfHwgbnVsbDtcbiAgICAvLyBQZXJmb3JtIGluaXRpYWwgaHlkcmF0aW9uIHNjcm9sbCByZXN0b3JhdGlvbiwgc2luY2Ugd2UgbWlzcyB0aGUgYm9hdCBvblxuICAgIC8vIHRoZSBpbml0aWFsIHVwZGF0ZVN0YXRlKCkgYmVjYXVzZSB3ZSd2ZSBub3QgeWV0IHJlbmRlcmVkIDxTY3JvbGxSZXN0b3JhdGlvbi8+XG4gICAgLy8gYW5kIHRoZXJlZm9yZSBoYXZlIG5vIHNhdmVkU2Nyb2xsUG9zaXRpb25zIGF2YWlsYWJsZVxuICAgIGlmICghaW5pdGlhbFNjcm9sbFJlc3RvcmVkICYmIHN0YXRlLm5hdmlnYXRpb24gPT09IElETEVfTkFWSUdBVElPTikge1xuICAgICAgaW5pdGlhbFNjcm9sbFJlc3RvcmVkID0gdHJ1ZTtcbiAgICAgIGxldCB5ID0gZ2V0U2F2ZWRTY3JvbGxQb3NpdGlvbihzdGF0ZS5sb2NhdGlvbiwgc3RhdGUubWF0Y2hlcyk7XG4gICAgICBpZiAoeSAhPSBudWxsKSB7XG4gICAgICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgICAgICByZXN0b3JlU2Nyb2xsUG9zaXRpb246IHlcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBzYXZlZFNjcm9sbFBvc2l0aW9ucyA9IG51bGw7XG4gICAgICBnZXRTY3JvbGxQb3NpdGlvbiA9IG51bGw7XG4gICAgICBnZXRTY3JvbGxSZXN0b3JhdGlvbktleSA9IG51bGw7XG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBnZXRTY3JvbGxLZXkobG9jYXRpb24sIG1hdGNoZXMpIHtcbiAgICBpZiAoZ2V0U2Nyb2xsUmVzdG9yYXRpb25LZXkpIHtcbiAgICAgIGxldCBrZXkgPSBnZXRTY3JvbGxSZXN0b3JhdGlvbktleShsb2NhdGlvbiwgbWF0Y2hlcy5tYXAobSA9PiBjb252ZXJ0Um91dGVNYXRjaFRvVWlNYXRjaChtLCBzdGF0ZS5sb2FkZXJEYXRhKSkpO1xuICAgICAgcmV0dXJuIGtleSB8fCBsb2NhdGlvbi5rZXk7XG4gICAgfVxuICAgIHJldHVybiBsb2NhdGlvbi5rZXk7XG4gIH1cbiAgZnVuY3Rpb24gc2F2ZVNjcm9sbFBvc2l0aW9uKGxvY2F0aW9uLCBtYXRjaGVzKSB7XG4gICAgaWYgKHNhdmVkU2Nyb2xsUG9zaXRpb25zICYmIGdldFNjcm9sbFBvc2l0aW9uKSB7XG4gICAgICBsZXQga2V5ID0gZ2V0U2Nyb2xsS2V5KGxvY2F0aW9uLCBtYXRjaGVzKTtcbiAgICAgIHNhdmVkU2Nyb2xsUG9zaXRpb25zW2tleV0gPSBnZXRTY3JvbGxQb3NpdGlvbigpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBnZXRTYXZlZFNjcm9sbFBvc2l0aW9uKGxvY2F0aW9uLCBtYXRjaGVzKSB7XG4gICAgaWYgKHNhdmVkU2Nyb2xsUG9zaXRpb25zKSB7XG4gICAgICBsZXQga2V5ID0gZ2V0U2Nyb2xsS2V5KGxvY2F0aW9uLCBtYXRjaGVzKTtcbiAgICAgIGxldCB5ID0gc2F2ZWRTY3JvbGxQb3NpdGlvbnNba2V5XTtcbiAgICAgIGlmICh0eXBlb2YgeSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICByZXR1cm4geTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgZnVuY3Rpb24gX2ludGVybmFsU2V0Um91dGVzKG5ld1JvdXRlcykge1xuICAgIG1hbmlmZXN0ID0ge307XG4gICAgaW5GbGlnaHREYXRhUm91dGVzID0gY29udmVydFJvdXRlc1RvRGF0YVJvdXRlcyhuZXdSb3V0ZXMsIG1hcFJvdXRlUHJvcGVydGllcywgdW5kZWZpbmVkLCBtYW5pZmVzdCk7XG4gIH1cbiAgcm91dGVyID0ge1xuICAgIGdldCBiYXNlbmFtZSgpIHtcbiAgICAgIHJldHVybiBiYXNlbmFtZTtcbiAgICB9LFxuICAgIGdldCBmdXR1cmUoKSB7XG4gICAgICByZXR1cm4gZnV0dXJlO1xuICAgIH0sXG4gICAgZ2V0IHN0YXRlKCkge1xuICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH0sXG4gICAgZ2V0IHJvdXRlcygpIHtcbiAgICAgIHJldHVybiBkYXRhUm91dGVzO1xuICAgIH0sXG4gICAgZ2V0IHdpbmRvdygpIHtcbiAgICAgIHJldHVybiByb3V0ZXJXaW5kb3c7XG4gICAgfSxcbiAgICBpbml0aWFsaXplLFxuICAgIHN1YnNjcmliZSxcbiAgICBlbmFibGVTY3JvbGxSZXN0b3JhdGlvbixcbiAgICBuYXZpZ2F0ZSxcbiAgICBmZXRjaCxcbiAgICByZXZhbGlkYXRlLFxuICAgIC8vIFBhc3N0aHJvdWdoIHRvIGhpc3RvcnktYXdhcmUgY3JlYXRlSHJlZiB1c2VkIGJ5IHVzZUhyZWYgc28gd2UgZ2V0IHByb3BlclxuICAgIC8vIGhhc2gtYXdhcmUgVVJMcyBpbiBET00gcGF0aHNcbiAgICBjcmVhdGVIcmVmOiB0byA9PiBpbml0Lmhpc3RvcnkuY3JlYXRlSHJlZih0byksXG4gICAgZW5jb2RlTG9jYXRpb246IHRvID0+IGluaXQuaGlzdG9yeS5lbmNvZGVMb2NhdGlvbih0byksXG4gICAgZ2V0RmV0Y2hlcixcbiAgICBkZWxldGVGZXRjaGVyOiBkZWxldGVGZXRjaGVyQW5kVXBkYXRlU3RhdGUsXG4gICAgZGlzcG9zZSxcbiAgICBnZXRCbG9ja2VyLFxuICAgIGRlbGV0ZUJsb2NrZXIsXG4gICAgX2ludGVybmFsRmV0Y2hDb250cm9sbGVyczogZmV0Y2hDb250cm9sbGVycyxcbiAgICBfaW50ZXJuYWxBY3RpdmVEZWZlcnJlZHM6IGFjdGl2ZURlZmVycmVkcyxcbiAgICAvLyBUT0RPOiBSZW1vdmUgc2V0Um91dGVzLCBpdCdzIHRlbXBvcmFyeSB0byBhdm9pZCBkZWFsaW5nIHdpdGhcbiAgICAvLyB1cGRhdGluZyB0aGUgdHJlZSB3aGlsZSB2YWxpZGF0aW5nIHRoZSB1cGRhdGUgYWxnb3JpdGhtLlxuICAgIF9pbnRlcm5hbFNldFJvdXRlc1xuICB9O1xuICByZXR1cm4gcm91dGVyO1xufVxuLy8jZW5kcmVnaW9uXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8jcmVnaW9uIGNyZWF0ZVN0YXRpY0hhbmRsZXJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5jb25zdCBVTlNBRkVfREVGRVJSRURfU1lNQk9MID0gU3ltYm9sKFwiZGVmZXJyZWRcIik7XG5mdW5jdGlvbiBjcmVhdGVTdGF0aWNIYW5kbGVyKHJvdXRlcywgb3B0cykge1xuICBpbnZhcmlhbnQocm91dGVzLmxlbmd0aCA+IDAsIFwiWW91IG11c3QgcHJvdmlkZSBhIG5vbi1lbXB0eSByb3V0ZXMgYXJyYXkgdG8gY3JlYXRlU3RhdGljSGFuZGxlclwiKTtcbiAgbGV0IG1hbmlmZXN0ID0ge307XG4gIGxldCBiYXNlbmFtZSA9IChvcHRzID8gb3B0cy5iYXNlbmFtZSA6IG51bGwpIHx8IFwiL1wiO1xuICBsZXQgbWFwUm91dGVQcm9wZXJ0aWVzO1xuICBpZiAob3B0cyAhPSBudWxsICYmIG9wdHMubWFwUm91dGVQcm9wZXJ0aWVzKSB7XG4gICAgbWFwUm91dGVQcm9wZXJ0aWVzID0gb3B0cy5tYXBSb3V0ZVByb3BlcnRpZXM7XG4gIH0gZWxzZSBpZiAob3B0cyAhPSBudWxsICYmIG9wdHMuZGV0ZWN0RXJyb3JCb3VuZGFyeSkge1xuICAgIC8vIElmIHRoZXkgYXJlIHN0aWxsIHVzaW5nIHRoZSBkZXByZWNhdGVkIHZlcnNpb24sIHdyYXAgaXQgd2l0aCB0aGUgbmV3IEFQSVxuICAgIGxldCBkZXRlY3RFcnJvckJvdW5kYXJ5ID0gb3B0cy5kZXRlY3RFcnJvckJvdW5kYXJ5O1xuICAgIG1hcFJvdXRlUHJvcGVydGllcyA9IHJvdXRlID0+ICh7XG4gICAgICBoYXNFcnJvckJvdW5kYXJ5OiBkZXRlY3RFcnJvckJvdW5kYXJ5KHJvdXRlKVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG1hcFJvdXRlUHJvcGVydGllcyA9IGRlZmF1bHRNYXBSb3V0ZVByb3BlcnRpZXM7XG4gIH1cbiAgLy8gQ29uZmlnIGRyaXZlbiBiZWhhdmlvciBmbGFnc1xuICBsZXQgZnV0dXJlID0gX2V4dGVuZHMoe1xuICAgIHY3X3JlbGF0aXZlU3BsYXRQYXRoOiBmYWxzZSxcbiAgICB2N190aHJvd0Fib3J0UmVhc29uOiBmYWxzZVxuICB9LCBvcHRzID8gb3B0cy5mdXR1cmUgOiBudWxsKTtcbiAgbGV0IGRhdGFSb3V0ZXMgPSBjb252ZXJ0Um91dGVzVG9EYXRhUm91dGVzKHJvdXRlcywgbWFwUm91dGVQcm9wZXJ0aWVzLCB1bmRlZmluZWQsIG1hbmlmZXN0KTtcbiAgLyoqXG4gICAqIFRoZSBxdWVyeSgpIG1ldGhvZCBpcyBpbnRlbmRlZCBmb3IgZG9jdW1lbnQgcmVxdWVzdHMsIGluIHdoaWNoIHdlIHdhbnQgdG9cbiAgICogY2FsbCBhbiBvcHRpb25hbCBhY3Rpb24gYW5kIHBvdGVudGlhbGx5IG11bHRpcGxlIGxvYWRlcnMgZm9yIGFsbCBuZXN0ZWRcbiAgICogcm91dGVzLiAgSXQgcmV0dXJucyBhIFN0YXRpY0hhbmRsZXJDb250ZXh0IG9iamVjdCwgd2hpY2ggaXMgdmVyeSBzaW1pbGFyXG4gICAqIHRvIHRoZSByb3V0ZXIgc3RhdGUgKGxvY2F0aW9uLCBsb2FkZXJEYXRhLCBhY3Rpb25EYXRhLCBlcnJvcnMsIGV0Yy4pIGFuZFxuICAgKiBhbHNvIGFkZHMgU1NSLXNwZWNpZmljIGluZm9ybWF0aW9uIHN1Y2ggYXMgdGhlIHN0YXR1c0NvZGUgYW5kIGhlYWRlcnNcbiAgICogZnJvbSBhY3Rpb24vbG9hZGVycyBSZXNwb25zZXMuXG4gICAqXG4gICAqIEl0IF9zaG91bGRfIG5ldmVyIHRocm93IGFuZCBzaG91bGQgcmVwb3J0IGFsbCBlcnJvcnMgdGhyb3VnaCB0aGVcbiAgICogcmV0dXJuZWQgY29udGV4dC5lcnJvcnMgb2JqZWN0LCBwcm9wZXJseSBhc3NvY2lhdGluZyBlcnJvcnMgdG8gdGhlaXIgZXJyb3JcbiAgICogYm91bmRhcnkuICBBZGRpdGlvbmFsbHksIGl0IHRyYWNrcyBfZGVlcGVzdFJlbmRlcmVkQm91bmRhcnlJZCB3aGljaCBjYW4gYmVcbiAgICogdXNlZCB0byBlbXVsYXRlIFJlYWN0IGVycm9yIGJvdW5kYXJpZXMgZHVyaW5nIFNTciBieSBwZXJmb3JtaW5nIGEgc2Vjb25kXG4gICAqIHBhc3Mgb25seSBkb3duIHRvIHRoZSBib3VuZGFyeUlkLlxuICAgKlxuICAgKiBUaGUgb25lIGV4Y2VwdGlvbiB3aGVyZSB3ZSBkbyBub3QgcmV0dXJuIGEgU3RhdGljSGFuZGxlckNvbnRleHQgaXMgd2hlbiBhXG4gICAqIHJlZGlyZWN0IHJlc3BvbnNlIGlzIHJldHVybmVkIG9yIHRocm93biBmcm9tIGFueSBhY3Rpb24vbG9hZGVyLiAgV2VcbiAgICogcHJvcGFnYXRlIHRoYXQgb3V0IGFuZCByZXR1cm4gdGhlIHJhdyBSZXNwb25zZSBzbyB0aGUgSFRUUCBzZXJ2ZXIgY2FuXG4gICAqIHJldHVybiBpdCBkaXJlY3RseS5cbiAgICpcbiAgICogLSBgb3B0cy5yZXF1ZXN0Q29udGV4dGAgaXMgYW4gb3B0aW9uYWwgc2VydmVyIGNvbnRleHQgdGhhdCB3aWxsIGJlIHBhc3NlZFxuICAgKiAgIHRvIGFjdGlvbnMvbG9hZGVycyBpbiB0aGUgYGNvbnRleHRgIHBhcmFtZXRlclxuICAgKiAtIGBvcHRzLnNraXBMb2FkZXJFcnJvckJ1YmJsaW5nYCBpcyBhbiBvcHRpb25hbCBwYXJhbWV0ZXIgdGhhdCB3aWxsIHByZXZlbnRcbiAgICogICB0aGUgYnViYmxpbmcgb2YgZXJyb3JzIHdoaWNoIGFsbG93cyBzaW5nbGUtZmV0Y2gtdHlwZSBpbXBsZW1lbnRhdGlvbnNcbiAgICogICB3aGVyZSB0aGUgY2xpZW50IHdpbGwgaGFuZGxlIHRoZSBidWJibGluZyBhbmQgd2UgbWF5IG5lZWQgdG8gcmV0dXJuIGRhdGFcbiAgICogICBmb3IgdGhlIGhhbmRsaW5nIHJvdXRlXG4gICAqL1xuICBhc3luYyBmdW5jdGlvbiBxdWVyeShyZXF1ZXN0LCBfdGVtcDMpIHtcbiAgICBsZXQge1xuICAgICAgcmVxdWVzdENvbnRleHQsXG4gICAgICBza2lwTG9hZGVyRXJyb3JCdWJibGluZyxcbiAgICAgIHVuc3RhYmxlX2RhdGFTdHJhdGVneVxuICAgIH0gPSBfdGVtcDMgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAzO1xuICAgIGxldCB1cmwgPSBuZXcgVVJMKHJlcXVlc3QudXJsKTtcbiAgICBsZXQgbWV0aG9kID0gcmVxdWVzdC5tZXRob2Q7XG4gICAgbGV0IGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oXCJcIiwgY3JlYXRlUGF0aCh1cmwpLCBudWxsLCBcImRlZmF1bHRcIik7XG4gICAgbGV0IG1hdGNoZXMgPSBtYXRjaFJvdXRlcyhkYXRhUm91dGVzLCBsb2NhdGlvbiwgYmFzZW5hbWUpO1xuICAgIC8vIFNTUiBzdXBwb3J0cyBIRUFEIHJlcXVlc3RzIHdoaWxlIFNQQSBkb2Vzbid0XG4gICAgaWYgKCFpc1ZhbGlkTWV0aG9kKG1ldGhvZCkgJiYgbWV0aG9kICE9PSBcIkhFQURcIikge1xuICAgICAgbGV0IGVycm9yID0gZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDUsIHtcbiAgICAgICAgbWV0aG9kXG4gICAgICB9KTtcbiAgICAgIGxldCB7XG4gICAgICAgIG1hdGNoZXM6IG1ldGhvZE5vdEFsbG93ZWRNYXRjaGVzLFxuICAgICAgICByb3V0ZVxuICAgICAgfSA9IGdldFNob3J0Q2lyY3VpdE1hdGNoZXMoZGF0YVJvdXRlcyk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBiYXNlbmFtZSxcbiAgICAgICAgbG9jYXRpb24sXG4gICAgICAgIG1hdGNoZXM6IG1ldGhvZE5vdEFsbG93ZWRNYXRjaGVzLFxuICAgICAgICBsb2FkZXJEYXRhOiB7fSxcbiAgICAgICAgYWN0aW9uRGF0YTogbnVsbCxcbiAgICAgICAgZXJyb3JzOiB7XG4gICAgICAgICAgW3JvdXRlLmlkXTogZXJyb3JcbiAgICAgICAgfSxcbiAgICAgICAgc3RhdHVzQ29kZTogZXJyb3Iuc3RhdHVzLFxuICAgICAgICBsb2FkZXJIZWFkZXJzOiB7fSxcbiAgICAgICAgYWN0aW9uSGVhZGVyczoge30sXG4gICAgICAgIGFjdGl2ZURlZmVycmVkczogbnVsbFxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKCFtYXRjaGVzKSB7XG4gICAgICBsZXQgZXJyb3IgPSBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNCwge1xuICAgICAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWVcbiAgICAgIH0pO1xuICAgICAgbGV0IHtcbiAgICAgICAgbWF0Y2hlczogbm90Rm91bmRNYXRjaGVzLFxuICAgICAgICByb3V0ZVxuICAgICAgfSA9IGdldFNob3J0Q2lyY3VpdE1hdGNoZXMoZGF0YVJvdXRlcyk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBiYXNlbmFtZSxcbiAgICAgICAgbG9jYXRpb24sXG4gICAgICAgIG1hdGNoZXM6IG5vdEZvdW5kTWF0Y2hlcyxcbiAgICAgICAgbG9hZGVyRGF0YToge30sXG4gICAgICAgIGFjdGlvbkRhdGE6IG51bGwsXG4gICAgICAgIGVycm9yczoge1xuICAgICAgICAgIFtyb3V0ZS5pZF06IGVycm9yXG4gICAgICAgIH0sXG4gICAgICAgIHN0YXR1c0NvZGU6IGVycm9yLnN0YXR1cyxcbiAgICAgICAgbG9hZGVySGVhZGVyczoge30sXG4gICAgICAgIGFjdGlvbkhlYWRlcnM6IHt9LFxuICAgICAgICBhY3RpdmVEZWZlcnJlZHM6IG51bGxcbiAgICAgIH07XG4gICAgfVxuICAgIGxldCByZXN1bHQgPSBhd2FpdCBxdWVyeUltcGwocmVxdWVzdCwgbG9jYXRpb24sIG1hdGNoZXMsIHJlcXVlc3RDb250ZXh0LCB1bnN0YWJsZV9kYXRhU3RyYXRlZ3kgfHwgbnVsbCwgc2tpcExvYWRlckVycm9yQnViYmxpbmcgPT09IHRydWUsIG51bGwpO1xuICAgIGlmIChpc1Jlc3BvbnNlKHJlc3VsdCkpIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8vIFdoZW4gcmV0dXJuaW5nIFN0YXRpY0hhbmRsZXJDb250ZXh0LCB3ZSBwYXRjaCBiYWNrIGluIHRoZSBsb2NhdGlvbiBoZXJlXG4gICAgLy8gc2luY2Ugd2UgbmVlZCBpdCBmb3IgUmVhY3QgQ29udGV4dC4gIEJ1dCB0aGlzIGhlbHBzIGtlZXAgb3VyIHN1Ym1pdCBhbmRcbiAgICAvLyBsb2FkUm91dGVEYXRhIG9wZXJhdGluZyBvbiBhIFJlcXVlc3QgaW5zdGVhZCBvZiBhIExvY2F0aW9uXG4gICAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAgIGxvY2F0aW9uLFxuICAgICAgYmFzZW5hbWVcbiAgICB9LCByZXN1bHQpO1xuICB9XG4gIC8qKlxuICAgKiBUaGUgcXVlcnlSb3V0ZSgpIG1ldGhvZCBpcyBpbnRlbmRlZCBmb3IgdGFyZ2V0ZWQgcm91dGUgcmVxdWVzdHMsIGVpdGhlclxuICAgKiBmb3IgZmV0Y2ggP19kYXRhIHJlcXVlc3RzIG9yIHJlc291cmNlIHJvdXRlIHJlcXVlc3RzLiAgSW4gdGhpcyBjYXNlLCB3ZVxuICAgKiBhcmUgb25seSBldmVyIGNhbGxpbmcgYSBzaW5nbGUgYWN0aW9uIG9yIGxvYWRlciwgYW5kIHdlIGFyZSByZXR1cm5pbmcgdGhlXG4gICAqIHJldHVybmVkIHZhbHVlIGRpcmVjdGx5LiAgSW4gbW9zdCBjYXNlcywgdGhpcyB3aWxsIGJlIGEgUmVzcG9uc2UgcmV0dXJuZWRcbiAgICogZnJvbSB0aGUgYWN0aW9uL2xvYWRlciwgYnV0IGl0IG1heSBiZSBhIHByaW1pdGl2ZSBvciBvdGhlciB2YWx1ZSBhcyB3ZWxsIC1cbiAgICogYW5kIGluIHN1Y2ggY2FzZXMgdGhlIGNhbGxpbmcgY29udGV4dCBzaG91bGQgaGFuZGxlIHRoYXQgYWNjb3JkaW5nbHkuXG4gICAqXG4gICAqIFdlIGRvIHJlc3BlY3QgdGhlIHRocm93L3JldHVybiBkaWZmZXJlbnRpYXRpb24sIHNvIGlmIGFuIGFjdGlvbi9sb2FkZXJcbiAgICogdGhyb3dzLCB0aGVuIHRoaXMgbWV0aG9kIHdpbGwgdGhyb3cgdGhlIHZhbHVlLiAgVGhpcyBpcyBpbXBvcnRhbnQgc28gd2VcbiAgICogY2FuIGRvIHByb3BlciBib3VuZGFyeSBpZGVudGlmaWNhdGlvbiBpbiBSZW1peCB3aGVyZSBhIHRocm93biBSZXNwb25zZVxuICAgKiBtdXN0IGdvIHRvIHRoZSBDYXRjaCBCb3VuZGFyeSBidXQgYSByZXR1cm5lZCBSZXNwb25zZSBpcyBoYXBweS1wYXRoLlxuICAgKlxuICAgKiBPbmUgdGhpbmcgdG8gbm90ZSBpcyB0aGF0IGFueSBSb3V0ZXItaW5pdGlhdGVkIEVycm9ycyB0aGF0IG1ha2Ugc2Vuc2VcbiAgICogdG8gYXNzb2NpYXRlIHdpdGggYSBzdGF0dXMgY29kZSB3aWxsIGJlIHRocm93biBhcyBhbiBFcnJvclJlc3BvbnNlXG4gICAqIGluc3RhbmNlIHdoaWNoIGluY2x1ZGUgdGhlIHJhdyBFcnJvciwgc3VjaCB0aGF0IHRoZSBjYWxsaW5nIGNvbnRleHQgY2FuXG4gICAqIHNlcmlhbGl6ZSB0aGUgZXJyb3IgYXMgdGhleSBzZWUgZml0IHdoaWxlIGluY2x1ZGluZyB0aGUgcHJvcGVyIHJlc3BvbnNlXG4gICAqIGNvZGUuICBFeGFtcGxlcyBoZXJlIGFyZSA0MDQgYW5kIDQwNSBlcnJvcnMgdGhhdCBvY2N1ciBwcmlvciB0byByZWFjaGluZ1xuICAgKiBhbnkgdXNlci1kZWZpbmVkIGxvYWRlcnMuXG4gICAqXG4gICAqIC0gYG9wdHMucm91dGVJZGAgYWxsb3dzIHlvdSB0byBzcGVjaWZ5IHRoZSBzcGVjaWZpYyByb3V0ZSBoYW5kbGVyIHRvIGNhbGwuXG4gICAqICAgSWYgbm90IHByb3ZpZGVkIHRoZSBoYW5kbGVyIHdpbGwgZGV0ZXJtaW5lIHRoZSBwcm9wZXIgcm91dGUgYnkgbWF0Y2hpbmdcbiAgICogICBhZ2FpbnN0IGByZXF1ZXN0LnVybGBcbiAgICogLSBgb3B0cy5yZXF1ZXN0Q29udGV4dGAgaXMgYW4gb3B0aW9uYWwgc2VydmVyIGNvbnRleHQgdGhhdCB3aWxsIGJlIHBhc3NlZFxuICAgKiAgICB0byBhY3Rpb25zL2xvYWRlcnMgaW4gdGhlIGBjb250ZXh0YCBwYXJhbWV0ZXJcbiAgICovXG4gIGFzeW5jIGZ1bmN0aW9uIHF1ZXJ5Um91dGUocmVxdWVzdCwgX3RlbXA0KSB7XG4gICAgbGV0IHtcbiAgICAgIHJvdXRlSWQsXG4gICAgICByZXF1ZXN0Q29udGV4dCxcbiAgICAgIHVuc3RhYmxlX2RhdGFTdHJhdGVneVxuICAgIH0gPSBfdGVtcDQgPT09IHZvaWQgMCA/IHt9IDogX3RlbXA0O1xuICAgIGxldCB1cmwgPSBuZXcgVVJMKHJlcXVlc3QudXJsKTtcbiAgICBsZXQgbWV0aG9kID0gcmVxdWVzdC5tZXRob2Q7XG4gICAgbGV0IGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oXCJcIiwgY3JlYXRlUGF0aCh1cmwpLCBudWxsLCBcImRlZmF1bHRcIik7XG4gICAgbGV0IG1hdGNoZXMgPSBtYXRjaFJvdXRlcyhkYXRhUm91dGVzLCBsb2NhdGlvbiwgYmFzZW5hbWUpO1xuICAgIC8vIFNTUiBzdXBwb3J0cyBIRUFEIHJlcXVlc3RzIHdoaWxlIFNQQSBkb2Vzbid0XG4gICAgaWYgKCFpc1ZhbGlkTWV0aG9kKG1ldGhvZCkgJiYgbWV0aG9kICE9PSBcIkhFQURcIiAmJiBtZXRob2QgIT09IFwiT1BUSU9OU1wiKSB7XG4gICAgICB0aHJvdyBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNSwge1xuICAgICAgICBtZXRob2RcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoIW1hdGNoZXMpIHtcbiAgICAgIHRocm93IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA0LCB7XG4gICAgICAgIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZVxuICAgICAgfSk7XG4gICAgfVxuICAgIGxldCBtYXRjaCA9IHJvdXRlSWQgPyBtYXRjaGVzLmZpbmQobSA9PiBtLnJvdXRlLmlkID09PSByb3V0ZUlkKSA6IGdldFRhcmdldE1hdGNoKG1hdGNoZXMsIGxvY2F0aW9uKTtcbiAgICBpZiAocm91dGVJZCAmJiAhbWF0Y2gpIHtcbiAgICAgIHRocm93IGdldEludGVybmFsUm91dGVyRXJyb3IoNDAzLCB7XG4gICAgICAgIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgICAgcm91dGVJZFxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICghbWF0Y2gpIHtcbiAgICAgIC8vIFRoaXMgc2hvdWxkIG5ldmVyIGhpdCBJIGRvbid0IHRoaW5rP1xuICAgICAgdGhyb3cgZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDQsIHtcbiAgICAgICAgcGF0aG5hbWU6IGxvY2F0aW9uLnBhdGhuYW1lXG4gICAgICB9KTtcbiAgICB9XG4gICAgbGV0IHJlc3VsdCA9IGF3YWl0IHF1ZXJ5SW1wbChyZXF1ZXN0LCBsb2NhdGlvbiwgbWF0Y2hlcywgcmVxdWVzdENvbnRleHQsIHVuc3RhYmxlX2RhdGFTdHJhdGVneSB8fCBudWxsLCBmYWxzZSwgbWF0Y2gpO1xuICAgIGlmIChpc1Jlc3BvbnNlKHJlc3VsdCkpIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGxldCBlcnJvciA9IHJlc3VsdC5lcnJvcnMgPyBPYmplY3QudmFsdWVzKHJlc3VsdC5lcnJvcnMpWzBdIDogdW5kZWZpbmVkO1xuICAgIGlmIChlcnJvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBJZiB3ZSBnb3QgYmFjayByZXN1bHQuZXJyb3JzLCB0aGF0IG1lYW5zIHRoZSBsb2FkZXIvYWN0aW9uIHRocmV3XG4gICAgICAvLyBfc29tZXRoaW5nXyB0aGF0IHdhc24ndCBhIFJlc3BvbnNlLCBidXQgaXQncyBub3QgZ3VhcmFudGVlZC9yZXF1aXJlZFxuICAgICAgLy8gdG8gYmUgYW4gYGluc3RhbmNlb2YgRXJyb3JgIGVpdGhlciwgc28gd2UgaGF2ZSB0byB1c2UgdGhyb3cgaGVyZSB0b1xuICAgICAgLy8gcHJlc2VydmUgdGhlIFwiZXJyb3JcIiBzdGF0ZSBvdXRzaWRlIG9mIHF1ZXJ5SW1wbC5cbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgICAvLyBQaWNrIG9mZiB0aGUgcmlnaHQgc3RhdGUgdmFsdWUgdG8gcmV0dXJuXG4gICAgaWYgKHJlc3VsdC5hY3Rpb25EYXRhKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyhyZXN1bHQuYWN0aW9uRGF0YSlbMF07XG4gICAgfVxuICAgIGlmIChyZXN1bHQubG9hZGVyRGF0YSkge1xuICAgICAgdmFyIF9yZXN1bHQkYWN0aXZlRGVmZXJyZTtcbiAgICAgIGxldCBkYXRhID0gT2JqZWN0LnZhbHVlcyhyZXN1bHQubG9hZGVyRGF0YSlbMF07XG4gICAgICBpZiAoKF9yZXN1bHQkYWN0aXZlRGVmZXJyZSA9IHJlc3VsdC5hY3RpdmVEZWZlcnJlZHMpICE9IG51bGwgJiYgX3Jlc3VsdCRhY3RpdmVEZWZlcnJlW21hdGNoLnJvdXRlLmlkXSkge1xuICAgICAgICBkYXRhW1VOU0FGRV9ERUZFUlJFRF9TWU1CT0xdID0gcmVzdWx0LmFjdGl2ZURlZmVycmVkc1ttYXRjaC5yb3V0ZS5pZF07XG4gICAgICB9XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuICBhc3luYyBmdW5jdGlvbiBxdWVyeUltcGwocmVxdWVzdCwgbG9jYXRpb24sIG1hdGNoZXMsIHJlcXVlc3RDb250ZXh0LCB1bnN0YWJsZV9kYXRhU3RyYXRlZ3ksIHNraXBMb2FkZXJFcnJvckJ1YmJsaW5nLCByb3V0ZU1hdGNoKSB7XG4gICAgaW52YXJpYW50KHJlcXVlc3Quc2lnbmFsLCBcInF1ZXJ5KCkvcXVlcnlSb3V0ZSgpIHJlcXVlc3RzIG11c3QgY29udGFpbiBhbiBBYm9ydENvbnRyb2xsZXIgc2lnbmFsXCIpO1xuICAgIHRyeSB7XG4gICAgICBpZiAoaXNNdXRhdGlvbk1ldGhvZChyZXF1ZXN0Lm1ldGhvZC50b0xvd2VyQ2FzZSgpKSkge1xuICAgICAgICBsZXQgcmVzdWx0ID0gYXdhaXQgc3VibWl0KHJlcXVlc3QsIG1hdGNoZXMsIHJvdXRlTWF0Y2ggfHwgZ2V0VGFyZ2V0TWF0Y2gobWF0Y2hlcywgbG9jYXRpb24pLCByZXF1ZXN0Q29udGV4dCwgdW5zdGFibGVfZGF0YVN0cmF0ZWd5LCBza2lwTG9hZGVyRXJyb3JCdWJibGluZywgcm91dGVNYXRjaCAhPSBudWxsKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGxldCByZXN1bHQgPSBhd2FpdCBsb2FkUm91dGVEYXRhKHJlcXVlc3QsIG1hdGNoZXMsIHJlcXVlc3RDb250ZXh0LCB1bnN0YWJsZV9kYXRhU3RyYXRlZ3ksIHNraXBMb2FkZXJFcnJvckJ1YmJsaW5nLCByb3V0ZU1hdGNoKTtcbiAgICAgIHJldHVybiBpc1Jlc3BvbnNlKHJlc3VsdCkgPyByZXN1bHQgOiBfZXh0ZW5kcyh7fSwgcmVzdWx0LCB7XG4gICAgICAgIGFjdGlvbkRhdGE6IG51bGwsXG4gICAgICAgIGFjdGlvbkhlYWRlcnM6IHt9XG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBJZiB0aGUgdXNlciB0aHJldy9yZXR1cm5lZCBhIFJlc3BvbnNlIGluIGNhbGxMb2FkZXJPckFjdGlvbiBmb3IgYVxuICAgICAgLy8gYHF1ZXJ5Um91dGVgIGNhbGwsIHdlIHRocm93IHRoZSBgSGFuZGxlclJlc3VsdGAgdG8gYmFpbCBvdXQgZWFybHlcbiAgICAgIC8vIGFuZCB0aGVuIHJldHVybiBvciB0aHJvdyB0aGUgcmF3IFJlc3BvbnNlIGhlcmUgYWNjb3JkaW5nbHlcbiAgICAgIGlmIChpc0hhbmRsZXJSZXN1bHQoZSkgJiYgaXNSZXNwb25zZShlLnJlc3VsdCkpIHtcbiAgICAgICAgaWYgKGUudHlwZSA9PT0gUmVzdWx0VHlwZS5lcnJvcikge1xuICAgICAgICAgIHRocm93IGUucmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlLnJlc3VsdDtcbiAgICAgIH1cbiAgICAgIC8vIFJlZGlyZWN0cyBhcmUgYWx3YXlzIHJldHVybmVkIHNpbmNlIHRoZXkgZG9uJ3QgcHJvcGFnYXRlIHRvIGNhdGNoXG4gICAgICAvLyBib3VuZGFyaWVzXG4gICAgICBpZiAoaXNSZWRpcmVjdFJlc3BvbnNlKGUpKSB7XG4gICAgICAgIHJldHVybiBlO1xuICAgICAgfVxuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH1cbiAgYXN5bmMgZnVuY3Rpb24gc3VibWl0KHJlcXVlc3QsIG1hdGNoZXMsIGFjdGlvbk1hdGNoLCByZXF1ZXN0Q29udGV4dCwgdW5zdGFibGVfZGF0YVN0cmF0ZWd5LCBza2lwTG9hZGVyRXJyb3JCdWJibGluZywgaXNSb3V0ZVJlcXVlc3QpIHtcbiAgICBsZXQgcmVzdWx0O1xuICAgIGlmICghYWN0aW9uTWF0Y2gucm91dGUuYWN0aW9uICYmICFhY3Rpb25NYXRjaC5yb3V0ZS5sYXp5KSB7XG4gICAgICBsZXQgZXJyb3IgPSBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNSwge1xuICAgICAgICBtZXRob2Q6IHJlcXVlc3QubWV0aG9kLFxuICAgICAgICBwYXRobmFtZTogbmV3IFVSTChyZXF1ZXN0LnVybCkucGF0aG5hbWUsXG4gICAgICAgIHJvdXRlSWQ6IGFjdGlvbk1hdGNoLnJvdXRlLmlkXG4gICAgICB9KTtcbiAgICAgIGlmIChpc1JvdXRlUmVxdWVzdCkge1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cbiAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5lcnJvcixcbiAgICAgICAgZXJyb3JcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCByZXN1bHRzID0gYXdhaXQgY2FsbERhdGFTdHJhdGVneShcImFjdGlvblwiLCByZXF1ZXN0LCBbYWN0aW9uTWF0Y2hdLCBtYXRjaGVzLCBpc1JvdXRlUmVxdWVzdCwgcmVxdWVzdENvbnRleHQsIHVuc3RhYmxlX2RhdGFTdHJhdGVneSk7XG4gICAgICByZXN1bHQgPSByZXN1bHRzWzBdO1xuICAgICAgaWYgKHJlcXVlc3Quc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgICAgdGhyb3dTdGF0aWNIYW5kbGVyQWJvcnRlZEVycm9yKHJlcXVlc3QsIGlzUm91dGVSZXF1ZXN0LCBmdXR1cmUpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNSZWRpcmVjdFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICAvLyBVaGhoaCAtIHRoaXMgc2hvdWxkIG5ldmVyIGhhcHBlbiwgd2Ugc2hvdWxkIGFsd2F5cyB0aHJvdyB0aGVzZSBmcm9tXG4gICAgICAvLyBjYWxsTG9hZGVyT3JBY3Rpb24sIGJ1dCB0aGUgdHlwZSBuYXJyb3dpbmcgaGVyZSBrZWVwcyBUUyBoYXBweSBhbmQgd2VcbiAgICAgIC8vIGNhbiBnZXQgYmFjayBvbiB0aGUgXCJ0aHJvdyBhbGwgcmVkaXJlY3QgcmVzcG9uc2VzXCIgdHJhaW4gaGVyZSBzaG91bGRcbiAgICAgIC8vIHRoaXMgZXZlciBoYXBwZW4gOi9cbiAgICAgIHRocm93IG5ldyBSZXNwb25zZShudWxsLCB7XG4gICAgICAgIHN0YXR1czogcmVzdWx0LnJlc3BvbnNlLnN0YXR1cyxcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgIExvY2F0aW9uOiByZXN1bHQucmVzcG9uc2UuaGVhZGVycy5nZXQoXCJMb2NhdGlvblwiKVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSkge1xuICAgICAgbGV0IGVycm9yID0gZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDAsIHtcbiAgICAgICAgdHlwZTogXCJkZWZlci1hY3Rpb25cIlxuICAgICAgfSk7XG4gICAgICBpZiAoaXNSb3V0ZVJlcXVlc3QpIHtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZXJyb3IsXG4gICAgICAgIGVycm9yXG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAoaXNSb3V0ZVJlcXVlc3QpIHtcbiAgICAgIC8vIE5vdGU6IFRoaXMgc2hvdWxkIG9ubHkgYmUgbm9uLVJlc3BvbnNlIHZhbHVlcyBpZiB3ZSBnZXQgaGVyZSwgc2luY2VcbiAgICAgIC8vIGlzUm91dGVSZXF1ZXN0IHNob3VsZCB0aHJvdyBhbnkgUmVzcG9uc2UgcmVjZWl2ZWQgaW4gY2FsbExvYWRlck9yQWN0aW9uXG4gICAgICBpZiAoaXNFcnJvclJlc3VsdChyZXN1bHQpKSB7XG4gICAgICAgIHRocm93IHJlc3VsdC5lcnJvcjtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIG1hdGNoZXM6IFthY3Rpb25NYXRjaF0sXG4gICAgICAgIGxvYWRlckRhdGE6IHt9LFxuICAgICAgICBhY3Rpb25EYXRhOiB7XG4gICAgICAgICAgW2FjdGlvbk1hdGNoLnJvdXRlLmlkXTogcmVzdWx0LmRhdGFcbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3JzOiBudWxsLFxuICAgICAgICAvLyBOb3RlOiBzdGF0dXNDb2RlICsgaGVhZGVycyBhcmUgdW51c2VkIGhlcmUgc2luY2UgcXVlcnlSb3V0ZSB3aWxsXG4gICAgICAgIC8vIHJldHVybiB0aGUgcmF3IFJlc3BvbnNlIG9yIHZhbHVlXG4gICAgICAgIHN0YXR1c0NvZGU6IDIwMCxcbiAgICAgICAgbG9hZGVySGVhZGVyczoge30sXG4gICAgICAgIGFjdGlvbkhlYWRlcnM6IHt9LFxuICAgICAgICBhY3RpdmVEZWZlcnJlZHM6IG51bGxcbiAgICAgIH07XG4gICAgfVxuICAgIC8vIENyZWF0ZSBhIEdFVCByZXF1ZXN0IGZvciB0aGUgbG9hZGVyc1xuICAgIGxldCBsb2FkZXJSZXF1ZXN0ID0gbmV3IFJlcXVlc3QocmVxdWVzdC51cmwsIHtcbiAgICAgIGhlYWRlcnM6IHJlcXVlc3QuaGVhZGVycyxcbiAgICAgIHJlZGlyZWN0OiByZXF1ZXN0LnJlZGlyZWN0LFxuICAgICAgc2lnbmFsOiByZXF1ZXN0LnNpZ25hbFxuICAgIH0pO1xuICAgIGlmIChpc0Vycm9yUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIC8vIFN0b3JlIG9mZiB0aGUgcGVuZGluZyBlcnJvciAtIHdlIHVzZSBpdCB0byBkZXRlcm1pbmUgd2hpY2ggbG9hZGVyc1xuICAgICAgLy8gdG8gY2FsbCBhbmQgd2lsbCBjb21taXQgaXQgd2hlbiB3ZSBjb21wbGV0ZSB0aGUgbmF2aWdhdGlvblxuICAgICAgbGV0IGJvdW5kYXJ5TWF0Y2ggPSBza2lwTG9hZGVyRXJyb3JCdWJibGluZyA/IGFjdGlvbk1hdGNoIDogZmluZE5lYXJlc3RCb3VuZGFyeShtYXRjaGVzLCBhY3Rpb25NYXRjaC5yb3V0ZS5pZCk7XG4gICAgICBsZXQgY29udGV4dCA9IGF3YWl0IGxvYWRSb3V0ZURhdGEobG9hZGVyUmVxdWVzdCwgbWF0Y2hlcywgcmVxdWVzdENvbnRleHQsIHVuc3RhYmxlX2RhdGFTdHJhdGVneSwgc2tpcExvYWRlckVycm9yQnViYmxpbmcsIG51bGwsIFtib3VuZGFyeU1hdGNoLnJvdXRlLmlkLCByZXN1bHRdKTtcbiAgICAgIC8vIGFjdGlvbiBzdGF0dXMgY29kZXMgdGFrZSBwcmVjZWRlbmNlIG92ZXIgbG9hZGVyIHN0YXR1cyBjb2Rlc1xuICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBjb250ZXh0LCB7XG4gICAgICAgIHN0YXR1c0NvZGU6IGlzUm91dGVFcnJvclJlc3BvbnNlKHJlc3VsdC5lcnJvcikgPyByZXN1bHQuZXJyb3Iuc3RhdHVzIDogcmVzdWx0LnN0YXR1c0NvZGUgIT0gbnVsbCA/IHJlc3VsdC5zdGF0dXNDb2RlIDogNTAwLFxuICAgICAgICBhY3Rpb25EYXRhOiBudWxsLFxuICAgICAgICBhY3Rpb25IZWFkZXJzOiBfZXh0ZW5kcyh7fSwgcmVzdWx0LmhlYWRlcnMgPyB7XG4gICAgICAgICAgW2FjdGlvbk1hdGNoLnJvdXRlLmlkXTogcmVzdWx0LmhlYWRlcnNcbiAgICAgICAgfSA6IHt9KVxuICAgICAgfSk7XG4gICAgfVxuICAgIGxldCBjb250ZXh0ID0gYXdhaXQgbG9hZFJvdXRlRGF0YShsb2FkZXJSZXF1ZXN0LCBtYXRjaGVzLCByZXF1ZXN0Q29udGV4dCwgdW5zdGFibGVfZGF0YVN0cmF0ZWd5LCBza2lwTG9hZGVyRXJyb3JCdWJibGluZywgbnVsbCk7XG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBjb250ZXh0LCB7XG4gICAgICBhY3Rpb25EYXRhOiB7XG4gICAgICAgIFthY3Rpb25NYXRjaC5yb3V0ZS5pZF06IHJlc3VsdC5kYXRhXG4gICAgICB9XG4gICAgfSwgcmVzdWx0LnN0YXR1c0NvZGUgPyB7XG4gICAgICBzdGF0dXNDb2RlOiByZXN1bHQuc3RhdHVzQ29kZVxuICAgIH0gOiB7fSwge1xuICAgICAgYWN0aW9uSGVhZGVyczogcmVzdWx0LmhlYWRlcnMgPyB7XG4gICAgICAgIFthY3Rpb25NYXRjaC5yb3V0ZS5pZF06IHJlc3VsdC5oZWFkZXJzXG4gICAgICB9IDoge31cbiAgICB9KTtcbiAgfVxuICBhc3luYyBmdW5jdGlvbiBsb2FkUm91dGVEYXRhKHJlcXVlc3QsIG1hdGNoZXMsIHJlcXVlc3RDb250ZXh0LCB1bnN0YWJsZV9kYXRhU3RyYXRlZ3ksIHNraXBMb2FkZXJFcnJvckJ1YmJsaW5nLCByb3V0ZU1hdGNoLCBwZW5kaW5nQWN0aW9uUmVzdWx0KSB7XG4gICAgbGV0IGlzUm91dGVSZXF1ZXN0ID0gcm91dGVNYXRjaCAhPSBudWxsO1xuICAgIC8vIFNob3J0IGNpcmN1aXQgaWYgd2UgaGF2ZSBubyBsb2FkZXJzIHRvIHJ1biAocXVlcnlSb3V0ZSgpKVxuICAgIGlmIChpc1JvdXRlUmVxdWVzdCAmJiAhKHJvdXRlTWF0Y2ggIT0gbnVsbCAmJiByb3V0ZU1hdGNoLnJvdXRlLmxvYWRlcikgJiYgIShyb3V0ZU1hdGNoICE9IG51bGwgJiYgcm91dGVNYXRjaC5yb3V0ZS5sYXp5KSkge1xuICAgICAgdGhyb3cgZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDAsIHtcbiAgICAgICAgbWV0aG9kOiByZXF1ZXN0Lm1ldGhvZCxcbiAgICAgICAgcGF0aG5hbWU6IG5ldyBVUkwocmVxdWVzdC51cmwpLnBhdGhuYW1lLFxuICAgICAgICByb3V0ZUlkOiByb3V0ZU1hdGNoID09IG51bGwgPyB2b2lkIDAgOiByb3V0ZU1hdGNoLnJvdXRlLmlkXG4gICAgICB9KTtcbiAgICB9XG4gICAgbGV0IHJlcXVlc3RNYXRjaGVzID0gcm91dGVNYXRjaCA/IFtyb3V0ZU1hdGNoXSA6IHBlbmRpbmdBY3Rpb25SZXN1bHQgJiYgaXNFcnJvclJlc3VsdChwZW5kaW5nQWN0aW9uUmVzdWx0WzFdKSA/IGdldExvYWRlck1hdGNoZXNVbnRpbEJvdW5kYXJ5KG1hdGNoZXMsIHBlbmRpbmdBY3Rpb25SZXN1bHRbMF0pIDogbWF0Y2hlcztcbiAgICBsZXQgbWF0Y2hlc1RvTG9hZCA9IHJlcXVlc3RNYXRjaGVzLmZpbHRlcihtID0+IG0ucm91dGUubG9hZGVyIHx8IG0ucm91dGUubGF6eSk7XG4gICAgLy8gU2hvcnQgY2lyY3VpdCBpZiB3ZSBoYXZlIG5vIGxvYWRlcnMgdG8gcnVuIChxdWVyeSgpKVxuICAgIGlmIChtYXRjaGVzVG9Mb2FkLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbWF0Y2hlcyxcbiAgICAgICAgLy8gQWRkIGEgbnVsbCBmb3IgYWxsIG1hdGNoZWQgcm91dGVzIGZvciBwcm9wZXIgcmV2YWxpZGF0aW9uIG9uIHRoZSBjbGllbnRcbiAgICAgICAgbG9hZGVyRGF0YTogbWF0Y2hlcy5yZWR1Y2UoKGFjYywgbSkgPT4gT2JqZWN0LmFzc2lnbihhY2MsIHtcbiAgICAgICAgICBbbS5yb3V0ZS5pZF06IG51bGxcbiAgICAgICAgfSksIHt9KSxcbiAgICAgICAgZXJyb3JzOiBwZW5kaW5nQWN0aW9uUmVzdWx0ICYmIGlzRXJyb3JSZXN1bHQocGVuZGluZ0FjdGlvblJlc3VsdFsxXSkgPyB7XG4gICAgICAgICAgW3BlbmRpbmdBY3Rpb25SZXN1bHRbMF1dOiBwZW5kaW5nQWN0aW9uUmVzdWx0WzFdLmVycm9yXG4gICAgICAgIH0gOiBudWxsLFxuICAgICAgICBzdGF0dXNDb2RlOiAyMDAsXG4gICAgICAgIGxvYWRlckhlYWRlcnM6IHt9LFxuICAgICAgICBhY3RpdmVEZWZlcnJlZHM6IG51bGxcbiAgICAgIH07XG4gICAgfVxuICAgIGxldCByZXN1bHRzID0gYXdhaXQgY2FsbERhdGFTdHJhdGVneShcImxvYWRlclwiLCByZXF1ZXN0LCBtYXRjaGVzVG9Mb2FkLCBtYXRjaGVzLCBpc1JvdXRlUmVxdWVzdCwgcmVxdWVzdENvbnRleHQsIHVuc3RhYmxlX2RhdGFTdHJhdGVneSk7XG4gICAgaWYgKHJlcXVlc3Quc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgIHRocm93U3RhdGljSGFuZGxlckFib3J0ZWRFcnJvcihyZXF1ZXN0LCBpc1JvdXRlUmVxdWVzdCwgZnV0dXJlKTtcbiAgICB9XG4gICAgLy8gUHJvY2VzcyBhbmQgY29tbWl0IG91dHB1dCBmcm9tIGxvYWRlcnNcbiAgICBsZXQgYWN0aXZlRGVmZXJyZWRzID0gbmV3IE1hcCgpO1xuICAgIGxldCBjb250ZXh0ID0gcHJvY2Vzc1JvdXRlTG9hZGVyRGF0YShtYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCByZXN1bHRzLCBwZW5kaW5nQWN0aW9uUmVzdWx0LCBhY3RpdmVEZWZlcnJlZHMsIHNraXBMb2FkZXJFcnJvckJ1YmJsaW5nKTtcbiAgICAvLyBBZGQgYSBudWxsIGZvciBhbnkgbm9uLWxvYWRlciBtYXRjaGVzIGZvciBwcm9wZXIgcmV2YWxpZGF0aW9uIG9uIHRoZSBjbGllbnRcbiAgICBsZXQgZXhlY3V0ZWRMb2FkZXJzID0gbmV3IFNldChtYXRjaGVzVG9Mb2FkLm1hcChtYXRjaCA9PiBtYXRjaC5yb3V0ZS5pZCkpO1xuICAgIG1hdGNoZXMuZm9yRWFjaChtYXRjaCA9PiB7XG4gICAgICBpZiAoIWV4ZWN1dGVkTG9hZGVycy5oYXMobWF0Y2gucm91dGUuaWQpKSB7XG4gICAgICAgIGNvbnRleHQubG9hZGVyRGF0YVttYXRjaC5yb3V0ZS5pZF0gPSBudWxsO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgY29udGV4dCwge1xuICAgICAgbWF0Y2hlcyxcbiAgICAgIGFjdGl2ZURlZmVycmVkczogYWN0aXZlRGVmZXJyZWRzLnNpemUgPiAwID8gT2JqZWN0LmZyb21FbnRyaWVzKGFjdGl2ZURlZmVycmVkcy5lbnRyaWVzKCkpIDogbnVsbFxuICAgIH0pO1xuICB9XG4gIC8vIFV0aWxpdHkgd3JhcHBlciBmb3IgY2FsbGluZyBkYXRhU3RyYXRlZ3kgc2VydmVyLXNpZGUgd2l0aG91dCBoYXZpbmcgdG9cbiAgLy8gcGFzcyBhcm91bmQgdGhlIG1hbmlmZXN0LCBtYXBSb3V0ZVByb3BlcnRpZXMsIGV0Yy5cbiAgYXN5bmMgZnVuY3Rpb24gY2FsbERhdGFTdHJhdGVneSh0eXBlLCByZXF1ZXN0LCBtYXRjaGVzVG9Mb2FkLCBtYXRjaGVzLCBpc1JvdXRlUmVxdWVzdCwgcmVxdWVzdENvbnRleHQsIHVuc3RhYmxlX2RhdGFTdHJhdGVneSkge1xuICAgIGxldCByZXN1bHRzID0gYXdhaXQgY2FsbERhdGFTdHJhdGVneUltcGwodW5zdGFibGVfZGF0YVN0cmF0ZWd5IHx8IGRlZmF1bHREYXRhU3RyYXRlZ3ksIHR5cGUsIHJlcXVlc3QsIG1hdGNoZXNUb0xvYWQsIG1hdGNoZXMsIG1hbmlmZXN0LCBtYXBSb3V0ZVByb3BlcnRpZXMsIHJlcXVlc3RDb250ZXh0KTtcbiAgICByZXR1cm4gYXdhaXQgUHJvbWlzZS5hbGwocmVzdWx0cy5tYXAoKHJlc3VsdCwgaSkgPT4ge1xuICAgICAgaWYgKGlzUmVkaXJlY3RIYW5kbGVyUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gcmVzdWx0LnJlc3VsdDtcbiAgICAgICAgLy8gVGhyb3cgcmVkaXJlY3RzIGFuZCBsZXQgdGhlIHNlcnZlciBoYW5kbGUgdGhlbSB3aXRoIGFuIEhUVFAgcmVkaXJlY3RcbiAgICAgICAgdGhyb3cgbm9ybWFsaXplUmVsYXRpdmVSb3V0aW5nUmVkaXJlY3RSZXNwb25zZShyZXNwb25zZSwgcmVxdWVzdCwgbWF0Y2hlc1RvTG9hZFtpXS5yb3V0ZS5pZCwgbWF0Y2hlcywgYmFzZW5hbWUsIGZ1dHVyZS52N19yZWxhdGl2ZVNwbGF0UGF0aCk7XG4gICAgICB9XG4gICAgICBpZiAoaXNSZXNwb25zZShyZXN1bHQucmVzdWx0KSAmJiBpc1JvdXRlUmVxdWVzdCkge1xuICAgICAgICAvLyBGb3IgU1NSIHNpbmdsZS1yb3V0ZSByZXF1ZXN0cywgd2Ugd2FudCB0byBoYW5kIFJlc3BvbnNlcyBiYWNrXG4gICAgICAgIC8vIGRpcmVjdGx5IHdpdGhvdXQgdW53cmFwcGluZ1xuICAgICAgICB0aHJvdyByZXN1bHQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29udmVydEhhbmRsZXJSZXN1bHRUb0RhdGFSZXN1bHQocmVzdWx0KTtcbiAgICB9KSk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBkYXRhUm91dGVzLFxuICAgIHF1ZXJ5LFxuICAgIHF1ZXJ5Um91dGVcbiAgfTtcbn1cbi8vI2VuZHJlZ2lvblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vI3JlZ2lvbiBIZWxwZXJzXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLyoqXG4gKiBHaXZlbiBhbiBleGlzdGluZyBTdGF0aWNIYW5kbGVyQ29udGV4dCBhbmQgYW4gZXJyb3IgdGhyb3duIGF0IHJlbmRlciB0aW1lLFxuICogcHJvdmlkZSBhbiB1cGRhdGVkIFN0YXRpY0hhbmRsZXJDb250ZXh0IHN1aXRhYmxlIGZvciBhIHNlY29uZCBTU1IgcmVuZGVyXG4gKi9cbmZ1bmN0aW9uIGdldFN0YXRpY0NvbnRleHRGcm9tRXJyb3Iocm91dGVzLCBjb250ZXh0LCBlcnJvcikge1xuICBsZXQgbmV3Q29udGV4dCA9IF9leHRlbmRzKHt9LCBjb250ZXh0LCB7XG4gICAgc3RhdHVzQ29kZTogaXNSb3V0ZUVycm9yUmVzcG9uc2UoZXJyb3IpID8gZXJyb3Iuc3RhdHVzIDogNTAwLFxuICAgIGVycm9yczoge1xuICAgICAgW2NvbnRleHQuX2RlZXBlc3RSZW5kZXJlZEJvdW5kYXJ5SWQgfHwgcm91dGVzWzBdLmlkXTogZXJyb3JcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gbmV3Q29udGV4dDtcbn1cbmZ1bmN0aW9uIHRocm93U3RhdGljSGFuZGxlckFib3J0ZWRFcnJvcihyZXF1ZXN0LCBpc1JvdXRlUmVxdWVzdCwgZnV0dXJlKSB7XG4gIGlmIChmdXR1cmUudjdfdGhyb3dBYm9ydFJlYXNvbiAmJiByZXF1ZXN0LnNpZ25hbC5yZWFzb24gIT09IHVuZGVmaW5lZCkge1xuICAgIHRocm93IHJlcXVlc3Quc2lnbmFsLnJlYXNvbjtcbiAgfVxuICBsZXQgbWV0aG9kID0gaXNSb3V0ZVJlcXVlc3QgPyBcInF1ZXJ5Um91dGVcIiA6IFwicXVlcnlcIjtcbiAgdGhyb3cgbmV3IEVycm9yKG1ldGhvZCArIFwiKCkgY2FsbCBhYm9ydGVkOiBcIiArIHJlcXVlc3QubWV0aG9kICsgXCIgXCIgKyByZXF1ZXN0LnVybCk7XG59XG5mdW5jdGlvbiBpc1N1Ym1pc3Npb25OYXZpZ2F0aW9uKG9wdHMpIHtcbiAgcmV0dXJuIG9wdHMgIT0gbnVsbCAmJiAoXCJmb3JtRGF0YVwiIGluIG9wdHMgJiYgb3B0cy5mb3JtRGF0YSAhPSBudWxsIHx8IFwiYm9keVwiIGluIG9wdHMgJiYgb3B0cy5ib2R5ICE9PSB1bmRlZmluZWQpO1xufVxuZnVuY3Rpb24gbm9ybWFsaXplVG8obG9jYXRpb24sIG1hdGNoZXMsIGJhc2VuYW1lLCBwcmVwZW5kQmFzZW5hbWUsIHRvLCB2N19yZWxhdGl2ZVNwbGF0UGF0aCwgZnJvbVJvdXRlSWQsIHJlbGF0aXZlKSB7XG4gIGxldCBjb250ZXh0dWFsTWF0Y2hlcztcbiAgbGV0IGFjdGl2ZVJvdXRlTWF0Y2g7XG4gIGlmIChmcm9tUm91dGVJZCkge1xuICAgIC8vIEdyYWIgbWF0Y2hlcyB1cCB0byB0aGUgY2FsbGluZyByb3V0ZSBzbyBvdXIgcm91dGUtcmVsYXRpdmUgbG9naWMgaXNcbiAgICAvLyByZWxhdGl2ZSB0byB0aGUgY29ycmVjdCBzb3VyY2Ugcm91dGVcbiAgICBjb250ZXh0dWFsTWF0Y2hlcyA9IFtdO1xuICAgIGZvciAobGV0IG1hdGNoIG9mIG1hdGNoZXMpIHtcbiAgICAgIGNvbnRleHR1YWxNYXRjaGVzLnB1c2gobWF0Y2gpO1xuICAgICAgaWYgKG1hdGNoLnJvdXRlLmlkID09PSBmcm9tUm91dGVJZCkge1xuICAgICAgICBhY3RpdmVSb3V0ZU1hdGNoID0gbWF0Y2g7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBjb250ZXh0dWFsTWF0Y2hlcyA9IG1hdGNoZXM7XG4gICAgYWN0aXZlUm91dGVNYXRjaCA9IG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXTtcbiAgfVxuICAvLyBSZXNvbHZlIHRoZSByZWxhdGl2ZSBwYXRoXG4gIGxldCBwYXRoID0gcmVzb2x2ZVRvKHRvID8gdG8gOiBcIi5cIiwgZ2V0UmVzb2x2ZVRvTWF0Y2hlcyhjb250ZXh0dWFsTWF0Y2hlcywgdjdfcmVsYXRpdmVTcGxhdFBhdGgpLCBzdHJpcEJhc2VuYW1lKGxvY2F0aW9uLnBhdGhuYW1lLCBiYXNlbmFtZSkgfHwgbG9jYXRpb24ucGF0aG5hbWUsIHJlbGF0aXZlID09PSBcInBhdGhcIik7XG4gIC8vIFdoZW4gYHRvYCBpcyBub3Qgc3BlY2lmaWVkIHdlIGluaGVyaXQgc2VhcmNoL2hhc2ggZnJvbSB0aGUgY3VycmVudFxuICAvLyBsb2NhdGlvbiwgdW5saWtlIHdoZW4gdG89XCIuXCIgYW5kIHdlIGp1c3QgaW5oZXJpdCB0aGUgcGF0aC5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZW1peC1ydW4vcmVtaXgvaXNzdWVzLzkyN1xuICBpZiAodG8gPT0gbnVsbCkge1xuICAgIHBhdGguc2VhcmNoID0gbG9jYXRpb24uc2VhcmNoO1xuICAgIHBhdGguaGFzaCA9IGxvY2F0aW9uLmhhc2g7XG4gIH1cbiAgLy8gQWRkIGFuID9pbmRleCBwYXJhbSBmb3IgbWF0Y2hlZCBpbmRleCByb3V0ZXMgaWYgd2UgZG9uJ3QgYWxyZWFkeSBoYXZlIG9uZVxuICBpZiAoKHRvID09IG51bGwgfHwgdG8gPT09IFwiXCIgfHwgdG8gPT09IFwiLlwiKSAmJiBhY3RpdmVSb3V0ZU1hdGNoICYmIGFjdGl2ZVJvdXRlTWF0Y2gucm91dGUuaW5kZXggJiYgIWhhc05ha2VkSW5kZXhRdWVyeShwYXRoLnNlYXJjaCkpIHtcbiAgICBwYXRoLnNlYXJjaCA9IHBhdGguc2VhcmNoID8gcGF0aC5zZWFyY2gucmVwbGFjZSgvXlxcPy8sIFwiP2luZGV4JlwiKSA6IFwiP2luZGV4XCI7XG4gIH1cbiAgLy8gSWYgd2UncmUgb3BlcmF0aW5nIHdpdGhpbiBhIGJhc2VuYW1lLCBwcmVwZW5kIGl0IHRvIHRoZSBwYXRobmFtZS4gIElmXG4gIC8vIHRoaXMgaXMgYSByb290IG5hdmlnYXRpb24sIHRoZW4ganVzdCB1c2UgdGhlIHJhdyBiYXNlbmFtZSB3aGljaCBhbGxvd3NcbiAgLy8gdGhlIGJhc2VuYW1lIHRvIGhhdmUgZnVsbCBjb250cm9sIG92ZXIgdGhlIHByZXNlbmNlIG9mIGEgdHJhaWxpbmcgc2xhc2hcbiAgLy8gb24gcm9vdCBhY3Rpb25zXG4gIGlmIChwcmVwZW5kQmFzZW5hbWUgJiYgYmFzZW5hbWUgIT09IFwiL1wiKSB7XG4gICAgcGF0aC5wYXRobmFtZSA9IHBhdGgucGF0aG5hbWUgPT09IFwiL1wiID8gYmFzZW5hbWUgOiBqb2luUGF0aHMoW2Jhc2VuYW1lLCBwYXRoLnBhdGhuYW1lXSk7XG4gIH1cbiAgcmV0dXJuIGNyZWF0ZVBhdGgocGF0aCk7XG59XG4vLyBOb3JtYWxpemUgbmF2aWdhdGlvbiBvcHRpb25zIGJ5IGNvbnZlcnRpbmcgZm9ybU1ldGhvZD1HRVQgZm9ybURhdGEgb2JqZWN0cyB0b1xuLy8gVVJMU2VhcmNoUGFyYW1zIHNvIHRoZXkgYmVoYXZlIGlkZW50aWNhbGx5IHRvIGxpbmtzIHdpdGggcXVlcnkgcGFyYW1zXG5mdW5jdGlvbiBub3JtYWxpemVOYXZpZ2F0ZU9wdGlvbnMobm9ybWFsaXplRm9ybU1ldGhvZCwgaXNGZXRjaGVyLCBwYXRoLCBvcHRzKSB7XG4gIC8vIFJldHVybiBsb2NhdGlvbiB2ZXJiYXRpbSBvbiBub24tc3VibWlzc2lvbiBuYXZpZ2F0aW9uc1xuICBpZiAoIW9wdHMgfHwgIWlzU3VibWlzc2lvbk5hdmlnYXRpb24ob3B0cykpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcGF0aFxuICAgIH07XG4gIH1cbiAgaWYgKG9wdHMuZm9ybU1ldGhvZCAmJiAhaXNWYWxpZE1ldGhvZChvcHRzLmZvcm1NZXRob2QpKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGgsXG4gICAgICBlcnJvcjogZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDUsIHtcbiAgICAgICAgbWV0aG9kOiBvcHRzLmZvcm1NZXRob2RcbiAgICAgIH0pXG4gICAgfTtcbiAgfVxuICBsZXQgZ2V0SW52YWxpZEJvZHlFcnJvciA9ICgpID0+ICh7XG4gICAgcGF0aCxcbiAgICBlcnJvcjogZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDAsIHtcbiAgICAgIHR5cGU6IFwiaW52YWxpZC1ib2R5XCJcbiAgICB9KVxuICB9KTtcbiAgLy8gQ3JlYXRlIGEgU3VibWlzc2lvbiBvbiBub24tR0VUIG5hdmlnYXRpb25zXG4gIGxldCByYXdGb3JtTWV0aG9kID0gb3B0cy5mb3JtTWV0aG9kIHx8IFwiZ2V0XCI7XG4gIGxldCBmb3JtTWV0aG9kID0gbm9ybWFsaXplRm9ybU1ldGhvZCA/IHJhd0Zvcm1NZXRob2QudG9VcHBlckNhc2UoKSA6IHJhd0Zvcm1NZXRob2QudG9Mb3dlckNhc2UoKTtcbiAgbGV0IGZvcm1BY3Rpb24gPSBzdHJpcEhhc2hGcm9tUGF0aChwYXRoKTtcbiAgaWYgKG9wdHMuYm9keSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKG9wdHMuZm9ybUVuY1R5cGUgPT09IFwidGV4dC9wbGFpblwiKSB7XG4gICAgICAvLyB0ZXh0IG9ubHkgc3VwcG9ydCBQT1NUL1BVVC9QQVRDSC9ERUxFVEUgc3VibWlzc2lvbnNcbiAgICAgIGlmICghaXNNdXRhdGlvbk1ldGhvZChmb3JtTWV0aG9kKSkge1xuICAgICAgICByZXR1cm4gZ2V0SW52YWxpZEJvZHlFcnJvcigpO1xuICAgICAgfVxuICAgICAgbGV0IHRleHQgPSB0eXBlb2Ygb3B0cy5ib2R5ID09PSBcInN0cmluZ1wiID8gb3B0cy5ib2R5IDogb3B0cy5ib2R5IGluc3RhbmNlb2YgRm9ybURhdGEgfHwgb3B0cy5ib2R5IGluc3RhbmNlb2YgVVJMU2VhcmNoUGFyYW1zID9cbiAgICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm0tY29udHJvbC1pbmZyYXN0cnVjdHVyZS5odG1sI3BsYWluLXRleHQtZm9ybS1kYXRhXG4gICAgICBBcnJheS5mcm9tKG9wdHMuYm9keS5lbnRyaWVzKCkpLnJlZHVjZSgoYWNjLCBfcmVmNSkgPT4ge1xuICAgICAgICBsZXQgW25hbWUsIHZhbHVlXSA9IF9yZWY1O1xuICAgICAgICByZXR1cm4gXCJcIiArIGFjYyArIG5hbWUgKyBcIj1cIiArIHZhbHVlICsgXCJcXG5cIjtcbiAgICAgIH0sIFwiXCIpIDogU3RyaW5nKG9wdHMuYm9keSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwYXRoLFxuICAgICAgICBzdWJtaXNzaW9uOiB7XG4gICAgICAgICAgZm9ybU1ldGhvZCxcbiAgICAgICAgICBmb3JtQWN0aW9uLFxuICAgICAgICAgIGZvcm1FbmNUeXBlOiBvcHRzLmZvcm1FbmNUeXBlLFxuICAgICAgICAgIGZvcm1EYXRhOiB1bmRlZmluZWQsXG4gICAgICAgICAganNvbjogdW5kZWZpbmVkLFxuICAgICAgICAgIHRleHRcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKG9wdHMuZm9ybUVuY1R5cGUgPT09IFwiYXBwbGljYXRpb24vanNvblwiKSB7XG4gICAgICAvLyBqc29uIG9ubHkgc3VwcG9ydHMgUE9TVC9QVVQvUEFUQ0gvREVMRVRFIHN1Ym1pc3Npb25zXG4gICAgICBpZiAoIWlzTXV0YXRpb25NZXRob2QoZm9ybU1ldGhvZCkpIHtcbiAgICAgICAgcmV0dXJuIGdldEludmFsaWRCb2R5RXJyb3IoKTtcbiAgICAgIH1cbiAgICAgIHRyeSB7XG4gICAgICAgIGxldCBqc29uID0gdHlwZW9mIG9wdHMuYm9keSA9PT0gXCJzdHJpbmdcIiA/IEpTT04ucGFyc2Uob3B0cy5ib2R5KSA6IG9wdHMuYm9keTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBwYXRoLFxuICAgICAgICAgIHN1Ym1pc3Npb246IHtcbiAgICAgICAgICAgIGZvcm1NZXRob2QsXG4gICAgICAgICAgICBmb3JtQWN0aW9uLFxuICAgICAgICAgICAgZm9ybUVuY1R5cGU6IG9wdHMuZm9ybUVuY1R5cGUsXG4gICAgICAgICAgICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICAgICAgICAgICAganNvbixcbiAgICAgICAgICAgIHRleHQ6IHVuZGVmaW5lZFxuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGdldEludmFsaWRCb2R5RXJyb3IoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaW52YXJpYW50KHR5cGVvZiBGb3JtRGF0YSA9PT0gXCJmdW5jdGlvblwiLCBcIkZvcm1EYXRhIGlzIG5vdCBhdmFpbGFibGUgaW4gdGhpcyBlbnZpcm9ubWVudFwiKTtcbiAgbGV0IHNlYXJjaFBhcmFtcztcbiAgbGV0IGZvcm1EYXRhO1xuICBpZiAob3B0cy5mb3JtRGF0YSkge1xuICAgIHNlYXJjaFBhcmFtcyA9IGNvbnZlcnRGb3JtRGF0YVRvU2VhcmNoUGFyYW1zKG9wdHMuZm9ybURhdGEpO1xuICAgIGZvcm1EYXRhID0gb3B0cy5mb3JtRGF0YTtcbiAgfSBlbHNlIGlmIChvcHRzLmJvZHkgaW5zdGFuY2VvZiBGb3JtRGF0YSkge1xuICAgIHNlYXJjaFBhcmFtcyA9IGNvbnZlcnRGb3JtRGF0YVRvU2VhcmNoUGFyYW1zKG9wdHMuYm9keSk7XG4gICAgZm9ybURhdGEgPSBvcHRzLmJvZHk7XG4gIH0gZWxzZSBpZiAob3B0cy5ib2R5IGluc3RhbmNlb2YgVVJMU2VhcmNoUGFyYW1zKSB7XG4gICAgc2VhcmNoUGFyYW1zID0gb3B0cy5ib2R5O1xuICAgIGZvcm1EYXRhID0gY29udmVydFNlYXJjaFBhcmFtc1RvRm9ybURhdGEoc2VhcmNoUGFyYW1zKTtcbiAgfSBlbHNlIGlmIChvcHRzLmJvZHkgPT0gbnVsbCkge1xuICAgIHNlYXJjaFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKTtcbiAgICBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuICB9IGVsc2Uge1xuICAgIHRyeSB7XG4gICAgICBzZWFyY2hQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKG9wdHMuYm9keSk7XG4gICAgICBmb3JtRGF0YSA9IGNvbnZlcnRTZWFyY2hQYXJhbXNUb0Zvcm1EYXRhKHNlYXJjaFBhcmFtcyk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGdldEludmFsaWRCb2R5RXJyb3IoKTtcbiAgICB9XG4gIH1cbiAgbGV0IHN1Ym1pc3Npb24gPSB7XG4gICAgZm9ybU1ldGhvZCxcbiAgICBmb3JtQWN0aW9uLFxuICAgIGZvcm1FbmNUeXBlOiBvcHRzICYmIG9wdHMuZm9ybUVuY1R5cGUgfHwgXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIixcbiAgICBmb3JtRGF0YSxcbiAgICBqc29uOiB1bmRlZmluZWQsXG4gICAgdGV4dDogdW5kZWZpbmVkXG4gIH07XG4gIGlmIChpc011dGF0aW9uTWV0aG9kKHN1Ym1pc3Npb24uZm9ybU1ldGhvZCkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcGF0aCxcbiAgICAgIHN1Ym1pc3Npb25cbiAgICB9O1xuICB9XG4gIC8vIEZsYXR0ZW4gc3VibWlzc2lvbiBvbnRvIFVSTFNlYXJjaFBhcmFtcyBmb3IgR0VUIHN1Ym1pc3Npb25zXG4gIGxldCBwYXJzZWRQYXRoID0gcGFyc2VQYXRoKHBhdGgpO1xuICAvLyBPbiBHRVQgbmF2aWdhdGlvbiBzdWJtaXNzaW9ucyB3ZSBjYW4gZHJvcCB0aGUgP2luZGV4IHBhcmFtIGZyb20gdGhlXG4gIC8vIHJlc3VsdGluZyBsb2NhdGlvbiBzaW5jZSBhbGwgbG9hZGVycyB3aWxsIHJ1bi4gIEJ1dCBmZXRjaGVyIEdFVCBzdWJtaXNzaW9uc1xuICAvLyBvbmx5IHJ1biBhIHNpbmdsZSBsb2FkZXIgc28gd2UgbmVlZCB0byBwcmVzZXJ2ZSBhbnkgaW5jb21pbmcgP2luZGV4IHBhcmFtc1xuICBpZiAoaXNGZXRjaGVyICYmIHBhcnNlZFBhdGguc2VhcmNoICYmIGhhc05ha2VkSW5kZXhRdWVyeShwYXJzZWRQYXRoLnNlYXJjaCkpIHtcbiAgICBzZWFyY2hQYXJhbXMuYXBwZW5kKFwiaW5kZXhcIiwgXCJcIik7XG4gIH1cbiAgcGFyc2VkUGF0aC5zZWFyY2ggPSBcIj9cIiArIHNlYXJjaFBhcmFtcztcbiAgcmV0dXJuIHtcbiAgICBwYXRoOiBjcmVhdGVQYXRoKHBhcnNlZFBhdGgpLFxuICAgIHN1Ym1pc3Npb25cbiAgfTtcbn1cbi8vIEZpbHRlciBvdXQgYWxsIHJvdXRlcyBiZWxvdyBhbnkgY2F1Z2h0IGVycm9yIGFzIHRoZXkgYXJlbid0IGdvaW5nIHRvXG4vLyByZW5kZXIgc28gd2UgZG9uJ3QgbmVlZCB0byBsb2FkIHRoZW1cbmZ1bmN0aW9uIGdldExvYWRlck1hdGNoZXNVbnRpbEJvdW5kYXJ5KG1hdGNoZXMsIGJvdW5kYXJ5SWQpIHtcbiAgbGV0IGJvdW5kYXJ5TWF0Y2hlcyA9IG1hdGNoZXM7XG4gIGlmIChib3VuZGFyeUlkKSB7XG4gICAgbGV0IGluZGV4ID0gbWF0Y2hlcy5maW5kSW5kZXgobSA9PiBtLnJvdXRlLmlkID09PSBib3VuZGFyeUlkKTtcbiAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgYm91bmRhcnlNYXRjaGVzID0gbWF0Y2hlcy5zbGljZSgwLCBpbmRleCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBib3VuZGFyeU1hdGNoZXM7XG59XG5mdW5jdGlvbiBnZXRNYXRjaGVzVG9Mb2FkKGhpc3RvcnksIHN0YXRlLCBtYXRjaGVzLCBzdWJtaXNzaW9uLCBsb2NhdGlvbiwgaXNJbml0aWFsTG9hZCwgc2tpcEFjdGlvbkVycm9yUmV2YWxpZGF0aW9uLCBpc1JldmFsaWRhdGlvblJlcXVpcmVkLCBjYW5jZWxsZWREZWZlcnJlZFJvdXRlcywgY2FuY2VsbGVkRmV0Y2hlckxvYWRzLCBkZWxldGVkRmV0Y2hlcnMsIGZldGNoTG9hZE1hdGNoZXMsIGZldGNoUmVkaXJlY3RJZHMsIHJvdXRlc1RvVXNlLCBiYXNlbmFtZSwgcGVuZGluZ0FjdGlvblJlc3VsdCkge1xuICBsZXQgYWN0aW9uUmVzdWx0ID0gcGVuZGluZ0FjdGlvblJlc3VsdCA/IGlzRXJyb3JSZXN1bHQocGVuZGluZ0FjdGlvblJlc3VsdFsxXSkgPyBwZW5kaW5nQWN0aW9uUmVzdWx0WzFdLmVycm9yIDogcGVuZGluZ0FjdGlvblJlc3VsdFsxXS5kYXRhIDogdW5kZWZpbmVkO1xuICBsZXQgY3VycmVudFVybCA9IGhpc3RvcnkuY3JlYXRlVVJMKHN0YXRlLmxvY2F0aW9uKTtcbiAgbGV0IG5leHRVcmwgPSBoaXN0b3J5LmNyZWF0ZVVSTChsb2NhdGlvbik7XG4gIC8vIFBpY2sgbmF2aWdhdGlvbiBtYXRjaGVzIHRoYXQgYXJlIG5ldC1uZXcgb3IgcXVhbGlmeSBmb3IgcmV2YWxpZGF0aW9uXG4gIGxldCBib3VuZGFyeUlkID0gcGVuZGluZ0FjdGlvblJlc3VsdCAmJiBpc0Vycm9yUmVzdWx0KHBlbmRpbmdBY3Rpb25SZXN1bHRbMV0pID8gcGVuZGluZ0FjdGlvblJlc3VsdFswXSA6IHVuZGVmaW5lZDtcbiAgbGV0IGJvdW5kYXJ5TWF0Y2hlcyA9IGJvdW5kYXJ5SWQgPyBnZXRMb2FkZXJNYXRjaGVzVW50aWxCb3VuZGFyeShtYXRjaGVzLCBib3VuZGFyeUlkKSA6IG1hdGNoZXM7XG4gIC8vIERvbid0IHJldmFsaWRhdGUgbG9hZGVycyBieSBkZWZhdWx0IGFmdGVyIGFjdGlvbiA0eHgvNXh4IHJlc3BvbnNlc1xuICAvLyB3aGVuIHRoZSBmbGFnIGlzIGVuYWJsZWQuICBUaGV5IGNhbiBzdGlsbCBvcHQtaW50byByZXZhbGlkYXRpb24gdmlhXG4gIC8vIGBzaG91bGRSZXZhbGlkYXRlYCB2aWEgYGFjdGlvblJlc3VsdGBcbiAgbGV0IGFjdGlvblN0YXR1cyA9IHBlbmRpbmdBY3Rpb25SZXN1bHQgPyBwZW5kaW5nQWN0aW9uUmVzdWx0WzFdLnN0YXR1c0NvZGUgOiB1bmRlZmluZWQ7XG4gIGxldCBzaG91bGRTa2lwUmV2YWxpZGF0aW9uID0gc2tpcEFjdGlvbkVycm9yUmV2YWxpZGF0aW9uICYmIGFjdGlvblN0YXR1cyAmJiBhY3Rpb25TdGF0dXMgPj0gNDAwO1xuICBsZXQgbmF2aWdhdGlvbk1hdGNoZXMgPSBib3VuZGFyeU1hdGNoZXMuZmlsdGVyKChtYXRjaCwgaW5kZXgpID0+IHtcbiAgICBsZXQge1xuICAgICAgcm91dGVcbiAgICB9ID0gbWF0Y2g7XG4gICAgaWYgKHJvdXRlLmxhenkpIHtcbiAgICAgIC8vIFdlIGhhdmVuJ3QgbG9hZGVkIHRoaXMgcm91dGUgeWV0IHNvIHdlIGRvbid0IGtub3cgaWYgaXQncyBnb3QgYSBsb2FkZXIhXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHJvdXRlLmxvYWRlciA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChpc0luaXRpYWxMb2FkKSB7XG4gICAgICBpZiAodHlwZW9mIHJvdXRlLmxvYWRlciAhPT0gXCJmdW5jdGlvblwiIHx8IHJvdXRlLmxvYWRlci5oeWRyYXRlKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN0YXRlLmxvYWRlckRhdGFbcm91dGUuaWRdID09PSB1bmRlZmluZWQgJiYgKFxuICAgICAgLy8gRG9uJ3QgcmUtcnVuIGlmIHRoZSBsb2FkZXIgcmFuIGFuZCB0aHJldyBhbiBlcnJvclxuICAgICAgIXN0YXRlLmVycm9ycyB8fCBzdGF0ZS5lcnJvcnNbcm91dGUuaWRdID09PSB1bmRlZmluZWQpO1xuICAgIH1cbiAgICAvLyBBbHdheXMgY2FsbCB0aGUgbG9hZGVyIG9uIG5ldyByb3V0ZSBpbnN0YW5jZXMgYW5kIHBlbmRpbmcgZGVmZXIgY2FuY2VsbGF0aW9uc1xuICAgIGlmIChpc05ld0xvYWRlcihzdGF0ZS5sb2FkZXJEYXRhLCBzdGF0ZS5tYXRjaGVzW2luZGV4XSwgbWF0Y2gpIHx8IGNhbmNlbGxlZERlZmVycmVkUm91dGVzLnNvbWUoaWQgPT4gaWQgPT09IG1hdGNoLnJvdXRlLmlkKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIC8vIFRoaXMgaXMgdGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gZm9yIHdoZW4gd2UgcmV2YWxpZGF0ZS4gIElmIHRoZSByb3V0ZVxuICAgIC8vIHByb3ZpZGVzIGl0J3Mgb3duIGltcGxlbWVudGF0aW9uLCB0aGVuIHdlIGdpdmUgdGhlbSBmdWxsIGNvbnRyb2wgYnV0XG4gICAgLy8gcHJvdmlkZSB0aGlzIHZhbHVlIHNvIHRoZXkgY2FuIGxldmVyYWdlIGl0IGlmIG5lZWRlZCBhZnRlciB0aGV5IGNoZWNrXG4gICAgLy8gdGhlaXIgb3duIHNwZWNpZmljIHVzZSBjYXNlc1xuICAgIGxldCBjdXJyZW50Um91dGVNYXRjaCA9IHN0YXRlLm1hdGNoZXNbaW5kZXhdO1xuICAgIGxldCBuZXh0Um91dGVNYXRjaCA9IG1hdGNoO1xuICAgIHJldHVybiBzaG91bGRSZXZhbGlkYXRlTG9hZGVyKG1hdGNoLCBfZXh0ZW5kcyh7XG4gICAgICBjdXJyZW50VXJsLFxuICAgICAgY3VycmVudFBhcmFtczogY3VycmVudFJvdXRlTWF0Y2gucGFyYW1zLFxuICAgICAgbmV4dFVybCxcbiAgICAgIG5leHRQYXJhbXM6IG5leHRSb3V0ZU1hdGNoLnBhcmFtc1xuICAgIH0sIHN1Ym1pc3Npb24sIHtcbiAgICAgIGFjdGlvblJlc3VsdCxcbiAgICAgIHVuc3RhYmxlX2FjdGlvblN0YXR1czogYWN0aW9uU3RhdHVzLFxuICAgICAgZGVmYXVsdFNob3VsZFJldmFsaWRhdGU6IHNob3VsZFNraXBSZXZhbGlkYXRpb24gPyBmYWxzZSA6XG4gICAgICAvLyBGb3JjZWQgcmV2YWxpZGF0aW9uIGR1ZSB0byBzdWJtaXNzaW9uLCB1c2VSZXZhbGlkYXRvciwgb3IgWC1SZW1peC1SZXZhbGlkYXRlXG4gICAgICBpc1JldmFsaWRhdGlvblJlcXVpcmVkIHx8IGN1cnJlbnRVcmwucGF0aG5hbWUgKyBjdXJyZW50VXJsLnNlYXJjaCA9PT0gbmV4dFVybC5wYXRobmFtZSArIG5leHRVcmwuc2VhcmNoIHx8XG4gICAgICAvLyBTZWFyY2ggcGFyYW1zIGFmZmVjdCBhbGwgbG9hZGVyc1xuICAgICAgY3VycmVudFVybC5zZWFyY2ggIT09IG5leHRVcmwuc2VhcmNoIHx8IGlzTmV3Um91dGVJbnN0YW5jZShjdXJyZW50Um91dGVNYXRjaCwgbmV4dFJvdXRlTWF0Y2gpXG4gICAgfSkpO1xuICB9KTtcbiAgLy8gUGljayBmZXRjaGVyLmxvYWRzIHRoYXQgbmVlZCB0byBiZSByZXZhbGlkYXRlZFxuICBsZXQgcmV2YWxpZGF0aW5nRmV0Y2hlcnMgPSBbXTtcbiAgZmV0Y2hMb2FkTWF0Y2hlcy5mb3JFYWNoKChmLCBrZXkpID0+IHtcbiAgICAvLyBEb24ndCByZXZhbGlkYXRlOlxuICAgIC8vICAtIG9uIGluaXRpYWwgbG9hZCAoc2hvdWxkbid0IGJlIGFueSBmZXRjaGVycyB0aGVuIGFueXdheSlcbiAgICAvLyAgLSBpZiBmZXRjaGVyIHdvbid0IGJlIHByZXNlbnQgaW4gdGhlIHN1YnNlcXVlbnQgcmVuZGVyXG4gICAgLy8gICAgLSBubyBsb25nZXIgbWF0Y2hlcyB0aGUgVVJMICh2N19mZXRjaGVyUGVyc2lzdD1mYWxzZSlcbiAgICAvLyAgICAtIHdhcyB1bm1vdW50ZWQgYnV0IHBlcnNpc3RlZCBkdWUgdG8gdjdfZmV0Y2hlclBlcnNpc3Q9dHJ1ZVxuICAgIGlmIChpc0luaXRpYWxMb2FkIHx8ICFtYXRjaGVzLnNvbWUobSA9PiBtLnJvdXRlLmlkID09PSBmLnJvdXRlSWQpIHx8IGRlbGV0ZWRGZXRjaGVycy5oYXMoa2V5KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgZmV0Y2hlck1hdGNoZXMgPSBtYXRjaFJvdXRlcyhyb3V0ZXNUb1VzZSwgZi5wYXRoLCBiYXNlbmFtZSk7XG4gICAgLy8gSWYgdGhlIGZldGNoZXIgcGF0aCBubyBsb25nZXIgbWF0Y2hlcywgcHVzaCBpdCBpbiB3aXRoIG51bGwgbWF0Y2hlcyBzb1xuICAgIC8vIHdlIGNhbiB0cmlnZ2VyIGEgNDA0IGluIGNhbGxMb2FkZXJzQW5kTWF5YmVSZXNvbHZlRGF0YS4gIE5vdGUgdGhpcyBpc1xuICAgIC8vIGN1cnJlbnRseSBvbmx5IGEgdXNlLWNhc2UgZm9yIFJlbWl4IEhNUiB3aGVyZSB0aGUgcm91dGUgdHJlZSBjYW4gY2hhbmdlXG4gICAgLy8gYXQgcnVudGltZSBhbmQgcmVtb3ZlIGEgcm91dGUgcHJldmlvdXNseSBsb2FkZWQgdmlhIGEgZmV0Y2hlclxuICAgIGlmICghZmV0Y2hlck1hdGNoZXMpIHtcbiAgICAgIHJldmFsaWRhdGluZ0ZldGNoZXJzLnB1c2goe1xuICAgICAgICBrZXksXG4gICAgICAgIHJvdXRlSWQ6IGYucm91dGVJZCxcbiAgICAgICAgcGF0aDogZi5wYXRoLFxuICAgICAgICBtYXRjaGVzOiBudWxsLFxuICAgICAgICBtYXRjaDogbnVsbCxcbiAgICAgICAgY29udHJvbGxlcjogbnVsbFxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIFJldmFsaWRhdGluZyBmZXRjaGVycyBhcmUgZGVjb3VwbGVkIGZyb20gdGhlIHJvdXRlIG1hdGNoZXMgc2luY2UgdGhleVxuICAgIC8vIGxvYWQgZnJvbSBhIHN0YXRpYyBocmVmLiAgVGhleSByZXZhbGlkYXRlIGJhc2VkIG9uIGV4cGxpY2l0IHJldmFsaWRhdGlvblxuICAgIC8vIChzdWJtaXNzaW9uLCB1c2VSZXZhbGlkYXRvciwgb3IgWC1SZW1peC1SZXZhbGlkYXRlKVxuICAgIGxldCBmZXRjaGVyID0gc3RhdGUuZmV0Y2hlcnMuZ2V0KGtleSk7XG4gICAgbGV0IGZldGNoZXJNYXRjaCA9IGdldFRhcmdldE1hdGNoKGZldGNoZXJNYXRjaGVzLCBmLnBhdGgpO1xuICAgIGxldCBzaG91bGRSZXZhbGlkYXRlID0gZmFsc2U7XG4gICAgaWYgKGZldGNoUmVkaXJlY3RJZHMuaGFzKGtleSkpIHtcbiAgICAgIC8vIE5ldmVyIHRyaWdnZXIgYSByZXZhbGlkYXRpb24gb2YgYW4gYWN0aXZlbHkgcmVkaXJlY3RpbmcgZmV0Y2hlclxuICAgICAgc2hvdWxkUmV2YWxpZGF0ZSA9IGZhbHNlO1xuICAgIH0gZWxzZSBpZiAoY2FuY2VsbGVkRmV0Y2hlckxvYWRzLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgIC8vIEFsd2F5cyByZXZhbGlkYXRlIGlmIHRoZSBmZXRjaGVyIHdhcyBjYW5jZWxsZWRcbiAgICAgIHNob3VsZFJldmFsaWRhdGUgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAoZmV0Y2hlciAmJiBmZXRjaGVyLnN0YXRlICE9PSBcImlkbGVcIiAmJiBmZXRjaGVyLmRhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gSWYgdGhlIGZldGNoZXIgaGFzbid0IGV2ZXIgY29tcGxldGVkIGxvYWRpbmcgeWV0LCB0aGVuIHRoaXMgaXNuJ3QgYVxuICAgICAgLy8gcmV2YWxpZGF0aW9uLCBpdCB3b3VsZCBqdXN0IGJlIGEgYnJhbmQgbmV3IGxvYWQgaWYgYW4gZXhwbGljaXRcbiAgICAgIC8vIHJldmFsaWRhdGlvbiBpcyByZXF1aXJlZFxuICAgICAgc2hvdWxkUmV2YWxpZGF0ZSA9IGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE90aGVyd2lzZSBmYWxsIGJhY2sgb24gYW55IHVzZXItZGVmaW5lZCBzaG91bGRSZXZhbGlkYXRlLCBkZWZhdWx0aW5nXG4gICAgICAvLyB0byBleHBsaWNpdCByZXZhbGlkYXRpb25zIG9ubHlcbiAgICAgIHNob3VsZFJldmFsaWRhdGUgPSBzaG91bGRSZXZhbGlkYXRlTG9hZGVyKGZldGNoZXJNYXRjaCwgX2V4dGVuZHMoe1xuICAgICAgICBjdXJyZW50VXJsLFxuICAgICAgICBjdXJyZW50UGFyYW1zOiBzdGF0ZS5tYXRjaGVzW3N0YXRlLm1hdGNoZXMubGVuZ3RoIC0gMV0ucGFyYW1zLFxuICAgICAgICBuZXh0VXJsLFxuICAgICAgICBuZXh0UGFyYW1zOiBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV0ucGFyYW1zXG4gICAgICB9LCBzdWJtaXNzaW9uLCB7XG4gICAgICAgIGFjdGlvblJlc3VsdCxcbiAgICAgICAgdW5zdGFibGVfYWN0aW9uU3RhdHVzOiBhY3Rpb25TdGF0dXMsXG4gICAgICAgIGRlZmF1bHRTaG91bGRSZXZhbGlkYXRlOiBzaG91bGRTa2lwUmV2YWxpZGF0aW9uID8gZmFsc2UgOiBpc1JldmFsaWRhdGlvblJlcXVpcmVkXG4gICAgICB9KSk7XG4gICAgfVxuICAgIGlmIChzaG91bGRSZXZhbGlkYXRlKSB7XG4gICAgICByZXZhbGlkYXRpbmdGZXRjaGVycy5wdXNoKHtcbiAgICAgICAga2V5LFxuICAgICAgICByb3V0ZUlkOiBmLnJvdXRlSWQsXG4gICAgICAgIHBhdGg6IGYucGF0aCxcbiAgICAgICAgbWF0Y2hlczogZmV0Y2hlck1hdGNoZXMsXG4gICAgICAgIG1hdGNoOiBmZXRjaGVyTWF0Y2gsXG4gICAgICAgIGNvbnRyb2xsZXI6IG5ldyBBYm9ydENvbnRyb2xsZXIoKVxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIFtuYXZpZ2F0aW9uTWF0Y2hlcywgcmV2YWxpZGF0aW5nRmV0Y2hlcnNdO1xufVxuZnVuY3Rpb24gaXNOZXdMb2FkZXIoY3VycmVudExvYWRlckRhdGEsIGN1cnJlbnRNYXRjaCwgbWF0Y2gpIHtcbiAgbGV0IGlzTmV3ID1cbiAgLy8gW2FdIC0+IFthLCBiXVxuICAhY3VycmVudE1hdGNoIHx8XG4gIC8vIFthLCBiXSAtPiBbYSwgY11cbiAgbWF0Y2gucm91dGUuaWQgIT09IGN1cnJlbnRNYXRjaC5yb3V0ZS5pZDtcbiAgLy8gSGFuZGxlIHRoZSBjYXNlIHRoYXQgd2UgZG9uJ3QgaGF2ZSBkYXRhIGZvciBhIHJlLXVzZWQgcm91dGUsIHBvdGVudGlhbGx5XG4gIC8vIGZyb20gYSBwcmlvciBlcnJvciBvciBmcm9tIGEgY2FuY2VsbGVkIHBlbmRpbmcgZGVmZXJyZWRcbiAgbGV0IGlzTWlzc2luZ0RhdGEgPSBjdXJyZW50TG9hZGVyRGF0YVttYXRjaC5yb3V0ZS5pZF0gPT09IHVuZGVmaW5lZDtcbiAgLy8gQWx3YXlzIGxvYWQgaWYgdGhpcyBpcyBhIG5ldC1uZXcgcm91dGUgb3Igd2UgZG9uJ3QgeWV0IGhhdmUgZGF0YVxuICByZXR1cm4gaXNOZXcgfHwgaXNNaXNzaW5nRGF0YTtcbn1cbmZ1bmN0aW9uIGlzTmV3Um91dGVJbnN0YW5jZShjdXJyZW50TWF0Y2gsIG1hdGNoKSB7XG4gIGxldCBjdXJyZW50UGF0aCA9IGN1cnJlbnRNYXRjaC5yb3V0ZS5wYXRoO1xuICByZXR1cm4gKFxuICAgIC8vIHBhcmFtIGNoYW5nZSBmb3IgdGhpcyBtYXRjaCwgL3VzZXJzLzEyMyAtPiAvdXNlcnMvNDU2XG4gICAgY3VycmVudE1hdGNoLnBhdGhuYW1lICE9PSBtYXRjaC5wYXRobmFtZSB8fFxuICAgIC8vIHNwbGF0IHBhcmFtIGNoYW5nZWQsIHdoaWNoIGlzIG5vdCBwcmVzZW50IGluIG1hdGNoLnBhdGhcbiAgICAvLyBlLmcuIC9maWxlcy9pbWFnZXMvYXZhdGFyLmpwZyAtPiBmaWxlcy9maW5hbmNlcy54bHNcbiAgICBjdXJyZW50UGF0aCAhPSBudWxsICYmIGN1cnJlbnRQYXRoLmVuZHNXaXRoKFwiKlwiKSAmJiBjdXJyZW50TWF0Y2gucGFyYW1zW1wiKlwiXSAhPT0gbWF0Y2gucGFyYW1zW1wiKlwiXVxuICApO1xufVxuZnVuY3Rpb24gc2hvdWxkUmV2YWxpZGF0ZUxvYWRlcihsb2FkZXJNYXRjaCwgYXJnKSB7XG4gIGlmIChsb2FkZXJNYXRjaC5yb3V0ZS5zaG91bGRSZXZhbGlkYXRlKSB7XG4gICAgbGV0IHJvdXRlQ2hvaWNlID0gbG9hZGVyTWF0Y2gucm91dGUuc2hvdWxkUmV2YWxpZGF0ZShhcmcpO1xuICAgIGlmICh0eXBlb2Ygcm91dGVDaG9pY2UgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICByZXR1cm4gcm91dGVDaG9pY2U7XG4gICAgfVxuICB9XG4gIHJldHVybiBhcmcuZGVmYXVsdFNob3VsZFJldmFsaWRhdGU7XG59XG4vKipcbiAqIEV4ZWN1dGUgcm91dGUubGF6eSgpIG1ldGhvZHMgdG8gbGF6aWx5IGxvYWQgcm91dGUgbW9kdWxlcyAobG9hZGVyLCBhY3Rpb24sXG4gKiBzaG91bGRSZXZhbGlkYXRlKSBhbmQgdXBkYXRlIHRoZSByb3V0ZU1hbmlmZXN0IGluIHBsYWNlIHdoaWNoIHNoYXJlcyBvYmplY3RzXG4gKiB3aXRoIGRhdGFSb3V0ZXMgc28gdGhvc2UgZ2V0IHVwZGF0ZWQgYXMgd2VsbC5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gbG9hZExhenlSb3V0ZU1vZHVsZShyb3V0ZSwgbWFwUm91dGVQcm9wZXJ0aWVzLCBtYW5pZmVzdCkge1xuICBpZiAoIXJvdXRlLmxhenkpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgbGV0IGxhenlSb3V0ZSA9IGF3YWl0IHJvdXRlLmxhenkoKTtcbiAgLy8gSWYgdGhlIGxhenkgcm91dGUgZnVuY3Rpb24gd2FzIGV4ZWN1dGVkIGFuZCByZW1vdmVkIGJ5IGFub3RoZXIgcGFyYWxsZWxcbiAgLy8gY2FsbCB0aGVuIHdlIGNhbiByZXR1cm4gLSBmaXJzdCBsYXp5KCkgdG8gZmluaXNoIHdpbnMgYmVjYXVzZSB0aGUgcmV0dXJuXG4gIC8vIHZhbHVlIG9mIGxhenkgaXMgZXhwZWN0ZWQgdG8gYmUgc3RhdGljXG4gIGlmICghcm91dGUubGF6eSkge1xuICAgIHJldHVybjtcbiAgfVxuICBsZXQgcm91dGVUb1VwZGF0ZSA9IG1hbmlmZXN0W3JvdXRlLmlkXTtcbiAgaW52YXJpYW50KHJvdXRlVG9VcGRhdGUsIFwiTm8gcm91dGUgZm91bmQgaW4gbWFuaWZlc3RcIik7XG4gIC8vIFVwZGF0ZSB0aGUgcm91dGUgaW4gcGxhY2UuICBUaGlzIHNob3VsZCBiZSBzYWZlIGJlY2F1c2UgdGhlcmUncyBubyB3YXlcbiAgLy8gd2UgY291bGQgeWV0IGJlIHNpdHRpbmcgb24gdGhpcyByb3V0ZSBhcyB3ZSBjYW4ndCBnZXQgdGhlcmUgd2l0aG91dFxuICAvLyByZXNvbHZpbmcgbGF6eSgpIGZpcnN0LlxuICAvL1xuICAvLyBUaGlzIGlzIGRpZmZlcmVudCB0aGFuIHRoZSBITVIgXCJ1cGRhdGVcIiB1c2UtY2FzZSB3aGVyZSB3ZSBtYXkgYWN0aXZlbHkgYmVcbiAgLy8gb24gdGhlIHJvdXRlIGJlaW5nIHVwZGF0ZWQuICBUaGUgbWFpbiBjb25jZXJuIGJvaWxzIGRvd24gdG8gXCJkb2VzIHRoaXNcbiAgLy8gbXV0YXRpb24gYWZmZWN0IGFueSBvbmdvaW5nIG5hdmlnYXRpb25zIG9yIGFueSBjdXJyZW50IHN0YXRlLm1hdGNoZXNcbiAgLy8gdmFsdWVzP1wiLiAgSWYgbm90LCBpdCBzaG91bGQgYmUgc2FmZSB0byB1cGRhdGUgaW4gcGxhY2UuXG4gIGxldCByb3V0ZVVwZGF0ZXMgPSB7fTtcbiAgZm9yIChsZXQgbGF6eVJvdXRlUHJvcGVydHkgaW4gbGF6eVJvdXRlKSB7XG4gICAgbGV0IHN0YXRpY1JvdXRlVmFsdWUgPSByb3V0ZVRvVXBkYXRlW2xhenlSb3V0ZVByb3BlcnR5XTtcbiAgICBsZXQgaXNQcm9wZXJ0eVN0YXRpY2FsbHlEZWZpbmVkID0gc3RhdGljUm91dGVWYWx1ZSAhPT0gdW5kZWZpbmVkICYmXG4gICAgLy8gVGhpcyBwcm9wZXJ0eSBpc24ndCBzdGF0aWMgc2luY2UgaXQgc2hvdWxkIGFsd2F5cyBiZSB1cGRhdGVkIGJhc2VkXG4gICAgLy8gb24gdGhlIHJvdXRlIHVwZGF0ZXNcbiAgICBsYXp5Um91dGVQcm9wZXJ0eSAhPT0gXCJoYXNFcnJvckJvdW5kYXJ5XCI7XG4gICAgd2FybmluZyghaXNQcm9wZXJ0eVN0YXRpY2FsbHlEZWZpbmVkLCBcIlJvdXRlIFxcXCJcIiArIHJvdXRlVG9VcGRhdGUuaWQgKyBcIlxcXCIgaGFzIGEgc3RhdGljIHByb3BlcnR5IFxcXCJcIiArIGxhenlSb3V0ZVByb3BlcnR5ICsgXCJcXFwiIFwiICsgXCJkZWZpbmVkIGJ1dCBpdHMgbGF6eSBmdW5jdGlvbiBpcyBhbHNvIHJldHVybmluZyBhIHZhbHVlIGZvciB0aGlzIHByb3BlcnR5LiBcIiArIChcIlRoZSBsYXp5IHJvdXRlIHByb3BlcnR5IFxcXCJcIiArIGxhenlSb3V0ZVByb3BlcnR5ICsgXCJcXFwiIHdpbGwgYmUgaWdub3JlZC5cIikpO1xuICAgIGlmICghaXNQcm9wZXJ0eVN0YXRpY2FsbHlEZWZpbmVkICYmICFpbW11dGFibGVSb3V0ZUtleXMuaGFzKGxhenlSb3V0ZVByb3BlcnR5KSkge1xuICAgICAgcm91dGVVcGRhdGVzW2xhenlSb3V0ZVByb3BlcnR5XSA9IGxhenlSb3V0ZVtsYXp5Um91dGVQcm9wZXJ0eV07XG4gICAgfVxuICB9XG4gIC8vIE11dGF0ZSB0aGUgcm91dGUgd2l0aCB0aGUgcHJvdmlkZWQgdXBkYXRlcy4gIERvIHRoaXMgZmlyc3Qgc28gd2UgcGFzc1xuICAvLyB0aGUgdXBkYXRlZCB2ZXJzaW9uIHRvIG1hcFJvdXRlUHJvcGVydGllc1xuICBPYmplY3QuYXNzaWduKHJvdXRlVG9VcGRhdGUsIHJvdXRlVXBkYXRlcyk7XG4gIC8vIE11dGF0ZSB0aGUgYGhhc0Vycm9yQm91bmRhcnlgIHByb3BlcnR5IG9uIHRoZSByb3V0ZSBiYXNlZCBvbiB0aGUgcm91dGVcbiAgLy8gdXBkYXRlcyBhbmQgcmVtb3ZlIHRoZSBgbGF6eWAgZnVuY3Rpb24gc28gd2UgZG9uJ3QgcmVzb2x2ZSB0aGUgbGF6eVxuICAvLyByb3V0ZSBhZ2Fpbi5cbiAgT2JqZWN0LmFzc2lnbihyb3V0ZVRvVXBkYXRlLCBfZXh0ZW5kcyh7fSwgbWFwUm91dGVQcm9wZXJ0aWVzKHJvdXRlVG9VcGRhdGUpLCB7XG4gICAgbGF6eTogdW5kZWZpbmVkXG4gIH0pKTtcbn1cbi8vIERlZmF1bHQgaW1wbGVtZW50YXRpb24gb2YgYGRhdGFTdHJhdGVneWAgd2hpY2ggZmV0Y2hlcyBhbGwgbG9hZGVycyBpbiBwYXJhbGxlbFxuZnVuY3Rpb24gZGVmYXVsdERhdGFTdHJhdGVneShvcHRzKSB7XG4gIHJldHVybiBQcm9taXNlLmFsbChvcHRzLm1hdGNoZXMubWFwKG0gPT4gbS5yZXNvbHZlKCkpKTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGNhbGxEYXRhU3RyYXRlZ3lJbXBsKGRhdGFTdHJhdGVneUltcGwsIHR5cGUsIHJlcXVlc3QsIG1hdGNoZXNUb0xvYWQsIG1hdGNoZXMsIG1hbmlmZXN0LCBtYXBSb3V0ZVByb3BlcnRpZXMsIHJlcXVlc3RDb250ZXh0KSB7XG4gIGxldCByb3V0ZUlkc1RvTG9hZCA9IG1hdGNoZXNUb0xvYWQucmVkdWNlKChhY2MsIG0pID0+IGFjYy5hZGQobS5yb3V0ZS5pZCksIG5ldyBTZXQoKSk7XG4gIGxldCBsb2FkZWRNYXRjaGVzID0gbmV3IFNldCgpO1xuICAvLyBTZW5kIGFsbCBtYXRjaGVzIGhlcmUgdG8gYWxsb3cgZm9yIGEgbWlkZGxld2FyZS10eXBlIGltcGxlbWVudGF0aW9uLlxuICAvLyBoYW5kbGVyIHdpbGwgYmUgYSBuby1vcCBmb3IgdW5uZWVkZWQgcm91dGVzIGFuZCB3ZSBmaWx0ZXIgdGhvc2UgcmVzdWx0c1xuICAvLyBiYWNrIG91dCBiZWxvdy5cbiAgbGV0IHJlc3VsdHMgPSBhd2FpdCBkYXRhU3RyYXRlZ3lJbXBsKHtcbiAgICBtYXRjaGVzOiBtYXRjaGVzLm1hcChtYXRjaCA9PiB7XG4gICAgICBsZXQgc2hvdWxkTG9hZCA9IHJvdXRlSWRzVG9Mb2FkLmhhcyhtYXRjaC5yb3V0ZS5pZCk7XG4gICAgICAvLyBgcmVzb2x2ZWAgZW5jYXBzdWxhdGVzIHRoZSByb3V0ZS5sYXp5LCBleGVjdXRpbmcgdGhlXG4gICAgICAvLyBsb2FkZXIvYWN0aW9uLCBhbmQgbWFwcGluZyByZXR1cm4gdmFsdWVzL3Rocm93biBlcnJvcnMgdG8gYVxuICAgICAgLy8gSGFuZGxlclJlc3VsdC4gIFVzZXJzIGNhbiBwYXNzIGEgY2FsbGJhY2sgdG8gdGFrZSBmaW5lLWdyYWluZWQgY29udHJvbFxuICAgICAgLy8gb3ZlciB0aGUgZXhlY3V0aW9uIG9mIHRoZSBsb2FkZXIvYWN0aW9uXG4gICAgICBsZXQgcmVzb2x2ZSA9IGhhbmRsZXJPdmVycmlkZSA9PiB7XG4gICAgICAgIGxvYWRlZE1hdGNoZXMuYWRkKG1hdGNoLnJvdXRlLmlkKTtcbiAgICAgICAgcmV0dXJuIHNob3VsZExvYWQgPyBjYWxsTG9hZGVyT3JBY3Rpb24odHlwZSwgcmVxdWVzdCwgbWF0Y2gsIG1hbmlmZXN0LCBtYXBSb3V0ZVByb3BlcnRpZXMsIGhhbmRsZXJPdmVycmlkZSwgcmVxdWVzdENvbnRleHQpIDogUHJvbWlzZS5yZXNvbHZlKHtcbiAgICAgICAgICB0eXBlOiBSZXN1bHRUeXBlLmRhdGEsXG4gICAgICAgICAgcmVzdWx0OiB1bmRlZmluZWRcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBtYXRjaCwge1xuICAgICAgICBzaG91bGRMb2FkLFxuICAgICAgICByZXNvbHZlXG4gICAgICB9KTtcbiAgICB9KSxcbiAgICByZXF1ZXN0LFxuICAgIHBhcmFtczogbWF0Y2hlc1swXS5wYXJhbXMsXG4gICAgY29udGV4dDogcmVxdWVzdENvbnRleHRcbiAgfSk7XG4gIC8vIFRocm93IGlmIGFueSBsb2FkUm91dGUgaW1wbGVtZW50YXRpb25zIG5vdCBjYWxsZWQgc2luY2UgdGhleSBhcmUgd2hhdFxuICAvLyBlbnN1cmVzIGEgcm91dGUgaXMgZnVsbHkgbG9hZGVkXG4gIG1hdGNoZXMuZm9yRWFjaChtID0+IGludmFyaWFudChsb2FkZWRNYXRjaGVzLmhhcyhtLnJvdXRlLmlkKSwgXCJgbWF0Y2gucmVzb2x2ZSgpYCB3YXMgbm90IGNhbGxlZCBmb3Igcm91dGUgaWQgXFxcIlwiICsgbS5yb3V0ZS5pZCArIFwiXFxcIi4gXCIgKyBcIllvdSBtdXN0IGNhbGwgYG1hdGNoLnJlc29sdmUoKWAgb24gZXZlcnkgbWF0Y2ggcGFzc2VkIHRvIFwiICsgXCJgZGF0YVN0cmF0ZWd5YCB0byBlbnN1cmUgYWxsIHJvdXRlcyBhcmUgcHJvcGVybHkgbG9hZGVkLlwiKSk7XG4gIC8vIEZpbHRlciBvdXQgYW55IG1pZGRsZXdhcmUtb25seSBtYXRjaGVzIGZvciB3aGljaCB3ZSBkaWRuJ3QgbmVlZCB0byBydW4gaGFuZGxlcnNcbiAgcmV0dXJuIHJlc3VsdHMuZmlsdGVyKChfLCBpKSA9PiByb3V0ZUlkc1RvTG9hZC5oYXMobWF0Y2hlc1tpXS5yb3V0ZS5pZCkpO1xufVxuLy8gRGVmYXVsdCBsb2dpYyBmb3IgY2FsbGluZyBhIGxvYWRlci9hY3Rpb24gaXMgdGhlIHVzZXIgaGFzIG5vIHNwZWNpZmllZCBhIGRhdGFTdHJhdGVneVxuYXN5bmMgZnVuY3Rpb24gY2FsbExvYWRlck9yQWN0aW9uKHR5cGUsIHJlcXVlc3QsIG1hdGNoLCBtYW5pZmVzdCwgbWFwUm91dGVQcm9wZXJ0aWVzLCBoYW5kbGVyT3ZlcnJpZGUsIHN0YXRpY0NvbnRleHQpIHtcbiAgbGV0IHJlc3VsdDtcbiAgbGV0IG9uUmVqZWN0O1xuICBsZXQgcnVuSGFuZGxlciA9IGhhbmRsZXIgPT4ge1xuICAgIC8vIFNldHVwIGEgcHJvbWlzZSB3ZSBjYW4gcmFjZSBhZ2FpbnN0IHNvIHRoYXQgYWJvcnQgc2lnbmFscyBzaG9ydCBjaXJjdWl0XG4gICAgbGV0IHJlamVjdDtcbiAgICAvLyBUaGlzIHdpbGwgbmV2ZXIgcmVzb2x2ZSBzbyBzYWZlIHRvIHR5cGUgaXQgYXMgUHJvbWlzZTxIYW5kbGVyUmVzdWx0PiB0b1xuICAgIC8vIHNhdGlzZnkgdGhlIGZ1bmN0aW9uIHJldHVybiB2YWx1ZVxuICAgIGxldCBhYm9ydFByb21pc2UgPSBuZXcgUHJvbWlzZSgoXywgcikgPT4gcmVqZWN0ID0gcik7XG4gICAgb25SZWplY3QgPSAoKSA9PiByZWplY3QoKTtcbiAgICByZXF1ZXN0LnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgb25SZWplY3QpO1xuICAgIGxldCBhY3R1YWxIYW5kbGVyID0gY3R4ID0+IHtcbiAgICAgIGlmICh0eXBlb2YgaGFuZGxlciAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJZb3UgY2Fubm90IGNhbGwgdGhlIGhhbmRsZXIgZm9yIGEgcm91dGUgd2hpY2ggZGVmaW5lcyBhIGJvb2xlYW4gXCIgKyAoXCJcXFwiXCIgKyB0eXBlICsgXCJcXFwiIFtyb3V0ZUlkOiBcIiArIG1hdGNoLnJvdXRlLmlkICsgXCJdXCIpKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaGFuZGxlcih7XG4gICAgICAgIHJlcXVlc3QsXG4gICAgICAgIHBhcmFtczogbWF0Y2gucGFyYW1zLFxuICAgICAgICBjb250ZXh0OiBzdGF0aWNDb250ZXh0XG4gICAgICB9LCAuLi4oY3R4ICE9PSB1bmRlZmluZWQgPyBbY3R4XSA6IFtdKSk7XG4gICAgfTtcbiAgICBsZXQgaGFuZGxlclByb21pc2U7XG4gICAgaWYgKGhhbmRsZXJPdmVycmlkZSkge1xuICAgICAgaGFuZGxlclByb21pc2UgPSBoYW5kbGVyT3ZlcnJpZGUoY3R4ID0+IGFjdHVhbEhhbmRsZXIoY3R4KSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGhhbmRsZXJQcm9taXNlID0gKGFzeW5jICgpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBsZXQgdmFsID0gYXdhaXQgYWN0dWFsSGFuZGxlcigpO1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiBcImRhdGFcIixcbiAgICAgICAgICAgIHJlc3VsdDogdmFsXG4gICAgICAgICAgfTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiBcImVycm9yXCIsXG4gICAgICAgICAgICByZXN1bHQ6IGVcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9KSgpO1xuICAgIH1cbiAgICByZXR1cm4gUHJvbWlzZS5yYWNlKFtoYW5kbGVyUHJvbWlzZSwgYWJvcnRQcm9taXNlXSk7XG4gIH07XG4gIHRyeSB7XG4gICAgbGV0IGhhbmRsZXIgPSBtYXRjaC5yb3V0ZVt0eXBlXTtcbiAgICBpZiAobWF0Y2gucm91dGUubGF6eSkge1xuICAgICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgLy8gUnVuIHN0YXRpY2FsbHkgZGVmaW5lZCBoYW5kbGVyIGluIHBhcmFsbGVsIHdpdGggbGF6eSgpXG4gICAgICAgIGxldCBoYW5kbGVyRXJyb3I7XG4gICAgICAgIGxldCBbdmFsdWVdID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgICAvLyBJZiB0aGUgaGFuZGxlciB0aHJvd3MsIGRvbid0IGxldCBpdCBpbW1lZGlhdGVseSBidWJibGUgb3V0LFxuICAgICAgICAvLyBzaW5jZSB3ZSBuZWVkIHRvIGxldCB0aGUgbGF6eSgpIGV4ZWN1dGlvbiBmaW5pc2ggc28gd2Uga25vdyBpZiB0aGlzXG4gICAgICAgIC8vIHJvdXRlIGhhcyBhIGJvdW5kYXJ5IHRoYXQgY2FuIGhhbmRsZSB0aGUgZXJyb3JcbiAgICAgICAgcnVuSGFuZGxlcihoYW5kbGVyKS5jYXRjaChlID0+IHtcbiAgICAgICAgICBoYW5kbGVyRXJyb3IgPSBlO1xuICAgICAgICB9KSwgbG9hZExhenlSb3V0ZU1vZHVsZShtYXRjaC5yb3V0ZSwgbWFwUm91dGVQcm9wZXJ0aWVzLCBtYW5pZmVzdCldKTtcbiAgICAgICAgaWYgKGhhbmRsZXJFcnJvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdGhyb3cgaGFuZGxlckVycm9yO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTG9hZCBsYXp5IHJvdXRlIG1vZHVsZSwgdGhlbiBydW4gYW55IHJldHVybmVkIGhhbmRsZXJcbiAgICAgICAgYXdhaXQgbG9hZExhenlSb3V0ZU1vZHVsZShtYXRjaC5yb3V0ZSwgbWFwUm91dGVQcm9wZXJ0aWVzLCBtYW5pZmVzdCk7XG4gICAgICAgIGhhbmRsZXIgPSBtYXRjaC5yb3V0ZVt0eXBlXTtcbiAgICAgICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgICAvLyBIYW5kbGVyIHN0aWxsIHJ1bnMgZXZlbiBpZiB3ZSBnb3QgaW50ZXJydXB0ZWQgdG8gbWFpbnRhaW4gY29uc2lzdGVuY3lcbiAgICAgICAgICAvLyB3aXRoIHVuLWFib3J0YWJsZSBiZWhhdmlvciBvZiBoYW5kbGVyIGV4ZWN1dGlvbiBvbiBub24tbGF6eSBvclxuICAgICAgICAgIC8vIHByZXZpb3VzbHktbGF6eS1sb2FkZWQgcm91dGVzXG4gICAgICAgICAgcmVzdWx0ID0gYXdhaXQgcnVuSGFuZGxlcihoYW5kbGVyKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSBcImFjdGlvblwiKSB7XG4gICAgICAgICAgbGV0IHVybCA9IG5ldyBVUkwocmVxdWVzdC51cmwpO1xuICAgICAgICAgIGxldCBwYXRobmFtZSA9IHVybC5wYXRobmFtZSArIHVybC5zZWFyY2g7XG4gICAgICAgICAgdGhyb3cgZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDUsIHtcbiAgICAgICAgICAgIG1ldGhvZDogcmVxdWVzdC5tZXRob2QsXG4gICAgICAgICAgICBwYXRobmFtZSxcbiAgICAgICAgICAgIHJvdXRlSWQ6IG1hdGNoLnJvdXRlLmlkXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gbGF6eSgpIHJvdXRlIGhhcyBubyBsb2FkZXIgdG8gcnVuLiAgU2hvcnQgY2lyY3VpdCBoZXJlIHNvIHdlIGRvbid0XG4gICAgICAgICAgLy8gaGl0IHRoZSBpbnZhcmlhbnQgYmVsb3cgdGhhdCBlcnJvcnMgb24gcmV0dXJuaW5nIHVuZGVmaW5lZC5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5kYXRhLFxuICAgICAgICAgICAgcmVzdWx0OiB1bmRlZmluZWRcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghaGFuZGxlcikge1xuICAgICAgbGV0IHVybCA9IG5ldyBVUkwocmVxdWVzdC51cmwpO1xuICAgICAgbGV0IHBhdGhuYW1lID0gdXJsLnBhdGhuYW1lICsgdXJsLnNlYXJjaDtcbiAgICAgIHRocm93IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA0LCB7XG4gICAgICAgIHBhdGhuYW1lXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ID0gYXdhaXQgcnVuSGFuZGxlcihoYW5kbGVyKTtcbiAgICB9XG4gICAgaW52YXJpYW50KHJlc3VsdC5yZXN1bHQgIT09IHVuZGVmaW5lZCwgXCJZb3UgZGVmaW5lZCBcIiArICh0eXBlID09PSBcImFjdGlvblwiID8gXCJhbiBhY3Rpb25cIiA6IFwiYSBsb2FkZXJcIikgKyBcIiBmb3Igcm91dGUgXCIgKyAoXCJcXFwiXCIgKyBtYXRjaC5yb3V0ZS5pZCArIFwiXFxcIiBidXQgZGlkbid0IHJldHVybiBhbnl0aGluZyBmcm9tIHlvdXIgYFwiICsgdHlwZSArIFwiYCBcIikgKyBcImZ1bmN0aW9uLiBQbGVhc2UgcmV0dXJuIGEgdmFsdWUgb3IgYG51bGxgLlwiKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIFdlIHNob3VsZCBhbHJlYWR5IGJlIGNhdGNoaW5nIGFuZCBjb252ZXJ0aW5nIG5vcm1hbCBoYW5kbGVyIGV4ZWN1dGlvbnMgdG9cbiAgICAvLyBIYW5kbGVyUmVzdWx0cyBhbmQgcmV0dXJuaW5nIHRoZW0sIHNvIGFueXRoaW5nIHRoYXQgdGhyb3dzIGhlcmUgaXMgYW5cbiAgICAvLyB1bmV4cGVjdGVkIGVycm9yIHdlIHN0aWxsIG5lZWQgdG8gd3JhcFxuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBSZXN1bHRUeXBlLmVycm9yLFxuICAgICAgcmVzdWx0OiBlXG4gICAgfTtcbiAgfSBmaW5hbGx5IHtcbiAgICBpZiAob25SZWplY3QpIHtcbiAgICAgIHJlcXVlc3Quc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBvblJlamVjdCk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5hc3luYyBmdW5jdGlvbiBjb252ZXJ0SGFuZGxlclJlc3VsdFRvRGF0YVJlc3VsdChoYW5kbGVyUmVzdWx0KSB7XG4gIGxldCB7XG4gICAgcmVzdWx0LFxuICAgIHR5cGUsXG4gICAgc3RhdHVzXG4gIH0gPSBoYW5kbGVyUmVzdWx0O1xuICBpZiAoaXNSZXNwb25zZShyZXN1bHQpKSB7XG4gICAgbGV0IGRhdGE7XG4gICAgdHJ5IHtcbiAgICAgIGxldCBjb250ZW50VHlwZSA9IHJlc3VsdC5oZWFkZXJzLmdldChcIkNvbnRlbnQtVHlwZVwiKTtcbiAgICAgIC8vIENoZWNrIGJldHdlZW4gd29yZCBib3VuZGFyaWVzIGluc3RlYWQgb2Ygc3RhcnRzV2l0aCgpIGR1ZSB0byB0aGUgbGFzdFxuICAgICAgLy8gcGFyYWdyYXBoIG9mIGh0dHBzOi8vaHR0cHdnLm9yZy9zcGVjcy9yZmM5MTEwLmh0bWwjZmllbGQuY29udGVudC10eXBlXG4gICAgICBpZiAoY29udGVudFR5cGUgJiYgL1xcYmFwcGxpY2F0aW9uXFwvanNvblxcYi8udGVzdChjb250ZW50VHlwZSkpIHtcbiAgICAgICAgaWYgKHJlc3VsdC5ib2R5ID09IG51bGwpIHtcbiAgICAgICAgICBkYXRhID0gbnVsbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkYXRhID0gYXdhaXQgcmVzdWx0Lmpzb24oKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGF0YSA9IGF3YWl0IHJlc3VsdC50ZXh0KCk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5lcnJvcixcbiAgICAgICAgZXJyb3I6IGVcbiAgICAgIH07XG4gICAgfVxuICAgIGlmICh0eXBlID09PSBSZXN1bHRUeXBlLmVycm9yKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBSZXN1bHRUeXBlLmVycm9yLFxuICAgICAgICBlcnJvcjogbmV3IEVycm9yUmVzcG9uc2VJbXBsKHJlc3VsdC5zdGF0dXMsIHJlc3VsdC5zdGF0dXNUZXh0LCBkYXRhKSxcbiAgICAgICAgc3RhdHVzQ29kZTogcmVzdWx0LnN0YXR1cyxcbiAgICAgICAgaGVhZGVyczogcmVzdWx0LmhlYWRlcnNcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBSZXN1bHRUeXBlLmRhdGEsXG4gICAgICBkYXRhLFxuICAgICAgc3RhdHVzQ29kZTogcmVzdWx0LnN0YXR1cyxcbiAgICAgIGhlYWRlcnM6IHJlc3VsdC5oZWFkZXJzXG4gICAgfTtcbiAgfVxuICBpZiAodHlwZSA9PT0gUmVzdWx0VHlwZS5lcnJvcikge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBSZXN1bHRUeXBlLmVycm9yLFxuICAgICAgZXJyb3I6IHJlc3VsdCxcbiAgICAgIHN0YXR1c0NvZGU6IGlzUm91dGVFcnJvclJlc3BvbnNlKHJlc3VsdCkgPyByZXN1bHQuc3RhdHVzIDogc3RhdHVzXG4gICAgfTtcbiAgfVxuICBpZiAoaXNEZWZlcnJlZERhdGEocmVzdWx0KSkge1xuICAgIHZhciBfcmVzdWx0JGluaXQsIF9yZXN1bHQkaW5pdDI7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZGVmZXJyZWQsXG4gICAgICBkZWZlcnJlZERhdGE6IHJlc3VsdCxcbiAgICAgIHN0YXR1c0NvZGU6IChfcmVzdWx0JGluaXQgPSByZXN1bHQuaW5pdCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9yZXN1bHQkaW5pdC5zdGF0dXMsXG4gICAgICBoZWFkZXJzOiAoKF9yZXN1bHQkaW5pdDIgPSByZXN1bHQuaW5pdCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9yZXN1bHQkaW5pdDIuaGVhZGVycykgJiYgbmV3IEhlYWRlcnMocmVzdWx0LmluaXQuaGVhZGVycylcbiAgICB9O1xuICB9XG4gIHJldHVybiB7XG4gICAgdHlwZTogUmVzdWx0VHlwZS5kYXRhLFxuICAgIGRhdGE6IHJlc3VsdCxcbiAgICBzdGF0dXNDb2RlOiBzdGF0dXNcbiAgfTtcbn1cbi8vIFN1cHBvcnQgcmVsYXRpdmUgcm91dGluZyBpbiBpbnRlcm5hbCByZWRpcmVjdHNcbmZ1bmN0aW9uIG5vcm1hbGl6ZVJlbGF0aXZlUm91dGluZ1JlZGlyZWN0UmVzcG9uc2UocmVzcG9uc2UsIHJlcXVlc3QsIHJvdXRlSWQsIG1hdGNoZXMsIGJhc2VuYW1lLCB2N19yZWxhdGl2ZVNwbGF0UGF0aCkge1xuICBsZXQgbG9jYXRpb24gPSByZXNwb25zZS5oZWFkZXJzLmdldChcIkxvY2F0aW9uXCIpO1xuICBpbnZhcmlhbnQobG9jYXRpb24sIFwiUmVkaXJlY3RzIHJldHVybmVkL3Rocm93biBmcm9tIGxvYWRlcnMvYWN0aW9ucyBtdXN0IGhhdmUgYSBMb2NhdGlvbiBoZWFkZXJcIik7XG4gIGlmICghQUJTT0xVVEVfVVJMX1JFR0VYLnRlc3QobG9jYXRpb24pKSB7XG4gICAgbGV0IHRyaW1tZWRNYXRjaGVzID0gbWF0Y2hlcy5zbGljZSgwLCBtYXRjaGVzLmZpbmRJbmRleChtID0+IG0ucm91dGUuaWQgPT09IHJvdXRlSWQpICsgMSk7XG4gICAgbG9jYXRpb24gPSBub3JtYWxpemVUbyhuZXcgVVJMKHJlcXVlc3QudXJsKSwgdHJpbW1lZE1hdGNoZXMsIGJhc2VuYW1lLCB0cnVlLCBsb2NhdGlvbiwgdjdfcmVsYXRpdmVTcGxhdFBhdGgpO1xuICAgIHJlc3BvbnNlLmhlYWRlcnMuc2V0KFwiTG9jYXRpb25cIiwgbG9jYXRpb24pO1xuICB9XG4gIHJldHVybiByZXNwb25zZTtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZVJlZGlyZWN0TG9jYXRpb24obG9jYXRpb24sIGN1cnJlbnRVcmwsIGJhc2VuYW1lKSB7XG4gIGlmIChBQlNPTFVURV9VUkxfUkVHRVgudGVzdChsb2NhdGlvbikpIHtcbiAgICAvLyBTdHJpcCBvZmYgdGhlIHByb3RvY29sK29yaWdpbiBmb3Igc2FtZS1vcmlnaW4gKyBzYW1lLWJhc2VuYW1lIGFic29sdXRlIHJlZGlyZWN0c1xuICAgIGxldCBub3JtYWxpemVkTG9jYXRpb24gPSBsb2NhdGlvbjtcbiAgICBsZXQgdXJsID0gbm9ybWFsaXplZExvY2F0aW9uLnN0YXJ0c1dpdGgoXCIvL1wiKSA/IG5ldyBVUkwoY3VycmVudFVybC5wcm90b2NvbCArIG5vcm1hbGl6ZWRMb2NhdGlvbikgOiBuZXcgVVJMKG5vcm1hbGl6ZWRMb2NhdGlvbik7XG4gICAgbGV0IGlzU2FtZUJhc2VuYW1lID0gc3RyaXBCYXNlbmFtZSh1cmwucGF0aG5hbWUsIGJhc2VuYW1lKSAhPSBudWxsO1xuICAgIGlmICh1cmwub3JpZ2luID09PSBjdXJyZW50VXJsLm9yaWdpbiAmJiBpc1NhbWVCYXNlbmFtZSkge1xuICAgICAgcmV0dXJuIHVybC5wYXRobmFtZSArIHVybC5zZWFyY2ggKyB1cmwuaGFzaDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGxvY2F0aW9uO1xufVxuLy8gVXRpbGl0eSBtZXRob2QgZm9yIGNyZWF0aW5nIHRoZSBSZXF1ZXN0IGluc3RhbmNlcyBmb3IgbG9hZGVycy9hY3Rpb25zIGR1cmluZ1xuLy8gY2xpZW50LXNpZGUgbmF2aWdhdGlvbnMgYW5kIGZldGNoZXMuICBEdXJpbmcgU1NSIHdlIHdpbGwgYWx3YXlzIGhhdmUgYVxuLy8gUmVxdWVzdCBpbnN0YW5jZSBmcm9tIHRoZSBzdGF0aWMgaGFuZGxlciAocXVlcnkvcXVlcnlSb3V0ZSlcbmZ1bmN0aW9uIGNyZWF0ZUNsaWVudFNpZGVSZXF1ZXN0KGhpc3RvcnksIGxvY2F0aW9uLCBzaWduYWwsIHN1Ym1pc3Npb24pIHtcbiAgbGV0IHVybCA9IGhpc3RvcnkuY3JlYXRlVVJMKHN0cmlwSGFzaEZyb21QYXRoKGxvY2F0aW9uKSkudG9TdHJpbmcoKTtcbiAgbGV0IGluaXQgPSB7XG4gICAgc2lnbmFsXG4gIH07XG4gIGlmIChzdWJtaXNzaW9uICYmIGlzTXV0YXRpb25NZXRob2Qoc3VibWlzc2lvbi5mb3JtTWV0aG9kKSkge1xuICAgIGxldCB7XG4gICAgICBmb3JtTWV0aG9kLFxuICAgICAgZm9ybUVuY1R5cGVcbiAgICB9ID0gc3VibWlzc2lvbjtcbiAgICAvLyBEaWRuJ3QgdGhpbmsgd2UgbmVlZGVkIHRoaXMgYnV0IGl0IHR1cm5zIG91dCB1bmxpa2Ugb3RoZXIgbWV0aG9kcywgcGF0Y2hcbiAgICAvLyB3b24ndCBiZSBwcm9wZXJseSBub3JtYWxpemVkIHRvIHVwcGVyY2FzZSBhbmQgcmVzdWx0cyBpbiBhIDQwNSBlcnJvci5cbiAgICAvLyBTZWU6IGh0dHBzOi8vZmV0Y2guc3BlYy53aGF0d2cub3JnLyNjb25jZXB0LW1ldGhvZFxuICAgIGluaXQubWV0aG9kID0gZm9ybU1ldGhvZC50b1VwcGVyQ2FzZSgpO1xuICAgIGlmIChmb3JtRW5jVHlwZSA9PT0gXCJhcHBsaWNhdGlvbi9qc29uXCIpIHtcbiAgICAgIGluaXQuaGVhZGVycyA9IG5ldyBIZWFkZXJzKHtcbiAgICAgICAgXCJDb250ZW50LVR5cGVcIjogZm9ybUVuY1R5cGVcbiAgICAgIH0pO1xuICAgICAgaW5pdC5ib2R5ID0gSlNPTi5zdHJpbmdpZnkoc3VibWlzc2lvbi5qc29uKTtcbiAgICB9IGVsc2UgaWYgKGZvcm1FbmNUeXBlID09PSBcInRleHQvcGxhaW5cIikge1xuICAgICAgLy8gQ29udGVudC1UeXBlIGlzIGluZmVycmVkIChodHRwczovL2ZldGNoLnNwZWMud2hhdHdnLm9yZy8jZG9tLXJlcXVlc3QpXG4gICAgICBpbml0LmJvZHkgPSBzdWJtaXNzaW9uLnRleHQ7XG4gICAgfSBlbHNlIGlmIChmb3JtRW5jVHlwZSA9PT0gXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiAmJiBzdWJtaXNzaW9uLmZvcm1EYXRhKSB7XG4gICAgICAvLyBDb250ZW50LVR5cGUgaXMgaW5mZXJyZWQgKGh0dHBzOi8vZmV0Y2guc3BlYy53aGF0d2cub3JnLyNkb20tcmVxdWVzdClcbiAgICAgIGluaXQuYm9keSA9IGNvbnZlcnRGb3JtRGF0YVRvU2VhcmNoUGFyYW1zKHN1Ym1pc3Npb24uZm9ybURhdGEpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBDb250ZW50LVR5cGUgaXMgaW5mZXJyZWQgKGh0dHBzOi8vZmV0Y2guc3BlYy53aGF0d2cub3JnLyNkb20tcmVxdWVzdClcbiAgICAgIGluaXQuYm9keSA9IHN1Ym1pc3Npb24uZm9ybURhdGE7XG4gICAgfVxuICB9XG4gIHJldHVybiBuZXcgUmVxdWVzdCh1cmwsIGluaXQpO1xufVxuZnVuY3Rpb24gY29udmVydEZvcm1EYXRhVG9TZWFyY2hQYXJhbXMoZm9ybURhdGEpIHtcbiAgbGV0IHNlYXJjaFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKTtcbiAgZm9yIChsZXQgW2tleSwgdmFsdWVdIG9mIGZvcm1EYXRhLmVudHJpZXMoKSkge1xuICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm0tY29udHJvbC1pbmZyYXN0cnVjdHVyZS5odG1sI2NvbnZlcnRpbmctYW4tZW50cnktbGlzdC10by1hLWxpc3Qtb2YtbmFtZS12YWx1ZS1wYWlyc1xuICAgIHNlYXJjaFBhcmFtcy5hcHBlbmQoa2V5LCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgPyB2YWx1ZSA6IHZhbHVlLm5hbWUpO1xuICB9XG4gIHJldHVybiBzZWFyY2hQYXJhbXM7XG59XG5mdW5jdGlvbiBjb252ZXJ0U2VhcmNoUGFyYW1zVG9Gb3JtRGF0YShzZWFyY2hQYXJhbXMpIHtcbiAgbGV0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XG4gIGZvciAobGV0IFtrZXksIHZhbHVlXSBvZiBzZWFyY2hQYXJhbXMuZW50cmllcygpKSB7XG4gICAgZm9ybURhdGEuYXBwZW5kKGtleSwgdmFsdWUpO1xuICB9XG4gIHJldHVybiBmb3JtRGF0YTtcbn1cbmZ1bmN0aW9uIHByb2Nlc3NSb3V0ZUxvYWRlckRhdGEobWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgcmVzdWx0cywgcGVuZGluZ0FjdGlvblJlc3VsdCwgYWN0aXZlRGVmZXJyZWRzLCBza2lwTG9hZGVyRXJyb3JCdWJibGluZykge1xuICAvLyBGaWxsIGluIGxvYWRlckRhdGEvZXJyb3JzIGZyb20gb3VyIGxvYWRlcnNcbiAgbGV0IGxvYWRlckRhdGEgPSB7fTtcbiAgbGV0IGVycm9ycyA9IG51bGw7XG4gIGxldCBzdGF0dXNDb2RlO1xuICBsZXQgZm91bmRFcnJvciA9IGZhbHNlO1xuICBsZXQgbG9hZGVySGVhZGVycyA9IHt9O1xuICBsZXQgcGVuZGluZ0Vycm9yID0gcGVuZGluZ0FjdGlvblJlc3VsdCAmJiBpc0Vycm9yUmVzdWx0KHBlbmRpbmdBY3Rpb25SZXN1bHRbMV0pID8gcGVuZGluZ0FjdGlvblJlc3VsdFsxXS5lcnJvciA6IHVuZGVmaW5lZDtcbiAgLy8gUHJvY2VzcyBsb2FkZXIgcmVzdWx0cyBpbnRvIHN0YXRlLmxvYWRlckRhdGEvc3RhdGUuZXJyb3JzXG4gIHJlc3VsdHMuZm9yRWFjaCgocmVzdWx0LCBpbmRleCkgPT4ge1xuICAgIGxldCBpZCA9IG1hdGNoZXNUb0xvYWRbaW5kZXhdLnJvdXRlLmlkO1xuICAgIGludmFyaWFudCghaXNSZWRpcmVjdFJlc3VsdChyZXN1bHQpLCBcIkNhbm5vdCBoYW5kbGUgcmVkaXJlY3QgcmVzdWx0cyBpbiBwcm9jZXNzTG9hZGVyRGF0YVwiKTtcbiAgICBpZiAoaXNFcnJvclJlc3VsdChyZXN1bHQpKSB7XG4gICAgICBsZXQgZXJyb3IgPSByZXN1bHQuZXJyb3I7XG4gICAgICAvLyBJZiB3ZSBoYXZlIGEgcGVuZGluZyBhY3Rpb24gZXJyb3IsIHdlIHJlcG9ydCBpdCBhdCB0aGUgaGlnaGVzdC1yb3V0ZVxuICAgICAgLy8gdGhhdCB0aHJvd3MgYSBsb2FkZXIgZXJyb3IsIGFuZCB0aGVuIGNsZWFyIGl0IG91dCB0byBpbmRpY2F0ZSB0aGF0XG4gICAgICAvLyBpdCB3YXMgY29uc3VtZWRcbiAgICAgIGlmIChwZW5kaW5nRXJyb3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBlcnJvciA9IHBlbmRpbmdFcnJvcjtcbiAgICAgICAgcGVuZGluZ0Vycm9yID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgZXJyb3JzID0gZXJyb3JzIHx8IHt9O1xuICAgICAgaWYgKHNraXBMb2FkZXJFcnJvckJ1YmJsaW5nKSB7XG4gICAgICAgIGVycm9yc1tpZF0gPSBlcnJvcjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIExvb2sgdXB3YXJkcyBmcm9tIHRoZSBtYXRjaGVkIHJvdXRlIGZvciB0aGUgY2xvc2VzdCBhbmNlc3RvciBlcnJvclxuICAgICAgICAvLyBib3VuZGFyeSwgZGVmYXVsdGluZyB0byB0aGUgcm9vdCBtYXRjaC4gIFByZWZlciBoaWdoZXIgZXJyb3IgdmFsdWVzXG4gICAgICAgIC8vIGlmIGxvd2VyIGVycm9ycyBidWJibGUgdG8gdGhlIHNhbWUgYm91bmRhcnlcbiAgICAgICAgbGV0IGJvdW5kYXJ5TWF0Y2ggPSBmaW5kTmVhcmVzdEJvdW5kYXJ5KG1hdGNoZXMsIGlkKTtcbiAgICAgICAgaWYgKGVycm9yc1tib3VuZGFyeU1hdGNoLnJvdXRlLmlkXSA9PSBudWxsKSB7XG4gICAgICAgICAgZXJyb3JzW2JvdW5kYXJ5TWF0Y2gucm91dGUuaWRdID0gZXJyb3I7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIENsZWFyIG91ciBhbnkgcHJpb3IgbG9hZGVyRGF0YSBmb3IgdGhlIHRocm93aW5nIHJvdXRlXG4gICAgICBsb2FkZXJEYXRhW2lkXSA9IHVuZGVmaW5lZDtcbiAgICAgIC8vIE9uY2Ugd2UgZmluZCBvdXIgZmlyc3QgKGhpZ2hlc3QpIGVycm9yLCB3ZSBzZXQgdGhlIHN0YXR1cyBjb2RlIGFuZFxuICAgICAgLy8gcHJldmVudCBkZWVwZXIgc3RhdHVzIGNvZGVzIGZyb20gb3ZlcnJpZGluZ1xuICAgICAgaWYgKCFmb3VuZEVycm9yKSB7XG4gICAgICAgIGZvdW5kRXJyb3IgPSB0cnVlO1xuICAgICAgICBzdGF0dXNDb2RlID0gaXNSb3V0ZUVycm9yUmVzcG9uc2UocmVzdWx0LmVycm9yKSA/IHJlc3VsdC5lcnJvci5zdGF0dXMgOiA1MDA7XG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0LmhlYWRlcnMpIHtcbiAgICAgICAgbG9hZGVySGVhZGVyc1tpZF0gPSByZXN1bHQuaGVhZGVycztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSkge1xuICAgICAgICBhY3RpdmVEZWZlcnJlZHMuc2V0KGlkLCByZXN1bHQuZGVmZXJyZWREYXRhKTtcbiAgICAgICAgbG9hZGVyRGF0YVtpZF0gPSByZXN1bHQuZGVmZXJyZWREYXRhLmRhdGE7XG4gICAgICAgIC8vIEVycm9yIHN0YXR1cyBjb2RlcyBhbHdheXMgb3ZlcnJpZGUgc3VjY2VzcyBzdGF0dXMgY29kZXMsIGJ1dCBpZiBhbGxcbiAgICAgICAgLy8gbG9hZGVycyBhcmUgc3VjY2Vzc2Z1bCB3ZSB0YWtlIHRoZSBkZWVwZXN0IHN0YXR1cyBjb2RlLlxuICAgICAgICBpZiAocmVzdWx0LnN0YXR1c0NvZGUgIT0gbnVsbCAmJiByZXN1bHQuc3RhdHVzQ29kZSAhPT0gMjAwICYmICFmb3VuZEVycm9yKSB7XG4gICAgICAgICAgc3RhdHVzQ29kZSA9IHJlc3VsdC5zdGF0dXNDb2RlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXN1bHQuaGVhZGVycykge1xuICAgICAgICAgIGxvYWRlckhlYWRlcnNbaWRdID0gcmVzdWx0LmhlYWRlcnM7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvYWRlckRhdGFbaWRdID0gcmVzdWx0LmRhdGE7XG4gICAgICAgIC8vIEVycm9yIHN0YXR1cyBjb2RlcyBhbHdheXMgb3ZlcnJpZGUgc3VjY2VzcyBzdGF0dXMgY29kZXMsIGJ1dCBpZiBhbGxcbiAgICAgICAgLy8gbG9hZGVycyBhcmUgc3VjY2Vzc2Z1bCB3ZSB0YWtlIHRoZSBkZWVwZXN0IHN0YXR1cyBjb2RlLlxuICAgICAgICBpZiAocmVzdWx0LnN0YXR1c0NvZGUgJiYgcmVzdWx0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiAhZm91bmRFcnJvcikge1xuICAgICAgICAgIHN0YXR1c0NvZGUgPSByZXN1bHQuc3RhdHVzQ29kZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzdWx0LmhlYWRlcnMpIHtcbiAgICAgICAgICBsb2FkZXJIZWFkZXJzW2lkXSA9IHJlc3VsdC5oZWFkZXJzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgLy8gSWYgd2UgZGlkbid0IGNvbnN1bWUgdGhlIHBlbmRpbmcgYWN0aW9uIGVycm9yIChpLmUuLCBhbGwgbG9hZGVyc1xuICAvLyByZXNvbHZlZCksIHRoZW4gY29uc3VtZSBpdCBoZXJlLiAgQWxzbyBjbGVhciBvdXQgYW55IGxvYWRlckRhdGEgZm9yIHRoZVxuICAvLyB0aHJvd2luZyByb3V0ZVxuICBpZiAocGVuZGluZ0Vycm9yICE9PSB1bmRlZmluZWQgJiYgcGVuZGluZ0FjdGlvblJlc3VsdCkge1xuICAgIGVycm9ycyA9IHtcbiAgICAgIFtwZW5kaW5nQWN0aW9uUmVzdWx0WzBdXTogcGVuZGluZ0Vycm9yXG4gICAgfTtcbiAgICBsb2FkZXJEYXRhW3BlbmRpbmdBY3Rpb25SZXN1bHRbMF1dID0gdW5kZWZpbmVkO1xuICB9XG4gIHJldHVybiB7XG4gICAgbG9hZGVyRGF0YSxcbiAgICBlcnJvcnMsXG4gICAgc3RhdHVzQ29kZTogc3RhdHVzQ29kZSB8fCAyMDAsXG4gICAgbG9hZGVySGVhZGVyc1xuICB9O1xufVxuZnVuY3Rpb24gcHJvY2Vzc0xvYWRlckRhdGEoc3RhdGUsIG1hdGNoZXMsIG1hdGNoZXNUb0xvYWQsIHJlc3VsdHMsIHBlbmRpbmdBY3Rpb25SZXN1bHQsIHJldmFsaWRhdGluZ0ZldGNoZXJzLCBmZXRjaGVyUmVzdWx0cywgYWN0aXZlRGVmZXJyZWRzKSB7XG4gIGxldCB7XG4gICAgbG9hZGVyRGF0YSxcbiAgICBlcnJvcnNcbiAgfSA9IHByb2Nlc3NSb3V0ZUxvYWRlckRhdGEobWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgcmVzdWx0cywgcGVuZGluZ0FjdGlvblJlc3VsdCwgYWN0aXZlRGVmZXJyZWRzLCBmYWxzZSAvLyBUaGlzIG1ldGhvZCBpcyBvbmx5IGNhbGxlZCBjbGllbnQgc2lkZSBzbyB3ZSBhbHdheXMgd2FudCB0byBidWJibGVcbiAgKTtcbiAgLy8gUHJvY2VzcyByZXN1bHRzIGZyb20gb3VyIHJldmFsaWRhdGluZyBmZXRjaGVyc1xuICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgcmV2YWxpZGF0aW5nRmV0Y2hlcnMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgbGV0IHtcbiAgICAgIGtleSxcbiAgICAgIG1hdGNoLFxuICAgICAgY29udHJvbGxlclxuICAgIH0gPSByZXZhbGlkYXRpbmdGZXRjaGVyc1tpbmRleF07XG4gICAgaW52YXJpYW50KGZldGNoZXJSZXN1bHRzICE9PSB1bmRlZmluZWQgJiYgZmV0Y2hlclJlc3VsdHNbaW5kZXhdICE9PSB1bmRlZmluZWQsIFwiRGlkIG5vdCBmaW5kIGNvcnJlc3BvbmRpbmcgZmV0Y2hlciByZXN1bHRcIik7XG4gICAgbGV0IHJlc3VsdCA9IGZldGNoZXJSZXN1bHRzW2luZGV4XTtcbiAgICAvLyBQcm9jZXNzIGZldGNoZXIgbm9uLXJlZGlyZWN0IGVycm9yc1xuICAgIGlmIChjb250cm9sbGVyICYmIGNvbnRyb2xsZXIuc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgIC8vIE5vdGhpbmcgdG8gZG8gZm9yIGFib3J0ZWQgZmV0Y2hlcnNcbiAgICAgIGNvbnRpbnVlO1xuICAgIH0gZWxzZSBpZiAoaXNFcnJvclJlc3VsdChyZXN1bHQpKSB7XG4gICAgICBsZXQgYm91bmRhcnlNYXRjaCA9IGZpbmROZWFyZXN0Qm91bmRhcnkoc3RhdGUubWF0Y2hlcywgbWF0Y2ggPT0gbnVsbCA/IHZvaWQgMCA6IG1hdGNoLnJvdXRlLmlkKTtcbiAgICAgIGlmICghKGVycm9ycyAmJiBlcnJvcnNbYm91bmRhcnlNYXRjaC5yb3V0ZS5pZF0pKSB7XG4gICAgICAgIGVycm9ycyA9IF9leHRlbmRzKHt9LCBlcnJvcnMsIHtcbiAgICAgICAgICBbYm91bmRhcnlNYXRjaC5yb3V0ZS5pZF06IHJlc3VsdC5lcnJvclxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHN0YXRlLmZldGNoZXJzLmRlbGV0ZShrZXkpO1xuICAgIH0gZWxzZSBpZiAoaXNSZWRpcmVjdFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICAvLyBTaG91bGQgbmV2ZXIgZ2V0IGhlcmUsIHJlZGlyZWN0cyBzaG91bGQgZ2V0IHByb2Nlc3NlZCBhYm92ZSwgYnV0IHdlXG4gICAgICAvLyBrZWVwIHRoaXMgdG8gdHlwZSBuYXJyb3cgdG8gYSBzdWNjZXNzIHJlc3VsdCBpbiB0aGUgZWxzZVxuICAgICAgaW52YXJpYW50KGZhbHNlLCBcIlVuaGFuZGxlZCBmZXRjaGVyIHJldmFsaWRhdGlvbiByZWRpcmVjdFwiKTtcbiAgICB9IGVsc2UgaWYgKGlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSkge1xuICAgICAgLy8gU2hvdWxkIG5ldmVyIGdldCBoZXJlLCBkZWZlcnJlZCBkYXRhIHNob3VsZCBiZSBhd2FpdGVkIGZvciBmZXRjaGVyc1xuICAgICAgLy8gaW4gcmVzb2x2ZURlZmVycmVkUmVzdWx0c1xuICAgICAgaW52YXJpYW50KGZhbHNlLCBcIlVuaGFuZGxlZCBmZXRjaGVyIGRlZmVycmVkIGRhdGFcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBkb25lRmV0Y2hlciA9IGdldERvbmVGZXRjaGVyKHJlc3VsdC5kYXRhKTtcbiAgICAgIHN0YXRlLmZldGNoZXJzLnNldChrZXksIGRvbmVGZXRjaGVyKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBsb2FkZXJEYXRhLFxuICAgIGVycm9yc1xuICB9O1xufVxuZnVuY3Rpb24gbWVyZ2VMb2FkZXJEYXRhKGxvYWRlckRhdGEsIG5ld0xvYWRlckRhdGEsIG1hdGNoZXMsIGVycm9ycykge1xuICBsZXQgbWVyZ2VkTG9hZGVyRGF0YSA9IF9leHRlbmRzKHt9LCBuZXdMb2FkZXJEYXRhKTtcbiAgZm9yIChsZXQgbWF0Y2ggb2YgbWF0Y2hlcykge1xuICAgIGxldCBpZCA9IG1hdGNoLnJvdXRlLmlkO1xuICAgIGlmIChuZXdMb2FkZXJEYXRhLmhhc093blByb3BlcnR5KGlkKSkge1xuICAgICAgaWYgKG5ld0xvYWRlckRhdGFbaWRdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbWVyZ2VkTG9hZGVyRGF0YVtpZF0gPSBuZXdMb2FkZXJEYXRhW2lkXTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGxvYWRlckRhdGFbaWRdICE9PSB1bmRlZmluZWQgJiYgbWF0Y2gucm91dGUubG9hZGVyKSB7XG4gICAgICAvLyBQcmVzZXJ2ZSBleGlzdGluZyBrZXlzIG5vdCBpbmNsdWRlZCBpbiBuZXdMb2FkZXJEYXRhIGFuZCB3aGVyZSBhIGxvYWRlclxuICAgICAgLy8gd2Fzbid0IHJlbW92ZWQgYnkgSE1SXG4gICAgICBtZXJnZWRMb2FkZXJEYXRhW2lkXSA9IGxvYWRlckRhdGFbaWRdO1xuICAgIH1cbiAgICBpZiAoZXJyb3JzICYmIGVycm9ycy5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICAgIC8vIERvbid0IGtlZXAgYW55IGxvYWRlciBkYXRhIGJlbG93IHRoZSBib3VuZGFyeVxuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBtZXJnZWRMb2FkZXJEYXRhO1xufVxuZnVuY3Rpb24gZ2V0QWN0aW9uRGF0YUZvckNvbW1pdChwZW5kaW5nQWN0aW9uUmVzdWx0KSB7XG4gIGlmICghcGVuZGluZ0FjdGlvblJlc3VsdCkge1xuICAgIHJldHVybiB7fTtcbiAgfVxuICByZXR1cm4gaXNFcnJvclJlc3VsdChwZW5kaW5nQWN0aW9uUmVzdWx0WzFdKSA/IHtcbiAgICAvLyBDbGVhciBvdXQgcHJpb3IgYWN0aW9uRGF0YSBvbiBlcnJvcnNcbiAgICBhY3Rpb25EYXRhOiB7fVxuICB9IDoge1xuICAgIGFjdGlvbkRhdGE6IHtcbiAgICAgIFtwZW5kaW5nQWN0aW9uUmVzdWx0WzBdXTogcGVuZGluZ0FjdGlvblJlc3VsdFsxXS5kYXRhXG4gICAgfVxuICB9O1xufVxuLy8gRmluZCB0aGUgbmVhcmVzdCBlcnJvciBib3VuZGFyeSwgbG9va2luZyB1cHdhcmRzIGZyb20gdGhlIGxlYWYgcm91dGUgKG9yIHRoZVxuLy8gcm91dGUgc3BlY2lmaWVkIGJ5IHJvdXRlSWQpIGZvciB0aGUgY2xvc2VzdCBhbmNlc3RvciBlcnJvciBib3VuZGFyeSxcbi8vIGRlZmF1bHRpbmcgdG8gdGhlIHJvb3QgbWF0Y2hcbmZ1bmN0aW9uIGZpbmROZWFyZXN0Qm91bmRhcnkobWF0Y2hlcywgcm91dGVJZCkge1xuICBsZXQgZWxpZ2libGVNYXRjaGVzID0gcm91dGVJZCA/IG1hdGNoZXMuc2xpY2UoMCwgbWF0Y2hlcy5maW5kSW5kZXgobSA9PiBtLnJvdXRlLmlkID09PSByb3V0ZUlkKSArIDEpIDogWy4uLm1hdGNoZXNdO1xuICByZXR1cm4gZWxpZ2libGVNYXRjaGVzLnJldmVyc2UoKS5maW5kKG0gPT4gbS5yb3V0ZS5oYXNFcnJvckJvdW5kYXJ5ID09PSB0cnVlKSB8fCBtYXRjaGVzWzBdO1xufVxuZnVuY3Rpb24gZ2V0U2hvcnRDaXJjdWl0TWF0Y2hlcyhyb3V0ZXMpIHtcbiAgLy8gUHJlZmVyIGEgcm9vdCBsYXlvdXQgcm91dGUgaWYgcHJlc2VudCwgb3RoZXJ3aXNlIHNoaW0gaW4gYSByb3V0ZSBvYmplY3RcbiAgbGV0IHJvdXRlID0gcm91dGVzLmxlbmd0aCA9PT0gMSA/IHJvdXRlc1swXSA6IHJvdXRlcy5maW5kKHIgPT4gci5pbmRleCB8fCAhci5wYXRoIHx8IHIucGF0aCA9PT0gXCIvXCIpIHx8IHtcbiAgICBpZDogXCJfX3NoaW0tZXJyb3Itcm91dGVfX1wiXG4gIH07XG4gIHJldHVybiB7XG4gICAgbWF0Y2hlczogW3tcbiAgICAgIHBhcmFtczoge30sXG4gICAgICBwYXRobmFtZTogXCJcIixcbiAgICAgIHBhdGhuYW1lQmFzZTogXCJcIixcbiAgICAgIHJvdXRlXG4gICAgfV0sXG4gICAgcm91dGVcbiAgfTtcbn1cbmZ1bmN0aW9uIGdldEludGVybmFsUm91dGVyRXJyb3Ioc3RhdHVzLCBfdGVtcDUpIHtcbiAgbGV0IHtcbiAgICBwYXRobmFtZSxcbiAgICByb3V0ZUlkLFxuICAgIG1ldGhvZCxcbiAgICB0eXBlXG4gIH0gPSBfdGVtcDUgPT09IHZvaWQgMCA/IHt9IDogX3RlbXA1O1xuICBsZXQgc3RhdHVzVGV4dCA9IFwiVW5rbm93biBTZXJ2ZXIgRXJyb3JcIjtcbiAgbGV0IGVycm9yTWVzc2FnZSA9IFwiVW5rbm93biBAcmVtaXgtcnVuL3JvdXRlciBlcnJvclwiO1xuICBpZiAoc3RhdHVzID09PSA0MDApIHtcbiAgICBzdGF0dXNUZXh0ID0gXCJCYWQgUmVxdWVzdFwiO1xuICAgIGlmIChtZXRob2QgJiYgcGF0aG5hbWUgJiYgcm91dGVJZCkge1xuICAgICAgZXJyb3JNZXNzYWdlID0gXCJZb3UgbWFkZSBhIFwiICsgbWV0aG9kICsgXCIgcmVxdWVzdCB0byBcXFwiXCIgKyBwYXRobmFtZSArIFwiXFxcIiBidXQgXCIgKyAoXCJkaWQgbm90IHByb3ZpZGUgYSBgbG9hZGVyYCBmb3Igcm91dGUgXFxcIlwiICsgcm91dGVJZCArIFwiXFxcIiwgXCIpICsgXCJzbyB0aGVyZSBpcyBubyB3YXkgdG8gaGFuZGxlIHRoZSByZXF1ZXN0LlwiO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gXCJkZWZlci1hY3Rpb25cIikge1xuICAgICAgZXJyb3JNZXNzYWdlID0gXCJkZWZlcigpIGlzIG5vdCBzdXBwb3J0ZWQgaW4gYWN0aW9uc1wiO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gXCJpbnZhbGlkLWJvZHlcIikge1xuICAgICAgZXJyb3JNZXNzYWdlID0gXCJVbmFibGUgdG8gZW5jb2RlIHN1Ym1pc3Npb24gYm9keVwiO1xuICAgIH1cbiAgfSBlbHNlIGlmIChzdGF0dXMgPT09IDQwMykge1xuICAgIHN0YXR1c1RleHQgPSBcIkZvcmJpZGRlblwiO1xuICAgIGVycm9yTWVzc2FnZSA9IFwiUm91dGUgXFxcIlwiICsgcm91dGVJZCArIFwiXFxcIiBkb2VzIG5vdCBtYXRjaCBVUkwgXFxcIlwiICsgcGF0aG5hbWUgKyBcIlxcXCJcIjtcbiAgfSBlbHNlIGlmIChzdGF0dXMgPT09IDQwNCkge1xuICAgIHN0YXR1c1RleHQgPSBcIk5vdCBGb3VuZFwiO1xuICAgIGVycm9yTWVzc2FnZSA9IFwiTm8gcm91dGUgbWF0Y2hlcyBVUkwgXFxcIlwiICsgcGF0aG5hbWUgKyBcIlxcXCJcIjtcbiAgfSBlbHNlIGlmIChzdGF0dXMgPT09IDQwNSkge1xuICAgIHN0YXR1c1RleHQgPSBcIk1ldGhvZCBOb3QgQWxsb3dlZFwiO1xuICAgIGlmIChtZXRob2QgJiYgcGF0aG5hbWUgJiYgcm91dGVJZCkge1xuICAgICAgZXJyb3JNZXNzYWdlID0gXCJZb3UgbWFkZSBhIFwiICsgbWV0aG9kLnRvVXBwZXJDYXNlKCkgKyBcIiByZXF1ZXN0IHRvIFxcXCJcIiArIHBhdGhuYW1lICsgXCJcXFwiIGJ1dCBcIiArIChcImRpZCBub3QgcHJvdmlkZSBhbiBgYWN0aW9uYCBmb3Igcm91dGUgXFxcIlwiICsgcm91dGVJZCArIFwiXFxcIiwgXCIpICsgXCJzbyB0aGVyZSBpcyBubyB3YXkgdG8gaGFuZGxlIHRoZSByZXF1ZXN0LlwiO1xuICAgIH0gZWxzZSBpZiAobWV0aG9kKSB7XG4gICAgICBlcnJvck1lc3NhZ2UgPSBcIkludmFsaWQgcmVxdWVzdCBtZXRob2QgXFxcIlwiICsgbWV0aG9kLnRvVXBwZXJDYXNlKCkgKyBcIlxcXCJcIjtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5ldyBFcnJvclJlc3BvbnNlSW1wbChzdGF0dXMgfHwgNTAwLCBzdGF0dXNUZXh0LCBuZXcgRXJyb3IoZXJyb3JNZXNzYWdlKSwgdHJ1ZSk7XG59XG4vLyBGaW5kIGFueSByZXR1cm5lZCByZWRpcmVjdCBlcnJvcnMsIHN0YXJ0aW5nIGZyb20gdGhlIGxvd2VzdCBtYXRjaFxuZnVuY3Rpb24gZmluZFJlZGlyZWN0KHJlc3VsdHMpIHtcbiAgZm9yIChsZXQgaSA9IHJlc3VsdHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBsZXQgcmVzdWx0ID0gcmVzdWx0c1tpXTtcbiAgICBpZiAoaXNSZWRpcmVjdFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZXN1bHQsXG4gICAgICAgIGlkeDogaVxuICAgICAgfTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIHN0cmlwSGFzaEZyb21QYXRoKHBhdGgpIHtcbiAgbGV0IHBhcnNlZFBhdGggPSB0eXBlb2YgcGF0aCA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aChwYXRoKSA6IHBhdGg7XG4gIHJldHVybiBjcmVhdGVQYXRoKF9leHRlbmRzKHt9LCBwYXJzZWRQYXRoLCB7XG4gICAgaGFzaDogXCJcIlxuICB9KSk7XG59XG5mdW5jdGlvbiBpc0hhc2hDaGFuZ2VPbmx5KGEsIGIpIHtcbiAgaWYgKGEucGF0aG5hbWUgIT09IGIucGF0aG5hbWUgfHwgYS5zZWFyY2ggIT09IGIuc2VhcmNoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChhLmhhc2ggPT09IFwiXCIpIHtcbiAgICAvLyAvcGFnZSAtPiAvcGFnZSNoYXNoXG4gICAgcmV0dXJuIGIuaGFzaCAhPT0gXCJcIjtcbiAgfSBlbHNlIGlmIChhLmhhc2ggPT09IGIuaGFzaCkge1xuICAgIC8vIC9wYWdlI2hhc2ggLT4gL3BhZ2UjaGFzaFxuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2UgaWYgKGIuaGFzaCAhPT0gXCJcIikge1xuICAgIC8vIC9wYWdlI2hhc2ggLT4gL3BhZ2Ujb3RoZXJcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICAvLyBJZiB0aGUgaGFzaCBpcyByZW1vdmVkIHRoZSBicm93c2VyIHdpbGwgcmUtcGVyZm9ybSBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlclxuICAvLyAvcGFnZSNoYXNoIC0+IC9wYWdlXG4gIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGlzSGFuZGxlclJlc3VsdChyZXN1bHQpIHtcbiAgcmV0dXJuIHJlc3VsdCAhPSBudWxsICYmIHR5cGVvZiByZXN1bHQgPT09IFwib2JqZWN0XCIgJiYgXCJ0eXBlXCIgaW4gcmVzdWx0ICYmIFwicmVzdWx0XCIgaW4gcmVzdWx0ICYmIChyZXN1bHQudHlwZSA9PT0gUmVzdWx0VHlwZS5kYXRhIHx8IHJlc3VsdC50eXBlID09PSBSZXN1bHRUeXBlLmVycm9yKTtcbn1cbmZ1bmN0aW9uIGlzUmVkaXJlY3RIYW5kbGVyUmVzdWx0KHJlc3VsdCkge1xuICByZXR1cm4gaXNSZXNwb25zZShyZXN1bHQucmVzdWx0KSAmJiByZWRpcmVjdFN0YXR1c0NvZGVzLmhhcyhyZXN1bHQucmVzdWx0LnN0YXR1cyk7XG59XG5mdW5jdGlvbiBpc0RlZmVycmVkUmVzdWx0KHJlc3VsdCkge1xuICByZXR1cm4gcmVzdWx0LnR5cGUgPT09IFJlc3VsdFR5cGUuZGVmZXJyZWQ7XG59XG5mdW5jdGlvbiBpc0Vycm9yUmVzdWx0KHJlc3VsdCkge1xuICByZXR1cm4gcmVzdWx0LnR5cGUgPT09IFJlc3VsdFR5cGUuZXJyb3I7XG59XG5mdW5jdGlvbiBpc1JlZGlyZWN0UmVzdWx0KHJlc3VsdCkge1xuICByZXR1cm4gKHJlc3VsdCAmJiByZXN1bHQudHlwZSkgPT09IFJlc3VsdFR5cGUucmVkaXJlY3Q7XG59XG5mdW5jdGlvbiBpc0RlZmVycmVkRGF0YSh2YWx1ZSkge1xuICBsZXQgZGVmZXJyZWQgPSB2YWx1ZTtcbiAgcmV0dXJuIGRlZmVycmVkICYmIHR5cGVvZiBkZWZlcnJlZCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgZGVmZXJyZWQuZGF0YSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgZGVmZXJyZWQuc3Vic2NyaWJlID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIGRlZmVycmVkLmNhbmNlbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBkZWZlcnJlZC5yZXNvbHZlRGF0YSA9PT0gXCJmdW5jdGlvblwiO1xufVxuZnVuY3Rpb24gaXNSZXNwb25zZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUuc3RhdHVzID09PSBcIm51bWJlclwiICYmIHR5cGVvZiB2YWx1ZS5zdGF0dXNUZXh0ID09PSBcInN0cmluZ1wiICYmIHR5cGVvZiB2YWx1ZS5oZWFkZXJzID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiB2YWx1ZS5ib2R5ICE9PSBcInVuZGVmaW5lZFwiO1xufVxuZnVuY3Rpb24gaXNSZWRpcmVjdFJlc3BvbnNlKHJlc3VsdCkge1xuICBpZiAoIWlzUmVzcG9uc2UocmVzdWx0KSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBsZXQgc3RhdHVzID0gcmVzdWx0LnN0YXR1cztcbiAgbGV0IGxvY2F0aW9uID0gcmVzdWx0LmhlYWRlcnMuZ2V0KFwiTG9jYXRpb25cIik7XG4gIHJldHVybiBzdGF0dXMgPj0gMzAwICYmIHN0YXR1cyA8PSAzOTkgJiYgbG9jYXRpb24gIT0gbnVsbDtcbn1cbmZ1bmN0aW9uIGlzVmFsaWRNZXRob2QobWV0aG9kKSB7XG4gIHJldHVybiB2YWxpZFJlcXVlc3RNZXRob2RzLmhhcyhtZXRob2QudG9Mb3dlckNhc2UoKSk7XG59XG5mdW5jdGlvbiBpc011dGF0aW9uTWV0aG9kKG1ldGhvZCkge1xuICByZXR1cm4gdmFsaWRNdXRhdGlvbk1ldGhvZHMuaGFzKG1ldGhvZC50b0xvd2VyQ2FzZSgpKTtcbn1cbmFzeW5jIGZ1bmN0aW9uIHJlc29sdmVEZWZlcnJlZFJlc3VsdHMoY3VycmVudE1hdGNoZXMsIG1hdGNoZXNUb0xvYWQsIHJlc3VsdHMsIHNpZ25hbHMsIGlzRmV0Y2hlciwgY3VycmVudExvYWRlckRhdGEpIHtcbiAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHJlc3VsdHMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgbGV0IHJlc3VsdCA9IHJlc3VsdHNbaW5kZXhdO1xuICAgIGxldCBtYXRjaCA9IG1hdGNoZXNUb0xvYWRbaW5kZXhdO1xuICAgIC8vIElmIHdlIGRvbid0IGhhdmUgYSBtYXRjaCwgdGhlbiB3ZSBjYW4gaGF2ZSBhIGRlZmVycmVkIHJlc3VsdCB0byBkb1xuICAgIC8vIGFueXRoaW5nIHdpdGguICBUaGlzIGlzIGZvciByZXZhbGlkYXRpbmcgZmV0Y2hlcnMgd2hlcmUgdGhlIHJvdXRlIHdhc1xuICAgIC8vIHJlbW92ZWQgZHVyaW5nIEhNUlxuICAgIGlmICghbWF0Y2gpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBsZXQgY3VycmVudE1hdGNoID0gY3VycmVudE1hdGNoZXMuZmluZChtID0+IG0ucm91dGUuaWQgPT09IG1hdGNoLnJvdXRlLmlkKTtcbiAgICBsZXQgaXNSZXZhbGlkYXRpbmdMb2FkZXIgPSBjdXJyZW50TWF0Y2ggIT0gbnVsbCAmJiAhaXNOZXdSb3V0ZUluc3RhbmNlKGN1cnJlbnRNYXRjaCwgbWF0Y2gpICYmIChjdXJyZW50TG9hZGVyRGF0YSAmJiBjdXJyZW50TG9hZGVyRGF0YVttYXRjaC5yb3V0ZS5pZF0pICE9PSB1bmRlZmluZWQ7XG4gICAgaWYgKGlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSAmJiAoaXNGZXRjaGVyIHx8IGlzUmV2YWxpZGF0aW5nTG9hZGVyKSkge1xuICAgICAgLy8gTm90ZTogd2UgZG8gbm90IGhhdmUgdG8gdG91Y2ggYWN0aXZlRGVmZXJyZWRzIGhlcmUgc2luY2Ugd2UgcmFjZSB0aGVtXG4gICAgICAvLyBhZ2FpbnN0IHRoZSBzaWduYWwgaW4gcmVzb2x2ZURlZmVycmVkRGF0YSBhbmQgdGhleSdsbCBnZXQgYWJvcnRlZFxuICAgICAgLy8gdGhlcmUgaWYgbmVlZGVkXG4gICAgICBsZXQgc2lnbmFsID0gc2lnbmFsc1tpbmRleF07XG4gICAgICBpbnZhcmlhbnQoc2lnbmFsLCBcIkV4cGVjdGVkIGFuIEFib3J0U2lnbmFsIGZvciByZXZhbGlkYXRpbmcgZmV0Y2hlciBkZWZlcnJlZCByZXN1bHRcIik7XG4gICAgICBhd2FpdCByZXNvbHZlRGVmZXJyZWREYXRhKHJlc3VsdCwgc2lnbmFsLCBpc0ZldGNoZXIpLnRoZW4ocmVzdWx0ID0+IHtcbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgIHJlc3VsdHNbaW5kZXhdID0gcmVzdWx0IHx8IHJlc3VsdHNbaW5kZXhdO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cbmFzeW5jIGZ1bmN0aW9uIHJlc29sdmVEZWZlcnJlZERhdGEocmVzdWx0LCBzaWduYWwsIHVud3JhcCkge1xuICBpZiAodW53cmFwID09PSB2b2lkIDApIHtcbiAgICB1bndyYXAgPSBmYWxzZTtcbiAgfVxuICBsZXQgYWJvcnRlZCA9IGF3YWl0IHJlc3VsdC5kZWZlcnJlZERhdGEucmVzb2x2ZURhdGEoc2lnbmFsKTtcbiAgaWYgKGFib3J0ZWQpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHVud3JhcCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBSZXN1bHRUeXBlLmRhdGEsXG4gICAgICAgIGRhdGE6IHJlc3VsdC5kZWZlcnJlZERhdGEudW53cmFwcGVkRGF0YVxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBIYW5kbGUgYW55IFRyYWNrZWRQcm9taXNlLl9lcnJvciB2YWx1ZXMgZW5jb3VudGVyZWQgd2hpbGUgdW53cmFwcGluZ1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5lcnJvcixcbiAgICAgICAgZXJyb3I6IGVcbiAgICAgIH07XG4gICAgfVxuICB9XG4gIHJldHVybiB7XG4gICAgdHlwZTogUmVzdWx0VHlwZS5kYXRhLFxuICAgIGRhdGE6IHJlc3VsdC5kZWZlcnJlZERhdGEuZGF0YVxuICB9O1xufVxuZnVuY3Rpb24gaGFzTmFrZWRJbmRleFF1ZXJ5KHNlYXJjaCkge1xuICByZXR1cm4gbmV3IFVSTFNlYXJjaFBhcmFtcyhzZWFyY2gpLmdldEFsbChcImluZGV4XCIpLnNvbWUodiA9PiB2ID09PSBcIlwiKTtcbn1cbmZ1bmN0aW9uIGdldFRhcmdldE1hdGNoKG1hdGNoZXMsIGxvY2F0aW9uKSB7XG4gIGxldCBzZWFyY2ggPSB0eXBlb2YgbG9jYXRpb24gPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgobG9jYXRpb24pLnNlYXJjaCA6IGxvY2F0aW9uLnNlYXJjaDtcbiAgaWYgKG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXS5yb3V0ZS5pbmRleCAmJiBoYXNOYWtlZEluZGV4UXVlcnkoc2VhcmNoIHx8IFwiXCIpKSB7XG4gICAgLy8gUmV0dXJuIHRoZSBsZWFmIGluZGV4IHJvdXRlIHdoZW4gaW5kZXggaXMgcHJlc2VudFxuICAgIHJldHVybiBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV07XG4gIH1cbiAgLy8gT3RoZXJ3aXNlIGdyYWIgdGhlIGRlZXBlc3QgXCJwYXRoIGNvbnRyaWJ1dGluZ1wiIG1hdGNoIChpZ25vcmluZyBpbmRleCBhbmRcbiAgLy8gcGF0aGxlc3MgbGF5b3V0IHJvdXRlcylcbiAgbGV0IHBhdGhNYXRjaGVzID0gZ2V0UGF0aENvbnRyaWJ1dGluZ01hdGNoZXMobWF0Y2hlcyk7XG4gIHJldHVybiBwYXRoTWF0Y2hlc1twYXRoTWF0Y2hlcy5sZW5ndGggLSAxXTtcbn1cbmZ1bmN0aW9uIGdldFN1Ym1pc3Npb25Gcm9tTmF2aWdhdGlvbihuYXZpZ2F0aW9uKSB7XG4gIGxldCB7XG4gICAgZm9ybU1ldGhvZCxcbiAgICBmb3JtQWN0aW9uLFxuICAgIGZvcm1FbmNUeXBlLFxuICAgIHRleHQsXG4gICAgZm9ybURhdGEsXG4gICAganNvblxuICB9ID0gbmF2aWdhdGlvbjtcbiAgaWYgKCFmb3JtTWV0aG9kIHx8ICFmb3JtQWN0aW9uIHx8ICFmb3JtRW5jVHlwZSkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAodGV4dCAhPSBudWxsKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGZvcm1NZXRob2QsXG4gICAgICBmb3JtQWN0aW9uLFxuICAgICAgZm9ybUVuY1R5cGUsXG4gICAgICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICAgICAganNvbjogdW5kZWZpbmVkLFxuICAgICAgdGV4dFxuICAgIH07XG4gIH0gZWxzZSBpZiAoZm9ybURhdGEgIT0gbnVsbCkge1xuICAgIHJldHVybiB7XG4gICAgICBmb3JtTWV0aG9kLFxuICAgICAgZm9ybUFjdGlvbixcbiAgICAgIGZvcm1FbmNUeXBlLFxuICAgICAgZm9ybURhdGEsXG4gICAgICBqc29uOiB1bmRlZmluZWQsXG4gICAgICB0ZXh0OiB1bmRlZmluZWRcbiAgICB9O1xuICB9IGVsc2UgaWYgKGpzb24gIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiB7XG4gICAgICBmb3JtTWV0aG9kLFxuICAgICAgZm9ybUFjdGlvbixcbiAgICAgIGZvcm1FbmNUeXBlLFxuICAgICAgZm9ybURhdGE6IHVuZGVmaW5lZCxcbiAgICAgIGpzb24sXG4gICAgICB0ZXh0OiB1bmRlZmluZWRcbiAgICB9O1xuICB9XG59XG5mdW5jdGlvbiBnZXRMb2FkaW5nTmF2aWdhdGlvbihsb2NhdGlvbiwgc3VibWlzc2lvbikge1xuICBpZiAoc3VibWlzc2lvbikge1xuICAgIGxldCBuYXZpZ2F0aW9uID0ge1xuICAgICAgc3RhdGU6IFwibG9hZGluZ1wiLFxuICAgICAgbG9jYXRpb24sXG4gICAgICBmb3JtTWV0aG9kOiBzdWJtaXNzaW9uLmZvcm1NZXRob2QsXG4gICAgICBmb3JtQWN0aW9uOiBzdWJtaXNzaW9uLmZvcm1BY3Rpb24sXG4gICAgICBmb3JtRW5jVHlwZTogc3VibWlzc2lvbi5mb3JtRW5jVHlwZSxcbiAgICAgIGZvcm1EYXRhOiBzdWJtaXNzaW9uLmZvcm1EYXRhLFxuICAgICAganNvbjogc3VibWlzc2lvbi5qc29uLFxuICAgICAgdGV4dDogc3VibWlzc2lvbi50ZXh0XG4gICAgfTtcbiAgICByZXR1cm4gbmF2aWdhdGlvbjtcbiAgfSBlbHNlIHtcbiAgICBsZXQgbmF2aWdhdGlvbiA9IHtcbiAgICAgIHN0YXRlOiBcImxvYWRpbmdcIixcbiAgICAgIGxvY2F0aW9uLFxuICAgICAgZm9ybU1ldGhvZDogdW5kZWZpbmVkLFxuICAgICAgZm9ybUFjdGlvbjogdW5kZWZpbmVkLFxuICAgICAgZm9ybUVuY1R5cGU6IHVuZGVmaW5lZCxcbiAgICAgIGZvcm1EYXRhOiB1bmRlZmluZWQsXG4gICAgICBqc29uOiB1bmRlZmluZWQsXG4gICAgICB0ZXh0OiB1bmRlZmluZWRcbiAgICB9O1xuICAgIHJldHVybiBuYXZpZ2F0aW9uO1xuICB9XG59XG5mdW5jdGlvbiBnZXRTdWJtaXR0aW5nTmF2aWdhdGlvbihsb2NhdGlvbiwgc3VibWlzc2lvbikge1xuICBsZXQgbmF2aWdhdGlvbiA9IHtcbiAgICBzdGF0ZTogXCJzdWJtaXR0aW5nXCIsXG4gICAgbG9jYXRpb24sXG4gICAgZm9ybU1ldGhvZDogc3VibWlzc2lvbi5mb3JtTWV0aG9kLFxuICAgIGZvcm1BY3Rpb246IHN1Ym1pc3Npb24uZm9ybUFjdGlvbixcbiAgICBmb3JtRW5jVHlwZTogc3VibWlzc2lvbi5mb3JtRW5jVHlwZSxcbiAgICBmb3JtRGF0YTogc3VibWlzc2lvbi5mb3JtRGF0YSxcbiAgICBqc29uOiBzdWJtaXNzaW9uLmpzb24sXG4gICAgdGV4dDogc3VibWlzc2lvbi50ZXh0XG4gIH07XG4gIHJldHVybiBuYXZpZ2F0aW9uO1xufVxuZnVuY3Rpb24gZ2V0TG9hZGluZ0ZldGNoZXIoc3VibWlzc2lvbiwgZGF0YSkge1xuICBpZiAoc3VibWlzc2lvbikge1xuICAgIGxldCBmZXRjaGVyID0ge1xuICAgICAgc3RhdGU6IFwibG9hZGluZ1wiLFxuICAgICAgZm9ybU1ldGhvZDogc3VibWlzc2lvbi5mb3JtTWV0aG9kLFxuICAgICAgZm9ybUFjdGlvbjogc3VibWlzc2lvbi5mb3JtQWN0aW9uLFxuICAgICAgZm9ybUVuY1R5cGU6IHN1Ym1pc3Npb24uZm9ybUVuY1R5cGUsXG4gICAgICBmb3JtRGF0YTogc3VibWlzc2lvbi5mb3JtRGF0YSxcbiAgICAgIGpzb246IHN1Ym1pc3Npb24uanNvbixcbiAgICAgIHRleHQ6IHN1Ym1pc3Npb24udGV4dCxcbiAgICAgIGRhdGFcbiAgICB9O1xuICAgIHJldHVybiBmZXRjaGVyO1xuICB9IGVsc2Uge1xuICAgIGxldCBmZXRjaGVyID0ge1xuICAgICAgc3RhdGU6IFwibG9hZGluZ1wiLFxuICAgICAgZm9ybU1ldGhvZDogdW5kZWZpbmVkLFxuICAgICAgZm9ybUFjdGlvbjogdW5kZWZpbmVkLFxuICAgICAgZm9ybUVuY1R5cGU6IHVuZGVmaW5lZCxcbiAgICAgIGZvcm1EYXRhOiB1bmRlZmluZWQsXG4gICAgICBqc29uOiB1bmRlZmluZWQsXG4gICAgICB0ZXh0OiB1bmRlZmluZWQsXG4gICAgICBkYXRhXG4gICAgfTtcbiAgICByZXR1cm4gZmV0Y2hlcjtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0U3VibWl0dGluZ0ZldGNoZXIoc3VibWlzc2lvbiwgZXhpc3RpbmdGZXRjaGVyKSB7XG4gIGxldCBmZXRjaGVyID0ge1xuICAgIHN0YXRlOiBcInN1Ym1pdHRpbmdcIixcbiAgICBmb3JtTWV0aG9kOiBzdWJtaXNzaW9uLmZvcm1NZXRob2QsXG4gICAgZm9ybUFjdGlvbjogc3VibWlzc2lvbi5mb3JtQWN0aW9uLFxuICAgIGZvcm1FbmNUeXBlOiBzdWJtaXNzaW9uLmZvcm1FbmNUeXBlLFxuICAgIGZvcm1EYXRhOiBzdWJtaXNzaW9uLmZvcm1EYXRhLFxuICAgIGpzb246IHN1Ym1pc3Npb24uanNvbixcbiAgICB0ZXh0OiBzdWJtaXNzaW9uLnRleHQsXG4gICAgZGF0YTogZXhpc3RpbmdGZXRjaGVyID8gZXhpc3RpbmdGZXRjaGVyLmRhdGEgOiB1bmRlZmluZWRcbiAgfTtcbiAgcmV0dXJuIGZldGNoZXI7XG59XG5mdW5jdGlvbiBnZXREb25lRmV0Y2hlcihkYXRhKSB7XG4gIGxldCBmZXRjaGVyID0ge1xuICAgIHN0YXRlOiBcImlkbGVcIixcbiAgICBmb3JtTWV0aG9kOiB1bmRlZmluZWQsXG4gICAgZm9ybUFjdGlvbjogdW5kZWZpbmVkLFxuICAgIGZvcm1FbmNUeXBlOiB1bmRlZmluZWQsXG4gICAgZm9ybURhdGE6IHVuZGVmaW5lZCxcbiAgICBqc29uOiB1bmRlZmluZWQsXG4gICAgdGV4dDogdW5kZWZpbmVkLFxuICAgIGRhdGFcbiAgfTtcbiAgcmV0dXJuIGZldGNoZXI7XG59XG5mdW5jdGlvbiByZXN0b3JlQXBwbGllZFRyYW5zaXRpb25zKF93aW5kb3csIHRyYW5zaXRpb25zKSB7XG4gIHRyeSB7XG4gICAgbGV0IHNlc3Npb25Qb3NpdGlvbnMgPSBfd2luZG93LnNlc3Npb25TdG9yYWdlLmdldEl0ZW0oVFJBTlNJVElPTlNfU1RPUkFHRV9LRVkpO1xuICAgIGlmIChzZXNzaW9uUG9zaXRpb25zKSB7XG4gICAgICBsZXQganNvbiA9IEpTT04ucGFyc2Uoc2Vzc2lvblBvc2l0aW9ucyk7XG4gICAgICBmb3IgKGxldCBbaywgdl0gb2YgT2JqZWN0LmVudHJpZXMoanNvbiB8fCB7fSkpIHtcbiAgICAgICAgaWYgKHYgJiYgQXJyYXkuaXNBcnJheSh2KSkge1xuICAgICAgICAgIHRyYW5zaXRpb25zLnNldChrLCBuZXcgU2V0KHYgfHwgW10pKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIG5vLW9wLCB1c2UgZGVmYXVsdCBlbXB0eSBvYmplY3RcbiAgfVxufVxuZnVuY3Rpb24gcGVyc2lzdEFwcGxpZWRUcmFuc2l0aW9ucyhfd2luZG93LCB0cmFuc2l0aW9ucykge1xuICBpZiAodHJhbnNpdGlvbnMuc2l6ZSA+IDApIHtcbiAgICBsZXQganNvbiA9IHt9O1xuICAgIGZvciAobGV0IFtrLCB2XSBvZiB0cmFuc2l0aW9ucykge1xuICAgICAganNvbltrXSA9IFsuLi52XTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIF93aW5kb3cuc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShUUkFOU0lUSU9OU19TVE9SQUdFX0tFWSwgSlNPTi5zdHJpbmdpZnkoanNvbikpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB3YXJuaW5nKGZhbHNlLCBcIkZhaWxlZCB0byBzYXZlIGFwcGxpZWQgdmlldyB0cmFuc2l0aW9ucyBpbiBzZXNzaW9uU3RvcmFnZSAoXCIgKyBlcnJvciArIFwiKS5cIik7XG4gICAgfVxuICB9XG59XG4vLyNlbmRyZWdpb25cblxuZXhwb3J0IHsgQWJvcnRlZERlZmVycmVkRXJyb3IsIEFjdGlvbiwgSURMRV9CTE9DS0VSLCBJRExFX0ZFVENIRVIsIElETEVfTkFWSUdBVElPTiwgVU5TQUZFX0RFRkVSUkVEX1NZTUJPTCwgRGVmZXJyZWREYXRhIGFzIFVOU0FGRV9EZWZlcnJlZERhdGEsIEVycm9yUmVzcG9uc2VJbXBsIGFzIFVOU0FGRV9FcnJvclJlc3BvbnNlSW1wbCwgY29udmVydFJvdXRlTWF0Y2hUb1VpTWF0Y2ggYXMgVU5TQUZFX2NvbnZlcnRSb3V0ZU1hdGNoVG9VaU1hdGNoLCBjb252ZXJ0Um91dGVzVG9EYXRhUm91dGVzIGFzIFVOU0FGRV9jb252ZXJ0Um91dGVzVG9EYXRhUm91dGVzLCBnZXRSZXNvbHZlVG9NYXRjaGVzIGFzIFVOU0FGRV9nZXRSZXNvbHZlVG9NYXRjaGVzLCBpbnZhcmlhbnQgYXMgVU5TQUZFX2ludmFyaWFudCwgd2FybmluZyBhcyBVTlNBRkVfd2FybmluZywgY3JlYXRlQnJvd3Nlckhpc3RvcnksIGNyZWF0ZUhhc2hIaXN0b3J5LCBjcmVhdGVNZW1vcnlIaXN0b3J5LCBjcmVhdGVQYXRoLCBjcmVhdGVSb3V0ZXIsIGNyZWF0ZVN0YXRpY0hhbmRsZXIsIGRlZmVyLCBnZW5lcmF0ZVBhdGgsIGdldFN0YXRpY0NvbnRleHRGcm9tRXJyb3IsIGdldFRvUGF0aG5hbWUsIGlzRGVmZXJyZWREYXRhLCBpc1JvdXRlRXJyb3JSZXNwb25zZSwgam9pblBhdGhzLCBqc29uLCBtYXRjaFBhdGgsIG1hdGNoUm91dGVzLCBub3JtYWxpemVQYXRobmFtZSwgcGFyc2VQYXRoLCByZWRpcmVjdCwgcmVkaXJlY3REb2N1bWVudCwgcmVzb2x2ZVBhdGgsIHJlc29sdmVUbywgc3RyaXBCYXNlbmFtZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cm91dGVyLmpzLm1hcFxuIiwiLyoqXG4gKiBSZWFjdCBSb3V0ZXIgdjYuMjMuMVxuICpcbiAqIENvcHlyaWdodCAoYykgUmVtaXggU29mdHdhcmUgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRS5tZCBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBsaWNlbnNlIE1JVFxuICovXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBVTlNBRkVfaW52YXJpYW50LCBqb2luUGF0aHMsIG1hdGNoUGF0aCwgVU5TQUZFX2dldFJlc29sdmVUb01hdGNoZXMsIFVOU0FGRV93YXJuaW5nLCByZXNvbHZlVG8sIHBhcnNlUGF0aCwgbWF0Y2hSb3V0ZXMsIEFjdGlvbiwgVU5TQUZFX2NvbnZlcnRSb3V0ZU1hdGNoVG9VaU1hdGNoLCBzdHJpcEJhc2VuYW1lLCBJRExFX0JMT0NLRVIsIGlzUm91dGVFcnJvclJlc3BvbnNlLCBjcmVhdGVNZW1vcnlIaXN0b3J5LCBBYm9ydGVkRGVmZXJyZWRFcnJvciwgY3JlYXRlUm91dGVyIH0gZnJvbSAnQHJlbWl4LXJ1bi9yb3V0ZXInO1xuZXhwb3J0IHsgQWJvcnRlZERlZmVycmVkRXJyb3IsIEFjdGlvbiBhcyBOYXZpZ2F0aW9uVHlwZSwgY3JlYXRlUGF0aCwgZGVmZXIsIGdlbmVyYXRlUGF0aCwgaXNSb3V0ZUVycm9yUmVzcG9uc2UsIGpzb24sIG1hdGNoUGF0aCwgbWF0Y2hSb3V0ZXMsIHBhcnNlUGF0aCwgcmVkaXJlY3QsIHJlZGlyZWN0RG9jdW1lbnQsIHJlc29sdmVQYXRoIH0gZnJvbSAnQHJlbWl4LXJ1bi9yb3V0ZXInO1xuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduID8gT2JqZWN0LmFzc2lnbi5iaW5kKCkgOiBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuLy8gQ3JlYXRlIHJlYWN0LXNwZWNpZmljIHR5cGVzIGZyb20gdGhlIGFnbm9zdGljIHR5cGVzIGluIEByZW1peC1ydW4vcm91dGVyIHRvXG4vLyBleHBvcnQgZnJvbSByZWFjdC1yb3V0ZXJcbmNvbnN0IERhdGFSb3V0ZXJDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIERhdGFSb3V0ZXJDb250ZXh0LmRpc3BsYXlOYW1lID0gXCJEYXRhUm91dGVyXCI7XG59XG5jb25zdCBEYXRhUm91dGVyU3RhdGVDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIERhdGFSb3V0ZXJTdGF0ZUNvbnRleHQuZGlzcGxheU5hbWUgPSBcIkRhdGFSb3V0ZXJTdGF0ZVwiO1xufVxuY29uc3QgQXdhaXRDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIEF3YWl0Q29udGV4dC5kaXNwbGF5TmFtZSA9IFwiQXdhaXRcIjtcbn1cblxuLyoqXG4gKiBBIE5hdmlnYXRvciBpcyBhIFwibG9jYXRpb24gY2hhbmdlclwiOyBpdCdzIGhvdyB5b3UgZ2V0IHRvIGRpZmZlcmVudCBsb2NhdGlvbnMuXG4gKlxuICogRXZlcnkgaGlzdG9yeSBpbnN0YW5jZSBjb25mb3JtcyB0byB0aGUgTmF2aWdhdG9yIGludGVyZmFjZSwgYnV0IHRoZVxuICogZGlzdGluY3Rpb24gaXMgdXNlZnVsIHByaW1hcmlseSB3aGVuIGl0IGNvbWVzIHRvIHRoZSBsb3ctbGV2ZWwgYDxSb3V0ZXI+YCBBUElcbiAqIHdoZXJlIGJvdGggdGhlIGxvY2F0aW9uIGFuZCBhIG5hdmlnYXRvciBtdXN0IGJlIHByb3ZpZGVkIHNlcGFyYXRlbHkgaW4gb3JkZXJcbiAqIHRvIGF2b2lkIFwidGVhcmluZ1wiIHRoYXQgbWF5IG9jY3VyIGluIGEgc3VzcGVuc2UtZW5hYmxlZCBhcHAgaWYgdGhlIGFjdGlvblxuICogYW5kL29yIGxvY2F0aW9uIHdlcmUgdG8gYmUgcmVhZCBkaXJlY3RseSBmcm9tIHRoZSBoaXN0b3J5IGluc3RhbmNlLlxuICovXG5cbmNvbnN0IE5hdmlnYXRpb25Db250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIE5hdmlnYXRpb25Db250ZXh0LmRpc3BsYXlOYW1lID0gXCJOYXZpZ2F0aW9uXCI7XG59XG5jb25zdCBMb2NhdGlvbkNvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgTG9jYXRpb25Db250ZXh0LmRpc3BsYXlOYW1lID0gXCJMb2NhdGlvblwiO1xufVxuY29uc3QgUm91dGVDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQoe1xuICBvdXRsZXQ6IG51bGwsXG4gIG1hdGNoZXM6IFtdLFxuICBpc0RhdGFSb3V0ZTogZmFsc2Vcbn0pO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSb3V0ZUNvbnRleHQuZGlzcGxheU5hbWUgPSBcIlJvdXRlXCI7XG59XG5jb25zdCBSb3V0ZUVycm9yQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSb3V0ZUVycm9yQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiUm91dGVFcnJvclwiO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGZ1bGwgaHJlZiBmb3IgdGhlIGdpdmVuIFwidG9cIiB2YWx1ZS4gVGhpcyBpcyB1c2VmdWwgZm9yIGJ1aWxkaW5nXG4gKiBjdXN0b20gbGlua3MgdGhhdCBhcmUgYWxzbyBhY2Nlc3NpYmxlIGFuZCBwcmVzZXJ2ZSByaWdodC1jbGljayBiZWhhdmlvci5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1ocmVmXG4gKi9cbmZ1bmN0aW9uIHVzZUhyZWYodG8sIF90ZW1wKSB7XG4gIGxldCB7XG4gICAgcmVsYXRpdmVcbiAgfSA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wO1xuICAhdXNlSW5Sb3V0ZXJDb250ZXh0KCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZiB0aGVcbiAgLy8gcm91dGVyIGxvYWRlZC4gV2UgY2FuIGhlbHAgdGhlbSB1bmRlcnN0YW5kIGhvdyB0byBhdm9pZCB0aGF0LlxuICBcInVzZUhyZWYoKSBtYXkgYmUgdXNlZCBvbmx5IGluIHRoZSBjb250ZXh0IG9mIGEgPFJvdXRlcj4gY29tcG9uZW50LlwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBsZXQge1xuICAgIGJhc2VuYW1lLFxuICAgIG5hdmlnYXRvclxuICB9ID0gUmVhY3QudXNlQ29udGV4dChOYXZpZ2F0aW9uQ29udGV4dCk7XG4gIGxldCB7XG4gICAgaGFzaCxcbiAgICBwYXRobmFtZSxcbiAgICBzZWFyY2hcbiAgfSA9IHVzZVJlc29sdmVkUGF0aCh0bywge1xuICAgIHJlbGF0aXZlXG4gIH0pO1xuICBsZXQgam9pbmVkUGF0aG5hbWUgPSBwYXRobmFtZTtcblxuICAvLyBJZiB3ZSdyZSBvcGVyYXRpbmcgd2l0aGluIGEgYmFzZW5hbWUsIHByZXBlbmQgaXQgdG8gdGhlIHBhdGhuYW1lIHByaW9yXG4gIC8vIHRvIGNyZWF0aW5nIHRoZSBocmVmLiAgSWYgdGhpcyBpcyBhIHJvb3QgbmF2aWdhdGlvbiwgdGhlbiBqdXN0IHVzZSB0aGUgcmF3XG4gIC8vIGJhc2VuYW1lIHdoaWNoIGFsbG93cyB0aGUgYmFzZW5hbWUgdG8gaGF2ZSBmdWxsIGNvbnRyb2wgb3ZlciB0aGUgcHJlc2VuY2VcbiAgLy8gb2YgYSB0cmFpbGluZyBzbGFzaCBvbiByb290IGxpbmtzXG4gIGlmIChiYXNlbmFtZSAhPT0gXCIvXCIpIHtcbiAgICBqb2luZWRQYXRobmFtZSA9IHBhdGhuYW1lID09PSBcIi9cIiA/IGJhc2VuYW1lIDogam9pblBhdGhzKFtiYXNlbmFtZSwgcGF0aG5hbWVdKTtcbiAgfVxuICByZXR1cm4gbmF2aWdhdG9yLmNyZWF0ZUhyZWYoe1xuICAgIHBhdGhuYW1lOiBqb2luZWRQYXRobmFtZSxcbiAgICBzZWFyY2gsXG4gICAgaGFzaFxuICB9KTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhpcyBjb21wb25lbnQgaXMgYSBkZXNjZW5kYW50IG9mIGEgYDxSb3V0ZXI+YC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1pbi1yb3V0ZXItY29udGV4dFxuICovXG5mdW5jdGlvbiB1c2VJblJvdXRlckNvbnRleHQoKSB7XG4gIHJldHVybiBSZWFjdC51c2VDb250ZXh0KExvY2F0aW9uQ29udGV4dCkgIT0gbnVsbDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBjdXJyZW50IGxvY2F0aW9uIG9iamVjdCwgd2hpY2ggcmVwcmVzZW50cyB0aGUgY3VycmVudCBVUkwgaW4gd2ViXG4gKiBicm93c2Vycy5cbiAqXG4gKiBOb3RlOiBJZiB5b3UncmUgdXNpbmcgdGhpcyBpdCBtYXkgbWVhbiB5b3UncmUgZG9pbmcgc29tZSBvZiB5b3VyIG93blxuICogXCJyb3V0aW5nXCIgaW4geW91ciBhcHAsIGFuZCB3ZSdkIGxpa2UgdG8ga25vdyB3aGF0IHlvdXIgdXNlIGNhc2UgaXMuIFdlIG1heVxuICogYmUgYWJsZSB0byBwcm92aWRlIHNvbWV0aGluZyBoaWdoZXItbGV2ZWwgdG8gYmV0dGVyIHN1aXQgeW91ciBuZWVkcy5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1sb2NhdGlvblxuICovXG5mdW5jdGlvbiB1c2VMb2NhdGlvbigpIHtcbiAgIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgLy8gVE9ETzogVGhpcyBlcnJvciBpcyBwcm9iYWJseSBiZWNhdXNlIHRoZXkgc29tZWhvdyBoYXZlIDIgdmVyc2lvbnMgb2YgdGhlXG4gIC8vIHJvdXRlciBsb2FkZWQuIFdlIGNhbiBoZWxwIHRoZW0gdW5kZXJzdGFuZCBob3cgdG8gYXZvaWQgdGhhdC5cbiAgXCJ1c2VMb2NhdGlvbigpIG1heSBiZSB1c2VkIG9ubHkgaW4gdGhlIGNvbnRleHQgb2YgYSA8Um91dGVyPiBjb21wb25lbnQuXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiBSZWFjdC51c2VDb250ZXh0KExvY2F0aW9uQ29udGV4dCkubG9jYXRpb247XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgY3VycmVudCBuYXZpZ2F0aW9uIGFjdGlvbiB3aGljaCBkZXNjcmliZXMgaG93IHRoZSByb3V0ZXIgY2FtZSB0b1xuICogdGhlIGN1cnJlbnQgbG9jYXRpb24sIGVpdGhlciBieSBhIHBvcCwgcHVzaCwgb3IgcmVwbGFjZSBvbiB0aGUgaGlzdG9yeSBzdGFjay5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1uYXZpZ2F0aW9uLXR5cGVcbiAqL1xuZnVuY3Rpb24gdXNlTmF2aWdhdGlvblR5cGUoKSB7XG4gIHJldHVybiBSZWFjdC51c2VDb250ZXh0KExvY2F0aW9uQ29udGV4dCkubmF2aWdhdGlvblR5cGU7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIFBhdGhNYXRjaCBvYmplY3QgaWYgdGhlIGdpdmVuIHBhdHRlcm4gbWF0Y2hlcyB0aGUgY3VycmVudCBVUkwuXG4gKiBUaGlzIGlzIHVzZWZ1bCBmb3IgY29tcG9uZW50cyB0aGF0IG5lZWQgdG8ga25vdyBcImFjdGl2ZVwiIHN0YXRlLCBlLmcuXG4gKiBgPE5hdkxpbms+YC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1tYXRjaFxuICovXG5mdW5jdGlvbiB1c2VNYXRjaChwYXR0ZXJuKSB7XG4gICF1c2VJblJvdXRlckNvbnRleHQoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIC8vIFRPRE86IFRoaXMgZXJyb3IgaXMgcHJvYmFibHkgYmVjYXVzZSB0aGV5IHNvbWVob3cgaGF2ZSAyIHZlcnNpb25zIG9mIHRoZVxuICAvLyByb3V0ZXIgbG9hZGVkLiBXZSBjYW4gaGVscCB0aGVtIHVuZGVyc3RhbmQgaG93IHRvIGF2b2lkIHRoYXQuXG4gIFwidXNlTWF0Y2goKSBtYXkgYmUgdXNlZCBvbmx5IGluIHRoZSBjb250ZXh0IG9mIGEgPFJvdXRlcj4gY29tcG9uZW50LlwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBsZXQge1xuICAgIHBhdGhuYW1lXG4gIH0gPSB1c2VMb2NhdGlvbigpO1xuICByZXR1cm4gUmVhY3QudXNlTWVtbygoKSA9PiBtYXRjaFBhdGgocGF0dGVybiwgcGF0aG5hbWUpLCBbcGF0aG5hbWUsIHBhdHRlcm5dKTtcbn1cblxuLyoqXG4gKiBUaGUgaW50ZXJmYWNlIGZvciB0aGUgbmF2aWdhdGUoKSBmdW5jdGlvbiByZXR1cm5lZCBmcm9tIHVzZU5hdmlnYXRlKCkuXG4gKi9cblxuY29uc3QgbmF2aWdhdGVFZmZlY3RXYXJuaW5nID0gXCJZb3Ugc2hvdWxkIGNhbGwgbmF2aWdhdGUoKSBpbiBhIFJlYWN0LnVzZUVmZmVjdCgpLCBub3Qgd2hlbiBcIiArIFwieW91ciBjb21wb25lbnQgaXMgZmlyc3QgcmVuZGVyZWQuXCI7XG5cbi8vIE11dGUgd2FybmluZ3MgZm9yIGNhbGxzIHRvIHVzZU5hdmlnYXRlIGluIFNTUiBlbnZpcm9ubWVudHNcbmZ1bmN0aW9uIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoY2IpIHtcbiAgbGV0IGlzU3RhdGljID0gUmVhY3QudXNlQ29udGV4dChOYXZpZ2F0aW9uQ29udGV4dCkuc3RhdGljO1xuICBpZiAoIWlzU3RhdGljKSB7XG4gICAgLy8gV2Ugc2hvdWxkIGJlIGFibGUgdG8gZ2V0IHJpZCBvZiB0aGlzIG9uY2UgcmVhY3QgMTguMyBpcyByZWxlYXNlZFxuICAgIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L3B1bGwvMjYzOTVcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoY2IpO1xuICB9XG59XG5cbi8qKlxuICogUmV0dXJucyBhbiBpbXBlcmF0aXZlIG1ldGhvZCBmb3IgY2hhbmdpbmcgdGhlIGxvY2F0aW9uLiBVc2VkIGJ5IGA8TGluaz5gcywgYnV0XG4gKiBtYXkgYWxzbyBiZSB1c2VkIGJ5IG90aGVyIGVsZW1lbnRzIHRvIGNoYW5nZSB0aGUgbG9jYXRpb24uXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2UtbmF2aWdhdGVcbiAqL1xuZnVuY3Rpb24gdXNlTmF2aWdhdGUoKSB7XG4gIGxldCB7XG4gICAgaXNEYXRhUm91dGVcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoUm91dGVDb250ZXh0KTtcbiAgLy8gQ29uZGl0aW9uYWwgdXNhZ2UgaXMgT0sgaGVyZSBiZWNhdXNlIHRoZSB1c2FnZSBvZiBhIGRhdGEgcm91dGVyIGlzIHN0YXRpY1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgcmV0dXJuIGlzRGF0YVJvdXRlID8gdXNlTmF2aWdhdGVTdGFibGUoKSA6IHVzZU5hdmlnYXRlVW5zdGFibGUoKTtcbn1cbmZ1bmN0aW9uIHVzZU5hdmlnYXRlVW5zdGFibGUoKSB7XG4gICF1c2VJblJvdXRlckNvbnRleHQoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIC8vIFRPRE86IFRoaXMgZXJyb3IgaXMgcHJvYmFibHkgYmVjYXVzZSB0aGV5IHNvbWVob3cgaGF2ZSAyIHZlcnNpb25zIG9mIHRoZVxuICAvLyByb3V0ZXIgbG9hZGVkLiBXZSBjYW4gaGVscCB0aGVtIHVuZGVyc3RhbmQgaG93IHRvIGF2b2lkIHRoYXQuXG4gIFwidXNlTmF2aWdhdGUoKSBtYXkgYmUgdXNlZCBvbmx5IGluIHRoZSBjb250ZXh0IG9mIGEgPFJvdXRlcj4gY29tcG9uZW50LlwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBsZXQgZGF0YVJvdXRlckNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KERhdGFSb3V0ZXJDb250ZXh0KTtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZSxcbiAgICBmdXR1cmUsXG4gICAgbmF2aWdhdG9yXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KE5hdmlnYXRpb25Db250ZXh0KTtcbiAgbGV0IHtcbiAgICBtYXRjaGVzXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlQ29udGV4dCk7XG4gIGxldCB7XG4gICAgcGF0aG5hbWU6IGxvY2F0aW9uUGF0aG5hbWVcbiAgfSA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCByb3V0ZVBhdGhuYW1lc0pzb24gPSBKU09OLnN0cmluZ2lmeShVTlNBRkVfZ2V0UmVzb2x2ZVRvTWF0Y2hlcyhtYXRjaGVzLCBmdXR1cmUudjdfcmVsYXRpdmVTcGxhdFBhdGgpKTtcbiAgbGV0IGFjdGl2ZVJlZiA9IFJlYWN0LnVzZVJlZihmYWxzZSk7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgIGFjdGl2ZVJlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgfSk7XG4gIGxldCBuYXZpZ2F0ZSA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uICh0bywgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX3dhcm5pbmcoYWN0aXZlUmVmLmN1cnJlbnQsIG5hdmlnYXRlRWZmZWN0V2FybmluZykgOiB2b2lkIDA7XG5cbiAgICAvLyBTaG9ydCBjaXJjdWl0IGhlcmUgc2luY2UgaWYgdGhpcyBoYXBwZW5zIG9uIGZpcnN0IHJlbmRlciB0aGUgbmF2aWdhdGVcbiAgICAvLyBpcyB1c2VsZXNzIGJlY2F1c2Ugd2UgaGF2ZW4ndCB3aXJlZCB1cCBvdXIgaGlzdG9yeSBsaXN0ZW5lciB5ZXRcbiAgICBpZiAoIWFjdGl2ZVJlZi5jdXJyZW50KSByZXR1cm47XG4gICAgaWYgKHR5cGVvZiB0byA9PT0gXCJudW1iZXJcIikge1xuICAgICAgbmF2aWdhdG9yLmdvKHRvKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IHBhdGggPSByZXNvbHZlVG8odG8sIEpTT04ucGFyc2Uocm91dGVQYXRobmFtZXNKc29uKSwgbG9jYXRpb25QYXRobmFtZSwgb3B0aW9ucy5yZWxhdGl2ZSA9PT0gXCJwYXRoXCIpO1xuXG4gICAgLy8gSWYgd2UncmUgb3BlcmF0aW5nIHdpdGhpbiBhIGJhc2VuYW1lLCBwcmVwZW5kIGl0IHRvIHRoZSBwYXRobmFtZSBwcmlvclxuICAgIC8vIHRvIGhhbmRpbmcgb2ZmIHRvIGhpc3RvcnkgKGJ1dCBvbmx5IGlmIHdlJ3JlIG5vdCBpbiBhIGRhdGEgcm91dGVyLFxuICAgIC8vIG90aGVyd2lzZSBpdCdsbCBwcmVwZW5kIHRoZSBiYXNlbmFtZSBpbnNpZGUgb2YgdGhlIHJvdXRlcikuXG4gICAgLy8gSWYgdGhpcyBpcyBhIHJvb3QgbmF2aWdhdGlvbiwgdGhlbiB3ZSBuYXZpZ2F0ZSB0byB0aGUgcmF3IGJhc2VuYW1lXG4gICAgLy8gd2hpY2ggYWxsb3dzIHRoZSBiYXNlbmFtZSB0byBoYXZlIGZ1bGwgY29udHJvbCBvdmVyIHRoZSBwcmVzZW5jZSBvZiBhXG4gICAgLy8gdHJhaWxpbmcgc2xhc2ggb24gcm9vdCBsaW5rc1xuICAgIGlmIChkYXRhUm91dGVyQ29udGV4dCA9PSBudWxsICYmIGJhc2VuYW1lICE9PSBcIi9cIikge1xuICAgICAgcGF0aC5wYXRobmFtZSA9IHBhdGgucGF0aG5hbWUgPT09IFwiL1wiID8gYmFzZW5hbWUgOiBqb2luUGF0aHMoW2Jhc2VuYW1lLCBwYXRoLnBhdGhuYW1lXSk7XG4gICAgfVxuICAgICghIW9wdGlvbnMucmVwbGFjZSA/IG5hdmlnYXRvci5yZXBsYWNlIDogbmF2aWdhdG9yLnB1c2gpKHBhdGgsIG9wdGlvbnMuc3RhdGUsIG9wdGlvbnMpO1xuICB9LCBbYmFzZW5hbWUsIG5hdmlnYXRvciwgcm91dGVQYXRobmFtZXNKc29uLCBsb2NhdGlvblBhdGhuYW1lLCBkYXRhUm91dGVyQ29udGV4dF0pO1xuICByZXR1cm4gbmF2aWdhdGU7XG59XG5jb25zdCBPdXRsZXRDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5cbi8qKlxuICogUmV0dXJucyB0aGUgY29udGV4dCAoaWYgcHJvdmlkZWQpIGZvciB0aGUgY2hpbGQgcm91dGUgYXQgdGhpcyBsZXZlbCBvZiB0aGUgcm91dGVcbiAqIGhpZXJhcmNoeS5cbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vaG9va3MvdXNlLW91dGxldC1jb250ZXh0XG4gKi9cbmZ1bmN0aW9uIHVzZU91dGxldENvbnRleHQoKSB7XG4gIHJldHVybiBSZWFjdC51c2VDb250ZXh0KE91dGxldENvbnRleHQpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGVsZW1lbnQgZm9yIHRoZSBjaGlsZCByb3V0ZSBhdCB0aGlzIGxldmVsIG9mIHRoZSByb3V0ZVxuICogaGllcmFyY2h5LiBVc2VkIGludGVybmFsbHkgYnkgYDxPdXRsZXQ+YCB0byByZW5kZXIgY2hpbGQgcm91dGVzLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vaG9va3MvdXNlLW91dGxldFxuICovXG5mdW5jdGlvbiB1c2VPdXRsZXQoY29udGV4dCkge1xuICBsZXQgb3V0bGV0ID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpLm91dGxldDtcbiAgaWYgKG91dGxldCkge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChPdXRsZXRDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZTogY29udGV4dFxuICAgIH0sIG91dGxldCk7XG4gIH1cbiAgcmV0dXJuIG91dGxldDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCBvZiBrZXkvdmFsdWUgcGFpcnMgb2YgdGhlIGR5bmFtaWMgcGFyYW1zIGZyb20gdGhlIGN1cnJlbnRcbiAqIFVSTCB0aGF0IHdlcmUgbWF0Y2hlZCBieSB0aGUgcm91dGUgcGF0aC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1wYXJhbXNcbiAqL1xuZnVuY3Rpb24gdXNlUGFyYW1zKCkge1xuICBsZXQge1xuICAgIG1hdGNoZXNcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoUm91dGVDb250ZXh0KTtcbiAgbGV0IHJvdXRlTWF0Y2ggPSBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV07XG4gIHJldHVybiByb3V0ZU1hdGNoID8gcm91dGVNYXRjaC5wYXJhbXMgOiB7fTtcbn1cblxuLyoqXG4gKiBSZXNvbHZlcyB0aGUgcGF0aG5hbWUgb2YgdGhlIGdpdmVuIGB0b2AgdmFsdWUgYWdhaW5zdCB0aGUgY3VycmVudCBsb2NhdGlvbi5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1yZXNvbHZlZC1wYXRoXG4gKi9cbmZ1bmN0aW9uIHVzZVJlc29sdmVkUGF0aCh0bywgX3RlbXAyKSB7XG4gIGxldCB7XG4gICAgcmVsYXRpdmVcbiAgfSA9IF90ZW1wMiA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDI7XG4gIGxldCB7XG4gICAgZnV0dXJlXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KE5hdmlnYXRpb25Db250ZXh0KTtcbiAgbGV0IHtcbiAgICBtYXRjaGVzXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlQ29udGV4dCk7XG4gIGxldCB7XG4gICAgcGF0aG5hbWU6IGxvY2F0aW9uUGF0aG5hbWVcbiAgfSA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCByb3V0ZVBhdGhuYW1lc0pzb24gPSBKU09OLnN0cmluZ2lmeShVTlNBRkVfZ2V0UmVzb2x2ZVRvTWF0Y2hlcyhtYXRjaGVzLCBmdXR1cmUudjdfcmVsYXRpdmVTcGxhdFBhdGgpKTtcbiAgcmV0dXJuIFJlYWN0LnVzZU1lbW8oKCkgPT4gcmVzb2x2ZVRvKHRvLCBKU09OLnBhcnNlKHJvdXRlUGF0aG5hbWVzSnNvbiksIGxvY2F0aW9uUGF0aG5hbWUsIHJlbGF0aXZlID09PSBcInBhdGhcIiksIFt0bywgcm91dGVQYXRobmFtZXNKc29uLCBsb2NhdGlvblBhdGhuYW1lLCByZWxhdGl2ZV0pO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGVsZW1lbnQgb2YgdGhlIHJvdXRlIHRoYXQgbWF0Y2hlZCB0aGUgY3VycmVudCBsb2NhdGlvbiwgcHJlcGFyZWRcbiAqIHdpdGggdGhlIGNvcnJlY3QgY29udGV4dCB0byByZW5kZXIgdGhlIHJlbWFpbmRlciBvZiB0aGUgcm91dGUgdHJlZS4gUm91dGVcbiAqIGVsZW1lbnRzIGluIHRoZSB0cmVlIG11c3QgcmVuZGVyIGFuIGA8T3V0bGV0PmAgdG8gcmVuZGVyIHRoZWlyIGNoaWxkIHJvdXRlJ3NcbiAqIGVsZW1lbnQuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2Utcm91dGVzXG4gKi9cbmZ1bmN0aW9uIHVzZVJvdXRlcyhyb3V0ZXMsIGxvY2F0aW9uQXJnKSB7XG4gIHJldHVybiB1c2VSb3V0ZXNJbXBsKHJvdXRlcywgbG9jYXRpb25BcmcpO1xufVxuXG4vLyBJbnRlcm5hbCBpbXBsZW1lbnRhdGlvbiB3aXRoIGFjY2VwdCBvcHRpb25hbCBwYXJhbSBmb3IgUm91dGVyUHJvdmlkZXIgdXNhZ2VcbmZ1bmN0aW9uIHVzZVJvdXRlc0ltcGwocm91dGVzLCBsb2NhdGlvbkFyZywgZGF0YVJvdXRlclN0YXRlLCBmdXR1cmUpIHtcbiAgIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgLy8gVE9ETzogVGhpcyBlcnJvciBpcyBwcm9iYWJseSBiZWNhdXNlIHRoZXkgc29tZWhvdyBoYXZlIDIgdmVyc2lvbnMgb2YgdGhlXG4gIC8vIHJvdXRlciBsb2FkZWQuIFdlIGNhbiBoZWxwIHRoZW0gdW5kZXJzdGFuZCBob3cgdG8gYXZvaWQgdGhhdC5cbiAgXCJ1c2VSb3V0ZXMoKSBtYXkgYmUgdXNlZCBvbmx5IGluIHRoZSBjb250ZXh0IG9mIGEgPFJvdXRlcj4gY29tcG9uZW50LlwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBsZXQge1xuICAgIG5hdmlnYXRvclxuICB9ID0gUmVhY3QudXNlQ29udGV4dChOYXZpZ2F0aW9uQ29udGV4dCk7XG4gIGxldCB7XG4gICAgbWF0Y2hlczogcGFyZW50TWF0Y2hlc1xuICB9ID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICBsZXQgcm91dGVNYXRjaCA9IHBhcmVudE1hdGNoZXNbcGFyZW50TWF0Y2hlcy5sZW5ndGggLSAxXTtcbiAgbGV0IHBhcmVudFBhcmFtcyA9IHJvdXRlTWF0Y2ggPyByb3V0ZU1hdGNoLnBhcmFtcyA6IHt9O1xuICBsZXQgcGFyZW50UGF0aG5hbWUgPSByb3V0ZU1hdGNoID8gcm91dGVNYXRjaC5wYXRobmFtZSA6IFwiL1wiO1xuICBsZXQgcGFyZW50UGF0aG5hbWVCYXNlID0gcm91dGVNYXRjaCA/IHJvdXRlTWF0Y2gucGF0aG5hbWVCYXNlIDogXCIvXCI7XG4gIGxldCBwYXJlbnRSb3V0ZSA9IHJvdXRlTWF0Y2ggJiYgcm91dGVNYXRjaC5yb3V0ZTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIC8vIFlvdSB3b24ndCBnZXQgYSB3YXJuaW5nIGFib3V0IDIgZGlmZmVyZW50IDxSb3V0ZXM+IHVuZGVyIGEgPFJvdXRlPlxuICAgIC8vIHdpdGhvdXQgYSB0cmFpbGluZyAqLCBidXQgdGhpcyBpcyBhIGJlc3QtZWZmb3J0IHdhcm5pbmcgYW55d2F5IHNpbmNlIHdlXG4gICAgLy8gY2Fubm90IGV2ZW4gZ2l2ZSB0aGUgd2FybmluZyB1bmxlc3MgdGhleSBsYW5kIGF0IHRoZSBwYXJlbnQgcm91dGUuXG4gICAgLy9cbiAgICAvLyBFeGFtcGxlOlxuICAgIC8vXG4gICAgLy8gPFJvdXRlcz5cbiAgICAvLyAgIHsvKiBUaGlzIHJvdXRlIHBhdGggTVVTVCBlbmQgd2l0aCAvKiBiZWNhdXNlIG90aGVyd2lzZVxuICAgIC8vICAgICAgIGl0IHdpbGwgbmV2ZXIgbWF0Y2ggL2Jsb2cvcG9zdC8xMjMgKi99XG4gICAgLy8gICA8Um91dGUgcGF0aD1cImJsb2dcIiBlbGVtZW50PXs8QmxvZyAvPn0gLz5cbiAgICAvLyAgIDxSb3V0ZSBwYXRoPVwiYmxvZy9mZWVkXCIgZWxlbWVudD17PEJsb2dGZWVkIC8+fSAvPlxuICAgIC8vIDwvUm91dGVzPlxuICAgIC8vXG4gICAgLy8gZnVuY3Rpb24gQmxvZygpIHtcbiAgICAvLyAgIHJldHVybiAoXG4gICAgLy8gICAgIDxSb3V0ZXM+XG4gICAgLy8gICAgICAgPFJvdXRlIHBhdGg9XCJwb3N0LzppZFwiIGVsZW1lbnQ9ezxQb3N0IC8+fSAvPlxuICAgIC8vICAgICA8L1JvdXRlcz5cbiAgICAvLyAgICk7XG4gICAgLy8gfVxuICAgIGxldCBwYXJlbnRQYXRoID0gcGFyZW50Um91dGUgJiYgcGFyZW50Um91dGUucGF0aCB8fCBcIlwiO1xuICAgIHdhcm5pbmdPbmNlKHBhcmVudFBhdGhuYW1lLCAhcGFyZW50Um91dGUgfHwgcGFyZW50UGF0aC5lbmRzV2l0aChcIipcIiksIFwiWW91IHJlbmRlcmVkIGRlc2NlbmRhbnQgPFJvdXRlcz4gKG9yIGNhbGxlZCBgdXNlUm91dGVzKClgKSBhdCBcIiArIChcIlxcXCJcIiArIHBhcmVudFBhdGhuYW1lICsgXCJcXFwiICh1bmRlciA8Um91dGUgcGF0aD1cXFwiXCIgKyBwYXJlbnRQYXRoICsgXCJcXFwiPikgYnV0IHRoZSBcIikgKyBcInBhcmVudCByb3V0ZSBwYXRoIGhhcyBubyB0cmFpbGluZyBcXFwiKlxcXCIuIFRoaXMgbWVhbnMgaWYgeW91IG5hdmlnYXRlIFwiICsgXCJkZWVwZXIsIHRoZSBwYXJlbnQgd29uJ3QgbWF0Y2ggYW55bW9yZSBhbmQgdGhlcmVmb3JlIHRoZSBjaGlsZCBcIiArIFwicm91dGVzIHdpbGwgbmV2ZXIgcmVuZGVyLlxcblxcblwiICsgKFwiUGxlYXNlIGNoYW5nZSB0aGUgcGFyZW50IDxSb3V0ZSBwYXRoPVxcXCJcIiArIHBhcmVudFBhdGggKyBcIlxcXCI+IHRvIDxSb3V0ZSBcIikgKyAoXCJwYXRoPVxcXCJcIiArIChwYXJlbnRQYXRoID09PSBcIi9cIiA/IFwiKlwiIDogcGFyZW50UGF0aCArIFwiLypcIikgKyBcIlxcXCI+LlwiKSk7XG4gIH1cbiAgbGV0IGxvY2F0aW9uRnJvbUNvbnRleHQgPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgbG9jYXRpb247XG4gIGlmIChsb2NhdGlvbkFyZykge1xuICAgIHZhciBfcGFyc2VkTG9jYXRpb25BcmckcGE7XG4gICAgbGV0IHBhcnNlZExvY2F0aW9uQXJnID0gdHlwZW9mIGxvY2F0aW9uQXJnID09PSBcInN0cmluZ1wiID8gcGFyc2VQYXRoKGxvY2F0aW9uQXJnKSA6IGxvY2F0aW9uQXJnO1xuICAgICEocGFyZW50UGF0aG5hbWVCYXNlID09PSBcIi9cIiB8fCAoKF9wYXJzZWRMb2NhdGlvbkFyZyRwYSA9IHBhcnNlZExvY2F0aW9uQXJnLnBhdGhuYW1lKSA9PSBudWxsID8gdm9pZCAwIDogX3BhcnNlZExvY2F0aW9uQXJnJHBhLnN0YXJ0c1dpdGgocGFyZW50UGF0aG5hbWVCYXNlKSkpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgXCJXaGVuIG92ZXJyaWRpbmcgdGhlIGxvY2F0aW9uIHVzaW5nIGA8Um91dGVzIGxvY2F0aW9uPmAgb3IgYHVzZVJvdXRlcyhyb3V0ZXMsIGxvY2F0aW9uKWAsIFwiICsgXCJ0aGUgbG9jYXRpb24gcGF0aG5hbWUgbXVzdCBiZWdpbiB3aXRoIHRoZSBwb3J0aW9uIG9mIHRoZSBVUkwgcGF0aG5hbWUgdGhhdCB3YXMgXCIgKyAoXCJtYXRjaGVkIGJ5IGFsbCBwYXJlbnQgcm91dGVzLiBUaGUgY3VycmVudCBwYXRobmFtZSBiYXNlIGlzIFxcXCJcIiArIHBhcmVudFBhdGhuYW1lQmFzZSArIFwiXFxcIiBcIikgKyAoXCJidXQgcGF0aG5hbWUgXFxcIlwiICsgcGFyc2VkTG9jYXRpb25BcmcucGF0aG5hbWUgKyBcIlxcXCIgd2FzIGdpdmVuIGluIHRoZSBgbG9jYXRpb25gIHByb3AuXCIpKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIGxvY2F0aW9uID0gcGFyc2VkTG9jYXRpb25Bcmc7XG4gIH0gZWxzZSB7XG4gICAgbG9jYXRpb24gPSBsb2NhdGlvbkZyb21Db250ZXh0O1xuICB9XG4gIGxldCBwYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lIHx8IFwiL1wiO1xuICBsZXQgcmVtYWluaW5nUGF0aG5hbWUgPSBwYXRobmFtZTtcbiAgaWYgKHBhcmVudFBhdGhuYW1lQmFzZSAhPT0gXCIvXCIpIHtcbiAgICAvLyBEZXRlcm1pbmUgdGhlIHJlbWFpbmluZyBwYXRobmFtZSBieSByZW1vdmluZyB0aGUgIyBvZiBVUkwgc2VnbWVudHMgdGhlXG4gICAgLy8gcGFyZW50UGF0aG5hbWVCYXNlIGhhcywgaW5zdGVhZCBvZiByZW1vdmluZyBiYXNlZCBvbiBjaGFyYWN0ZXIgY291bnQuXG4gICAgLy8gVGhpcyBpcyBiZWNhdXNlIHdlIGNhbid0IGd1YXJhbnRlZSB0aGF0IGluY29taW5nL291dGdvaW5nIGVuY29kaW5ncy9cbiAgICAvLyBkZWNvZGluZ3Mgd2lsbCBtYXRjaCBleGFjdGx5LlxuICAgIC8vIFdlIGRlY29kZSBwYXRocyBiZWZvcmUgbWF0Y2hpbmcgb24gYSBwZXItc2VnbWVudCBiYXNpcyB3aXRoXG4gICAgLy8gZGVjb2RlVVJJQ29tcG9uZW50KCksIGJ1dCB3ZSByZS1lbmNvZGUgcGF0aG5hbWVzIHZpYSBgbmV3IFVSTCgpYCBzbyB0aGV5XG4gICAgLy8gbWF0Y2ggd2hhdCBgd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lYCB3b3VsZCByZWZsZWN0LiAgVGhvc2UgZG9uJ3QgMTAwJVxuICAgIC8vIGFsaWduIHdoZW4gaXQgY29tZXMgdG8gZW5jb2RlZCBVUkkgY2hhcmFjdGVycyBzdWNoIGFzICUgYW5kICYuXG4gICAgLy9cbiAgICAvLyBTbyB3ZSBtYXkgZW5kIHVwIHdpdGg6XG4gICAgLy8gICBwYXRobmFtZTogICAgICAgICAgIFwiL2Rlc2NlbmRhbnQvYSUyNWIvbWF0Y2hcIlxuICAgIC8vICAgcGFyZW50UGF0aG5hbWVCYXNlOiBcIi9kZXNjZW5kYW50L2ElYlwiXG4gICAgLy9cbiAgICAvLyBBbmQgdGhlIGRpcmVjdCBzdWJzdHJpbmcgcmVtb3ZhbCBhcHByb2FjaCB3b24ndCB3b3JrIDovXG4gICAgbGV0IHBhcmVudFNlZ21lbnRzID0gcGFyZW50UGF0aG5hbWVCYXNlLnJlcGxhY2UoL15cXC8vLCBcIlwiKS5zcGxpdChcIi9cIik7XG4gICAgbGV0IHNlZ21lbnRzID0gcGF0aG5hbWUucmVwbGFjZSgvXlxcLy8sIFwiXCIpLnNwbGl0KFwiL1wiKTtcbiAgICByZW1haW5pbmdQYXRobmFtZSA9IFwiL1wiICsgc2VnbWVudHMuc2xpY2UocGFyZW50U2VnbWVudHMubGVuZ3RoKS5qb2luKFwiL1wiKTtcbiAgfVxuICBsZXQgbWF0Y2hlcyA9IG1hdGNoUm91dGVzKHJvdXRlcywge1xuICAgIHBhdGhuYW1lOiByZW1haW5pbmdQYXRobmFtZVxuICB9KTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKHBhcmVudFJvdXRlIHx8IG1hdGNoZXMgIT0gbnVsbCwgXCJObyByb3V0ZXMgbWF0Y2hlZCBsb2NhdGlvbiBcXFwiXCIgKyBsb2NhdGlvbi5wYXRobmFtZSArIGxvY2F0aW9uLnNlYXJjaCArIGxvY2F0aW9uLmhhc2ggKyBcIlxcXCIgXCIpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKG1hdGNoZXMgPT0gbnVsbCB8fCBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV0ucm91dGUuZWxlbWVudCAhPT0gdW5kZWZpbmVkIHx8IG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXS5yb3V0ZS5Db21wb25lbnQgIT09IHVuZGVmaW5lZCB8fCBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV0ucm91dGUubGF6eSAhPT0gdW5kZWZpbmVkLCBcIk1hdGNoZWQgbGVhZiByb3V0ZSBhdCBsb2NhdGlvbiBcXFwiXCIgKyBsb2NhdGlvbi5wYXRobmFtZSArIGxvY2F0aW9uLnNlYXJjaCArIGxvY2F0aW9uLmhhc2ggKyBcIlxcXCIgXCIgKyBcImRvZXMgbm90IGhhdmUgYW4gZWxlbWVudCBvciBDb21wb25lbnQuIFRoaXMgbWVhbnMgaXQgd2lsbCByZW5kZXIgYW4gPE91dGxldCAvPiB3aXRoIGEgXCIgKyBcIm51bGwgdmFsdWUgYnkgZGVmYXVsdCByZXN1bHRpbmcgaW4gYW4gXFxcImVtcHR5XFxcIiBwYWdlLlwiKSA6IHZvaWQgMDtcbiAgfVxuICBsZXQgcmVuZGVyZWRNYXRjaGVzID0gX3JlbmRlck1hdGNoZXMobWF0Y2hlcyAmJiBtYXRjaGVzLm1hcChtYXRjaCA9PiBPYmplY3QuYXNzaWduKHt9LCBtYXRjaCwge1xuICAgIHBhcmFtczogT2JqZWN0LmFzc2lnbih7fSwgcGFyZW50UGFyYW1zLCBtYXRjaC5wYXJhbXMpLFxuICAgIHBhdGhuYW1lOiBqb2luUGF0aHMoW3BhcmVudFBhdGhuYW1lQmFzZSxcbiAgICAvLyBSZS1lbmNvZGUgcGF0aG5hbWVzIHRoYXQgd2VyZSBkZWNvZGVkIGluc2lkZSBtYXRjaFJvdXRlc1xuICAgIG5hdmlnYXRvci5lbmNvZGVMb2NhdGlvbiA/IG5hdmlnYXRvci5lbmNvZGVMb2NhdGlvbihtYXRjaC5wYXRobmFtZSkucGF0aG5hbWUgOiBtYXRjaC5wYXRobmFtZV0pLFxuICAgIHBhdGhuYW1lQmFzZTogbWF0Y2gucGF0aG5hbWVCYXNlID09PSBcIi9cIiA/IHBhcmVudFBhdGhuYW1lQmFzZSA6IGpvaW5QYXRocyhbcGFyZW50UGF0aG5hbWVCYXNlLFxuICAgIC8vIFJlLWVuY29kZSBwYXRobmFtZXMgdGhhdCB3ZXJlIGRlY29kZWQgaW5zaWRlIG1hdGNoUm91dGVzXG4gICAgbmF2aWdhdG9yLmVuY29kZUxvY2F0aW9uID8gbmF2aWdhdG9yLmVuY29kZUxvY2F0aW9uKG1hdGNoLnBhdGhuYW1lQmFzZSkucGF0aG5hbWUgOiBtYXRjaC5wYXRobmFtZUJhc2VdKVxuICB9KSksIHBhcmVudE1hdGNoZXMsIGRhdGFSb3V0ZXJTdGF0ZSwgZnV0dXJlKTtcblxuICAvLyBXaGVuIGEgdXNlciBwYXNzZXMgaW4gYSBgbG9jYXRpb25BcmdgLCB0aGUgYXNzb2NpYXRlZCByb3V0ZXMgbmVlZCB0b1xuICAvLyBiZSB3cmFwcGVkIGluIGEgbmV3IGBMb2NhdGlvbkNvbnRleHQuUHJvdmlkZXJgIGluIG9yZGVyIGZvciBgdXNlTG9jYXRpb25gXG4gIC8vIHRvIHVzZSB0aGUgc2NvcGVkIGxvY2F0aW9uIGluc3RlYWQgb2YgdGhlIGdsb2JhbCBsb2NhdGlvbi5cbiAgaWYgKGxvY2F0aW9uQXJnICYmIHJlbmRlcmVkTWF0Y2hlcykge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChMb2NhdGlvbkNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiB7XG4gICAgICAgIGxvY2F0aW9uOiBfZXh0ZW5kcyh7XG4gICAgICAgICAgcGF0aG5hbWU6IFwiL1wiLFxuICAgICAgICAgIHNlYXJjaDogXCJcIixcbiAgICAgICAgICBoYXNoOiBcIlwiLFxuICAgICAgICAgIHN0YXRlOiBudWxsLFxuICAgICAgICAgIGtleTogXCJkZWZhdWx0XCJcbiAgICAgICAgfSwgbG9jYXRpb24pLFxuICAgICAgICBuYXZpZ2F0aW9uVHlwZTogQWN0aW9uLlBvcFxuICAgICAgfVxuICAgIH0sIHJlbmRlcmVkTWF0Y2hlcyk7XG4gIH1cbiAgcmV0dXJuIHJlbmRlcmVkTWF0Y2hlcztcbn1cbmZ1bmN0aW9uIERlZmF1bHRFcnJvckNvbXBvbmVudCgpIHtcbiAgbGV0IGVycm9yID0gdXNlUm91dGVFcnJvcigpO1xuICBsZXQgbWVzc2FnZSA9IGlzUm91dGVFcnJvclJlc3BvbnNlKGVycm9yKSA/IGVycm9yLnN0YXR1cyArIFwiIFwiICsgZXJyb3Iuc3RhdHVzVGV4dCA6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogSlNPTi5zdHJpbmdpZnkoZXJyb3IpO1xuICBsZXQgc3RhY2sgPSBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3Iuc3RhY2sgOiBudWxsO1xuICBsZXQgbGlnaHRncmV5ID0gXCJyZ2JhKDIwMCwyMDAsMjAwLCAwLjUpXCI7XG4gIGxldCBwcmVTdHlsZXMgPSB7XG4gICAgcGFkZGluZzogXCIwLjVyZW1cIixcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IGxpZ2h0Z3JleVxuICB9O1xuICBsZXQgY29kZVN0eWxlcyA9IHtcbiAgICBwYWRkaW5nOiBcIjJweCA0cHhcIixcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IGxpZ2h0Z3JleVxuICB9O1xuICBsZXQgZGV2SW5mbyA9IG51bGw7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgaGFuZGxlZCBieSBSZWFjdCBSb3V0ZXIgZGVmYXVsdCBFcnJvckJvdW5kYXJ5OlwiLCBlcnJvcik7XG4gICAgZGV2SW5mbyA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBcIiwgbnVsbCwgXCJcXHVEODNEXFx1RENCRiBIZXkgZGV2ZWxvcGVyIFxcdUQ4M0RcXHVEQzRCXCIpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBcIiwgbnVsbCwgXCJZb3UgY2FuIHByb3ZpZGUgYSB3YXkgYmV0dGVyIFVYIHRoYW4gdGhpcyB3aGVuIHlvdXIgYXBwIHRocm93cyBlcnJvcnMgYnkgcHJvdmlkaW5nIHlvdXIgb3duIFwiLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImNvZGVcIiwge1xuICAgICAgc3R5bGU6IGNvZGVTdHlsZXNcbiAgICB9LCBcIkVycm9yQm91bmRhcnlcIiksIFwiIG9yXCIsIFwiIFwiLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImNvZGVcIiwge1xuICAgICAgc3R5bGU6IGNvZGVTdHlsZXNcbiAgICB9LCBcImVycm9yRWxlbWVudFwiKSwgXCIgcHJvcCBvbiB5b3VyIHJvdXRlLlwiKSk7XG4gIH1cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImgyXCIsIG51bGwsIFwiVW5leHBlY3RlZCBBcHBsaWNhdGlvbiBFcnJvciFcIiksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiaDNcIiwge1xuICAgIHN0eWxlOiB7XG4gICAgICBmb250U3R5bGU6IFwiaXRhbGljXCJcbiAgICB9XG4gIH0sIG1lc3NhZ2UpLCBzdGFjayA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicHJlXCIsIHtcbiAgICBzdHlsZTogcHJlU3R5bGVzXG4gIH0sIHN0YWNrKSA6IG51bGwsIGRldkluZm8pO1xufVxuY29uc3QgZGVmYXVsdEVycm9yRWxlbWVudCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KERlZmF1bHRFcnJvckNvbXBvbmVudCwgbnVsbCk7XG5jbGFzcyBSZW5kZXJFcnJvckJvdW5kYXJ5IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGxvY2F0aW9uOiBwcm9wcy5sb2NhdGlvbixcbiAgICAgIHJldmFsaWRhdGlvbjogcHJvcHMucmV2YWxpZGF0aW9uLFxuICAgICAgZXJyb3I6IHByb3BzLmVycm9yXG4gICAgfTtcbiAgfVxuICBzdGF0aWMgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yKGVycm9yKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGVycm9yOiBlcnJvclxuICAgIH07XG4gIH1cbiAgc3RhdGljIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhwcm9wcywgc3RhdGUpIHtcbiAgICAvLyBXaGVuIHdlIGdldCBpbnRvIGFuIGVycm9yIHN0YXRlLCB0aGUgdXNlciB3aWxsIGxpa2VseSBjbGljayBcImJhY2tcIiB0byB0aGVcbiAgICAvLyBwcmV2aW91cyBwYWdlIHRoYXQgZGlkbid0IGhhdmUgYW4gZXJyb3IuIEJlY2F1c2UgdGhpcyB3cmFwcyB0aGUgZW50aXJlXG4gICAgLy8gYXBwbGljYXRpb24sIHRoYXQgd2lsbCBoYXZlIG5vIGVmZmVjdC0tdGhlIGVycm9yIHBhZ2UgY29udGludWVzIHRvIGRpc3BsYXkuXG4gICAgLy8gVGhpcyBnaXZlcyB1cyBhIG1lY2hhbmlzbSB0byByZWNvdmVyIGZyb20gdGhlIGVycm9yIHdoZW4gdGhlIGxvY2F0aW9uIGNoYW5nZXMuXG4gICAgLy9cbiAgICAvLyBXaGV0aGVyIHdlJ3JlIGluIGFuIGVycm9yIHN0YXRlIG9yIG5vdCwgd2UgdXBkYXRlIHRoZSBsb2NhdGlvbiBpbiBzdGF0ZVxuICAgIC8vIHNvIHRoYXQgd2hlbiB3ZSBhcmUgaW4gYW4gZXJyb3Igc3RhdGUsIGl0IGdldHMgcmVzZXQgd2hlbiBhIG5ldyBsb2NhdGlvblxuICAgIC8vIGNvbWVzIGluIGFuZCB0aGUgdXNlciByZWNvdmVycyBmcm9tIHRoZSBlcnJvci5cbiAgICBpZiAoc3RhdGUubG9jYXRpb24gIT09IHByb3BzLmxvY2F0aW9uIHx8IHN0YXRlLnJldmFsaWRhdGlvbiAhPT0gXCJpZGxlXCIgJiYgcHJvcHMucmV2YWxpZGF0aW9uID09PSBcImlkbGVcIikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZXJyb3I6IHByb3BzLmVycm9yLFxuICAgICAgICBsb2NhdGlvbjogcHJvcHMubG9jYXRpb24sXG4gICAgICAgIHJldmFsaWRhdGlvbjogcHJvcHMucmV2YWxpZGF0aW9uXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIElmIHdlJ3JlIG5vdCBjaGFuZ2luZyBsb2NhdGlvbnMsIHByZXNlcnZlIHRoZSBsb2NhdGlvbiBidXQgc3RpbGwgc3VyZmFjZVxuICAgIC8vIGFueSBuZXcgZXJyb3JzIHRoYXQgbWF5IGNvbWUgdGhyb3VnaC4gV2UgcmV0YWluIHRoZSBleGlzdGluZyBlcnJvciwgd2UgZG9cbiAgICAvLyB0aGlzIGJlY2F1c2UgdGhlIGVycm9yIHByb3ZpZGVkIGZyb20gdGhlIGFwcCBzdGF0ZSBtYXkgYmUgY2xlYXJlZCB3aXRob3V0XG4gICAgLy8gdGhlIGxvY2F0aW9uIGNoYW5naW5nLlxuICAgIHJldHVybiB7XG4gICAgICBlcnJvcjogcHJvcHMuZXJyb3IgIT09IHVuZGVmaW5lZCA/IHByb3BzLmVycm9yIDogc3RhdGUuZXJyb3IsXG4gICAgICBsb2NhdGlvbjogc3RhdGUubG9jYXRpb24sXG4gICAgICByZXZhbGlkYXRpb246IHByb3BzLnJldmFsaWRhdGlvbiB8fCBzdGF0ZS5yZXZhbGlkYXRpb25cbiAgICB9O1xuICB9XG4gIGNvbXBvbmVudERpZENhdGNoKGVycm9yLCBlcnJvckluZm8pIHtcbiAgICBjb25zb2xlLmVycm9yKFwiUmVhY3QgUm91dGVyIGNhdWdodCB0aGUgZm9sbG93aW5nIGVycm9yIGR1cmluZyByZW5kZXJcIiwgZXJyb3IsIGVycm9ySW5mbyk7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiB0aGlzLnN0YXRlLmVycm9yICE9PSB1bmRlZmluZWQgPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiB0aGlzLnByb3BzLnJvdXRlQ29udGV4dFxuICAgIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlRXJyb3JDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZTogdGhpcy5zdGF0ZS5lcnJvcixcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNvbXBvbmVudFxuICAgIH0pKSA6IHRoaXMucHJvcHMuY2hpbGRyZW47XG4gIH1cbn1cbmZ1bmN0aW9uIFJlbmRlcmVkUm91dGUoX3JlZikge1xuICBsZXQge1xuICAgIHJvdXRlQ29udGV4dCxcbiAgICBtYXRjaCxcbiAgICBjaGlsZHJlblxuICB9ID0gX3JlZjtcbiAgbGV0IGRhdGFSb3V0ZXJDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChEYXRhUm91dGVyQ29udGV4dCk7XG5cbiAgLy8gVHJhY2sgaG93IGRlZXAgd2UgZ290IGluIG91ciByZW5kZXIgcGFzcyB0byBlbXVsYXRlIFNTUiBjb21wb25lbnREaWRDYXRjaFxuICAvLyBpbiBhIERhdGFTdGF0aWNSb3V0ZXJcbiAgaWYgKGRhdGFSb3V0ZXJDb250ZXh0ICYmIGRhdGFSb3V0ZXJDb250ZXh0LnN0YXRpYyAmJiBkYXRhUm91dGVyQ29udGV4dC5zdGF0aWNDb250ZXh0ICYmIChtYXRjaC5yb3V0ZS5lcnJvckVsZW1lbnQgfHwgbWF0Y2gucm91dGUuRXJyb3JCb3VuZGFyeSkpIHtcbiAgICBkYXRhUm91dGVyQ29udGV4dC5zdGF0aWNDb250ZXh0Ll9kZWVwZXN0UmVuZGVyZWRCb3VuZGFyeUlkID0gbWF0Y2gucm91dGUuaWQ7XG4gIH1cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiByb3V0ZUNvbnRleHRcbiAgfSwgY2hpbGRyZW4pO1xufVxuZnVuY3Rpb24gX3JlbmRlck1hdGNoZXMobWF0Y2hlcywgcGFyZW50TWF0Y2hlcywgZGF0YVJvdXRlclN0YXRlLCBmdXR1cmUpIHtcbiAgdmFyIF9kYXRhUm91dGVyU3RhdGUyO1xuICBpZiAocGFyZW50TWF0Y2hlcyA9PT0gdm9pZCAwKSB7XG4gICAgcGFyZW50TWF0Y2hlcyA9IFtdO1xuICB9XG4gIGlmIChkYXRhUm91dGVyU3RhdGUgPT09IHZvaWQgMCkge1xuICAgIGRhdGFSb3V0ZXJTdGF0ZSA9IG51bGw7XG4gIH1cbiAgaWYgKGZ1dHVyZSA9PT0gdm9pZCAwKSB7XG4gICAgZnV0dXJlID0gbnVsbDtcbiAgfVxuICBpZiAobWF0Y2hlcyA9PSBudWxsKSB7XG4gICAgdmFyIF9kYXRhUm91dGVyU3RhdGU7XG4gICAgaWYgKChfZGF0YVJvdXRlclN0YXRlID0gZGF0YVJvdXRlclN0YXRlKSAhPSBudWxsICYmIF9kYXRhUm91dGVyU3RhdGUuZXJyb3JzKSB7XG4gICAgICAvLyBEb24ndCBiYWlsIGlmIHdlIGhhdmUgZGF0YSByb3V0ZXIgZXJyb3JzIHNvIHdlIGNhbiByZW5kZXIgdGhlbSBpbiB0aGVcbiAgICAgIC8vIGJvdW5kYXJ5LiAgVXNlIHRoZSBwcmUtbWF0Y2hlZCAob3Igc2hpbW1lZCkgbWF0Y2hlc1xuICAgICAgbWF0Y2hlcyA9IGRhdGFSb3V0ZXJTdGF0ZS5tYXRjaGVzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cbiAgbGV0IHJlbmRlcmVkTWF0Y2hlcyA9IG1hdGNoZXM7XG5cbiAgLy8gSWYgd2UgaGF2ZSBkYXRhIGVycm9ycywgdHJpbSBtYXRjaGVzIHRvIHRoZSBoaWdoZXN0IGVycm9yIGJvdW5kYXJ5XG4gIGxldCBlcnJvcnMgPSAoX2RhdGFSb3V0ZXJTdGF0ZTIgPSBkYXRhUm91dGVyU3RhdGUpID09IG51bGwgPyB2b2lkIDAgOiBfZGF0YVJvdXRlclN0YXRlMi5lcnJvcnM7XG4gIGlmIChlcnJvcnMgIT0gbnVsbCkge1xuICAgIGxldCBlcnJvckluZGV4ID0gcmVuZGVyZWRNYXRjaGVzLmZpbmRJbmRleChtID0+IG0ucm91dGUuaWQgJiYgKGVycm9ycyA9PSBudWxsID8gdm9pZCAwIDogZXJyb3JzW20ucm91dGUuaWRdKSAhPT0gdW5kZWZpbmVkKTtcbiAgICAhKGVycm9ySW5kZXggPj0gMCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcIkNvdWxkIG5vdCBmaW5kIGEgbWF0Y2hpbmcgcm91dGUgZm9yIGVycm9ycyBvbiByb3V0ZSBJRHM6IFwiICsgT2JqZWN0LmtleXMoZXJyb3JzKS5qb2luKFwiLFwiKSkgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICByZW5kZXJlZE1hdGNoZXMgPSByZW5kZXJlZE1hdGNoZXMuc2xpY2UoMCwgTWF0aC5taW4ocmVuZGVyZWRNYXRjaGVzLmxlbmd0aCwgZXJyb3JJbmRleCArIDEpKTtcbiAgfVxuXG4gIC8vIElmIHdlJ3JlIGluIGEgcGFydGlhbCBoeWRyYXRpb24gbW9kZSwgZGV0ZWN0IGlmIHdlIG5lZWQgdG8gcmVuZGVyIGRvd24gdG9cbiAgLy8gYSBnaXZlbiBIeWRyYXRlRmFsbGJhY2sgd2hpbGUgd2UgbG9hZCB0aGUgcmVzdCBvZiB0aGUgaHlkcmF0aW9uIGRhdGFcbiAgbGV0IHJlbmRlckZhbGxiYWNrID0gZmFsc2U7XG4gIGxldCBmYWxsYmFja0luZGV4ID0gLTE7XG4gIGlmIChkYXRhUm91dGVyU3RhdGUgJiYgZnV0dXJlICYmIGZ1dHVyZS52N19wYXJ0aWFsSHlkcmF0aW9uKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZW5kZXJlZE1hdGNoZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBtYXRjaCA9IHJlbmRlcmVkTWF0Y2hlc1tpXTtcbiAgICAgIC8vIFRyYWNrIHRoZSBkZWVwZXN0IGZhbGxiYWNrIHVwIHVudGlsIHRoZSBmaXJzdCByb3V0ZSB3aXRob3V0IGRhdGFcbiAgICAgIGlmIChtYXRjaC5yb3V0ZS5IeWRyYXRlRmFsbGJhY2sgfHwgbWF0Y2gucm91dGUuaHlkcmF0ZUZhbGxiYWNrRWxlbWVudCkge1xuICAgICAgICBmYWxsYmFja0luZGV4ID0gaTtcbiAgICAgIH1cbiAgICAgIGlmIChtYXRjaC5yb3V0ZS5pZCkge1xuICAgICAgICBsZXQge1xuICAgICAgICAgIGxvYWRlckRhdGEsXG4gICAgICAgICAgZXJyb3JzXG4gICAgICAgIH0gPSBkYXRhUm91dGVyU3RhdGU7XG4gICAgICAgIGxldCBuZWVkc1RvUnVuTG9hZGVyID0gbWF0Y2gucm91dGUubG9hZGVyICYmIGxvYWRlckRhdGFbbWF0Y2gucm91dGUuaWRdID09PSB1bmRlZmluZWQgJiYgKCFlcnJvcnMgfHwgZXJyb3JzW21hdGNoLnJvdXRlLmlkXSA9PT0gdW5kZWZpbmVkKTtcbiAgICAgICAgaWYgKG1hdGNoLnJvdXRlLmxhenkgfHwgbmVlZHNUb1J1bkxvYWRlcikge1xuICAgICAgICAgIC8vIFdlIGZvdW5kIHRoZSBmaXJzdCByb3V0ZSB0aGF0J3Mgbm90IHJlYWR5IHRvIHJlbmRlciAod2FpdGluZyBvblxuICAgICAgICAgIC8vIGxhenksIG9yIGhhcyBhIGxvYWRlciB0aGF0IGhhc24ndCBydW4geWV0KS4gIEZsYWcgdGhhdCB3ZSBuZWVkIHRvXG4gICAgICAgICAgLy8gcmVuZGVyIGEgZmFsbGJhY2sgYW5kIHJlbmRlciB1cCB1bnRpbCB0aGUgYXBwcm9wcmlhdGUgZmFsbGJhY2tcbiAgICAgICAgICByZW5kZXJGYWxsYmFjayA9IHRydWU7XG4gICAgICAgICAgaWYgKGZhbGxiYWNrSW5kZXggPj0gMCkge1xuICAgICAgICAgICAgcmVuZGVyZWRNYXRjaGVzID0gcmVuZGVyZWRNYXRjaGVzLnNsaWNlKDAsIGZhbGxiYWNrSW5kZXggKyAxKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVuZGVyZWRNYXRjaGVzID0gW3JlbmRlcmVkTWF0Y2hlc1swXV07XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiByZW5kZXJlZE1hdGNoZXMucmVkdWNlUmlnaHQoKG91dGxldCwgbWF0Y2gsIGluZGV4KSA9PiB7XG4gICAgLy8gT25seSBkYXRhIHJvdXRlcnMgaGFuZGxlIGVycm9ycy9mYWxsYmFja3NcbiAgICBsZXQgZXJyb3I7XG4gICAgbGV0IHNob3VsZFJlbmRlckh5ZHJhdGVGYWxsYmFjayA9IGZhbHNlO1xuICAgIGxldCBlcnJvckVsZW1lbnQgPSBudWxsO1xuICAgIGxldCBoeWRyYXRlRmFsbGJhY2tFbGVtZW50ID0gbnVsbDtcbiAgICBpZiAoZGF0YVJvdXRlclN0YXRlKSB7XG4gICAgICBlcnJvciA9IGVycm9ycyAmJiBtYXRjaC5yb3V0ZS5pZCA/IGVycm9yc1ttYXRjaC5yb3V0ZS5pZF0gOiB1bmRlZmluZWQ7XG4gICAgICBlcnJvckVsZW1lbnQgPSBtYXRjaC5yb3V0ZS5lcnJvckVsZW1lbnQgfHwgZGVmYXVsdEVycm9yRWxlbWVudDtcbiAgICAgIGlmIChyZW5kZXJGYWxsYmFjaykge1xuICAgICAgICBpZiAoZmFsbGJhY2tJbmRleCA8IDAgJiYgaW5kZXggPT09IDApIHtcbiAgICAgICAgICB3YXJuaW5nT25jZShcInJvdXRlLWZhbGxiYWNrXCIsIGZhbHNlLCBcIk5vIGBIeWRyYXRlRmFsbGJhY2tgIGVsZW1lbnQgcHJvdmlkZWQgdG8gcmVuZGVyIGR1cmluZyBpbml0aWFsIGh5ZHJhdGlvblwiKTtcbiAgICAgICAgICBzaG91bGRSZW5kZXJIeWRyYXRlRmFsbGJhY2sgPSB0cnVlO1xuICAgICAgICAgIGh5ZHJhdGVGYWxsYmFja0VsZW1lbnQgPSBudWxsO1xuICAgICAgICB9IGVsc2UgaWYgKGZhbGxiYWNrSW5kZXggPT09IGluZGV4KSB7XG4gICAgICAgICAgc2hvdWxkUmVuZGVySHlkcmF0ZUZhbGxiYWNrID0gdHJ1ZTtcbiAgICAgICAgICBoeWRyYXRlRmFsbGJhY2tFbGVtZW50ID0gbWF0Y2gucm91dGUuaHlkcmF0ZUZhbGxiYWNrRWxlbWVudCB8fCBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGxldCBtYXRjaGVzID0gcGFyZW50TWF0Y2hlcy5jb25jYXQocmVuZGVyZWRNYXRjaGVzLnNsaWNlKDAsIGluZGV4ICsgMSkpO1xuICAgIGxldCBnZXRDaGlsZHJlbiA9ICgpID0+IHtcbiAgICAgIGxldCBjaGlsZHJlbjtcbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICBjaGlsZHJlbiA9IGVycm9yRWxlbWVudDtcbiAgICAgIH0gZWxzZSBpZiAoc2hvdWxkUmVuZGVySHlkcmF0ZUZhbGxiYWNrKSB7XG4gICAgICAgIGNoaWxkcmVuID0gaHlkcmF0ZUZhbGxiYWNrRWxlbWVudDtcbiAgICAgIH0gZWxzZSBpZiAobWF0Y2gucm91dGUuQ29tcG9uZW50KSB7XG4gICAgICAgIC8vIE5vdGU6IFRoaXMgaXMgYSBkZS1vcHRpbWl6ZWQgcGF0aCBzaW5jZSBSZWFjdCB3b24ndCByZS11c2UgdGhlXG4gICAgICAgIC8vIFJlYWN0RWxlbWVudCBzaW5jZSBpdCdzIGlkZW50aXR5IGNoYW5nZXMgd2l0aCBlYWNoIG5ld1xuICAgICAgICAvLyBSZWFjdC5jcmVhdGVFbGVtZW50IGNhbGwuICBXZSBrZWVwIHRoaXMgc28gZm9sa3MgY2FuIHVzZVxuICAgICAgICAvLyBgPFJvdXRlIENvbXBvbmVudD17Li4ufT5gIGluIGA8Um91dGVzPmAgYnV0IGdlbmVyYWxseSBgQ29tcG9uZW50YFxuICAgICAgICAvLyB1c2FnZSBpcyBvbmx5IGFkdmlzZWQgaW4gYFJvdXRlclByb3ZpZGVyYCB3aGVuIHdlIGNhbiBjb252ZXJ0IGl0IHRvXG4gICAgICAgIC8vIGBlbGVtZW50YCBhaGVhZCBvZiB0aW1lLlxuICAgICAgICBjaGlsZHJlbiA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KG1hdGNoLnJvdXRlLkNvbXBvbmVudCwgbnVsbCk7XG4gICAgICB9IGVsc2UgaWYgKG1hdGNoLnJvdXRlLmVsZW1lbnQpIHtcbiAgICAgICAgY2hpbGRyZW4gPSBtYXRjaC5yb3V0ZS5lbGVtZW50O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2hpbGRyZW4gPSBvdXRsZXQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVuZGVyZWRSb3V0ZSwge1xuICAgICAgICBtYXRjaDogbWF0Y2gsXG4gICAgICAgIHJvdXRlQ29udGV4dDoge1xuICAgICAgICAgIG91dGxldCxcbiAgICAgICAgICBtYXRjaGVzLFxuICAgICAgICAgIGlzRGF0YVJvdXRlOiBkYXRhUm91dGVyU3RhdGUgIT0gbnVsbFxuICAgICAgICB9LFxuICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgICAgIH0pO1xuICAgIH07XG4gICAgLy8gT25seSB3cmFwIGluIGFuIGVycm9yIGJvdW5kYXJ5IHdpdGhpbiBkYXRhIHJvdXRlciB1c2FnZXMgd2hlbiB3ZSBoYXZlIGFuXG4gICAgLy8gRXJyb3JCb3VuZGFyeS9lcnJvckVsZW1lbnQgb24gdGhpcyByb3V0ZS4gIE90aGVyd2lzZSBsZXQgaXQgYnViYmxlIHVwIHRvXG4gICAgLy8gYW4gYW5jZXN0b3IgRXJyb3JCb3VuZGFyeS9lcnJvckVsZW1lbnRcbiAgICByZXR1cm4gZGF0YVJvdXRlclN0YXRlICYmIChtYXRjaC5yb3V0ZS5FcnJvckJvdW5kYXJ5IHx8IG1hdGNoLnJvdXRlLmVycm9yRWxlbWVudCB8fCBpbmRleCA9PT0gMCkgPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZW5kZXJFcnJvckJvdW5kYXJ5LCB7XG4gICAgICBsb2NhdGlvbjogZGF0YVJvdXRlclN0YXRlLmxvY2F0aW9uLFxuICAgICAgcmV2YWxpZGF0aW9uOiBkYXRhUm91dGVyU3RhdGUucmV2YWxpZGF0aW9uLFxuICAgICAgY29tcG9uZW50OiBlcnJvckVsZW1lbnQsXG4gICAgICBlcnJvcjogZXJyb3IsXG4gICAgICBjaGlsZHJlbjogZ2V0Q2hpbGRyZW4oKSxcbiAgICAgIHJvdXRlQ29udGV4dDoge1xuICAgICAgICBvdXRsZXQ6IG51bGwsXG4gICAgICAgIG1hdGNoZXMsXG4gICAgICAgIGlzRGF0YVJvdXRlOiB0cnVlXG4gICAgICB9XG4gICAgfSkgOiBnZXRDaGlsZHJlbigpO1xuICB9LCBudWxsKTtcbn1cbnZhciBEYXRhUm91dGVySG9vayA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoRGF0YVJvdXRlckhvb2spIHtcbiAgRGF0YVJvdXRlckhvb2tbXCJVc2VCbG9ja2VyXCJdID0gXCJ1c2VCbG9ja2VyXCI7XG4gIERhdGFSb3V0ZXJIb29rW1wiVXNlUmV2YWxpZGF0b3JcIl0gPSBcInVzZVJldmFsaWRhdG9yXCI7XG4gIERhdGFSb3V0ZXJIb29rW1wiVXNlTmF2aWdhdGVTdGFibGVcIl0gPSBcInVzZU5hdmlnYXRlXCI7XG4gIHJldHVybiBEYXRhUm91dGVySG9vaztcbn0oRGF0YVJvdXRlckhvb2sgfHwge30pO1xudmFyIERhdGFSb3V0ZXJTdGF0ZUhvb2sgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKERhdGFSb3V0ZXJTdGF0ZUhvb2spIHtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZUJsb2NrZXJcIl0gPSBcInVzZUJsb2NrZXJcIjtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZUxvYWRlckRhdGFcIl0gPSBcInVzZUxvYWRlckRhdGFcIjtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZUFjdGlvbkRhdGFcIl0gPSBcInVzZUFjdGlvbkRhdGFcIjtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZVJvdXRlRXJyb3JcIl0gPSBcInVzZVJvdXRlRXJyb3JcIjtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZU5hdmlnYXRpb25cIl0gPSBcInVzZU5hdmlnYXRpb25cIjtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZVJvdXRlTG9hZGVyRGF0YVwiXSA9IFwidXNlUm91dGVMb2FkZXJEYXRhXCI7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VNYXRjaGVzXCJdID0gXCJ1c2VNYXRjaGVzXCI7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VSZXZhbGlkYXRvclwiXSA9IFwidXNlUmV2YWxpZGF0b3JcIjtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZU5hdmlnYXRlU3RhYmxlXCJdID0gXCJ1c2VOYXZpZ2F0ZVwiO1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlUm91dGVJZFwiXSA9IFwidXNlUm91dGVJZFwiO1xuICByZXR1cm4gRGF0YVJvdXRlclN0YXRlSG9vaztcbn0oRGF0YVJvdXRlclN0YXRlSG9vayB8fCB7fSk7XG5mdW5jdGlvbiBnZXREYXRhUm91dGVyQ29uc29sZUVycm9yKGhvb2tOYW1lKSB7XG4gIHJldHVybiBob29rTmFtZSArIFwiIG11c3QgYmUgdXNlZCB3aXRoaW4gYSBkYXRhIHJvdXRlci4gIFNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9yb3V0ZXJzL3BpY2tpbmctYS1yb3V0ZXIuXCI7XG59XG5mdW5jdGlvbiB1c2VEYXRhUm91dGVyQ29udGV4dChob29rTmFtZSkge1xuICBsZXQgY3R4ID0gUmVhY3QudXNlQ29udGV4dChEYXRhUm91dGVyQ29udGV4dCk7XG4gICFjdHggPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBnZXREYXRhUm91dGVyQ29uc29sZUVycm9yKGhvb2tOYW1lKSkgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIGN0eDtcbn1cbmZ1bmN0aW9uIHVzZURhdGFSb3V0ZXJTdGF0ZShob29rTmFtZSkge1xuICBsZXQgc3RhdGUgPSBSZWFjdC51c2VDb250ZXh0KERhdGFSb3V0ZXJTdGF0ZUNvbnRleHQpO1xuICAhc3RhdGUgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBnZXREYXRhUm91dGVyQ29uc29sZUVycm9yKGhvb2tOYW1lKSkgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIHN0YXRlO1xufVxuZnVuY3Rpb24gdXNlUm91dGVDb250ZXh0KGhvb2tOYW1lKSB7XG4gIGxldCByb3V0ZSA9IFJlYWN0LnVzZUNvbnRleHQoUm91dGVDb250ZXh0KTtcbiAgIXJvdXRlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgZ2V0RGF0YVJvdXRlckNvbnNvbGVFcnJvcihob29rTmFtZSkpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiByb3V0ZTtcbn1cblxuLy8gSW50ZXJuYWwgdmVyc2lvbiB3aXRoIGhvb2tOYW1lLWF3YXJlIGRlYnVnZ2luZ1xuZnVuY3Rpb24gdXNlQ3VycmVudFJvdXRlSWQoaG9va05hbWUpIHtcbiAgbGV0IHJvdXRlID0gdXNlUm91dGVDb250ZXh0KGhvb2tOYW1lKTtcbiAgbGV0IHRoaXNSb3V0ZSA9IHJvdXRlLm1hdGNoZXNbcm91dGUubWF0Y2hlcy5sZW5ndGggLSAxXTtcbiAgIXRoaXNSb3V0ZS5yb3V0ZS5pZCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIGhvb2tOYW1lICsgXCIgY2FuIG9ubHkgYmUgdXNlZCBvbiByb3V0ZXMgdGhhdCBjb250YWluIGEgdW5pcXVlIFxcXCJpZFxcXCJcIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIHRoaXNSb3V0ZS5yb3V0ZS5pZDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBJRCBmb3IgdGhlIG5lYXJlc3QgY29udGV4dHVhbCByb3V0ZVxuICovXG5mdW5jdGlvbiB1c2VSb3V0ZUlkKCkge1xuICByZXR1cm4gdXNlQ3VycmVudFJvdXRlSWQoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VSb3V0ZUlkKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBjdXJyZW50IG5hdmlnYXRpb24sIGRlZmF1bHRpbmcgdG8gYW4gXCJpZGxlXCIgbmF2aWdhdGlvbiB3aGVuXG4gKiBubyBuYXZpZ2F0aW9uIGlzIGluIHByb2dyZXNzXG4gKi9cbmZ1bmN0aW9uIHVzZU5hdmlnYXRpb24oKSB7XG4gIGxldCBzdGF0ZSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZU5hdmlnYXRpb24pO1xuICByZXR1cm4gc3RhdGUubmF2aWdhdGlvbjtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgcmV2YWxpZGF0ZSBmdW5jdGlvbiBmb3IgbWFudWFsbHkgdHJpZ2dlcmluZyByZXZhbGlkYXRpb24sIGFzIHdlbGxcbiAqIGFzIHRoZSBjdXJyZW50IHN0YXRlIG9mIGFueSBtYW51YWwgcmV2YWxpZGF0aW9uc1xuICovXG5mdW5jdGlvbiB1c2VSZXZhbGlkYXRvcigpIHtcbiAgbGV0IGRhdGFSb3V0ZXJDb250ZXh0ID0gdXNlRGF0YVJvdXRlckNvbnRleHQoRGF0YVJvdXRlckhvb2suVXNlUmV2YWxpZGF0b3IpO1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VSZXZhbGlkYXRvcik7XG4gIHJldHVybiBSZWFjdC51c2VNZW1vKCgpID0+ICh7XG4gICAgcmV2YWxpZGF0ZTogZGF0YVJvdXRlckNvbnRleHQucm91dGVyLnJldmFsaWRhdGUsXG4gICAgc3RhdGU6IHN0YXRlLnJldmFsaWRhdGlvblxuICB9KSwgW2RhdGFSb3V0ZXJDb250ZXh0LnJvdXRlci5yZXZhbGlkYXRlLCBzdGF0ZS5yZXZhbGlkYXRpb25dKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBhY3RpdmUgcm91dGUgbWF0Y2hlcywgdXNlZnVsIGZvciBhY2Nlc3NpbmcgbG9hZGVyRGF0YSBmb3JcbiAqIHBhcmVudC9jaGlsZCByb3V0ZXMgb3IgdGhlIHJvdXRlIFwiaGFuZGxlXCIgcHJvcGVydHlcbiAqL1xuZnVuY3Rpb24gdXNlTWF0Y2hlcygpIHtcbiAgbGV0IHtcbiAgICBtYXRjaGVzLFxuICAgIGxvYWRlckRhdGFcbiAgfSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZU1hdGNoZXMpO1xuICByZXR1cm4gUmVhY3QudXNlTWVtbygoKSA9PiBtYXRjaGVzLm1hcChtID0+IFVOU0FGRV9jb252ZXJ0Um91dGVNYXRjaFRvVWlNYXRjaChtLCBsb2FkZXJEYXRhKSksIFttYXRjaGVzLCBsb2FkZXJEYXRhXSk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgbG9hZGVyIGRhdGEgZm9yIHRoZSBuZWFyZXN0IGFuY2VzdG9yIFJvdXRlIGxvYWRlclxuICovXG5mdW5jdGlvbiB1c2VMb2FkZXJEYXRhKCkge1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VMb2FkZXJEYXRhKTtcbiAgbGV0IHJvdXRlSWQgPSB1c2VDdXJyZW50Um91dGVJZChEYXRhUm91dGVyU3RhdGVIb29rLlVzZUxvYWRlckRhdGEpO1xuICBpZiAoc3RhdGUuZXJyb3JzICYmIHN0YXRlLmVycm9yc1tyb3V0ZUlkXSAhPSBudWxsKSB7XG4gICAgY29uc29sZS5lcnJvcihcIllvdSBjYW5ub3QgYHVzZUxvYWRlckRhdGFgIGluIGFuIGVycm9yRWxlbWVudCAocm91dGVJZDogXCIgKyByb3V0ZUlkICsgXCIpXCIpO1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbiAgcmV0dXJuIHN0YXRlLmxvYWRlckRhdGFbcm91dGVJZF07XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgbG9hZGVyRGF0YSBmb3IgdGhlIGdpdmVuIHJvdXRlSWRcbiAqL1xuZnVuY3Rpb24gdXNlUm91dGVMb2FkZXJEYXRhKHJvdXRlSWQpIHtcbiAgbGV0IHN0YXRlID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlUm91dGVMb2FkZXJEYXRhKTtcbiAgcmV0dXJuIHN0YXRlLmxvYWRlckRhdGFbcm91dGVJZF07XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgYWN0aW9uIGRhdGEgZm9yIHRoZSBuZWFyZXN0IGFuY2VzdG9yIFJvdXRlIGFjdGlvblxuICovXG5mdW5jdGlvbiB1c2VBY3Rpb25EYXRhKCkge1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VBY3Rpb25EYXRhKTtcbiAgbGV0IHJvdXRlSWQgPSB1c2VDdXJyZW50Um91dGVJZChEYXRhUm91dGVyU3RhdGVIb29rLlVzZUxvYWRlckRhdGEpO1xuICByZXR1cm4gc3RhdGUuYWN0aW9uRGF0YSA/IHN0YXRlLmFjdGlvbkRhdGFbcm91dGVJZF0gOiB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgbmVhcmVzdCBhbmNlc3RvciBSb3V0ZSBlcnJvciwgd2hpY2ggY291bGQgYmUgYSBsb2FkZXIvYWN0aW9uXG4gKiBlcnJvciBvciBhIHJlbmRlciBlcnJvci4gIFRoaXMgaXMgaW50ZW5kZWQgdG8gYmUgY2FsbGVkIGZyb20geW91clxuICogRXJyb3JCb3VuZGFyeS9lcnJvckVsZW1lbnQgdG8gZGlzcGxheSBhIHByb3BlciBlcnJvciBtZXNzYWdlLlxuICovXG5mdW5jdGlvbiB1c2VSb3V0ZUVycm9yKCkge1xuICB2YXIgX3N0YXRlJGVycm9ycztcbiAgbGV0IGVycm9yID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUVycm9yQ29udGV4dCk7XG4gIGxldCBzdGF0ZSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZVJvdXRlRXJyb3IpO1xuICBsZXQgcm91dGVJZCA9IHVzZUN1cnJlbnRSb3V0ZUlkKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlUm91dGVFcnJvcik7XG5cbiAgLy8gSWYgdGhpcyB3YXMgYSByZW5kZXIgZXJyb3IsIHdlIHB1dCBpdCBpbiBhIFJvdXRlRXJyb3IgY29udGV4dCBpbnNpZGVcbiAgLy8gb2YgUmVuZGVyRXJyb3JCb3VuZGFyeVxuICBpZiAoZXJyb3IgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBlcnJvcjtcbiAgfVxuXG4gIC8vIE90aGVyd2lzZSBsb29rIGZvciBlcnJvcnMgZnJvbSBvdXIgZGF0YSByb3V0ZXIgc3RhdGVcbiAgcmV0dXJuIChfc3RhdGUkZXJyb3JzID0gc3RhdGUuZXJyb3JzKSA9PSBudWxsID8gdm9pZCAwIDogX3N0YXRlJGVycm9yc1tyb3V0ZUlkXTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBoYXBweS1wYXRoIGRhdGEgZnJvbSB0aGUgbmVhcmVzdCBhbmNlc3RvciBgPEF3YWl0IC8+YCB2YWx1ZVxuICovXG5mdW5jdGlvbiB1c2VBc3luY1ZhbHVlKCkge1xuICBsZXQgdmFsdWUgPSBSZWFjdC51c2VDb250ZXh0KEF3YWl0Q29udGV4dCk7XG4gIHJldHVybiB2YWx1ZSA9PSBudWxsID8gdm9pZCAwIDogdmFsdWUuX2RhdGE7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZXJyb3IgZnJvbSB0aGUgbmVhcmVzdCBhbmNlc3RvciBgPEF3YWl0IC8+YCB2YWx1ZVxuICovXG5mdW5jdGlvbiB1c2VBc3luY0Vycm9yKCkge1xuICBsZXQgdmFsdWUgPSBSZWFjdC51c2VDb250ZXh0KEF3YWl0Q29udGV4dCk7XG4gIHJldHVybiB2YWx1ZSA9PSBudWxsID8gdm9pZCAwIDogdmFsdWUuX2Vycm9yO1xufVxubGV0IGJsb2NrZXJJZCA9IDA7XG5cbi8qKlxuICogQWxsb3cgdGhlIGFwcGxpY2F0aW9uIHRvIGJsb2NrIG5hdmlnYXRpb25zIHdpdGhpbiB0aGUgU1BBIGFuZCBwcmVzZW50IHRoZVxuICogdXNlciBhIGNvbmZpcm1hdGlvbiBkaWFsb2cgdG8gY29uZmlybSB0aGUgbmF2aWdhdGlvbi4gIE1vc3RseSB1c2VkIHRvIGF2b2lkXG4gKiB1c2luZyBoYWxmLWZpbGxlZCBmb3JtIGRhdGEuICBUaGlzIGRvZXMgbm90IGhhbmRsZSBoYXJkLXJlbG9hZHMgb3JcbiAqIGNyb3NzLW9yaWdpbiBuYXZpZ2F0aW9ucy5cbiAqL1xuZnVuY3Rpb24gdXNlQmxvY2tlcihzaG91bGRCbG9jaykge1xuICBsZXQge1xuICAgIHJvdXRlcixcbiAgICBiYXNlbmFtZVxuICB9ID0gdXNlRGF0YVJvdXRlckNvbnRleHQoRGF0YVJvdXRlckhvb2suVXNlQmxvY2tlcik7XG4gIGxldCBzdGF0ZSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZUJsb2NrZXIpO1xuICBsZXQgW2Jsb2NrZXJLZXksIHNldEJsb2NrZXJLZXldID0gUmVhY3QudXNlU3RhdGUoXCJcIik7XG4gIGxldCBibG9ja2VyRnVuY3Rpb24gPSBSZWFjdC51c2VDYWxsYmFjayhhcmcgPT4ge1xuICAgIGlmICh0eXBlb2Ygc2hvdWxkQmxvY2sgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgcmV0dXJuICEhc2hvdWxkQmxvY2s7XG4gICAgfVxuICAgIGlmIChiYXNlbmFtZSA9PT0gXCIvXCIpIHtcbiAgICAgIHJldHVybiBzaG91bGRCbG9jayhhcmcpO1xuICAgIH1cblxuICAgIC8vIElmIHRoZXkgcHJvdmlkZWQgdXMgYSBmdW5jdGlvbiBhbmQgd2UndmUgZ290IGFuIGFjdGl2ZSBiYXNlbmFtZSwgc3RyaXBcbiAgICAvLyBpdCBmcm9tIHRoZSBsb2NhdGlvbnMgd2UgZXhwb3NlIHRvIHRoZSB1c2VyIHRvIG1hdGNoIHRoZSBiZWhhdmlvciBvZlxuICAgIC8vIHVzZUxvY2F0aW9uXG4gICAgbGV0IHtcbiAgICAgIGN1cnJlbnRMb2NhdGlvbixcbiAgICAgIG5leHRMb2NhdGlvbixcbiAgICAgIGhpc3RvcnlBY3Rpb25cbiAgICB9ID0gYXJnO1xuICAgIHJldHVybiBzaG91bGRCbG9jayh7XG4gICAgICBjdXJyZW50TG9jYXRpb246IF9leHRlbmRzKHt9LCBjdXJyZW50TG9jYXRpb24sIHtcbiAgICAgICAgcGF0aG5hbWU6IHN0cmlwQmFzZW5hbWUoY3VycmVudExvY2F0aW9uLnBhdGhuYW1lLCBiYXNlbmFtZSkgfHwgY3VycmVudExvY2F0aW9uLnBhdGhuYW1lXG4gICAgICB9KSxcbiAgICAgIG5leHRMb2NhdGlvbjogX2V4dGVuZHMoe30sIG5leHRMb2NhdGlvbiwge1xuICAgICAgICBwYXRobmFtZTogc3RyaXBCYXNlbmFtZShuZXh0TG9jYXRpb24ucGF0aG5hbWUsIGJhc2VuYW1lKSB8fCBuZXh0TG9jYXRpb24ucGF0aG5hbWVcbiAgICAgIH0pLFxuICAgICAgaGlzdG9yeUFjdGlvblxuICAgIH0pO1xuICB9LCBbYmFzZW5hbWUsIHNob3VsZEJsb2NrXSk7XG5cbiAgLy8gVGhpcyBlZmZlY3QgaXMgaW4gY2hhcmdlIG9mIGJsb2NrZXIga2V5IGFzc2lnbm1lbnQgYW5kIGRlbGV0aW9uICh3aGljaCBpc1xuICAvLyB0aWdodGx5IGNvdXBsZWQgdG8gdGhlIGtleSlcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBsZXQga2V5ID0gU3RyaW5nKCsrYmxvY2tlcklkKTtcbiAgICBzZXRCbG9ja2VyS2V5KGtleSk7XG4gICAgcmV0dXJuICgpID0+IHJvdXRlci5kZWxldGVCbG9ja2VyKGtleSk7XG4gIH0sIFtyb3V0ZXJdKTtcblxuICAvLyBUaGlzIGVmZmVjdCBoYW5kbGVzIGFzc2lnbmluZyB0aGUgYmxvY2tlckZ1bmN0aW9uLiAgVGhpcyBpcyB0byBoYW5kbGVcbiAgLy8gdW5zdGFibGUgYmxvY2tlciBmdW5jdGlvbiBpZGVudGl0aWVzLCBhbmQgaGFwcGVucyBvbmx5IGFmdGVyIHRoZSBwcmlvclxuICAvLyBlZmZlY3Qgc28gd2UgZG9uJ3QgZ2V0IGFuIG9ycGhhbmVkIGJsb2NrZXJGdW5jdGlvbiBpbiB0aGUgcm91dGVyIHdpdGggYVxuICAvLyBrZXkgb2YgXCJcIi4gIFVudGlsIHRoZW4gd2UganVzdCBoYXZlIHRoZSBJRExFX0JMT0NLRVIuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGJsb2NrZXJLZXkgIT09IFwiXCIpIHtcbiAgICAgIHJvdXRlci5nZXRCbG9ja2VyKGJsb2NrZXJLZXksIGJsb2NrZXJGdW5jdGlvbik7XG4gICAgfVxuICB9LCBbcm91dGVyLCBibG9ja2VyS2V5LCBibG9ja2VyRnVuY3Rpb25dKTtcblxuICAvLyBQcmVmZXIgdGhlIGJsb2NrZXIgZnJvbSBgc3RhdGVgIG5vdCBgcm91dGVyLnN0YXRlYCBzaW5jZSBEYXRhUm91dGVyQ29udGV4dFxuICAvLyBpcyBtZW1vaXplZCBzbyB0aGlzIGVuc3VyZXMgd2UgdXBkYXRlIG9uIGJsb2NrZXIgc3RhdGUgdXBkYXRlc1xuICByZXR1cm4gYmxvY2tlcktleSAmJiBzdGF0ZS5ibG9ja2Vycy5oYXMoYmxvY2tlcktleSkgPyBzdGF0ZS5ibG9ja2Vycy5nZXQoYmxvY2tlcktleSkgOiBJRExFX0JMT0NLRVI7XG59XG5cbi8qKlxuICogU3RhYmxlIHZlcnNpb24gb2YgdXNlTmF2aWdhdGUgdGhhdCBpcyB1c2VkIHdoZW4gd2UgYXJlIGluIHRoZSBjb250ZXh0IG9mXG4gKiBhIFJvdXRlclByb3ZpZGVyLlxuICovXG5mdW5jdGlvbiB1c2VOYXZpZ2F0ZVN0YWJsZSgpIHtcbiAgbGV0IHtcbiAgICByb3V0ZXJcbiAgfSA9IHVzZURhdGFSb3V0ZXJDb250ZXh0KERhdGFSb3V0ZXJIb29rLlVzZU5hdmlnYXRlU3RhYmxlKTtcbiAgbGV0IGlkID0gdXNlQ3VycmVudFJvdXRlSWQoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VOYXZpZ2F0ZVN0YWJsZSk7XG4gIGxldCBhY3RpdmVSZWYgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICBhY3RpdmVSZWYuY3VycmVudCA9IHRydWU7XG4gIH0pO1xuICBsZXQgbmF2aWdhdGUgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAodG8sIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKGFjdGl2ZVJlZi5jdXJyZW50LCBuYXZpZ2F0ZUVmZmVjdFdhcm5pbmcpIDogdm9pZCAwO1xuXG4gICAgLy8gU2hvcnQgY2lyY3VpdCBoZXJlIHNpbmNlIGlmIHRoaXMgaGFwcGVucyBvbiBmaXJzdCByZW5kZXIgdGhlIG5hdmlnYXRlXG4gICAgLy8gaXMgdXNlbGVzcyBiZWNhdXNlIHdlIGhhdmVuJ3Qgd2lyZWQgdXAgb3VyIHJvdXRlciBzdWJzY3JpYmVyIHlldFxuICAgIGlmICghYWN0aXZlUmVmLmN1cnJlbnQpIHJldHVybjtcbiAgICBpZiAodHlwZW9mIHRvID09PSBcIm51bWJlclwiKSB7XG4gICAgICByb3V0ZXIubmF2aWdhdGUodG8pO1xuICAgIH0gZWxzZSB7XG4gICAgICByb3V0ZXIubmF2aWdhdGUodG8sIF9leHRlbmRzKHtcbiAgICAgICAgZnJvbVJvdXRlSWQ6IGlkXG4gICAgICB9LCBvcHRpb25zKSk7XG4gICAgfVxuICB9LCBbcm91dGVyLCBpZF0pO1xuICByZXR1cm4gbmF2aWdhdGU7XG59XG5jb25zdCBhbHJlYWR5V2FybmVkID0ge307XG5mdW5jdGlvbiB3YXJuaW5nT25jZShrZXksIGNvbmQsIG1lc3NhZ2UpIHtcbiAgaWYgKCFjb25kICYmICFhbHJlYWR5V2FybmVkW2tleV0pIHtcbiAgICBhbHJlYWR5V2FybmVkW2tleV0gPSB0cnVlO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKGZhbHNlLCBtZXNzYWdlKSA6IHZvaWQgMDtcbiAgfVxufVxuXG4vKipcbiAgV2VicGFjayArIFJlYWN0IDE3IGZhaWxzIHRvIGNvbXBpbGUgb24gYW55IG9mIHRoZSBmb2xsb3dpbmcgYmVjYXVzZSB3ZWJwYWNrXG4gIGNvbXBsYWlucyB0aGF0IGBzdGFydFRyYW5zaXRpb25gIGRvZXNuJ3QgZXhpc3QgaW4gYFJlYWN0YDpcbiAgKiBpbXBvcnQgeyBzdGFydFRyYW5zaXRpb24gfSBmcm9tIFwicmVhY3RcIlxuICAqIGltcG9ydCAqIGFzIFJlYWN0IGZyb20gZnJvbSBcInJlYWN0XCI7XG4gICAgXCJzdGFydFRyYW5zaXRpb25cIiBpbiBSZWFjdCA/IFJlYWN0LnN0YXJ0VHJhbnNpdGlvbigoKSA9PiBzZXRTdGF0ZSgpKSA6IHNldFN0YXRlKClcbiAgKiBpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIGZyb20gXCJyZWFjdFwiO1xuICAgIFwic3RhcnRUcmFuc2l0aW9uXCIgaW4gUmVhY3QgPyBSZWFjdFtcInN0YXJ0VHJhbnNpdGlvblwiXSgoKSA9PiBzZXRTdGF0ZSgpKSA6IHNldFN0YXRlKClcblxuICBNb3ZpbmcgaXQgdG8gYSBjb25zdGFudCBzdWNoIGFzIHRoZSBmb2xsb3dpbmcgc29sdmVzIHRoZSBXZWJwYWNrL1JlYWN0IDE3IGlzc3VlOlxuICAqIGltcG9ydCAqIGFzIFJlYWN0IGZyb20gZnJvbSBcInJlYWN0XCI7XG4gICAgY29uc3QgU1RBUlRfVFJBTlNJVElPTiA9IFwic3RhcnRUcmFuc2l0aW9uXCI7XG4gICAgU1RBUlRfVFJBTlNJVElPTiBpbiBSZWFjdCA/IFJlYWN0W1NUQVJUX1RSQU5TSVRJT05dKCgpID0+IHNldFN0YXRlKCkpIDogc2V0U3RhdGUoKVxuXG4gIEhvd2V2ZXIsIHRoYXQgaW50cm9kdWNlcyB3ZWJwYWNrL3RlcnNlciBtaW5pZmljYXRpb24gaXNzdWVzIGluIHByb2R1Y3Rpb24gYnVpbGRzXG4gIGluIFJlYWN0IDE4IHdoZXJlIG1pbmlmaWNhdGlvbi9vYmZ1c2NhdGlvbiBlbmRzIHVwIHJlbW92aW5nIHRoZSBjYWxsIG9mXG4gIFJlYWN0LnN0YXJ0VHJhbnNpdGlvbiBlbnRpcmVseSBmcm9tIHRoZSBmaXJzdCBoYWxmIG9mIHRoZSB0ZXJuYXJ5LiAgR3JhYmJpbmdcbiAgdGhpcyBleHBvcnRlZCByZWZlcmVuY2Ugb25jZSB1cCBmcm9udCByZXNvbHZlcyB0aGF0IGlzc3VlLlxuXG4gIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcmVtaXgtcnVuL3JlYWN0LXJvdXRlci9pc3N1ZXMvMTA1NzlcbiovXG5jb25zdCBTVEFSVF9UUkFOU0lUSU9OID0gXCJzdGFydFRyYW5zaXRpb25cIjtcbmNvbnN0IHN0YXJ0VHJhbnNpdGlvbkltcGwgPSBSZWFjdFtTVEFSVF9UUkFOU0lUSU9OXTtcblxuLyoqXG4gKiBHaXZlbiBhIFJlbWl4IFJvdXRlciBpbnN0YW5jZSwgcmVuZGVyIHRoZSBhcHByb3ByaWF0ZSBVSVxuICovXG5mdW5jdGlvbiBSb3V0ZXJQcm92aWRlcihfcmVmKSB7XG4gIGxldCB7XG4gICAgZmFsbGJhY2tFbGVtZW50LFxuICAgIHJvdXRlcixcbiAgICBmdXR1cmVcbiAgfSA9IF9yZWY7XG4gIGxldCBbc3RhdGUsIHNldFN0YXRlSW1wbF0gPSBSZWFjdC51c2VTdGF0ZShyb3V0ZXIuc3RhdGUpO1xuICBsZXQge1xuICAgIHY3X3N0YXJ0VHJhbnNpdGlvblxuICB9ID0gZnV0dXJlIHx8IHt9O1xuICBsZXQgc2V0U3RhdGUgPSBSZWFjdC51c2VDYWxsYmFjayhuZXdTdGF0ZSA9PiB7XG4gICAgaWYgKHY3X3N0YXJ0VHJhbnNpdGlvbiAmJiBzdGFydFRyYW5zaXRpb25JbXBsKSB7XG4gICAgICBzdGFydFRyYW5zaXRpb25JbXBsKCgpID0+IHNldFN0YXRlSW1wbChuZXdTdGF0ZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXRTdGF0ZUltcGwobmV3U3RhdGUpO1xuICAgIH1cbiAgfSwgW3NldFN0YXRlSW1wbCwgdjdfc3RhcnRUcmFuc2l0aW9uXSk7XG5cbiAgLy8gTmVlZCB0byB1c2UgYSBsYXlvdXQgZWZmZWN0IGhlcmUgc28gd2UgYXJlIHN1YnNjcmliZWQgZWFybHkgZW5vdWdoIHRvXG4gIC8vIHBpY2sgdXAgb24gYW55IHJlbmRlci1kcml2ZW4gcmVkaXJlY3RzL25hdmlnYXRpb25zICh1c2VFZmZlY3QvPE5hdmlnYXRlPilcbiAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KCgpID0+IHJvdXRlci5zdWJzY3JpYmUoc2V0U3RhdGUpLCBbcm91dGVyLCBzZXRTdGF0ZV0pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKGZhbGxiYWNrRWxlbWVudCA9PSBudWxsIHx8ICFyb3V0ZXIuZnV0dXJlLnY3X3BhcnRpYWxIeWRyYXRpb24sIFwiYDxSb3V0ZXJQcm92aWRlciBmYWxsYmFja0VsZW1lbnQ+YCBpcyBkZXByZWNhdGVkIHdoZW4gdXNpbmcgXCIgKyBcImB2N19wYXJ0aWFsSHlkcmF0aW9uYCwgdXNlIGEgYEh5ZHJhdGVGYWxsYmFja2AgY29tcG9uZW50IGluc3RlYWRcIikgOiB2b2lkIDA7XG4gICAgLy8gT25seSBsb2cgdGhpcyBvbmNlIG9uIGluaXRpYWwgbW91bnRcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIH0sIFtdKTtcbiAgbGV0IG5hdmlnYXRvciA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBjcmVhdGVIcmVmOiByb3V0ZXIuY3JlYXRlSHJlZixcbiAgICAgIGVuY29kZUxvY2F0aW9uOiByb3V0ZXIuZW5jb2RlTG9jYXRpb24sXG4gICAgICBnbzogbiA9PiByb3V0ZXIubmF2aWdhdGUobiksXG4gICAgICBwdXNoOiAodG8sIHN0YXRlLCBvcHRzKSA9PiByb3V0ZXIubmF2aWdhdGUodG8sIHtcbiAgICAgICAgc3RhdGUsXG4gICAgICAgIHByZXZlbnRTY3JvbGxSZXNldDogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5wcmV2ZW50U2Nyb2xsUmVzZXRcbiAgICAgIH0pLFxuICAgICAgcmVwbGFjZTogKHRvLCBzdGF0ZSwgb3B0cykgPT4gcm91dGVyLm5hdmlnYXRlKHRvLCB7XG4gICAgICAgIHJlcGxhY2U6IHRydWUsXG4gICAgICAgIHN0YXRlLFxuICAgICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQ6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMucHJldmVudFNjcm9sbFJlc2V0XG4gICAgICB9KVxuICAgIH07XG4gIH0sIFtyb3V0ZXJdKTtcbiAgbGV0IGJhc2VuYW1lID0gcm91dGVyLmJhc2VuYW1lIHx8IFwiL1wiO1xuICBsZXQgZGF0YVJvdXRlckNvbnRleHQgPSBSZWFjdC51c2VNZW1vKCgpID0+ICh7XG4gICAgcm91dGVyLFxuICAgIG5hdmlnYXRvcixcbiAgICBzdGF0aWM6IGZhbHNlLFxuICAgIGJhc2VuYW1lXG4gIH0pLCBbcm91dGVyLCBuYXZpZ2F0b3IsIGJhc2VuYW1lXSk7XG5cbiAgLy8gVGhlIGZyYWdtZW50IGFuZCB7bnVsbH0gaGVyZSBhcmUgaW1wb3J0YW50ISAgV2UgbmVlZCB0aGVtIHRvIGtlZXAgUmVhY3QgMTgnc1xuICAvLyB1c2VJZCBoYXBweSB3aGVuIHdlIGFyZSBzZXJ2ZXItcmVuZGVyaW5nIHNpbmNlIHdlIG1heSBoYXZlIGEgPHNjcmlwdD4gaGVyZVxuICAvLyBjb250YWluaW5nIHRoZSBoeWRyYXRlZCBzZXJ2ZXItc2lkZSBzdGF0aWNDb250ZXh0IChmcm9tIFN0YXRpY1JvdXRlclByb3ZpZGVyKS5cbiAgLy8gdXNlSWQgcmVsaWVzIG9uIHRoZSBjb21wb25lbnQgdHJlZSBzdHJ1Y3R1cmUgdG8gZ2VuZXJhdGUgZGV0ZXJtaW5pc3RpYyBpZCdzXG4gIC8vIHNvIHdlIG5lZWQgdG8gZW5zdXJlIGl0IHJlbWFpbnMgdGhlIHNhbWUgb24gdGhlIGNsaWVudCBldmVuIHRob3VnaFxuICAvLyB3ZSBkb24ndCBuZWVkIHRoZSA8c2NyaXB0PiB0YWdcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChEYXRhUm91dGVyQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBkYXRhUm91dGVyQ29udGV4dFxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChEYXRhUm91dGVyU3RhdGVDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHN0YXRlXG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgIGJhc2VuYW1lOiBiYXNlbmFtZSxcbiAgICBsb2NhdGlvbjogc3RhdGUubG9jYXRpb24sXG4gICAgbmF2aWdhdGlvblR5cGU6IHN0YXRlLmhpc3RvcnlBY3Rpb24sXG4gICAgbmF2aWdhdG9yOiBuYXZpZ2F0b3IsXG4gICAgZnV0dXJlOiB7XG4gICAgICB2N19yZWxhdGl2ZVNwbGF0UGF0aDogcm91dGVyLmZ1dHVyZS52N19yZWxhdGl2ZVNwbGF0UGF0aFxuICAgIH1cbiAgfSwgc3RhdGUuaW5pdGlhbGl6ZWQgfHwgcm91dGVyLmZ1dHVyZS52N19wYXJ0aWFsSHlkcmF0aW9uID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRGF0YVJvdXRlcywge1xuICAgIHJvdXRlczogcm91dGVyLnJvdXRlcyxcbiAgICBmdXR1cmU6IHJvdXRlci5mdXR1cmUsXG4gICAgc3RhdGU6IHN0YXRlXG4gIH0pIDogZmFsbGJhY2tFbGVtZW50KSkpLCBudWxsKTtcbn1cbmZ1bmN0aW9uIERhdGFSb3V0ZXMoX3JlZjIpIHtcbiAgbGV0IHtcbiAgICByb3V0ZXMsXG4gICAgZnV0dXJlLFxuICAgIHN0YXRlXG4gIH0gPSBfcmVmMjtcbiAgcmV0dXJuIHVzZVJvdXRlc0ltcGwocm91dGVzLCB1bmRlZmluZWQsIHN0YXRlLCBmdXR1cmUpO1xufVxuLyoqXG4gKiBBIGA8Um91dGVyPmAgdGhhdCBzdG9yZXMgYWxsIGVudHJpZXMgaW4gbWVtb3J5LlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vcm91dGVyLWNvbXBvbmVudHMvbWVtb3J5LXJvdXRlclxuICovXG5mdW5jdGlvbiBNZW1vcnlSb3V0ZXIoX3JlZjMpIHtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZSxcbiAgICBjaGlsZHJlbixcbiAgICBpbml0aWFsRW50cmllcyxcbiAgICBpbml0aWFsSW5kZXgsXG4gICAgZnV0dXJlXG4gIH0gPSBfcmVmMztcbiAgbGV0IGhpc3RvcnlSZWYgPSBSZWFjdC51c2VSZWYoKTtcbiAgaWYgKGhpc3RvcnlSZWYuY3VycmVudCA9PSBudWxsKSB7XG4gICAgaGlzdG9yeVJlZi5jdXJyZW50ID0gY3JlYXRlTWVtb3J5SGlzdG9yeSh7XG4gICAgICBpbml0aWFsRW50cmllcyxcbiAgICAgIGluaXRpYWxJbmRleCxcbiAgICAgIHY1Q29tcGF0OiB0cnVlXG4gICAgfSk7XG4gIH1cbiAgbGV0IGhpc3RvcnkgPSBoaXN0b3J5UmVmLmN1cnJlbnQ7XG4gIGxldCBbc3RhdGUsIHNldFN0YXRlSW1wbF0gPSBSZWFjdC51c2VTdGF0ZSh7XG4gICAgYWN0aW9uOiBoaXN0b3J5LmFjdGlvbixcbiAgICBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvblxuICB9KTtcbiAgbGV0IHtcbiAgICB2N19zdGFydFRyYW5zaXRpb25cbiAgfSA9IGZ1dHVyZSB8fCB7fTtcbiAgbGV0IHNldFN0YXRlID0gUmVhY3QudXNlQ2FsbGJhY2sobmV3U3RhdGUgPT4ge1xuICAgIHY3X3N0YXJ0VHJhbnNpdGlvbiAmJiBzdGFydFRyYW5zaXRpb25JbXBsID8gc3RhcnRUcmFuc2l0aW9uSW1wbCgoKSA9PiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpKSA6IHNldFN0YXRlSW1wbChuZXdTdGF0ZSk7XG4gIH0sIFtzZXRTdGF0ZUltcGwsIHY3X3N0YXJ0VHJhbnNpdGlvbl0pO1xuICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4gaGlzdG9yeS5saXN0ZW4oc2V0U3RhdGUpLCBbaGlzdG9yeSwgc2V0U3RhdGVdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgIGJhc2VuYW1lOiBiYXNlbmFtZSxcbiAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgbG9jYXRpb246IHN0YXRlLmxvY2F0aW9uLFxuICAgIG5hdmlnYXRpb25UeXBlOiBzdGF0ZS5hY3Rpb24sXG4gICAgbmF2aWdhdG9yOiBoaXN0b3J5LFxuICAgIGZ1dHVyZTogZnV0dXJlXG4gIH0pO1xufVxuLyoqXG4gKiBDaGFuZ2VzIHRoZSBjdXJyZW50IGxvY2F0aW9uLlxuICpcbiAqIE5vdGU6IFRoaXMgQVBJIGlzIG1vc3RseSB1c2VmdWwgaW4gUmVhY3QuQ29tcG9uZW50IHN1YmNsYXNzZXMgdGhhdCBhcmUgbm90XG4gKiBhYmxlIHRvIHVzZSBob29rcy4gSW4gZnVuY3Rpb25hbCBjb21wb25lbnRzLCB3ZSByZWNvbW1lbmQgeW91IHVzZSB0aGVcbiAqIGB1c2VOYXZpZ2F0ZWAgaG9vayBpbnN0ZWFkLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vY29tcG9uZW50cy9uYXZpZ2F0ZVxuICovXG5mdW5jdGlvbiBOYXZpZ2F0ZShfcmVmNCkge1xuICBsZXQge1xuICAgIHRvLFxuICAgIHJlcGxhY2UsXG4gICAgc3RhdGUsXG4gICAgcmVsYXRpdmVcbiAgfSA9IF9yZWY0O1xuICAhdXNlSW5Sb3V0ZXJDb250ZXh0KCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZlxuICAvLyB0aGUgcm91dGVyIGxvYWRlZC4gV2UgY2FuIGhlbHAgdGhlbSB1bmRlcnN0YW5kIGhvdyB0byBhdm9pZCB0aGF0LlxuICBcIjxOYXZpZ2F0ZT4gbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5cIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgbGV0IHtcbiAgICBmdXR1cmUsXG4gICAgc3RhdGljOiBpc1N0YXRpY1xuICB9ID0gUmVhY3QudXNlQ29udGV4dChOYXZpZ2F0aW9uQ29udGV4dCk7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKCFpc1N0YXRpYywgXCI8TmF2aWdhdGU+IG11c3Qgbm90IGJlIHVzZWQgb24gdGhlIGluaXRpYWwgcmVuZGVyIGluIGEgPFN0YXRpY1JvdXRlcj4uIFwiICsgXCJUaGlzIGlzIGEgbm8tb3AsIGJ1dCB5b3Ugc2hvdWxkIG1vZGlmeSB5b3VyIGNvZGUgc28gdGhlIDxOYXZpZ2F0ZT4gaXMgXCIgKyBcIm9ubHkgZXZlciByZW5kZXJlZCBpbiByZXNwb25zZSB0byBzb21lIHVzZXIgaW50ZXJhY3Rpb24gb3Igc3RhdGUgY2hhbmdlLlwiKSA6IHZvaWQgMDtcbiAgbGV0IHtcbiAgICBtYXRjaGVzXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlQ29udGV4dCk7XG4gIGxldCB7XG4gICAgcGF0aG5hbWU6IGxvY2F0aW9uUGF0aG5hbWVcbiAgfSA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCBuYXZpZ2F0ZSA9IHVzZU5hdmlnYXRlKCk7XG5cbiAgLy8gUmVzb2x2ZSB0aGUgcGF0aCBvdXRzaWRlIG9mIHRoZSBlZmZlY3Qgc28gdGhhdCB3aGVuIGVmZmVjdHMgcnVuIHR3aWNlIGluXG4gIC8vIFN0cmljdE1vZGUgdGhleSBuYXZpZ2F0ZSB0byB0aGUgc2FtZSBwbGFjZVxuICBsZXQgcGF0aCA9IHJlc29sdmVUbyh0bywgVU5TQUZFX2dldFJlc29sdmVUb01hdGNoZXMobWF0Y2hlcywgZnV0dXJlLnY3X3JlbGF0aXZlU3BsYXRQYXRoKSwgbG9jYXRpb25QYXRobmFtZSwgcmVsYXRpdmUgPT09IFwicGF0aFwiKTtcbiAgbGV0IGpzb25QYXRoID0gSlNPTi5zdHJpbmdpZnkocGF0aCk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiBuYXZpZ2F0ZShKU09OLnBhcnNlKGpzb25QYXRoKSwge1xuICAgIHJlcGxhY2UsXG4gICAgc3RhdGUsXG4gICAgcmVsYXRpdmVcbiAgfSksIFtuYXZpZ2F0ZSwganNvblBhdGgsIHJlbGF0aXZlLCByZXBsYWNlLCBzdGF0ZV0pO1xuICByZXR1cm4gbnVsbDtcbn1cbi8qKlxuICogUmVuZGVycyB0aGUgY2hpbGQgcm91dGUncyBlbGVtZW50LCBpZiB0aGVyZSBpcyBvbmUuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9jb21wb25lbnRzL291dGxldFxuICovXG5mdW5jdGlvbiBPdXRsZXQocHJvcHMpIHtcbiAgcmV0dXJuIHVzZU91dGxldChwcm9wcy5jb250ZXh0KTtcbn1cbi8qKlxuICogRGVjbGFyZXMgYW4gZWxlbWVudCB0aGF0IHNob3VsZCBiZSByZW5kZXJlZCBhdCBhIGNlcnRhaW4gVVJMIHBhdGguXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9jb21wb25lbnRzL3JvdXRlXG4gKi9cbmZ1bmN0aW9uIFJvdXRlKF9wcm9wcykge1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcIkEgPFJvdXRlPiBpcyBvbmx5IGV2ZXIgdG8gYmUgdXNlZCBhcyB0aGUgY2hpbGQgb2YgPFJvdXRlcz4gZWxlbWVudCwgXCIgKyBcIm5ldmVyIHJlbmRlcmVkIGRpcmVjdGx5LiBQbGVhc2Ugd3JhcCB5b3VyIDxSb3V0ZT4gaW4gYSA8Um91dGVzPi5cIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA7XG59XG4vKipcbiAqIFByb3ZpZGVzIGxvY2F0aW9uIGNvbnRleHQgZm9yIHRoZSByZXN0IG9mIHRoZSBhcHAuXG4gKlxuICogTm90ZTogWW91IHVzdWFsbHkgd29uJ3QgcmVuZGVyIGEgYDxSb3V0ZXI+YCBkaXJlY3RseS4gSW5zdGVhZCwgeW91J2xsIHJlbmRlciBhXG4gKiByb3V0ZXIgdGhhdCBpcyBtb3JlIHNwZWNpZmljIHRvIHlvdXIgZW52aXJvbm1lbnQgc3VjaCBhcyBhIGA8QnJvd3NlclJvdXRlcj5gXG4gKiBpbiB3ZWIgYnJvd3NlcnMgb3IgYSBgPFN0YXRpY1JvdXRlcj5gIGZvciBzZXJ2ZXIgcmVuZGVyaW5nLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vcm91dGVyLWNvbXBvbmVudHMvcm91dGVyXG4gKi9cbmZ1bmN0aW9uIFJvdXRlcihfcmVmNSkge1xuICBsZXQge1xuICAgIGJhc2VuYW1lOiBiYXNlbmFtZVByb3AgPSBcIi9cIixcbiAgICBjaGlsZHJlbiA9IG51bGwsXG4gICAgbG9jYXRpb246IGxvY2F0aW9uUHJvcCxcbiAgICBuYXZpZ2F0aW9uVHlwZSA9IEFjdGlvbi5Qb3AsXG4gICAgbmF2aWdhdG9yLFxuICAgIHN0YXRpYzogc3RhdGljUHJvcCA9IGZhbHNlLFxuICAgIGZ1dHVyZVxuICB9ID0gX3JlZjU7XG4gICEhdXNlSW5Sb3V0ZXJDb250ZXh0KCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcIllvdSBjYW5ub3QgcmVuZGVyIGEgPFJvdXRlcj4gaW5zaWRlIGFub3RoZXIgPFJvdXRlcj4uXCIgKyBcIiBZb3Ugc2hvdWxkIG5ldmVyIGhhdmUgbW9yZSB0aGFuIG9uZSBpbiB5b3VyIGFwcC5cIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICAvLyBQcmVzZXJ2ZSB0cmFpbGluZyBzbGFzaGVzIG9uIGJhc2VuYW1lLCBzbyB3ZSBjYW4gbGV0IHRoZSB1c2VyIGNvbnRyb2xcbiAgLy8gdGhlIGVuZm9yY2VtZW50IG9mIHRyYWlsaW5nIHNsYXNoZXMgdGhyb3VnaG91dCB0aGUgYXBwXG4gIGxldCBiYXNlbmFtZSA9IGJhc2VuYW1lUHJvcC5yZXBsYWNlKC9eXFwvKi8sIFwiL1wiKTtcbiAgbGV0IG5hdmlnYXRpb25Db250ZXh0ID0gUmVhY3QudXNlTWVtbygoKSA9PiAoe1xuICAgIGJhc2VuYW1lLFxuICAgIG5hdmlnYXRvcixcbiAgICBzdGF0aWM6IHN0YXRpY1Byb3AsXG4gICAgZnV0dXJlOiBfZXh0ZW5kcyh7XG4gICAgICB2N19yZWxhdGl2ZVNwbGF0UGF0aDogZmFsc2VcbiAgICB9LCBmdXR1cmUpXG4gIH0pLCBbYmFzZW5hbWUsIGZ1dHVyZSwgbmF2aWdhdG9yLCBzdGF0aWNQcm9wXSk7XG4gIGlmICh0eXBlb2YgbG9jYXRpb25Qcm9wID09PSBcInN0cmluZ1wiKSB7XG4gICAgbG9jYXRpb25Qcm9wID0gcGFyc2VQYXRoKGxvY2F0aW9uUHJvcCk7XG4gIH1cbiAgbGV0IHtcbiAgICBwYXRobmFtZSA9IFwiL1wiLFxuICAgIHNlYXJjaCA9IFwiXCIsXG4gICAgaGFzaCA9IFwiXCIsXG4gICAgc3RhdGUgPSBudWxsLFxuICAgIGtleSA9IFwiZGVmYXVsdFwiXG4gIH0gPSBsb2NhdGlvblByb3A7XG4gIGxldCBsb2NhdGlvbkNvbnRleHQgPSBSZWFjdC51c2VNZW1vKCgpID0+IHtcbiAgICBsZXQgdHJhaWxpbmdQYXRobmFtZSA9IHN0cmlwQmFzZW5hbWUocGF0aG5hbWUsIGJhc2VuYW1lKTtcbiAgICBpZiAodHJhaWxpbmdQYXRobmFtZSA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIGxvY2F0aW9uOiB7XG4gICAgICAgIHBhdGhuYW1lOiB0cmFpbGluZ1BhdGhuYW1lLFxuICAgICAgICBzZWFyY2gsXG4gICAgICAgIGhhc2gsXG4gICAgICAgIHN0YXRlLFxuICAgICAgICBrZXlcbiAgICAgIH0sXG4gICAgICBuYXZpZ2F0aW9uVHlwZVxuICAgIH07XG4gIH0sIFtiYXNlbmFtZSwgcGF0aG5hbWUsIHNlYXJjaCwgaGFzaCwgc3RhdGUsIGtleSwgbmF2aWdhdGlvblR5cGVdKTtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX3dhcm5pbmcobG9jYXRpb25Db250ZXh0ICE9IG51bGwsIFwiPFJvdXRlciBiYXNlbmFtZT1cXFwiXCIgKyBiYXNlbmFtZSArIFwiXFxcIj4gaXMgbm90IGFibGUgdG8gbWF0Y2ggdGhlIFVSTCBcIiArIChcIlxcXCJcIiArIHBhdGhuYW1lICsgc2VhcmNoICsgaGFzaCArIFwiXFxcIiBiZWNhdXNlIGl0IGRvZXMgbm90IHN0YXJ0IHdpdGggdGhlIFwiKSArIFwiYmFzZW5hbWUsIHNvIHRoZSA8Um91dGVyPiB3b24ndCByZW5kZXIgYW55dGhpbmcuXCIpIDogdm9pZCAwO1xuICBpZiAobG9jYXRpb25Db250ZXh0ID09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTmF2aWdhdGlvbkNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogbmF2aWdhdGlvbkNvbnRleHRcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTG9jYXRpb25Db250ZXh0LlByb3ZpZGVyLCB7XG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIHZhbHVlOiBsb2NhdGlvbkNvbnRleHRcbiAgfSkpO1xufVxuLyoqXG4gKiBBIGNvbnRhaW5lciBmb3IgYSBuZXN0ZWQgdHJlZSBvZiBgPFJvdXRlPmAgZWxlbWVudHMgdGhhdCByZW5kZXJzIHRoZSBicmFuY2hcbiAqIHRoYXQgYmVzdCBtYXRjaGVzIHRoZSBjdXJyZW50IGxvY2F0aW9uLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vY29tcG9uZW50cy9yb3V0ZXNcbiAqL1xuZnVuY3Rpb24gUm91dGVzKF9yZWY2KSB7XG4gIGxldCB7XG4gICAgY2hpbGRyZW4sXG4gICAgbG9jYXRpb25cbiAgfSA9IF9yZWY2O1xuICByZXR1cm4gdXNlUm91dGVzKGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbihjaGlsZHJlbiksIGxvY2F0aW9uKTtcbn1cbi8qKlxuICogQ29tcG9uZW50IHRvIHVzZSBmb3IgcmVuZGVyaW5nIGxhemlseSBsb2FkZWQgZGF0YSBmcm9tIHJldHVybmluZyBkZWZlcigpXG4gKiBpbiBhIGxvYWRlciBmdW5jdGlvblxuICovXG5mdW5jdGlvbiBBd2FpdChfcmVmNykge1xuICBsZXQge1xuICAgIGNoaWxkcmVuLFxuICAgIGVycm9yRWxlbWVudCxcbiAgICByZXNvbHZlXG4gIH0gPSBfcmVmNztcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEF3YWl0RXJyb3JCb3VuZGFyeSwge1xuICAgIHJlc29sdmU6IHJlc29sdmUsXG4gICAgZXJyb3JFbGVtZW50OiBlcnJvckVsZW1lbnRcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVzb2x2ZUF3YWl0LCBudWxsLCBjaGlsZHJlbikpO1xufVxudmFyIEF3YWl0UmVuZGVyU3RhdHVzID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChBd2FpdFJlbmRlclN0YXR1cykge1xuICBBd2FpdFJlbmRlclN0YXR1c1tBd2FpdFJlbmRlclN0YXR1c1tcInBlbmRpbmdcIl0gPSAwXSA9IFwicGVuZGluZ1wiO1xuICBBd2FpdFJlbmRlclN0YXR1c1tBd2FpdFJlbmRlclN0YXR1c1tcInN1Y2Nlc3NcIl0gPSAxXSA9IFwic3VjY2Vzc1wiO1xuICBBd2FpdFJlbmRlclN0YXR1c1tBd2FpdFJlbmRlclN0YXR1c1tcImVycm9yXCJdID0gMl0gPSBcImVycm9yXCI7XG4gIHJldHVybiBBd2FpdFJlbmRlclN0YXR1cztcbn0oQXdhaXRSZW5kZXJTdGF0dXMgfHwge30pO1xuY29uc3QgbmV2ZXJTZXR0bGVkUHJvbWlzZSA9IG5ldyBQcm9taXNlKCgpID0+IHt9KTtcbmNsYXNzIEF3YWl0RXJyb3JCb3VuZGFyeSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBlcnJvcjogbnVsbFxuICAgIH07XG4gIH1cbiAgc3RhdGljIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcihlcnJvcikge1xuICAgIHJldHVybiB7XG4gICAgICBlcnJvclxuICAgIH07XG4gIH1cbiAgY29tcG9uZW50RGlkQ2F0Y2goZXJyb3IsIGVycm9ySW5mbykge1xuICAgIGNvbnNvbGUuZXJyb3IoXCI8QXdhaXQ+IGNhdWdodCB0aGUgZm9sbG93aW5nIGVycm9yIGR1cmluZyByZW5kZXJcIiwgZXJyb3IsIGVycm9ySW5mbyk7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIGxldCB7XG4gICAgICBjaGlsZHJlbixcbiAgICAgIGVycm9yRWxlbWVudCxcbiAgICAgIHJlc29sdmVcbiAgICB9ID0gdGhpcy5wcm9wcztcbiAgICBsZXQgcHJvbWlzZSA9IG51bGw7XG4gICAgbGV0IHN0YXR1cyA9IEF3YWl0UmVuZGVyU3RhdHVzLnBlbmRpbmc7XG4gICAgaWYgKCEocmVzb2x2ZSBpbnN0YW5jZW9mIFByb21pc2UpKSB7XG4gICAgICAvLyBEaWRuJ3QgZ2V0IGEgcHJvbWlzZSAtIHByb3ZpZGUgYXMgYSByZXNvbHZlZCBwcm9taXNlXG4gICAgICBzdGF0dXMgPSBBd2FpdFJlbmRlclN0YXR1cy5zdWNjZXNzO1xuICAgICAgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX3RyYWNrZWRcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IHRydWVcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX2RhdGFcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IHJlc29sdmVcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAodGhpcy5zdGF0ZS5lcnJvcikge1xuICAgICAgLy8gQ2F1Z2h0IGEgcmVuZGVyIGVycm9yLCBwcm92aWRlIGl0IGFzIGEgcmVqZWN0ZWQgcHJvbWlzZVxuICAgICAgc3RhdHVzID0gQXdhaXRSZW5kZXJTdGF0dXMuZXJyb3I7XG4gICAgICBsZXQgcmVuZGVyRXJyb3IgPSB0aGlzLnN0YXRlLmVycm9yO1xuICAgICAgcHJvbWlzZSA9IFByb21pc2UucmVqZWN0KCkuY2F0Y2goKCkgPT4ge30pOyAvLyBBdm9pZCB1bmhhbmRsZWQgcmVqZWN0aW9uIHdhcm5pbmdzXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvbWlzZSwgXCJfdHJhY2tlZFwiLCB7XG4gICAgICAgIGdldDogKCkgPT4gdHJ1ZVxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvbWlzZSwgXCJfZXJyb3JcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IHJlbmRlckVycm9yXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHJlc29sdmUuX3RyYWNrZWQpIHtcbiAgICAgIC8vIEFscmVhZHkgdHJhY2tlZCBwcm9taXNlIC0gY2hlY2sgY29udGVudHNcbiAgICAgIHByb21pc2UgPSByZXNvbHZlO1xuICAgICAgc3RhdHVzID0gXCJfZXJyb3JcIiBpbiBwcm9taXNlID8gQXdhaXRSZW5kZXJTdGF0dXMuZXJyb3IgOiBcIl9kYXRhXCIgaW4gcHJvbWlzZSA/IEF3YWl0UmVuZGVyU3RhdHVzLnN1Y2Nlc3MgOiBBd2FpdFJlbmRlclN0YXR1cy5wZW5kaW5nO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSYXcgKHVudHJhY2tlZCkgcHJvbWlzZSAtIHRyYWNrIGl0XG4gICAgICBzdGF0dXMgPSBBd2FpdFJlbmRlclN0YXR1cy5wZW5kaW5nO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlc29sdmUsIFwiX3RyYWNrZWRcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IHRydWVcbiAgICAgIH0pO1xuICAgICAgcHJvbWlzZSA9IHJlc29sdmUudGhlbihkYXRhID0+IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXNvbHZlLCBcIl9kYXRhXCIsIHtcbiAgICAgICAgZ2V0OiAoKSA9PiBkYXRhXG4gICAgICB9KSwgZXJyb3IgPT4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlc29sdmUsIFwiX2Vycm9yXCIsIHtcbiAgICAgICAgZ2V0OiAoKSA9PiBlcnJvclxuICAgICAgfSkpO1xuICAgIH1cbiAgICBpZiAoc3RhdHVzID09PSBBd2FpdFJlbmRlclN0YXR1cy5lcnJvciAmJiBwcm9taXNlLl9lcnJvciBpbnN0YW5jZW9mIEFib3J0ZWREZWZlcnJlZEVycm9yKSB7XG4gICAgICAvLyBGcmVlemUgdGhlIFVJIGJ5IHRocm93aW5nIGEgbmV2ZXIgcmVzb2x2ZWQgcHJvbWlzZVxuICAgICAgdGhyb3cgbmV2ZXJTZXR0bGVkUHJvbWlzZTtcbiAgICB9XG4gICAgaWYgKHN0YXR1cyA9PT0gQXdhaXRSZW5kZXJTdGF0dXMuZXJyb3IgJiYgIWVycm9yRWxlbWVudCkge1xuICAgICAgLy8gTm8gZXJyb3JFbGVtZW50LCB0aHJvdyB0byB0aGUgbmVhcmVzdCByb3V0ZS1sZXZlbCBlcnJvciBib3VuZGFyeVxuICAgICAgdGhyb3cgcHJvbWlzZS5fZXJyb3I7XG4gICAgfVxuICAgIGlmIChzdGF0dXMgPT09IEF3YWl0UmVuZGVyU3RhdHVzLmVycm9yKSB7XG4gICAgICAvLyBSZW5kZXIgdmlhIG91ciBlcnJvckVsZW1lbnRcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChBd2FpdENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgICAgdmFsdWU6IHByb21pc2UsXG4gICAgICAgIGNoaWxkcmVuOiBlcnJvckVsZW1lbnRcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoc3RhdHVzID09PSBBd2FpdFJlbmRlclN0YXR1cy5zdWNjZXNzKSB7XG4gICAgICAvLyBSZW5kZXIgY2hpbGRyZW4gd2l0aCByZXNvbHZlZCB2YWx1ZVxuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEF3YWl0Q29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogcHJvbWlzZSxcbiAgICAgICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBUaHJvdyB0byB0aGUgc3VzcGVuc2UgYm91bmRhcnlcbiAgICB0aHJvdyBwcm9taXNlO1xuICB9XG59XG5cbi8qKlxuICogQHByaXZhdGVcbiAqIEluZGlyZWN0aW9uIHRvIGxldmVyYWdlIHVzZUFzeW5jVmFsdWUgZm9yIGEgcmVuZGVyLXByb3AgQVBJIG9uIGA8QXdhaXQ+YFxuICovXG5mdW5jdGlvbiBSZXNvbHZlQXdhaXQoX3JlZjgpIHtcbiAgbGV0IHtcbiAgICBjaGlsZHJlblxuICB9ID0gX3JlZjg7XG4gIGxldCBkYXRhID0gdXNlQXN5bmNWYWx1ZSgpO1xuICBsZXQgdG9SZW5kZXIgPSB0eXBlb2YgY2hpbGRyZW4gPT09IFwiZnVuY3Rpb25cIiA/IGNoaWxkcmVuKGRhdGEpIDogY2hpbGRyZW47XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgdG9SZW5kZXIpO1xufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBVVElMU1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4vKipcbiAqIENyZWF0ZXMgYSByb3V0ZSBjb25maWcgZnJvbSBhIFJlYWN0IFwiY2hpbGRyZW5cIiBvYmplY3QsIHdoaWNoIGlzIHVzdWFsbHlcbiAqIGVpdGhlciBhIGA8Um91dGU+YCBlbGVtZW50IG9yIGFuIGFycmF5IG9mIHRoZW0uIFVzZWQgaW50ZXJuYWxseSBieVxuICogYDxSb3V0ZXM+YCB0byBjcmVhdGUgYSByb3V0ZSBjb25maWcgZnJvbSBpdHMgY2hpbGRyZW4uXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS91dGlscy9jcmVhdGUtcm91dGVzLWZyb20tY2hpbGRyZW5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuKGNoaWxkcmVuLCBwYXJlbnRQYXRoKSB7XG4gIGlmIChwYXJlbnRQYXRoID09PSB2b2lkIDApIHtcbiAgICBwYXJlbnRQYXRoID0gW107XG4gIH1cbiAgbGV0IHJvdXRlcyA9IFtdO1xuICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCAoZWxlbWVudCwgaW5kZXgpID0+IHtcbiAgICBpZiAoISAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQoZWxlbWVudCkpIHtcbiAgICAgIC8vIElnbm9yZSBub24tZWxlbWVudHMuIFRoaXMgYWxsb3dzIHBlb3BsZSB0byBtb3JlIGVhc2lseSBpbmxpbmVcbiAgICAgIC8vIGNvbmRpdGlvbmFscyBpbiB0aGVpciByb3V0ZSBjb25maWcuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCB0cmVlUGF0aCA9IFsuLi5wYXJlbnRQYXRoLCBpbmRleF07XG4gICAgaWYgKGVsZW1lbnQudHlwZSA9PT0gUmVhY3QuRnJhZ21lbnQpIHtcbiAgICAgIC8vIFRyYW5zcGFyZW50bHkgc3VwcG9ydCBSZWFjdC5GcmFnbWVudCBhbmQgaXRzIGNoaWxkcmVuLlxuICAgICAgcm91dGVzLnB1c2guYXBwbHkocm91dGVzLCBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4oZWxlbWVudC5wcm9wcy5jaGlsZHJlbiwgdHJlZVBhdGgpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgIShlbGVtZW50LnR5cGUgPT09IFJvdXRlKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwiW1wiICsgKHR5cGVvZiBlbGVtZW50LnR5cGUgPT09IFwic3RyaW5nXCIgPyBlbGVtZW50LnR5cGUgOiBlbGVtZW50LnR5cGUubmFtZSkgKyBcIl0gaXMgbm90IGEgPFJvdXRlPiBjb21wb25lbnQuIEFsbCBjb21wb25lbnQgY2hpbGRyZW4gb2YgPFJvdXRlcz4gbXVzdCBiZSBhIDxSb3V0ZT4gb3IgPFJlYWN0LkZyYWdtZW50PlwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICEoIWVsZW1lbnQucHJvcHMuaW5kZXggfHwgIWVsZW1lbnQucHJvcHMuY2hpbGRyZW4pID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgXCJBbiBpbmRleCByb3V0ZSBjYW5ub3QgaGF2ZSBjaGlsZCByb3V0ZXMuXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgbGV0IHJvdXRlID0ge1xuICAgICAgaWQ6IGVsZW1lbnQucHJvcHMuaWQgfHwgdHJlZVBhdGguam9pbihcIi1cIiksXG4gICAgICBjYXNlU2Vuc2l0aXZlOiBlbGVtZW50LnByb3BzLmNhc2VTZW5zaXRpdmUsXG4gICAgICBlbGVtZW50OiBlbGVtZW50LnByb3BzLmVsZW1lbnQsXG4gICAgICBDb21wb25lbnQ6IGVsZW1lbnQucHJvcHMuQ29tcG9uZW50LFxuICAgICAgaW5kZXg6IGVsZW1lbnQucHJvcHMuaW5kZXgsXG4gICAgICBwYXRoOiBlbGVtZW50LnByb3BzLnBhdGgsXG4gICAgICBsb2FkZXI6IGVsZW1lbnQucHJvcHMubG9hZGVyLFxuICAgICAgYWN0aW9uOiBlbGVtZW50LnByb3BzLmFjdGlvbixcbiAgICAgIGVycm9yRWxlbWVudDogZWxlbWVudC5wcm9wcy5lcnJvckVsZW1lbnQsXG4gICAgICBFcnJvckJvdW5kYXJ5OiBlbGVtZW50LnByb3BzLkVycm9yQm91bmRhcnksXG4gICAgICBoYXNFcnJvckJvdW5kYXJ5OiBlbGVtZW50LnByb3BzLkVycm9yQm91bmRhcnkgIT0gbnVsbCB8fCBlbGVtZW50LnByb3BzLmVycm9yRWxlbWVudCAhPSBudWxsLFxuICAgICAgc2hvdWxkUmV2YWxpZGF0ZTogZWxlbWVudC5wcm9wcy5zaG91bGRSZXZhbGlkYXRlLFxuICAgICAgaGFuZGxlOiBlbGVtZW50LnByb3BzLmhhbmRsZSxcbiAgICAgIGxhenk6IGVsZW1lbnQucHJvcHMubGF6eVxuICAgIH07XG4gICAgaWYgKGVsZW1lbnQucHJvcHMuY2hpbGRyZW4pIHtcbiAgICAgIHJvdXRlLmNoaWxkcmVuID0gY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuKGVsZW1lbnQucHJvcHMuY2hpbGRyZW4sIHRyZWVQYXRoKTtcbiAgICB9XG4gICAgcm91dGVzLnB1c2gocm91dGUpO1xuICB9KTtcbiAgcmV0dXJuIHJvdXRlcztcbn1cblxuLyoqXG4gKiBSZW5kZXJzIHRoZSByZXN1bHQgb2YgYG1hdGNoUm91dGVzKClgIGludG8gYSBSZWFjdCBlbGVtZW50LlxuICovXG5mdW5jdGlvbiByZW5kZXJNYXRjaGVzKG1hdGNoZXMpIHtcbiAgcmV0dXJuIF9yZW5kZXJNYXRjaGVzKG1hdGNoZXMpO1xufVxuXG5mdW5jdGlvbiBtYXBSb3V0ZVByb3BlcnRpZXMocm91dGUpIHtcbiAgbGV0IHVwZGF0ZXMgPSB7XG4gICAgLy8gTm90ZTogdGhpcyBjaGVjayBhbHNvIG9jY3VycyBpbiBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4gc28gdXBkYXRlXG4gICAgLy8gdGhlcmUgaWYgeW91IGNoYW5nZSB0aGlzIC0tIHBsZWFzZSBhbmQgdGhhbmsgeW91IVxuICAgIGhhc0Vycm9yQm91bmRhcnk6IHJvdXRlLkVycm9yQm91bmRhcnkgIT0gbnVsbCB8fCByb3V0ZS5lcnJvckVsZW1lbnQgIT0gbnVsbFxuICB9O1xuICBpZiAocm91dGUuQ29tcG9uZW50KSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgaWYgKHJvdXRlLmVsZW1lbnQpIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX3dhcm5pbmcoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgaW5jbHVkZSBib3RoIGBDb21wb25lbnRgIGFuZCBgZWxlbWVudGAgb24geW91ciByb3V0ZSAtIFwiICsgXCJgQ29tcG9uZW50YCB3aWxsIGJlIHVzZWQuXCIpIDogdm9pZCAwO1xuICAgICAgfVxuICAgIH1cbiAgICBPYmplY3QuYXNzaWduKHVwZGF0ZXMsIHtcbiAgICAgIGVsZW1lbnQ6IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KHJvdXRlLkNvbXBvbmVudCksXG4gICAgICBDb21wb25lbnQ6IHVuZGVmaW5lZFxuICAgIH0pO1xuICB9XG4gIGlmIChyb3V0ZS5IeWRyYXRlRmFsbGJhY2spIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICBpZiAocm91dGUuaHlkcmF0ZUZhbGxiYWNrRWxlbWVudCkge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfd2FybmluZyhmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCBpbmNsdWRlIGJvdGggYEh5ZHJhdGVGYWxsYmFja2AgYW5kIGBoeWRyYXRlRmFsbGJhY2tFbGVtZW50YCBvbiB5b3VyIHJvdXRlIC0gXCIgKyBcImBIeWRyYXRlRmFsbGJhY2tgIHdpbGwgYmUgdXNlZC5cIikgOiB2b2lkIDA7XG4gICAgICB9XG4gICAgfVxuICAgIE9iamVjdC5hc3NpZ24odXBkYXRlcywge1xuICAgICAgaHlkcmF0ZUZhbGxiYWNrRWxlbWVudDogLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQocm91dGUuSHlkcmF0ZUZhbGxiYWNrKSxcbiAgICAgIEh5ZHJhdGVGYWxsYmFjazogdW5kZWZpbmVkXG4gICAgfSk7XG4gIH1cbiAgaWYgKHJvdXRlLkVycm9yQm91bmRhcnkpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICBpZiAocm91dGUuZXJyb3JFbGVtZW50KSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKGZhbHNlLCBcIllvdSBzaG91bGQgbm90IGluY2x1ZGUgYm90aCBgRXJyb3JCb3VuZGFyeWAgYW5kIGBlcnJvckVsZW1lbnRgIG9uIHlvdXIgcm91dGUgLSBcIiArIFwiYEVycm9yQm91bmRhcnlgIHdpbGwgYmUgdXNlZC5cIikgOiB2b2lkIDA7XG4gICAgICB9XG4gICAgfVxuICAgIE9iamVjdC5hc3NpZ24odXBkYXRlcywge1xuICAgICAgZXJyb3JFbGVtZW50OiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChyb3V0ZS5FcnJvckJvdW5kYXJ5KSxcbiAgICAgIEVycm9yQm91bmRhcnk6IHVuZGVmaW5lZFxuICAgIH0pO1xuICB9XG4gIHJldHVybiB1cGRhdGVzO1xufVxuZnVuY3Rpb24gY3JlYXRlTWVtb3J5Um91dGVyKHJvdXRlcywgb3B0cykge1xuICByZXR1cm4gY3JlYXRlUm91dGVyKHtcbiAgICBiYXNlbmFtZTogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5iYXNlbmFtZSxcbiAgICBmdXR1cmU6IF9leHRlbmRzKHt9LCBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLmZ1dHVyZSwge1xuICAgICAgdjdfcHJlcGVuZEJhc2VuYW1lOiB0cnVlXG4gICAgfSksXG4gICAgaGlzdG9yeTogY3JlYXRlTWVtb3J5SGlzdG9yeSh7XG4gICAgICBpbml0aWFsRW50cmllczogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5pbml0aWFsRW50cmllcyxcbiAgICAgIGluaXRpYWxJbmRleDogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5pbml0aWFsSW5kZXhcbiAgICB9KSxcbiAgICBoeWRyYXRpb25EYXRhOiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLmh5ZHJhdGlvbkRhdGEsXG4gICAgcm91dGVzLFxuICAgIG1hcFJvdXRlUHJvcGVydGllcyxcbiAgICB1bnN0YWJsZV9kYXRhU3RyYXRlZ3k6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMudW5zdGFibGVfZGF0YVN0cmF0ZWd5XG4gIH0pLmluaXRpYWxpemUoKTtcbn1cblxuZXhwb3J0IHsgQXdhaXQsIE1lbW9yeVJvdXRlciwgTmF2aWdhdGUsIE91dGxldCwgUm91dGUsIFJvdXRlciwgUm91dGVyUHJvdmlkZXIsIFJvdXRlcywgRGF0YVJvdXRlckNvbnRleHQgYXMgVU5TQUZFX0RhdGFSb3V0ZXJDb250ZXh0LCBEYXRhUm91dGVyU3RhdGVDb250ZXh0IGFzIFVOU0FGRV9EYXRhUm91dGVyU3RhdGVDb250ZXh0LCBMb2NhdGlvbkNvbnRleHQgYXMgVU5TQUZFX0xvY2F0aW9uQ29udGV4dCwgTmF2aWdhdGlvbkNvbnRleHQgYXMgVU5TQUZFX05hdmlnYXRpb25Db250ZXh0LCBSb3V0ZUNvbnRleHQgYXMgVU5TQUZFX1JvdXRlQ29udGV4dCwgbWFwUm91dGVQcm9wZXJ0aWVzIGFzIFVOU0FGRV9tYXBSb3V0ZVByb3BlcnRpZXMsIHVzZVJvdXRlSWQgYXMgVU5TQUZFX3VzZVJvdXRlSWQsIHVzZVJvdXRlc0ltcGwgYXMgVU5TQUZFX3VzZVJvdXRlc0ltcGwsIGNyZWF0ZU1lbW9yeVJvdXRlciwgY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuLCBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4gYXMgY3JlYXRlUm91dGVzRnJvbUVsZW1lbnRzLCByZW5kZXJNYXRjaGVzLCB1c2VBY3Rpb25EYXRhLCB1c2VBc3luY0Vycm9yLCB1c2VBc3luY1ZhbHVlLCB1c2VCbG9ja2VyLCB1c2VIcmVmLCB1c2VJblJvdXRlckNvbnRleHQsIHVzZUxvYWRlckRhdGEsIHVzZUxvY2F0aW9uLCB1c2VNYXRjaCwgdXNlTWF0Y2hlcywgdXNlTmF2aWdhdGUsIHVzZU5hdmlnYXRpb24sIHVzZU5hdmlnYXRpb25UeXBlLCB1c2VPdXRsZXQsIHVzZU91dGxldENvbnRleHQsIHVzZVBhcmFtcywgdXNlUmVzb2x2ZWRQYXRoLCB1c2VSZXZhbGlkYXRvciwgdXNlUm91dGVFcnJvciwgdXNlUm91dGVMb2FkZXJEYXRhLCB1c2VSb3V0ZXMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIiwiLyoqXG4gKiBSZWFjdCBSb3V0ZXIgRE9NIHY2LjIzLjFcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIFJlbWl4IFNvZnR3YXJlIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UubWQgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0ICogYXMgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCB7IFVOU0FGRV9tYXBSb3V0ZVByb3BlcnRpZXMsIFVOU0FGRV9EYXRhUm91dGVyQ29udGV4dCwgVU5TQUZFX0RhdGFSb3V0ZXJTdGF0ZUNvbnRleHQsIFJvdXRlciwgVU5TQUZFX3VzZVJvdXRlc0ltcGwsIFVOU0FGRV9OYXZpZ2F0aW9uQ29udGV4dCwgdXNlSHJlZiwgdXNlUmVzb2x2ZWRQYXRoLCB1c2VMb2NhdGlvbiwgdXNlTmF2aWdhdGUsIGNyZWF0ZVBhdGgsIFVOU0FGRV91c2VSb3V0ZUlkLCBVTlNBRkVfUm91dGVDb250ZXh0LCB1c2VNYXRjaGVzLCB1c2VOYXZpZ2F0aW9uLCB1c2VCbG9ja2VyIH0gZnJvbSAncmVhY3Qtcm91dGVyJztcbmV4cG9ydCB7IEFib3J0ZWREZWZlcnJlZEVycm9yLCBBd2FpdCwgTWVtb3J5Um91dGVyLCBOYXZpZ2F0ZSwgTmF2aWdhdGlvblR5cGUsIE91dGxldCwgUm91dGUsIFJvdXRlciwgUm91dGVzLCBVTlNBRkVfRGF0YVJvdXRlckNvbnRleHQsIFVOU0FGRV9EYXRhUm91dGVyU3RhdGVDb250ZXh0LCBVTlNBRkVfTG9jYXRpb25Db250ZXh0LCBVTlNBRkVfTmF2aWdhdGlvbkNvbnRleHQsIFVOU0FGRV9Sb3V0ZUNvbnRleHQsIFVOU0FGRV91c2VSb3V0ZUlkLCBjcmVhdGVNZW1vcnlSb3V0ZXIsIGNyZWF0ZVBhdGgsIGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbiwgY3JlYXRlUm91dGVzRnJvbUVsZW1lbnRzLCBkZWZlciwgZ2VuZXJhdGVQYXRoLCBpc1JvdXRlRXJyb3JSZXNwb25zZSwganNvbiwgbWF0Y2hQYXRoLCBtYXRjaFJvdXRlcywgcGFyc2VQYXRoLCByZWRpcmVjdCwgcmVkaXJlY3REb2N1bWVudCwgcmVuZGVyTWF0Y2hlcywgcmVzb2x2ZVBhdGgsIHVzZUFjdGlvbkRhdGEsIHVzZUFzeW5jRXJyb3IsIHVzZUFzeW5jVmFsdWUsIHVzZUJsb2NrZXIsIHVzZUhyZWYsIHVzZUluUm91dGVyQ29udGV4dCwgdXNlTG9hZGVyRGF0YSwgdXNlTG9jYXRpb24sIHVzZU1hdGNoLCB1c2VNYXRjaGVzLCB1c2VOYXZpZ2F0ZSwgdXNlTmF2aWdhdGlvbiwgdXNlTmF2aWdhdGlvblR5cGUsIHVzZU91dGxldCwgdXNlT3V0bGV0Q29udGV4dCwgdXNlUGFyYW1zLCB1c2VSZXNvbHZlZFBhdGgsIHVzZVJldmFsaWRhdG9yLCB1c2VSb3V0ZUVycm9yLCB1c2VSb3V0ZUxvYWRlckRhdGEsIHVzZVJvdXRlcyB9IGZyb20gJ3JlYWN0LXJvdXRlcic7XG5pbXBvcnQgeyBzdHJpcEJhc2VuYW1lLCBVTlNBRkVfd2FybmluZywgY3JlYXRlUm91dGVyLCBjcmVhdGVCcm93c2VySGlzdG9yeSwgY3JlYXRlSGFzaEhpc3RvcnksIFVOU0FGRV9FcnJvclJlc3BvbnNlSW1wbCwgVU5TQUZFX2ludmFyaWFudCwgam9pblBhdGhzLCBJRExFX0ZFVENIRVIsIG1hdGNoUGF0aCB9IGZyb20gJ0ByZW1peC1ydW4vcm91dGVyJztcbmV4cG9ydCB7IFVOU0FGRV9FcnJvclJlc3BvbnNlSW1wbCB9IGZyb20gJ0ByZW1peC1ydW4vcm91dGVyJztcblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5jb25zdCBkZWZhdWx0TWV0aG9kID0gXCJnZXRcIjtcbmNvbnN0IGRlZmF1bHRFbmNUeXBlID0gXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIjtcbmZ1bmN0aW9uIGlzSHRtbEVsZW1lbnQob2JqZWN0KSB7XG4gIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiB0eXBlb2Ygb2JqZWN0LnRhZ05hbWUgPT09IFwic3RyaW5nXCI7XG59XG5mdW5jdGlvbiBpc0J1dHRvbkVsZW1lbnQob2JqZWN0KSB7XG4gIHJldHVybiBpc0h0bWxFbGVtZW50KG9iamVjdCkgJiYgb2JqZWN0LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJidXR0b25cIjtcbn1cbmZ1bmN0aW9uIGlzRm9ybUVsZW1lbnQob2JqZWN0KSB7XG4gIHJldHVybiBpc0h0bWxFbGVtZW50KG9iamVjdCkgJiYgb2JqZWN0LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJmb3JtXCI7XG59XG5mdW5jdGlvbiBpc0lucHV0RWxlbWVudChvYmplY3QpIHtcbiAgcmV0dXJuIGlzSHRtbEVsZW1lbnQob2JqZWN0KSAmJiBvYmplY3QudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCI7XG59XG5mdW5jdGlvbiBpc01vZGlmaWVkRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuICEhKGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuYWx0S2V5IHx8IGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQuc2hpZnRLZXkpO1xufVxuZnVuY3Rpb24gc2hvdWxkUHJvY2Vzc0xpbmtDbGljayhldmVudCwgdGFyZ2V0KSB7XG4gIHJldHVybiBldmVudC5idXR0b24gPT09IDAgJiYgKFxuICAvLyBJZ25vcmUgZXZlcnl0aGluZyBidXQgbGVmdCBjbGlja3NcbiAgIXRhcmdldCB8fCB0YXJnZXQgPT09IFwiX3NlbGZcIikgJiZcbiAgLy8gTGV0IGJyb3dzZXIgaGFuZGxlIFwidGFyZ2V0PV9ibGFua1wiIGV0Yy5cbiAgIWlzTW9kaWZpZWRFdmVudChldmVudCkgLy8gSWdub3JlIGNsaWNrcyB3aXRoIG1vZGlmaWVyIGtleXNcbiAgO1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCB1c2luZyB0aGUgZ2l2ZW4gaW5pdGlhbGl6ZXIuXG4gKlxuICogVGhpcyBpcyBpZGVudGljYWwgdG8gYG5ldyBVUkxTZWFyY2hQYXJhbXMoaW5pdClgIGV4Y2VwdCBpdCBhbHNvXG4gKiBzdXBwb3J0cyBhcnJheXMgYXMgdmFsdWVzIGluIHRoZSBvYmplY3QgZm9ybSBvZiB0aGUgaW5pdGlhbGl6ZXJcbiAqIGluc3RlYWQgb2YganVzdCBzdHJpbmdzLiBUaGlzIGlzIGNvbnZlbmllbnQgd2hlbiB5b3UgbmVlZCBtdWx0aXBsZVxuICogdmFsdWVzIGZvciBhIGdpdmVuIGtleSwgYnV0IGRvbid0IHdhbnQgdG8gdXNlIGFuIGFycmF5IGluaXRpYWxpemVyLlxuICpcbiAqIEZvciBleGFtcGxlLCBpbnN0ZWFkIG9mOlxuICpcbiAqICAgbGV0IHNlYXJjaFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoW1xuICogICAgIFsnc29ydCcsICduYW1lJ10sXG4gKiAgICAgWydzb3J0JywgJ3ByaWNlJ11cbiAqICAgXSk7XG4gKlxuICogeW91IGNhbiBkbzpcbiAqXG4gKiAgIGxldCBzZWFyY2hQYXJhbXMgPSBjcmVhdGVTZWFyY2hQYXJhbXMoe1xuICogICAgIHNvcnQ6IFsnbmFtZScsICdwcmljZSddXG4gKiAgIH0pO1xuICovXG5mdW5jdGlvbiBjcmVhdGVTZWFyY2hQYXJhbXMoaW5pdCkge1xuICBpZiAoaW5pdCA9PT0gdm9pZCAwKSB7XG4gICAgaW5pdCA9IFwiXCI7XG4gIH1cbiAgcmV0dXJuIG5ldyBVUkxTZWFyY2hQYXJhbXModHlwZW9mIGluaXQgPT09IFwic3RyaW5nXCIgfHwgQXJyYXkuaXNBcnJheShpbml0KSB8fCBpbml0IGluc3RhbmNlb2YgVVJMU2VhcmNoUGFyYW1zID8gaW5pdCA6IE9iamVjdC5rZXlzKGluaXQpLnJlZHVjZSgobWVtbywga2V5KSA9PiB7XG4gICAgbGV0IHZhbHVlID0gaW5pdFtrZXldO1xuICAgIHJldHVybiBtZW1vLmNvbmNhdChBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLm1hcCh2ID0+IFtrZXksIHZdKSA6IFtba2V5LCB2YWx1ZV1dKTtcbiAgfSwgW10pKTtcbn1cbmZ1bmN0aW9uIGdldFNlYXJjaFBhcmFtc0ZvckxvY2F0aW9uKGxvY2F0aW9uU2VhcmNoLCBkZWZhdWx0U2VhcmNoUGFyYW1zKSB7XG4gIGxldCBzZWFyY2hQYXJhbXMgPSBjcmVhdGVTZWFyY2hQYXJhbXMobG9jYXRpb25TZWFyY2gpO1xuICBpZiAoZGVmYXVsdFNlYXJjaFBhcmFtcykge1xuICAgIC8vIFVzZSBgZGVmYXVsdFNlYXJjaFBhcmFtcy5mb3JFYWNoKC4uLilgIGhlcmUgaW5zdGVhZCBvZiBpdGVyYXRpbmcgb2ZcbiAgICAvLyBgZGVmYXVsdFNlYXJjaFBhcmFtcy5rZXlzKClgIHRvIHdvcmstYXJvdW5kIGEgYnVnIGluIEZpcmVmb3ggcmVsYXRlZCB0b1xuICAgIC8vIHdlYiBleHRlbnNpb25zLiBSZWxldmFudCBCdWd6aWxsYSB0aWNrZXRzOlxuICAgIC8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTE0MTQ2MDJcbiAgICAvLyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0xMDIzOTg0XG4gICAgZGVmYXVsdFNlYXJjaFBhcmFtcy5mb3JFYWNoKChfLCBrZXkpID0+IHtcbiAgICAgIGlmICghc2VhcmNoUGFyYW1zLmhhcyhrZXkpKSB7XG4gICAgICAgIGRlZmF1bHRTZWFyY2hQYXJhbXMuZ2V0QWxsKGtleSkuZm9yRWFjaCh2YWx1ZSA9PiB7XG4gICAgICAgICAgc2VhcmNoUGFyYW1zLmFwcGVuZChrZXksIHZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHNlYXJjaFBhcmFtcztcbn1cbi8vIE9uZS10aW1lIGNoZWNrIGZvciBzdWJtaXR0ZXIgc3VwcG9ydFxubGV0IF9mb3JtRGF0YVN1cHBvcnRzU3VibWl0dGVyID0gbnVsbDtcbmZ1bmN0aW9uIGlzRm9ybURhdGFTdWJtaXR0ZXJTdXBwb3J0ZWQoKSB7XG4gIGlmIChfZm9ybURhdGFTdXBwb3J0c1N1Ym1pdHRlciA9PT0gbnVsbCkge1xuICAgIHRyeSB7XG4gICAgICBuZXcgRm9ybURhdGEoZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZvcm1cIiksXG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGlmIEZvcm1EYXRhIHN1cHBvcnRzIHRoZSBzdWJtaXR0ZXIgcGFyYW1ldGVyLCB0aGlzIHdpbGwgdGhyb3dcbiAgICAgIDApO1xuICAgICAgX2Zvcm1EYXRhU3VwcG9ydHNTdWJtaXR0ZXIgPSBmYWxzZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBfZm9ybURhdGFTdXBwb3J0c1N1Ym1pdHRlciA9IHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBfZm9ybURhdGFTdXBwb3J0c1N1Ym1pdHRlcjtcbn1cbmNvbnN0IHN1cHBvcnRlZEZvcm1FbmNUeXBlcyA9IG5ldyBTZXQoW1wiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIsIFwibXVsdGlwYXJ0L2Zvcm0tZGF0YVwiLCBcInRleHQvcGxhaW5cIl0pO1xuZnVuY3Rpb24gZ2V0Rm9ybUVuY1R5cGUoZW5jVHlwZSkge1xuICBpZiAoZW5jVHlwZSAhPSBudWxsICYmICFzdXBwb3J0ZWRGb3JtRW5jVHlwZXMuaGFzKGVuY1R5cGUpKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX3dhcm5pbmcoZmFsc2UsIFwiXFxcIlwiICsgZW5jVHlwZSArIFwiXFxcIiBpcyBub3QgYSB2YWxpZCBgZW5jVHlwZWAgZm9yIGA8Rm9ybT5gL2A8ZmV0Y2hlci5Gb3JtPmAgXCIgKyAoXCJhbmQgd2lsbCBkZWZhdWx0IHRvIFxcXCJcIiArIGRlZmF1bHRFbmNUeXBlICsgXCJcXFwiXCIpKSA6IHZvaWQgMDtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gZW5jVHlwZTtcbn1cbmZ1bmN0aW9uIGdldEZvcm1TdWJtaXNzaW9uSW5mbyh0YXJnZXQsIGJhc2VuYW1lKSB7XG4gIGxldCBtZXRob2Q7XG4gIGxldCBhY3Rpb247XG4gIGxldCBlbmNUeXBlO1xuICBsZXQgZm9ybURhdGE7XG4gIGxldCBib2R5O1xuICBpZiAoaXNGb3JtRWxlbWVudCh0YXJnZXQpKSB7XG4gICAgLy8gV2hlbiBncmFiYmluZyB0aGUgYWN0aW9uIGZyb20gdGhlIGVsZW1lbnQsIGl0IHdpbGwgaGF2ZSBoYWQgdGhlIGJhc2VuYW1lXG4gICAgLy8gcHJlZml4ZWQgdG8gZW5zdXJlIG5vbi1KUyBzY2VuYXJpb3Mgd29yaywgc28gc3RyaXAgaXQgc2luY2Ugd2UnbGxcbiAgICAvLyByZS1wcmVmaXggaW4gdGhlIHJvdXRlclxuICAgIGxldCBhdHRyID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShcImFjdGlvblwiKTtcbiAgICBhY3Rpb24gPSBhdHRyID8gc3RyaXBCYXNlbmFtZShhdHRyLCBiYXNlbmFtZSkgOiBudWxsO1xuICAgIG1ldGhvZCA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJtZXRob2RcIikgfHwgZGVmYXVsdE1ldGhvZDtcbiAgICBlbmNUeXBlID0gZ2V0Rm9ybUVuY1R5cGUodGFyZ2V0LmdldEF0dHJpYnV0ZShcImVuY3R5cGVcIikpIHx8IGRlZmF1bHRFbmNUeXBlO1xuICAgIGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKHRhcmdldCk7XG4gIH0gZWxzZSBpZiAoaXNCdXR0b25FbGVtZW50KHRhcmdldCkgfHwgaXNJbnB1dEVsZW1lbnQodGFyZ2V0KSAmJiAodGFyZ2V0LnR5cGUgPT09IFwic3VibWl0XCIgfHwgdGFyZ2V0LnR5cGUgPT09IFwiaW1hZ2VcIikpIHtcbiAgICBsZXQgZm9ybSA9IHRhcmdldC5mb3JtO1xuICAgIGlmIChmb3JtID09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBzdWJtaXQgYSA8YnV0dG9uPiBvciA8aW5wdXQgdHlwZT1cXFwic3VibWl0XFxcIj4gd2l0aG91dCBhIDxmb3JtPlwiKTtcbiAgICB9XG4gICAgLy8gPGJ1dHRvbj4vPGlucHV0IHR5cGU9XCJzdWJtaXRcIj4gbWF5IG92ZXJyaWRlIGF0dHJpYnV0ZXMgb2YgPGZvcm0+XG4gICAgLy8gV2hlbiBncmFiYmluZyB0aGUgYWN0aW9uIGZyb20gdGhlIGVsZW1lbnQsIGl0IHdpbGwgaGF2ZSBoYWQgdGhlIGJhc2VuYW1lXG4gICAgLy8gcHJlZml4ZWQgdG8gZW5zdXJlIG5vbi1KUyBzY2VuYXJpb3Mgd29yaywgc28gc3RyaXAgaXQgc2luY2Ugd2UnbGxcbiAgICAvLyByZS1wcmVmaXggaW4gdGhlIHJvdXRlclxuICAgIGxldCBhdHRyID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShcImZvcm1hY3Rpb25cIikgfHwgZm9ybS5nZXRBdHRyaWJ1dGUoXCJhY3Rpb25cIik7XG4gICAgYWN0aW9uID0gYXR0ciA/IHN0cmlwQmFzZW5hbWUoYXR0ciwgYmFzZW5hbWUpIDogbnVsbDtcbiAgICBtZXRob2QgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKFwiZm9ybW1ldGhvZFwiKSB8fCBmb3JtLmdldEF0dHJpYnV0ZShcIm1ldGhvZFwiKSB8fCBkZWZhdWx0TWV0aG9kO1xuICAgIGVuY1R5cGUgPSBnZXRGb3JtRW5jVHlwZSh0YXJnZXQuZ2V0QXR0cmlidXRlKFwiZm9ybWVuY3R5cGVcIikpIHx8IGdldEZvcm1FbmNUeXBlKGZvcm0uZ2V0QXR0cmlidXRlKFwiZW5jdHlwZVwiKSkgfHwgZGVmYXVsdEVuY1R5cGU7XG4gICAgLy8gQnVpbGQgYSBGb3JtRGF0YSBvYmplY3QgcG9wdWxhdGVkIGZyb20gYSBmb3JtIGFuZCBzdWJtaXR0ZXJcbiAgICBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YShmb3JtLCB0YXJnZXQpO1xuICAgIC8vIElmIHRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgdGhlIGBGb3JtRGF0YShlbCwgc3VibWl0dGVyKWAgZm9ybWF0LFxuICAgIC8vIHRoZW4gdGFjayBvbiB0aGUgc3VibWl0dGVyIHZhbHVlIGF0IHRoZSBlbmQuICBUaGlzIGlzIGEgbGlnaHR3ZWlnaHRcbiAgICAvLyBzb2x1dGlvbiB0aGF0IGlzIG5vdCAxMDAlIHNwZWMgY29tcGxpYW50LiAgRm9yIGNvbXBsZXRlIHN1cHBvcnQgaW4gb2xkZXJcbiAgICAvLyBicm93c2VycywgY29uc2lkZXIgdXNpbmcgdGhlIGBmb3JtZGF0YS1zdWJtaXR0ZXItcG9seWZpbGxgIHBhY2thZ2VcbiAgICBpZiAoIWlzRm9ybURhdGFTdWJtaXR0ZXJTdXBwb3J0ZWQoKSkge1xuICAgICAgbGV0IHtcbiAgICAgICAgbmFtZSxcbiAgICAgICAgdHlwZSxcbiAgICAgICAgdmFsdWVcbiAgICAgIH0gPSB0YXJnZXQ7XG4gICAgICBpZiAodHlwZSA9PT0gXCJpbWFnZVwiKSB7XG4gICAgICAgIGxldCBwcmVmaXggPSBuYW1lID8gbmFtZSArIFwiLlwiIDogXCJcIjtcbiAgICAgICAgZm9ybURhdGEuYXBwZW5kKHByZWZpeCArIFwieFwiLCBcIjBcIik7XG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZChwcmVmaXggKyBcInlcIiwgXCIwXCIpO1xuICAgICAgfSBlbHNlIGlmIChuYW1lKSB7XG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZChuYW1lLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzSHRtbEVsZW1lbnQodGFyZ2V0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBzdWJtaXQgZWxlbWVudCB0aGF0IGlzIG5vdCA8Zm9ybT4sIDxidXR0b24+LCBvciBcIiArIFwiPGlucHV0IHR5cGU9XFxcInN1Ym1pdHxpbWFnZVxcXCI+XCIpO1xuICB9IGVsc2Uge1xuICAgIG1ldGhvZCA9IGRlZmF1bHRNZXRob2Q7XG4gICAgYWN0aW9uID0gbnVsbDtcbiAgICBlbmNUeXBlID0gZGVmYXVsdEVuY1R5cGU7XG4gICAgYm9keSA9IHRhcmdldDtcbiAgfVxuICAvLyBTZW5kIGJvZHkgZm9yIDxGb3JtIGVuY1R5cGU9XCJ0ZXh0L3BsYWluXCIgc28gd2UgZW5jb2RlIGl0IGludG8gdGV4dFxuICBpZiAoZm9ybURhdGEgJiYgZW5jVHlwZSA9PT0gXCJ0ZXh0L3BsYWluXCIpIHtcbiAgICBib2R5ID0gZm9ybURhdGE7XG4gICAgZm9ybURhdGEgPSB1bmRlZmluZWQ7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBhY3Rpb24sXG4gICAgbWV0aG9kOiBtZXRob2QudG9Mb3dlckNhc2UoKSxcbiAgICBlbmNUeXBlLFxuICAgIGZvcm1EYXRhLFxuICAgIGJvZHlcbiAgfTtcbn1cblxuY29uc3QgX2V4Y2x1ZGVkID0gW1wib25DbGlja1wiLCBcInJlbGF0aXZlXCIsIFwicmVsb2FkRG9jdW1lbnRcIiwgXCJyZXBsYWNlXCIsIFwic3RhdGVcIiwgXCJ0YXJnZXRcIiwgXCJ0b1wiLCBcInByZXZlbnRTY3JvbGxSZXNldFwiLCBcInVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uXCJdLFxuICBfZXhjbHVkZWQyID0gW1wiYXJpYS1jdXJyZW50XCIsIFwiY2FzZVNlbnNpdGl2ZVwiLCBcImNsYXNzTmFtZVwiLCBcImVuZFwiLCBcInN0eWxlXCIsIFwidG9cIiwgXCJ1bnN0YWJsZV92aWV3VHJhbnNpdGlvblwiLCBcImNoaWxkcmVuXCJdLFxuICBfZXhjbHVkZWQzID0gW1wiZmV0Y2hlcktleVwiLCBcIm5hdmlnYXRlXCIsIFwicmVsb2FkRG9jdW1lbnRcIiwgXCJyZXBsYWNlXCIsIFwic3RhdGVcIiwgXCJtZXRob2RcIiwgXCJhY3Rpb25cIiwgXCJvblN1Ym1pdFwiLCBcInJlbGF0aXZlXCIsIFwicHJldmVudFNjcm9sbFJlc2V0XCIsIFwidW5zdGFibGVfdmlld1RyYW5zaXRpb25cIl07XG4vLyBIRVkgWU9VISBET04nVCBUT1VDSCBUSElTIFZBUklBQkxFIVxuLy9cbi8vIEl0IGlzIHJlcGxhY2VkIHdpdGggdGhlIHByb3BlciB2ZXJzaW9uIGF0IGJ1aWxkIHRpbWUgdmlhIGEgYmFiZWwgcGx1Z2luIGluXG4vLyB0aGUgcm9sbHVwIGNvbmZpZy5cbi8vXG4vLyBFeHBvcnQgYSBnbG9iYWwgcHJvcGVydHkgb250byB0aGUgd2luZG93IGZvciBSZWFjdCBSb3V0ZXIgZGV0ZWN0aW9uIGJ5IHRoZVxuLy8gQ29yZSBXZWIgVml0YWxzIFRlY2hub2xvZ3kgUmVwb3J0LiAgVGhpcyB3YXkgdGhleSBjYW4gY29uZmlndXJlIHRoZSBgd2FwcGFseXplcmBcbi8vIHRvIGRldGVjdCBhbmQgcHJvcGVybHkgY2xhc3NpZnkgbGl2ZSB3ZWJzaXRlcyBhcyBiZWluZyBidWlsdCB3aXRoIFJlYWN0IFJvdXRlcjpcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9IVFRQQXJjaGl2ZS93YXBwYWx5emVyL2Jsb2IvbWFpbi9zcmMvdGVjaG5vbG9naWVzL3IuanNvblxuY29uc3QgUkVBQ1RfUk9VVEVSX1ZFUlNJT04gPSBcIjZcIjtcbnRyeSB7XG4gIHdpbmRvdy5fX3JlYWN0Um91dGVyVmVyc2lvbiA9IFJFQUNUX1JPVVRFUl9WRVJTSU9OO1xufSBjYXRjaCAoZSkge1xuICAvLyBuby1vcFxufVxuZnVuY3Rpb24gY3JlYXRlQnJvd3NlclJvdXRlcihyb3V0ZXMsIG9wdHMpIHtcbiAgcmV0dXJuIGNyZWF0ZVJvdXRlcih7XG4gICAgYmFzZW5hbWU6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuYmFzZW5hbWUsXG4gICAgZnV0dXJlOiBfZXh0ZW5kcyh7fSwgb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5mdXR1cmUsIHtcbiAgICAgIHY3X3ByZXBlbmRCYXNlbmFtZTogdHJ1ZVxuICAgIH0pLFxuICAgIGhpc3Rvcnk6IGNyZWF0ZUJyb3dzZXJIaXN0b3J5KHtcbiAgICAgIHdpbmRvdzogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy53aW5kb3dcbiAgICB9KSxcbiAgICBoeWRyYXRpb25EYXRhOiAob3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5oeWRyYXRpb25EYXRhKSB8fCBwYXJzZUh5ZHJhdGlvbkRhdGEoKSxcbiAgICByb3V0ZXMsXG4gICAgbWFwUm91dGVQcm9wZXJ0aWVzOiBVTlNBRkVfbWFwUm91dGVQcm9wZXJ0aWVzLFxuICAgIHVuc3RhYmxlX2RhdGFTdHJhdGVneTogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy51bnN0YWJsZV9kYXRhU3RyYXRlZ3ksXG4gICAgd2luZG93OiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLndpbmRvd1xuICB9KS5pbml0aWFsaXplKCk7XG59XG5mdW5jdGlvbiBjcmVhdGVIYXNoUm91dGVyKHJvdXRlcywgb3B0cykge1xuICByZXR1cm4gY3JlYXRlUm91dGVyKHtcbiAgICBiYXNlbmFtZTogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5iYXNlbmFtZSxcbiAgICBmdXR1cmU6IF9leHRlbmRzKHt9LCBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLmZ1dHVyZSwge1xuICAgICAgdjdfcHJlcGVuZEJhc2VuYW1lOiB0cnVlXG4gICAgfSksXG4gICAgaGlzdG9yeTogY3JlYXRlSGFzaEhpc3Rvcnkoe1xuICAgICAgd2luZG93OiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLndpbmRvd1xuICAgIH0pLFxuICAgIGh5ZHJhdGlvbkRhdGE6IChvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLmh5ZHJhdGlvbkRhdGEpIHx8IHBhcnNlSHlkcmF0aW9uRGF0YSgpLFxuICAgIHJvdXRlcyxcbiAgICBtYXBSb3V0ZVByb3BlcnRpZXM6IFVOU0FGRV9tYXBSb3V0ZVByb3BlcnRpZXMsXG4gICAgdW5zdGFibGVfZGF0YVN0cmF0ZWd5OiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLnVuc3RhYmxlX2RhdGFTdHJhdGVneSxcbiAgICB3aW5kb3c6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMud2luZG93XG4gIH0pLmluaXRpYWxpemUoKTtcbn1cbmZ1bmN0aW9uIHBhcnNlSHlkcmF0aW9uRGF0YSgpIHtcbiAgdmFyIF93aW5kb3c7XG4gIGxldCBzdGF0ZSA9IChfd2luZG93ID0gd2luZG93KSA9PSBudWxsID8gdm9pZCAwIDogX3dpbmRvdy5fX3N0YXRpY1JvdXRlckh5ZHJhdGlvbkRhdGE7XG4gIGlmIChzdGF0ZSAmJiBzdGF0ZS5lcnJvcnMpIHtcbiAgICBzdGF0ZSA9IF9leHRlbmRzKHt9LCBzdGF0ZSwge1xuICAgICAgZXJyb3JzOiBkZXNlcmlhbGl6ZUVycm9ycyhzdGF0ZS5lcnJvcnMpXG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHN0YXRlO1xufVxuZnVuY3Rpb24gZGVzZXJpYWxpemVFcnJvcnMoZXJyb3JzKSB7XG4gIGlmICghZXJyb3JzKSByZXR1cm4gbnVsbDtcbiAgbGV0IGVudHJpZXMgPSBPYmplY3QuZW50cmllcyhlcnJvcnMpO1xuICBsZXQgc2VyaWFsaXplZCA9IHt9O1xuICBmb3IgKGxldCBba2V5LCB2YWxdIG9mIGVudHJpZXMpIHtcbiAgICAvLyBIZXkgeW91ISAgSWYgeW91IGNoYW5nZSB0aGlzLCBwbGVhc2UgY2hhbmdlIHRoZSBjb3JyZXNwb25kaW5nIGxvZ2ljIGluXG4gICAgLy8gc2VyaWFsaXplRXJyb3JzIGluIHJlYWN0LXJvdXRlci1kb20vc2VydmVyLnRzeCA6KVxuICAgIGlmICh2YWwgJiYgdmFsLl9fdHlwZSA9PT0gXCJSb3V0ZUVycm9yUmVzcG9uc2VcIikge1xuICAgICAgc2VyaWFsaXplZFtrZXldID0gbmV3IFVOU0FGRV9FcnJvclJlc3BvbnNlSW1wbCh2YWwuc3RhdHVzLCB2YWwuc3RhdHVzVGV4dCwgdmFsLmRhdGEsIHZhbC5pbnRlcm5hbCA9PT0gdHJ1ZSk7XG4gICAgfSBlbHNlIGlmICh2YWwgJiYgdmFsLl9fdHlwZSA9PT0gXCJFcnJvclwiKSB7XG4gICAgICAvLyBBdHRlbXB0IHRvIHJlY29uc3RydWN0IHRoZSByaWdodCB0eXBlIG9mIEVycm9yIChpLmUuLCBSZWZlcmVuY2VFcnJvcilcbiAgICAgIGlmICh2YWwuX19zdWJUeXBlKSB7XG4gICAgICAgIGxldCBFcnJvckNvbnN0cnVjdG9yID0gd2luZG93W3ZhbC5fX3N1YlR5cGVdO1xuICAgICAgICBpZiAodHlwZW9mIEVycm9yQ29uc3RydWN0b3IgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICBsZXQgZXJyb3IgPSBuZXcgRXJyb3JDb25zdHJ1Y3Rvcih2YWwubWVzc2FnZSk7XG4gICAgICAgICAgICAvLyBXaXBlIGF3YXkgdGhlIGNsaWVudC1zaWRlIHN0YWNrIHRyYWNlLiAgTm90aGluZyB0byBmaWxsIGl0IGluIHdpdGhcbiAgICAgICAgICAgIC8vIGJlY2F1c2Ugd2UgZG9uJ3Qgc2VyaWFsaXplIFNTUiBzdGFjayB0cmFjZXMgZm9yIHNlY3VyaXR5IHJlYXNvbnNcbiAgICAgICAgICAgIGVycm9yLnN0YWNrID0gXCJcIjtcbiAgICAgICAgICAgIHNlcmlhbGl6ZWRba2V5XSA9IGVycm9yO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vIG5vLW9wIC0gZmFsbCB0aHJvdWdoIGFuZCBjcmVhdGUgYSBub3JtYWwgRXJyb3JcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzZXJpYWxpemVkW2tleV0gPT0gbnVsbCkge1xuICAgICAgICBsZXQgZXJyb3IgPSBuZXcgRXJyb3IodmFsLm1lc3NhZ2UpO1xuICAgICAgICAvLyBXaXBlIGF3YXkgdGhlIGNsaWVudC1zaWRlIHN0YWNrIHRyYWNlLiAgTm90aGluZyB0byBmaWxsIGl0IGluIHdpdGhcbiAgICAgICAgLy8gYmVjYXVzZSB3ZSBkb24ndCBzZXJpYWxpemUgU1NSIHN0YWNrIHRyYWNlcyBmb3Igc2VjdXJpdHkgcmVhc29uc1xuICAgICAgICBlcnJvci5zdGFjayA9IFwiXCI7XG4gICAgICAgIHNlcmlhbGl6ZWRba2V5XSA9IGVycm9yO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzZXJpYWxpemVkW2tleV0gPSB2YWw7XG4gICAgfVxuICB9XG4gIHJldHVybiBzZXJpYWxpemVkO1xufVxuY29uc3QgVmlld1RyYW5zaXRpb25Db250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQoe1xuICBpc1RyYW5zaXRpb25pbmc6IGZhbHNlXG59KTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgVmlld1RyYW5zaXRpb25Db250ZXh0LmRpc3BsYXlOYW1lID0gXCJWaWV3VHJhbnNpdGlvblwiO1xufVxuY29uc3QgRmV0Y2hlcnNDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobmV3IE1hcCgpKTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgRmV0Y2hlcnNDb250ZXh0LmRpc3BsYXlOYW1lID0gXCJGZXRjaGVyc1wiO1xufVxuLy8jZW5kcmVnaW9uXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8jcmVnaW9uIENvbXBvbmVudHNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vKipcbiAgV2VicGFjayArIFJlYWN0IDE3IGZhaWxzIHRvIGNvbXBpbGUgb24gYW55IG9mIHRoZSBmb2xsb3dpbmcgYmVjYXVzZSB3ZWJwYWNrXG4gIGNvbXBsYWlucyB0aGF0IGBzdGFydFRyYW5zaXRpb25gIGRvZXNuJ3QgZXhpc3QgaW4gYFJlYWN0YDpcbiAgKiBpbXBvcnQgeyBzdGFydFRyYW5zaXRpb24gfSBmcm9tIFwicmVhY3RcIlxuICAqIGltcG9ydCAqIGFzIFJlYWN0IGZyb20gZnJvbSBcInJlYWN0XCI7XG4gICAgXCJzdGFydFRyYW5zaXRpb25cIiBpbiBSZWFjdCA/IFJlYWN0LnN0YXJ0VHJhbnNpdGlvbigoKSA9PiBzZXRTdGF0ZSgpKSA6IHNldFN0YXRlKClcbiAgKiBpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIGZyb20gXCJyZWFjdFwiO1xuICAgIFwic3RhcnRUcmFuc2l0aW9uXCIgaW4gUmVhY3QgPyBSZWFjdFtcInN0YXJ0VHJhbnNpdGlvblwiXSgoKSA9PiBzZXRTdGF0ZSgpKSA6IHNldFN0YXRlKClcblxuICBNb3ZpbmcgaXQgdG8gYSBjb25zdGFudCBzdWNoIGFzIHRoZSBmb2xsb3dpbmcgc29sdmVzIHRoZSBXZWJwYWNrL1JlYWN0IDE3IGlzc3VlOlxuICAqIGltcG9ydCAqIGFzIFJlYWN0IGZyb20gZnJvbSBcInJlYWN0XCI7XG4gICAgY29uc3QgU1RBUlRfVFJBTlNJVElPTiA9IFwic3RhcnRUcmFuc2l0aW9uXCI7XG4gICAgU1RBUlRfVFJBTlNJVElPTiBpbiBSZWFjdCA/IFJlYWN0W1NUQVJUX1RSQU5TSVRJT05dKCgpID0+IHNldFN0YXRlKCkpIDogc2V0U3RhdGUoKVxuXG4gIEhvd2V2ZXIsIHRoYXQgaW50cm9kdWNlcyB3ZWJwYWNrL3RlcnNlciBtaW5pZmljYXRpb24gaXNzdWVzIGluIHByb2R1Y3Rpb24gYnVpbGRzXG4gIGluIFJlYWN0IDE4IHdoZXJlIG1pbmlmaWNhdGlvbi9vYmZ1c2NhdGlvbiBlbmRzIHVwIHJlbW92aW5nIHRoZSBjYWxsIG9mXG4gIFJlYWN0LnN0YXJ0VHJhbnNpdGlvbiBlbnRpcmVseSBmcm9tIHRoZSBmaXJzdCBoYWxmIG9mIHRoZSB0ZXJuYXJ5LiAgR3JhYmJpbmdcbiAgdGhpcyBleHBvcnRlZCByZWZlcmVuY2Ugb25jZSB1cCBmcm9udCByZXNvbHZlcyB0aGF0IGlzc3VlLlxuXG4gIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcmVtaXgtcnVuL3JlYWN0LXJvdXRlci9pc3N1ZXMvMTA1NzlcbiovXG5jb25zdCBTVEFSVF9UUkFOU0lUSU9OID0gXCJzdGFydFRyYW5zaXRpb25cIjtcbmNvbnN0IHN0YXJ0VHJhbnNpdGlvbkltcGwgPSBSZWFjdFtTVEFSVF9UUkFOU0lUSU9OXTtcbmNvbnN0IEZMVVNIX1NZTkMgPSBcImZsdXNoU3luY1wiO1xuY29uc3QgZmx1c2hTeW5jSW1wbCA9IFJlYWN0RE9NW0ZMVVNIX1NZTkNdO1xuY29uc3QgVVNFX0lEID0gXCJ1c2VJZFwiO1xuY29uc3QgdXNlSWRJbXBsID0gUmVhY3RbVVNFX0lEXTtcbmZ1bmN0aW9uIHN0YXJ0VHJhbnNpdGlvblNhZmUoY2IpIHtcbiAgaWYgKHN0YXJ0VHJhbnNpdGlvbkltcGwpIHtcbiAgICBzdGFydFRyYW5zaXRpb25JbXBsKGNiKTtcbiAgfSBlbHNlIHtcbiAgICBjYigpO1xuICB9XG59XG5mdW5jdGlvbiBmbHVzaFN5bmNTYWZlKGNiKSB7XG4gIGlmIChmbHVzaFN5bmNJbXBsKSB7XG4gICAgZmx1c2hTeW5jSW1wbChjYik7XG4gIH0gZWxzZSB7XG4gICAgY2IoKTtcbiAgfVxufVxuY2xhc3MgRGVmZXJyZWQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnN0YXR1cyA9IFwicGVuZGluZ1wiO1xuICAgIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMucmVzb2x2ZSA9IHZhbHVlID0+IHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdHVzID09PSBcInBlbmRpbmdcIikge1xuICAgICAgICAgIHRoaXMuc3RhdHVzID0gXCJyZXNvbHZlZFwiO1xuICAgICAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgdGhpcy5yZWplY3QgPSByZWFzb24gPT4ge1xuICAgICAgICBpZiAodGhpcy5zdGF0dXMgPT09IFwicGVuZGluZ1wiKSB7XG4gICAgICAgICAgdGhpcy5zdGF0dXMgPSBcInJlamVjdGVkXCI7XG4gICAgICAgICAgcmVqZWN0KHJlYXNvbik7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSk7XG4gIH1cbn1cbi8qKlxuICogR2l2ZW4gYSBSZW1peCBSb3V0ZXIgaW5zdGFuY2UsIHJlbmRlciB0aGUgYXBwcm9wcmlhdGUgVUlcbiAqL1xuZnVuY3Rpb24gUm91dGVyUHJvdmlkZXIoX3JlZikge1xuICBsZXQge1xuICAgIGZhbGxiYWNrRWxlbWVudCxcbiAgICByb3V0ZXIsXG4gICAgZnV0dXJlXG4gIH0gPSBfcmVmO1xuICBsZXQgW3N0YXRlLCBzZXRTdGF0ZUltcGxdID0gUmVhY3QudXNlU3RhdGUocm91dGVyLnN0YXRlKTtcbiAgbGV0IFtwZW5kaW5nU3RhdGUsIHNldFBlbmRpbmdTdGF0ZV0gPSBSZWFjdC51c2VTdGF0ZSgpO1xuICBsZXQgW3Z0Q29udGV4dCwgc2V0VnRDb250ZXh0XSA9IFJlYWN0LnVzZVN0YXRlKHtcbiAgICBpc1RyYW5zaXRpb25pbmc6IGZhbHNlXG4gIH0pO1xuICBsZXQgW3JlbmRlckRmZCwgc2V0UmVuZGVyRGZkXSA9IFJlYWN0LnVzZVN0YXRlKCk7XG4gIGxldCBbdHJhbnNpdGlvbiwgc2V0VHJhbnNpdGlvbl0gPSBSZWFjdC51c2VTdGF0ZSgpO1xuICBsZXQgW2ludGVycnVwdGlvbiwgc2V0SW50ZXJydXB0aW9uXSA9IFJlYWN0LnVzZVN0YXRlKCk7XG4gIGxldCBmZXRjaGVyRGF0YSA9IFJlYWN0LnVzZVJlZihuZXcgTWFwKCkpO1xuICBsZXQge1xuICAgIHY3X3N0YXJ0VHJhbnNpdGlvblxuICB9ID0gZnV0dXJlIHx8IHt9O1xuICBsZXQgb3B0SW5TdGFydFRyYW5zaXRpb24gPSBSZWFjdC51c2VDYWxsYmFjayhjYiA9PiB7XG4gICAgaWYgKHY3X3N0YXJ0VHJhbnNpdGlvbikge1xuICAgICAgc3RhcnRUcmFuc2l0aW9uU2FmZShjYik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNiKCk7XG4gICAgfVxuICB9LCBbdjdfc3RhcnRUcmFuc2l0aW9uXSk7XG4gIGxldCBzZXRTdGF0ZSA9IFJlYWN0LnVzZUNhbGxiYWNrKChuZXdTdGF0ZSwgX3JlZjIpID0+IHtcbiAgICBsZXQge1xuICAgICAgZGVsZXRlZEZldGNoZXJzLFxuICAgICAgdW5zdGFibGVfZmx1c2hTeW5jOiBmbHVzaFN5bmMsXG4gICAgICB1bnN0YWJsZV92aWV3VHJhbnNpdGlvbk9wdHM6IHZpZXdUcmFuc2l0aW9uT3B0c1xuICAgIH0gPSBfcmVmMjtcbiAgICBkZWxldGVkRmV0Y2hlcnMuZm9yRWFjaChrZXkgPT4gZmV0Y2hlckRhdGEuY3VycmVudC5kZWxldGUoa2V5KSk7XG4gICAgbmV3U3RhdGUuZmV0Y2hlcnMuZm9yRWFjaCgoZmV0Y2hlciwga2V5KSA9PiB7XG4gICAgICBpZiAoZmV0Y2hlci5kYXRhICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZmV0Y2hlckRhdGEuY3VycmVudC5zZXQoa2V5LCBmZXRjaGVyLmRhdGEpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGxldCBpc1ZpZXdUcmFuc2l0aW9uVW5hdmFpbGFibGUgPSByb3V0ZXIud2luZG93ID09IG51bGwgfHwgcm91dGVyLndpbmRvdy5kb2N1bWVudCA9PSBudWxsIHx8IHR5cGVvZiByb3V0ZXIud2luZG93LmRvY3VtZW50LnN0YXJ0Vmlld1RyYW5zaXRpb24gIT09IFwiZnVuY3Rpb25cIjtcbiAgICAvLyBJZiB0aGlzIGlzbid0IGEgdmlldyB0cmFuc2l0aW9uIG9yIGl0J3Mgbm90IGF2YWlsYWJsZSBpbiB0aGlzIGJyb3dzZXIsXG4gICAgLy8ganVzdCB1cGRhdGUgYW5kIGJlIGRvbmUgd2l0aCBpdFxuICAgIGlmICghdmlld1RyYW5zaXRpb25PcHRzIHx8IGlzVmlld1RyYW5zaXRpb25VbmF2YWlsYWJsZSkge1xuICAgICAgaWYgKGZsdXNoU3luYykge1xuICAgICAgICBmbHVzaFN5bmNTYWZlKCgpID0+IHNldFN0YXRlSW1wbChuZXdTdGF0ZSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3B0SW5TdGFydFRyYW5zaXRpb24oKCkgPT4gc2V0U3RhdGVJbXBsKG5ld1N0YXRlKSk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIGZsdXNoU3luYyArIHN0YXJ0Vmlld1RyYW5zaXRpb25cbiAgICBpZiAoZmx1c2hTeW5jKSB7XG4gICAgICAvLyBGbHVzaCB0aHJvdWdoIHRoZSBjb250ZXh0IHRvIG1hcmsgRE9NIGVsZW1lbnRzIGFzIHRyYW5zaXRpb249aW5nXG4gICAgICBmbHVzaFN5bmNTYWZlKCgpID0+IHtcbiAgICAgICAgLy8gQ2FuY2VsIGFueSBwZW5kaW5nIHRyYW5zaXRpb25zXG4gICAgICAgIGlmICh0cmFuc2l0aW9uKSB7XG4gICAgICAgICAgcmVuZGVyRGZkICYmIHJlbmRlckRmZC5yZXNvbHZlKCk7XG4gICAgICAgICAgdHJhbnNpdGlvbi5za2lwVHJhbnNpdGlvbigpO1xuICAgICAgICB9XG4gICAgICAgIHNldFZ0Q29udGV4dCh7XG4gICAgICAgICAgaXNUcmFuc2l0aW9uaW5nOiB0cnVlLFxuICAgICAgICAgIGZsdXNoU3luYzogdHJ1ZSxcbiAgICAgICAgICBjdXJyZW50TG9jYXRpb246IHZpZXdUcmFuc2l0aW9uT3B0cy5jdXJyZW50TG9jYXRpb24sXG4gICAgICAgICAgbmV4dExvY2F0aW9uOiB2aWV3VHJhbnNpdGlvbk9wdHMubmV4dExvY2F0aW9uXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICAvLyBVcGRhdGUgdGhlIERPTVxuICAgICAgbGV0IHQgPSByb3V0ZXIud2luZG93LmRvY3VtZW50LnN0YXJ0Vmlld1RyYW5zaXRpb24oKCkgPT4ge1xuICAgICAgICBmbHVzaFN5bmNTYWZlKCgpID0+IHNldFN0YXRlSW1wbChuZXdTdGF0ZSkpO1xuICAgICAgfSk7XG4gICAgICAvLyBDbGVhbiB1cCBhZnRlciB0aGUgYW5pbWF0aW9uIGNvbXBsZXRlc1xuICAgICAgdC5maW5pc2hlZC5maW5hbGx5KCgpID0+IHtcbiAgICAgICAgZmx1c2hTeW5jU2FmZSgoKSA9PiB7XG4gICAgICAgICAgc2V0UmVuZGVyRGZkKHVuZGVmaW5lZCk7XG4gICAgICAgICAgc2V0VHJhbnNpdGlvbih1bmRlZmluZWQpO1xuICAgICAgICAgIHNldFBlbmRpbmdTdGF0ZSh1bmRlZmluZWQpO1xuICAgICAgICAgIHNldFZ0Q29udGV4dCh7XG4gICAgICAgICAgICBpc1RyYW5zaXRpb25pbmc6IGZhbHNlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICBmbHVzaFN5bmNTYWZlKCgpID0+IHNldFRyYW5zaXRpb24odCkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBzdGFydFRyYW5zaXRpb24gKyBzdGFydFZpZXdUcmFuc2l0aW9uXG4gICAgaWYgKHRyYW5zaXRpb24pIHtcbiAgICAgIC8vIEludGVycnVwdGluZyBhbiBpbi1wcm9ncmVzcyB0cmFuc2l0aW9uLCBjYW5jZWwgYW5kIGxldCBldmVyeXRoaW5nIGZsdXNoXG4gICAgICAvLyBvdXQsIGFuZCB0aGVuIGtpY2sgb2ZmIGEgbmV3IHRyYW5zaXRpb24gZnJvbSB0aGUgaW50ZXJydXB0aW9uIHN0YXRlXG4gICAgICByZW5kZXJEZmQgJiYgcmVuZGVyRGZkLnJlc29sdmUoKTtcbiAgICAgIHRyYW5zaXRpb24uc2tpcFRyYW5zaXRpb24oKTtcbiAgICAgIHNldEludGVycnVwdGlvbih7XG4gICAgICAgIHN0YXRlOiBuZXdTdGF0ZSxcbiAgICAgICAgY3VycmVudExvY2F0aW9uOiB2aWV3VHJhbnNpdGlvbk9wdHMuY3VycmVudExvY2F0aW9uLFxuICAgICAgICBuZXh0TG9jYXRpb246IHZpZXdUcmFuc2l0aW9uT3B0cy5uZXh0TG9jYXRpb25cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBDb21wbGV0ZWQgbmF2aWdhdGlvbiB1cGRhdGUgd2l0aCBvcHRlZC1pbiB2aWV3IHRyYW5zaXRpb25zLCBsZXQgJ2VyIHJpcFxuICAgICAgc2V0UGVuZGluZ1N0YXRlKG5ld1N0YXRlKTtcbiAgICAgIHNldFZ0Q29udGV4dCh7XG4gICAgICAgIGlzVHJhbnNpdGlvbmluZzogdHJ1ZSxcbiAgICAgICAgZmx1c2hTeW5jOiBmYWxzZSxcbiAgICAgICAgY3VycmVudExvY2F0aW9uOiB2aWV3VHJhbnNpdGlvbk9wdHMuY3VycmVudExvY2F0aW9uLFxuICAgICAgICBuZXh0TG9jYXRpb246IHZpZXdUcmFuc2l0aW9uT3B0cy5uZXh0TG9jYXRpb25cbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgW3JvdXRlci53aW5kb3csIHRyYW5zaXRpb24sIHJlbmRlckRmZCwgZmV0Y2hlckRhdGEsIG9wdEluU3RhcnRUcmFuc2l0aW9uXSk7XG4gIC8vIE5lZWQgdG8gdXNlIGEgbGF5b3V0IGVmZmVjdCBoZXJlIHNvIHdlIGFyZSBzdWJzY3JpYmVkIGVhcmx5IGVub3VnaCB0b1xuICAvLyBwaWNrIHVwIG9uIGFueSByZW5kZXItZHJpdmVuIHJlZGlyZWN0cy9uYXZpZ2F0aW9ucyAodXNlRWZmZWN0LzxOYXZpZ2F0ZT4pXG4gIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiByb3V0ZXIuc3Vic2NyaWJlKHNldFN0YXRlKSwgW3JvdXRlciwgc2V0U3RhdGVdKTtcbiAgLy8gV2hlbiB3ZSBzdGFydCBhIHZpZXcgdHJhbnNpdGlvbiwgY3JlYXRlIGEgRGVmZXJyZWQgd2UgY2FuIHVzZSBmb3IgdGhlXG4gIC8vIGV2ZW50dWFsIFwiY29tcGxldGVkXCIgcmVuZGVyXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKHZ0Q29udGV4dC5pc1RyYW5zaXRpb25pbmcgJiYgIXZ0Q29udGV4dC5mbHVzaFN5bmMpIHtcbiAgICAgIHNldFJlbmRlckRmZChuZXcgRGVmZXJyZWQoKSk7XG4gICAgfVxuICB9LCBbdnRDb250ZXh0XSk7XG4gIC8vIE9uY2UgdGhlIGRlZmVycmVkIGlzIGNyZWF0ZWQsIGtpY2sgb2ZmIHN0YXJ0Vmlld1RyYW5zaXRpb24oKSB0byB1cGRhdGUgdGhlXG4gIC8vIERPTSBhbmQgdGhlbiB3YWl0IG9uIHRoZSBEZWZlcnJlZCB0byByZXNvbHZlIChpbmRpY2F0aW5nIHRoZSBET00gdXBkYXRlIGhhc1xuICAvLyBoYXBwZW5lZClcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAocmVuZGVyRGZkICYmIHBlbmRpbmdTdGF0ZSAmJiByb3V0ZXIud2luZG93KSB7XG4gICAgICBsZXQgbmV3U3RhdGUgPSBwZW5kaW5nU3RhdGU7XG4gICAgICBsZXQgcmVuZGVyUHJvbWlzZSA9IHJlbmRlckRmZC5wcm9taXNlO1xuICAgICAgbGV0IHRyYW5zaXRpb24gPSByb3V0ZXIud2luZG93LmRvY3VtZW50LnN0YXJ0Vmlld1RyYW5zaXRpb24oYXN5bmMgKCkgPT4ge1xuICAgICAgICBvcHRJblN0YXJ0VHJhbnNpdGlvbigoKSA9PiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpKTtcbiAgICAgICAgYXdhaXQgcmVuZGVyUHJvbWlzZTtcbiAgICAgIH0pO1xuICAgICAgdHJhbnNpdGlvbi5maW5pc2hlZC5maW5hbGx5KCgpID0+IHtcbiAgICAgICAgc2V0UmVuZGVyRGZkKHVuZGVmaW5lZCk7XG4gICAgICAgIHNldFRyYW5zaXRpb24odW5kZWZpbmVkKTtcbiAgICAgICAgc2V0UGVuZGluZ1N0YXRlKHVuZGVmaW5lZCk7XG4gICAgICAgIHNldFZ0Q29udGV4dCh7XG4gICAgICAgICAgaXNUcmFuc2l0aW9uaW5nOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgc2V0VHJhbnNpdGlvbih0cmFuc2l0aW9uKTtcbiAgICB9XG4gIH0sIFtvcHRJblN0YXJ0VHJhbnNpdGlvbiwgcGVuZGluZ1N0YXRlLCByZW5kZXJEZmQsIHJvdXRlci53aW5kb3ddKTtcbiAgLy8gV2hlbiB0aGUgbmV3IGxvY2F0aW9uIGZpbmFsbHkgcmVuZGVycyBhbmQgaXMgY29tbWl0dGVkIHRvIHRoZSBET00sIHRoaXNcbiAgLy8gZWZmZWN0IHdpbGwgcnVuIHRvIHJlc29sdmUgdGhlIHRyYW5zaXRpb25cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAocmVuZGVyRGZkICYmIHBlbmRpbmdTdGF0ZSAmJiBzdGF0ZS5sb2NhdGlvbi5rZXkgPT09IHBlbmRpbmdTdGF0ZS5sb2NhdGlvbi5rZXkpIHtcbiAgICAgIHJlbmRlckRmZC5yZXNvbHZlKCk7XG4gICAgfVxuICB9LCBbcmVuZGVyRGZkLCB0cmFuc2l0aW9uLCBzdGF0ZS5sb2NhdGlvbiwgcGVuZGluZ1N0YXRlXSk7XG4gIC8vIElmIHdlIGdldCBpbnRlcnJ1cHRlZCB3aXRoIGEgbmV3IG5hdmlnYXRpb24gZHVyaW5nIGEgdHJhbnNpdGlvbiwgd2Ugc2tpcFxuICAvLyB0aGUgYWN0aXZlIHRyYW5zaXRpb24sIGxldCBpdCBjbGVhbnVwLCB0aGVuIGtpY2sgaXQgb2ZmIGFnYWluIGhlcmVcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIXZ0Q29udGV4dC5pc1RyYW5zaXRpb25pbmcgJiYgaW50ZXJydXB0aW9uKSB7XG4gICAgICBzZXRQZW5kaW5nU3RhdGUoaW50ZXJydXB0aW9uLnN0YXRlKTtcbiAgICAgIHNldFZ0Q29udGV4dCh7XG4gICAgICAgIGlzVHJhbnNpdGlvbmluZzogdHJ1ZSxcbiAgICAgICAgZmx1c2hTeW5jOiBmYWxzZSxcbiAgICAgICAgY3VycmVudExvY2F0aW9uOiBpbnRlcnJ1cHRpb24uY3VycmVudExvY2F0aW9uLFxuICAgICAgICBuZXh0TG9jYXRpb246IGludGVycnVwdGlvbi5uZXh0TG9jYXRpb25cbiAgICAgIH0pO1xuICAgICAgc2V0SW50ZXJydXB0aW9uKHVuZGVmaW5lZCk7XG4gICAgfVxuICB9LCBbdnRDb250ZXh0LmlzVHJhbnNpdGlvbmluZywgaW50ZXJydXB0aW9uXSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX3dhcm5pbmcoZmFsbGJhY2tFbGVtZW50ID09IG51bGwgfHwgIXJvdXRlci5mdXR1cmUudjdfcGFydGlhbEh5ZHJhdGlvbiwgXCJgPFJvdXRlclByb3ZpZGVyIGZhbGxiYWNrRWxlbWVudD5gIGlzIGRlcHJlY2F0ZWQgd2hlbiB1c2luZyBcIiArIFwiYHY3X3BhcnRpYWxIeWRyYXRpb25gLCB1c2UgYSBgSHlkcmF0ZUZhbGxiYWNrYCBjb21wb25lbnQgaW5zdGVhZFwiKSA6IHZvaWQgMDtcbiAgICAvLyBPbmx5IGxvZyB0aGlzIG9uY2Ugb24gaW5pdGlhbCBtb3VudFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgfSwgW10pO1xuICBsZXQgbmF2aWdhdG9yID0gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNyZWF0ZUhyZWY6IHJvdXRlci5jcmVhdGVIcmVmLFxuICAgICAgZW5jb2RlTG9jYXRpb246IHJvdXRlci5lbmNvZGVMb2NhdGlvbixcbiAgICAgIGdvOiBuID0+IHJvdXRlci5uYXZpZ2F0ZShuKSxcbiAgICAgIHB1c2g6ICh0bywgc3RhdGUsIG9wdHMpID0+IHJvdXRlci5uYXZpZ2F0ZSh0bywge1xuICAgICAgICBzdGF0ZSxcbiAgICAgICAgcHJldmVudFNjcm9sbFJlc2V0OiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLnByZXZlbnRTY3JvbGxSZXNldFxuICAgICAgfSksXG4gICAgICByZXBsYWNlOiAodG8sIHN0YXRlLCBvcHRzKSA9PiByb3V0ZXIubmF2aWdhdGUodG8sIHtcbiAgICAgICAgcmVwbGFjZTogdHJ1ZSxcbiAgICAgICAgc3RhdGUsXG4gICAgICAgIHByZXZlbnRTY3JvbGxSZXNldDogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5wcmV2ZW50U2Nyb2xsUmVzZXRcbiAgICAgIH0pXG4gICAgfTtcbiAgfSwgW3JvdXRlcl0pO1xuICBsZXQgYmFzZW5hbWUgPSByb3V0ZXIuYmFzZW5hbWUgfHwgXCIvXCI7XG4gIGxldCBkYXRhUm91dGVyQ29udGV4dCA9IFJlYWN0LnVzZU1lbW8oKCkgPT4gKHtcbiAgICByb3V0ZXIsXG4gICAgbmF2aWdhdG9yLFxuICAgIHN0YXRpYzogZmFsc2UsXG4gICAgYmFzZW5hbWVcbiAgfSksIFtyb3V0ZXIsIG5hdmlnYXRvciwgYmFzZW5hbWVdKTtcbiAgLy8gVGhlIGZyYWdtZW50IGFuZCB7bnVsbH0gaGVyZSBhcmUgaW1wb3J0YW50ISAgV2UgbmVlZCB0aGVtIHRvIGtlZXAgUmVhY3QgMTgnc1xuICAvLyB1c2VJZCBoYXBweSB3aGVuIHdlIGFyZSBzZXJ2ZXItcmVuZGVyaW5nIHNpbmNlIHdlIG1heSBoYXZlIGEgPHNjcmlwdD4gaGVyZVxuICAvLyBjb250YWluaW5nIHRoZSBoeWRyYXRlZCBzZXJ2ZXItc2lkZSBzdGF0aWNDb250ZXh0IChmcm9tIFN0YXRpY1JvdXRlclByb3ZpZGVyKS5cbiAgLy8gdXNlSWQgcmVsaWVzIG9uIHRoZSBjb21wb25lbnQgdHJlZSBzdHJ1Y3R1cmUgdG8gZ2VuZXJhdGUgZGV0ZXJtaW5pc3RpYyBpZCdzXG4gIC8vIHNvIHdlIG5lZWQgdG8gZW5zdXJlIGl0IHJlbWFpbnMgdGhlIHNhbWUgb24gdGhlIGNsaWVudCBldmVuIHRob3VnaFxuICAvLyB3ZSBkb24ndCBuZWVkIHRoZSA8c2NyaXB0PiB0YWdcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChVTlNBRkVfRGF0YVJvdXRlckNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogZGF0YVJvdXRlckNvbnRleHRcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVU5TQUZFX0RhdGFSb3V0ZXJTdGF0ZUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogc3RhdGVcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRmV0Y2hlcnNDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGZldGNoZXJEYXRhLmN1cnJlbnRcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVmlld1RyYW5zaXRpb25Db250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHZ0Q29udGV4dFxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICBiYXNlbmFtZTogYmFzZW5hbWUsXG4gICAgbG9jYXRpb246IHN0YXRlLmxvY2F0aW9uLFxuICAgIG5hdmlnYXRpb25UeXBlOiBzdGF0ZS5oaXN0b3J5QWN0aW9uLFxuICAgIG5hdmlnYXRvcjogbmF2aWdhdG9yLFxuICAgIGZ1dHVyZToge1xuICAgICAgdjdfcmVsYXRpdmVTcGxhdFBhdGg6IHJvdXRlci5mdXR1cmUudjdfcmVsYXRpdmVTcGxhdFBhdGhcbiAgICB9XG4gIH0sIHN0YXRlLmluaXRpYWxpemVkIHx8IHJvdXRlci5mdXR1cmUudjdfcGFydGlhbEh5ZHJhdGlvbiA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KERhdGFSb3V0ZXMsIHtcbiAgICByb3V0ZXM6IHJvdXRlci5yb3V0ZXMsXG4gICAgZnV0dXJlOiByb3V0ZXIuZnV0dXJlLFxuICAgIHN0YXRlOiBzdGF0ZVxuICB9KSA6IGZhbGxiYWNrRWxlbWVudCkpKSkpLCBudWxsKTtcbn1cbmZ1bmN0aW9uIERhdGFSb3V0ZXMoX3JlZjMpIHtcbiAgbGV0IHtcbiAgICByb3V0ZXMsXG4gICAgZnV0dXJlLFxuICAgIHN0YXRlXG4gIH0gPSBfcmVmMztcbiAgcmV0dXJuIFVOU0FGRV91c2VSb3V0ZXNJbXBsKHJvdXRlcywgdW5kZWZpbmVkLCBzdGF0ZSwgZnV0dXJlKTtcbn1cbi8qKlxuICogQSBgPFJvdXRlcj5gIGZvciB1c2UgaW4gd2ViIGJyb3dzZXJzLiBQcm92aWRlcyB0aGUgY2xlYW5lc3QgVVJMcy5cbiAqL1xuZnVuY3Rpb24gQnJvd3NlclJvdXRlcihfcmVmNCkge1xuICBsZXQge1xuICAgIGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuLFxuICAgIGZ1dHVyZSxcbiAgICB3aW5kb3dcbiAgfSA9IF9yZWY0O1xuICBsZXQgaGlzdG9yeVJlZiA9IFJlYWN0LnVzZVJlZigpO1xuICBpZiAoaGlzdG9yeVJlZi5jdXJyZW50ID09IG51bGwpIHtcbiAgICBoaXN0b3J5UmVmLmN1cnJlbnQgPSBjcmVhdGVCcm93c2VySGlzdG9yeSh7XG4gICAgICB3aW5kb3csXG4gICAgICB2NUNvbXBhdDogdHJ1ZVxuICAgIH0pO1xuICB9XG4gIGxldCBoaXN0b3J5ID0gaGlzdG9yeVJlZi5jdXJyZW50O1xuICBsZXQgW3N0YXRlLCBzZXRTdGF0ZUltcGxdID0gUmVhY3QudXNlU3RhdGUoe1xuICAgIGFjdGlvbjogaGlzdG9yeS5hY3Rpb24sXG4gICAgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb25cbiAgfSk7XG4gIGxldCB7XG4gICAgdjdfc3RhcnRUcmFuc2l0aW9uXG4gIH0gPSBmdXR1cmUgfHwge307XG4gIGxldCBzZXRTdGF0ZSA9IFJlYWN0LnVzZUNhbGxiYWNrKG5ld1N0YXRlID0+IHtcbiAgICB2N19zdGFydFRyYW5zaXRpb24gJiYgc3RhcnRUcmFuc2l0aW9uSW1wbCA/IHN0YXJ0VHJhbnNpdGlvbkltcGwoKCkgPT4gc2V0U3RhdGVJbXBsKG5ld1N0YXRlKSkgOiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpO1xuICB9LCBbc2V0U3RhdGVJbXBsLCB2N19zdGFydFRyYW5zaXRpb25dKTtcbiAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KCgpID0+IGhpc3RvcnkubGlzdGVuKHNldFN0YXRlKSwgW2hpc3RvcnksIHNldFN0YXRlXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICBiYXNlbmFtZTogYmFzZW5hbWUsXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIGxvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICBuYXZpZ2F0aW9uVHlwZTogc3RhdGUuYWN0aW9uLFxuICAgIG5hdmlnYXRvcjogaGlzdG9yeSxcbiAgICBmdXR1cmU6IGZ1dHVyZVxuICB9KTtcbn1cbi8qKlxuICogQSBgPFJvdXRlcj5gIGZvciB1c2UgaW4gd2ViIGJyb3dzZXJzLiBTdG9yZXMgdGhlIGxvY2F0aW9uIGluIHRoZSBoYXNoXG4gKiBwb3J0aW9uIG9mIHRoZSBVUkwgc28gaXQgaXMgbm90IHNlbnQgdG8gdGhlIHNlcnZlci5cbiAqL1xuZnVuY3Rpb24gSGFzaFJvdXRlcihfcmVmNSkge1xuICBsZXQge1xuICAgIGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuLFxuICAgIGZ1dHVyZSxcbiAgICB3aW5kb3dcbiAgfSA9IF9yZWY1O1xuICBsZXQgaGlzdG9yeVJlZiA9IFJlYWN0LnVzZVJlZigpO1xuICBpZiAoaGlzdG9yeVJlZi5jdXJyZW50ID09IG51bGwpIHtcbiAgICBoaXN0b3J5UmVmLmN1cnJlbnQgPSBjcmVhdGVIYXNoSGlzdG9yeSh7XG4gICAgICB3aW5kb3csXG4gICAgICB2NUNvbXBhdDogdHJ1ZVxuICAgIH0pO1xuICB9XG4gIGxldCBoaXN0b3J5ID0gaGlzdG9yeVJlZi5jdXJyZW50O1xuICBsZXQgW3N0YXRlLCBzZXRTdGF0ZUltcGxdID0gUmVhY3QudXNlU3RhdGUoe1xuICAgIGFjdGlvbjogaGlzdG9yeS5hY3Rpb24sXG4gICAgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb25cbiAgfSk7XG4gIGxldCB7XG4gICAgdjdfc3RhcnRUcmFuc2l0aW9uXG4gIH0gPSBmdXR1cmUgfHwge307XG4gIGxldCBzZXRTdGF0ZSA9IFJlYWN0LnVzZUNhbGxiYWNrKG5ld1N0YXRlID0+IHtcbiAgICB2N19zdGFydFRyYW5zaXRpb24gJiYgc3RhcnRUcmFuc2l0aW9uSW1wbCA/IHN0YXJ0VHJhbnNpdGlvbkltcGwoKCkgPT4gc2V0U3RhdGVJbXBsKG5ld1N0YXRlKSkgOiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpO1xuICB9LCBbc2V0U3RhdGVJbXBsLCB2N19zdGFydFRyYW5zaXRpb25dKTtcbiAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KCgpID0+IGhpc3RvcnkubGlzdGVuKHNldFN0YXRlKSwgW2hpc3RvcnksIHNldFN0YXRlXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICBiYXNlbmFtZTogYmFzZW5hbWUsXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIGxvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICBuYXZpZ2F0aW9uVHlwZTogc3RhdGUuYWN0aW9uLFxuICAgIG5hdmlnYXRvcjogaGlzdG9yeSxcbiAgICBmdXR1cmU6IGZ1dHVyZVxuICB9KTtcbn1cbi8qKlxuICogQSBgPFJvdXRlcj5gIHRoYXQgYWNjZXB0cyBhIHByZS1pbnN0YW50aWF0ZWQgaGlzdG9yeSBvYmplY3QuIEl0J3MgaW1wb3J0YW50XG4gKiB0byBub3RlIHRoYXQgdXNpbmcgeW91ciBvd24gaGlzdG9yeSBvYmplY3QgaXMgaGlnaGx5IGRpc2NvdXJhZ2VkIGFuZCBtYXkgYWRkXG4gKiB0d28gdmVyc2lvbnMgb2YgdGhlIGhpc3RvcnkgbGlicmFyeSB0byB5b3VyIGJ1bmRsZXMgdW5sZXNzIHlvdSB1c2UgdGhlIHNhbWVcbiAqIHZlcnNpb24gb2YgdGhlIGhpc3RvcnkgbGlicmFyeSB0aGF0IFJlYWN0IFJvdXRlciB1c2VzIGludGVybmFsbHkuXG4gKi9cbmZ1bmN0aW9uIEhpc3RvcnlSb3V0ZXIoX3JlZjYpIHtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZSxcbiAgICBjaGlsZHJlbixcbiAgICBmdXR1cmUsXG4gICAgaGlzdG9yeVxuICB9ID0gX3JlZjY7XG4gIGxldCBbc3RhdGUsIHNldFN0YXRlSW1wbF0gPSBSZWFjdC51c2VTdGF0ZSh7XG4gICAgYWN0aW9uOiBoaXN0b3J5LmFjdGlvbixcbiAgICBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvblxuICB9KTtcbiAgbGV0IHtcbiAgICB2N19zdGFydFRyYW5zaXRpb25cbiAgfSA9IGZ1dHVyZSB8fCB7fTtcbiAgbGV0IHNldFN0YXRlID0gUmVhY3QudXNlQ2FsbGJhY2sobmV3U3RhdGUgPT4ge1xuICAgIHY3X3N0YXJ0VHJhbnNpdGlvbiAmJiBzdGFydFRyYW5zaXRpb25JbXBsID8gc3RhcnRUcmFuc2l0aW9uSW1wbCgoKSA9PiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpKSA6IHNldFN0YXRlSW1wbChuZXdTdGF0ZSk7XG4gIH0sIFtzZXRTdGF0ZUltcGwsIHY3X3N0YXJ0VHJhbnNpdGlvbl0pO1xuICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4gaGlzdG9yeS5saXN0ZW4oc2V0U3RhdGUpLCBbaGlzdG9yeSwgc2V0U3RhdGVdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgIGJhc2VuYW1lOiBiYXNlbmFtZSxcbiAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgbG9jYXRpb246IHN0YXRlLmxvY2F0aW9uLFxuICAgIG5hdmlnYXRpb25UeXBlOiBzdGF0ZS5hY3Rpb24sXG4gICAgbmF2aWdhdG9yOiBoaXN0b3J5LFxuICAgIGZ1dHVyZTogZnV0dXJlXG4gIH0pO1xufVxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBIaXN0b3J5Um91dGVyLmRpc3BsYXlOYW1lID0gXCJ1bnN0YWJsZV9IaXN0b3J5Um91dGVyXCI7XG59XG5jb25zdCBpc0Jyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50ICE9PSBcInVuZGVmaW5lZFwiO1xuY29uc3QgQUJTT0xVVEVfVVJMX1JFR0VYID0gL14oPzpbYS16XVthLXowLTkrLi1dKjp8XFwvXFwvKS9pO1xuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcmVuZGVyaW5nIGEgaGlzdG9yeS1hd2FyZSBgPGE+YC5cbiAqL1xuY29uc3QgTGluayA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIExpbmtXaXRoUmVmKF9yZWY3LCByZWYpIHtcbiAgbGV0IHtcbiAgICAgIG9uQ2xpY2ssXG4gICAgICByZWxhdGl2ZSxcbiAgICAgIHJlbG9hZERvY3VtZW50LFxuICAgICAgcmVwbGFjZSxcbiAgICAgIHN0YXRlLFxuICAgICAgdGFyZ2V0LFxuICAgICAgdG8sXG4gICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgICB1bnN0YWJsZV92aWV3VHJhbnNpdGlvblxuICAgIH0gPSBfcmVmNyxcbiAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjcsIF9leGNsdWRlZCk7XG4gIGxldCB7XG4gICAgYmFzZW5hbWVcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoVU5TQUZFX05hdmlnYXRpb25Db250ZXh0KTtcbiAgLy8gUmVuZGVyZWQgaW50byA8YSBocmVmPiBmb3IgYWJzb2x1dGUgVVJMc1xuICBsZXQgYWJzb2x1dGVIcmVmO1xuICBsZXQgaXNFeHRlcm5hbCA9IGZhbHNlO1xuICBpZiAodHlwZW9mIHRvID09PSBcInN0cmluZ1wiICYmIEFCU09MVVRFX1VSTF9SRUdFWC50ZXN0KHRvKSkge1xuICAgIC8vIFJlbmRlciB0aGUgYWJzb2x1dGUgaHJlZiBzZXJ2ZXItIGFuZCBjbGllbnQtc2lkZVxuICAgIGFic29sdXRlSHJlZiA9IHRvO1xuICAgIC8vIE9ubHkgY2hlY2sgZm9yIGV4dGVybmFsIG9yaWdpbnMgY2xpZW50LXNpZGVcbiAgICBpZiAoaXNCcm93c2VyKSB7XG4gICAgICB0cnkge1xuICAgICAgICBsZXQgY3VycmVudFVybCA9IG5ldyBVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuICAgICAgICBsZXQgdGFyZ2V0VXJsID0gdG8uc3RhcnRzV2l0aChcIi8vXCIpID8gbmV3IFVSTChjdXJyZW50VXJsLnByb3RvY29sICsgdG8pIDogbmV3IFVSTCh0byk7XG4gICAgICAgIGxldCBwYXRoID0gc3RyaXBCYXNlbmFtZSh0YXJnZXRVcmwucGF0aG5hbWUsIGJhc2VuYW1lKTtcbiAgICAgICAgaWYgKHRhcmdldFVybC5vcmlnaW4gPT09IGN1cnJlbnRVcmwub3JpZ2luICYmIHBhdGggIT0gbnVsbCkge1xuICAgICAgICAgIC8vIFN0cmlwIHRoZSBwcm90b2NvbC9vcmlnaW4vYmFzZW5hbWUgZm9yIHNhbWUtb3JpZ2luIGFic29sdXRlIFVSTHNcbiAgICAgICAgICB0byA9IHBhdGggKyB0YXJnZXRVcmwuc2VhcmNoICsgdGFyZ2V0VXJsLmhhc2g7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXNFeHRlcm5hbCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gV2UgY2FuJ3QgZG8gZXh0ZXJuYWwgVVJMIGRldGVjdGlvbiB3aXRob3V0IGEgdmFsaWQgVVJMXG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKGZhbHNlLCBcIjxMaW5rIHRvPVxcXCJcIiArIHRvICsgXCJcXFwiPiBjb250YWlucyBhbiBpbnZhbGlkIFVSTCB3aGljaCB3aWxsIHByb2JhYmx5IGJyZWFrIFwiICsgXCJ3aGVuIGNsaWNrZWQgLSBwbGVhc2UgdXBkYXRlIHRvIGEgdmFsaWQgVVJMIHBhdGguXCIpIDogdm9pZCAwO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvLyBSZW5kZXJlZCBpbnRvIDxhIGhyZWY+IGZvciByZWxhdGl2ZSBVUkxzXG4gIGxldCBocmVmID0gdXNlSHJlZih0bywge1xuICAgIHJlbGF0aXZlXG4gIH0pO1xuICBsZXQgaW50ZXJuYWxPbkNsaWNrID0gdXNlTGlua0NsaWNrSGFuZGxlcih0bywge1xuICAgIHJlcGxhY2UsXG4gICAgc3RhdGUsXG4gICAgdGFyZ2V0LFxuICAgIHByZXZlbnRTY3JvbGxSZXNldCxcbiAgICByZWxhdGl2ZSxcbiAgICB1bnN0YWJsZV92aWV3VHJhbnNpdGlvblxuICB9KTtcbiAgZnVuY3Rpb24gaGFuZGxlQ2xpY2soZXZlbnQpIHtcbiAgICBpZiAob25DbGljaykgb25DbGljayhldmVudCk7XG4gICAgaWYgKCFldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICBpbnRlcm5hbE9uQ2xpY2soZXZlbnQpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gKFxuICAgIC8qI19fUFVSRV9fKi9cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUganN4LWExMXkvYW5jaG9yLWhhcy1jb250ZW50XG4gICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImFcIiwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICAgIGhyZWY6IGFic29sdXRlSHJlZiB8fCBocmVmLFxuICAgICAgb25DbGljazogaXNFeHRlcm5hbCB8fCByZWxvYWREb2N1bWVudCA/IG9uQ2xpY2sgOiBoYW5kbGVDbGljayxcbiAgICAgIHJlZjogcmVmLFxuICAgICAgdGFyZ2V0OiB0YXJnZXRcbiAgICB9KSlcbiAgKTtcbn0pO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBMaW5rLmRpc3BsYXlOYW1lID0gXCJMaW5rXCI7XG59XG4vKipcbiAqIEEgYDxMaW5rPmAgd3JhcHBlciB0aGF0IGtub3dzIGlmIGl0J3MgXCJhY3RpdmVcIiBvciBub3QuXG4gKi9cbmNvbnN0IE5hdkxpbmsgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBOYXZMaW5rV2l0aFJlZihfcmVmOCwgcmVmKSB7XG4gIGxldCB7XG4gICAgICBcImFyaWEtY3VycmVudFwiOiBhcmlhQ3VycmVudFByb3AgPSBcInBhZ2VcIixcbiAgICAgIGNhc2VTZW5zaXRpdmUgPSBmYWxzZSxcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lUHJvcCA9IFwiXCIsXG4gICAgICBlbmQgPSBmYWxzZSxcbiAgICAgIHN0eWxlOiBzdHlsZVByb3AsXG4gICAgICB0byxcbiAgICAgIHVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uLFxuICAgICAgY2hpbGRyZW5cbiAgICB9ID0gX3JlZjgsXG4gICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWY4LCBfZXhjbHVkZWQyKTtcbiAgbGV0IHBhdGggPSB1c2VSZXNvbHZlZFBhdGgodG8sIHtcbiAgICByZWxhdGl2ZTogcmVzdC5yZWxhdGl2ZVxuICB9KTtcbiAgbGV0IGxvY2F0aW9uID0gdXNlTG9jYXRpb24oKTtcbiAgbGV0IHJvdXRlclN0YXRlID0gUmVhY3QudXNlQ29udGV4dChVTlNBRkVfRGF0YVJvdXRlclN0YXRlQ29udGV4dCk7XG4gIGxldCB7XG4gICAgbmF2aWdhdG9yLFxuICAgIGJhc2VuYW1lXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9OYXZpZ2F0aW9uQ29udGV4dCk7XG4gIGxldCBpc1RyYW5zaXRpb25pbmcgPSByb3V0ZXJTdGF0ZSAhPSBudWxsICYmXG4gIC8vIENvbmRpdGlvbmFsIHVzYWdlIGlzIE9LIGhlcmUgYmVjYXVzZSB0aGUgdXNhZ2Ugb2YgYSBkYXRhIHJvdXRlciBpcyBzdGF0aWNcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gIHVzZVZpZXdUcmFuc2l0aW9uU3RhdGUocGF0aCkgJiYgdW5zdGFibGVfdmlld1RyYW5zaXRpb24gPT09IHRydWU7XG4gIGxldCB0b1BhdGhuYW1lID0gbmF2aWdhdG9yLmVuY29kZUxvY2F0aW9uID8gbmF2aWdhdG9yLmVuY29kZUxvY2F0aW9uKHBhdGgpLnBhdGhuYW1lIDogcGF0aC5wYXRobmFtZTtcbiAgbGV0IGxvY2F0aW9uUGF0aG5hbWUgPSBsb2NhdGlvbi5wYXRobmFtZTtcbiAgbGV0IG5leHRMb2NhdGlvblBhdGhuYW1lID0gcm91dGVyU3RhdGUgJiYgcm91dGVyU3RhdGUubmF2aWdhdGlvbiAmJiByb3V0ZXJTdGF0ZS5uYXZpZ2F0aW9uLmxvY2F0aW9uID8gcm91dGVyU3RhdGUubmF2aWdhdGlvbi5sb2NhdGlvbi5wYXRobmFtZSA6IG51bGw7XG4gIGlmICghY2FzZVNlbnNpdGl2ZSkge1xuICAgIGxvY2F0aW9uUGF0aG5hbWUgPSBsb2NhdGlvblBhdGhuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgbmV4dExvY2F0aW9uUGF0aG5hbWUgPSBuZXh0TG9jYXRpb25QYXRobmFtZSA/IG5leHRMb2NhdGlvblBhdGhuYW1lLnRvTG93ZXJDYXNlKCkgOiBudWxsO1xuICAgIHRvUGF0aG5hbWUgPSB0b1BhdGhuYW1lLnRvTG93ZXJDYXNlKCk7XG4gIH1cbiAgaWYgKG5leHRMb2NhdGlvblBhdGhuYW1lICYmIGJhc2VuYW1lKSB7XG4gICAgbmV4dExvY2F0aW9uUGF0aG5hbWUgPSBzdHJpcEJhc2VuYW1lKG5leHRMb2NhdGlvblBhdGhuYW1lLCBiYXNlbmFtZSkgfHwgbmV4dExvY2F0aW9uUGF0aG5hbWU7XG4gIH1cbiAgLy8gSWYgdGhlIGB0b2AgaGFzIGEgdHJhaWxpbmcgc2xhc2gsIGxvb2sgYXQgdGhhdCBleGFjdCBzcG90LiAgT3RoZXJ3aXNlLFxuICAvLyB3ZSdyZSBsb29raW5nIGZvciBhIHNsYXNoIF9hZnRlcl8gd2hhdCdzIGluIGB0b2AuICBGb3IgZXhhbXBsZTpcbiAgLy9cbiAgLy8gPE5hdkxpbmsgdG89XCIvdXNlcnNcIj4gYW5kIDxOYXZMaW5rIHRvPVwiL3VzZXJzL1wiPlxuICAvLyBib3RoIHdhbnQgdG8gbG9vayBmb3IgYSAvIGF0IGluZGV4IDYgdG8gbWF0Y2ggVVJMIGAvdXNlcnMvbWF0dGBcbiAgY29uc3QgZW5kU2xhc2hQb3NpdGlvbiA9IHRvUGF0aG5hbWUgIT09IFwiL1wiICYmIHRvUGF0aG5hbWUuZW5kc1dpdGgoXCIvXCIpID8gdG9QYXRobmFtZS5sZW5ndGggLSAxIDogdG9QYXRobmFtZS5sZW5ndGg7XG4gIGxldCBpc0FjdGl2ZSA9IGxvY2F0aW9uUGF0aG5hbWUgPT09IHRvUGF0aG5hbWUgfHwgIWVuZCAmJiBsb2NhdGlvblBhdGhuYW1lLnN0YXJ0c1dpdGgodG9QYXRobmFtZSkgJiYgbG9jYXRpb25QYXRobmFtZS5jaGFyQXQoZW5kU2xhc2hQb3NpdGlvbikgPT09IFwiL1wiO1xuICBsZXQgaXNQZW5kaW5nID0gbmV4dExvY2F0aW9uUGF0aG5hbWUgIT0gbnVsbCAmJiAobmV4dExvY2F0aW9uUGF0aG5hbWUgPT09IHRvUGF0aG5hbWUgfHwgIWVuZCAmJiBuZXh0TG9jYXRpb25QYXRobmFtZS5zdGFydHNXaXRoKHRvUGF0aG5hbWUpICYmIG5leHRMb2NhdGlvblBhdGhuYW1lLmNoYXJBdCh0b1BhdGhuYW1lLmxlbmd0aCkgPT09IFwiL1wiKTtcbiAgbGV0IHJlbmRlclByb3BzID0ge1xuICAgIGlzQWN0aXZlLFxuICAgIGlzUGVuZGluZyxcbiAgICBpc1RyYW5zaXRpb25pbmdcbiAgfTtcbiAgbGV0IGFyaWFDdXJyZW50ID0gaXNBY3RpdmUgPyBhcmlhQ3VycmVudFByb3AgOiB1bmRlZmluZWQ7XG4gIGxldCBjbGFzc05hbWU7XG4gIGlmICh0eXBlb2YgY2xhc3NOYW1lUHJvcCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgY2xhc3NOYW1lID0gY2xhc3NOYW1lUHJvcChyZW5kZXJQcm9wcyk7XG4gIH0gZWxzZSB7XG4gICAgLy8gSWYgdGhlIGNsYXNzTmFtZSBwcm9wIGlzIG5vdCBhIGZ1bmN0aW9uLCB3ZSB1c2UgYSBkZWZhdWx0IGBhY3RpdmVgXG4gICAgLy8gY2xhc3MgZm9yIDxOYXZMaW5rIC8+cyB0aGF0IGFyZSBhY3RpdmUuIEluIHY1IGBhY3RpdmVgIHdhcyB0aGUgZGVmYXVsdFxuICAgIC8vIHZhbHVlIGZvciBgYWN0aXZlQ2xhc3NOYW1lYCwgYnV0IHdlIGFyZSByZW1vdmluZyB0aGF0IEFQSSBhbmQgY2FuIHN0aWxsXG4gICAgLy8gdXNlIHRoZSBvbGQgZGVmYXVsdCBiZWhhdmlvciBmb3IgYSBjbGVhbmVyIHVwZ3JhZGUgcGF0aCBhbmQga2VlcCB0aGVcbiAgICAvLyBzaW1wbGUgc3R5bGluZyBydWxlcyB3b3JraW5nIGFzIHRoZXkgY3VycmVudGx5IGRvLlxuICAgIGNsYXNzTmFtZSA9IFtjbGFzc05hbWVQcm9wLCBpc0FjdGl2ZSA/IFwiYWN0aXZlXCIgOiBudWxsLCBpc1BlbmRpbmcgPyBcInBlbmRpbmdcIiA6IG51bGwsIGlzVHJhbnNpdGlvbmluZyA/IFwidHJhbnNpdGlvbmluZ1wiIDogbnVsbF0uZmlsdGVyKEJvb2xlYW4pLmpvaW4oXCIgXCIpO1xuICB9XG4gIGxldCBzdHlsZSA9IHR5cGVvZiBzdHlsZVByb3AgPT09IFwiZnVuY3Rpb25cIiA/IHN0eWxlUHJvcChyZW5kZXJQcm9wcykgOiBzdHlsZVByb3A7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChMaW5rLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgIFwiYXJpYS1jdXJyZW50XCI6IGFyaWFDdXJyZW50LFxuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgIHJlZjogcmVmLFxuICAgIHN0eWxlOiBzdHlsZSxcbiAgICB0bzogdG8sXG4gICAgdW5zdGFibGVfdmlld1RyYW5zaXRpb246IHVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uXG4gIH0pLCB0eXBlb2YgY2hpbGRyZW4gPT09IFwiZnVuY3Rpb25cIiA/IGNoaWxkcmVuKHJlbmRlclByb3BzKSA6IGNoaWxkcmVuKTtcbn0pO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBOYXZMaW5rLmRpc3BsYXlOYW1lID0gXCJOYXZMaW5rXCI7XG59XG4vKipcbiAqIEEgYEByZW1peC1ydW4vcm91dGVyYC1hd2FyZSBgPGZvcm0+YC4gSXQgYmVoYXZlcyBsaWtlIGEgbm9ybWFsIGZvcm0gZXhjZXB0XG4gKiB0aGF0IHRoZSBpbnRlcmFjdGlvbiB3aXRoIHRoZSBzZXJ2ZXIgaXMgd2l0aCBgZmV0Y2hgIGluc3RlYWQgb2YgbmV3IGRvY3VtZW50XG4gKiByZXF1ZXN0cywgYWxsb3dpbmcgY29tcG9uZW50cyB0byBhZGQgbmljZXIgVVggdG8gdGhlIHBhZ2UgYXMgdGhlIGZvcm0gaXNcbiAqIHN1Ym1pdHRlZCBhbmQgcmV0dXJucyB3aXRoIGRhdGEuXG4gKi9cbmNvbnN0IEZvcm0gPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZigoX3JlZjksIGZvcndhcmRlZFJlZikgPT4ge1xuICBsZXQge1xuICAgICAgZmV0Y2hlcktleSxcbiAgICAgIG5hdmlnYXRlLFxuICAgICAgcmVsb2FkRG9jdW1lbnQsXG4gICAgICByZXBsYWNlLFxuICAgICAgc3RhdGUsXG4gICAgICBtZXRob2QgPSBkZWZhdWx0TWV0aG9kLFxuICAgICAgYWN0aW9uLFxuICAgICAgb25TdWJtaXQsXG4gICAgICByZWxhdGl2ZSxcbiAgICAgIHByZXZlbnRTY3JvbGxSZXNldCxcbiAgICAgIHVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uXG4gICAgfSA9IF9yZWY5LFxuICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjksIF9leGNsdWRlZDMpO1xuICBsZXQgc3VibWl0ID0gdXNlU3VibWl0KCk7XG4gIGxldCBmb3JtQWN0aW9uID0gdXNlRm9ybUFjdGlvbihhY3Rpb24sIHtcbiAgICByZWxhdGl2ZVxuICB9KTtcbiAgbGV0IGZvcm1NZXRob2QgPSBtZXRob2QudG9Mb3dlckNhc2UoKSA9PT0gXCJnZXRcIiA/IFwiZ2V0XCIgOiBcInBvc3RcIjtcbiAgbGV0IHN1Ym1pdEhhbmRsZXIgPSBldmVudCA9PiB7XG4gICAgb25TdWJtaXQgJiYgb25TdWJtaXQoZXZlbnQpO1xuICAgIGlmIChldmVudC5kZWZhdWx0UHJldmVudGVkKSByZXR1cm47XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBsZXQgc3VibWl0dGVyID0gZXZlbnQubmF0aXZlRXZlbnQuc3VibWl0dGVyO1xuICAgIGxldCBzdWJtaXRNZXRob2QgPSAoc3VibWl0dGVyID09IG51bGwgPyB2b2lkIDAgOiBzdWJtaXR0ZXIuZ2V0QXR0cmlidXRlKFwiZm9ybW1ldGhvZFwiKSkgfHwgbWV0aG9kO1xuICAgIHN1Ym1pdChzdWJtaXR0ZXIgfHwgZXZlbnQuY3VycmVudFRhcmdldCwge1xuICAgICAgZmV0Y2hlcktleSxcbiAgICAgIG1ldGhvZDogc3VibWl0TWV0aG9kLFxuICAgICAgbmF2aWdhdGUsXG4gICAgICByZXBsYWNlLFxuICAgICAgc3RhdGUsXG4gICAgICByZWxhdGl2ZSxcbiAgICAgIHByZXZlbnRTY3JvbGxSZXNldCxcbiAgICAgIHVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uXG4gICAgfSk7XG4gIH07XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImZvcm1cIiwgX2V4dGVuZHMoe1xuICAgIHJlZjogZm9yd2FyZGVkUmVmLFxuICAgIG1ldGhvZDogZm9ybU1ldGhvZCxcbiAgICBhY3Rpb246IGZvcm1BY3Rpb24sXG4gICAgb25TdWJtaXQ6IHJlbG9hZERvY3VtZW50ID8gb25TdWJtaXQgOiBzdWJtaXRIYW5kbGVyXG4gIH0sIHByb3BzKSk7XG59KTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgRm9ybS5kaXNwbGF5TmFtZSA9IFwiRm9ybVwiO1xufVxuLyoqXG4gKiBUaGlzIGNvbXBvbmVudCB3aWxsIGVtdWxhdGUgdGhlIGJyb3dzZXIncyBzY3JvbGwgcmVzdG9yYXRpb24gb24gbG9jYXRpb25cbiAqIGNoYW5nZXMuXG4gKi9cbmZ1bmN0aW9uIFNjcm9sbFJlc3RvcmF0aW9uKF9yZWYxMCkge1xuICBsZXQge1xuICAgIGdldEtleSxcbiAgICBzdG9yYWdlS2V5XG4gIH0gPSBfcmVmMTA7XG4gIHVzZVNjcm9sbFJlc3RvcmF0aW9uKHtcbiAgICBnZXRLZXksXG4gICAgc3RvcmFnZUtleVxuICB9KTtcbiAgcmV0dXJuIG51bGw7XG59XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFNjcm9sbFJlc3RvcmF0aW9uLmRpc3BsYXlOYW1lID0gXCJTY3JvbGxSZXN0b3JhdGlvblwiO1xufVxuLy8jZW5kcmVnaW9uXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8jcmVnaW9uIEhvb2tzXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xudmFyIERhdGFSb3V0ZXJIb29rO1xuKGZ1bmN0aW9uIChEYXRhUm91dGVySG9vaykge1xuICBEYXRhUm91dGVySG9va1tcIlVzZVNjcm9sbFJlc3RvcmF0aW9uXCJdID0gXCJ1c2VTY3JvbGxSZXN0b3JhdGlvblwiO1xuICBEYXRhUm91dGVySG9va1tcIlVzZVN1Ym1pdFwiXSA9IFwidXNlU3VibWl0XCI7XG4gIERhdGFSb3V0ZXJIb29rW1wiVXNlU3VibWl0RmV0Y2hlclwiXSA9IFwidXNlU3VibWl0RmV0Y2hlclwiO1xuICBEYXRhUm91dGVySG9va1tcIlVzZUZldGNoZXJcIl0gPSBcInVzZUZldGNoZXJcIjtcbiAgRGF0YVJvdXRlckhvb2tbXCJ1c2VWaWV3VHJhbnNpdGlvblN0YXRlXCJdID0gXCJ1c2VWaWV3VHJhbnNpdGlvblN0YXRlXCI7XG59KShEYXRhUm91dGVySG9vayB8fCAoRGF0YVJvdXRlckhvb2sgPSB7fSkpO1xudmFyIERhdGFSb3V0ZXJTdGF0ZUhvb2s7XG4oZnVuY3Rpb24gKERhdGFSb3V0ZXJTdGF0ZUhvb2spIHtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZUZldGNoZXJcIl0gPSBcInVzZUZldGNoZXJcIjtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZUZldGNoZXJzXCJdID0gXCJ1c2VGZXRjaGVyc1wiO1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlU2Nyb2xsUmVzdG9yYXRpb25cIl0gPSBcInVzZVNjcm9sbFJlc3RvcmF0aW9uXCI7XG59KShEYXRhUm91dGVyU3RhdGVIb29rIHx8IChEYXRhUm91dGVyU3RhdGVIb29rID0ge30pKTtcbi8vIEludGVybmFsIGhvb2tzXG5mdW5jdGlvbiBnZXREYXRhUm91dGVyQ29uc29sZUVycm9yKGhvb2tOYW1lKSB7XG4gIHJldHVybiBob29rTmFtZSArIFwiIG11c3QgYmUgdXNlZCB3aXRoaW4gYSBkYXRhIHJvdXRlci4gIFNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9yb3V0ZXJzL3BpY2tpbmctYS1yb3V0ZXIuXCI7XG59XG5mdW5jdGlvbiB1c2VEYXRhUm91dGVyQ29udGV4dChob29rTmFtZSkge1xuICBsZXQgY3R4ID0gUmVhY3QudXNlQ29udGV4dChVTlNBRkVfRGF0YVJvdXRlckNvbnRleHQpO1xuICAhY3R4ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgZ2V0RGF0YVJvdXRlckNvbnNvbGVFcnJvcihob29rTmFtZSkpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiBjdHg7XG59XG5mdW5jdGlvbiB1c2VEYXRhUm91dGVyU3RhdGUoaG9va05hbWUpIHtcbiAgbGV0IHN0YXRlID0gUmVhY3QudXNlQ29udGV4dChVTlNBRkVfRGF0YVJvdXRlclN0YXRlQ29udGV4dCk7XG4gICFzdGF0ZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIGdldERhdGFSb3V0ZXJDb25zb2xlRXJyb3IoaG9va05hbWUpKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gc3RhdGU7XG59XG4vLyBFeHRlcm5hbCBob29rc1xuLyoqXG4gKiBIYW5kbGVzIHRoZSBjbGljayBiZWhhdmlvciBmb3Igcm91dGVyIGA8TGluaz5gIGNvbXBvbmVudHMuIFRoaXMgaXMgdXNlZnVsIGlmXG4gKiB5b3UgbmVlZCB0byBjcmVhdGUgY3VzdG9tIGA8TGluaz5gIGNvbXBvbmVudHMgd2l0aCB0aGUgc2FtZSBjbGljayBiZWhhdmlvciB3ZVxuICogdXNlIGluIG91ciBleHBvcnRlZCBgPExpbms+YC5cbiAqL1xuZnVuY3Rpb24gdXNlTGlua0NsaWNrSGFuZGxlcih0bywgX3RlbXApIHtcbiAgbGV0IHtcbiAgICB0YXJnZXQsXG4gICAgcmVwbGFjZTogcmVwbGFjZVByb3AsXG4gICAgc3RhdGUsXG4gICAgcHJldmVudFNjcm9sbFJlc2V0LFxuICAgIHJlbGF0aXZlLFxuICAgIHVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uXG4gIH0gPSBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDtcbiAgbGV0IG5hdmlnYXRlID0gdXNlTmF2aWdhdGUoKTtcbiAgbGV0IGxvY2F0aW9uID0gdXNlTG9jYXRpb24oKTtcbiAgbGV0IHBhdGggPSB1c2VSZXNvbHZlZFBhdGgodG8sIHtcbiAgICByZWxhdGl2ZVxuICB9KTtcbiAgcmV0dXJuIFJlYWN0LnVzZUNhbGxiYWNrKGV2ZW50ID0+IHtcbiAgICBpZiAoc2hvdWxkUHJvY2Vzc0xpbmtDbGljayhldmVudCwgdGFyZ2V0KSkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIC8vIElmIHRoZSBVUkwgaGFzbid0IGNoYW5nZWQsIGEgcmVndWxhciA8YT4gd2lsbCBkbyBhIHJlcGxhY2UgaW5zdGVhZCBvZlxuICAgICAgLy8gYSBwdXNoLCBzbyBkbyB0aGUgc2FtZSBoZXJlIHVubGVzcyB0aGUgcmVwbGFjZSBwcm9wIGlzIGV4cGxpY2l0bHkgc2V0XG4gICAgICBsZXQgcmVwbGFjZSA9IHJlcGxhY2VQcm9wICE9PSB1bmRlZmluZWQgPyByZXBsYWNlUHJvcCA6IGNyZWF0ZVBhdGgobG9jYXRpb24pID09PSBjcmVhdGVQYXRoKHBhdGgpO1xuICAgICAgbmF2aWdhdGUodG8sIHtcbiAgICAgICAgcmVwbGFjZSxcbiAgICAgICAgc3RhdGUsXG4gICAgICAgIHByZXZlbnRTY3JvbGxSZXNldCxcbiAgICAgICAgcmVsYXRpdmUsXG4gICAgICAgIHVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIFtsb2NhdGlvbiwgbmF2aWdhdGUsIHBhdGgsIHJlcGxhY2VQcm9wLCBzdGF0ZSwgdGFyZ2V0LCB0bywgcHJldmVudFNjcm9sbFJlc2V0LCByZWxhdGl2ZSwgdW5zdGFibGVfdmlld1RyYW5zaXRpb25dKTtcbn1cbi8qKlxuICogQSBjb252ZW5pZW50IHdyYXBwZXIgZm9yIHJlYWRpbmcgYW5kIHdyaXRpbmcgc2VhcmNoIHBhcmFtZXRlcnMgdmlhIHRoZVxuICogVVJMU2VhcmNoUGFyYW1zIGludGVyZmFjZS5cbiAqL1xuZnVuY3Rpb24gdXNlU2VhcmNoUGFyYW1zKGRlZmF1bHRJbml0KSB7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKHR5cGVvZiBVUkxTZWFyY2hQYXJhbXMgIT09IFwidW5kZWZpbmVkXCIsIFwiWW91IGNhbm5vdCB1c2UgdGhlIGB1c2VTZWFyY2hQYXJhbXNgIGhvb2sgaW4gYSBicm93c2VyIHRoYXQgZG9lcyBub3QgXCIgKyBcInN1cHBvcnQgdGhlIFVSTFNlYXJjaFBhcmFtcyBBUEkuIElmIHlvdSBuZWVkIHRvIHN1cHBvcnQgSW50ZXJuZXQgXCIgKyBcIkV4cGxvcmVyIDExLCB3ZSByZWNvbW1lbmQgeW91IGxvYWQgYSBwb2x5ZmlsbCBzdWNoIGFzIFwiICsgXCJodHRwczovL2dpdGh1Yi5jb20vdW5nYXAvdXJsLXNlYXJjaC1wYXJhbXNcXG5cXG5cIiArIFwiSWYgeW91J3JlIHVuc3VyZSBob3cgdG8gbG9hZCBwb2x5ZmlsbHMsIHdlIHJlY29tbWVuZCB5b3UgY2hlY2sgb3V0IFwiICsgXCJodHRwczovL3BvbHlmaWxsLmlvL3YzLyB3aGljaCBwcm92aWRlcyBzb21lIHJlY29tbWVuZGF0aW9ucyBhYm91dCBob3cgXCIgKyBcInRvIGxvYWQgcG9seWZpbGxzIG9ubHkgZm9yIHVzZXJzIHRoYXQgbmVlZCB0aGVtLCBpbnN0ZWFkIG9mIGZvciBldmVyeSBcIiArIFwidXNlci5cIikgOiB2b2lkIDA7XG4gIGxldCBkZWZhdWx0U2VhcmNoUGFyYW1zUmVmID0gUmVhY3QudXNlUmVmKGNyZWF0ZVNlYXJjaFBhcmFtcyhkZWZhdWx0SW5pdCkpO1xuICBsZXQgaGFzU2V0U2VhcmNoUGFyYW1zUmVmID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcbiAgbGV0IGxvY2F0aW9uID0gdXNlTG9jYXRpb24oKTtcbiAgbGV0IHNlYXJjaFBhcmFtcyA9IFJlYWN0LnVzZU1lbW8oKCkgPT5cbiAgLy8gT25seSBtZXJnZSBpbiB0aGUgZGVmYXVsdHMgaWYgd2UgaGF2ZW4ndCB5ZXQgY2FsbGVkIHNldFNlYXJjaFBhcmFtcy5cbiAgLy8gT25jZSB3ZSBjYWxsIHRoYXQgd2Ugd2FudCB0aG9zZSB0byB0YWtlIHByZWNlZGVuY2UsIG90aGVyd2lzZSB5b3UgY2FuJ3RcbiAgLy8gcmVtb3ZlIGEgcGFyYW0gd2l0aCBzZXRTZWFyY2hQYXJhbXMoe30pIGlmIGl0IGhhcyBhbiBpbml0aWFsIHZhbHVlXG4gIGdldFNlYXJjaFBhcmFtc0ZvckxvY2F0aW9uKGxvY2F0aW9uLnNlYXJjaCwgaGFzU2V0U2VhcmNoUGFyYW1zUmVmLmN1cnJlbnQgPyBudWxsIDogZGVmYXVsdFNlYXJjaFBhcmFtc1JlZi5jdXJyZW50KSwgW2xvY2F0aW9uLnNlYXJjaF0pO1xuICBsZXQgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpO1xuICBsZXQgc2V0U2VhcmNoUGFyYW1zID0gUmVhY3QudXNlQ2FsbGJhY2soKG5leHRJbml0LCBuYXZpZ2F0ZU9wdGlvbnMpID0+IHtcbiAgICBjb25zdCBuZXdTZWFyY2hQYXJhbXMgPSBjcmVhdGVTZWFyY2hQYXJhbXModHlwZW9mIG5leHRJbml0ID09PSBcImZ1bmN0aW9uXCIgPyBuZXh0SW5pdChzZWFyY2hQYXJhbXMpIDogbmV4dEluaXQpO1xuICAgIGhhc1NldFNlYXJjaFBhcmFtc1JlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgICBuYXZpZ2F0ZShcIj9cIiArIG5ld1NlYXJjaFBhcmFtcywgbmF2aWdhdGVPcHRpb25zKTtcbiAgfSwgW25hdmlnYXRlLCBzZWFyY2hQYXJhbXNdKTtcbiAgcmV0dXJuIFtzZWFyY2hQYXJhbXMsIHNldFNlYXJjaFBhcmFtc107XG59XG5mdW5jdGlvbiB2YWxpZGF0ZUNsaWVudFNpZGVTdWJtaXNzaW9uKCkge1xuICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IGFyZSBjYWxsaW5nIHN1Ym1pdCBkdXJpbmcgdGhlIHNlcnZlciByZW5kZXIuIFwiICsgXCJUcnkgY2FsbGluZyBzdWJtaXQgd2l0aGluIGEgYHVzZUVmZmVjdGAgb3IgY2FsbGJhY2sgaW5zdGVhZC5cIik7XG4gIH1cbn1cbmxldCBmZXRjaGVySWQgPSAwO1xubGV0IGdldFVuaXF1ZUZldGNoZXJJZCA9ICgpID0+IFwiX19cIiArIFN0cmluZygrK2ZldGNoZXJJZCkgKyBcIl9fXCI7XG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IG1heSBiZSB1c2VkIHRvIHByb2dyYW1tYXRpY2FsbHkgc3VibWl0IGEgZm9ybSAob3JcbiAqIHNvbWUgYXJiaXRyYXJ5IGRhdGEpIHRvIHRoZSBzZXJ2ZXIuXG4gKi9cbmZ1bmN0aW9uIHVzZVN1Ym1pdCgpIHtcbiAgbGV0IHtcbiAgICByb3V0ZXJcbiAgfSA9IHVzZURhdGFSb3V0ZXJDb250ZXh0KERhdGFSb3V0ZXJIb29rLlVzZVN1Ym1pdCk7XG4gIGxldCB7XG4gICAgYmFzZW5hbWVcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoVU5TQUZFX05hdmlnYXRpb25Db250ZXh0KTtcbiAgbGV0IGN1cnJlbnRSb3V0ZUlkID0gVU5TQUZFX3VzZVJvdXRlSWQoKTtcbiAgcmV0dXJuIFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uICh0YXJnZXQsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuICAgIHZhbGlkYXRlQ2xpZW50U2lkZVN1Ym1pc3Npb24oKTtcbiAgICBsZXQge1xuICAgICAgYWN0aW9uLFxuICAgICAgbWV0aG9kLFxuICAgICAgZW5jVHlwZSxcbiAgICAgIGZvcm1EYXRhLFxuICAgICAgYm9keVxuICAgIH0gPSBnZXRGb3JtU3VibWlzc2lvbkluZm8odGFyZ2V0LCBiYXNlbmFtZSk7XG4gICAgaWYgKG9wdGlvbnMubmF2aWdhdGUgPT09IGZhbHNlKSB7XG4gICAgICBsZXQga2V5ID0gb3B0aW9ucy5mZXRjaGVyS2V5IHx8IGdldFVuaXF1ZUZldGNoZXJJZCgpO1xuICAgICAgcm91dGVyLmZldGNoKGtleSwgY3VycmVudFJvdXRlSWQsIG9wdGlvbnMuYWN0aW9uIHx8IGFjdGlvbiwge1xuICAgICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQ6IG9wdGlvbnMucHJldmVudFNjcm9sbFJlc2V0LFxuICAgICAgICBmb3JtRGF0YSxcbiAgICAgICAgYm9keSxcbiAgICAgICAgZm9ybU1ldGhvZDogb3B0aW9ucy5tZXRob2QgfHwgbWV0aG9kLFxuICAgICAgICBmb3JtRW5jVHlwZTogb3B0aW9ucy5lbmNUeXBlIHx8IGVuY1R5cGUsXG4gICAgICAgIHVuc3RhYmxlX2ZsdXNoU3luYzogb3B0aW9ucy51bnN0YWJsZV9mbHVzaFN5bmNcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByb3V0ZXIubmF2aWdhdGUob3B0aW9ucy5hY3Rpb24gfHwgYWN0aW9uLCB7XG4gICAgICAgIHByZXZlbnRTY3JvbGxSZXNldDogb3B0aW9ucy5wcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgICAgIGZvcm1EYXRhLFxuICAgICAgICBib2R5LFxuICAgICAgICBmb3JtTWV0aG9kOiBvcHRpb25zLm1ldGhvZCB8fCBtZXRob2QsXG4gICAgICAgIGZvcm1FbmNUeXBlOiBvcHRpb25zLmVuY1R5cGUgfHwgZW5jVHlwZSxcbiAgICAgICAgcmVwbGFjZTogb3B0aW9ucy5yZXBsYWNlLFxuICAgICAgICBzdGF0ZTogb3B0aW9ucy5zdGF0ZSxcbiAgICAgICAgZnJvbVJvdXRlSWQ6IGN1cnJlbnRSb3V0ZUlkLFxuICAgICAgICB1bnN0YWJsZV9mbHVzaFN5bmM6IG9wdGlvbnMudW5zdGFibGVfZmx1c2hTeW5jLFxuICAgICAgICB1bnN0YWJsZV92aWV3VHJhbnNpdGlvbjogb3B0aW9ucy51bnN0YWJsZV92aWV3VHJhbnNpdGlvblxuICAgICAgfSk7XG4gICAgfVxuICB9LCBbcm91dGVyLCBiYXNlbmFtZSwgY3VycmVudFJvdXRlSWRdKTtcbn1cbi8vIHY3OiBFdmVudHVhbGx5IHdlIHNob3VsZCBkZXByZWNhdGUgdGhpcyBlbnRpcmVseSBpbiBmYXZvciBvZiB1c2luZyB0aGVcbi8vIHJvdXRlciBtZXRob2QgZGlyZWN0bHk/XG5mdW5jdGlvbiB1c2VGb3JtQWN0aW9uKGFjdGlvbiwgX3RlbXAyKSB7XG4gIGxldCB7XG4gICAgcmVsYXRpdmVcbiAgfSA9IF90ZW1wMiA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDI7XG4gIGxldCB7XG4gICAgYmFzZW5hbWVcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoVU5TQUZFX05hdmlnYXRpb25Db250ZXh0KTtcbiAgbGV0IHJvdXRlQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoVU5TQUZFX1JvdXRlQ29udGV4dCk7XG4gICFyb3V0ZUNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcInVzZUZvcm1BY3Rpb24gbXVzdCBiZSB1c2VkIGluc2lkZSBhIFJvdXRlQ29udGV4dFwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBsZXQgW21hdGNoXSA9IHJvdXRlQ29udGV4dC5tYXRjaGVzLnNsaWNlKC0xKTtcbiAgLy8gU2hhbGxvdyBjbG9uZSBwYXRoIHNvIHdlIGNhbiBtb2RpZnkgaXQgYmVsb3csIG90aGVyd2lzZSB3ZSBtb2RpZnkgdGhlXG4gIC8vIG9iamVjdCByZWZlcmVuY2VkIGJ5IHVzZU1lbW8gaW5zaWRlIHVzZVJlc29sdmVkUGF0aFxuICBsZXQgcGF0aCA9IF9leHRlbmRzKHt9LCB1c2VSZXNvbHZlZFBhdGgoYWN0aW9uID8gYWN0aW9uIDogXCIuXCIsIHtcbiAgICByZWxhdGl2ZVxuICB9KSk7XG4gIC8vIElmIG5vIGFjdGlvbiB3YXMgc3BlY2lmaWVkLCBicm93c2VycyB3aWxsIHBlcnNpc3QgY3VycmVudCBzZWFyY2ggcGFyYW1zXG4gIC8vIHdoZW4gZGV0ZXJtaW5pbmcgdGhlIHBhdGgsIHNvIG1hdGNoIHRoYXQgYmVoYXZpb3JcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3JlbWl4LXJ1bi9yZW1peC9pc3N1ZXMvOTI3XG4gIGxldCBsb2NhdGlvbiA9IHVzZUxvY2F0aW9uKCk7XG4gIGlmIChhY3Rpb24gPT0gbnVsbCkge1xuICAgIC8vIFNhZmUgdG8gd3JpdGUgdG8gdGhpcyBkaXJlY3RseSBoZXJlIHNpbmNlIGlmIGFjdGlvbiB3YXMgdW5kZWZpbmVkLCB3ZVxuICAgIC8vIHdvdWxkIGhhdmUgY2FsbGVkIHVzZVJlc29sdmVkUGF0aChcIi5cIikgd2hpY2ggd2lsbCBuZXZlciBpbmNsdWRlIGEgc2VhcmNoXG4gICAgcGF0aC5zZWFyY2ggPSBsb2NhdGlvbi5zZWFyY2g7XG4gICAgLy8gV2hlbiBncmFiYmluZyBzZWFyY2ggcGFyYW1zIGZyb20gdGhlIFVSTCwgcmVtb3ZlIGFueSBpbmNsdWRlZCA/aW5kZXggcGFyYW1cbiAgICAvLyBzaW5jZSBpdCBtaWdodCBub3QgYXBwbHkgdG8gb3VyIGNvbnRleHR1YWwgcm91dGUuICBXZSBhZGQgaXQgYmFjayBiYXNlZFxuICAgIC8vIG9uIG1hdGNoLnJvdXRlLmluZGV4IGJlbG93XG4gICAgbGV0IHBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMocGF0aC5zZWFyY2gpO1xuICAgIGlmIChwYXJhbXMuaGFzKFwiaW5kZXhcIikgJiYgcGFyYW1zLmdldChcImluZGV4XCIpID09PSBcIlwiKSB7XG4gICAgICBwYXJhbXMuZGVsZXRlKFwiaW5kZXhcIik7XG4gICAgICBwYXRoLnNlYXJjaCA9IHBhcmFtcy50b1N0cmluZygpID8gXCI/XCIgKyBwYXJhbXMudG9TdHJpbmcoKSA6IFwiXCI7XG4gICAgfVxuICB9XG4gIGlmICgoIWFjdGlvbiB8fCBhY3Rpb24gPT09IFwiLlwiKSAmJiBtYXRjaC5yb3V0ZS5pbmRleCkge1xuICAgIHBhdGguc2VhcmNoID0gcGF0aC5zZWFyY2ggPyBwYXRoLnNlYXJjaC5yZXBsYWNlKC9eXFw/LywgXCI/aW5kZXgmXCIpIDogXCI/aW5kZXhcIjtcbiAgfVxuICAvLyBJZiB3ZSdyZSBvcGVyYXRpbmcgd2l0aGluIGEgYmFzZW5hbWUsIHByZXBlbmQgaXQgdG8gdGhlIHBhdGhuYW1lIHByaW9yXG4gIC8vIHRvIGNyZWF0aW5nIHRoZSBmb3JtIGFjdGlvbi4gIElmIHRoaXMgaXMgYSByb290IG5hdmlnYXRpb24sIHRoZW4ganVzdCB1c2VcbiAgLy8gdGhlIHJhdyBiYXNlbmFtZSB3aGljaCBhbGxvd3MgdGhlIGJhc2VuYW1lIHRvIGhhdmUgZnVsbCBjb250cm9sIG92ZXIgdGhlXG4gIC8vIHByZXNlbmNlIG9mIGEgdHJhaWxpbmcgc2xhc2ggb24gcm9vdCBhY3Rpb25zXG4gIGlmIChiYXNlbmFtZSAhPT0gXCIvXCIpIHtcbiAgICBwYXRoLnBhdGhuYW1lID0gcGF0aC5wYXRobmFtZSA9PT0gXCIvXCIgPyBiYXNlbmFtZSA6IGpvaW5QYXRocyhbYmFzZW5hbWUsIHBhdGgucGF0aG5hbWVdKTtcbiAgfVxuICByZXR1cm4gY3JlYXRlUGF0aChwYXRoKTtcbn1cbi8vIFRPRE86ICh2NykgQ2hhbmdlIHRoZSB1c2VGZXRjaGVyIGdlbmVyaWMgZGVmYXVsdCBmcm9tIGBhbnlgIHRvIGB1bmtub3duYFxuLyoqXG4gKiBJbnRlcmFjdHMgd2l0aCByb3V0ZSBsb2FkZXJzIGFuZCBhY3Rpb25zIHdpdGhvdXQgY2F1c2luZyBhIG5hdmlnYXRpb24uIEdyZWF0XG4gKiBmb3IgYW55IGludGVyYWN0aW9uIHRoYXQgc3RheXMgb24gdGhlIHNhbWUgcGFnZS5cbiAqL1xuZnVuY3Rpb24gdXNlRmV0Y2hlcihfdGVtcDMpIHtcbiAgdmFyIF9yb3V0ZSRtYXRjaGVzO1xuICBsZXQge1xuICAgIGtleVxuICB9ID0gX3RlbXAzID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wMztcbiAgbGV0IHtcbiAgICByb3V0ZXJcbiAgfSA9IHVzZURhdGFSb3V0ZXJDb250ZXh0KERhdGFSb3V0ZXJIb29rLlVzZUZldGNoZXIpO1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VGZXRjaGVyKTtcbiAgbGV0IGZldGNoZXJEYXRhID0gUmVhY3QudXNlQ29udGV4dChGZXRjaGVyc0NvbnRleHQpO1xuICBsZXQgcm91dGUgPSBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9Sb3V0ZUNvbnRleHQpO1xuICBsZXQgcm91dGVJZCA9IChfcm91dGUkbWF0Y2hlcyA9IHJvdXRlLm1hdGNoZXNbcm91dGUubWF0Y2hlcy5sZW5ndGggLSAxXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9yb3V0ZSRtYXRjaGVzLnJvdXRlLmlkO1xuICAhZmV0Y2hlckRhdGEgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcInVzZUZldGNoZXIgbXVzdCBiZSB1c2VkIGluc2lkZSBhIEZldGNoZXJzQ29udGV4dFwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAhcm91dGUgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcInVzZUZldGNoZXIgbXVzdCBiZSB1c2VkIGluc2lkZSBhIFJvdXRlQ29udGV4dFwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAhKHJvdXRlSWQgIT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcInVzZUZldGNoZXIgY2FuIG9ubHkgYmUgdXNlZCBvbiByb3V0ZXMgdGhhdCBjb250YWluIGEgdW5pcXVlIFxcXCJpZFxcXCJcIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgLy8gRmV0Y2hlciBrZXkgaGFuZGxpbmdcbiAgLy8gT0sgdG8gY2FsbCBjb25kaXRpb25hbGx5IHRvIGZlYXR1cmUgZGV0ZWN0IGB1c2VJZGBcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gIGxldCBkZWZhdWx0S2V5ID0gdXNlSWRJbXBsID8gdXNlSWRJbXBsKCkgOiBcIlwiO1xuICBsZXQgW2ZldGNoZXJLZXksIHNldEZldGNoZXJLZXldID0gUmVhY3QudXNlU3RhdGUoa2V5IHx8IGRlZmF1bHRLZXkpO1xuICBpZiAoa2V5ICYmIGtleSAhPT0gZmV0Y2hlcktleSkge1xuICAgIHNldEZldGNoZXJLZXkoa2V5KTtcbiAgfSBlbHNlIGlmICghZmV0Y2hlcktleSkge1xuICAgIC8vIFdlIHdpbGwgb25seSBmYWxsIHRocm91Z2ggaGVyZSB3aGVuIGB1c2VJZGAgaXMgbm90IGF2YWlsYWJsZVxuICAgIHNldEZldGNoZXJLZXkoZ2V0VW5pcXVlRmV0Y2hlcklkKCkpO1xuICB9XG4gIC8vIFJlZ2lzdHJhdGlvbi9jbGVhbnVwXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgcm91dGVyLmdldEZldGNoZXIoZmV0Y2hlcktleSk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIC8vIFRlbGwgdGhlIHJvdXRlciB3ZSd2ZSB1bm1vdW50ZWQgLSBpZiB2N19mZXRjaGVyUGVyc2lzdCBpcyBlbmFibGVkIHRoaXNcbiAgICAgIC8vIHdpbGwgbm90IGRlbGV0ZSBpbW1lZGlhdGVseSBidXQgaW5zdGVhZCBxdWV1ZSB1cCBhIGRlbGV0ZSBhZnRlciB0aGVcbiAgICAgIC8vIGZldGNoZXIgcmV0dXJucyB0byBhbiBgaWRsZWAgc3RhdGVcbiAgICAgIHJvdXRlci5kZWxldGVGZXRjaGVyKGZldGNoZXJLZXkpO1xuICAgIH07XG4gIH0sIFtyb3V0ZXIsIGZldGNoZXJLZXldKTtcbiAgLy8gRmV0Y2hlciBhZGRpdGlvbnNcbiAgbGV0IGxvYWQgPSBSZWFjdC51c2VDYWxsYmFjaygoaHJlZiwgb3B0cykgPT4ge1xuICAgICFyb3V0ZUlkID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgXCJObyByb3V0ZUlkIGF2YWlsYWJsZSBmb3IgZmV0Y2hlci5sb2FkKClcIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICByb3V0ZXIuZmV0Y2goZmV0Y2hlcktleSwgcm91dGVJZCwgaHJlZiwgb3B0cyk7XG4gIH0sIFtmZXRjaGVyS2V5LCByb3V0ZUlkLCByb3V0ZXJdKTtcbiAgbGV0IHN1Ym1pdEltcGwgPSB1c2VTdWJtaXQoKTtcbiAgbGV0IHN1Ym1pdCA9IFJlYWN0LnVzZUNhbGxiYWNrKCh0YXJnZXQsIG9wdHMpID0+IHtcbiAgICBzdWJtaXRJbXBsKHRhcmdldCwgX2V4dGVuZHMoe30sIG9wdHMsIHtcbiAgICAgIG5hdmlnYXRlOiBmYWxzZSxcbiAgICAgIGZldGNoZXJLZXlcbiAgICB9KSk7XG4gIH0sIFtmZXRjaGVyS2V5LCBzdWJtaXRJbXBsXSk7XG4gIGxldCBGZXRjaGVyRm9ybSA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgIGxldCBGZXRjaGVyRm9ybSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKChwcm9wcywgcmVmKSA9PiB7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRm9ybSwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICAgIG5hdmlnYXRlOiBmYWxzZSxcbiAgICAgICAgZmV0Y2hlcktleTogZmV0Y2hlcktleSxcbiAgICAgICAgcmVmOiByZWZcbiAgICAgIH0pKTtcbiAgICB9KTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICBGZXRjaGVyRm9ybS5kaXNwbGF5TmFtZSA9IFwiZmV0Y2hlci5Gb3JtXCI7XG4gICAgfVxuICAgIHJldHVybiBGZXRjaGVyRm9ybTtcbiAgfSwgW2ZldGNoZXJLZXldKTtcbiAgLy8gRXhwb3NlZCBGZXRjaGVyV2l0aENvbXBvbmVudHNcbiAgbGV0IGZldGNoZXIgPSBzdGF0ZS5mZXRjaGVycy5nZXQoZmV0Y2hlcktleSkgfHwgSURMRV9GRVRDSEVSO1xuICBsZXQgZGF0YSA9IGZldGNoZXJEYXRhLmdldChmZXRjaGVyS2V5KTtcbiAgbGV0IGZldGNoZXJXaXRoQ29tcG9uZW50cyA9IFJlYWN0LnVzZU1lbW8oKCkgPT4gX2V4dGVuZHMoe1xuICAgIEZvcm06IEZldGNoZXJGb3JtLFxuICAgIHN1Ym1pdCxcbiAgICBsb2FkXG4gIH0sIGZldGNoZXIsIHtcbiAgICBkYXRhXG4gIH0pLCBbRmV0Y2hlckZvcm0sIHN1Ym1pdCwgbG9hZCwgZmV0Y2hlciwgZGF0YV0pO1xuICByZXR1cm4gZmV0Y2hlcldpdGhDb21wb25lbnRzO1xufVxuLyoqXG4gKiBQcm92aWRlcyBhbGwgZmV0Y2hlcnMgY3VycmVudGx5IG9uIHRoZSBwYWdlLiBVc2VmdWwgZm9yIGxheW91dHMgYW5kIHBhcmVudFxuICogcm91dGVzIHRoYXQgbmVlZCB0byBwcm92aWRlIHBlbmRpbmcvb3B0aW1pc3RpYyBVSSByZWdhcmRpbmcgdGhlIGZldGNoLlxuICovXG5mdW5jdGlvbiB1c2VGZXRjaGVycygpIHtcbiAgbGV0IHN0YXRlID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlRmV0Y2hlcnMpO1xuICByZXR1cm4gQXJyYXkuZnJvbShzdGF0ZS5mZXRjaGVycy5lbnRyaWVzKCkpLm1hcChfcmVmMTEgPT4ge1xuICAgIGxldCBba2V5LCBmZXRjaGVyXSA9IF9yZWYxMTtcbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIGZldGNoZXIsIHtcbiAgICAgIGtleVxuICAgIH0pO1xuICB9KTtcbn1cbmNvbnN0IFNDUk9MTF9SRVNUT1JBVElPTl9TVE9SQUdFX0tFWSA9IFwicmVhY3Qtcm91dGVyLXNjcm9sbC1wb3NpdGlvbnNcIjtcbmxldCBzYXZlZFNjcm9sbFBvc2l0aW9ucyA9IHt9O1xuLyoqXG4gKiBXaGVuIHJlbmRlcmVkIGluc2lkZSBhIFJvdXRlclByb3ZpZGVyLCB3aWxsIHJlc3RvcmUgc2Nyb2xsIHBvc2l0aW9ucyBvbiBuYXZpZ2F0aW9uc1xuICovXG5mdW5jdGlvbiB1c2VTY3JvbGxSZXN0b3JhdGlvbihfdGVtcDQpIHtcbiAgbGV0IHtcbiAgICBnZXRLZXksXG4gICAgc3RvcmFnZUtleVxuICB9ID0gX3RlbXA0ID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wNDtcbiAgbGV0IHtcbiAgICByb3V0ZXJcbiAgfSA9IHVzZURhdGFSb3V0ZXJDb250ZXh0KERhdGFSb3V0ZXJIb29rLlVzZVNjcm9sbFJlc3RvcmF0aW9uKTtcbiAgbGV0IHtcbiAgICByZXN0b3JlU2Nyb2xsUG9zaXRpb24sXG4gICAgcHJldmVudFNjcm9sbFJlc2V0XG4gIH0gPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VTY3JvbGxSZXN0b3JhdGlvbik7XG4gIGxldCB7XG4gICAgYmFzZW5hbWVcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoVU5TQUZFX05hdmlnYXRpb25Db250ZXh0KTtcbiAgbGV0IGxvY2F0aW9uID0gdXNlTG9jYXRpb24oKTtcbiAgbGV0IG1hdGNoZXMgPSB1c2VNYXRjaGVzKCk7XG4gIGxldCBuYXZpZ2F0aW9uID0gdXNlTmF2aWdhdGlvbigpO1xuICAvLyBUcmlnZ2VyIG1hbnVhbCBzY3JvbGwgcmVzdG9yYXRpb24gd2hpbGUgd2UncmUgYWN0aXZlXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgd2luZG93Lmhpc3Rvcnkuc2Nyb2xsUmVzdG9yYXRpb24gPSBcIm1hbnVhbFwiO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICB3aW5kb3cuaGlzdG9yeS5zY3JvbGxSZXN0b3JhdGlvbiA9IFwiYXV0b1wiO1xuICAgIH07XG4gIH0sIFtdKTtcbiAgLy8gU2F2ZSBwb3NpdGlvbnMgb24gcGFnZWhpZGVcbiAgdXNlUGFnZUhpZGUoUmVhY3QudXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGlmIChuYXZpZ2F0aW9uLnN0YXRlID09PSBcImlkbGVcIikge1xuICAgICAgbGV0IGtleSA9IChnZXRLZXkgPyBnZXRLZXkobG9jYXRpb24sIG1hdGNoZXMpIDogbnVsbCkgfHwgbG9jYXRpb24ua2V5O1xuICAgICAgc2F2ZWRTY3JvbGxQb3NpdGlvbnNba2V5XSA9IHdpbmRvdy5zY3JvbGxZO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShzdG9yYWdlS2V5IHx8IFNDUk9MTF9SRVNUT1JBVElPTl9TVE9SQUdFX0tFWSwgSlNPTi5zdHJpbmdpZnkoc2F2ZWRTY3JvbGxQb3NpdGlvbnMpKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX3dhcm5pbmcoZmFsc2UsIFwiRmFpbGVkIHRvIHNhdmUgc2Nyb2xsIHBvc2l0aW9ucyBpbiBzZXNzaW9uU3RvcmFnZSwgPFNjcm9sbFJlc3RvcmF0aW9uIC8+IHdpbGwgbm90IHdvcmsgcHJvcGVybHkgKFwiICsgZXJyb3IgKyBcIikuXCIpIDogdm9pZCAwO1xuICAgIH1cbiAgICB3aW5kb3cuaGlzdG9yeS5zY3JvbGxSZXN0b3JhdGlvbiA9IFwiYXV0b1wiO1xuICB9LCBbc3RvcmFnZUtleSwgZ2V0S2V5LCBuYXZpZ2F0aW9uLnN0YXRlLCBsb2NhdGlvbiwgbWF0Y2hlc10pKTtcbiAgLy8gUmVhZCBpbiBhbnkgc2F2ZWQgc2Nyb2xsIGxvY2F0aW9uc1xuICBpZiAodHlwZW9mIGRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGxldCBzZXNzaW9uUG9zaXRpb25zID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShzdG9yYWdlS2V5IHx8IFNDUk9MTF9SRVNUT1JBVElPTl9TVE9SQUdFX0tFWSk7XG4gICAgICAgIGlmIChzZXNzaW9uUG9zaXRpb25zKSB7XG4gICAgICAgICAgc2F2ZWRTY3JvbGxQb3NpdGlvbnMgPSBKU09OLnBhcnNlKHNlc3Npb25Qb3NpdGlvbnMpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIG5vLW9wLCB1c2UgZGVmYXVsdCBlbXB0eSBvYmplY3RcbiAgICAgIH1cbiAgICB9LCBbc3RvcmFnZUtleV0pO1xuICAgIC8vIEVuYWJsZSBzY3JvbGwgcmVzdG9yYXRpb24gaW4gdGhlIHJvdXRlclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgICBsZXQgZ2V0S2V5V2l0aG91dEJhc2VuYW1lID0gZ2V0S2V5ICYmIGJhc2VuYW1lICE9PSBcIi9cIiA/IChsb2NhdGlvbiwgbWF0Y2hlcykgPT4gZ2V0S2V5KCAvLyBTdHJpcCB0aGUgYmFzZW5hbWUgdG8gbWF0Y2ggdXNlTG9jYXRpb24oKVxuICAgICAgX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7XG4gICAgICAgIHBhdGhuYW1lOiBzdHJpcEJhc2VuYW1lKGxvY2F0aW9uLnBhdGhuYW1lLCBiYXNlbmFtZSkgfHwgbG9jYXRpb24ucGF0aG5hbWVcbiAgICAgIH0pLCBtYXRjaGVzKSA6IGdldEtleTtcbiAgICAgIGxldCBkaXNhYmxlU2Nyb2xsUmVzdG9yYXRpb24gPSByb3V0ZXIgPT0gbnVsbCA/IHZvaWQgMCA6IHJvdXRlci5lbmFibGVTY3JvbGxSZXN0b3JhdGlvbihzYXZlZFNjcm9sbFBvc2l0aW9ucywgKCkgPT4gd2luZG93LnNjcm9sbFksIGdldEtleVdpdGhvdXRCYXNlbmFtZSk7XG4gICAgICByZXR1cm4gKCkgPT4gZGlzYWJsZVNjcm9sbFJlc3RvcmF0aW9uICYmIGRpc2FibGVTY3JvbGxSZXN0b3JhdGlvbigpO1xuICAgIH0sIFtyb3V0ZXIsIGJhc2VuYW1lLCBnZXRLZXldKTtcbiAgICAvLyBSZXN0b3JlIHNjcm9sbGluZyB3aGVuIHN0YXRlLnJlc3RvcmVTY3JvbGxQb3NpdGlvbiBjaGFuZ2VzXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICAgIC8vIEV4cGxpY2l0IGZhbHNlIG1lYW5zIGRvbid0IGRvIGFueXRoaW5nICh1c2VkIGZvciBzdWJtaXNzaW9ucylcbiAgICAgIGlmIChyZXN0b3JlU2Nyb2xsUG9zaXRpb24gPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vIGJlZW4gaGVyZSBiZWZvcmUsIHNjcm9sbCB0byBpdFxuICAgICAgaWYgKHR5cGVvZiByZXN0b3JlU2Nyb2xsUG9zaXRpb24gPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgd2luZG93LnNjcm9sbFRvKDAsIHJlc3RvcmVTY3JvbGxQb3NpdGlvbik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vIHRyeSB0byBzY3JvbGwgdG8gdGhlIGhhc2hcbiAgICAgIGlmIChsb2NhdGlvbi5oYXNoKSB7XG4gICAgICAgIGxldCBlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGRlY29kZVVSSUNvbXBvbmVudChsb2NhdGlvbi5oYXNoLnNsaWNlKDEpKSk7XG4gICAgICAgIGlmIChlbCkge1xuICAgICAgICAgIGVsLnNjcm9sbEludG9WaWV3KCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBEb24ndCByZXNldCBpZiB0aGlzIG5hdmlnYXRpb24gb3B0ZWQgb3V0XG4gICAgICBpZiAocHJldmVudFNjcm9sbFJlc2V0ID09PSB0cnVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vIG90aGVyd2lzZSBnbyB0byB0aGUgdG9wIG9uIG5ldyBsb2NhdGlvbnNcbiAgICAgIHdpbmRvdy5zY3JvbGxUbygwLCAwKTtcbiAgICB9LCBbbG9jYXRpb24sIHJlc3RvcmVTY3JvbGxQb3NpdGlvbiwgcHJldmVudFNjcm9sbFJlc2V0XSk7XG4gIH1cbn1cbi8qKlxuICogU2V0dXAgYSBjYWxsYmFjayB0byBiZSBmaXJlZCBvbiB0aGUgd2luZG93J3MgYGJlZm9yZXVubG9hZGAgZXZlbnQuIFRoaXMgaXNcbiAqIHVzZWZ1bCBmb3Igc2F2aW5nIHNvbWUgZGF0YSB0byBgd2luZG93LmxvY2FsU3RvcmFnZWAganVzdCBiZWZvcmUgdGhlIHBhZ2VcbiAqIHJlZnJlc2hlcy5cbiAqXG4gKiBOb3RlOiBUaGUgYGNhbGxiYWNrYCBhcmd1bWVudCBzaG91bGQgYmUgYSBmdW5jdGlvbiBjcmVhdGVkIHdpdGhcbiAqIGBSZWFjdC51c2VDYWxsYmFjaygpYC5cbiAqL1xuZnVuY3Rpb24gdXNlQmVmb3JlVW5sb2FkKGNhbGxiYWNrLCBvcHRpb25zKSB7XG4gIGxldCB7XG4gICAgY2FwdHVyZVxuICB9ID0gb3B0aW9ucyB8fCB7fTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBsZXQgb3B0cyA9IGNhcHR1cmUgIT0gbnVsbCA/IHtcbiAgICAgIGNhcHR1cmVcbiAgICB9IDogdW5kZWZpbmVkO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiYmVmb3JldW5sb2FkXCIsIGNhbGxiYWNrLCBvcHRzKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJiZWZvcmV1bmxvYWRcIiwgY2FsbGJhY2ssIG9wdHMpO1xuICAgIH07XG4gIH0sIFtjYWxsYmFjaywgY2FwdHVyZV0pO1xufVxuLyoqXG4gKiBTZXR1cCBhIGNhbGxiYWNrIHRvIGJlIGZpcmVkIG9uIHRoZSB3aW5kb3cncyBgcGFnZWhpZGVgIGV2ZW50LiBUaGlzIGlzXG4gKiB1c2VmdWwgZm9yIHNhdmluZyBzb21lIGRhdGEgdG8gYHdpbmRvdy5sb2NhbFN0b3JhZ2VgIGp1c3QgYmVmb3JlIHRoZSBwYWdlXG4gKiByZWZyZXNoZXMuICBUaGlzIGV2ZW50IGlzIGJldHRlciBzdXBwb3J0ZWQgdGhhbiBiZWZvcmV1bmxvYWQgYWNyb3NzIGJyb3dzZXJzLlxuICpcbiAqIE5vdGU6IFRoZSBgY2FsbGJhY2tgIGFyZ3VtZW50IHNob3VsZCBiZSBhIGZ1bmN0aW9uIGNyZWF0ZWQgd2l0aFxuICogYFJlYWN0LnVzZUNhbGxiYWNrKClgLlxuICovXG5mdW5jdGlvbiB1c2VQYWdlSGlkZShjYWxsYmFjaywgb3B0aW9ucykge1xuICBsZXQge1xuICAgIGNhcHR1cmVcbiAgfSA9IG9wdGlvbnMgfHwge307XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgbGV0IG9wdHMgPSBjYXB0dXJlICE9IG51bGwgPyB7XG4gICAgICBjYXB0dXJlXG4gICAgfSA6IHVuZGVmaW5lZDtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInBhZ2VoaWRlXCIsIGNhbGxiYWNrLCBvcHRzKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJwYWdlaGlkZVwiLCBjYWxsYmFjaywgb3B0cyk7XG4gICAgfTtcbiAgfSwgW2NhbGxiYWNrLCBjYXB0dXJlXSk7XG59XG4vKipcbiAqIFdyYXBwZXIgYXJvdW5kIHVzZUJsb2NrZXIgdG8gc2hvdyBhIHdpbmRvdy5jb25maXJtIHByb21wdCB0byB1c2VycyBpbnN0ZWFkXG4gKiBvZiBidWlsZGluZyBhIGN1c3RvbSBVSSB3aXRoIHVzZUJsb2NrZXIuXG4gKlxuICogV2FybmluZzogVGhpcyBoYXMgKmEgbG90IG9mIHJvdWdoIGVkZ2VzKiBhbmQgYmVoYXZlcyB2ZXJ5IGRpZmZlcmVudGx5IChhbmRcbiAqIHZlcnkgaW5jb3JyZWN0bHkgaW4gc29tZSBjYXNlcykgYWNyb3NzIGJyb3dzZXJzIGlmIHVzZXIgY2xpY2sgYWRkaXRpb25cbiAqIGJhY2svZm9yd2FyZCBuYXZpZ2F0aW9ucyB3aGlsZSB0aGUgY29uZmlybSBpcyBvcGVuLiAgVXNlIGF0IHlvdXIgb3duIHJpc2suXG4gKi9cbmZ1bmN0aW9uIHVzZVByb21wdChfcmVmMTIpIHtcbiAgbGV0IHtcbiAgICB3aGVuLFxuICAgIG1lc3NhZ2VcbiAgfSA9IF9yZWYxMjtcbiAgbGV0IGJsb2NrZXIgPSB1c2VCbG9ja2VyKHdoZW4pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChibG9ja2VyLnN0YXRlID09PSBcImJsb2NrZWRcIikge1xuICAgICAgbGV0IHByb2NlZWQgPSB3aW5kb3cuY29uZmlybShtZXNzYWdlKTtcbiAgICAgIGlmIChwcm9jZWVkKSB7XG4gICAgICAgIC8vIFRoaXMgdGltZW91dCBpcyBuZWVkZWQgdG8gYXZvaWQgYSB3ZWlyZCBcInJhY2VcIiBvbiBQT1AgbmF2aWdhdGlvbnNcbiAgICAgICAgLy8gYmV0d2VlbiB0aGUgYHdpbmRvdy5oaXN0b3J5YCByZXZlcnQgbmF2aWdhdGlvbiBhbmQgdGhlIHJlc3VsdCBvZlxuICAgICAgICAvLyBgd2luZG93LmNvbmZpcm1gXG4gICAgICAgIHNldFRpbWVvdXQoYmxvY2tlci5wcm9jZWVkLCAwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJsb2NrZXIucmVzZXQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIFtibG9ja2VyLCBtZXNzYWdlXSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGJsb2NrZXIuc3RhdGUgPT09IFwiYmxvY2tlZFwiICYmICF3aGVuKSB7XG4gICAgICBibG9ja2VyLnJlc2V0KCk7XG4gICAgfVxuICB9LCBbYmxvY2tlciwgd2hlbl0pO1xufVxuLyoqXG4gKiBSZXR1cm4gYSBib29sZWFuIGluZGljYXRpbmcgaWYgdGhlcmUgaXMgYW4gYWN0aXZlIHZpZXcgdHJhbnNpdGlvbiB0byB0aGVcbiAqIGdpdmVuIGhyZWYuICBZb3UgY2FuIHVzZSB0aGlzIHZhbHVlIHRvIHJlbmRlciBDU1MgY2xhc3NlcyBvciB2aWV3VHJhbnNpdGlvbk5hbWVcbiAqIHN0eWxlcyBvbnRvIHlvdXIgZWxlbWVudHNcbiAqXG4gKiBAcGFyYW0gaHJlZiBUaGUgZGVzdGluYXRpb24gaHJlZlxuICogQHBhcmFtIFtvcHRzLnJlbGF0aXZlXSBSZWxhdGl2ZSByb3V0aW5nIHR5cGUgKFwicm91dGVcIiB8IFwicGF0aFwiKVxuICovXG5mdW5jdGlvbiB1c2VWaWV3VHJhbnNpdGlvblN0YXRlKHRvLCBvcHRzKSB7XG4gIGlmIChvcHRzID09PSB2b2lkIDApIHtcbiAgICBvcHRzID0ge307XG4gIH1cbiAgbGV0IHZ0Q29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoVmlld1RyYW5zaXRpb25Db250ZXh0KTtcbiAgISh2dENvbnRleHQgIT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcImB1bnN0YWJsZV91c2VWaWV3VHJhbnNpdGlvblN0YXRlYCBtdXN0IGJlIHVzZWQgd2l0aGluIGByZWFjdC1yb3V0ZXItZG9tYCdzIGBSb3V0ZXJQcm92aWRlcmAuICBcIiArIFwiRGlkIHlvdSBhY2NpZGVudGFsbHkgaW1wb3J0IGBSb3V0ZXJQcm92aWRlcmAgZnJvbSBgcmVhY3Qtcm91dGVyYD9cIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZVxuICB9ID0gdXNlRGF0YVJvdXRlckNvbnRleHQoRGF0YVJvdXRlckhvb2sudXNlVmlld1RyYW5zaXRpb25TdGF0ZSk7XG4gIGxldCBwYXRoID0gdXNlUmVzb2x2ZWRQYXRoKHRvLCB7XG4gICAgcmVsYXRpdmU6IG9wdHMucmVsYXRpdmVcbiAgfSk7XG4gIGlmICghdnRDb250ZXh0LmlzVHJhbnNpdGlvbmluZykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBsZXQgY3VycmVudFBhdGggPSBzdHJpcEJhc2VuYW1lKHZ0Q29udGV4dC5jdXJyZW50TG9jYXRpb24ucGF0aG5hbWUsIGJhc2VuYW1lKSB8fCB2dENvbnRleHQuY3VycmVudExvY2F0aW9uLnBhdGhuYW1lO1xuICBsZXQgbmV4dFBhdGggPSBzdHJpcEJhc2VuYW1lKHZ0Q29udGV4dC5uZXh0TG9jYXRpb24ucGF0aG5hbWUsIGJhc2VuYW1lKSB8fCB2dENvbnRleHQubmV4dExvY2F0aW9uLnBhdGhuYW1lO1xuICAvLyBUcmFuc2l0aW9uIGlzIGFjdGl2ZSBpZiB3ZSdyZSBnb2luZyB0byBvciBjb21pbmcgZnJvbSB0aGUgaW5kaWNhdGVkXG4gIC8vIGRlc3RpbmF0aW9uLiAgVGhpcyBlbnN1cmVzIHRoYXQgb3RoZXIgUFVTSCBuYXZpZ2F0aW9ucyB0aGF0IHJldmVyc2VcbiAgLy8gYW4gaW5kaWNhdGVkIHRyYW5zaXRpb24gYXBwbHkuICBJLmUuLCBvbiB0aGUgbGlzdCB2aWV3IHlvdSBoYXZlOlxuICAvL1xuICAvLyAgIDxOYXZMaW5rIHRvPVwiL2RldGFpbHMvMVwiIHVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uPlxuICAvL1xuICAvLyBJZiB5b3UgY2xpY2sgdGhlIGJyZWFkY3J1bWIgYmFjayB0byB0aGUgbGlzdCB2aWV3OlxuICAvL1xuICAvLyAgIDxOYXZMaW5rIHRvPVwiL2xpc3RcIiB1bnN0YWJsZV92aWV3VHJhbnNpdGlvbj5cbiAgLy9cbiAgLy8gV2Ugc2hvdWxkIGFwcGx5IHRoZSB0cmFuc2l0aW9uIGJlY2F1c2UgaXQncyBpbmRpY2F0ZWQgYXMgYWN0aXZlIGdvaW5nXG4gIC8vIGZyb20gL2xpc3QgLT4gL2RldGFpbHMvMSBhbmQgdGhlcmVmb3JlIHNob3VsZCBiZSBhY3RpdmUgb24gdGhlIHJldmVyc2VcbiAgLy8gKGV2ZW4gdGhvdWdoIHRoaXMgaXNuJ3Qgc3RyaWN0bHkgYSBQT1AgcmV2ZXJzZSlcbiAgcmV0dXJuIG1hdGNoUGF0aChwYXRoLnBhdGhuYW1lLCBuZXh0UGF0aCkgIT0gbnVsbCB8fCBtYXRjaFBhdGgocGF0aC5wYXRobmFtZSwgY3VycmVudFBhdGgpICE9IG51bGw7XG59XG4vLyNlbmRyZWdpb25cblxuZXhwb3J0IHsgQnJvd3NlclJvdXRlciwgRm9ybSwgSGFzaFJvdXRlciwgTGluaywgTmF2TGluaywgUm91dGVyUHJvdmlkZXIsIFNjcm9sbFJlc3RvcmF0aW9uLCBGZXRjaGVyc0NvbnRleHQgYXMgVU5TQUZFX0ZldGNoZXJzQ29udGV4dCwgVmlld1RyYW5zaXRpb25Db250ZXh0IGFzIFVOU0FGRV9WaWV3VHJhbnNpdGlvbkNvbnRleHQsIHVzZVNjcm9sbFJlc3RvcmF0aW9uIGFzIFVOU0FGRV91c2VTY3JvbGxSZXN0b3JhdGlvbiwgY3JlYXRlQnJvd3NlclJvdXRlciwgY3JlYXRlSGFzaFJvdXRlciwgY3JlYXRlU2VhcmNoUGFyYW1zLCBIaXN0b3J5Um91dGVyIGFzIHVuc3RhYmxlX0hpc3RvcnlSb3V0ZXIsIHVzZVByb21wdCBhcyB1bnN0YWJsZV91c2VQcm9tcHQsIHVzZVZpZXdUcmFuc2l0aW9uU3RhdGUgYXMgdW5zdGFibGVfdXNlVmlld1RyYW5zaXRpb25TdGF0ZSwgdXNlQmVmb3JlVW5sb2FkLCB1c2VGZXRjaGVyLCB1c2VGZXRjaGVycywgdXNlRm9ybUFjdGlvbiwgdXNlTGlua0NsaWNrSGFuZGxlciwgdXNlU2VhcmNoUGFyYW1zLCB1c2VTdWJtaXQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIiwiY29uc3QgY29tbW9uID0ge1xuICBibGFjazogJyMwMDAnLFxuICB3aGl0ZTogJyNmZmYnXG59O1xuZXhwb3J0IGRlZmF1bHQgY29tbW9uOyIsImNvbnN0IHJlZCA9IHtcbiAgNTA6ICcjZmZlYmVlJyxcbiAgMTAwOiAnI2ZmY2RkMicsXG4gIDIwMDogJyNlZjlhOWEnLFxuICAzMDA6ICcjZTU3MzczJyxcbiAgNDAwOiAnI2VmNTM1MCcsXG4gIDUwMDogJyNmNDQzMzYnLFxuICA2MDA6ICcjZTUzOTM1JyxcbiAgNzAwOiAnI2QzMmYyZicsXG4gIDgwMDogJyNjNjI4MjgnLFxuICA5MDA6ICcjYjcxYzFjJyxcbiAgQTEwMDogJyNmZjhhODAnLFxuICBBMjAwOiAnI2ZmNTI1MicsXG4gIEE0MDA6ICcjZmYxNzQ0JyxcbiAgQTcwMDogJyNkNTAwMDAnXG59O1xuZXhwb3J0IGRlZmF1bHQgcmVkOyIsImNvbnN0IHB1cnBsZSA9IHtcbiAgNTA6ICcjZjNlNWY1JyxcbiAgMTAwOiAnI2UxYmVlNycsXG4gIDIwMDogJyNjZTkzZDgnLFxuICAzMDA6ICcjYmE2OGM4JyxcbiAgNDAwOiAnI2FiNDdiYycsXG4gIDUwMDogJyM5YzI3YjAnLFxuICA2MDA6ICcjOGUyNGFhJyxcbiAgNzAwOiAnIzdiMWZhMicsXG4gIDgwMDogJyM2YTFiOWEnLFxuICA5MDA6ICcjNGExNDhjJyxcbiAgQTEwMDogJyNlYTgwZmMnLFxuICBBMjAwOiAnI2UwNDBmYicsXG4gIEE0MDA6ICcjZDUwMGY5JyxcbiAgQTcwMDogJyNhYTAwZmYnXG59O1xuZXhwb3J0IGRlZmF1bHQgcHVycGxlOyIsImNvbnN0IGJsdWUgPSB7XG4gIDUwOiAnI2UzZjJmZCcsXG4gIDEwMDogJyNiYmRlZmInLFxuICAyMDA6ICcjOTBjYWY5JyxcbiAgMzAwOiAnIzY0YjVmNicsXG4gIDQwMDogJyM0MmE1ZjUnLFxuICA1MDA6ICcjMjE5NmYzJyxcbiAgNjAwOiAnIzFlODhlNScsXG4gIDcwMDogJyMxOTc2ZDInLFxuICA4MDA6ICcjMTU2NWMwJyxcbiAgOTAwOiAnIzBkNDdhMScsXG4gIEExMDA6ICcjODJiMWZmJyxcbiAgQTIwMDogJyM0NDhhZmYnLFxuICBBNDAwOiAnIzI5NzlmZicsXG4gIEE3MDA6ICcjMjk2MmZmJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGJsdWU7IiwiY29uc3QgbGlnaHRCbHVlID0ge1xuICA1MDogJyNlMWY1ZmUnLFxuICAxMDA6ICcjYjNlNWZjJyxcbiAgMjAwOiAnIzgxZDRmYScsXG4gIDMwMDogJyM0ZmMzZjcnLFxuICA0MDA6ICcjMjliNmY2JyxcbiAgNTAwOiAnIzAzYTlmNCcsXG4gIDYwMDogJyMwMzliZTUnLFxuICA3MDA6ICcjMDI4OGQxJyxcbiAgODAwOiAnIzAyNzdiZCcsXG4gIDkwMDogJyMwMTU3OWInLFxuICBBMTAwOiAnIzgwZDhmZicsXG4gIEEyMDA6ICcjNDBjNGZmJyxcbiAgQTQwMDogJyMwMGIwZmYnLFxuICBBNzAwOiAnIzAwOTFlYSdcbn07XG5leHBvcnQgZGVmYXVsdCBsaWdodEJsdWU7IiwiY29uc3QgZ3JlZW4gPSB7XG4gIDUwOiAnI2U4ZjVlOScsXG4gIDEwMDogJyNjOGU2YzknLFxuICAyMDA6ICcjYTVkNmE3JyxcbiAgMzAwOiAnIzgxYzc4NCcsXG4gIDQwMDogJyM2NmJiNmEnLFxuICA1MDA6ICcjNGNhZjUwJyxcbiAgNjAwOiAnIzQzYTA0NycsXG4gIDcwMDogJyMzODhlM2MnLFxuICA4MDA6ICcjMmU3ZDMyJyxcbiAgOTAwOiAnIzFiNWUyMCcsXG4gIEExMDA6ICcjYjlmNmNhJyxcbiAgQTIwMDogJyM2OWYwYWUnLFxuICBBNDAwOiAnIzAwZTY3NicsXG4gIEE3MDA6ICcjMDBjODUzJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGdyZWVuOyIsImNvbnN0IG9yYW5nZSA9IHtcbiAgNTA6ICcjZmZmM2UwJyxcbiAgMTAwOiAnI2ZmZTBiMicsXG4gIDIwMDogJyNmZmNjODAnLFxuICAzMDA6ICcjZmZiNzRkJyxcbiAgNDAwOiAnI2ZmYTcyNicsXG4gIDUwMDogJyNmZjk4MDAnLFxuICA2MDA6ICcjZmI4YzAwJyxcbiAgNzAwOiAnI2Y1N2MwMCcsXG4gIDgwMDogJyNlZjZjMDAnLFxuICA5MDA6ICcjZTY1MTAwJyxcbiAgQTEwMDogJyNmZmQxODAnLFxuICBBMjAwOiAnI2ZmYWI0MCcsXG4gIEE0MDA6ICcjZmY5MTAwJyxcbiAgQTcwMDogJyNmZjZkMDAnXG59O1xuZXhwb3J0IGRlZmF1bHQgb3JhbmdlOyIsImNvbnN0IGdyZXkgPSB7XG4gIDUwOiAnI2ZhZmFmYScsXG4gIDEwMDogJyNmNWY1ZjUnLFxuICAyMDA6ICcjZWVlZWVlJyxcbiAgMzAwOiAnI2UwZTBlMCcsXG4gIDQwMDogJyNiZGJkYmQnLFxuICA1MDA6ICcjOWU5ZTllJyxcbiAgNjAwOiAnIzc1NzU3NScsXG4gIDcwMDogJyM2MTYxNjEnLFxuICA4MDA6ICcjNDI0MjQyJyxcbiAgOTAwOiAnIzIxMjEyMScsXG4gIEExMDA6ICcjZjVmNWY1JyxcbiAgQTIwMDogJyNlZWVlZWUnLFxuICBBNDAwOiAnI2JkYmRiZCcsXG4gIEE3MDA6ICcjNjE2MTYxJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGdyZXk7IiwiLyoqXG4gKiBXQVJOSU5HOiBEb24ndCBpbXBvcnQgdGhpcyBkaXJlY3RseS5cbiAqIFVzZSBgTXVpRXJyb3JgIGZyb20gYEBtdWkvaW50ZXJuYWwtYmFiZWwtbWFjcm9zL011aUVycm9yLm1hY3JvYCBpbnN0ZWFkLlxuICogQHBhcmFtIHtudW1iZXJ9IGNvZGVcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0TXVpRXJyb3JNZXNzYWdlKGNvZGUpIHtcbiAgLy8gQXBwbHkgYmFiZWwtcGx1Z2luLXRyYW5zZm9ybS10ZW1wbGF0ZS1saXRlcmFscyBpbiBsb29zZSBtb2RlXG4gIC8vIGxvb3NlIG1vZGUgaXMgc2FmZSBpZiB3ZSdyZSBjb25jYXRlbmF0aW5nIHByaW1pdGl2ZXNcbiAgLy8gc2VlIGh0dHBzOi8vYmFiZWxqcy5pby9kb2NzL2VuL2JhYmVsLXBsdWdpbi10cmFuc2Zvcm0tdGVtcGxhdGUtbGl0ZXJhbHMjbG9vc2VcbiAgLyogZXNsaW50LWRpc2FibGUgcHJlZmVyLXRlbXBsYXRlICovXG4gIGxldCB1cmwgPSAnaHR0cHM6Ly9tdWkuY29tL3Byb2R1Y3Rpb24tZXJyb3IvP2NvZGU9JyArIGNvZGU7XG4gIGZvciAobGV0IGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgLy8gcmVzdCBwYXJhbXMgb3Zlci10cmFuc3BpbGUgZm9yIHRoaXMgY2FzZVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItcmVzdC1wYXJhbXNcbiAgICB1cmwgKz0gJyZhcmdzW109JyArIGVuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbaV0pO1xuICB9XG4gIHJldHVybiAnTWluaWZpZWQgTVVJIGVycm9yICMnICsgY29kZSArICc7IHZpc2l0ICcgKyB1cmwgKyAnIGZvciB0aGUgZnVsbCBtZXNzYWdlLic7XG4gIC8qIGVzbGludC1lbmFibGUgcHJlZmVyLXRlbXBsYXRlICovXG59IiwiZXhwb3J0IGRlZmF1bHQgJyQkbWF0ZXJpYWwnOyIsImZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICByZXR1cm4gX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduID8gT2JqZWN0LmFzc2lnbi5iaW5kKCkgOiBmdW5jdGlvbiAobikge1xuICAgIGZvciAodmFyIGUgPSAxOyBlIDwgYXJndW1lbnRzLmxlbmd0aDsgZSsrKSB7XG4gICAgICB2YXIgdCA9IGFyZ3VtZW50c1tlXTtcbiAgICAgIGZvciAodmFyIHIgaW4gdCkgKHt9KS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsIHIpICYmIChuW3JdID0gdFtyXSk7XG4gICAgfVxuICAgIHJldHVybiBuO1xuICB9LCBfZXh0ZW5kcy5hcHBseShudWxsLCBhcmd1bWVudHMpO1xufVxuZXhwb3J0IHsgX2V4dGVuZHMgYXMgZGVmYXVsdCB9OyIsImZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHIsIGUpIHtcbiAgaWYgKG51bGwgPT0gcikgcmV0dXJuIHt9O1xuICB2YXIgdCA9IHt9O1xuICBmb3IgKHZhciBuIGluIHIpIGlmICh7fS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHIsIG4pKSB7XG4gICAgaWYgKGUuaW5kZXhPZihuKSA+PSAwKSBjb250aW51ZTtcbiAgICB0W25dID0gcltuXTtcbiAgfVxuICByZXR1cm4gdDtcbn1cbmV4cG9ydCB7IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGFzIGRlZmF1bHQgfTsiLCJmdW5jdGlvbiBtZW1vaXplKGZuKSB7XG4gIHZhciBjYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHJldHVybiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgaWYgKGNhY2hlW2FyZ10gPT09IHVuZGVmaW5lZCkgY2FjaGVbYXJnXSA9IGZuKGFyZyk7XG4gICAgcmV0dXJuIGNhY2hlW2FyZ107XG4gIH07XG59XG5cbmV4cG9ydCB7IG1lbW9pemUgYXMgZGVmYXVsdCB9O1xuIiwiaW1wb3J0IG1lbW9pemUgZnJvbSAnQGVtb3Rpb24vbWVtb2l6ZSc7XG5cbnZhciByZWFjdFByb3BzUmVnZXggPSAvXigoY2hpbGRyZW58ZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUx8a2V5fHJlZnxhdXRvRm9jdXN8ZGVmYXVsdFZhbHVlfGRlZmF1bHRDaGVja2VkfGlubmVySFRNTHxzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmd8c3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nfHZhbHVlTGlua3xhYmJyfGFjY2VwdHxhY2NlcHRDaGFyc2V0fGFjY2Vzc0tleXxhY3Rpb258YWxsb3d8YWxsb3dVc2VyTWVkaWF8YWxsb3dQYXltZW50UmVxdWVzdHxhbGxvd0Z1bGxTY3JlZW58YWxsb3dUcmFuc3BhcmVuY3l8YWx0fGFzeW5jfGF1dG9Db21wbGV0ZXxhdXRvUGxheXxjYXB0dXJlfGNlbGxQYWRkaW5nfGNlbGxTcGFjaW5nfGNoYWxsZW5nZXxjaGFyU2V0fGNoZWNrZWR8Y2l0ZXxjbGFzc0lEfGNsYXNzTmFtZXxjb2xzfGNvbFNwYW58Y29udGVudHxjb250ZW50RWRpdGFibGV8Y29udGV4dE1lbnV8Y29udHJvbHN8Y29udHJvbHNMaXN0fGNvb3Jkc3xjcm9zc09yaWdpbnxkYXRhfGRhdGVUaW1lfGRlY29kaW5nfGRlZmF1bHR8ZGVmZXJ8ZGlyfGRpc2FibGVkfGRpc2FibGVQaWN0dXJlSW5QaWN0dXJlfGRpc2FibGVSZW1vdGVQbGF5YmFja3xkb3dubG9hZHxkcmFnZ2FibGV8ZW5jVHlwZXxlbnRlcktleUhpbnR8Zm9ybXxmb3JtQWN0aW9ufGZvcm1FbmNUeXBlfGZvcm1NZXRob2R8Zm9ybU5vVmFsaWRhdGV8Zm9ybVRhcmdldHxmcmFtZUJvcmRlcnxoZWFkZXJzfGhlaWdodHxoaWRkZW58aGlnaHxocmVmfGhyZWZMYW5nfGh0bWxGb3J8aHR0cEVxdWl2fGlkfGlucHV0TW9kZXxpbnRlZ3JpdHl8aXN8a2V5UGFyYW1zfGtleVR5cGV8a2luZHxsYWJlbHxsYW5nfGxpc3R8bG9hZGluZ3xsb29wfGxvd3xtYXJnaW5IZWlnaHR8bWFyZ2luV2lkdGh8bWF4fG1heExlbmd0aHxtZWRpYXxtZWRpYUdyb3VwfG1ldGhvZHxtaW58bWluTGVuZ3RofG11bHRpcGxlfG11dGVkfG5hbWV8bm9uY2V8bm9WYWxpZGF0ZXxvcGVufG9wdGltdW18cGF0dGVybnxwbGFjZWhvbGRlcnxwbGF5c0lubGluZXxwb3N0ZXJ8cHJlbG9hZHxwcm9maWxlfHJhZGlvR3JvdXB8cmVhZE9ubHl8cmVmZXJyZXJQb2xpY3l8cmVsfHJlcXVpcmVkfHJldmVyc2VkfHJvbGV8cm93c3xyb3dTcGFufHNhbmRib3h8c2NvcGV8c2NvcGVkfHNjcm9sbGluZ3xzZWFtbGVzc3xzZWxlY3RlZHxzaGFwZXxzaXplfHNpemVzfHNsb3R8c3BhbnxzcGVsbENoZWNrfHNyY3xzcmNEb2N8c3JjTGFuZ3xzcmNTZXR8c3RhcnR8c3RlcHxzdHlsZXxzdW1tYXJ5fHRhYkluZGV4fHRhcmdldHx0aXRsZXx0cmFuc2xhdGV8dHlwZXx1c2VNYXB8dmFsdWV8d2lkdGh8d21vZGV8d3JhcHxhYm91dHxkYXRhdHlwZXxpbmxpc3R8cHJlZml4fHByb3BlcnR5fHJlc291cmNlfHR5cGVvZnx2b2NhYnxhdXRvQ2FwaXRhbGl6ZXxhdXRvQ29ycmVjdHxhdXRvU2F2ZXxjb2xvcnxpbmNyZW1lbnRhbHxmYWxsYmFja3xpbmVydHxpdGVtUHJvcHxpdGVtU2NvcGV8aXRlbVR5cGV8aXRlbUlEfGl0ZW1SZWZ8b258b3B0aW9ufHJlc3VsdHN8c2VjdXJpdHl8dW5zZWxlY3RhYmxlfGFjY2VudEhlaWdodHxhY2N1bXVsYXRlfGFkZGl0aXZlfGFsaWdubWVudEJhc2VsaW5lfGFsbG93UmVvcmRlcnxhbHBoYWJldGljfGFtcGxpdHVkZXxhcmFiaWNGb3JtfGFzY2VudHxhdHRyaWJ1dGVOYW1lfGF0dHJpYnV0ZVR5cGV8YXV0b1JldmVyc2V8YXppbXV0aHxiYXNlRnJlcXVlbmN5fGJhc2VsaW5lU2hpZnR8YmFzZVByb2ZpbGV8YmJveHxiZWdpbnxiaWFzfGJ5fGNhbGNNb2RlfGNhcEhlaWdodHxjbGlwfGNsaXBQYXRoVW5pdHN8Y2xpcFBhdGh8Y2xpcFJ1bGV8Y29sb3JJbnRlcnBvbGF0aW9ufGNvbG9ySW50ZXJwb2xhdGlvbkZpbHRlcnN8Y29sb3JQcm9maWxlfGNvbG9yUmVuZGVyaW5nfGNvbnRlbnRTY3JpcHRUeXBlfGNvbnRlbnRTdHlsZVR5cGV8Y3Vyc29yfGN4fGN5fGR8ZGVjZWxlcmF0ZXxkZXNjZW50fGRpZmZ1c2VDb25zdGFudHxkaXJlY3Rpb258ZGlzcGxheXxkaXZpc29yfGRvbWluYW50QmFzZWxpbmV8ZHVyfGR4fGR5fGVkZ2VNb2RlfGVsZXZhdGlvbnxlbmFibGVCYWNrZ3JvdW5kfGVuZHxleHBvbmVudHxleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkfGZpbGx8ZmlsbE9wYWNpdHl8ZmlsbFJ1bGV8ZmlsdGVyfGZpbHRlclJlc3xmaWx0ZXJVbml0c3xmbG9vZENvbG9yfGZsb29kT3BhY2l0eXxmb2N1c2FibGV8Zm9udEZhbWlseXxmb250U2l6ZXxmb250U2l6ZUFkanVzdHxmb250U3RyZXRjaHxmb250U3R5bGV8Zm9udFZhcmlhbnR8Zm9udFdlaWdodHxmb3JtYXR8ZnJvbXxmcnxmeHxmeXxnMXxnMnxnbHlwaE5hbWV8Z2x5cGhPcmllbnRhdGlvbkhvcml6b250YWx8Z2x5cGhPcmllbnRhdGlvblZlcnRpY2FsfGdseXBoUmVmfGdyYWRpZW50VHJhbnNmb3JtfGdyYWRpZW50VW5pdHN8aGFuZ2luZ3xob3JpekFkdlh8aG9yaXpPcmlnaW5YfGlkZW9ncmFwaGljfGltYWdlUmVuZGVyaW5nfGlufGluMnxpbnRlcmNlcHR8a3xrMXxrMnxrM3xrNHxrZXJuZWxNYXRyaXh8a2VybmVsVW5pdExlbmd0aHxrZXJuaW5nfGtleVBvaW50c3xrZXlTcGxpbmVzfGtleVRpbWVzfGxlbmd0aEFkanVzdHxsZXR0ZXJTcGFjaW5nfGxpZ2h0aW5nQ29sb3J8bGltaXRpbmdDb25lQW5nbGV8bG9jYWx8bWFya2VyRW5kfG1hcmtlck1pZHxtYXJrZXJTdGFydHxtYXJrZXJIZWlnaHR8bWFya2VyVW5pdHN8bWFya2VyV2lkdGh8bWFza3xtYXNrQ29udGVudFVuaXRzfG1hc2tVbml0c3xtYXRoZW1hdGljYWx8bW9kZXxudW1PY3RhdmVzfG9mZnNldHxvcGFjaXR5fG9wZXJhdG9yfG9yZGVyfG9yaWVudHxvcmllbnRhdGlvbnxvcmlnaW58b3ZlcmZsb3d8b3ZlcmxpbmVQb3NpdGlvbnxvdmVybGluZVRoaWNrbmVzc3xwYW5vc2UxfHBhaW50T3JkZXJ8cGF0aExlbmd0aHxwYXR0ZXJuQ29udGVudFVuaXRzfHBhdHRlcm5UcmFuc2Zvcm18cGF0dGVyblVuaXRzfHBvaW50ZXJFdmVudHN8cG9pbnRzfHBvaW50c0F0WHxwb2ludHNBdFl8cG9pbnRzQXRafHByZXNlcnZlQWxwaGF8cHJlc2VydmVBc3BlY3RSYXRpb3xwcmltaXRpdmVVbml0c3xyfHJhZGl1c3xyZWZYfHJlZll8cmVuZGVyaW5nSW50ZW50fHJlcGVhdENvdW50fHJlcGVhdER1cnxyZXF1aXJlZEV4dGVuc2lvbnN8cmVxdWlyZWRGZWF0dXJlc3xyZXN0YXJ0fHJlc3VsdHxyb3RhdGV8cnh8cnl8c2NhbGV8c2VlZHxzaGFwZVJlbmRlcmluZ3xzbG9wZXxzcGFjaW5nfHNwZWN1bGFyQ29uc3RhbnR8c3BlY3VsYXJFeHBvbmVudHxzcGVlZHxzcHJlYWRNZXRob2R8c3RhcnRPZmZzZXR8c3RkRGV2aWF0aW9ufHN0ZW1ofHN0ZW12fHN0aXRjaFRpbGVzfHN0b3BDb2xvcnxzdG9wT3BhY2l0eXxzdHJpa2V0aHJvdWdoUG9zaXRpb258c3RyaWtldGhyb3VnaFRoaWNrbmVzc3xzdHJpbmd8c3Ryb2tlfHN0cm9rZURhc2hhcnJheXxzdHJva2VEYXNob2Zmc2V0fHN0cm9rZUxpbmVjYXB8c3Ryb2tlTGluZWpvaW58c3Ryb2tlTWl0ZXJsaW1pdHxzdHJva2VPcGFjaXR5fHN0cm9rZVdpZHRofHN1cmZhY2VTY2FsZXxzeXN0ZW1MYW5ndWFnZXx0YWJsZVZhbHVlc3x0YXJnZXRYfHRhcmdldFl8dGV4dEFuY2hvcnx0ZXh0RGVjb3JhdGlvbnx0ZXh0UmVuZGVyaW5nfHRleHRMZW5ndGh8dG98dHJhbnNmb3JtfHUxfHUyfHVuZGVybGluZVBvc2l0aW9ufHVuZGVybGluZVRoaWNrbmVzc3x1bmljb2RlfHVuaWNvZGVCaWRpfHVuaWNvZGVSYW5nZXx1bml0c1BlckVtfHZBbHBoYWJldGljfHZIYW5naW5nfHZJZGVvZ3JhcGhpY3x2TWF0aGVtYXRpY2FsfHZhbHVlc3x2ZWN0b3JFZmZlY3R8dmVyc2lvbnx2ZXJ0QWR2WXx2ZXJ0T3JpZ2luWHx2ZXJ0T3JpZ2luWXx2aWV3Qm94fHZpZXdUYXJnZXR8dmlzaWJpbGl0eXx3aWR0aHN8d29yZFNwYWNpbmd8d3JpdGluZ01vZGV8eHx4SGVpZ2h0fHgxfHgyfHhDaGFubmVsU2VsZWN0b3J8eGxpbmtBY3R1YXRlfHhsaW5rQXJjcm9sZXx4bGlua0hyZWZ8eGxpbmtSb2xlfHhsaW5rU2hvd3x4bGlua1RpdGxlfHhsaW5rVHlwZXx4bWxCYXNlfHhtbG5zfHhtbG5zWGxpbmt8eG1sTGFuZ3x4bWxTcGFjZXx5fHkxfHkyfHlDaGFubmVsU2VsZWN0b3J8enx6b29tQW5kUGFufGZvcnxjbGFzc3xhdXRvZm9jdXMpfCgoW0RkXVtBYV1bVHRdW0FhXXxbQWFdW1JyXVtJaV1bQWFdfHgpLS4qKSkkLzsgLy8gaHR0cHM6Ly9lc2JlbmNoLmNvbS9iZW5jaC81YmZlZTY4YTRjZDdlNjAwOWVmNjFkMjNcblxudmFyIGlzUHJvcFZhbGlkID0gLyogI19fUFVSRV9fICovbWVtb2l6ZShmdW5jdGlvbiAocHJvcCkge1xuICByZXR1cm4gcmVhY3RQcm9wc1JlZ2V4LnRlc3QocHJvcCkgfHwgcHJvcC5jaGFyQ29kZUF0KDApID09PSAxMTFcbiAgLyogbyAqL1xuICAmJiBwcm9wLmNoYXJDb2RlQXQoMSkgPT09IDExMFxuICAvKiBuICovXG4gICYmIHByb3AuY2hhckNvZGVBdCgyKSA8IDkxO1xufVxuLyogWisxICovXG4pO1xuXG5leHBvcnQgeyBpc1Byb3BWYWxpZCBhcyBkZWZhdWx0IH07XG4iLCIvKlxuXG5CYXNlZCBvZmYgZ2xhbW9yJ3MgU3R5bGVTaGVldCwgdGhhbmtzIFN1bmlsIOKdpO+4j1xuXG5oaWdoIHBlcmZvcm1hbmNlIFN0eWxlU2hlZXQgZm9yIGNzcy1pbi1qcyBzeXN0ZW1zXG5cbi0gdXNlcyBtdWx0aXBsZSBzdHlsZSB0YWdzIGJlaGluZCB0aGUgc2NlbmVzIGZvciBtaWxsaW9ucyBvZiBydWxlc1xuLSB1c2VzIGBpbnNlcnRSdWxlYCBmb3IgYXBwZW5kaW5nIGluIHByb2R1Y3Rpb24gZm9yICptdWNoKiBmYXN0ZXIgcGVyZm9ybWFuY2VcblxuLy8gdXNhZ2VcblxuaW1wb3J0IHsgU3R5bGVTaGVldCB9IGZyb20gJ0BlbW90aW9uL3NoZWV0J1xuXG5sZXQgc3R5bGVTaGVldCA9IG5ldyBTdHlsZVNoZWV0KHsga2V5OiAnJywgY29udGFpbmVyOiBkb2N1bWVudC5oZWFkIH0pXG5cbnN0eWxlU2hlZXQuaW5zZXJ0KCcjYm94IHsgYm9yZGVyOiAxcHggc29saWQgcmVkOyB9Jylcbi0gYXBwZW5kcyBhIGNzcyBydWxlIGludG8gdGhlIHN0eWxlc2hlZXRcblxuc3R5bGVTaGVldC5mbHVzaCgpXG4tIGVtcHRpZXMgdGhlIHN0eWxlc2hlZXQgb2YgYWxsIGl0cyBjb250ZW50c1xuXG4qL1xuLy8gJEZsb3dGaXhNZVxuZnVuY3Rpb24gc2hlZXRGb3JUYWcodGFnKSB7XG4gIGlmICh0YWcuc2hlZXQpIHtcbiAgICAvLyAkRmxvd0ZpeE1lXG4gICAgcmV0dXJuIHRhZy5zaGVldDtcbiAgfSAvLyB0aGlzIHdlaXJkbmVzcyBicm91Z2h0IHRvIHlvdSBieSBmaXJlZm94XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cblxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZG9jdW1lbnQuc3R5bGVTaGVldHMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoZG9jdW1lbnQuc3R5bGVTaGVldHNbaV0ub3duZXJOb2RlID09PSB0YWcpIHtcbiAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgIHJldHVybiBkb2N1bWVudC5zdHlsZVNoZWV0c1tpXTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIHRhZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIHRhZy5zZXRBdHRyaWJ1dGUoJ2RhdGEtZW1vdGlvbicsIG9wdGlvbnMua2V5KTtcblxuICBpZiAob3B0aW9ucy5ub25jZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdGFnLnNldEF0dHJpYnV0ZSgnbm9uY2UnLCBvcHRpb25zLm5vbmNlKTtcbiAgfVxuXG4gIHRhZy5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJykpO1xuICB0YWcuc2V0QXR0cmlidXRlKCdkYXRhLXMnLCAnJyk7XG4gIHJldHVybiB0YWc7XG59XG5cbnZhciBTdHlsZVNoZWV0ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgLy8gVXNpbmcgTm9kZSBpbnN0ZWFkIG9mIEhUTUxFbGVtZW50IHNpbmNlIGNvbnRhaW5lciBtYXkgYmUgYSBTaGFkb3dSb290XG4gIGZ1bmN0aW9uIFN0eWxlU2hlZXQob3B0aW9ucykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB0aGlzLl9pbnNlcnRUYWcgPSBmdW5jdGlvbiAodGFnKSB7XG4gICAgICB2YXIgYmVmb3JlO1xuXG4gICAgICBpZiAoX3RoaXMudGFncy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgaWYgKF90aGlzLmluc2VydGlvblBvaW50KSB7XG4gICAgICAgICAgYmVmb3JlID0gX3RoaXMuaW5zZXJ0aW9uUG9pbnQubmV4dFNpYmxpbmc7XG4gICAgICAgIH0gZWxzZSBpZiAoX3RoaXMucHJlcGVuZCkge1xuICAgICAgICAgIGJlZm9yZSA9IF90aGlzLmNvbnRhaW5lci5maXJzdENoaWxkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJlZm9yZSA9IF90aGlzLmJlZm9yZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmVmb3JlID0gX3RoaXMudGFnc1tfdGhpcy50YWdzLmxlbmd0aCAtIDFdLm5leHRTaWJsaW5nO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5jb250YWluZXIuaW5zZXJ0QmVmb3JlKHRhZywgYmVmb3JlKTtcblxuICAgICAgX3RoaXMudGFncy5wdXNoKHRhZyk7XG4gICAgfTtcblxuICAgIHRoaXMuaXNTcGVlZHkgPSBvcHRpb25zLnNwZWVkeSA9PT0gdW5kZWZpbmVkID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJyA6IG9wdGlvbnMuc3BlZWR5O1xuICAgIHRoaXMudGFncyA9IFtdO1xuICAgIHRoaXMuY3RyID0gMDtcbiAgICB0aGlzLm5vbmNlID0gb3B0aW9ucy5ub25jZTsgLy8ga2V5IGlzIHRoZSB2YWx1ZSBvZiB0aGUgZGF0YS1lbW90aW9uIGF0dHJpYnV0ZSwgaXQncyB1c2VkIHRvIGlkZW50aWZ5IGRpZmZlcmVudCBzaGVldHNcblxuICAgIHRoaXMua2V5ID0gb3B0aW9ucy5rZXk7XG4gICAgdGhpcy5jb250YWluZXIgPSBvcHRpb25zLmNvbnRhaW5lcjtcbiAgICB0aGlzLnByZXBlbmQgPSBvcHRpb25zLnByZXBlbmQ7XG4gICAgdGhpcy5pbnNlcnRpb25Qb2ludCA9IG9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQ7XG4gICAgdGhpcy5iZWZvcmUgPSBudWxsO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN0eWxlU2hlZXQucHJvdG90eXBlO1xuXG4gIF9wcm90by5oeWRyYXRlID0gZnVuY3Rpb24gaHlkcmF0ZShub2Rlcykge1xuICAgIG5vZGVzLmZvckVhY2godGhpcy5faW5zZXJ0VGFnKTtcbiAgfTtcblxuICBfcHJvdG8uaW5zZXJ0ID0gZnVuY3Rpb24gaW5zZXJ0KHJ1bGUpIHtcbiAgICAvLyB0aGUgbWF4IGxlbmd0aCBpcyBob3cgbWFueSBydWxlcyB3ZSBoYXZlIHBlciBzdHlsZSB0YWcsIGl0J3MgNjUwMDAgaW4gc3BlZWR5IG1vZGVcbiAgICAvLyBpdCdzIDEgaW4gZGV2IGJlY2F1c2Ugd2UgaW5zZXJ0IHNvdXJjZSBtYXBzIHRoYXQgbWFwIGEgc2luZ2xlIHJ1bGUgdG8gYSBsb2NhdGlvblxuICAgIC8vIGFuZCB5b3UgY2FuIG9ubHkgaGF2ZSBvbmUgc291cmNlIG1hcCBwZXIgc3R5bGUgdGFnXG4gICAgaWYgKHRoaXMuY3RyICUgKHRoaXMuaXNTcGVlZHkgPyA2NTAwMCA6IDEpID09PSAwKSB7XG4gICAgICB0aGlzLl9pbnNlcnRUYWcoY3JlYXRlU3R5bGVFbGVtZW50KHRoaXMpKTtcbiAgICB9XG5cbiAgICB2YXIgdGFnID0gdGhpcy50YWdzW3RoaXMudGFncy5sZW5ndGggLSAxXTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgaXNJbXBvcnRSdWxlID0gcnVsZS5jaGFyQ29kZUF0KDApID09PSA2NCAmJiBydWxlLmNoYXJDb2RlQXQoMSkgPT09IDEwNTtcblxuICAgICAgaWYgKGlzSW1wb3J0UnVsZSAmJiB0aGlzLl9hbHJlYWR5SW5zZXJ0ZWRPcmRlckluc2Vuc2l0aXZlUnVsZSkge1xuICAgICAgICAvLyB0aGlzIHdvdWxkIG9ubHkgY2F1c2UgcHJvYmxlbSBpbiBzcGVlZHkgbW9kZVxuICAgICAgICAvLyBidXQgd2UgZG9uJ3Qgd2FudCBlbmFibGluZyBzcGVlZHkgdG8gYWZmZWN0IHRoZSBvYnNlcnZhYmxlIGJlaGF2aW9yXG4gICAgICAgIC8vIHNvIHdlIHJlcG9ydCB0aGlzIGVycm9yIGF0IGFsbCB0aW1lc1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiWW91J3JlIGF0dGVtcHRpbmcgdG8gaW5zZXJ0IHRoZSBmb2xsb3dpbmcgcnVsZTpcXG5cIiArIHJ1bGUgKyAnXFxuXFxuYEBpbXBvcnRgIHJ1bGVzIG11c3QgYmUgYmVmb3JlIGFsbCBvdGhlciB0eXBlcyBvZiBydWxlcyBpbiBhIHN0eWxlc2hlZXQgYnV0IG90aGVyIHJ1bGVzIGhhdmUgYWxyZWFkeSBiZWVuIGluc2VydGVkLiBQbGVhc2UgZW5zdXJlIHRoYXQgYEBpbXBvcnRgIHJ1bGVzIGFyZSBiZWZvcmUgYWxsIG90aGVyIHJ1bGVzLicpO1xuICAgICAgfVxuICAgICAgdGhpcy5fYWxyZWFkeUluc2VydGVkT3JkZXJJbnNlbnNpdGl2ZVJ1bGUgPSB0aGlzLl9hbHJlYWR5SW5zZXJ0ZWRPcmRlckluc2Vuc2l0aXZlUnVsZSB8fCAhaXNJbXBvcnRSdWxlO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmlzU3BlZWR5KSB7XG4gICAgICB2YXIgc2hlZXQgPSBzaGVldEZvclRhZyh0YWcpO1xuXG4gICAgICB0cnkge1xuICAgICAgICAvLyB0aGlzIGlzIHRoZSB1bHRyYWZhc3QgdmVyc2lvbiwgd29ya3MgYWNyb3NzIGJyb3dzZXJzXG4gICAgICAgIC8vIHRoZSBiaWcgZHJhd2JhY2sgaXMgdGhhdCB0aGUgY3NzIHdvbid0IGJlIGVkaXRhYmxlIGluIGRldnRvb2xzXG4gICAgICAgIHNoZWV0Lmluc2VydFJ1bGUocnVsZSwgc2hlZXQuY3NzUnVsZXMubGVuZ3RoKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIS86KC1tb3otcGxhY2Vob2xkZXJ8LW1vei1mb2N1cy1pbm5lcnwtbW96LWZvY3VzcmluZ3wtbXMtaW5wdXQtcGxhY2Vob2xkZXJ8LW1vei1yZWFkLXdyaXRlfC1tb3otcmVhZC1vbmx5fC1tcy1jbGVhcnwtbXMtZXhwYW5kfC1tcy1yZXZlYWwpey8udGVzdChydWxlKSkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJUaGVyZSB3YXMgYSBwcm9ibGVtIGluc2VydGluZyB0aGUgZm9sbG93aW5nIHJ1bGU6IFxcXCJcIiArIHJ1bGUgKyBcIlxcXCJcIiwgZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGFnLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHJ1bGUpKTtcbiAgICB9XG5cbiAgICB0aGlzLmN0cisrO1xuICB9O1xuXG4gIF9wcm90by5mbHVzaCA9IGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgIC8vICRGbG93Rml4TWVcbiAgICB0aGlzLnRhZ3MuZm9yRWFjaChmdW5jdGlvbiAodGFnKSB7XG4gICAgICByZXR1cm4gdGFnLnBhcmVudE5vZGUgJiYgdGFnLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGFnKTtcbiAgICB9KTtcbiAgICB0aGlzLnRhZ3MgPSBbXTtcbiAgICB0aGlzLmN0ciA9IDA7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdGhpcy5fYWxyZWFkeUluc2VydGVkT3JkZXJJbnNlbnNpdGl2ZVJ1bGUgPSBmYWxzZTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFN0eWxlU2hlZXQ7XG59KCk7XG5cbmV4cG9ydCB7IFN0eWxlU2hlZXQgfTtcbiIsImV4cG9ydCB2YXIgTVMgPSAnLW1zLSdcbmV4cG9ydCB2YXIgTU9aID0gJy1tb3otJ1xuZXhwb3J0IHZhciBXRUJLSVQgPSAnLXdlYmtpdC0nXG5cbmV4cG9ydCB2YXIgQ09NTUVOVCA9ICdjb21tJ1xuZXhwb3J0IHZhciBSVUxFU0VUID0gJ3J1bGUnXG5leHBvcnQgdmFyIERFQ0xBUkFUSU9OID0gJ2RlY2wnXG5cbmV4cG9ydCB2YXIgUEFHRSA9ICdAcGFnZSdcbmV4cG9ydCB2YXIgTUVESUEgPSAnQG1lZGlhJ1xuZXhwb3J0IHZhciBJTVBPUlQgPSAnQGltcG9ydCdcbmV4cG9ydCB2YXIgQ0hBUlNFVCA9ICdAY2hhcnNldCdcbmV4cG9ydCB2YXIgVklFV1BPUlQgPSAnQHZpZXdwb3J0J1xuZXhwb3J0IHZhciBTVVBQT1JUUyA9ICdAc3VwcG9ydHMnXG5leHBvcnQgdmFyIERPQ1VNRU5UID0gJ0Bkb2N1bWVudCdcbmV4cG9ydCB2YXIgTkFNRVNQQUNFID0gJ0BuYW1lc3BhY2UnXG5leHBvcnQgdmFyIEtFWUZSQU1FUyA9ICdAa2V5ZnJhbWVzJ1xuZXhwb3J0IHZhciBGT05UX0ZBQ0UgPSAnQGZvbnQtZmFjZSdcbmV4cG9ydCB2YXIgQ09VTlRFUl9TVFlMRSA9ICdAY291bnRlci1zdHlsZSdcbmV4cG9ydCB2YXIgRk9OVF9GRUFUVVJFX1ZBTFVFUyA9ICdAZm9udC1mZWF0dXJlLXZhbHVlcydcbmV4cG9ydCB2YXIgTEFZRVIgPSAnQGxheWVyJ1xuIiwiLyoqXG4gKiBAcGFyYW0ge251bWJlcn1cbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IHZhciBhYnMgPSBNYXRoLmFic1xuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgdmFyIGZyb20gPSBTdHJpbmcuZnJvbUNoYXJDb2RlXG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9XG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cbmV4cG9ydCB2YXIgYXNzaWduID0gT2JqZWN0LmFzc2lnblxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aFxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gaGFzaCAodmFsdWUsIGxlbmd0aCkge1xuXHRyZXR1cm4gY2hhcmF0KHZhbHVlLCAwKSBeIDQ1ID8gKCgoKCgoKGxlbmd0aCA8PCAyKSBeIGNoYXJhdCh2YWx1ZSwgMCkpIDw8IDIpIF4gY2hhcmF0KHZhbHVlLCAxKSkgPDwgMikgXiBjaGFyYXQodmFsdWUsIDIpKSA8PCAyKSBeIGNoYXJhdCh2YWx1ZSwgMykgOiAwXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmltICh2YWx1ZSkge1xuXHRyZXR1cm4gdmFsdWUudHJpbSgpXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge1JlZ0V4cH0gcGF0dGVyblxuICogQHJldHVybiB7c3RyaW5nP31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1hdGNoICh2YWx1ZSwgcGF0dGVybikge1xuXHRyZXR1cm4gKHZhbHVlID0gcGF0dGVybi5leGVjKHZhbHVlKSkgPyB2YWx1ZVswXSA6IHZhbHVlXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0geyhzdHJpbmd8UmVnRXhwKX0gcGF0dGVyblxuICogQHBhcmFtIHtzdHJpbmd9IHJlcGxhY2VtZW50XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXBsYWNlICh2YWx1ZSwgcGF0dGVybiwgcmVwbGFjZW1lbnQpIHtcblx0cmV0dXJuIHZhbHVlLnJlcGxhY2UocGF0dGVybiwgcmVwbGFjZW1lbnQpXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge3N0cmluZ30gc2VhcmNoXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbmRleG9mICh2YWx1ZSwgc2VhcmNoKSB7XG5cdHJldHVybiB2YWx1ZS5pbmRleE9mKHNlYXJjaClcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gY2hhcmF0ICh2YWx1ZSwgaW5kZXgpIHtcblx0cmV0dXJuIHZhbHVlLmNoYXJDb2RlQXQoaW5kZXgpIHwgMFxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtudW1iZXJ9IGJlZ2luXG4gKiBAcGFyYW0ge251bWJlcn0gZW5kXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdWJzdHIgKHZhbHVlLCBiZWdpbiwgZW5kKSB7XG5cdHJldHVybiB2YWx1ZS5zbGljZShiZWdpbiwgZW5kKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RybGVuICh2YWx1ZSkge1xuXHRyZXR1cm4gdmFsdWUubGVuZ3RoXG59XG5cbi8qKlxuICogQHBhcmFtIHthbnlbXX0gdmFsdWVcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNpemVvZiAodmFsdWUpIHtcblx0cmV0dXJuIHZhbHVlLmxlbmd0aFxufVxuXG4vKipcbiAqIEBwYXJhbSB7YW55fSB2YWx1ZVxuICogQHBhcmFtIHthbnlbXX0gYXJyYXlcbiAqIEByZXR1cm4ge2FueX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFwcGVuZCAodmFsdWUsIGFycmF5KSB7XG5cdHJldHVybiBhcnJheS5wdXNoKHZhbHVlKSwgdmFsdWVcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBhcnJheVxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbWJpbmUgKGFycmF5LCBjYWxsYmFjaykge1xuXHRyZXR1cm4gYXJyYXkubWFwKGNhbGxiYWNrKS5qb2luKCcnKVxufVxuIiwiaW1wb3J0IHtmcm9tLCB0cmltLCBjaGFyYXQsIHN0cmxlbiwgc3Vic3RyLCBhcHBlbmQsIGFzc2lnbn0gZnJvbSAnLi9VdGlsaXR5LmpzJ1xuXG5leHBvcnQgdmFyIGxpbmUgPSAxXG5leHBvcnQgdmFyIGNvbHVtbiA9IDFcbmV4cG9ydCB2YXIgbGVuZ3RoID0gMFxuZXhwb3J0IHZhciBwb3NpdGlvbiA9IDBcbmV4cG9ydCB2YXIgY2hhcmFjdGVyID0gMFxuZXhwb3J0IHZhciBjaGFyYWN0ZXJzID0gJydcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7b2JqZWN0IHwgbnVsbH0gcm9vdFxuICogQHBhcmFtIHtvYmplY3QgfCBudWxsfSBwYXJlbnRcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gKiBAcGFyYW0ge3N0cmluZ1tdIHwgc3RyaW5nfSBwcm9wc1xuICogQHBhcmFtIHtvYmplY3RbXSB8IHN0cmluZ30gY2hpbGRyZW5cbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGhcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5vZGUgKHZhbHVlLCByb290LCBwYXJlbnQsIHR5cGUsIHByb3BzLCBjaGlsZHJlbiwgbGVuZ3RoKSB7XG5cdHJldHVybiB7dmFsdWU6IHZhbHVlLCByb290OiByb290LCBwYXJlbnQ6IHBhcmVudCwgdHlwZTogdHlwZSwgcHJvcHM6IHByb3BzLCBjaGlsZHJlbjogY2hpbGRyZW4sIGxpbmU6IGxpbmUsIGNvbHVtbjogY29sdW1uLCBsZW5ndGg6IGxlbmd0aCwgcmV0dXJuOiAnJ31cbn1cblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gcm9vdFxuICogQHBhcmFtIHtvYmplY3R9IHByb3BzXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb3B5IChyb290LCBwcm9wcykge1xuXHRyZXR1cm4gYXNzaWduKG5vZGUoJycsIG51bGwsIG51bGwsICcnLCBudWxsLCBudWxsLCAwKSwgcm9vdCwge2xlbmd0aDogLXJvb3QubGVuZ3RofSwgcHJvcHMpXG59XG5cbi8qKlxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gY2hhciAoKSB7XG5cdHJldHVybiBjaGFyYWN0ZXJcbn1cblxuLyoqXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwcmV2ICgpIHtcblx0Y2hhcmFjdGVyID0gcG9zaXRpb24gPiAwID8gY2hhcmF0KGNoYXJhY3RlcnMsIC0tcG9zaXRpb24pIDogMFxuXG5cdGlmIChjb2x1bW4tLSwgY2hhcmFjdGVyID09PSAxMClcblx0XHRjb2x1bW4gPSAxLCBsaW5lLS1cblxuXHRyZXR1cm4gY2hhcmFjdGVyXG59XG5cbi8qKlxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gbmV4dCAoKSB7XG5cdGNoYXJhY3RlciA9IHBvc2l0aW9uIDwgbGVuZ3RoID8gY2hhcmF0KGNoYXJhY3RlcnMsIHBvc2l0aW9uKyspIDogMFxuXG5cdGlmIChjb2x1bW4rKywgY2hhcmFjdGVyID09PSAxMClcblx0XHRjb2x1bW4gPSAxLCBsaW5lKytcblxuXHRyZXR1cm4gY2hhcmFjdGVyXG59XG5cbi8qKlxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcGVlayAoKSB7XG5cdHJldHVybiBjaGFyYXQoY2hhcmFjdGVycywgcG9zaXRpb24pXG59XG5cbi8qKlxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gY2FyZXQgKCkge1xuXHRyZXR1cm4gcG9zaXRpb25cbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gYmVnaW5cbiAqIEBwYXJhbSB7bnVtYmVyfSBlbmRcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNsaWNlIChiZWdpbiwgZW5kKSB7XG5cdHJldHVybiBzdWJzdHIoY2hhcmFjdGVycywgYmVnaW4sIGVuZClcbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdHlwZVxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9rZW4gKHR5cGUpIHtcblx0c3dpdGNoICh0eXBlKSB7XG5cdFx0Ly8gXFwwIFxcdCBcXG4gXFxyIFxccyB3aGl0ZXNwYWNlIHRva2VuXG5cdFx0Y2FzZSAwOiBjYXNlIDk6IGNhc2UgMTA6IGNhc2UgMTM6IGNhc2UgMzI6XG5cdFx0XHRyZXR1cm4gNVxuXHRcdC8vICEgKyAsIC8gPiBAIH4gaXNvbGF0ZSB0b2tlblxuXHRcdGNhc2UgMzM6IGNhc2UgNDM6IGNhc2UgNDQ6IGNhc2UgNDc6IGNhc2UgNjI6IGNhc2UgNjQ6IGNhc2UgMTI2OlxuXHRcdC8vIDsgeyB9IGJyZWFrcG9pbnQgdG9rZW5cblx0XHRjYXNlIDU5OiBjYXNlIDEyMzogY2FzZSAxMjU6XG5cdFx0XHRyZXR1cm4gNFxuXHRcdC8vIDogYWNjb21wYW5pZWQgdG9rZW5cblx0XHRjYXNlIDU4OlxuXHRcdFx0cmV0dXJuIDNcblx0XHQvLyBcIiAnICggWyBvcGVuaW5nIGRlbGltaXQgdG9rZW5cblx0XHRjYXNlIDM0OiBjYXNlIDM5OiBjYXNlIDQwOiBjYXNlIDkxOlxuXHRcdFx0cmV0dXJuIDJcblx0XHQvLyApIF0gY2xvc2luZyBkZWxpbWl0IHRva2VuXG5cdFx0Y2FzZSA0MTogY2FzZSA5Mzpcblx0XHRcdHJldHVybiAxXG5cdH1cblxuXHRyZXR1cm4gMFxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7YW55W119XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhbGxvYyAodmFsdWUpIHtcblx0cmV0dXJuIGxpbmUgPSBjb2x1bW4gPSAxLCBsZW5ndGggPSBzdHJsZW4oY2hhcmFjdGVycyA9IHZhbHVlKSwgcG9zaXRpb24gPSAwLCBbXVxufVxuXG4vKipcbiAqIEBwYXJhbSB7YW55fSB2YWx1ZVxuICogQHJldHVybiB7YW55fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVhbGxvYyAodmFsdWUpIHtcblx0cmV0dXJuIGNoYXJhY3RlcnMgPSAnJywgdmFsdWVcbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdHlwZVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVsaW1pdCAodHlwZSkge1xuXHRyZXR1cm4gdHJpbShzbGljZShwb3NpdGlvbiAtIDEsIGRlbGltaXRlcih0eXBlID09PSA5MSA/IHR5cGUgKyAyIDogdHlwZSA9PT0gNDAgPyB0eXBlICsgMSA6IHR5cGUpKSlcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm4ge3N0cmluZ1tdfVxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9rZW5pemUgKHZhbHVlKSB7XG5cdHJldHVybiBkZWFsbG9jKHRva2VuaXplcihhbGxvYyh2YWx1ZSkpKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB0eXBlXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB3aGl0ZXNwYWNlICh0eXBlKSB7XG5cdHdoaWxlIChjaGFyYWN0ZXIgPSBwZWVrKCkpXG5cdFx0aWYgKGNoYXJhY3RlciA8IDMzKVxuXHRcdFx0bmV4dCgpXG5cdFx0ZWxzZVxuXHRcdFx0YnJlYWtcblxuXHRyZXR1cm4gdG9rZW4odHlwZSkgPiAyIHx8IHRva2VuKGNoYXJhY3RlcikgPiAzID8gJycgOiAnICdcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBjaGlsZHJlblxuICogQHJldHVybiB7c3RyaW5nW119XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b2tlbml6ZXIgKGNoaWxkcmVuKSB7XG5cdHdoaWxlIChuZXh0KCkpXG5cdFx0c3dpdGNoICh0b2tlbihjaGFyYWN0ZXIpKSB7XG5cdFx0XHRjYXNlIDA6IGFwcGVuZChpZGVudGlmaWVyKHBvc2l0aW9uIC0gMSksIGNoaWxkcmVuKVxuXHRcdFx0XHRicmVha1xuXHRcdFx0Y2FzZSAyOiBhcHBlbmQoZGVsaW1pdChjaGFyYWN0ZXIpLCBjaGlsZHJlbilcblx0XHRcdFx0YnJlYWtcblx0XHRcdGRlZmF1bHQ6IGFwcGVuZChmcm9tKGNoYXJhY3RlciksIGNoaWxkcmVuKVxuXHRcdH1cblxuXHRyZXR1cm4gY2hpbGRyZW5cbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb3VudFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZXNjYXBpbmcgKGluZGV4LCBjb3VudCkge1xuXHR3aGlsZSAoLS1jb3VudCAmJiBuZXh0KCkpXG5cdFx0Ly8gbm90IDAtOSBBLUYgYS1mXG5cdFx0aWYgKGNoYXJhY3RlciA8IDQ4IHx8IGNoYXJhY3RlciA+IDEwMiB8fCAoY2hhcmFjdGVyID4gNTcgJiYgY2hhcmFjdGVyIDwgNjUpIHx8IChjaGFyYWN0ZXIgPiA3MCAmJiBjaGFyYWN0ZXIgPCA5NykpXG5cdFx0XHRicmVha1xuXG5cdHJldHVybiBzbGljZShpbmRleCwgY2FyZXQoKSArIChjb3VudCA8IDYgJiYgcGVlaygpID09IDMyICYmIG5leHQoKSA9PSAzMikpXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHR5cGVcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlbGltaXRlciAodHlwZSkge1xuXHR3aGlsZSAobmV4dCgpKVxuXHRcdHN3aXRjaCAoY2hhcmFjdGVyKSB7XG5cdFx0XHQvLyBdICkgXCIgJ1xuXHRcdFx0Y2FzZSB0eXBlOlxuXHRcdFx0XHRyZXR1cm4gcG9zaXRpb25cblx0XHRcdC8vIFwiICdcblx0XHRcdGNhc2UgMzQ6IGNhc2UgMzk6XG5cdFx0XHRcdGlmICh0eXBlICE9PSAzNCAmJiB0eXBlICE9PSAzOSlcblx0XHRcdFx0XHRkZWxpbWl0ZXIoY2hhcmFjdGVyKVxuXHRcdFx0XHRicmVha1xuXHRcdFx0Ly8gKFxuXHRcdFx0Y2FzZSA0MDpcblx0XHRcdFx0aWYgKHR5cGUgPT09IDQxKVxuXHRcdFx0XHRcdGRlbGltaXRlcih0eXBlKVxuXHRcdFx0XHRicmVha1xuXHRcdFx0Ly8gXFxcblx0XHRcdGNhc2UgOTI6XG5cdFx0XHRcdG5leHQoKVxuXHRcdFx0XHRicmVha1xuXHRcdH1cblxuXHRyZXR1cm4gcG9zaXRpb25cbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdHlwZVxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb21tZW50ZXIgKHR5cGUsIGluZGV4KSB7XG5cdHdoaWxlIChuZXh0KCkpXG5cdFx0Ly8gLy9cblx0XHRpZiAodHlwZSArIGNoYXJhY3RlciA9PT0gNDcgKyAxMClcblx0XHRcdGJyZWFrXG5cdFx0Ly8gLypcblx0XHRlbHNlIGlmICh0eXBlICsgY2hhcmFjdGVyID09PSA0MiArIDQyICYmIHBlZWsoKSA9PT0gNDcpXG5cdFx0XHRicmVha1xuXG5cdHJldHVybiAnLyonICsgc2xpY2UoaW5kZXgsIHBvc2l0aW9uIC0gMSkgKyAnKicgKyBmcm9tKHR5cGUgPT09IDQ3ID8gdHlwZSA6IG5leHQoKSlcbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlkZW50aWZpZXIgKGluZGV4KSB7XG5cdHdoaWxlICghdG9rZW4ocGVlaygpKSlcblx0XHRuZXh0KClcblxuXHRyZXR1cm4gc2xpY2UoaW5kZXgsIHBvc2l0aW9uKVxufVxuIiwiaW1wb3J0IHtDT01NRU5ULCBSVUxFU0VULCBERUNMQVJBVElPTn0gZnJvbSAnLi9FbnVtLmpzJ1xuaW1wb3J0IHthYnMsIGNoYXJhdCwgdHJpbSwgZnJvbSwgc2l6ZW9mLCBzdHJsZW4sIHN1YnN0ciwgYXBwZW5kLCByZXBsYWNlLCBpbmRleG9mfSBmcm9tICcuL1V0aWxpdHkuanMnXG5pbXBvcnQge25vZGUsIGNoYXIsIHByZXYsIG5leHQsIHBlZWssIGNhcmV0LCBhbGxvYywgZGVhbGxvYywgZGVsaW1pdCwgd2hpdGVzcGFjZSwgZXNjYXBpbmcsIGlkZW50aWZpZXIsIGNvbW1lbnRlcn0gZnJvbSAnLi9Ub2tlbml6ZXIuanMnXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHtvYmplY3RbXX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbXBpbGUgKHZhbHVlKSB7XG5cdHJldHVybiBkZWFsbG9jKHBhcnNlKCcnLCBudWxsLCBudWxsLCBudWxsLCBbJyddLCB2YWx1ZSA9IGFsbG9jKHZhbHVlKSwgMCwgWzBdLCB2YWx1ZSkpXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge29iamVjdH0gcm9vdFxuICogQHBhcmFtIHtvYmplY3Q/fSBwYXJlbnRcbiAqIEBwYXJhbSB7c3RyaW5nW119IHJ1bGVcbiAqIEBwYXJhbSB7c3RyaW5nW119IHJ1bGVzXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBydWxlc2V0c1xuICogQHBhcmFtIHtudW1iZXJbXX0gcHNldWRvXG4gKiBAcGFyYW0ge251bWJlcltdfSBwb2ludHNcbiAqIEBwYXJhbSB7c3RyaW5nW119IGRlY2xhcmF0aW9uc1xuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2UgKHZhbHVlLCByb290LCBwYXJlbnQsIHJ1bGUsIHJ1bGVzLCBydWxlc2V0cywgcHNldWRvLCBwb2ludHMsIGRlY2xhcmF0aW9ucykge1xuXHR2YXIgaW5kZXggPSAwXG5cdHZhciBvZmZzZXQgPSAwXG5cdHZhciBsZW5ndGggPSBwc2V1ZG9cblx0dmFyIGF0cnVsZSA9IDBcblx0dmFyIHByb3BlcnR5ID0gMFxuXHR2YXIgcHJldmlvdXMgPSAwXG5cdHZhciB2YXJpYWJsZSA9IDFcblx0dmFyIHNjYW5uaW5nID0gMVxuXHR2YXIgYW1wZXJzYW5kID0gMVxuXHR2YXIgY2hhcmFjdGVyID0gMFxuXHR2YXIgdHlwZSA9ICcnXG5cdHZhciBwcm9wcyA9IHJ1bGVzXG5cdHZhciBjaGlsZHJlbiA9IHJ1bGVzZXRzXG5cdHZhciByZWZlcmVuY2UgPSBydWxlXG5cdHZhciBjaGFyYWN0ZXJzID0gdHlwZVxuXG5cdHdoaWxlIChzY2FubmluZylcblx0XHRzd2l0Y2ggKHByZXZpb3VzID0gY2hhcmFjdGVyLCBjaGFyYWN0ZXIgPSBuZXh0KCkpIHtcblx0XHRcdC8vIChcblx0XHRcdGNhc2UgNDA6XG5cdFx0XHRcdGlmIChwcmV2aW91cyAhPSAxMDggJiYgY2hhcmF0KGNoYXJhY3RlcnMsIGxlbmd0aCAtIDEpID09IDU4KSB7XG5cdFx0XHRcdFx0aWYgKGluZGV4b2YoY2hhcmFjdGVycyArPSByZXBsYWNlKGRlbGltaXQoY2hhcmFjdGVyKSwgJyYnLCAnJlxcZicpLCAnJlxcZicpICE9IC0xKVxuXHRcdFx0XHRcdFx0YW1wZXJzYW5kID0gLTFcblx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHR9XG5cdFx0XHQvLyBcIiAnIFtcblx0XHRcdGNhc2UgMzQ6IGNhc2UgMzk6IGNhc2UgOTE6XG5cdFx0XHRcdGNoYXJhY3RlcnMgKz0gZGVsaW1pdChjaGFyYWN0ZXIpXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHQvLyBcXHQgXFxuIFxcciBcXHNcblx0XHRcdGNhc2UgOTogY2FzZSAxMDogY2FzZSAxMzogY2FzZSAzMjpcblx0XHRcdFx0Y2hhcmFjdGVycyArPSB3aGl0ZXNwYWNlKHByZXZpb3VzKVxuXHRcdFx0XHRicmVha1xuXHRcdFx0Ly8gXFxcblx0XHRcdGNhc2UgOTI6XG5cdFx0XHRcdGNoYXJhY3RlcnMgKz0gZXNjYXBpbmcoY2FyZXQoKSAtIDEsIDcpXG5cdFx0XHRcdGNvbnRpbnVlXG5cdFx0XHQvLyAvXG5cdFx0XHRjYXNlIDQ3OlxuXHRcdFx0XHRzd2l0Y2ggKHBlZWsoKSkge1xuXHRcdFx0XHRcdGNhc2UgNDI6IGNhc2UgNDc6XG5cdFx0XHRcdFx0XHRhcHBlbmQoY29tbWVudChjb21tZW50ZXIobmV4dCgpLCBjYXJldCgpKSwgcm9vdCwgcGFyZW50KSwgZGVjbGFyYXRpb25zKVxuXHRcdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0Y2hhcmFjdGVycyArPSAnLydcblx0XHRcdFx0fVxuXHRcdFx0XHRicmVha1xuXHRcdFx0Ly8ge1xuXHRcdFx0Y2FzZSAxMjMgKiB2YXJpYWJsZTpcblx0XHRcdFx0cG9pbnRzW2luZGV4KytdID0gc3RybGVuKGNoYXJhY3RlcnMpICogYW1wZXJzYW5kXG5cdFx0XHQvLyB9IDsgXFwwXG5cdFx0XHRjYXNlIDEyNSAqIHZhcmlhYmxlOiBjYXNlIDU5OiBjYXNlIDA6XG5cdFx0XHRcdHN3aXRjaCAoY2hhcmFjdGVyKSB7XG5cdFx0XHRcdFx0Ly8gXFwwIH1cblx0XHRcdFx0XHRjYXNlIDA6IGNhc2UgMTI1OiBzY2FubmluZyA9IDBcblx0XHRcdFx0XHQvLyA7XG5cdFx0XHRcdFx0Y2FzZSA1OSArIG9mZnNldDogaWYgKGFtcGVyc2FuZCA9PSAtMSkgY2hhcmFjdGVycyA9IHJlcGxhY2UoY2hhcmFjdGVycywgL1xcZi9nLCAnJylcblx0XHRcdFx0XHRcdGlmIChwcm9wZXJ0eSA+IDAgJiYgKHN0cmxlbihjaGFyYWN0ZXJzKSAtIGxlbmd0aCkpXG5cdFx0XHRcdFx0XHRcdGFwcGVuZChwcm9wZXJ0eSA+IDMyID8gZGVjbGFyYXRpb24oY2hhcmFjdGVycyArICc7JywgcnVsZSwgcGFyZW50LCBsZW5ndGggLSAxKSA6IGRlY2xhcmF0aW9uKHJlcGxhY2UoY2hhcmFjdGVycywgJyAnLCAnJykgKyAnOycsIHJ1bGUsIHBhcmVudCwgbGVuZ3RoIC0gMiksIGRlY2xhcmF0aW9ucylcblx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0Ly8gQCA7XG5cdFx0XHRcdFx0Y2FzZSA1OTogY2hhcmFjdGVycyArPSAnOydcblx0XHRcdFx0XHQvLyB7IHJ1bGUvYXQtcnVsZVxuXHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRhcHBlbmQocmVmZXJlbmNlID0gcnVsZXNldChjaGFyYWN0ZXJzLCByb290LCBwYXJlbnQsIGluZGV4LCBvZmZzZXQsIHJ1bGVzLCBwb2ludHMsIHR5cGUsIHByb3BzID0gW10sIGNoaWxkcmVuID0gW10sIGxlbmd0aCksIHJ1bGVzZXRzKVxuXG5cdFx0XHRcdFx0XHRpZiAoY2hhcmFjdGVyID09PSAxMjMpXG5cdFx0XHRcdFx0XHRcdGlmIChvZmZzZXQgPT09IDApXG5cdFx0XHRcdFx0XHRcdFx0cGFyc2UoY2hhcmFjdGVycywgcm9vdCwgcmVmZXJlbmNlLCByZWZlcmVuY2UsIHByb3BzLCBydWxlc2V0cywgbGVuZ3RoLCBwb2ludHMsIGNoaWxkcmVuKVxuXHRcdFx0XHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0XHRcdFx0c3dpdGNoIChhdHJ1bGUgPT09IDk5ICYmIGNoYXJhdChjaGFyYWN0ZXJzLCAzKSA9PT0gMTEwID8gMTAwIDogYXRydWxlKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBkIGwgbSBzXG5cdFx0XHRcdFx0XHRcdFx0XHRjYXNlIDEwMDogY2FzZSAxMDg6IGNhc2UgMTA5OiBjYXNlIDExNTpcblx0XHRcdFx0XHRcdFx0XHRcdFx0cGFyc2UodmFsdWUsIHJlZmVyZW5jZSwgcmVmZXJlbmNlLCBydWxlICYmIGFwcGVuZChydWxlc2V0KHZhbHVlLCByZWZlcmVuY2UsIHJlZmVyZW5jZSwgMCwgMCwgcnVsZXMsIHBvaW50cywgdHlwZSwgcnVsZXMsIHByb3BzID0gW10sIGxlbmd0aCksIGNoaWxkcmVuKSwgcnVsZXMsIGNoaWxkcmVuLCBsZW5ndGgsIHBvaW50cywgcnVsZSA/IHByb3BzIDogY2hpbGRyZW4pXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRwYXJzZShjaGFyYWN0ZXJzLCByZWZlcmVuY2UsIHJlZmVyZW5jZSwgcmVmZXJlbmNlLCBbJyddLCBjaGlsZHJlbiwgMCwgcG9pbnRzLCBjaGlsZHJlbilcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpbmRleCA9IG9mZnNldCA9IHByb3BlcnR5ID0gMCwgdmFyaWFibGUgPSBhbXBlcnNhbmQgPSAxLCB0eXBlID0gY2hhcmFjdGVycyA9ICcnLCBsZW5ndGggPSBwc2V1ZG9cblx0XHRcdFx0YnJlYWtcblx0XHRcdC8vIDpcblx0XHRcdGNhc2UgNTg6XG5cdFx0XHRcdGxlbmd0aCA9IDEgKyBzdHJsZW4oY2hhcmFjdGVycyksIHByb3BlcnR5ID0gcHJldmlvdXNcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdGlmICh2YXJpYWJsZSA8IDEpXG5cdFx0XHRcdFx0aWYgKGNoYXJhY3RlciA9PSAxMjMpXG5cdFx0XHRcdFx0XHQtLXZhcmlhYmxlXG5cdFx0XHRcdFx0ZWxzZSBpZiAoY2hhcmFjdGVyID09IDEyNSAmJiB2YXJpYWJsZSsrID09IDAgJiYgcHJldigpID09IDEyNSlcblx0XHRcdFx0XHRcdGNvbnRpbnVlXG5cblx0XHRcdFx0c3dpdGNoIChjaGFyYWN0ZXJzICs9IGZyb20oY2hhcmFjdGVyKSwgY2hhcmFjdGVyICogdmFyaWFibGUpIHtcblx0XHRcdFx0XHQvLyAmXG5cdFx0XHRcdFx0Y2FzZSAzODpcblx0XHRcdFx0XHRcdGFtcGVyc2FuZCA9IG9mZnNldCA+IDAgPyAxIDogKGNoYXJhY3RlcnMgKz0gJ1xcZicsIC0xKVxuXHRcdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0XHQvLyAsXG5cdFx0XHRcdFx0Y2FzZSA0NDpcblx0XHRcdFx0XHRcdHBvaW50c1tpbmRleCsrXSA9IChzdHJsZW4oY2hhcmFjdGVycykgLSAxKSAqIGFtcGVyc2FuZCwgYW1wZXJzYW5kID0gMVxuXHRcdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0XHQvLyBAXG5cdFx0XHRcdFx0Y2FzZSA2NDpcblx0XHRcdFx0XHRcdC8vIC1cblx0XHRcdFx0XHRcdGlmIChwZWVrKCkgPT09IDQ1KVxuXHRcdFx0XHRcdFx0XHRjaGFyYWN0ZXJzICs9IGRlbGltaXQobmV4dCgpKVxuXG5cdFx0XHRcdFx0XHRhdHJ1bGUgPSBwZWVrKCksIG9mZnNldCA9IGxlbmd0aCA9IHN0cmxlbih0eXBlID0gY2hhcmFjdGVycyArPSBpZGVudGlmaWVyKGNhcmV0KCkpKSwgY2hhcmFjdGVyKytcblx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0Ly8gLVxuXHRcdFx0XHRcdGNhc2UgNDU6XG5cdFx0XHRcdFx0XHRpZiAocHJldmlvdXMgPT09IDQ1ICYmIHN0cmxlbihjaGFyYWN0ZXJzKSA9PSAyKVxuXHRcdFx0XHRcdFx0XHR2YXJpYWJsZSA9IDBcblx0XHRcdFx0fVxuXHRcdH1cblxuXHRyZXR1cm4gcnVsZXNldHNcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7b2JqZWN0fSByb290XG4gKiBAcGFyYW0ge29iamVjdD99IHBhcmVudFxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0XG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBydWxlc1xuICogQHBhcmFtIHtudW1iZXJbXX0gcG9pbnRzXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICogQHBhcmFtIHtzdHJpbmdbXX0gcHJvcHNcbiAqIEBwYXJhbSB7c3RyaW5nW119IGNoaWxkcmVuXG4gKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBydWxlc2V0ICh2YWx1ZSwgcm9vdCwgcGFyZW50LCBpbmRleCwgb2Zmc2V0LCBydWxlcywgcG9pbnRzLCB0eXBlLCBwcm9wcywgY2hpbGRyZW4sIGxlbmd0aCkge1xuXHR2YXIgcG9zdCA9IG9mZnNldCAtIDFcblx0dmFyIHJ1bGUgPSBvZmZzZXQgPT09IDAgPyBydWxlcyA6IFsnJ11cblx0dmFyIHNpemUgPSBzaXplb2YocnVsZSlcblxuXHRmb3IgKHZhciBpID0gMCwgaiA9IDAsIGsgPSAwOyBpIDwgaW5kZXg7ICsraSlcblx0XHRmb3IgKHZhciB4ID0gMCwgeSA9IHN1YnN0cih2YWx1ZSwgcG9zdCArIDEsIHBvc3QgPSBhYnMoaiA9IHBvaW50c1tpXSkpLCB6ID0gdmFsdWU7IHggPCBzaXplOyArK3gpXG5cdFx0XHRpZiAoeiA9IHRyaW0oaiA+IDAgPyBydWxlW3hdICsgJyAnICsgeSA6IHJlcGxhY2UoeSwgLyZcXGYvZywgcnVsZVt4XSkpKVxuXHRcdFx0XHRwcm9wc1trKytdID0gelxuXG5cdHJldHVybiBub2RlKHZhbHVlLCByb290LCBwYXJlbnQsIG9mZnNldCA9PT0gMCA/IFJVTEVTRVQgOiB0eXBlLCBwcm9wcywgY2hpbGRyZW4sIGxlbmd0aClcbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEBwYXJhbSB7b2JqZWN0fSByb290XG4gKiBAcGFyYW0ge29iamVjdD99IHBhcmVudFxuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5leHBvcnQgZnVuY3Rpb24gY29tbWVudCAodmFsdWUsIHJvb3QsIHBhcmVudCkge1xuXHRyZXR1cm4gbm9kZSh2YWx1ZSwgcm9vdCwgcGFyZW50LCBDT01NRU5ULCBmcm9tKGNoYXIoKSksIHN1YnN0cih2YWx1ZSwgMiwgLTIpLCAwKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtvYmplY3R9IHJvb3RcbiAqIEBwYXJhbSB7b2JqZWN0P30gcGFyZW50XG4gKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWNsYXJhdGlvbiAodmFsdWUsIHJvb3QsIHBhcmVudCwgbGVuZ3RoKSB7XG5cdHJldHVybiBub2RlKHZhbHVlLCByb290LCBwYXJlbnQsIERFQ0xBUkFUSU9OLCBzdWJzdHIodmFsdWUsIDAsIGxlbmd0aCksIHN1YnN0cih2YWx1ZSwgbGVuZ3RoICsgMSwgLTEpLCBsZW5ndGgpXG59XG4iLCJpbXBvcnQge0lNUE9SVCwgTEFZRVIsIENPTU1FTlQsIFJVTEVTRVQsIERFQ0xBUkFUSU9OLCBLRVlGUkFNRVN9IGZyb20gJy4vRW51bS5qcydcbmltcG9ydCB7c3RybGVuLCBzaXplb2Z9IGZyb20gJy4vVXRpbGl0eS5qcydcblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdFtdfSBjaGlsZHJlblxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNlcmlhbGl6ZSAoY2hpbGRyZW4sIGNhbGxiYWNrKSB7XG5cdHZhciBvdXRwdXQgPSAnJ1xuXHR2YXIgbGVuZ3RoID0gc2l6ZW9mKGNoaWxkcmVuKVxuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspXG5cdFx0b3V0cHV0ICs9IGNhbGxiYWNrKGNoaWxkcmVuW2ldLCBpLCBjaGlsZHJlbiwgY2FsbGJhY2spIHx8ICcnXG5cblx0cmV0dXJuIG91dHB1dFxufVxuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBlbGVtZW50XG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEBwYXJhbSB7b2JqZWN0W119IGNoaWxkcmVuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RyaW5naWZ5IChlbGVtZW50LCBpbmRleCwgY2hpbGRyZW4sIGNhbGxiYWNrKSB7XG5cdHN3aXRjaCAoZWxlbWVudC50eXBlKSB7XG5cdFx0Y2FzZSBMQVlFUjogaWYgKGVsZW1lbnQuY2hpbGRyZW4ubGVuZ3RoKSBicmVha1xuXHRcdGNhc2UgSU1QT1JUOiBjYXNlIERFQ0xBUkFUSU9OOiByZXR1cm4gZWxlbWVudC5yZXR1cm4gPSBlbGVtZW50LnJldHVybiB8fCBlbGVtZW50LnZhbHVlXG5cdFx0Y2FzZSBDT01NRU5UOiByZXR1cm4gJydcblx0XHRjYXNlIEtFWUZSQU1FUzogcmV0dXJuIGVsZW1lbnQucmV0dXJuID0gZWxlbWVudC52YWx1ZSArICd7JyArIHNlcmlhbGl6ZShlbGVtZW50LmNoaWxkcmVuLCBjYWxsYmFjaykgKyAnfSdcblx0XHRjYXNlIFJVTEVTRVQ6IGVsZW1lbnQudmFsdWUgPSBlbGVtZW50LnByb3BzLmpvaW4oJywnKVxuXHR9XG5cblx0cmV0dXJuIHN0cmxlbihjaGlsZHJlbiA9IHNlcmlhbGl6ZShlbGVtZW50LmNoaWxkcmVuLCBjYWxsYmFjaykpID8gZWxlbWVudC5yZXR1cm4gPSBlbGVtZW50LnZhbHVlICsgJ3snICsgY2hpbGRyZW4gKyAnfScgOiAnJ1xufVxuIiwiaW1wb3J0IHtNUywgTU9aLCBXRUJLSVQsIFJVTEVTRVQsIEtFWUZSQU1FUywgREVDTEFSQVRJT059IGZyb20gJy4vRW51bS5qcydcbmltcG9ydCB7bWF0Y2gsIGNoYXJhdCwgc3Vic3RyLCBzdHJsZW4sIHNpemVvZiwgcmVwbGFjZSwgY29tYmluZX0gZnJvbSAnLi9VdGlsaXR5LmpzJ1xuaW1wb3J0IHtjb3B5LCB0b2tlbml6ZX0gZnJvbSAnLi9Ub2tlbml6ZXIuanMnXG5pbXBvcnQge3NlcmlhbGl6ZX0gZnJvbSAnLi9TZXJpYWxpemVyLmpzJ1xuaW1wb3J0IHtwcmVmaXh9IGZyb20gJy4vUHJlZml4ZXIuanMnXG5cbi8qKlxuICogQHBhcmFtIHtmdW5jdGlvbltdfSBjb2xsZWN0aW9uXG4gKiBAcmV0dXJuIHtmdW5jdGlvbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1pZGRsZXdhcmUgKGNvbGxlY3Rpb24pIHtcblx0dmFyIGxlbmd0aCA9IHNpemVvZihjb2xsZWN0aW9uKVxuXG5cdHJldHVybiBmdW5jdGlvbiAoZWxlbWVudCwgaW5kZXgsIGNoaWxkcmVuLCBjYWxsYmFjaykge1xuXHRcdHZhciBvdXRwdXQgPSAnJ1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKylcblx0XHRcdG91dHB1dCArPSBjb2xsZWN0aW9uW2ldKGVsZW1lbnQsIGluZGV4LCBjaGlsZHJlbiwgY2FsbGJhY2spIHx8ICcnXG5cblx0XHRyZXR1cm4gb3V0cHV0XG5cdH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybiB7ZnVuY3Rpb259XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBydWxlc2hlZXQgKGNhbGxiYWNrKSB7XG5cdHJldHVybiBmdW5jdGlvbiAoZWxlbWVudCkge1xuXHRcdGlmICghZWxlbWVudC5yb290KVxuXHRcdFx0aWYgKGVsZW1lbnQgPSBlbGVtZW50LnJldHVybilcblx0XHRcdFx0Y2FsbGJhY2soZWxlbWVudClcblx0fVxufVxuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBlbGVtZW50XG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEBwYXJhbSB7b2JqZWN0W119IGNoaWxkcmVuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICovXG5leHBvcnQgZnVuY3Rpb24gcHJlZml4ZXIgKGVsZW1lbnQsIGluZGV4LCBjaGlsZHJlbiwgY2FsbGJhY2spIHtcblx0aWYgKGVsZW1lbnQubGVuZ3RoID4gLTEpXG5cdFx0aWYgKCFlbGVtZW50LnJldHVybilcblx0XHRcdHN3aXRjaCAoZWxlbWVudC50eXBlKSB7XG5cdFx0XHRcdGNhc2UgREVDTEFSQVRJT046IGVsZW1lbnQucmV0dXJuID0gcHJlZml4KGVsZW1lbnQudmFsdWUsIGVsZW1lbnQubGVuZ3RoLCBjaGlsZHJlbilcblx0XHRcdFx0XHRyZXR1cm5cblx0XHRcdFx0Y2FzZSBLRVlGUkFNRVM6XG5cdFx0XHRcdFx0cmV0dXJuIHNlcmlhbGl6ZShbY29weShlbGVtZW50LCB7dmFsdWU6IHJlcGxhY2UoZWxlbWVudC52YWx1ZSwgJ0AnLCAnQCcgKyBXRUJLSVQpfSldLCBjYWxsYmFjaylcblx0XHRcdFx0Y2FzZSBSVUxFU0VUOlxuXHRcdFx0XHRcdGlmIChlbGVtZW50Lmxlbmd0aClcblx0XHRcdFx0XHRcdHJldHVybiBjb21iaW5lKGVsZW1lbnQucHJvcHMsIGZ1bmN0aW9uICh2YWx1ZSkge1xuXHRcdFx0XHRcdFx0XHRzd2l0Y2ggKG1hdGNoKHZhbHVlLCAvKDo6cGxhY1xcdyt8OnJlYWQtXFx3KykvKSkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIDpyZWFkLShvbmx5fHdyaXRlKVxuXHRcdFx0XHRcdFx0XHRcdGNhc2UgJzpyZWFkLW9ubHknOiBjYXNlICc6cmVhZC13cml0ZSc6XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gc2VyaWFsaXplKFtjb3B5KGVsZW1lbnQsIHtwcm9wczogW3JlcGxhY2UodmFsdWUsIC86KHJlYWQtXFx3KykvLCAnOicgKyBNT1ogKyAnJDEnKV19KV0sIGNhbGxiYWNrKVxuXHRcdFx0XHRcdFx0XHRcdC8vIDpwbGFjZWhvbGRlclxuXHRcdFx0XHRcdFx0XHRcdGNhc2UgJzo6cGxhY2Vob2xkZXInOlxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHNlcmlhbGl6ZShbXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNvcHkoZWxlbWVudCwge3Byb3BzOiBbcmVwbGFjZSh2YWx1ZSwgLzoocGxhY1xcdyspLywgJzonICsgV0VCS0lUICsgJ2lucHV0LSQxJyldfSksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNvcHkoZWxlbWVudCwge3Byb3BzOiBbcmVwbGFjZSh2YWx1ZSwgLzoocGxhY1xcdyspLywgJzonICsgTU9aICsgJyQxJyldfSksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNvcHkoZWxlbWVudCwge3Byb3BzOiBbcmVwbGFjZSh2YWx1ZSwgLzoocGxhY1xcdyspLywgTVMgKyAnaW5wdXQtJDEnKV19KVxuXHRcdFx0XHRcdFx0XHRcdFx0XSwgY2FsbGJhY2spXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gJydcblx0XHRcdFx0XHRcdH0pXG5cdFx0XHR9XG59XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGVsZW1lbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHBhcmFtIHtvYmplY3RbXX0gY2hpbGRyZW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5hbWVzcGFjZSAoZWxlbWVudCkge1xuXHRzd2l0Y2ggKGVsZW1lbnQudHlwZSkge1xuXHRcdGNhc2UgUlVMRVNFVDpcblx0XHRcdGVsZW1lbnQucHJvcHMgPSBlbGVtZW50LnByb3BzLm1hcChmdW5jdGlvbiAodmFsdWUpIHtcblx0XHRcdFx0cmV0dXJuIGNvbWJpbmUodG9rZW5pemUodmFsdWUpLCBmdW5jdGlvbiAodmFsdWUsIGluZGV4LCBjaGlsZHJlbikge1xuXHRcdFx0XHRcdHN3aXRjaCAoY2hhcmF0KHZhbHVlLCAwKSkge1xuXHRcdFx0XHRcdFx0Ly8gXFxmXG5cdFx0XHRcdFx0XHRjYXNlIDEyOlxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gc3Vic3RyKHZhbHVlLCAxLCBzdHJsZW4odmFsdWUpKVxuXHRcdFx0XHRcdFx0Ly8gXFwwICggKyA+IH5cblx0XHRcdFx0XHRcdGNhc2UgMDogY2FzZSA0MDogY2FzZSA0MzogY2FzZSA2MjogY2FzZSAxMjY6XG5cdFx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZVxuXHRcdFx0XHRcdFx0Ly8gOlxuXHRcdFx0XHRcdFx0Y2FzZSA1ODpcblx0XHRcdFx0XHRcdFx0aWYgKGNoaWxkcmVuWysraW5kZXhdID09PSAnZ2xvYmFsJylcblx0XHRcdFx0XHRcdFx0XHRjaGlsZHJlbltpbmRleF0gPSAnJywgY2hpbGRyZW5bKytpbmRleF0gPSAnXFxmJyArIHN1YnN0cihjaGlsZHJlbltpbmRleF0sIGluZGV4ID0gMSwgLTEpXG5cdFx0XHRcdFx0XHQvLyBcXHNcblx0XHRcdFx0XHRcdGNhc2UgMzI6XG5cdFx0XHRcdFx0XHRcdHJldHVybiBpbmRleCA9PT0gMSA/ICcnIDogdmFsdWVcblx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRcdHN3aXRjaCAoaW5kZXgpIHtcblx0XHRcdFx0XHRcdFx0XHRjYXNlIDA6IGVsZW1lbnQgPSB2YWx1ZVxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHNpemVvZihjaGlsZHJlbikgPiAxID8gJycgOiB2YWx1ZVxuXHRcdFx0XHRcdFx0XHRcdGNhc2UgaW5kZXggPSBzaXplb2YoY2hpbGRyZW4pIC0gMTogY2FzZSAyOlxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGluZGV4ID09PSAyID8gdmFsdWUgKyBlbGVtZW50ICsgZWxlbWVudCA6IHZhbHVlICsgZWxlbWVudFxuXHRcdFx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWVcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSlcblx0XHRcdH0pXG5cdH1cbn1cbiIsImltcG9ydCB7IFN0eWxlU2hlZXQgfSBmcm9tICdAZW1vdGlvbi9zaGVldCc7XG5pbXBvcnQgeyBkZWFsbG9jLCBhbGxvYywgbmV4dCwgdG9rZW4sIGZyb20sIHBlZWssIGRlbGltaXQsIHNsaWNlLCBwb3NpdGlvbiwgUlVMRVNFVCwgY29tYmluZSwgbWF0Y2gsIHNlcmlhbGl6ZSwgY29weSwgcmVwbGFjZSwgV0VCS0lULCBNT1osIE1TLCBLRVlGUkFNRVMsIERFQ0xBUkFUSU9OLCBoYXNoLCBjaGFyYXQsIHN0cmxlbiwgaW5kZXhvZiwgc3RyaW5naWZ5LCBDT01NRU5ULCBydWxlc2hlZXQsIG1pZGRsZXdhcmUsIGNvbXBpbGUgfSBmcm9tICdzdHlsaXMnO1xuaW1wb3J0ICdAZW1vdGlvbi93ZWFrLW1lbW9pemUnO1xuaW1wb3J0ICdAZW1vdGlvbi9tZW1vaXplJztcblxudmFyIGlkZW50aWZpZXJXaXRoUG9pbnRUcmFja2luZyA9IGZ1bmN0aW9uIGlkZW50aWZpZXJXaXRoUG9pbnRUcmFja2luZyhiZWdpbiwgcG9pbnRzLCBpbmRleCkge1xuICB2YXIgcHJldmlvdXMgPSAwO1xuICB2YXIgY2hhcmFjdGVyID0gMDtcblxuICB3aGlsZSAodHJ1ZSkge1xuICAgIHByZXZpb3VzID0gY2hhcmFjdGVyO1xuICAgIGNoYXJhY3RlciA9IHBlZWsoKTsgLy8gJlxcZlxuXG4gICAgaWYgKHByZXZpb3VzID09PSAzOCAmJiBjaGFyYWN0ZXIgPT09IDEyKSB7XG4gICAgICBwb2ludHNbaW5kZXhdID0gMTtcbiAgICB9XG5cbiAgICBpZiAodG9rZW4oY2hhcmFjdGVyKSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgbmV4dCgpO1xuICB9XG5cbiAgcmV0dXJuIHNsaWNlKGJlZ2luLCBwb3NpdGlvbik7XG59O1xuXG52YXIgdG9SdWxlcyA9IGZ1bmN0aW9uIHRvUnVsZXMocGFyc2VkLCBwb2ludHMpIHtcbiAgLy8gcHJldGVuZCB3ZSd2ZSBzdGFydGVkIHdpdGggYSBjb21tYVxuICB2YXIgaW5kZXggPSAtMTtcbiAgdmFyIGNoYXJhY3RlciA9IDQ0O1xuXG4gIGRvIHtcbiAgICBzd2l0Y2ggKHRva2VuKGNoYXJhY3RlcikpIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgICAgLy8gJlxcZlxuICAgICAgICBpZiAoY2hhcmFjdGVyID09PSAzOCAmJiBwZWVrKCkgPT09IDEyKSB7XG4gICAgICAgICAgLy8gdGhpcyBpcyBub3QgMTAwJSBjb3JyZWN0LCB3ZSBkb24ndCBhY2NvdW50IGZvciBsaXRlcmFsIHNlcXVlbmNlcyBoZXJlIC0gbGlrZSBmb3IgZXhhbXBsZSBxdW90ZWQgc3RyaW5nc1xuICAgICAgICAgIC8vIHN0eWxpcyBpbnNlcnRzIFxcZiBhZnRlciAmIHRvIGtub3cgd2hlbiAmIHdoZXJlIGl0IHNob3VsZCByZXBsYWNlIHRoaXMgc2VxdWVuY2Ugd2l0aCB0aGUgY29udGV4dCBzZWxlY3RvclxuICAgICAgICAgIC8vIGFuZCB3aGVuIGl0IHNob3VsZCBqdXN0IGNvbmNhdGVuYXRlIHRoZSBvdXRlciBhbmQgaW5uZXIgc2VsZWN0b3JzXG4gICAgICAgICAgLy8gaXQncyB2ZXJ5IHVubGlrZWx5IGZvciB0aGlzIHNlcXVlbmNlIHRvIGFjdHVhbGx5IGFwcGVhciBpbiBhIGRpZmZlcmVudCBjb250ZXh0LCBzbyB3ZSBqdXN0IGxldmVyYWdlIHRoaXMgZmFjdCBoZXJlXG4gICAgICAgICAgcG9pbnRzW2luZGV4XSA9IDE7XG4gICAgICAgIH1cblxuICAgICAgICBwYXJzZWRbaW5kZXhdICs9IGlkZW50aWZpZXJXaXRoUG9pbnRUcmFja2luZyhwb3NpdGlvbiAtIDEsIHBvaW50cywgaW5kZXgpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAyOlxuICAgICAgICBwYXJzZWRbaW5kZXhdICs9IGRlbGltaXQoY2hhcmFjdGVyKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgNDpcbiAgICAgICAgLy8gY29tbWFcbiAgICAgICAgaWYgKGNoYXJhY3RlciA9PT0gNDQpIHtcbiAgICAgICAgICAvLyBjb2xvblxuICAgICAgICAgIHBhcnNlZFsrK2luZGV4XSA9IHBlZWsoKSA9PT0gNTggPyAnJlxcZicgOiAnJztcbiAgICAgICAgICBwb2ludHNbaW5kZXhdID0gcGFyc2VkW2luZGV4XS5sZW5ndGg7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgLy8gZmFsbHRocm91Z2hcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcGFyc2VkW2luZGV4XSArPSBmcm9tKGNoYXJhY3Rlcik7XG4gICAgfVxuICB9IHdoaWxlIChjaGFyYWN0ZXIgPSBuZXh0KCkpO1xuXG4gIHJldHVybiBwYXJzZWQ7XG59O1xuXG52YXIgZ2V0UnVsZXMgPSBmdW5jdGlvbiBnZXRSdWxlcyh2YWx1ZSwgcG9pbnRzKSB7XG4gIHJldHVybiBkZWFsbG9jKHRvUnVsZXMoYWxsb2ModmFsdWUpLCBwb2ludHMpKTtcbn07IC8vIFdlYWtTZXQgd291bGQgYmUgbW9yZSBhcHByb3ByaWF0ZSwgYnV0IG9ubHkgV2Vha01hcCBpcyBzdXBwb3J0ZWQgaW4gSUUxMVxuXG5cbnZhciBmaXhlZEVsZW1lbnRzID0gLyogI19fUFVSRV9fICovbmV3IFdlYWtNYXAoKTtcbnZhciBjb21wYXQgPSBmdW5jdGlvbiBjb21wYXQoZWxlbWVudCkge1xuICBpZiAoZWxlbWVudC50eXBlICE9PSAncnVsZScgfHwgIWVsZW1lbnQucGFyZW50IHx8IC8vIHBvc2l0aXZlIC5sZW5ndGggaW5kaWNhdGVzIHRoYXQgdGhpcyBydWxlIGNvbnRhaW5zIHBzZXVkb1xuICAvLyBuZWdhdGl2ZSAubGVuZ3RoIGluZGljYXRlcyB0aGF0IHRoaXMgcnVsZSBoYXMgYmVlbiBhbHJlYWR5IHByZWZpeGVkXG4gIGVsZW1lbnQubGVuZ3RoIDwgMSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciB2YWx1ZSA9IGVsZW1lbnQudmFsdWUsXG4gICAgICBwYXJlbnQgPSBlbGVtZW50LnBhcmVudDtcbiAgdmFyIGlzSW1wbGljaXRSdWxlID0gZWxlbWVudC5jb2x1bW4gPT09IHBhcmVudC5jb2x1bW4gJiYgZWxlbWVudC5saW5lID09PSBwYXJlbnQubGluZTtcblxuICB3aGlsZSAocGFyZW50LnR5cGUgIT09ICdydWxlJykge1xuICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gICAgaWYgKCFwYXJlbnQpIHJldHVybjtcbiAgfSAvLyBzaG9ydC1jaXJjdWl0IGZvciB0aGUgc2ltcGxlc3QgY2FzZVxuXG5cbiAgaWYgKGVsZW1lbnQucHJvcHMubGVuZ3RoID09PSAxICYmIHZhbHVlLmNoYXJDb2RlQXQoMCkgIT09IDU4XG4gIC8qIGNvbG9uICovXG4gICYmICFmaXhlZEVsZW1lbnRzLmdldChwYXJlbnQpKSB7XG4gICAgcmV0dXJuO1xuICB9IC8vIGlmIHRoaXMgaXMgYW4gaW1wbGljaXRseSBpbnNlcnRlZCBydWxlICh0aGUgb25lIGVhZ2VybHkgaW5zZXJ0ZWQgYXQgdGhlIGVhY2ggbmV3IG5lc3RlZCBsZXZlbClcbiAgLy8gdGhlbiB0aGUgcHJvcHMgaGFzIGFscmVhZHkgYmVlbiBtYW5pcHVsYXRlZCBiZWZvcmVoYW5kIGFzIHRoZXkgdGhhdCBhcnJheSBpcyBzaGFyZWQgYmV0d2VlbiBpdCBhbmQgaXRzIFwicnVsZSBwYXJlbnRcIlxuXG5cbiAgaWYgKGlzSW1wbGljaXRSdWxlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZml4ZWRFbGVtZW50cy5zZXQoZWxlbWVudCwgdHJ1ZSk7XG4gIHZhciBwb2ludHMgPSBbXTtcbiAgdmFyIHJ1bGVzID0gZ2V0UnVsZXModmFsdWUsIHBvaW50cyk7XG4gIHZhciBwYXJlbnRSdWxlcyA9IHBhcmVudC5wcm9wcztcblxuICBmb3IgKHZhciBpID0gMCwgayA9IDA7IGkgPCBydWxlcy5sZW5ndGg7IGkrKykge1xuICAgIGZvciAodmFyIGogPSAwOyBqIDwgcGFyZW50UnVsZXMubGVuZ3RoOyBqKyssIGsrKykge1xuICAgICAgZWxlbWVudC5wcm9wc1trXSA9IHBvaW50c1tpXSA/IHJ1bGVzW2ldLnJlcGxhY2UoLyZcXGYvZywgcGFyZW50UnVsZXNbal0pIDogcGFyZW50UnVsZXNbal0gKyBcIiBcIiArIHJ1bGVzW2ldO1xuICAgIH1cbiAgfVxufTtcbnZhciByZW1vdmVMYWJlbCA9IGZ1bmN0aW9uIHJlbW92ZUxhYmVsKGVsZW1lbnQpIHtcbiAgaWYgKGVsZW1lbnQudHlwZSA9PT0gJ2RlY2wnKSB7XG4gICAgdmFyIHZhbHVlID0gZWxlbWVudC52YWx1ZTtcblxuICAgIGlmICggLy8gY2hhcmNvZGUgZm9yIGxcbiAgICB2YWx1ZS5jaGFyQ29kZUF0KDApID09PSAxMDggJiYgLy8gY2hhcmNvZGUgZm9yIGJcbiAgICB2YWx1ZS5jaGFyQ29kZUF0KDIpID09PSA5OCkge1xuICAgICAgLy8gdGhpcyBpZ25vcmVzIGxhYmVsXG4gICAgICBlbGVtZW50W1wicmV0dXJuXCJdID0gJyc7XG4gICAgICBlbGVtZW50LnZhbHVlID0gJyc7XG4gICAgfVxuICB9XG59O1xudmFyIGlnbm9yZUZsYWcgPSAnZW1vdGlvbi1kaXNhYmxlLXNlcnZlci1yZW5kZXJpbmctdW5zYWZlLXNlbGVjdG9yLXdhcm5pbmctcGxlYXNlLWRvLW5vdC11c2UtdGhpcy10aGUtd2FybmluZy1leGlzdHMtZm9yLWEtcmVhc29uJztcblxudmFyIGlzSWdub3JpbmdDb21tZW50ID0gZnVuY3Rpb24gaXNJZ25vcmluZ0NvbW1lbnQoZWxlbWVudCkge1xuICByZXR1cm4gZWxlbWVudC50eXBlID09PSAnY29tbScgJiYgZWxlbWVudC5jaGlsZHJlbi5pbmRleE9mKGlnbm9yZUZsYWcpID4gLTE7XG59O1xuXG52YXIgY3JlYXRlVW5zYWZlU2VsZWN0b3JzQWxhcm0gPSBmdW5jdGlvbiBjcmVhdGVVbnNhZmVTZWxlY3RvcnNBbGFybShjYWNoZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKGVsZW1lbnQsIGluZGV4LCBjaGlsZHJlbikge1xuICAgIGlmIChlbGVtZW50LnR5cGUgIT09ICdydWxlJyB8fCBjYWNoZS5jb21wYXQpIHJldHVybjtcbiAgICB2YXIgdW5zYWZlUHNldWRvQ2xhc3NlcyA9IGVsZW1lbnQudmFsdWUubWF0Y2goLyg6Zmlyc3R8Om50aHw6bnRoLWxhc3QpLWNoaWxkL2cpO1xuXG4gICAgaWYgKHVuc2FmZVBzZXVkb0NsYXNzZXMpIHtcbiAgICAgIHZhciBpc05lc3RlZCA9ICEhZWxlbWVudC5wYXJlbnQ7IC8vIGluIG5lc3RlZCBydWxlcyBjb21tZW50cyBiZWNvbWUgY2hpbGRyZW4gb2YgdGhlIFwiYXV0by1pbnNlcnRlZFwiIHJ1bGUgYW5kIHRoYXQncyBhbHdheXMgdGhlIGBlbGVtZW50LnBhcmVudGBcbiAgICAgIC8vXG4gICAgICAvLyBjb25zaWRlcmluZyB0aGlzIGlucHV0OlxuICAgICAgLy8gLmEge1xuICAgICAgLy8gICAuYiAvKiBjb21tICovIHt9XG4gICAgICAvLyAgIGNvbG9yOiBob3RwaW5rO1xuICAgICAgLy8gfVxuICAgICAgLy8gd2UgZ2V0IG91dHB1dCBjb3JyZXNwb25kaW5nIHRvIHRoaXM6XG4gICAgICAvLyAuYSB7XG4gICAgICAvLyAgICYge1xuICAgICAgLy8gICAgIC8qIGNvbW0gKi9cbiAgICAgIC8vICAgICBjb2xvcjogaG90cGluaztcbiAgICAgIC8vICAgfVxuICAgICAgLy8gICAuYiB7fVxuICAgICAgLy8gfVxuXG4gICAgICB2YXIgY29tbWVudENvbnRhaW5lciA9IGlzTmVzdGVkID8gZWxlbWVudC5wYXJlbnQuY2hpbGRyZW4gOiAvLyBnbG9iYWwgcnVsZSBhdCB0aGUgcm9vdCBsZXZlbFxuICAgICAgY2hpbGRyZW47XG5cbiAgICAgIGZvciAodmFyIGkgPSBjb21tZW50Q29udGFpbmVyLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIHZhciBub2RlID0gY29tbWVudENvbnRhaW5lcltpXTtcblxuICAgICAgICBpZiAobm9kZS5saW5lIDwgZWxlbWVudC5saW5lKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH0gLy8gaXQgaXMgcXVpdGUgd2VpcmQgYnV0IGNvbW1lbnRzIGFyZSAqdXN1YWxseSogcHV0IGF0IGBjb2x1bW46IGVsZW1lbnQuY29sdW1uIC0gMWBcbiAgICAgICAgLy8gc28gd2Ugc2VlayAqZnJvbSB0aGUgZW5kKiBmb3IgdGhlIG5vZGUgdGhhdCBpcyBlYXJsaWVyIHRoYW4gdGhlIHJ1bGUncyBgZWxlbWVudGAgYW5kIGNoZWNrIHRoYXRcbiAgICAgICAgLy8gdGhpcyB3aWxsIGFsc28gbWF0Y2ggaW5wdXRzIGxpa2UgdGhpczpcbiAgICAgICAgLy8gLmEge1xuICAgICAgICAvLyAgIC8qIGNvbW0gKi9cbiAgICAgICAgLy8gICAuYiB7fVxuICAgICAgICAvLyB9XG4gICAgICAgIC8vXG4gICAgICAgIC8vIGJ1dCB0aGF0IGlzIGZpbmVcbiAgICAgICAgLy9cbiAgICAgICAgLy8gaXQgd291bGQgYmUgdGhlIGVhc2llc3QgdG8gY2hhbmdlIHRoZSBwbGFjZW1lbnQgb2YgdGhlIGNvbW1lbnQgdG8gYmUgdGhlIGZpcnN0IGNoaWxkIG9mIHRoZSBydWxlOlxuICAgICAgICAvLyAuYSB7XG4gICAgICAgIC8vICAgLmIgeyAvKiBjb21tICovIH1cbiAgICAgICAgLy8gfVxuICAgICAgICAvLyB3aXRoIHN1Y2ggaW5wdXRzIHdlIHdvdWxkbid0IGhhdmUgdG8gc2VhcmNoIGZvciB0aGUgY29tbWVudCBhdCBhbGxcbiAgICAgICAgLy8gVE9ETzogY29uc2lkZXIgY2hhbmdpbmcgdGhpcyBjb21tZW50IHBsYWNlbWVudCBpbiB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uXG5cblxuICAgICAgICBpZiAobm9kZS5jb2x1bW4gPCBlbGVtZW50LmNvbHVtbikge1xuICAgICAgICAgIGlmIChpc0lnbm9yaW5nQ29tbWVudChub2RlKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHVuc2FmZVBzZXVkb0NsYXNzZXMuZm9yRWFjaChmdW5jdGlvbiAodW5zYWZlUHNldWRvQ2xhc3MpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIlRoZSBwc2V1ZG8gY2xhc3MgXFxcIlwiICsgdW5zYWZlUHNldWRvQ2xhc3MgKyBcIlxcXCIgaXMgcG90ZW50aWFsbHkgdW5zYWZlIHdoZW4gZG9pbmcgc2VydmVyLXNpZGUgcmVuZGVyaW5nLiBUcnkgY2hhbmdpbmcgaXQgdG8gXFxcIlwiICsgdW5zYWZlUHNldWRvQ2xhc3Muc3BsaXQoJy1jaGlsZCcpWzBdICsgXCItb2YtdHlwZVxcXCIuXCIpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufTtcblxudmFyIGlzSW1wb3J0UnVsZSA9IGZ1bmN0aW9uIGlzSW1wb3J0UnVsZShlbGVtZW50KSB7XG4gIHJldHVybiBlbGVtZW50LnR5cGUuY2hhckNvZGVBdCgxKSA9PT0gMTA1ICYmIGVsZW1lbnQudHlwZS5jaGFyQ29kZUF0KDApID09PSA2NDtcbn07XG5cbnZhciBpc1ByZXBlbmRlZFdpdGhSZWd1bGFyUnVsZXMgPSBmdW5jdGlvbiBpc1ByZXBlbmRlZFdpdGhSZWd1bGFyUnVsZXMoaW5kZXgsIGNoaWxkcmVuKSB7XG4gIGZvciAodmFyIGkgPSBpbmRleCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgaWYgKCFpc0ltcG9ydFJ1bGUoY2hpbGRyZW5baV0pKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59OyAvLyB1c2UgdGhpcyB0byByZW1vdmUgaW5jb3JyZWN0IGVsZW1lbnRzIGZyb20gZnVydGhlciBwcm9jZXNzaW5nXG4vLyBzbyB0aGV5IGRvbid0IGdldCBoYW5kZWQgdG8gdGhlIGBzaGVldGAgKG9yIGFueXRoaW5nIGVsc2UpXG4vLyBhcyB0aGF0IGNvdWxkIHBvdGVudGlhbGx5IGxlYWQgdG8gYWRkaXRpb25hbCBsb2dzIHdoaWNoIGluIHR1cm4gY291bGQgYmUgb3ZlcmhlbG1pbmcgdG8gdGhlIHVzZXJcblxuXG52YXIgbnVsbGlmeUVsZW1lbnQgPSBmdW5jdGlvbiBudWxsaWZ5RWxlbWVudChlbGVtZW50KSB7XG4gIGVsZW1lbnQudHlwZSA9ICcnO1xuICBlbGVtZW50LnZhbHVlID0gJyc7XG4gIGVsZW1lbnRbXCJyZXR1cm5cIl0gPSAnJztcbiAgZWxlbWVudC5jaGlsZHJlbiA9ICcnO1xuICBlbGVtZW50LnByb3BzID0gJyc7XG59O1xuXG52YXIgaW5jb3JyZWN0SW1wb3J0QWxhcm0gPSBmdW5jdGlvbiBpbmNvcnJlY3RJbXBvcnRBbGFybShlbGVtZW50LCBpbmRleCwgY2hpbGRyZW4pIHtcbiAgaWYgKCFpc0ltcG9ydFJ1bGUoZWxlbWVudCkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoZWxlbWVudC5wYXJlbnQpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiYEBpbXBvcnRgIHJ1bGVzIGNhbid0IGJlIG5lc3RlZCBpbnNpZGUgb3RoZXIgcnVsZXMuIFBsZWFzZSBtb3ZlIGl0IHRvIHRoZSB0b3AgbGV2ZWwgYW5kIHB1dCBpdCBiZWZvcmUgcmVndWxhciBydWxlcy4gS2VlcCBpbiBtaW5kIHRoYXQgdGhleSBjYW4gb25seSBiZSB1c2VkIHdpdGhpbiBnbG9iYWwgc3R5bGVzLlwiKTtcbiAgICBudWxsaWZ5RWxlbWVudChlbGVtZW50KTtcbiAgfSBlbHNlIGlmIChpc1ByZXBlbmRlZFdpdGhSZWd1bGFyUnVsZXMoaW5kZXgsIGNoaWxkcmVuKSkge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJgQGltcG9ydGAgcnVsZXMgY2FuJ3QgYmUgYWZ0ZXIgb3RoZXIgcnVsZXMuIFBsZWFzZSBwdXQgeW91ciBgQGltcG9ydGAgcnVsZXMgYmVmb3JlIHlvdXIgb3RoZXIgcnVsZXMuXCIpO1xuICAgIG51bGxpZnlFbGVtZW50KGVsZW1lbnQpO1xuICB9XG59O1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1mYWxsdGhyb3VnaCAqL1xuXG5mdW5jdGlvbiBwcmVmaXgodmFsdWUsIGxlbmd0aCkge1xuICBzd2l0Y2ggKGhhc2godmFsdWUsIGxlbmd0aCkpIHtcbiAgICAvLyBjb2xvci1hZGp1c3RcbiAgICBjYXNlIDUxMDM6XG4gICAgICByZXR1cm4gV0VCS0lUICsgJ3ByaW50LScgKyB2YWx1ZSArIHZhbHVlO1xuICAgIC8vIGFuaW1hdGlvbiwgYW5pbWF0aW9uLShkZWxheXxkaXJlY3Rpb258ZHVyYXRpb258ZmlsbC1tb2RlfGl0ZXJhdGlvbi1jb3VudHxuYW1lfHBsYXktc3RhdGV8dGltaW5nLWZ1bmN0aW9uKVxuXG4gICAgY2FzZSA1NzM3OlxuICAgIGNhc2UgNDIwMTpcbiAgICBjYXNlIDMxNzc6XG4gICAgY2FzZSAzNDMzOlxuICAgIGNhc2UgMTY0MTpcbiAgICBjYXNlIDQ0NTc6XG4gICAgY2FzZSAyOTIxOiAvLyB0ZXh0LWRlY29yYXRpb24sIGZpbHRlciwgY2xpcC1wYXRoLCBiYWNrZmFjZS12aXNpYmlsaXR5LCBjb2x1bW4sIGJveC1kZWNvcmF0aW9uLWJyZWFrXG5cbiAgICBjYXNlIDU1NzI6XG4gICAgY2FzZSA2MzU2OlxuICAgIGNhc2UgNTg0NDpcbiAgICBjYXNlIDMxOTE6XG4gICAgY2FzZSA2NjQ1OlxuICAgIGNhc2UgMzAwNTogLy8gbWFzaywgbWFzay1pbWFnZSwgbWFzay0obW9kZXxjbGlwfHNpemUpLCBtYXNrLShyZXBlYXR8b3JpZ2luKSwgbWFzay1wb3NpdGlvbiwgbWFzay1jb21wb3NpdGUsXG5cbiAgICBjYXNlIDYzOTE6XG4gICAgY2FzZSA1ODc5OlxuICAgIGNhc2UgNTYyMzpcbiAgICBjYXNlIDYxMzU6XG4gICAgY2FzZSA0NTk5OlxuICAgIGNhc2UgNDg1NTogLy8gYmFja2dyb3VuZC1jbGlwLCBjb2x1bW5zLCBjb2x1bW4tKGNvdW50fGZpbGx8Z2FwfHJ1bGV8cnVsZS1jb2xvcnxydWxlLXN0eWxlfHJ1bGUtd2lkdGh8c3Bhbnx3aWR0aClcblxuICAgIGNhc2UgNDIxNTpcbiAgICBjYXNlIDYzODk6XG4gICAgY2FzZSA1MTA5OlxuICAgIGNhc2UgNTM2NTpcbiAgICBjYXNlIDU2MjE6XG4gICAgY2FzZSAzODI5OlxuICAgICAgcmV0dXJuIFdFQktJVCArIHZhbHVlICsgdmFsdWU7XG4gICAgLy8gYXBwZWFyYW5jZSwgdXNlci1zZWxlY3QsIHRyYW5zZm9ybSwgaHlwaGVucywgdGV4dC1zaXplLWFkanVzdFxuXG4gICAgY2FzZSA1MzQ5OlxuICAgIGNhc2UgNDI0NjpcbiAgICBjYXNlIDQ4MTA6XG4gICAgY2FzZSA2OTY4OlxuICAgIGNhc2UgMjc1NjpcbiAgICAgIHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1PWiArIHZhbHVlICsgTVMgKyB2YWx1ZSArIHZhbHVlO1xuICAgIC8vIGZsZXgsIGZsZXgtZGlyZWN0aW9uXG5cbiAgICBjYXNlIDY4Mjg6XG4gICAgY2FzZSA0MjY4OlxuICAgICAgcmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyB2YWx1ZSArIHZhbHVlO1xuICAgIC8vIG9yZGVyXG5cbiAgICBjYXNlIDYxNjU6XG4gICAgICByZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArICdmbGV4LScgKyB2YWx1ZSArIHZhbHVlO1xuICAgIC8vIGFsaWduLWl0ZW1zXG5cbiAgICBjYXNlIDUxODc6XG4gICAgICByZXR1cm4gV0VCS0lUICsgdmFsdWUgKyByZXBsYWNlKHZhbHVlLCAvKFxcdyspLisoOlteXSspLywgV0VCS0lUICsgJ2JveC0kMSQyJyArIE1TICsgJ2ZsZXgtJDEkMicpICsgdmFsdWU7XG4gICAgLy8gYWxpZ24tc2VsZlxuXG4gICAgY2FzZSA1NDQzOlxuICAgICAgcmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyAnZmxleC1pdGVtLScgKyByZXBsYWNlKHZhbHVlLCAvZmxleC18LXNlbGYvLCAnJykgKyB2YWx1ZTtcbiAgICAvLyBhbGlnbi1jb250ZW50XG5cbiAgICBjYXNlIDQ2NzU6XG4gICAgICByZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArICdmbGV4LWxpbmUtcGFjaycgKyByZXBsYWNlKHZhbHVlLCAvYWxpZ24tY29udGVudHxmbGV4LXwtc2VsZi8sICcnKSArIHZhbHVlO1xuICAgIC8vIGZsZXgtc2hyaW5rXG5cbiAgICBjYXNlIDU1NDg6XG4gICAgICByZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArIHJlcGxhY2UodmFsdWUsICdzaHJpbmsnLCAnbmVnYXRpdmUnKSArIHZhbHVlO1xuICAgIC8vIGZsZXgtYmFzaXNcblxuICAgIGNhc2UgNTI5MjpcbiAgICAgIHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1TICsgcmVwbGFjZSh2YWx1ZSwgJ2Jhc2lzJywgJ3ByZWZlcnJlZC1zaXplJykgKyB2YWx1ZTtcbiAgICAvLyBmbGV4LWdyb3dcblxuICAgIGNhc2UgNjA2MDpcbiAgICAgIHJldHVybiBXRUJLSVQgKyAnYm94LScgKyByZXBsYWNlKHZhbHVlLCAnLWdyb3cnLCAnJykgKyBXRUJLSVQgKyB2YWx1ZSArIE1TICsgcmVwbGFjZSh2YWx1ZSwgJ2dyb3cnLCAncG9zaXRpdmUnKSArIHZhbHVlO1xuICAgIC8vIHRyYW5zaXRpb25cblxuICAgIGNhc2UgNDU1NDpcbiAgICAgIHJldHVybiBXRUJLSVQgKyByZXBsYWNlKHZhbHVlLCAvKFteLV0pKHRyYW5zZm9ybSkvZywgJyQxJyArIFdFQktJVCArICckMicpICsgdmFsdWU7XG4gICAgLy8gY3Vyc29yXG5cbiAgICBjYXNlIDYxODc6XG4gICAgICByZXR1cm4gcmVwbGFjZShyZXBsYWNlKHJlcGxhY2UodmFsdWUsIC8oem9vbS18Z3JhYikvLCBXRUJLSVQgKyAnJDEnKSwgLyhpbWFnZS1zZXQpLywgV0VCS0lUICsgJyQxJyksIHZhbHVlLCAnJykgKyB2YWx1ZTtcbiAgICAvLyBiYWNrZ3JvdW5kLCBiYWNrZ3JvdW5kLWltYWdlXG5cbiAgICBjYXNlIDU0OTU6XG4gICAgY2FzZSAzOTU5OlxuICAgICAgcmV0dXJuIHJlcGxhY2UodmFsdWUsIC8oaW1hZ2Utc2V0XFwoW15dKikvLCBXRUJLSVQgKyAnJDEnICsgJyRgJDEnKTtcbiAgICAvLyBqdXN0aWZ5LWNvbnRlbnRcblxuICAgIGNhc2UgNDk2ODpcbiAgICAgIHJldHVybiByZXBsYWNlKHJlcGxhY2UodmFsdWUsIC8oLis6KShmbGV4LSk/KC4qKS8sIFdFQktJVCArICdib3gtcGFjazokMycgKyBNUyArICdmbGV4LXBhY2s6JDMnKSwgL3MuKy1iW147XSsvLCAnanVzdGlmeScpICsgV0VCS0lUICsgdmFsdWUgKyB2YWx1ZTtcbiAgICAvLyAobWFyZ2lufHBhZGRpbmcpLWlubGluZS0oc3RhcnR8ZW5kKVxuXG4gICAgY2FzZSA0MDk1OlxuICAgIGNhc2UgMzU4MzpcbiAgICBjYXNlIDQwNjg6XG4gICAgY2FzZSAyNTMyOlxuICAgICAgcmV0dXJuIHJlcGxhY2UodmFsdWUsIC8oLispLWlubGluZSguKykvLCBXRUJLSVQgKyAnJDEkMicpICsgdmFsdWU7XG4gICAgLy8gKG1pbnxtYXgpPyh3aWR0aHxoZWlnaHR8aW5saW5lLXNpemV8YmxvY2stc2l6ZSlcblxuICAgIGNhc2UgODExNjpcbiAgICBjYXNlIDcwNTk6XG4gICAgY2FzZSA1NzUzOlxuICAgIGNhc2UgNTUzNTpcbiAgICBjYXNlIDU0NDU6XG4gICAgY2FzZSA1NzAxOlxuICAgIGNhc2UgNDkzMzpcbiAgICBjYXNlIDQ2Nzc6XG4gICAgY2FzZSA1NTMzOlxuICAgIGNhc2UgNTc4OTpcbiAgICBjYXNlIDUwMjE6XG4gICAgY2FzZSA0NzY1OlxuICAgICAgLy8gc3RyZXRjaCwgbWF4LWNvbnRlbnQsIG1pbi1jb250ZW50LCBmaWxsLWF2YWlsYWJsZVxuICAgICAgaWYgKHN0cmxlbih2YWx1ZSkgLSAxIC0gbGVuZ3RoID4gNikgc3dpdGNoIChjaGFyYXQodmFsdWUsIGxlbmd0aCArIDEpKSB7XG4gICAgICAgIC8vIChtKWF4LWNvbnRlbnQsIChtKWluLWNvbnRlbnRcbiAgICAgICAgY2FzZSAxMDk6XG4gICAgICAgICAgLy8gLVxuICAgICAgICAgIGlmIChjaGFyYXQodmFsdWUsIGxlbmd0aCArIDQpICE9PSA0NSkgYnJlYWs7XG4gICAgICAgIC8vIChmKWlsbC1hdmFpbGFibGUsIChmKWl0LWNvbnRlbnRcblxuICAgICAgICBjYXNlIDEwMjpcbiAgICAgICAgICByZXR1cm4gcmVwbGFjZSh2YWx1ZSwgLyguKzopKC4rKS0oW15dKykvLCAnJDEnICsgV0VCS0lUICsgJyQyLSQzJyArICckMScgKyBNT1ogKyAoY2hhcmF0KHZhbHVlLCBsZW5ndGggKyAzKSA9PSAxMDggPyAnJDMnIDogJyQyLSQzJykpICsgdmFsdWU7XG4gICAgICAgIC8vIChzKXRyZXRjaFxuXG4gICAgICAgIGNhc2UgMTE1OlxuICAgICAgICAgIHJldHVybiB+aW5kZXhvZih2YWx1ZSwgJ3N0cmV0Y2gnKSA/IHByZWZpeChyZXBsYWNlKHZhbHVlLCAnc3RyZXRjaCcsICdmaWxsLWF2YWlsYWJsZScpLCBsZW5ndGgpICsgdmFsdWUgOiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIC8vIHBvc2l0aW9uOiBzdGlja3lcblxuICAgIGNhc2UgNDk0OTpcbiAgICAgIC8vIChzKXRpY2t5P1xuICAgICAgaWYgKGNoYXJhdCh2YWx1ZSwgbGVuZ3RoICsgMSkgIT09IDExNSkgYnJlYWs7XG4gICAgLy8gZGlzcGxheTogKGZsZXh8aW5saW5lLWZsZXgpXG5cbiAgICBjYXNlIDY0NDQ6XG4gICAgICBzd2l0Y2ggKGNoYXJhdCh2YWx1ZSwgc3RybGVuKHZhbHVlKSAtIDMgLSAofmluZGV4b2YodmFsdWUsICchaW1wb3J0YW50JykgJiYgMTApKSkge1xuICAgICAgICAvLyBzdGljKGspeVxuICAgICAgICBjYXNlIDEwNzpcbiAgICAgICAgICByZXR1cm4gcmVwbGFjZSh2YWx1ZSwgJzonLCAnOicgKyBXRUJLSVQpICsgdmFsdWU7XG4gICAgICAgIC8vIChpbmxpbmUtKT9mbChlKXhcblxuICAgICAgICBjYXNlIDEwMTpcbiAgICAgICAgICByZXR1cm4gcmVwbGFjZSh2YWx1ZSwgLyguKzopKFteOyFdKykoO3whLispPy8sICckMScgKyBXRUJLSVQgKyAoY2hhcmF0KHZhbHVlLCAxNCkgPT09IDQ1ID8gJ2lubGluZS0nIDogJycpICsgJ2JveCQzJyArICckMScgKyBXRUJLSVQgKyAnJDIkMycgKyAnJDEnICsgTVMgKyAnJDJib3gkMycpICsgdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIGJyZWFrO1xuICAgIC8vIHdyaXRpbmctbW9kZVxuXG4gICAgY2FzZSA1OTM2OlxuICAgICAgc3dpdGNoIChjaGFyYXQodmFsdWUsIGxlbmd0aCArIDExKSkge1xuICAgICAgICAvLyB2ZXJ0aWNhbC1sKHIpXG4gICAgICAgIGNhc2UgMTE0OlxuICAgICAgICAgIHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1TICsgcmVwbGFjZSh2YWx1ZSwgL1tzdmhdXFx3Ky1bdGJscl17Mn0vLCAndGInKSArIHZhbHVlO1xuICAgICAgICAvLyB2ZXJ0aWNhbC1yKGwpXG5cbiAgICAgICAgY2FzZSAxMDg6XG4gICAgICAgICAgcmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyByZXBsYWNlKHZhbHVlLCAvW3N2aF1cXHcrLVt0YmxyXXsyfS8sICd0Yi1ybCcpICsgdmFsdWU7XG4gICAgICAgIC8vIGhvcml6b250YWwoLSl0YlxuXG4gICAgICAgIGNhc2UgNDU6XG4gICAgICAgICAgcmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyByZXBsYWNlKHZhbHVlLCAvW3N2aF1cXHcrLVt0YmxyXXsyfS8sICdscicpICsgdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1TICsgdmFsdWUgKyB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiB2YWx1ZTtcbn1cblxudmFyIHByZWZpeGVyID0gZnVuY3Rpb24gcHJlZml4ZXIoZWxlbWVudCwgaW5kZXgsIGNoaWxkcmVuLCBjYWxsYmFjaykge1xuICBpZiAoZWxlbWVudC5sZW5ndGggPiAtMSkgaWYgKCFlbGVtZW50W1wicmV0dXJuXCJdKSBzd2l0Y2ggKGVsZW1lbnQudHlwZSkge1xuICAgIGNhc2UgREVDTEFSQVRJT046XG4gICAgICBlbGVtZW50W1wicmV0dXJuXCJdID0gcHJlZml4KGVsZW1lbnQudmFsdWUsIGVsZW1lbnQubGVuZ3RoKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBLRVlGUkFNRVM6XG4gICAgICByZXR1cm4gc2VyaWFsaXplKFtjb3B5KGVsZW1lbnQsIHtcbiAgICAgICAgdmFsdWU6IHJlcGxhY2UoZWxlbWVudC52YWx1ZSwgJ0AnLCAnQCcgKyBXRUJLSVQpXG4gICAgICB9KV0sIGNhbGxiYWNrKTtcblxuICAgIGNhc2UgUlVMRVNFVDpcbiAgICAgIGlmIChlbGVtZW50Lmxlbmd0aCkgcmV0dXJuIGNvbWJpbmUoZWxlbWVudC5wcm9wcywgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHN3aXRjaCAobWF0Y2godmFsdWUsIC8oOjpwbGFjXFx3K3w6cmVhZC1cXHcrKS8pKSB7XG4gICAgICAgICAgLy8gOnJlYWQtKG9ubHl8d3JpdGUpXG4gICAgICAgICAgY2FzZSAnOnJlYWQtb25seSc6XG4gICAgICAgICAgY2FzZSAnOnJlYWQtd3JpdGUnOlxuICAgICAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZShbY29weShlbGVtZW50LCB7XG4gICAgICAgICAgICAgIHByb3BzOiBbcmVwbGFjZSh2YWx1ZSwgLzoocmVhZC1cXHcrKS8sICc6JyArIE1PWiArICckMScpXVxuICAgICAgICAgICAgfSldLCBjYWxsYmFjayk7XG4gICAgICAgICAgLy8gOnBsYWNlaG9sZGVyXG5cbiAgICAgICAgICBjYXNlICc6OnBsYWNlaG9sZGVyJzpcbiAgICAgICAgICAgIHJldHVybiBzZXJpYWxpemUoW2NvcHkoZWxlbWVudCwge1xuICAgICAgICAgICAgICBwcm9wczogW3JlcGxhY2UodmFsdWUsIC86KHBsYWNcXHcrKS8sICc6JyArIFdFQktJVCArICdpbnB1dC0kMScpXVxuICAgICAgICAgICAgfSksIGNvcHkoZWxlbWVudCwge1xuICAgICAgICAgICAgICBwcm9wczogW3JlcGxhY2UodmFsdWUsIC86KHBsYWNcXHcrKS8sICc6JyArIE1PWiArICckMScpXVxuICAgICAgICAgICAgfSksIGNvcHkoZWxlbWVudCwge1xuICAgICAgICAgICAgICBwcm9wczogW3JlcGxhY2UodmFsdWUsIC86KHBsYWNcXHcrKS8sIE1TICsgJ2lucHV0LSQxJyldXG4gICAgICAgICAgICB9KV0sIGNhbGxiYWNrKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH0pO1xuICB9XG59O1xuXG52YXIgZGVmYXVsdFN0eWxpc1BsdWdpbnMgPSBbcHJlZml4ZXJdO1xuXG52YXIgY3JlYXRlQ2FjaGUgPSBmdW5jdGlvbiBjcmVhdGVDYWNoZShvcHRpb25zKSB7XG4gIHZhciBrZXkgPSBvcHRpb25zLmtleTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAha2V5KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IGhhdmUgdG8gY29uZmlndXJlIGBrZXlgIGZvciB5b3VyIGNhY2hlLiBQbGVhc2UgbWFrZSBzdXJlIGl0J3MgdW5pcXVlIChhbmQgbm90IGVxdWFsIHRvICdjc3MnKSBhcyBpdCdzIHVzZWQgZm9yIGxpbmtpbmcgc3R5bGVzIHRvIHlvdXIgY2FjaGUuXFxuXCIgKyBcIklmIG11bHRpcGxlIGNhY2hlcyBzaGFyZSB0aGUgc2FtZSBrZXkgdGhleSBtaWdodCBcXFwiZmlnaHRcXFwiIGZvciBlYWNoIG90aGVyJ3Mgc3R5bGUgZWxlbWVudHMuXCIpO1xuICB9XG5cbiAgaWYgKGtleSA9PT0gJ2NzcycpIHtcbiAgICB2YXIgc3NyU3R5bGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcInN0eWxlW2RhdGEtZW1vdGlvbl06bm90KFtkYXRhLXNdKVwiKTsgLy8gZ2V0IFNTUmVkIHN0eWxlcyBvdXQgb2YgdGhlIHdheSBvZiBSZWFjdCdzIGh5ZHJhdGlvblxuICAgIC8vIGRvY3VtZW50LmhlYWQgaXMgYSBzYWZlIHBsYWNlIHRvIG1vdmUgdGhlbSB0byh0aG91Z2ggbm90ZSBkb2N1bWVudC5oZWFkIGlzIG5vdCBuZWNlc3NhcmlseSB0aGUgbGFzdCBwbGFjZSB0aGV5IHdpbGwgYmUpXG4gICAgLy8gbm90ZSB0aGlzIHZlcnkgdmVyeSBpbnRlbnRpb25hbGx5IHRhcmdldHMgYWxsIHN0eWxlIGVsZW1lbnRzIHJlZ2FyZGxlc3Mgb2YgdGhlIGtleSB0byBlbnN1cmVcbiAgICAvLyB0aGF0IGNyZWF0aW5nIGEgY2FjaGUgd29ya3MgaW5zaWRlIG9mIHJlbmRlciBvZiBhIFJlYWN0IGNvbXBvbmVudFxuXG4gICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChzc3JTdHlsZXMsIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAvLyB3ZSB3YW50IHRvIG9ubHkgbW92ZSBlbGVtZW50cyB3aGljaCBoYXZlIGEgc3BhY2UgaW4gdGhlIGRhdGEtZW1vdGlvbiBhdHRyaWJ1dGUgdmFsdWVcbiAgICAgIC8vIGJlY2F1c2UgdGhhdCBpbmRpY2F0ZXMgdGhhdCBpdCBpcyBhbiBFbW90aW9uIDExIHNlcnZlci1zaWRlIHJlbmRlcmVkIHN0eWxlIGVsZW1lbnRzXG4gICAgICAvLyB3aGlsZSB3ZSB3aWxsIGFscmVhZHkgaWdub3JlIEVtb3Rpb24gMTEgY2xpZW50LXNpZGUgaW5zZXJ0ZWQgc3R5bGVzIGJlY2F1c2Ugb2YgdGhlIDpub3QoW2RhdGEtc10pIHBhcnQgaW4gdGhlIHNlbGVjdG9yXG4gICAgICAvLyBFbW90aW9uIDEwIGNsaWVudC1zaWRlIGluc2VydGVkIHN0eWxlcyBkaWQgbm90IGhhdmUgZGF0YS1zIChidXQgaW1wb3J0YW50bHkgZGlkIG5vdCBoYXZlIGEgc3BhY2UgaW4gdGhlaXIgZGF0YS1lbW90aW9uIGF0dHJpYnV0ZXMpXG4gICAgICAvLyBzbyBjaGVja2luZyBmb3IgdGhlIHNwYWNlIGVuc3VyZXMgdGhhdCBsb2FkaW5nIEVtb3Rpb24gMTEgYWZ0ZXIgRW1vdGlvbiAxMCBoYXMgaW5zZXJ0ZWQgc29tZSBzdHlsZXNcbiAgICAgIC8vIHdpbGwgbm90IHJlc3VsdCBpbiB0aGUgRW1vdGlvbiAxMCBzdHlsZXMgYmVpbmcgZGVzdHJveWVkXG4gICAgICB2YXIgZGF0YUVtb3Rpb25BdHRyaWJ1dGUgPSBub2RlLmdldEF0dHJpYnV0ZSgnZGF0YS1lbW90aW9uJyk7XG5cbiAgICAgIGlmIChkYXRhRW1vdGlvbkF0dHJpYnV0ZS5pbmRleE9mKCcgJykgPT09IC0xKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQobm9kZSk7XG4gICAgICBub2RlLnNldEF0dHJpYnV0ZSgnZGF0YS1zJywgJycpO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIHN0eWxpc1BsdWdpbnMgPSBvcHRpb25zLnN0eWxpc1BsdWdpbnMgfHwgZGVmYXVsdFN0eWxpc1BsdWdpbnM7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyAkRmxvd0ZpeE1lXG4gICAgaWYgKC9bXmEtei1dLy50ZXN0KGtleSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkVtb3Rpb24ga2V5IG11c3Qgb25seSBjb250YWluIGxvd2VyIGNhc2UgYWxwaGFiZXRpY2FsIGNoYXJhY3RlcnMgYW5kIC0gYnV0IFxcXCJcIiArIGtleSArIFwiXFxcIiB3YXMgcGFzc2VkXCIpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpbnNlcnRlZCA9IHt9O1xuICB2YXIgY29udGFpbmVyO1xuICB2YXIgbm9kZXNUb0h5ZHJhdGUgPSBbXTtcblxuICB7XG4gICAgY29udGFpbmVyID0gb3B0aW9ucy5jb250YWluZXIgfHwgZG9jdW1lbnQuaGVhZDtcbiAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKCAvLyB0aGlzIG1lYW5zIHdlIHdpbGwgaWdub3JlIGVsZW1lbnRzIHdoaWNoIGRvbid0IGhhdmUgYSBzcGFjZSBpbiB0aGVtIHdoaWNoXG4gICAgLy8gbWVhbnMgdGhhdCB0aGUgc3R5bGUgZWxlbWVudHMgd2UncmUgbG9va2luZyBhdCBhcmUgb25seSBFbW90aW9uIDExIHNlcnZlci1yZW5kZXJlZCBzdHlsZSBlbGVtZW50c1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJzdHlsZVtkYXRhLWVtb3Rpb25ePVxcXCJcIiArIGtleSArIFwiIFxcXCJdXCIpLCBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgdmFyIGF0dHJpYiA9IG5vZGUuZ2V0QXR0cmlidXRlKFwiZGF0YS1lbW90aW9uXCIpLnNwbGl0KCcgJyk7IC8vICRGbG93Rml4TWVcblxuICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhdHRyaWIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaW5zZXJ0ZWRbYXR0cmliW2ldXSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIG5vZGVzVG9IeWRyYXRlLnB1c2gobm9kZSk7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgX2luc2VydDtcblxuICB2YXIgb21uaXByZXNlbnRQbHVnaW5zID0gW2NvbXBhdCwgcmVtb3ZlTGFiZWxdO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgb21uaXByZXNlbnRQbHVnaW5zLnB1c2goY3JlYXRlVW5zYWZlU2VsZWN0b3JzQWxhcm0oe1xuICAgICAgZ2V0IGNvbXBhdCgpIHtcbiAgICAgICAgcmV0dXJuIGNhY2hlLmNvbXBhdDtcbiAgICAgIH1cblxuICAgIH0pLCBpbmNvcnJlY3RJbXBvcnRBbGFybSk7XG4gIH1cblxuICB7XG4gICAgdmFyIGN1cnJlbnRTaGVldDtcbiAgICB2YXIgZmluYWxpemluZ1BsdWdpbnMgPSBbc3RyaW5naWZ5LCBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgIGlmICghZWxlbWVudC5yb290KSB7XG4gICAgICAgIGlmIChlbGVtZW50W1wicmV0dXJuXCJdKSB7XG4gICAgICAgICAgY3VycmVudFNoZWV0Lmluc2VydChlbGVtZW50W1wicmV0dXJuXCJdKTtcbiAgICAgICAgfSBlbHNlIGlmIChlbGVtZW50LnZhbHVlICYmIGVsZW1lbnQudHlwZSAhPT0gQ09NTUVOVCkge1xuICAgICAgICAgIC8vIGluc2VydCBlbXB0eSBydWxlIGluIG5vbi1wcm9kdWN0aW9uIGVudmlyb25tZW50c1xuICAgICAgICAgIC8vIHNvIEBlbW90aW9uL2plc3QgY2FuIGdyYWIgYGtleWAgZnJvbSB0aGUgKEpTKURPTSBmb3IgY2FjaGVzIHdpdGhvdXQgYW55IHJ1bGVzIGluc2VydGVkIHlldFxuICAgICAgICAgIGN1cnJlbnRTaGVldC5pbnNlcnQoZWxlbWVudC52YWx1ZSArIFwie31cIik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IDogcnVsZXNoZWV0KGZ1bmN0aW9uIChydWxlKSB7XG4gICAgICBjdXJyZW50U2hlZXQuaW5zZXJ0KHJ1bGUpO1xuICAgIH0pXTtcbiAgICB2YXIgc2VyaWFsaXplciA9IG1pZGRsZXdhcmUob21uaXByZXNlbnRQbHVnaW5zLmNvbmNhdChzdHlsaXNQbHVnaW5zLCBmaW5hbGl6aW5nUGx1Z2lucykpO1xuXG4gICAgdmFyIHN0eWxpcyA9IGZ1bmN0aW9uIHN0eWxpcyhzdHlsZXMpIHtcbiAgICAgIHJldHVybiBzZXJpYWxpemUoY29tcGlsZShzdHlsZXMpLCBzZXJpYWxpemVyKTtcbiAgICB9O1xuXG4gICAgX2luc2VydCA9IGZ1bmN0aW9uIGluc2VydChzZWxlY3Rvciwgc2VyaWFsaXplZCwgc2hlZXQsIHNob3VsZENhY2hlKSB7XG4gICAgICBjdXJyZW50U2hlZXQgPSBzaGVldDtcblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgc2VyaWFsaXplZC5tYXAgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjdXJyZW50U2hlZXQgPSB7XG4gICAgICAgICAgaW5zZXJ0OiBmdW5jdGlvbiBpbnNlcnQocnVsZSkge1xuICAgICAgICAgICAgc2hlZXQuaW5zZXJ0KHJ1bGUgKyBzZXJpYWxpemVkLm1hcCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBzdHlsaXMoc2VsZWN0b3IgPyBzZWxlY3RvciArIFwie1wiICsgc2VyaWFsaXplZC5zdHlsZXMgKyBcIn1cIiA6IHNlcmlhbGl6ZWQuc3R5bGVzKTtcblxuICAgICAgaWYgKHNob3VsZENhY2hlKSB7XG4gICAgICAgIGNhY2hlLmluc2VydGVkW3NlcmlhbGl6ZWQubmFtZV0gPSB0cnVlO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICB2YXIgY2FjaGUgPSB7XG4gICAga2V5OiBrZXksXG4gICAgc2hlZXQ6IG5ldyBTdHlsZVNoZWV0KHtcbiAgICAgIGtleToga2V5LFxuICAgICAgY29udGFpbmVyOiBjb250YWluZXIsXG4gICAgICBub25jZTogb3B0aW9ucy5ub25jZSxcbiAgICAgIHNwZWVkeTogb3B0aW9ucy5zcGVlZHksXG4gICAgICBwcmVwZW5kOiBvcHRpb25zLnByZXBlbmQsXG4gICAgICBpbnNlcnRpb25Qb2ludDogb3B0aW9ucy5pbnNlcnRpb25Qb2ludFxuICAgIH0pLFxuICAgIG5vbmNlOiBvcHRpb25zLm5vbmNlLFxuICAgIGluc2VydGVkOiBpbnNlcnRlZCxcbiAgICByZWdpc3RlcmVkOiB7fSxcbiAgICBpbnNlcnQ6IF9pbnNlcnRcbiAgfTtcbiAgY2FjaGUuc2hlZXQuaHlkcmF0ZShub2Rlc1RvSHlkcmF0ZSk7XG4gIHJldHVybiBjYWNoZTtcbn07XG5cbmV4cG9ydCB7IGNyZWF0ZUNhY2hlIGFzIGRlZmF1bHQgfTtcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTMuMVxuICogcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixjPWI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsZD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsZT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxmPWI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsaD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxrPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsbD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLG09Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLG49Yj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIscD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxxPWI/XG5TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTo2MDEyMCxyPWI/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsdD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LHY9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYmxvY2tcIik6NjAxMjEsdz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTo2MDExNyx4PWI/U3ltYm9sLmZvcihcInJlYWN0LnJlc3BvbmRlclwiKTo2MDExOCx5PWI/U3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpOjYwMTE5O1xuZnVuY3Rpb24geihhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgdT1hLiQkdHlwZW9mO3N3aXRjaCh1KXtjYXNlIGM6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgbDpjYXNlIG06Y2FzZSBlOmNhc2UgZzpjYXNlIGY6Y2FzZSBwOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBuOmNhc2UgdDpjYXNlIHI6Y2FzZSBoOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuIHV9fWNhc2UgZDpyZXR1cm4gdX19fWZ1bmN0aW9uIEEoYSl7cmV0dXJuIHooYSk9PT1tfWV4cG9ydHMuQXN5bmNNb2RlPWw7ZXhwb3J0cy5Db25jdXJyZW50TW9kZT1tO2V4cG9ydHMuQ29udGV4dENvbnN1bWVyPWs7ZXhwb3J0cy5Db250ZXh0UHJvdmlkZXI9aDtleHBvcnRzLkVsZW1lbnQ9YztleHBvcnRzLkZvcndhcmRSZWY9bjtleHBvcnRzLkZyYWdtZW50PWU7ZXhwb3J0cy5MYXp5PXQ7ZXhwb3J0cy5NZW1vPXI7ZXhwb3J0cy5Qb3J0YWw9ZDtcbmV4cG9ydHMuUHJvZmlsZXI9ZztleHBvcnRzLlN0cmljdE1vZGU9ZjtleHBvcnRzLlN1c3BlbnNlPXA7ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbihhKXtyZXR1cm4gQShhKXx8eihhKT09PWx9O2V4cG9ydHMuaXNDb25jdXJyZW50TW9kZT1BO2V4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1rfTtleHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09aH07ZXhwb3J0cy5pc0VsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWN9O2V4cG9ydHMuaXNGb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09bn07ZXhwb3J0cy5pc0ZyYWdtZW50PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09ZX07ZXhwb3J0cy5pc0xhenk9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT10fTtcbmV4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cn07ZXhwb3J0cy5pc1BvcnRhbD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWR9O2V4cG9ydHMuaXNQcm9maWxlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWd9O2V4cG9ydHMuaXNTdHJpY3RNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Zn07ZXhwb3J0cy5pc1N1c3BlbnNlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cH07XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZXx8YT09PW18fGE9PT1nfHxhPT09Znx8YT09PXB8fGE9PT1xfHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXR8fGEuJCR0eXBlb2Y9PT1yfHxhLiQkdHlwZW9mPT09aHx8YS4kJHR5cGVvZj09PWt8fGEuJCR0eXBlb2Y9PT1ufHxhLiQkdHlwZW9mPT09d3x8YS4kJHR5cGVvZj09PXh8fGEuJCR0eXBlb2Y9PT15fHxhLiQkdHlwZW9mPT09dil9O2V4cG9ydHMudHlwZU9mPXo7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4vKipcbiAqIENvcHlyaWdodCAyMDE1LCBZYWhvbyEgSW5jLlxuICogQ29weXJpZ2h0cyBsaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBMaWNlbnNlLiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuICovXG52YXIgUkVBQ1RfU1RBVElDUyA9IHtcbiAgY2hpbGRDb250ZXh0VHlwZXM6IHRydWUsXG4gIGNvbnRleHRUeXBlOiB0cnVlLFxuICBjb250ZXh0VHlwZXM6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIGdldERlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM6IHRydWUsXG4gIG1peGluczogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gIG5hbWU6IHRydWUsXG4gIGxlbmd0aDogdHJ1ZSxcbiAgcHJvdG90eXBlOiB0cnVlLFxuICBjYWxsZXI6IHRydWUsXG4gIGNhbGxlZTogdHJ1ZSxcbiAgYXJndW1lbnRzOiB0cnVlLFxuICBhcml0eTogdHJ1ZVxufTtcbnZhciBGT1JXQVJEX1JFRl9TVEFUSUNTID0ge1xuICAnJCR0eXBlb2YnOiB0cnVlLFxuICByZW5kZXI6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZVxufTtcbnZhciBNRU1PX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIGNvbXBhcmU6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZSxcbiAgdHlwZTogdHJ1ZVxufTtcbnZhciBUWVBFX1NUQVRJQ1MgPSB7fTtcblRZUEVfU1RBVElDU1tyZWFjdElzLkZvcndhcmRSZWZdID0gRk9SV0FSRF9SRUZfU1RBVElDUztcblRZUEVfU1RBVElDU1tyZWFjdElzLk1lbW9dID0gTUVNT19TVEFUSUNTO1xuXG5mdW5jdGlvbiBnZXRTdGF0aWNzKGNvbXBvbmVudCkge1xuICAvLyBSZWFjdCB2MTYuMTEgYW5kIGJlbG93XG4gIGlmIChyZWFjdElzLmlzTWVtbyhjb21wb25lbnQpKSB7XG4gICAgcmV0dXJuIE1FTU9fU1RBVElDUztcbiAgfSAvLyBSZWFjdCB2MTYuMTIgYW5kIGFib3ZlXG5cblxuICByZXR1cm4gVFlQRV9TVEFUSUNTW2NvbXBvbmVudFsnJCR0eXBlb2YnXV0gfHwgUkVBQ1RfU1RBVElDUztcbn1cblxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgb2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcbmZ1bmN0aW9uIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgc291cmNlQ29tcG9uZW50LCBibGFja2xpc3QpIHtcbiAgaWYgKHR5cGVvZiBzb3VyY2VDb21wb25lbnQgIT09ICdzdHJpbmcnKSB7XG4gICAgLy8gZG9uJ3QgaG9pc3Qgb3ZlciBzdHJpbmcgKGh0bWwpIGNvbXBvbmVudHNcbiAgICBpZiAob2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICB2YXIgaW5oZXJpdGVkQ29tcG9uZW50ID0gZ2V0UHJvdG90eXBlT2Yoc291cmNlQ29tcG9uZW50KTtcblxuICAgICAgaWYgKGluaGVyaXRlZENvbXBvbmVudCAmJiBpbmhlcml0ZWRDb21wb25lbnQgIT09IG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIGluaGVyaXRlZENvbXBvbmVudCwgYmxhY2tsaXN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoc291cmNlQ29tcG9uZW50KTtcblxuICAgIGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICAgIGtleXMgPSBrZXlzLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlQ29tcG9uZW50KSk7XG4gICAgfVxuXG4gICAgdmFyIHRhcmdldFN0YXRpY3MgPSBnZXRTdGF0aWNzKHRhcmdldENvbXBvbmVudCk7XG4gICAgdmFyIHNvdXJjZVN0YXRpY3MgPSBnZXRTdGF0aWNzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuXG4gICAgICBpZiAoIUtOT1dOX1NUQVRJQ1Nba2V5XSAmJiAhKGJsYWNrbGlzdCAmJiBibGFja2xpc3Rba2V5XSkgJiYgIShzb3VyY2VTdGF0aWNzICYmIHNvdXJjZVN0YXRpY3Nba2V5XSkgJiYgISh0YXJnZXRTdGF0aWNzICYmIHRhcmdldFN0YXRpY3Nba2V5XSkpIHtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlQ29tcG9uZW50LCBrZXkpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gQXZvaWQgZmFpbHVyZXMgZnJvbSByZWFkLW9ubHkgcHJvcGVydGllc1xuICAgICAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldENvbXBvbmVudCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhvaXN0Tm9uUmVhY3RTdGF0aWNzO1xuIiwidmFyIGlzQnJvd3NlciA9IFwib2JqZWN0XCIgIT09ICd1bmRlZmluZWQnO1xuZnVuY3Rpb24gZ2V0UmVnaXN0ZXJlZFN0eWxlcyhyZWdpc3RlcmVkLCByZWdpc3RlcmVkU3R5bGVzLCBjbGFzc05hbWVzKSB7XG4gIHZhciByYXdDbGFzc05hbWUgPSAnJztcbiAgY2xhc3NOYW1lcy5zcGxpdCgnICcpLmZvckVhY2goZnVuY3Rpb24gKGNsYXNzTmFtZSkge1xuICAgIGlmIChyZWdpc3RlcmVkW2NsYXNzTmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmVnaXN0ZXJlZFN0eWxlcy5wdXNoKHJlZ2lzdGVyZWRbY2xhc3NOYW1lXSArIFwiO1wiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmF3Q2xhc3NOYW1lICs9IGNsYXNzTmFtZSArIFwiIFwiO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByYXdDbGFzc05hbWU7XG59XG52YXIgcmVnaXN0ZXJTdHlsZXMgPSBmdW5jdGlvbiByZWdpc3RlclN0eWxlcyhjYWNoZSwgc2VyaWFsaXplZCwgaXNTdHJpbmdUYWcpIHtcbiAgdmFyIGNsYXNzTmFtZSA9IGNhY2hlLmtleSArIFwiLVwiICsgc2VyaWFsaXplZC5uYW1lO1xuXG4gIGlmICggLy8gd2Ugb25seSBuZWVkIHRvIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSByZWdpc3RlcmVkIGNhY2hlIGlmIHRoZVxuICAvLyBjbGFzcyBuYW1lIGNvdWxkIGJlIHVzZWQgZnVydGhlciBkb3duXG4gIC8vIHRoZSB0cmVlIGJ1dCBpZiBpdCdzIGEgc3RyaW5nIHRhZywgd2Uga25vdyBpdCB3b24ndFxuICAvLyBzbyB3ZSBkb24ndCBoYXZlIHRvIGFkZCBpdCB0byByZWdpc3RlcmVkIGNhY2hlLlxuICAvLyB0aGlzIGltcHJvdmVzIG1lbW9yeSB1c2FnZSBzaW5jZSB3ZSBjYW4gYXZvaWQgc3RvcmluZyB0aGUgd2hvbGUgc3R5bGUgc3RyaW5nXG4gIChpc1N0cmluZ1RhZyA9PT0gZmFsc2UgfHwgLy8gd2UgbmVlZCB0byBhbHdheXMgc3RvcmUgaXQgaWYgd2UncmUgaW4gY29tcGF0IG1vZGUgYW5kXG4gIC8vIGluIG5vZGUgc2luY2UgZW1vdGlvbi1zZXJ2ZXIgcmVsaWVzIG9uIHdoZXRoZXIgYSBzdHlsZSBpcyBpblxuICAvLyB0aGUgcmVnaXN0ZXJlZCBjYWNoZSB0byBrbm93IHdoZXRoZXIgYSBzdHlsZSBpcyBnbG9iYWwgb3Igbm90XG4gIC8vIGFsc28sIG5vdGUgdGhhdCB0aGlzIGNoZWNrIHdpbGwgYmUgZGVhZCBjb2RlIGVsaW1pbmF0ZWQgaW4gdGhlIGJyb3dzZXJcbiAgaXNCcm93c2VyID09PSBmYWxzZSApICYmIGNhY2hlLnJlZ2lzdGVyZWRbY2xhc3NOYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgY2FjaGUucmVnaXN0ZXJlZFtjbGFzc05hbWVdID0gc2VyaWFsaXplZC5zdHlsZXM7XG4gIH1cbn07XG52YXIgaW5zZXJ0U3R5bGVzID0gZnVuY3Rpb24gaW5zZXJ0U3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkLCBpc1N0cmluZ1RhZykge1xuICByZWdpc3RlclN0eWxlcyhjYWNoZSwgc2VyaWFsaXplZCwgaXNTdHJpbmdUYWcpO1xuICB2YXIgY2xhc3NOYW1lID0gY2FjaGUua2V5ICsgXCItXCIgKyBzZXJpYWxpemVkLm5hbWU7XG5cbiAgaWYgKGNhY2hlLmluc2VydGVkW3NlcmlhbGl6ZWQubmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBjdXJyZW50ID0gc2VyaWFsaXplZDtcblxuICAgIGRvIHtcbiAgICAgIGNhY2hlLmluc2VydChzZXJpYWxpemVkID09PSBjdXJyZW50ID8gXCIuXCIgKyBjbGFzc05hbWUgOiAnJywgY3VycmVudCwgY2FjaGUuc2hlZXQsIHRydWUpO1xuXG4gICAgICBjdXJyZW50ID0gY3VycmVudC5uZXh0O1xuICAgIH0gd2hpbGUgKGN1cnJlbnQgIT09IHVuZGVmaW5lZCk7XG4gIH1cbn07XG5cbmV4cG9ydCB7IGdldFJlZ2lzdGVyZWRTdHlsZXMsIGluc2VydFN0eWxlcywgcmVnaXN0ZXJTdHlsZXMgfTtcbiIsIi8qIGVzbGludC1kaXNhYmxlICovXG4vLyBJbnNwaXJlZCBieSBodHRwczovL2dpdGh1Yi5jb20vZ2FyeWNvdXJ0L211cm11cmhhc2gtanNcbi8vIFBvcnRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9hYXBwbGVieS9zbWhhc2hlci9ibG9iLzYxYTA1MzBmMjgyNzdmMmU4NTBiZmMzOTYwMGNlNjFkMDJiNTE4ZGUvc3JjL011cm11ckhhc2gyLmNwcCNMMzctTDg2XG5mdW5jdGlvbiBtdXJtdXIyKHN0cikge1xuICAvLyAnbScgYW5kICdyJyBhcmUgbWl4aW5nIGNvbnN0YW50cyBnZW5lcmF0ZWQgb2ZmbGluZS5cbiAgLy8gVGhleSdyZSBub3QgcmVhbGx5ICdtYWdpYycsIHRoZXkganVzdCBoYXBwZW4gdG8gd29yayB3ZWxsLlxuICAvLyBjb25zdCBtID0gMHg1YmQxZTk5NTtcbiAgLy8gY29uc3QgciA9IDI0O1xuICAvLyBJbml0aWFsaXplIHRoZSBoYXNoXG4gIHZhciBoID0gMDsgLy8gTWl4IDQgYnl0ZXMgYXQgYSB0aW1lIGludG8gdGhlIGhhc2hcblxuICB2YXIgayxcbiAgICAgIGkgPSAwLFxuICAgICAgbGVuID0gc3RyLmxlbmd0aDtcblxuICBmb3IgKDsgbGVuID49IDQ7ICsraSwgbGVuIC09IDQpIHtcbiAgICBrID0gc3RyLmNoYXJDb2RlQXQoaSkgJiAweGZmIHwgKHN0ci5jaGFyQ29kZUF0KCsraSkgJiAweGZmKSA8PCA4IHwgKHN0ci5jaGFyQ29kZUF0KCsraSkgJiAweGZmKSA8PCAxNiB8IChzdHIuY2hhckNvZGVBdCgrK2kpICYgMHhmZikgPDwgMjQ7XG4gICAgayA9XG4gICAgLyogTWF0aC5pbXVsKGssIG0pOiAqL1xuICAgIChrICYgMHhmZmZmKSAqIDB4NWJkMWU5OTUgKyAoKGsgPj4+IDE2KSAqIDB4ZTk5NSA8PCAxNik7XG4gICAgayBePVxuICAgIC8qIGsgPj4+IHI6ICovXG4gICAgayA+Pj4gMjQ7XG4gICAgaCA9XG4gICAgLyogTWF0aC5pbXVsKGssIG0pOiAqL1xuICAgIChrICYgMHhmZmZmKSAqIDB4NWJkMWU5OTUgKyAoKGsgPj4+IDE2KSAqIDB4ZTk5NSA8PCAxNikgXlxuICAgIC8qIE1hdGguaW11bChoLCBtKTogKi9cbiAgICAoaCAmIDB4ZmZmZikgKiAweDViZDFlOTk1ICsgKChoID4+PiAxNikgKiAweGU5OTUgPDwgMTYpO1xuICB9IC8vIEhhbmRsZSB0aGUgbGFzdCBmZXcgYnl0ZXMgb2YgdGhlIGlucHV0IGFycmF5XG5cblxuICBzd2l0Y2ggKGxlbikge1xuICAgIGNhc2UgMzpcbiAgICAgIGggXj0gKHN0ci5jaGFyQ29kZUF0KGkgKyAyKSAmIDB4ZmYpIDw8IDE2O1xuXG4gICAgY2FzZSAyOlxuICAgICAgaCBePSAoc3RyLmNoYXJDb2RlQXQoaSArIDEpICYgMHhmZikgPDwgODtcblxuICAgIGNhc2UgMTpcbiAgICAgIGggXj0gc3RyLmNoYXJDb2RlQXQoaSkgJiAweGZmO1xuICAgICAgaCA9XG4gICAgICAvKiBNYXRoLmltdWwoaCwgbSk6ICovXG4gICAgICAoaCAmIDB4ZmZmZikgKiAweDViZDFlOTk1ICsgKChoID4+PiAxNikgKiAweGU5OTUgPDwgMTYpO1xuICB9IC8vIERvIGEgZmV3IGZpbmFsIG1peGVzIG9mIHRoZSBoYXNoIHRvIGVuc3VyZSB0aGUgbGFzdCBmZXdcbiAgLy8gYnl0ZXMgYXJlIHdlbGwtaW5jb3Jwb3JhdGVkLlxuXG5cbiAgaCBePSBoID4+PiAxMztcbiAgaCA9XG4gIC8qIE1hdGguaW11bChoLCBtKTogKi9cbiAgKGggJiAweGZmZmYpICogMHg1YmQxZTk5NSArICgoaCA+Pj4gMTYpICogMHhlOTk1IDw8IDE2KTtcbiAgcmV0dXJuICgoaCBeIGggPj4+IDE1KSA+Pj4gMCkudG9TdHJpbmcoMzYpO1xufVxuXG5leHBvcnQgeyBtdXJtdXIyIGFzIGRlZmF1bHQgfTtcbiIsInZhciB1bml0bGVzc0tleXMgPSB7XG4gIGFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiAxLFxuICBhc3BlY3RSYXRpbzogMSxcbiAgYm9yZGVySW1hZ2VPdXRzZXQ6IDEsXG4gIGJvcmRlckltYWdlU2xpY2U6IDEsXG4gIGJvcmRlckltYWdlV2lkdGg6IDEsXG4gIGJveEZsZXg6IDEsXG4gIGJveEZsZXhHcm91cDogMSxcbiAgYm94T3JkaW5hbEdyb3VwOiAxLFxuICBjb2x1bW5Db3VudDogMSxcbiAgY29sdW1uczogMSxcbiAgZmxleDogMSxcbiAgZmxleEdyb3c6IDEsXG4gIGZsZXhQb3NpdGl2ZTogMSxcbiAgZmxleFNocmluazogMSxcbiAgZmxleE5lZ2F0aXZlOiAxLFxuICBmbGV4T3JkZXI6IDEsXG4gIGdyaWRSb3c6IDEsXG4gIGdyaWRSb3dFbmQ6IDEsXG4gIGdyaWRSb3dTcGFuOiAxLFxuICBncmlkUm93U3RhcnQ6IDEsXG4gIGdyaWRDb2x1bW46IDEsXG4gIGdyaWRDb2x1bW5FbmQ6IDEsXG4gIGdyaWRDb2x1bW5TcGFuOiAxLFxuICBncmlkQ29sdW1uU3RhcnQ6IDEsXG4gIG1zR3JpZFJvdzogMSxcbiAgbXNHcmlkUm93U3BhbjogMSxcbiAgbXNHcmlkQ29sdW1uOiAxLFxuICBtc0dyaWRDb2x1bW5TcGFuOiAxLFxuICBmb250V2VpZ2h0OiAxLFxuICBsaW5lSGVpZ2h0OiAxLFxuICBvcGFjaXR5OiAxLFxuICBvcmRlcjogMSxcbiAgb3JwaGFuczogMSxcbiAgdGFiU2l6ZTogMSxcbiAgd2lkb3dzOiAxLFxuICB6SW5kZXg6IDEsXG4gIHpvb206IDEsXG4gIFdlYmtpdExpbmVDbGFtcDogMSxcbiAgLy8gU1ZHLXJlbGF0ZWQgcHJvcGVydGllc1xuICBmaWxsT3BhY2l0eTogMSxcbiAgZmxvb2RPcGFjaXR5OiAxLFxuICBzdG9wT3BhY2l0eTogMSxcbiAgc3Ryb2tlRGFzaGFycmF5OiAxLFxuICBzdHJva2VEYXNob2Zmc2V0OiAxLFxuICBzdHJva2VNaXRlcmxpbWl0OiAxLFxuICBzdHJva2VPcGFjaXR5OiAxLFxuICBzdHJva2VXaWR0aDogMVxufTtcblxuZXhwb3J0IHsgdW5pdGxlc3NLZXlzIGFzIGRlZmF1bHQgfTtcbiIsImltcG9ydCBoYXNoU3RyaW5nIGZyb20gJ0BlbW90aW9uL2hhc2gnO1xuaW1wb3J0IHVuaXRsZXNzIGZyb20gJ0BlbW90aW9uL3VuaXRsZXNzJztcbmltcG9ydCBtZW1vaXplIGZyb20gJ0BlbW90aW9uL21lbW9pemUnO1xuXG52YXIgSUxMRUdBTF9FU0NBUEVfU0VRVUVOQ0VfRVJST1IgPSBcIllvdSBoYXZlIGlsbGVnYWwgZXNjYXBlIHNlcXVlbmNlIGluIHlvdXIgdGVtcGxhdGUgbGl0ZXJhbCwgbW9zdCBsaWtlbHkgaW5zaWRlIGNvbnRlbnQncyBwcm9wZXJ0eSB2YWx1ZS5cXG5CZWNhdXNlIHlvdSB3cml0ZSB5b3VyIENTUyBpbnNpZGUgYSBKYXZhU2NyaXB0IHN0cmluZyB5b3UgYWN0dWFsbHkgaGF2ZSB0byBkbyBkb3VibGUgZXNjYXBpbmcsIHNvIGZvciBleGFtcGxlIFxcXCJjb250ZW50OiAnXFxcXDAwZDcnO1xcXCIgc2hvdWxkIGJlY29tZSBcXFwiY29udGVudDogJ1xcXFxcXFxcMDBkNyc7XFxcIi5cXG5Zb3UgY2FuIHJlYWQgbW9yZSBhYm91dCB0aGlzIGhlcmU6XFxuaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvVGVtcGxhdGVfbGl0ZXJhbHMjRVMyMDE4X3JldmlzaW9uX29mX2lsbGVnYWxfZXNjYXBlX3NlcXVlbmNlc1wiO1xudmFyIFVOREVGSU5FRF9BU19PQkpFQ1RfS0VZX0VSUk9SID0gXCJZb3UgaGF2ZSBwYXNzZWQgaW4gZmFsc3kgdmFsdWUgYXMgc3R5bGUgb2JqZWN0J3Mga2V5IChjYW4gaGFwcGVuIHdoZW4gaW4gZXhhbXBsZSB5b3UgcGFzcyB1bmV4cG9ydGVkIGNvbXBvbmVudCBhcyBjb21wdXRlZCBrZXkpLlwiO1xudmFyIGh5cGhlbmF0ZVJlZ2V4ID0gL1tBLVpdfF5tcy9nO1xudmFyIGFuaW1hdGlvblJlZ2V4ID0gL19FTU9fKFteX10rPylfKFteXSo/KV9FTU9fL2c7XG5cbnZhciBpc0N1c3RvbVByb3BlcnR5ID0gZnVuY3Rpb24gaXNDdXN0b21Qcm9wZXJ0eShwcm9wZXJ0eSkge1xuICByZXR1cm4gcHJvcGVydHkuY2hhckNvZGVBdCgxKSA9PT0gNDU7XG59O1xuXG52YXIgaXNQcm9jZXNzYWJsZVZhbHVlID0gZnVuY3Rpb24gaXNQcm9jZXNzYWJsZVZhbHVlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZSAhPT0gJ2Jvb2xlYW4nO1xufTtcblxudmFyIHByb2Nlc3NTdHlsZU5hbWUgPSAvKiAjX19QVVJFX18gKi9tZW1vaXplKGZ1bmN0aW9uIChzdHlsZU5hbWUpIHtcbiAgcmV0dXJuIGlzQ3VzdG9tUHJvcGVydHkoc3R5bGVOYW1lKSA/IHN0eWxlTmFtZSA6IHN0eWxlTmFtZS5yZXBsYWNlKGh5cGhlbmF0ZVJlZ2V4LCAnLSQmJykudG9Mb3dlckNhc2UoKTtcbn0pO1xuXG52YXIgcHJvY2Vzc1N0eWxlVmFsdWUgPSBmdW5jdGlvbiBwcm9jZXNzU3R5bGVWYWx1ZShrZXksIHZhbHVlKSB7XG4gIHN3aXRjaCAoa2V5KSB7XG4gICAgY2FzZSAnYW5pbWF0aW9uJzpcbiAgICBjYXNlICdhbmltYXRpb25OYW1lJzpcbiAgICAgIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWUucmVwbGFjZShhbmltYXRpb25SZWdleCwgZnVuY3Rpb24gKG1hdGNoLCBwMSwgcDIpIHtcbiAgICAgICAgICAgIGN1cnNvciA9IHtcbiAgICAgICAgICAgICAgbmFtZTogcDEsXG4gICAgICAgICAgICAgIHN0eWxlczogcDIsXG4gICAgICAgICAgICAgIG5leHQ6IGN1cnNvclxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBwMTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICB9XG5cbiAgaWYgKHVuaXRsZXNzW2tleV0gIT09IDEgJiYgIWlzQ3VzdG9tUHJvcGVydHkoa2V5KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICYmIHZhbHVlICE9PSAwKSB7XG4gICAgcmV0dXJuIHZhbHVlICsgJ3B4JztcbiAgfVxuXG4gIHJldHVybiB2YWx1ZTtcbn07XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBjb250ZW50VmFsdWVQYXR0ZXJuID0gLyh2YXJ8YXR0cnxjb3VudGVycz98dXJsfGVsZW1lbnR8KCgocmVwZWF0aW5nLSk/KGxpbmVhcnxyYWRpYWwpKXxjb25pYyktZ3JhZGllbnQpXFwofChuby0pPyhvcGVufGNsb3NlKS1xdW90ZS87XG4gIHZhciBjb250ZW50VmFsdWVzID0gWydub3JtYWwnLCAnbm9uZScsICdpbml0aWFsJywgJ2luaGVyaXQnLCAndW5zZXQnXTtcbiAgdmFyIG9sZFByb2Nlc3NTdHlsZVZhbHVlID0gcHJvY2Vzc1N0eWxlVmFsdWU7XG4gIHZhciBtc1BhdHRlcm4gPSAvXi1tcy0vO1xuICB2YXIgaHlwaGVuUGF0dGVybiA9IC8tKC4pL2c7XG4gIHZhciBoeXBoZW5hdGVkQ2FjaGUgPSB7fTtcblxuICBwcm9jZXNzU3R5bGVWYWx1ZSA9IGZ1bmN0aW9uIHByb2Nlc3NTdHlsZVZhbHVlKGtleSwgdmFsdWUpIHtcbiAgICBpZiAoa2V5ID09PSAnY29udGVudCcpIHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnIHx8IGNvbnRlbnRWYWx1ZXMuaW5kZXhPZih2YWx1ZSkgPT09IC0xICYmICFjb250ZW50VmFsdWVQYXR0ZXJuLnRlc3QodmFsdWUpICYmICh2YWx1ZS5jaGFyQXQoMCkgIT09IHZhbHVlLmNoYXJBdCh2YWx1ZS5sZW5ndGggLSAxKSB8fCB2YWx1ZS5jaGFyQXQoMCkgIT09ICdcIicgJiYgdmFsdWUuY2hhckF0KDApICE9PSBcIidcIikpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IHNlZW0gdG8gYmUgdXNpbmcgYSB2YWx1ZSBmb3IgJ2NvbnRlbnQnIHdpdGhvdXQgcXVvdGVzLCB0cnkgcmVwbGFjaW5nIGl0IHdpdGggYGNvbnRlbnQ6ICdcXFwiXCIgKyB2YWx1ZSArIFwiXFxcIidgXCIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwcm9jZXNzZWQgPSBvbGRQcm9jZXNzU3R5bGVWYWx1ZShrZXksIHZhbHVlKTtcblxuICAgIGlmIChwcm9jZXNzZWQgIT09ICcnICYmICFpc0N1c3RvbVByb3BlcnR5KGtleSkgJiYga2V5LmluZGV4T2YoJy0nKSAhPT0gLTEgJiYgaHlwaGVuYXRlZENhY2hlW2tleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgaHlwaGVuYXRlZENhY2hlW2tleV0gPSB0cnVlO1xuICAgICAgY29uc29sZS5lcnJvcihcIlVzaW5nIGtlYmFiLWNhc2UgZm9yIGNzcyBwcm9wZXJ0aWVzIGluIG9iamVjdHMgaXMgbm90IHN1cHBvcnRlZC4gRGlkIHlvdSBtZWFuIFwiICsga2V5LnJlcGxhY2UobXNQYXR0ZXJuLCAnbXMtJykucmVwbGFjZShoeXBoZW5QYXR0ZXJuLCBmdW5jdGlvbiAoc3RyLCBfY2hhcikge1xuICAgICAgICByZXR1cm4gX2NoYXIudG9VcHBlckNhc2UoKTtcbiAgICAgIH0pICsgXCI/XCIpO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9jZXNzZWQ7XG4gIH07XG59XG5cbnZhciBub0NvbXBvbmVudFNlbGVjdG9yTWVzc2FnZSA9ICdDb21wb25lbnQgc2VsZWN0b3JzIGNhbiBvbmx5IGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCAnICsgJ0BlbW90aW9uL2JhYmVsLXBsdWdpbiwgdGhlIHN3YyBFbW90aW9uIHBsdWdpbiwgb3IgYW5vdGhlciBFbW90aW9uLWF3YXJlICcgKyAnY29tcGlsZXIgdHJhbnNmb3JtLic7XG5cbmZ1bmN0aW9uIGhhbmRsZUludGVycG9sYXRpb24obWVyZ2VkUHJvcHMsIHJlZ2lzdGVyZWQsIGludGVycG9sYXRpb24pIHtcbiAgaWYgKGludGVycG9sYXRpb24gPT0gbnVsbCkge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIGlmIChpbnRlcnBvbGF0aW9uLl9fZW1vdGlvbl9zdHlsZXMgIT09IHVuZGVmaW5lZCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGludGVycG9sYXRpb24udG9TdHJpbmcoKSA9PT0gJ05PX0NPTVBPTkVOVF9TRUxFQ1RPUicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihub0NvbXBvbmVudFNlbGVjdG9yTWVzc2FnZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGludGVycG9sYXRpb247XG4gIH1cblxuICBzd2l0Y2ggKHR5cGVvZiBpbnRlcnBvbGF0aW9uKSB7XG4gICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cblxuICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICB7XG4gICAgICAgIGlmIChpbnRlcnBvbGF0aW9uLmFuaW0gPT09IDEpIHtcbiAgICAgICAgICBjdXJzb3IgPSB7XG4gICAgICAgICAgICBuYW1lOiBpbnRlcnBvbGF0aW9uLm5hbWUsXG4gICAgICAgICAgICBzdHlsZXM6IGludGVycG9sYXRpb24uc3R5bGVzLFxuICAgICAgICAgICAgbmV4dDogY3Vyc29yXG4gICAgICAgICAgfTtcbiAgICAgICAgICByZXR1cm4gaW50ZXJwb2xhdGlvbi5uYW1lO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGludGVycG9sYXRpb24uc3R5bGVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB2YXIgbmV4dCA9IGludGVycG9sYXRpb24ubmV4dDtcblxuICAgICAgICAgIGlmIChuZXh0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIG5vdCB0aGUgbW9zdCBlZmZpY2llbnQgdGhpbmcgZXZlciBidXQgdGhpcyBpcyBhIHByZXR0eSByYXJlIGNhc2VcbiAgICAgICAgICAgIC8vIGFuZCB0aGVyZSB3aWxsIGJlIHZlcnkgZmV3IGl0ZXJhdGlvbnMgb2YgdGhpcyBnZW5lcmFsbHlcbiAgICAgICAgICAgIHdoaWxlIChuZXh0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgY3Vyc29yID0ge1xuICAgICAgICAgICAgICAgIG5hbWU6IG5leHQubmFtZSxcbiAgICAgICAgICAgICAgICBzdHlsZXM6IG5leHQuc3R5bGVzLFxuICAgICAgICAgICAgICAgIG5leHQ6IGN1cnNvclxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICBuZXh0ID0gbmV4dC5uZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBzdHlsZXMgPSBpbnRlcnBvbGF0aW9uLnN0eWxlcyArIFwiO1wiO1xuXG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgaW50ZXJwb2xhdGlvbi5tYXAgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgc3R5bGVzICs9IGludGVycG9sYXRpb24ubWFwO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBzdHlsZXM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY3JlYXRlU3RyaW5nRnJvbU9iamVjdChtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgaW50ZXJwb2xhdGlvbik7XG4gICAgICB9XG5cbiAgICBjYXNlICdmdW5jdGlvbic6XG4gICAgICB7XG4gICAgICAgIGlmIChtZXJnZWRQcm9wcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdmFyIHByZXZpb3VzQ3Vyc29yID0gY3Vyc29yO1xuICAgICAgICAgIHZhciByZXN1bHQgPSBpbnRlcnBvbGF0aW9uKG1lcmdlZFByb3BzKTtcbiAgICAgICAgICBjdXJzb3IgPSBwcmV2aW91c0N1cnNvcjtcbiAgICAgICAgICByZXR1cm4gaGFuZGxlSW50ZXJwb2xhdGlvbihtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgcmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignRnVuY3Rpb25zIHRoYXQgYXJlIGludGVycG9sYXRlZCBpbiBjc3MgY2FsbHMgd2lsbCBiZSBzdHJpbmdpZmllZC5cXG4nICsgJ0lmIHlvdSB3YW50IHRvIGhhdmUgYSBjc3MgY2FsbCBiYXNlZCBvbiBwcm9wcywgY3JlYXRlIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgY3NzIGNhbGwgbGlrZSB0aGlzXFxuJyArICdsZXQgZHluYW1pY1N0eWxlID0gKHByb3BzKSA9PiBjc3NgY29sb3I6ICR7cHJvcHMuY29sb3J9YFxcbicgKyAnSXQgY2FuIGJlIGNhbGxlZCBkaXJlY3RseSB3aXRoIHByb3BzIG9yIGludGVycG9sYXRlZCBpbiBhIHN0eWxlZCBjYWxsIGxpa2UgdGhpc1xcbicgKyBcImxldCBTb21lQ29tcG9uZW50ID0gc3R5bGVkKCdkaXYnKWAke2R5bmFtaWNTdHlsZX1gXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgdmFyIG1hdGNoZWQgPSBbXTtcbiAgICAgICAgdmFyIHJlcGxhY2VkID0gaW50ZXJwb2xhdGlvbi5yZXBsYWNlKGFuaW1hdGlvblJlZ2V4LCBmdW5jdGlvbiAobWF0Y2gsIHAxLCBwMikge1xuICAgICAgICAgIHZhciBmYWtlVmFyTmFtZSA9IFwiYW5pbWF0aW9uXCIgKyBtYXRjaGVkLmxlbmd0aDtcbiAgICAgICAgICBtYXRjaGVkLnB1c2goXCJjb25zdCBcIiArIGZha2VWYXJOYW1lICsgXCIgPSBrZXlmcmFtZXNgXCIgKyBwMi5yZXBsYWNlKC9eQGtleWZyYW1lcyBhbmltYXRpb24tXFx3Ky8sICcnKSArIFwiYFwiKTtcbiAgICAgICAgICByZXR1cm4gXCIke1wiICsgZmFrZVZhck5hbWUgKyBcIn1cIjtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKG1hdGNoZWQubGVuZ3RoKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignYGtleWZyYW1lc2Agb3V0cHV0IGdvdCBpbnRlcnBvbGF0ZWQgaW50byBwbGFpbiBzdHJpbmcsIHBsZWFzZSB3cmFwIGl0IHdpdGggYGNzc2AuXFxuXFxuJyArICdJbnN0ZWFkIG9mIGRvaW5nIHRoaXM6XFxuXFxuJyArIFtdLmNvbmNhdChtYXRjaGVkLCBbXCJgXCIgKyByZXBsYWNlZCArIFwiYFwiXSkuam9pbignXFxuJykgKyAnXFxuXFxuWW91IHNob3VsZCB3cmFwIGl0IHdpdGggYGNzc2AgbGlrZSB0aGlzOlxcblxcbicgKyAoXCJjc3NgXCIgKyByZXBsYWNlZCArIFwiYFwiKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgYnJlYWs7XG4gIH0gLy8gZmluYWxpemUgc3RyaW5nIHZhbHVlcyAocmVndWxhciBzdHJpbmdzIGFuZCBmdW5jdGlvbnMgaW50ZXJwb2xhdGVkIGludG8gY3NzIGNhbGxzKVxuXG5cbiAgaWYgKHJlZ2lzdGVyZWQgPT0gbnVsbCkge1xuICAgIHJldHVybiBpbnRlcnBvbGF0aW9uO1xuICB9XG5cbiAgdmFyIGNhY2hlZCA9IHJlZ2lzdGVyZWRbaW50ZXJwb2xhdGlvbl07XG4gIHJldHVybiBjYWNoZWQgIT09IHVuZGVmaW5lZCA/IGNhY2hlZCA6IGludGVycG9sYXRpb247XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0cmluZ0Zyb21PYmplY3QobWVyZ2VkUHJvcHMsIHJlZ2lzdGVyZWQsIG9iaikge1xuICB2YXIgc3RyaW5nID0gJyc7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqLmxlbmd0aDsgaSsrKSB7XG4gICAgICBzdHJpbmcgKz0gaGFuZGxlSW50ZXJwb2xhdGlvbihtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgb2JqW2ldKSArIFwiO1wiO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmb3IgKHZhciBfa2V5IGluIG9iaikge1xuICAgICAgdmFyIHZhbHVlID0gb2JqW19rZXldO1xuXG4gICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0Jykge1xuICAgICAgICBpZiAocmVnaXN0ZXJlZCAhPSBudWxsICYmIHJlZ2lzdGVyZWRbdmFsdWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBzdHJpbmcgKz0gX2tleSArIFwie1wiICsgcmVnaXN0ZXJlZFt2YWx1ZV0gKyBcIn1cIjtcbiAgICAgICAgfSBlbHNlIGlmIChpc1Byb2Nlc3NhYmxlVmFsdWUodmFsdWUpKSB7XG4gICAgICAgICAgc3RyaW5nICs9IHByb2Nlc3NTdHlsZU5hbWUoX2tleSkgKyBcIjpcIiArIHByb2Nlc3NTdHlsZVZhbHVlKF9rZXksIHZhbHVlKSArIFwiO1wiO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoX2tleSA9PT0gJ05PX0NPTVBPTkVOVF9TRUxFQ1RPUicgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihub0NvbXBvbmVudFNlbGVjdG9yTWVzc2FnZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgdHlwZW9mIHZhbHVlWzBdID09PSAnc3RyaW5nJyAmJiAocmVnaXN0ZXJlZCA9PSBudWxsIHx8IHJlZ2lzdGVyZWRbdmFsdWVbMF1dID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IHZhbHVlLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgaWYgKGlzUHJvY2Vzc2FibGVWYWx1ZSh2YWx1ZVtfaV0pKSB7XG4gICAgICAgICAgICAgIHN0cmluZyArPSBwcm9jZXNzU3R5bGVOYW1lKF9rZXkpICsgXCI6XCIgKyBwcm9jZXNzU3R5bGVWYWx1ZShfa2V5LCB2YWx1ZVtfaV0pICsgXCI7XCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBpbnRlcnBvbGF0ZWQgPSBoYW5kbGVJbnRlcnBvbGF0aW9uKG1lcmdlZFByb3BzLCByZWdpc3RlcmVkLCB2YWx1ZSk7XG5cbiAgICAgICAgICBzd2l0Y2ggKF9rZXkpIHtcbiAgICAgICAgICAgIGNhc2UgJ2FuaW1hdGlvbic6XG4gICAgICAgICAgICBjYXNlICdhbmltYXRpb25OYW1lJzpcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0cmluZyArPSBwcm9jZXNzU3R5bGVOYW1lKF9rZXkpICsgXCI6XCIgKyBpbnRlcnBvbGF0ZWQgKyBcIjtcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgX2tleSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoVU5ERUZJTkVEX0FTX09CSkVDVF9LRVlfRVJST1IpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHN0cmluZyArPSBfa2V5ICsgXCJ7XCIgKyBpbnRlcnBvbGF0ZWQgKyBcIn1cIjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzdHJpbmc7XG59XG5cbnZhciBsYWJlbFBhdHRlcm4gPSAvbGFiZWw6XFxzKihbXlxccztcXG57XSspXFxzKig7fCQpL2c7XG52YXIgc291cmNlTWFwUGF0dGVybjtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgc291cmNlTWFwUGF0dGVybiA9IC9cXC9cXCojXFxzc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uXFwvanNvbjtcXFMrXFxzK1xcKlxcLy9nO1xufSAvLyB0aGlzIGlzIHRoZSBjdXJzb3IgZm9yIGtleWZyYW1lc1xuLy8ga2V5ZnJhbWVzIGFyZSBzdG9yZWQgb24gdGhlIFNlcmlhbGl6ZWRTdHlsZXMgb2JqZWN0IGFzIGEgbGlua2VkIGxpc3RcblxuXG52YXIgY3Vyc29yO1xudmFyIHNlcmlhbGl6ZVN0eWxlcyA9IGZ1bmN0aW9uIHNlcmlhbGl6ZVN0eWxlcyhhcmdzLCByZWdpc3RlcmVkLCBtZXJnZWRQcm9wcykge1xuICBpZiAoYXJncy5sZW5ndGggPT09IDEgJiYgdHlwZW9mIGFyZ3NbMF0gPT09ICdvYmplY3QnICYmIGFyZ3NbMF0gIT09IG51bGwgJiYgYXJnc1swXS5zdHlsZXMgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBhcmdzWzBdO1xuICB9XG5cbiAgdmFyIHN0cmluZ01vZGUgPSB0cnVlO1xuICB2YXIgc3R5bGVzID0gJyc7XG4gIGN1cnNvciA9IHVuZGVmaW5lZDtcbiAgdmFyIHN0cmluZ3MgPSBhcmdzWzBdO1xuXG4gIGlmIChzdHJpbmdzID09IG51bGwgfHwgc3RyaW5ncy5yYXcgPT09IHVuZGVmaW5lZCkge1xuICAgIHN0cmluZ01vZGUgPSBmYWxzZTtcbiAgICBzdHlsZXMgKz0gaGFuZGxlSW50ZXJwb2xhdGlvbihtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgc3RyaW5ncyk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgc3RyaW5nc1swXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBjb25zb2xlLmVycm9yKElMTEVHQUxfRVNDQVBFX1NFUVVFTkNFX0VSUk9SKTtcbiAgICB9XG5cbiAgICBzdHlsZXMgKz0gc3RyaW5nc1swXTtcbiAgfSAvLyB3ZSBzdGFydCBhdCAxIHNpbmNlIHdlJ3ZlIGFscmVhZHkgaGFuZGxlZCB0aGUgZmlyc3QgYXJnXG5cblxuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICBzdHlsZXMgKz0gaGFuZGxlSW50ZXJwb2xhdGlvbihtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgYXJnc1tpXSk7XG5cbiAgICBpZiAoc3RyaW5nTW9kZSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgc3RyaW5nc1tpXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoSUxMRUdBTF9FU0NBUEVfU0VRVUVOQ0VfRVJST1IpO1xuICAgICAgfVxuXG4gICAgICBzdHlsZXMgKz0gc3RyaW5nc1tpXTtcbiAgICB9XG4gIH1cblxuICB2YXIgc291cmNlTWFwO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgc3R5bGVzID0gc3R5bGVzLnJlcGxhY2Uoc291cmNlTWFwUGF0dGVybiwgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICBzb3VyY2VNYXAgPSBtYXRjaDtcbiAgICAgIHJldHVybiAnJztcbiAgICB9KTtcbiAgfSAvLyB1c2luZyBhIGdsb2JhbCByZWdleCB3aXRoIC5leGVjIGlzIHN0YXRlZnVsIHNvIGxhc3RJbmRleCBoYXMgdG8gYmUgcmVzZXQgZWFjaCB0aW1lXG5cblxuICBsYWJlbFBhdHRlcm4ubGFzdEluZGV4ID0gMDtcbiAgdmFyIGlkZW50aWZpZXJOYW1lID0gJyc7XG4gIHZhciBtYXRjaDsgLy8gaHR0cHM6Ly9lc2JlbmNoLmNvbS9iZW5jaC81YjgwOWMyY2YyOTQ5ODAwYTBmNjFmYjVcblxuICB3aGlsZSAoKG1hdGNoID0gbGFiZWxQYXR0ZXJuLmV4ZWMoc3R5bGVzKSkgIT09IG51bGwpIHtcbiAgICBpZGVudGlmaWVyTmFtZSArPSAnLScgKyAvLyAkRmxvd0ZpeE1lIHdlIGtub3cgaXQncyBub3QgbnVsbFxuICAgIG1hdGNoWzFdO1xuICB9XG5cbiAgdmFyIG5hbWUgPSBoYXNoU3RyaW5nKHN0eWxlcykgKyBpZGVudGlmaWVyTmFtZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vICRGbG93Rml4TWUgU2VyaWFsaXplZFN0eWxlcyB0eXBlIGRvZXNuJ3QgaGF2ZSB0b1N0cmluZyBwcm9wZXJ0eSAoYW5kIHdlIGRvbid0IHdhbnQgdG8gYWRkIGl0KVxuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBuYW1lLFxuICAgICAgc3R5bGVzOiBzdHlsZXMsXG4gICAgICBtYXA6IHNvdXJjZU1hcCxcbiAgICAgIG5leHQ6IGN1cnNvcixcbiAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIFwiWW91IGhhdmUgdHJpZWQgdG8gc3RyaW5naWZ5IG9iamVjdCByZXR1cm5lZCBmcm9tIGBjc3NgIGZ1bmN0aW9uLiBJdCBpc24ndCBzdXBwb3NlZCB0byBiZSB1c2VkIGRpcmVjdGx5IChlLmcuIGFzIHZhbHVlIG9mIHRoZSBgY2xhc3NOYW1lYCBwcm9wKSwgYnV0IHJhdGhlciBoYW5kZWQgdG8gZW1vdGlvbiBzbyBpdCBjYW4gaGFuZGxlIGl0IChlLmcuIGFzIHZhbHVlIG9mIGBjc3NgIHByb3ApLlwiO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgc3R5bGVzOiBzdHlsZXMsXG4gICAgbmV4dDogY3Vyc29yXG4gIH07XG59O1xuXG5leHBvcnQgeyBzZXJpYWxpemVTdHlsZXMgfTtcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxudmFyIHN5bmNGYWxsYmFjayA9IGZ1bmN0aW9uIHN5bmNGYWxsYmFjayhjcmVhdGUpIHtcbiAgcmV0dXJuIGNyZWF0ZSgpO1xufTtcblxudmFyIHVzZUluc2VydGlvbkVmZmVjdCA9IFJlYWN0Wyd1c2VJbnNlcnRpb24nICsgJ0VmZmVjdCddID8gUmVhY3RbJ3VzZUluc2VydGlvbicgKyAnRWZmZWN0J10gOiBmYWxzZTtcbnZhciB1c2VJbnNlcnRpb25FZmZlY3RBbHdheXNXaXRoU3luY0ZhbGxiYWNrID0gdXNlSW5zZXJ0aW9uRWZmZWN0IHx8IHN5bmNGYWxsYmFjaztcbnZhciB1c2VJbnNlcnRpb25FZmZlY3RXaXRoTGF5b3V0RmFsbGJhY2sgPSB1c2VJbnNlcnRpb25FZmZlY3QgfHwgUmVhY3QudXNlTGF5b3V0RWZmZWN0O1xuXG5leHBvcnQgeyB1c2VJbnNlcnRpb25FZmZlY3RBbHdheXNXaXRoU3luY0ZhbGxiYWNrLCB1c2VJbnNlcnRpb25FZmZlY3RXaXRoTGF5b3V0RmFsbGJhY2sgfTtcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZUNvbnRleHQsIGZvcndhcmRSZWYgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY3JlYXRlQ2FjaGUgZnJvbSAnQGVtb3Rpb24vY2FjaGUnO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IHdlYWtNZW1vaXplIGZyb20gJ0BlbW90aW9uL3dlYWstbWVtb2l6ZSc7XG5pbXBvcnQgaG9pc3ROb25SZWFjdFN0YXRpY3MgZnJvbSAnLi4vX2lzb2xhdGVkLWhucnMvZGlzdC9lbW90aW9uLXJlYWN0LV9pc29sYXRlZC1obnJzLmJyb3dzZXIuZXNtLmpzJztcbmltcG9ydCB7IGdldFJlZ2lzdGVyZWRTdHlsZXMsIHJlZ2lzdGVyU3R5bGVzLCBpbnNlcnRTdHlsZXMgfSBmcm9tICdAZW1vdGlvbi91dGlscyc7XG5pbXBvcnQgeyBzZXJpYWxpemVTdHlsZXMgfSBmcm9tICdAZW1vdGlvbi9zZXJpYWxpemUnO1xuaW1wb3J0IHsgdXNlSW5zZXJ0aW9uRWZmZWN0QWx3YXlzV2l0aFN5bmNGYWxsYmFjayB9IGZyb20gJ0BlbW90aW9uL3VzZS1pbnNlcnRpb24tZWZmZWN0LXdpdGgtZmFsbGJhY2tzJztcblxudmFyIGlzQnJvd3NlciA9IFwib2JqZWN0XCIgIT09ICd1bmRlZmluZWQnO1xudmFyIGhhc093biA9IHt9Lmhhc093blByb3BlcnR5O1xuXG52YXIgRW1vdGlvbkNhY2hlQ29udGV4dCA9IC8qICNfX1BVUkVfXyAqL1JlYWN0LmNyZWF0ZUNvbnRleHQoIC8vIHdlJ3JlIGRvaW5nIHRoaXMgdG8gYXZvaWQgcHJlY29uc3RydWN0J3MgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIGluIHRoaXMgb25lIGNhc2Vcbi8vIGJlY2F1c2UgdGhpcyBtb2R1bGUgaXMgcHJpbWFyaWx5IGludGVuZGVkIGZvciB0aGUgYnJvd3NlciBhbmQgbm9kZVxuLy8gYnV0IGl0J3MgYWxzbyByZXF1aXJlZCBpbiByZWFjdCBuYXRpdmUgYW5kIHNpbWlsYXIgZW52aXJvbm1lbnRzIHNvbWV0aW1lc1xuLy8gYW5kIHdlIGNvdWxkIGhhdmUgYSBzcGVjaWFsIGJ1aWxkIGp1c3QgZm9yIHRoYXRcbi8vIGJ1dCB0aGlzIGlzIG11Y2ggZWFzaWVyIGFuZCB0aGUgbmF0aXZlIHBhY2thZ2VzXG4vLyBtaWdodCB1c2UgYSBkaWZmZXJlbnQgdGhlbWUgY29udGV4dCBpbiB0aGUgZnV0dXJlIGFueXdheVxudHlwZW9mIEhUTUxFbGVtZW50ICE9PSAndW5kZWZpbmVkJyA/IC8qICNfX1BVUkVfXyAqL2NyZWF0ZUNhY2hlKHtcbiAga2V5OiAnY3NzJ1xufSkgOiBudWxsKTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgRW1vdGlvbkNhY2hlQ29udGV4dC5kaXNwbGF5TmFtZSA9ICdFbW90aW9uQ2FjaGVDb250ZXh0Jztcbn1cblxudmFyIENhY2hlUHJvdmlkZXIgPSBFbW90aW9uQ2FjaGVDb250ZXh0LlByb3ZpZGVyO1xudmFyIF9fdW5zYWZlX3VzZUVtb3Rpb25DYWNoZSA9IGZ1bmN0aW9uIHVzZUVtb3Rpb25DYWNoZSgpIHtcbiAgcmV0dXJuIHVzZUNvbnRleHQoRW1vdGlvbkNhY2hlQ29udGV4dCk7XG59O1xuXG52YXIgd2l0aEVtb3Rpb25DYWNoZSA9IGZ1bmN0aW9uIHdpdGhFbW90aW9uQ2FjaGUoZnVuYykge1xuICAvLyAkRmxvd0ZpeE1lXG4gIHJldHVybiAvKiNfX1BVUkVfXyovZm9yd2FyZFJlZihmdW5jdGlvbiAocHJvcHMsIHJlZikge1xuICAgIC8vIHRoZSBjYWNoZSB3aWxsIG5ldmVyIGJlIG51bGwgaW4gdGhlIGJyb3dzZXJcbiAgICB2YXIgY2FjaGUgPSB1c2VDb250ZXh0KEVtb3Rpb25DYWNoZUNvbnRleHQpO1xuICAgIHJldHVybiBmdW5jKHByb3BzLCBjYWNoZSwgcmVmKTtcbiAgfSk7XG59O1xuXG5pZiAoIWlzQnJvd3Nlcikge1xuICB3aXRoRW1vdGlvbkNhY2hlID0gZnVuY3Rpb24gd2l0aEVtb3Rpb25DYWNoZShmdW5jKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgdmFyIGNhY2hlID0gdXNlQ29udGV4dChFbW90aW9uQ2FjaGVDb250ZXh0KTtcblxuICAgICAgaWYgKGNhY2hlID09PSBudWxsKSB7XG4gICAgICAgIC8vIHllcywgd2UncmUgcG90ZW50aWFsbHkgY3JlYXRpbmcgdGhpcyBvbiBldmVyeSByZW5kZXJcbiAgICAgICAgLy8gaXQgZG9lc24ndCBhY3R1YWxseSBtYXR0ZXIgdGhvdWdoIHNpbmNlIGl0J3Mgb25seSBvbiB0aGUgc2VydmVyXG4gICAgICAgIC8vIHNvIHRoZXJlIHdpbGwgb25seSBldmVyeSBiZSBhIHNpbmdsZSByZW5kZXJcbiAgICAgICAgLy8gdGhhdCBjb3VsZCBjaGFuZ2UgaW4gdGhlIGZ1dHVyZSBiZWNhdXNlIG9mIHN1c3BlbnNlIGFuZCBldGMuIGJ1dCBmb3Igbm93LFxuICAgICAgICAvLyB0aGlzIHdvcmtzIGFuZCBpIGRvbid0IHdhbnQgdG8gb3B0aW1pc2UgZm9yIGEgZnV0dXJlIHRoaW5nIHRoYXQgd2UgYXJlbid0IHN1cmUgYWJvdXRcbiAgICAgICAgY2FjaGUgPSBjcmVhdGVDYWNoZSh7XG4gICAgICAgICAga2V5OiAnY3NzJ1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEVtb3Rpb25DYWNoZUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgICAgICB2YWx1ZTogY2FjaGVcbiAgICAgICAgfSwgZnVuYyhwcm9wcywgY2FjaGUpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmdW5jKHByb3BzLCBjYWNoZSk7XG4gICAgICB9XG4gICAgfTtcbiAgfTtcbn1cblxudmFyIFRoZW1lQ29udGV4dCA9IC8qICNfX1BVUkVfXyAqL1JlYWN0LmNyZWF0ZUNvbnRleHQoe30pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBUaGVtZUNvbnRleHQuZGlzcGxheU5hbWUgPSAnRW1vdGlvblRoZW1lQ29udGV4dCc7XG59XG5cbnZhciB1c2VUaGVtZSA9IGZ1bmN0aW9uIHVzZVRoZW1lKCkge1xuICByZXR1cm4gUmVhY3QudXNlQ29udGV4dChUaGVtZUNvbnRleHQpO1xufTtcblxudmFyIGdldFRoZW1lID0gZnVuY3Rpb24gZ2V0VGhlbWUob3V0ZXJUaGVtZSwgdGhlbWUpIHtcbiAgaWYgKHR5cGVvZiB0aGVtZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBtZXJnZWRUaGVtZSA9IHRoZW1lKG91dGVyVGhlbWUpO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgKG1lcmdlZFRoZW1lID09IG51bGwgfHwgdHlwZW9mIG1lcmdlZFRoZW1lICE9PSAnb2JqZWN0JyB8fCBBcnJheS5pc0FycmF5KG1lcmdlZFRoZW1lKSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignW1RoZW1lUHJvdmlkZXJdIFBsZWFzZSByZXR1cm4gYW4gb2JqZWN0IGZyb20geW91ciB0aGVtZSBmdW5jdGlvbiwgaS5lLiB0aGVtZT17KCkgPT4gKHt9KX0hJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lcmdlZFRoZW1lO1xuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgKHRoZW1lID09IG51bGwgfHwgdHlwZW9mIHRoZW1lICE9PSAnb2JqZWN0JyB8fCBBcnJheS5pc0FycmF5KHRoZW1lKSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1tUaGVtZVByb3ZpZGVyXSBQbGVhc2UgbWFrZSB5b3VyIHRoZW1lIHByb3AgYSBwbGFpbiBvYmplY3QnKTtcbiAgfVxuXG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgb3V0ZXJUaGVtZSwgdGhlbWUpO1xufTtcblxudmFyIGNyZWF0ZUNhY2hlV2l0aFRoZW1lID0gLyogI19fUFVSRV9fICovd2Vha01lbW9pemUoZnVuY3Rpb24gKG91dGVyVGhlbWUpIHtcbiAgcmV0dXJuIHdlYWtNZW1vaXplKGZ1bmN0aW9uICh0aGVtZSkge1xuICAgIHJldHVybiBnZXRUaGVtZShvdXRlclRoZW1lLCB0aGVtZSk7XG4gIH0pO1xufSk7XG52YXIgVGhlbWVQcm92aWRlciA9IGZ1bmN0aW9uIFRoZW1lUHJvdmlkZXIocHJvcHMpIHtcbiAgdmFyIHRoZW1lID0gUmVhY3QudXNlQ29udGV4dChUaGVtZUNvbnRleHQpO1xuXG4gIGlmIChwcm9wcy50aGVtZSAhPT0gdGhlbWUpIHtcbiAgICB0aGVtZSA9IGNyZWF0ZUNhY2hlV2l0aFRoZW1lKHRoZW1lKShwcm9wcy50aGVtZSk7XG4gIH1cblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVGhlbWVDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHRoZW1lXG4gIH0sIHByb3BzLmNoaWxkcmVuKTtcbn07XG5mdW5jdGlvbiB3aXRoVGhlbWUoQ29tcG9uZW50KSB7XG4gIHZhciBjb21wb25lbnROYW1lID0gQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lIHx8ICdDb21wb25lbnQnO1xuXG4gIHZhciByZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIocHJvcHMsIHJlZikge1xuICAgIHZhciB0aGVtZSA9IFJlYWN0LnVzZUNvbnRleHQoVGhlbWVDb250ZXh0KTtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgICB0aGVtZTogdGhlbWUsXG4gICAgICByZWY6IHJlZlxuICAgIH0sIHByb3BzKSk7XG4gIH07IC8vICRGbG93Rml4TWVcblxuXG4gIHZhciBXaXRoVGhlbWUgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihyZW5kZXIpO1xuICBXaXRoVGhlbWUuZGlzcGxheU5hbWUgPSBcIldpdGhUaGVtZShcIiArIGNvbXBvbmVudE5hbWUgKyBcIilcIjtcbiAgcmV0dXJuIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKFdpdGhUaGVtZSwgQ29tcG9uZW50KTtcbn1cblxudmFyIGdldExhc3RQYXJ0ID0gZnVuY3Rpb24gZ2V0TGFzdFBhcnQoZnVuY3Rpb25OYW1lKSB7XG4gIC8vIFRoZSBtYXRjaCBtYXkgYmUgc29tZXRoaW5nIGxpa2UgJ09iamVjdC5jcmVhdGVFbW90aW9uUHJvcHMnIG9yXG4gIC8vICdMb2FkZXIucHJvdG90eXBlLnJlbmRlcidcbiAgdmFyIHBhcnRzID0gZnVuY3Rpb25OYW1lLnNwbGl0KCcuJyk7XG4gIHJldHVybiBwYXJ0c1twYXJ0cy5sZW5ndGggLSAxXTtcbn07XG5cbnZhciBnZXRGdW5jdGlvbk5hbWVGcm9tU3RhY2tUcmFjZUxpbmUgPSBmdW5jdGlvbiBnZXRGdW5jdGlvbk5hbWVGcm9tU3RhY2tUcmFjZUxpbmUobGluZSkge1xuICAvLyBWOFxuICB2YXIgbWF0Y2ggPSAvXlxccythdFxccysoW0EtWmEtejAtOSQuXSspXFxzLy5leGVjKGxpbmUpO1xuICBpZiAobWF0Y2gpIHJldHVybiBnZXRMYXN0UGFydChtYXRjaFsxXSk7IC8vIFNhZmFyaSAvIEZpcmVmb3hcblxuICBtYXRjaCA9IC9eKFtBLVphLXowLTkkLl0rKUAvLmV4ZWMobGluZSk7XG4gIGlmIChtYXRjaCkgcmV0dXJuIGdldExhc3RQYXJ0KG1hdGNoWzFdKTtcbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn07XG5cbnZhciBpbnRlcm5hbFJlYWN0RnVuY3Rpb25OYW1lcyA9IC8qICNfX1BVUkVfXyAqL25ldyBTZXQoWydyZW5kZXJXaXRoSG9va3MnLCAncHJvY2Vzc0NoaWxkJywgJ2ZpbmlzaENsYXNzQ29tcG9uZW50JywgJ3JlbmRlclRvU3RyaW5nJ10pOyAvLyBUaGVzZSBpZGVudGlmaWVycyBjb21lIGZyb20gZXJyb3Igc3RhY2tzLCBzbyB0aGV5IGhhdmUgdG8gYmUgdmFsaWQgSlNcbi8vIGlkZW50aWZpZXJzLCB0aHVzIHdlIG9ubHkgbmVlZCB0byByZXBsYWNlIHdoYXQgaXMgYSB2YWxpZCBjaGFyYWN0ZXIgZm9yIEpTLFxuLy8gYnV0IG5vdCBmb3IgQ1NTLlxuXG52YXIgc2FuaXRpemVJZGVudGlmaWVyID0gZnVuY3Rpb24gc2FuaXRpemVJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgcmV0dXJuIGlkZW50aWZpZXIucmVwbGFjZSgvXFwkL2csICctJyk7XG59O1xuXG52YXIgZ2V0TGFiZWxGcm9tU3RhY2tUcmFjZSA9IGZ1bmN0aW9uIGdldExhYmVsRnJvbVN0YWNrVHJhY2Uoc3RhY2tUcmFjZSkge1xuICBpZiAoIXN0YWNrVHJhY2UpIHJldHVybiB1bmRlZmluZWQ7XG4gIHZhciBsaW5lcyA9IHN0YWNrVHJhY2Uuc3BsaXQoJ1xcbicpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZnVuY3Rpb25OYW1lID0gZ2V0RnVuY3Rpb25OYW1lRnJvbVN0YWNrVHJhY2VMaW5lKGxpbmVzW2ldKTsgLy8gVGhlIGZpcnN0IGxpbmUgb2YgVjggc3RhY2sgdHJhY2VzIGlzIGp1c3QgXCJFcnJvclwiXG5cbiAgICBpZiAoIWZ1bmN0aW9uTmFtZSkgY29udGludWU7IC8vIElmIHdlIHJlYWNoIG9uZSBvZiB0aGVzZSwgd2UgaGF2ZSBnb25lIHRvbyBmYXIgYW5kIHNob3VsZCBxdWl0XG5cbiAgICBpZiAoaW50ZXJuYWxSZWFjdEZ1bmN0aW9uTmFtZXMuaGFzKGZ1bmN0aW9uTmFtZSkpIGJyZWFrOyAvLyBUaGUgY29tcG9uZW50IG5hbWUgaXMgdGhlIGZpcnN0IGZ1bmN0aW9uIGluIHRoZSBzdGFjayB0aGF0IHN0YXJ0cyB3aXRoIGFuXG4gICAgLy8gdXBwZXJjYXNlIGxldHRlclxuXG4gICAgaWYgKC9eW0EtWl0vLnRlc3QoZnVuY3Rpb25OYW1lKSkgcmV0dXJuIHNhbml0aXplSWRlbnRpZmllcihmdW5jdGlvbk5hbWUpO1xuICB9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn07XG5cbnZhciB0eXBlUHJvcE5hbWUgPSAnX19FTU9USU9OX1RZUEVfUExFQVNFX0RPX05PVF9VU0VfXyc7XG52YXIgbGFiZWxQcm9wTmFtZSA9ICdfX0VNT1RJT05fTEFCRUxfUExFQVNFX0RPX05PVF9VU0VfXyc7XG52YXIgY3JlYXRlRW1vdGlvblByb3BzID0gZnVuY3Rpb24gY3JlYXRlRW1vdGlvblByb3BzKHR5cGUsIHByb3BzKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHR5cGVvZiBwcm9wcy5jc3MgPT09ICdzdHJpbmcnICYmIC8vIGNoZWNrIGlmIHRoZXJlIGlzIGEgY3NzIGRlY2xhcmF0aW9uXG4gIHByb3BzLmNzcy5pbmRleE9mKCc6JykgIT09IC0xKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiU3RyaW5ncyBhcmUgbm90IGFsbG93ZWQgYXMgY3NzIHByb3AgdmFsdWVzLCBwbGVhc2Ugd3JhcCBpdCBpbiBhIGNzcyB0ZW1wbGF0ZSBsaXRlcmFsIGZyb20gJ0BlbW90aW9uL3JlYWN0JyBsaWtlIHRoaXM6IGNzc2BcIiArIHByb3BzLmNzcyArIFwiYFwiKTtcbiAgfVxuXG4gIHZhciBuZXdQcm9wcyA9IHt9O1xuXG4gIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgIGlmIChoYXNPd24uY2FsbChwcm9wcywga2V5KSkge1xuICAgICAgbmV3UHJvcHNba2V5XSA9IHByb3BzW2tleV07XG4gICAgfVxuICB9XG5cbiAgbmV3UHJvcHNbdHlwZVByb3BOYW1lXSA9IHR5cGU7IC8vIEZvciBwZXJmb3JtYW5jZSwgb25seSBjYWxsIGdldExhYmVsRnJvbVN0YWNrVHJhY2UgaW4gZGV2ZWxvcG1lbnQgYW5kIHdoZW5cbiAgLy8gdGhlIGxhYmVsIGhhc24ndCBhbHJlYWR5IGJlZW4gY29tcHV0ZWRcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhIXByb3BzLmNzcyAmJiAodHlwZW9mIHByb3BzLmNzcyAhPT0gJ29iamVjdCcgfHwgdHlwZW9mIHByb3BzLmNzcy5uYW1lICE9PSAnc3RyaW5nJyB8fCBwcm9wcy5jc3MubmFtZS5pbmRleE9mKCctJykgPT09IC0xKSkge1xuICAgIHZhciBsYWJlbCA9IGdldExhYmVsRnJvbVN0YWNrVHJhY2UobmV3IEVycm9yKCkuc3RhY2spO1xuICAgIGlmIChsYWJlbCkgbmV3UHJvcHNbbGFiZWxQcm9wTmFtZV0gPSBsYWJlbDtcbiAgfVxuXG4gIHJldHVybiBuZXdQcm9wcztcbn07XG5cbnZhciBJbnNlcnRpb24gPSBmdW5jdGlvbiBJbnNlcnRpb24oX3JlZikge1xuICB2YXIgY2FjaGUgPSBfcmVmLmNhY2hlLFxuICAgICAgc2VyaWFsaXplZCA9IF9yZWYuc2VyaWFsaXplZCxcbiAgICAgIGlzU3RyaW5nVGFnID0gX3JlZi5pc1N0cmluZ1RhZztcbiAgcmVnaXN0ZXJTdHlsZXMoY2FjaGUsIHNlcmlhbGl6ZWQsIGlzU3RyaW5nVGFnKTtcbiAgdXNlSW5zZXJ0aW9uRWZmZWN0QWx3YXlzV2l0aFN5bmNGYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGluc2VydFN0eWxlcyhjYWNoZSwgc2VyaWFsaXplZCwgaXNTdHJpbmdUYWcpO1xuICB9KTtcblxuICByZXR1cm4gbnVsbDtcbn07XG5cbnZhciBFbW90aW9uID0gLyogI19fUFVSRV9fICovd2l0aEVtb3Rpb25DYWNoZShmdW5jdGlvbiAocHJvcHMsIGNhY2hlLCByZWYpIHtcbiAgdmFyIGNzc1Byb3AgPSBwcm9wcy5jc3M7IC8vIHNvIHRoYXQgdXNpbmcgYGNzc2AgZnJvbSBgZW1vdGlvbmAgYW5kIHBhc3NpbmcgdGhlIHJlc3VsdCB0byB0aGUgY3NzIHByb3Agd29ya3NcbiAgLy8gbm90IHBhc3NpbmcgdGhlIHJlZ2lzdGVyZWQgY2FjaGUgdG8gc2VyaWFsaXplU3R5bGVzIGJlY2F1c2UgaXQgd291bGRcbiAgLy8gbWFrZSBjZXJ0YWluIGJhYmVsIG9wdGltaXNhdGlvbnMgbm90IHBvc3NpYmxlXG5cbiAgaWYgKHR5cGVvZiBjc3NQcm9wID09PSAnc3RyaW5nJyAmJiBjYWNoZS5yZWdpc3RlcmVkW2Nzc1Byb3BdICE9PSB1bmRlZmluZWQpIHtcbiAgICBjc3NQcm9wID0gY2FjaGUucmVnaXN0ZXJlZFtjc3NQcm9wXTtcbiAgfVxuXG4gIHZhciBXcmFwcGVkQ29tcG9uZW50ID0gcHJvcHNbdHlwZVByb3BOYW1lXTtcbiAgdmFyIHJlZ2lzdGVyZWRTdHlsZXMgPSBbY3NzUHJvcF07XG4gIHZhciBjbGFzc05hbWUgPSAnJztcblxuICBpZiAodHlwZW9mIHByb3BzLmNsYXNzTmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICBjbGFzc05hbWUgPSBnZXRSZWdpc3RlcmVkU3R5bGVzKGNhY2hlLnJlZ2lzdGVyZWQsIHJlZ2lzdGVyZWRTdHlsZXMsIHByb3BzLmNsYXNzTmFtZSk7XG4gIH0gZWxzZSBpZiAocHJvcHMuY2xhc3NOYW1lICE9IG51bGwpIHtcbiAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUgKyBcIiBcIjtcbiAgfVxuXG4gIHZhciBzZXJpYWxpemVkID0gc2VyaWFsaXplU3R5bGVzKHJlZ2lzdGVyZWRTdHlsZXMsIHVuZGVmaW5lZCwgUmVhY3QudXNlQ29udGV4dChUaGVtZUNvbnRleHQpKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBzZXJpYWxpemVkLm5hbWUuaW5kZXhPZignLScpID09PSAtMSkge1xuICAgIHZhciBsYWJlbEZyb21TdGFjayA9IHByb3BzW2xhYmVsUHJvcE5hbWVdO1xuXG4gICAgaWYgKGxhYmVsRnJvbVN0YWNrKSB7XG4gICAgICBzZXJpYWxpemVkID0gc2VyaWFsaXplU3R5bGVzKFtzZXJpYWxpemVkLCAnbGFiZWw6JyArIGxhYmVsRnJvbVN0YWNrICsgJzsnXSk7XG4gICAgfVxuICB9XG5cbiAgY2xhc3NOYW1lICs9IGNhY2hlLmtleSArIFwiLVwiICsgc2VyaWFsaXplZC5uYW1lO1xuICB2YXIgbmV3UHJvcHMgPSB7fTtcblxuICBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHtcbiAgICBpZiAoaGFzT3duLmNhbGwocHJvcHMsIGtleSkgJiYga2V5ICE9PSAnY3NzJyAmJiBrZXkgIT09IHR5cGVQcm9wTmFtZSAmJiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJyB8fCBrZXkgIT09IGxhYmVsUHJvcE5hbWUpKSB7XG4gICAgICBuZXdQcm9wc1trZXldID0gcHJvcHNba2V5XTtcbiAgICB9XG4gIH1cblxuICBuZXdQcm9wcy5yZWYgPSByZWY7XG4gIG5ld1Byb3BzLmNsYXNzTmFtZSA9IGNsYXNzTmFtZTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChJbnNlcnRpb24sIHtcbiAgICBjYWNoZTogY2FjaGUsXG4gICAgc2VyaWFsaXplZDogc2VyaWFsaXplZCxcbiAgICBpc1N0cmluZ1RhZzogdHlwZW9mIFdyYXBwZWRDb21wb25lbnQgPT09ICdzdHJpbmcnXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChXcmFwcGVkQ29tcG9uZW50LCBuZXdQcm9wcykpO1xufSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIEVtb3Rpb24uZGlzcGxheU5hbWUgPSAnRW1vdGlvbkNzc1Byb3BJbnRlcm5hbCc7XG59XG5cbnZhciBFbW90aW9uJDEgPSBFbW90aW9uO1xuXG5leHBvcnQgeyBDYWNoZVByb3ZpZGVyIGFzIEMsIEVtb3Rpb24kMSBhcyBFLCBUaGVtZUNvbnRleHQgYXMgVCwgX191bnNhZmVfdXNlRW1vdGlvbkNhY2hlIGFzIF8sIFRoZW1lUHJvdmlkZXIgYXMgYSwgd2l0aFRoZW1lIGFzIGIsIGNyZWF0ZUVtb3Rpb25Qcm9wcyBhcyBjLCBoYXNPd24gYXMgaCwgaXNCcm93c2VyIGFzIGksIHVzZVRoZW1lIGFzIHUsIHdpdGhFbW90aW9uQ2FjaGUgYXMgdyB9O1xuIiwiZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIHJldHVybiAobW9kdWxlLmV4cG9ydHMgPSBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gPyBPYmplY3QuYXNzaWduLmJpbmQoKSA6IGZ1bmN0aW9uIChuKSB7XG4gICAgZm9yICh2YXIgZSA9IDE7IGUgPCBhcmd1bWVudHMubGVuZ3RoOyBlKyspIHtcbiAgICAgIHZhciB0ID0gYXJndW1lbnRzW2VdO1xuICAgICAgZm9yICh2YXIgciBpbiB0KSAoe30pLmhhc093blByb3BlcnR5LmNhbGwodCwgcikgJiYgKG5bcl0gPSB0W3JdKTtcbiAgICB9XG4gICAgcmV0dXJuIG47XG4gIH0sIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0cyksIF9leHRlbmRzLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IF9leHRlbmRzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7IiwiaW1wb3J0IHsgaCBhcyBoYXNPd24sIEUgYXMgRW1vdGlvbiwgYyBhcyBjcmVhdGVFbW90aW9uUHJvcHMsIHcgYXMgd2l0aEVtb3Rpb25DYWNoZSwgVCBhcyBUaGVtZUNvbnRleHQsIGkgYXMgaXNCcm93c2VyJDEgfSBmcm9tICcuL2Vtb3Rpb24tZWxlbWVudC00M2M2ZmVhMC5icm93c2VyLmVzbS5qcyc7XG5leHBvcnQgeyBDIGFzIENhY2hlUHJvdmlkZXIsIFQgYXMgVGhlbWVDb250ZXh0LCBhIGFzIFRoZW1lUHJvdmlkZXIsIF8gYXMgX191bnNhZmVfdXNlRW1vdGlvbkNhY2hlLCB1IGFzIHVzZVRoZW1lLCB3IGFzIHdpdGhFbW90aW9uQ2FjaGUsIGIgYXMgd2l0aFRoZW1lIH0gZnJvbSAnLi9lbW90aW9uLWVsZW1lbnQtNDNjNmZlYTAuYnJvd3Nlci5lc20uanMnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgaW5zZXJ0U3R5bGVzLCByZWdpc3RlclN0eWxlcywgZ2V0UmVnaXN0ZXJlZFN0eWxlcyB9IGZyb20gJ0BlbW90aW9uL3V0aWxzJztcbmltcG9ydCB7IHVzZUluc2VydGlvbkVmZmVjdFdpdGhMYXlvdXRGYWxsYmFjaywgdXNlSW5zZXJ0aW9uRWZmZWN0QWx3YXlzV2l0aFN5bmNGYWxsYmFjayB9IGZyb20gJ0BlbW90aW9uL3VzZS1pbnNlcnRpb24tZWZmZWN0LXdpdGgtZmFsbGJhY2tzJztcbmltcG9ydCB7IHNlcmlhbGl6ZVN0eWxlcyB9IGZyb20gJ0BlbW90aW9uL3NlcmlhbGl6ZSc7XG5pbXBvcnQgJ0BlbW90aW9uL2NhY2hlJztcbmltcG9ydCAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCAnQGVtb3Rpb24vd2Vhay1tZW1vaXplJztcbmltcG9ydCAnLi4vX2lzb2xhdGVkLWhucnMvZGlzdC9lbW90aW9uLXJlYWN0LV9pc29sYXRlZC1obnJzLmJyb3dzZXIuZXNtLmpzJztcbmltcG9ydCAnaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MnO1xuXG52YXIgcGtnID0ge1xuXHRuYW1lOiBcIkBlbW90aW9uL3JlYWN0XCIsXG5cdHZlcnNpb246IFwiMTEuMTEuNFwiLFxuXHRtYWluOiBcImRpc3QvZW1vdGlvbi1yZWFjdC5janMuanNcIixcblx0bW9kdWxlOiBcImRpc3QvZW1vdGlvbi1yZWFjdC5lc20uanNcIixcblx0YnJvd3Nlcjoge1xuXHRcdFwiLi9kaXN0L2Vtb3Rpb24tcmVhY3QuZXNtLmpzXCI6IFwiLi9kaXN0L2Vtb3Rpb24tcmVhY3QuYnJvd3Nlci5lc20uanNcIlxuXHR9LFxuXHRleHBvcnRzOiB7XG5cdFx0XCIuXCI6IHtcblx0XHRcdG1vZHVsZToge1xuXHRcdFx0XHR3b3JrZXI6IFwiLi9kaXN0L2Vtb3Rpb24tcmVhY3Qud29ya2VyLmVzbS5qc1wiLFxuXHRcdFx0XHRicm93c2VyOiBcIi4vZGlzdC9lbW90aW9uLXJlYWN0LmJyb3dzZXIuZXNtLmpzXCIsXG5cdFx0XHRcdFwiZGVmYXVsdFwiOiBcIi4vZGlzdC9lbW90aW9uLXJlYWN0LmVzbS5qc1wiXG5cdFx0XHR9LFxuXHRcdFx0XCJpbXBvcnRcIjogXCIuL2Rpc3QvZW1vdGlvbi1yZWFjdC5janMubWpzXCIsXG5cdFx0XHRcImRlZmF1bHRcIjogXCIuL2Rpc3QvZW1vdGlvbi1yZWFjdC5janMuanNcIlxuXHRcdH0sXG5cdFx0XCIuL2pzeC1ydW50aW1lXCI6IHtcblx0XHRcdG1vZHVsZToge1xuXHRcdFx0XHR3b3JrZXI6IFwiLi9qc3gtcnVudGltZS9kaXN0L2Vtb3Rpb24tcmVhY3QtanN4LXJ1bnRpbWUud29ya2VyLmVzbS5qc1wiLFxuXHRcdFx0XHRicm93c2VyOiBcIi4vanN4LXJ1bnRpbWUvZGlzdC9lbW90aW9uLXJlYWN0LWpzeC1ydW50aW1lLmJyb3dzZXIuZXNtLmpzXCIsXG5cdFx0XHRcdFwiZGVmYXVsdFwiOiBcIi4vanN4LXJ1bnRpbWUvZGlzdC9lbW90aW9uLXJlYWN0LWpzeC1ydW50aW1lLmVzbS5qc1wiXG5cdFx0XHR9LFxuXHRcdFx0XCJpbXBvcnRcIjogXCIuL2pzeC1ydW50aW1lL2Rpc3QvZW1vdGlvbi1yZWFjdC1qc3gtcnVudGltZS5janMubWpzXCIsXG5cdFx0XHRcImRlZmF1bHRcIjogXCIuL2pzeC1ydW50aW1lL2Rpc3QvZW1vdGlvbi1yZWFjdC1qc3gtcnVudGltZS5janMuanNcIlxuXHRcdH0sXG5cdFx0XCIuL19pc29sYXRlZC1obnJzXCI6IHtcblx0XHRcdG1vZHVsZToge1xuXHRcdFx0XHR3b3JrZXI6IFwiLi9faXNvbGF0ZWQtaG5ycy9kaXN0L2Vtb3Rpb24tcmVhY3QtX2lzb2xhdGVkLWhucnMud29ya2VyLmVzbS5qc1wiLFxuXHRcdFx0XHRicm93c2VyOiBcIi4vX2lzb2xhdGVkLWhucnMvZGlzdC9lbW90aW9uLXJlYWN0LV9pc29sYXRlZC1obnJzLmJyb3dzZXIuZXNtLmpzXCIsXG5cdFx0XHRcdFwiZGVmYXVsdFwiOiBcIi4vX2lzb2xhdGVkLWhucnMvZGlzdC9lbW90aW9uLXJlYWN0LV9pc29sYXRlZC1obnJzLmVzbS5qc1wiXG5cdFx0XHR9LFxuXHRcdFx0XCJpbXBvcnRcIjogXCIuL19pc29sYXRlZC1obnJzL2Rpc3QvZW1vdGlvbi1yZWFjdC1faXNvbGF0ZWQtaG5ycy5janMubWpzXCIsXG5cdFx0XHRcImRlZmF1bHRcIjogXCIuL19pc29sYXRlZC1obnJzL2Rpc3QvZW1vdGlvbi1yZWFjdC1faXNvbGF0ZWQtaG5ycy5janMuanNcIlxuXHRcdH0sXG5cdFx0XCIuL2pzeC1kZXYtcnVudGltZVwiOiB7XG5cdFx0XHRtb2R1bGU6IHtcblx0XHRcdFx0d29ya2VyOiBcIi4vanN4LWRldi1ydW50aW1lL2Rpc3QvZW1vdGlvbi1yZWFjdC1qc3gtZGV2LXJ1bnRpbWUud29ya2VyLmVzbS5qc1wiLFxuXHRcdFx0XHRicm93c2VyOiBcIi4vanN4LWRldi1ydW50aW1lL2Rpc3QvZW1vdGlvbi1yZWFjdC1qc3gtZGV2LXJ1bnRpbWUuYnJvd3Nlci5lc20uanNcIixcblx0XHRcdFx0XCJkZWZhdWx0XCI6IFwiLi9qc3gtZGV2LXJ1bnRpbWUvZGlzdC9lbW90aW9uLXJlYWN0LWpzeC1kZXYtcnVudGltZS5lc20uanNcIlxuXHRcdFx0fSxcblx0XHRcdFwiaW1wb3J0XCI6IFwiLi9qc3gtZGV2LXJ1bnRpbWUvZGlzdC9lbW90aW9uLXJlYWN0LWpzeC1kZXYtcnVudGltZS5janMubWpzXCIsXG5cdFx0XHRcImRlZmF1bHRcIjogXCIuL2pzeC1kZXYtcnVudGltZS9kaXN0L2Vtb3Rpb24tcmVhY3QtanN4LWRldi1ydW50aW1lLmNqcy5qc1wiXG5cdFx0fSxcblx0XHRcIi4vcGFja2FnZS5qc29uXCI6IFwiLi9wYWNrYWdlLmpzb25cIixcblx0XHRcIi4vdHlwZXMvY3NzLXByb3BcIjogXCIuL3R5cGVzL2Nzcy1wcm9wLmQudHNcIixcblx0XHRcIi4vbWFjcm9cIjoge1xuXHRcdFx0dHlwZXM6IHtcblx0XHRcdFx0XCJpbXBvcnRcIjogXCIuL21hY3JvLmQubXRzXCIsXG5cdFx0XHRcdFwiZGVmYXVsdFwiOiBcIi4vbWFjcm8uZC50c1wiXG5cdFx0XHR9LFxuXHRcdFx0XCJkZWZhdWx0XCI6IFwiLi9tYWNyby5qc1wiXG5cdFx0fVxuXHR9LFxuXHR0eXBlczogXCJ0eXBlcy9pbmRleC5kLnRzXCIsXG5cdGZpbGVzOiBbXG5cdFx0XCJzcmNcIixcblx0XHRcImRpc3RcIixcblx0XHRcImpzeC1ydW50aW1lXCIsXG5cdFx0XCJqc3gtZGV2LXJ1bnRpbWVcIixcblx0XHRcIl9pc29sYXRlZC1obnJzXCIsXG5cdFx0XCJ0eXBlcy8qLmQudHNcIixcblx0XHRcIm1hY3JvLipcIlxuXHRdLFxuXHRzaWRlRWZmZWN0czogZmFsc2UsXG5cdGF1dGhvcjogXCJFbW90aW9uIENvbnRyaWJ1dG9yc1wiLFxuXHRsaWNlbnNlOiBcIk1JVFwiLFxuXHRzY3JpcHRzOiB7XG5cdFx0XCJ0ZXN0OnR5cGVzY3JpcHRcIjogXCJkdHNsaW50IHR5cGVzXCJcblx0fSxcblx0ZGVwZW5kZW5jaWVzOiB7XG5cdFx0XCJAYmFiZWwvcnVudGltZVwiOiBcIl43LjE4LjNcIixcblx0XHRcIkBlbW90aW9uL2JhYmVsLXBsdWdpblwiOiBcIl4xMS4xMS4wXCIsXG5cdFx0XCJAZW1vdGlvbi9jYWNoZVwiOiBcIl4xMS4xMS4wXCIsXG5cdFx0XCJAZW1vdGlvbi9zZXJpYWxpemVcIjogXCJeMS4xLjNcIixcblx0XHRcIkBlbW90aW9uL3VzZS1pbnNlcnRpb24tZWZmZWN0LXdpdGgtZmFsbGJhY2tzXCI6IFwiXjEuMC4xXCIsXG5cdFx0XCJAZW1vdGlvbi91dGlsc1wiOiBcIl4xLjIuMVwiLFxuXHRcdFwiQGVtb3Rpb24vd2Vhay1tZW1vaXplXCI6IFwiXjAuMy4xXCIsXG5cdFx0XCJob2lzdC1ub24tcmVhY3Qtc3RhdGljc1wiOiBcIl4zLjMuMVwiXG5cdH0sXG5cdHBlZXJEZXBlbmRlbmNpZXM6IHtcblx0XHRyZWFjdDogXCI+PTE2LjguMFwiXG5cdH0sXG5cdHBlZXJEZXBlbmRlbmNpZXNNZXRhOiB7XG5cdFx0XCJAdHlwZXMvcmVhY3RcIjoge1xuXHRcdFx0b3B0aW9uYWw6IHRydWVcblx0XHR9XG5cdH0sXG5cdGRldkRlcGVuZGVuY2llczoge1xuXHRcdFwiQGRlZmluaXRlbHl0eXBlZC9kdHNsaW50XCI6IFwiMC4wLjExMlwiLFxuXHRcdFwiQGVtb3Rpb24vY3NzXCI6IFwiMTEuMTEuMlwiLFxuXHRcdFwiQGVtb3Rpb24vY3NzLXByZXR0aWZpZXJcIjogXCIxLjEuM1wiLFxuXHRcdFwiQGVtb3Rpb24vc2VydmVyXCI6IFwiMTEuMTEuMFwiLFxuXHRcdFwiQGVtb3Rpb24vc3R5bGVkXCI6IFwiMTEuMTEuMFwiLFxuXHRcdFwiaHRtbC10YWctbmFtZXNcIjogXCJeMS4xLjJcIixcblx0XHRyZWFjdDogXCIxNi4xNC4wXCIsXG5cdFx0XCJzdmctdGFnLW5hbWVzXCI6IFwiXjEuMS4xXCIsXG5cdFx0dHlwZXNjcmlwdDogXCJeNC41LjVcIlxuXHR9LFxuXHRyZXBvc2l0b3J5OiBcImh0dHBzOi8vZ2l0aHViLmNvbS9lbW90aW9uLWpzL2Vtb3Rpb24vdHJlZS9tYWluL3BhY2thZ2VzL3JlYWN0XCIsXG5cdHB1Ymxpc2hDb25maWc6IHtcblx0XHRhY2Nlc3M6IFwicHVibGljXCJcblx0fSxcblx0XCJ1bWQ6bWFpblwiOiBcImRpc3QvZW1vdGlvbi1yZWFjdC51bWQubWluLmpzXCIsXG5cdHByZWNvbnN0cnVjdDoge1xuXHRcdGVudHJ5cG9pbnRzOiBbXG5cdFx0XHRcIi4vaW5kZXguanNcIixcblx0XHRcdFwiLi9qc3gtcnVudGltZS5qc1wiLFxuXHRcdFx0XCIuL2pzeC1kZXYtcnVudGltZS5qc1wiLFxuXHRcdFx0XCIuL19pc29sYXRlZC1obnJzLmpzXCJcblx0XHRdLFxuXHRcdHVtZE5hbWU6IFwiZW1vdGlvblJlYWN0XCIsXG5cdFx0ZXhwb3J0czoge1xuXHRcdFx0ZW52Q29uZGl0aW9uczogW1xuXHRcdFx0XHRcImJyb3dzZXJcIixcblx0XHRcdFx0XCJ3b3JrZXJcIlxuXHRcdFx0XSxcblx0XHRcdGV4dHJhOiB7XG5cdFx0XHRcdFwiLi90eXBlcy9jc3MtcHJvcFwiOiBcIi4vdHlwZXMvY3NzLXByb3AuZC50c1wiLFxuXHRcdFx0XHRcIi4vbWFjcm9cIjoge1xuXHRcdFx0XHRcdHR5cGVzOiB7XG5cdFx0XHRcdFx0XHRcImltcG9ydFwiOiBcIi4vbWFjcm8uZC5tdHNcIixcblx0XHRcdFx0XHRcdFwiZGVmYXVsdFwiOiBcIi4vbWFjcm8uZC50c1wiXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcImRlZmF1bHRcIjogXCIuL21hY3JvLmpzXCJcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxudmFyIGpzeCA9IGZ1bmN0aW9uIGpzeCh0eXBlLCBwcm9wcykge1xuICB2YXIgYXJncyA9IGFyZ3VtZW50cztcblxuICBpZiAocHJvcHMgPT0gbnVsbCB8fCAhaGFzT3duLmNhbGwocHJvcHMsICdjc3MnKSkge1xuICAgIC8vICRGbG93Rml4TWVcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudC5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICB9XG5cbiAgdmFyIGFyZ3NMZW5ndGggPSBhcmdzLmxlbmd0aDtcbiAgdmFyIGNyZWF0ZUVsZW1lbnRBcmdBcnJheSA9IG5ldyBBcnJheShhcmdzTGVuZ3RoKTtcbiAgY3JlYXRlRWxlbWVudEFyZ0FycmF5WzBdID0gRW1vdGlvbjtcbiAgY3JlYXRlRWxlbWVudEFyZ0FycmF5WzFdID0gY3JlYXRlRW1vdGlvblByb3BzKHR5cGUsIHByb3BzKTtcblxuICBmb3IgKHZhciBpID0gMjsgaSA8IGFyZ3NMZW5ndGg7IGkrKykge1xuICAgIGNyZWF0ZUVsZW1lbnRBcmdBcnJheVtpXSA9IGFyZ3NbaV07XG4gIH0gLy8gJEZsb3dGaXhNZVxuXG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQuYXBwbHkobnVsbCwgY3JlYXRlRWxlbWVudEFyZ0FycmF5KTtcbn07XG5cbnZhciB3YXJuZWRBYm91dENzc1Byb3BGb3JHbG9iYWwgPSBmYWxzZTsgLy8gbWFpbnRhaW4gcGxhY2Ugb3ZlciByZXJlbmRlcnMuXG4vLyBpbml0aWFsIHJlbmRlciBmcm9tIGJyb3dzZXIsIGluc2VydEJlZm9yZSBjb250ZXh0LnNoZWV0LnRhZ3NbMF0gb3IgaWYgYSBzdHlsZSBoYXNuJ3QgYmVlbiBpbnNlcnRlZCB0aGVyZSB5ZXQsIGFwcGVuZENoaWxkXG4vLyBpbml0aWFsIGNsaWVudC1zaWRlIHJlbmRlciBmcm9tIFNTUiwgdXNlIHBsYWNlIG9mIGh5ZHJhdGluZyB0YWdcblxudmFyIEdsb2JhbCA9IC8qICNfX1BVUkVfXyAqL3dpdGhFbW90aW9uQ2FjaGUoZnVuY3Rpb24gKHByb3BzLCBjYWNoZSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhd2FybmVkQWJvdXRDc3NQcm9wRm9yR2xvYmFsICYmICggLy8gY2hlY2sgZm9yIGNsYXNzTmFtZSBhcyB3ZWxsIHNpbmNlIHRoZSB1c2VyIGlzXG4gIC8vIHByb2JhYmx5IHVzaW5nIHRoZSBjdXN0b20gY3JlYXRlRWxlbWVudCB3aGljaFxuICAvLyBtZWFucyBpdCB3aWxsIGJlIHR1cm5lZCBpbnRvIGEgY2xhc3NOYW1lIHByb3BcbiAgLy8gJEZsb3dGaXhNZSBJIGRvbid0IHJlYWxseSB3YW50IHRvIGFkZCBpdCB0byB0aGUgdHlwZSBzaW5jZSBpdCBzaG91bGRuJ3QgYmUgdXNlZFxuICBwcm9wcy5jbGFzc05hbWUgfHwgcHJvcHMuY3NzKSkge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJJdCBsb29rcyBsaWtlIHlvdSdyZSB1c2luZyB0aGUgY3NzIHByb3Agb24gR2xvYmFsLCBkaWQgeW91IG1lYW4gdG8gdXNlIHRoZSBzdHlsZXMgcHJvcCBpbnN0ZWFkP1wiKTtcbiAgICB3YXJuZWRBYm91dENzc1Byb3BGb3JHbG9iYWwgPSB0cnVlO1xuICB9XG5cbiAgdmFyIHN0eWxlcyA9IHByb3BzLnN0eWxlcztcbiAgdmFyIHNlcmlhbGl6ZWQgPSBzZXJpYWxpemVTdHlsZXMoW3N0eWxlc10sIHVuZGVmaW5lZCwgUmVhY3QudXNlQ29udGV4dChUaGVtZUNvbnRleHQpKTtcblxuICBpZiAoIWlzQnJvd3NlciQxKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICB2YXIgc2VyaWFsaXplZE5hbWVzID0gc2VyaWFsaXplZC5uYW1lO1xuICAgIHZhciBzZXJpYWxpemVkU3R5bGVzID0gc2VyaWFsaXplZC5zdHlsZXM7XG4gICAgdmFyIG5leHQgPSBzZXJpYWxpemVkLm5leHQ7XG5cbiAgICB3aGlsZSAobmV4dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBzZXJpYWxpemVkTmFtZXMgKz0gJyAnICsgbmV4dC5uYW1lO1xuICAgICAgc2VyaWFsaXplZFN0eWxlcyArPSBuZXh0LnN0eWxlcztcbiAgICAgIG5leHQgPSBuZXh0Lm5leHQ7XG4gICAgfVxuXG4gICAgdmFyIHNob3VsZENhY2hlID0gY2FjaGUuY29tcGF0ID09PSB0cnVlO1xuICAgIHZhciBydWxlcyA9IGNhY2hlLmluc2VydChcIlwiLCB7XG4gICAgICBuYW1lOiBzZXJpYWxpemVkTmFtZXMsXG4gICAgICBzdHlsZXM6IHNlcmlhbGl6ZWRTdHlsZXNcbiAgICB9LCBjYWNoZS5zaGVldCwgc2hvdWxkQ2FjaGUpO1xuXG4gICAgaWYgKHNob3VsZENhY2hlKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiLCAoX3JlZiA9IHt9LCBfcmVmW1wiZGF0YS1lbW90aW9uXCJdID0gY2FjaGUua2V5ICsgXCItZ2xvYmFsIFwiICsgc2VyaWFsaXplZE5hbWVzLCBfcmVmLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MID0ge1xuICAgICAgX19odG1sOiBydWxlc1xuICAgIH0sIF9yZWYubm9uY2UgPSBjYWNoZS5zaGVldC5ub25jZSwgX3JlZikpO1xuICB9IC8vIHllcywgaSBrbm93IHRoZXNlIGhvb2tzIGFyZSB1c2VkIGNvbmRpdGlvbmFsbHlcbiAgLy8gYnV0IGl0IGlzIGJhc2VkIG9uIGEgY29uc3RhbnQgdGhhdCB3aWxsIG5ldmVyIGNoYW5nZSBhdCBydW50aW1lXG4gIC8vIGl0J3MgZWZmZWN0aXZlbHkgbGlrZSBoYXZpbmcgdHdvIGltcGxlbWVudGF0aW9ucyBhbmQgc3dpdGNoaW5nIHRoZW0gb3V0XG4gIC8vIHNvIGl0J3Mgbm90IGFjdHVhbGx5IGJyZWFraW5nIGFueXRoaW5nXG5cblxuICB2YXIgc2hlZXRSZWYgPSBSZWFjdC51c2VSZWYoKTtcbiAgdXNlSW5zZXJ0aW9uRWZmZWN0V2l0aExheW91dEZhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIga2V5ID0gY2FjaGUua2V5ICsgXCItZ2xvYmFsXCI7IC8vIHVzZSBjYXNlIG9mIGh0dHBzOi8vZ2l0aHViLmNvbS9lbW90aW9uLWpzL2Vtb3Rpb24vaXNzdWVzLzI2NzVcblxuICAgIHZhciBzaGVldCA9IG5ldyBjYWNoZS5zaGVldC5jb25zdHJ1Y3Rvcih7XG4gICAgICBrZXk6IGtleSxcbiAgICAgIG5vbmNlOiBjYWNoZS5zaGVldC5ub25jZSxcbiAgICAgIGNvbnRhaW5lcjogY2FjaGUuc2hlZXQuY29udGFpbmVyLFxuICAgICAgc3BlZWR5OiBjYWNoZS5zaGVldC5pc1NwZWVkeVxuICAgIH0pO1xuICAgIHZhciByZWh5ZHJhdGluZyA9IGZhbHNlOyAvLyAkRmxvd0ZpeE1lXG5cbiAgICB2YXIgbm9kZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJzdHlsZVtkYXRhLWVtb3Rpb249XFxcIlwiICsga2V5ICsgXCIgXCIgKyBzZXJpYWxpemVkLm5hbWUgKyBcIlxcXCJdXCIpO1xuXG4gICAgaWYgKGNhY2hlLnNoZWV0LnRhZ3MubGVuZ3RoKSB7XG4gICAgICBzaGVldC5iZWZvcmUgPSBjYWNoZS5zaGVldC50YWdzWzBdO1xuICAgIH1cblxuICAgIGlmIChub2RlICE9PSBudWxsKSB7XG4gICAgICByZWh5ZHJhdGluZyA9IHRydWU7IC8vIGNsZWFyIHRoZSBoYXNoIHNvIHRoaXMgbm9kZSB3b24ndCBiZSByZWNvZ25pemFibGUgYXMgcmVoeWRyYXRhYmxlIGJ5IG90aGVyIDxHbG9iYWwvPnNcblxuICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtZW1vdGlvbicsIGtleSk7XG4gICAgICBzaGVldC5oeWRyYXRlKFtub2RlXSk7XG4gICAgfVxuXG4gICAgc2hlZXRSZWYuY3VycmVudCA9IFtzaGVldCwgcmVoeWRyYXRpbmddO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBzaGVldC5mbHVzaCgpO1xuICAgIH07XG4gIH0sIFtjYWNoZV0pO1xuICB1c2VJbnNlcnRpb25FZmZlY3RXaXRoTGF5b3V0RmFsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIHZhciBzaGVldFJlZkN1cnJlbnQgPSBzaGVldFJlZi5jdXJyZW50O1xuICAgIHZhciBzaGVldCA9IHNoZWV0UmVmQ3VycmVudFswXSxcbiAgICAgICAgcmVoeWRyYXRpbmcgPSBzaGVldFJlZkN1cnJlbnRbMV07XG5cbiAgICBpZiAocmVoeWRyYXRpbmcpIHtcbiAgICAgIHNoZWV0UmVmQ3VycmVudFsxXSA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChzZXJpYWxpemVkLm5leHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gaW5zZXJ0IGtleWZyYW1lc1xuICAgICAgaW5zZXJ0U3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkLm5leHQsIHRydWUpO1xuICAgIH1cblxuICAgIGlmIChzaGVldC50YWdzLmxlbmd0aCkge1xuICAgICAgLy8gaWYgdGhpcyBkb2Vzbid0IGV4aXN0IHRoZW4gaXQgd2lsbCBiZSBudWxsIHNvIHRoZSBzdHlsZSBlbGVtZW50IHdpbGwgYmUgYXBwZW5kZWRcbiAgICAgIHZhciBlbGVtZW50ID0gc2hlZXQudGFnc1tzaGVldC50YWdzLmxlbmd0aCAtIDFdLm5leHRFbGVtZW50U2libGluZztcbiAgICAgIHNoZWV0LmJlZm9yZSA9IGVsZW1lbnQ7XG4gICAgICBzaGVldC5mbHVzaCgpO1xuICAgIH1cblxuICAgIGNhY2hlLmluc2VydChcIlwiLCBzZXJpYWxpemVkLCBzaGVldCwgZmFsc2UpO1xuICB9LCBbY2FjaGUsIHNlcmlhbGl6ZWQubmFtZV0pO1xuICByZXR1cm4gbnVsbDtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBHbG9iYWwuZGlzcGxheU5hbWUgPSAnRW1vdGlvbkdsb2JhbCc7XG59XG5cbmZ1bmN0aW9uIGNzcygpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBzZXJpYWxpemVTdHlsZXMoYXJncyk7XG59XG5cbnZhciBrZXlmcmFtZXMgPSBmdW5jdGlvbiBrZXlmcmFtZXMoKSB7XG4gIHZhciBpbnNlcnRhYmxlID0gY3NzLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgdmFyIG5hbWUgPSBcImFuaW1hdGlvbi1cIiArIGluc2VydGFibGUubmFtZTsgLy8gJEZsb3dGaXhNZVxuXG4gIHJldHVybiB7XG4gICAgbmFtZTogbmFtZSxcbiAgICBzdHlsZXM6IFwiQGtleWZyYW1lcyBcIiArIG5hbWUgKyBcIntcIiArIGluc2VydGFibGUuc3R5bGVzICsgXCJ9XCIsXG4gICAgYW5pbTogMSxcbiAgICB0b1N0cmluZzogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICByZXR1cm4gXCJfRU1PX1wiICsgdGhpcy5uYW1lICsgXCJfXCIgKyB0aGlzLnN0eWxlcyArIFwiX0VNT19cIjtcbiAgICB9XG4gIH07XG59O1xuXG52YXIgY2xhc3NuYW1lcyA9IGZ1bmN0aW9uIGNsYXNzbmFtZXMoYXJncykge1xuICB2YXIgbGVuID0gYXJncy5sZW5ndGg7XG4gIHZhciBpID0gMDtcbiAgdmFyIGNscyA9ICcnO1xuXG4gIGZvciAoOyBpIDwgbGVuOyBpKyspIHtcbiAgICB2YXIgYXJnID0gYXJnc1tpXTtcbiAgICBpZiAoYXJnID09IG51bGwpIGNvbnRpbnVlO1xuICAgIHZhciB0b0FkZCA9IHZvaWQgMDtcblxuICAgIHN3aXRjaCAodHlwZW9mIGFyZykge1xuICAgICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdvYmplY3QnOlxuICAgICAgICB7XG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSkge1xuICAgICAgICAgICAgdG9BZGQgPSBjbGFzc25hbWVzKGFyZyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGFyZy5zdHlsZXMgIT09IHVuZGVmaW5lZCAmJiBhcmcubmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1lvdSBoYXZlIHBhc3NlZCBzdHlsZXMgY3JlYXRlZCB3aXRoIGBjc3NgIGZyb20gYEBlbW90aW9uL3JlYWN0YCBwYWNrYWdlIHRvIHRoZSBgY3hgLlxcbicgKyAnYGN4YCBpcyBtZWFudCB0byBjb21wb3NlIGNsYXNzIG5hbWVzIChzdHJpbmdzKSBzbyB5b3Ugc2hvdWxkIGNvbnZlcnQgdGhvc2Ugc3R5bGVzIHRvIGEgY2xhc3MgbmFtZSBieSBwYXNzaW5nIHRoZW0gdG8gdGhlIGBjc3NgIHJlY2VpdmVkIGZyb20gPENsYXNzTmFtZXMvPiBjb21wb25lbnQuJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRvQWRkID0gJyc7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGsgaW4gYXJnKSB7XG4gICAgICAgICAgICAgIGlmIChhcmdba10gJiYgaykge1xuICAgICAgICAgICAgICAgIHRvQWRkICYmICh0b0FkZCArPSAnICcpO1xuICAgICAgICAgICAgICAgIHRvQWRkICs9IGs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICB7XG4gICAgICAgICAgdG9BZGQgPSBhcmc7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodG9BZGQpIHtcbiAgICAgIGNscyAmJiAoY2xzICs9ICcgJyk7XG4gICAgICBjbHMgKz0gdG9BZGQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNscztcbn07XG5cbmZ1bmN0aW9uIG1lcmdlKHJlZ2lzdGVyZWQsIGNzcywgY2xhc3NOYW1lKSB7XG4gIHZhciByZWdpc3RlcmVkU3R5bGVzID0gW107XG4gIHZhciByYXdDbGFzc05hbWUgPSBnZXRSZWdpc3RlcmVkU3R5bGVzKHJlZ2lzdGVyZWQsIHJlZ2lzdGVyZWRTdHlsZXMsIGNsYXNzTmFtZSk7XG5cbiAgaWYgKHJlZ2lzdGVyZWRTdHlsZXMubGVuZ3RoIDwgMikge1xuICAgIHJldHVybiBjbGFzc05hbWU7XG4gIH1cblxuICByZXR1cm4gcmF3Q2xhc3NOYW1lICsgY3NzKHJlZ2lzdGVyZWRTdHlsZXMpO1xufVxuXG52YXIgSW5zZXJ0aW9uID0gZnVuY3Rpb24gSW5zZXJ0aW9uKF9yZWYpIHtcbiAgdmFyIGNhY2hlID0gX3JlZi5jYWNoZSxcbiAgICAgIHNlcmlhbGl6ZWRBcnIgPSBfcmVmLnNlcmlhbGl6ZWRBcnI7XG4gIHVzZUluc2VydGlvbkVmZmVjdEFsd2F5c1dpdGhTeW5jRmFsbGJhY2soZnVuY3Rpb24gKCkge1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZXJpYWxpemVkQXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpbnNlcnRTdHlsZXMoY2FjaGUsIHNlcmlhbGl6ZWRBcnJbaV0sIGZhbHNlKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBudWxsO1xufTtcblxudmFyIENsYXNzTmFtZXMgPSAvKiAjX19QVVJFX18gKi93aXRoRW1vdGlvbkNhY2hlKGZ1bmN0aW9uIChwcm9wcywgY2FjaGUpIHtcbiAgdmFyIGhhc1JlbmRlcmVkID0gZmFsc2U7XG4gIHZhciBzZXJpYWxpemVkQXJyID0gW107XG5cbiAgdmFyIGNzcyA9IGZ1bmN0aW9uIGNzcygpIHtcbiAgICBpZiAoaGFzUmVuZGVyZWQgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdjc3MgY2FuIG9ubHkgYmUgdXNlZCBkdXJpbmcgcmVuZGVyJyk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHZhciBzZXJpYWxpemVkID0gc2VyaWFsaXplU3R5bGVzKGFyZ3MsIGNhY2hlLnJlZ2lzdGVyZWQpO1xuICAgIHNlcmlhbGl6ZWRBcnIucHVzaChzZXJpYWxpemVkKTsgLy8gcmVnaXN0cmF0aW9uIGhhcyB0byBoYXBwZW4gaGVyZSBhcyB0aGUgcmVzdWx0IG9mIHRoaXMgbWlnaHQgZ2V0IGNvbnN1bWVkIGJ5IGBjeGBcblxuICAgIHJlZ2lzdGVyU3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkLCBmYWxzZSk7XG4gICAgcmV0dXJuIGNhY2hlLmtleSArIFwiLVwiICsgc2VyaWFsaXplZC5uYW1lO1xuICB9O1xuXG4gIHZhciBjeCA9IGZ1bmN0aW9uIGN4KCkge1xuICAgIGlmIChoYXNSZW5kZXJlZCAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2N4IGNhbiBvbmx5IGJlIHVzZWQgZHVyaW5nIHJlbmRlcicpO1xuICAgIH1cblxuICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgIH1cblxuICAgIHJldHVybiBtZXJnZShjYWNoZS5yZWdpc3RlcmVkLCBjc3MsIGNsYXNzbmFtZXMoYXJncykpO1xuICB9O1xuXG4gIHZhciBjb250ZW50ID0ge1xuICAgIGNzczogY3NzLFxuICAgIGN4OiBjeCxcbiAgICB0aGVtZTogUmVhY3QudXNlQ29udGV4dChUaGVtZUNvbnRleHQpXG4gIH07XG4gIHZhciBlbGUgPSBwcm9wcy5jaGlsZHJlbihjb250ZW50KTtcbiAgaGFzUmVuZGVyZWQgPSB0cnVlO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEluc2VydGlvbiwge1xuICAgIGNhY2hlOiBjYWNoZSxcbiAgICBzZXJpYWxpemVkQXJyOiBzZXJpYWxpemVkQXJyXG4gIH0pLCBlbGUpO1xufSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIENsYXNzTmFtZXMuZGlzcGxheU5hbWUgPSAnRW1vdGlvbkNsYXNzTmFtZXMnO1xufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgaXNCcm93c2VyID0gXCJvYmplY3RcIiAhPT0gJ3VuZGVmaW5lZCc7IC8vICMxNzI3LCAjMjkwNSBmb3Igc29tZSByZWFzb24gSmVzdCBhbmQgVml0ZXN0IGV2YWx1YXRlIG1vZHVsZXMgdHdpY2UgaWYgc29tZSBjb25zdW1pbmcgbW9kdWxlIGdldHMgbW9ja2VkXG5cbiAgdmFyIGlzVGVzdEVudiA9IHR5cGVvZiBqZXN0ICE9PSAndW5kZWZpbmVkJyB8fCB0eXBlb2YgdmkgIT09ICd1bmRlZmluZWQnO1xuXG4gIGlmIChpc0Jyb3dzZXIgJiYgIWlzVGVzdEVudikge1xuICAgIC8vIGdsb2JhbFRoaXMgaGFzIHdpZGUgYnJvd3NlciBzdXBwb3J0IC0gaHR0cHM6Ly9jYW5pdXNlLmNvbS8/c2VhcmNoPWdsb2JhbFRoaXMsIE5vZGUuanMgMTIgYW5kIGxhdGVyXG4gICAgdmFyIGdsb2JhbENvbnRleHQgPSAvLyAkRmxvd0lnbm9yZVxuICAgIHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbFRoaXMgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuICAgIDogaXNCcm93c2VyID8gd2luZG93IDogZ2xvYmFsO1xuICAgIHZhciBnbG9iYWxLZXkgPSBcIl9fRU1PVElPTl9SRUFDVF9cIiArIHBrZy52ZXJzaW9uLnNwbGl0KCcuJylbMF0gKyBcIl9fXCI7XG5cbiAgICBpZiAoZ2xvYmFsQ29udGV4dFtnbG9iYWxLZXldKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ1lvdSBhcmUgbG9hZGluZyBAZW1vdGlvbi9yZWFjdCB3aGVuIGl0IGlzIGFscmVhZHkgbG9hZGVkLiBSdW5uaW5nICcgKyAnbXVsdGlwbGUgaW5zdGFuY2VzIG1heSBjYXVzZSBwcm9ibGVtcy4gVGhpcyBjYW4gaGFwcGVuIGlmIG11bHRpcGxlICcgKyAndmVyc2lvbnMgYXJlIHVzZWQsIG9yIGlmIG11bHRpcGxlIGJ1aWxkcyBvZiB0aGUgc2FtZSB2ZXJzaW9uIGFyZSAnICsgJ3VzZWQuJyk7XG4gICAgfVxuXG4gICAgZ2xvYmFsQ29udGV4dFtnbG9iYWxLZXldID0gdHJ1ZTtcbiAgfVxufVxuXG5leHBvcnQgeyBDbGFzc05hbWVzLCBHbG9iYWwsIGpzeCBhcyBjcmVhdGVFbGVtZW50LCBjc3MsIGpzeCwga2V5ZnJhbWVzIH07XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgaXNQcm9wVmFsaWQgZnJvbSAnQGVtb3Rpb24vaXMtcHJvcC12YWxpZCc7XG5pbXBvcnQgeyB3aXRoRW1vdGlvbkNhY2hlLCBUaGVtZUNvbnRleHQgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgeyBnZXRSZWdpc3RlcmVkU3R5bGVzLCByZWdpc3RlclN0eWxlcywgaW5zZXJ0U3R5bGVzIH0gZnJvbSAnQGVtb3Rpb24vdXRpbHMnO1xuaW1wb3J0IHsgc2VyaWFsaXplU3R5bGVzIH0gZnJvbSAnQGVtb3Rpb24vc2VyaWFsaXplJztcbmltcG9ydCB7IHVzZUluc2VydGlvbkVmZmVjdEFsd2F5c1dpdGhTeW5jRmFsbGJhY2sgfSBmcm9tICdAZW1vdGlvbi91c2UtaW5zZXJ0aW9uLWVmZmVjdC13aXRoLWZhbGxiYWNrcyc7XG5cbnZhciB0ZXN0T21pdFByb3BzT25TdHJpbmdUYWcgPSBpc1Byb3BWYWxpZDtcblxudmFyIHRlc3RPbWl0UHJvcHNPbkNvbXBvbmVudCA9IGZ1bmN0aW9uIHRlc3RPbWl0UHJvcHNPbkNvbXBvbmVudChrZXkpIHtcbiAgcmV0dXJuIGtleSAhPT0gJ3RoZW1lJztcbn07XG5cbnZhciBnZXREZWZhdWx0U2hvdWxkRm9yd2FyZFByb3AgPSBmdW5jdGlvbiBnZXREZWZhdWx0U2hvdWxkRm9yd2FyZFByb3AodGFnKSB7XG4gIHJldHVybiB0eXBlb2YgdGFnID09PSAnc3RyaW5nJyAmJiAvLyA5NiBpcyBvbmUgbGVzcyB0aGFuIHRoZSBjaGFyIGNvZGVcbiAgLy8gZm9yIFwiYVwiIHNvIHRoaXMgaXMgY2hlY2tpbmcgdGhhdFxuICAvLyBpdCdzIGEgbG93ZXJjYXNlIGNoYXJhY3RlclxuICB0YWcuY2hhckNvZGVBdCgwKSA+IDk2ID8gdGVzdE9taXRQcm9wc09uU3RyaW5nVGFnIDogdGVzdE9taXRQcm9wc09uQ29tcG9uZW50O1xufTtcbnZhciBjb21wb3NlU2hvdWxkRm9yd2FyZFByb3BzID0gZnVuY3Rpb24gY29tcG9zZVNob3VsZEZvcndhcmRQcm9wcyh0YWcsIG9wdGlvbnMsIGlzUmVhbCkge1xuICB2YXIgc2hvdWxkRm9yd2FyZFByb3A7XG5cbiAgaWYgKG9wdGlvbnMpIHtcbiAgICB2YXIgb3B0aW9uc1Nob3VsZEZvcndhcmRQcm9wID0gb3B0aW9ucy5zaG91bGRGb3J3YXJkUHJvcDtcbiAgICBzaG91bGRGb3J3YXJkUHJvcCA9IHRhZy5fX2Vtb3Rpb25fZm9yd2FyZFByb3AgJiYgb3B0aW9uc1Nob3VsZEZvcndhcmRQcm9wID8gZnVuY3Rpb24gKHByb3BOYW1lKSB7XG4gICAgICByZXR1cm4gdGFnLl9fZW1vdGlvbl9mb3J3YXJkUHJvcChwcm9wTmFtZSkgJiYgb3B0aW9uc1Nob3VsZEZvcndhcmRQcm9wKHByb3BOYW1lKTtcbiAgICB9IDogb3B0aW9uc1Nob3VsZEZvcndhcmRQcm9wO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBzaG91bGRGb3J3YXJkUHJvcCAhPT0gJ2Z1bmN0aW9uJyAmJiBpc1JlYWwpIHtcbiAgICBzaG91bGRGb3J3YXJkUHJvcCA9IHRhZy5fX2Vtb3Rpb25fZm9yd2FyZFByb3A7XG4gIH1cblxuICByZXR1cm4gc2hvdWxkRm9yd2FyZFByb3A7XG59O1xuXG52YXIgSUxMRUdBTF9FU0NBUEVfU0VRVUVOQ0VfRVJST1IgPSBcIllvdSBoYXZlIGlsbGVnYWwgZXNjYXBlIHNlcXVlbmNlIGluIHlvdXIgdGVtcGxhdGUgbGl0ZXJhbCwgbW9zdCBsaWtlbHkgaW5zaWRlIGNvbnRlbnQncyBwcm9wZXJ0eSB2YWx1ZS5cXG5CZWNhdXNlIHlvdSB3cml0ZSB5b3VyIENTUyBpbnNpZGUgYSBKYXZhU2NyaXB0IHN0cmluZyB5b3UgYWN0dWFsbHkgaGF2ZSB0byBkbyBkb3VibGUgZXNjYXBpbmcsIHNvIGZvciBleGFtcGxlIFxcXCJjb250ZW50OiAnXFxcXDAwZDcnO1xcXCIgc2hvdWxkIGJlY29tZSBcXFwiY29udGVudDogJ1xcXFxcXFxcMDBkNyc7XFxcIi5cXG5Zb3UgY2FuIHJlYWQgbW9yZSBhYm91dCB0aGlzIGhlcmU6XFxuaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvVGVtcGxhdGVfbGl0ZXJhbHMjRVMyMDE4X3JldmlzaW9uX29mX2lsbGVnYWxfZXNjYXBlX3NlcXVlbmNlc1wiO1xuXG52YXIgSW5zZXJ0aW9uID0gZnVuY3Rpb24gSW5zZXJ0aW9uKF9yZWYpIHtcbiAgdmFyIGNhY2hlID0gX3JlZi5jYWNoZSxcbiAgICAgIHNlcmlhbGl6ZWQgPSBfcmVmLnNlcmlhbGl6ZWQsXG4gICAgICBpc1N0cmluZ1RhZyA9IF9yZWYuaXNTdHJpbmdUYWc7XG4gIHJlZ2lzdGVyU3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkLCBpc1N0cmluZ1RhZyk7XG4gIHVzZUluc2VydGlvbkVmZmVjdEFsd2F5c1dpdGhTeW5jRmFsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBpbnNlcnRTdHlsZXMoY2FjaGUsIHNlcmlhbGl6ZWQsIGlzU3RyaW5nVGFnKTtcbiAgfSk7XG5cbiAgcmV0dXJuIG51bGw7XG59O1xuXG52YXIgY3JlYXRlU3R5bGVkID0gZnVuY3Rpb24gY3JlYXRlU3R5bGVkKHRhZywgb3B0aW9ucykge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICh0YWcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgYXJlIHRyeWluZyB0byBjcmVhdGUgYSBzdHlsZWQgZWxlbWVudCB3aXRoIGFuIHVuZGVmaW5lZCBjb21wb25lbnQuXFxuWW91IG1heSBoYXZlIGZvcmdvdHRlbiB0byBpbXBvcnQgaXQuJyk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGlzUmVhbCA9IHRhZy5fX2Vtb3Rpb25fcmVhbCA9PT0gdGFnO1xuICB2YXIgYmFzZVRhZyA9IGlzUmVhbCAmJiB0YWcuX19lbW90aW9uX2Jhc2UgfHwgdGFnO1xuICB2YXIgaWRlbnRpZmllck5hbWU7XG4gIHZhciB0YXJnZXRDbGFzc05hbWU7XG5cbiAgaWYgKG9wdGlvbnMgIT09IHVuZGVmaW5lZCkge1xuICAgIGlkZW50aWZpZXJOYW1lID0gb3B0aW9ucy5sYWJlbDtcbiAgICB0YXJnZXRDbGFzc05hbWUgPSBvcHRpb25zLnRhcmdldDtcbiAgfVxuXG4gIHZhciBzaG91bGRGb3J3YXJkUHJvcCA9IGNvbXBvc2VTaG91bGRGb3J3YXJkUHJvcHModGFnLCBvcHRpb25zLCBpc1JlYWwpO1xuICB2YXIgZGVmYXVsdFNob3VsZEZvcndhcmRQcm9wID0gc2hvdWxkRm9yd2FyZFByb3AgfHwgZ2V0RGVmYXVsdFNob3VsZEZvcndhcmRQcm9wKGJhc2VUYWcpO1xuICB2YXIgc2hvdWxkVXNlQXMgPSAhZGVmYXVsdFNob3VsZEZvcndhcmRQcm9wKCdhcycpO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgIHZhciBzdHlsZXMgPSBpc1JlYWwgJiYgdGFnLl9fZW1vdGlvbl9zdHlsZXMgIT09IHVuZGVmaW5lZCA/IHRhZy5fX2Vtb3Rpb25fc3R5bGVzLnNsaWNlKDApIDogW107XG5cbiAgICBpZiAoaWRlbnRpZmllck5hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgc3R5bGVzLnB1c2goXCJsYWJlbDpcIiArIGlkZW50aWZpZXJOYW1lICsgXCI7XCIpO1xuICAgIH1cblxuICAgIGlmIChhcmdzWzBdID09IG51bGwgfHwgYXJnc1swXS5yYXcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgc3R5bGVzLnB1c2guYXBwbHkoc3R5bGVzLCBhcmdzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgYXJnc1swXVswXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoSUxMRUdBTF9FU0NBUEVfU0VRVUVOQ0VfRVJST1IpO1xuICAgICAgfVxuXG4gICAgICBzdHlsZXMucHVzaChhcmdzWzBdWzBdKTtcbiAgICAgIHZhciBsZW4gPSBhcmdzLmxlbmd0aDtcbiAgICAgIHZhciBpID0gMTtcblxuICAgICAgZm9yICg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBhcmdzWzBdW2ldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKElMTEVHQUxfRVNDQVBFX1NFUVVFTkNFX0VSUk9SKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0eWxlcy5wdXNoKGFyZ3NbaV0sIGFyZ3NbMF1baV0pO1xuICAgICAgfVxuICAgIH0gLy8gJEZsb3dGaXhNZTogd2UgbmVlZCB0byBjYXN0IFN0YXRlbGVzc0Z1bmN0aW9uYWxDb21wb25lbnQgdG8gb3VyIFByaXZhdGVTdHlsZWRDb21wb25lbnQgY2xhc3NcblxuXG4gICAgdmFyIFN0eWxlZCA9IHdpdGhFbW90aW9uQ2FjaGUoZnVuY3Rpb24gKHByb3BzLCBjYWNoZSwgcmVmKSB7XG4gICAgICB2YXIgRmluYWxUYWcgPSBzaG91bGRVc2VBcyAmJiBwcm9wcy5hcyB8fCBiYXNlVGFnO1xuICAgICAgdmFyIGNsYXNzTmFtZSA9ICcnO1xuICAgICAgdmFyIGNsYXNzSW50ZXJwb2xhdGlvbnMgPSBbXTtcbiAgICAgIHZhciBtZXJnZWRQcm9wcyA9IHByb3BzO1xuXG4gICAgICBpZiAocHJvcHMudGhlbWUgPT0gbnVsbCkge1xuICAgICAgICBtZXJnZWRQcm9wcyA9IHt9O1xuXG4gICAgICAgIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgICAgICAgIG1lcmdlZFByb3BzW2tleV0gPSBwcm9wc1trZXldO1xuICAgICAgICB9XG5cbiAgICAgICAgbWVyZ2VkUHJvcHMudGhlbWUgPSBSZWFjdC51c2VDb250ZXh0KFRoZW1lQ29udGV4dCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgcHJvcHMuY2xhc3NOYW1lID09PSAnc3RyaW5nJykge1xuICAgICAgICBjbGFzc05hbWUgPSBnZXRSZWdpc3RlcmVkU3R5bGVzKGNhY2hlLnJlZ2lzdGVyZWQsIGNsYXNzSW50ZXJwb2xhdGlvbnMsIHByb3BzLmNsYXNzTmFtZSk7XG4gICAgICB9IGVsc2UgaWYgKHByb3BzLmNsYXNzTmFtZSAhPSBudWxsKSB7XG4gICAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSArIFwiIFwiO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2VyaWFsaXplZCA9IHNlcmlhbGl6ZVN0eWxlcyhzdHlsZXMuY29uY2F0KGNsYXNzSW50ZXJwb2xhdGlvbnMpLCBjYWNoZS5yZWdpc3RlcmVkLCBtZXJnZWRQcm9wcyk7XG4gICAgICBjbGFzc05hbWUgKz0gY2FjaGUua2V5ICsgXCItXCIgKyBzZXJpYWxpemVkLm5hbWU7XG5cbiAgICAgIGlmICh0YXJnZXRDbGFzc05hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjbGFzc05hbWUgKz0gXCIgXCIgKyB0YXJnZXRDbGFzc05hbWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBmaW5hbFNob3VsZEZvcndhcmRQcm9wID0gc2hvdWxkVXNlQXMgJiYgc2hvdWxkRm9yd2FyZFByb3AgPT09IHVuZGVmaW5lZCA/IGdldERlZmF1bHRTaG91bGRGb3J3YXJkUHJvcChGaW5hbFRhZykgOiBkZWZhdWx0U2hvdWxkRm9yd2FyZFByb3A7XG4gICAgICB2YXIgbmV3UHJvcHMgPSB7fTtcblxuICAgICAgZm9yICh2YXIgX2tleSBpbiBwcm9wcykge1xuICAgICAgICBpZiAoc2hvdWxkVXNlQXMgJiYgX2tleSA9PT0gJ2FzJykgY29udGludWU7XG5cbiAgICAgICAgaWYgKCAvLyAkRmxvd0ZpeE1lXG4gICAgICAgIGZpbmFsU2hvdWxkRm9yd2FyZFByb3AoX2tleSkpIHtcbiAgICAgICAgICBuZXdQcm9wc1tfa2V5XSA9IHByb3BzW19rZXldO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG5ld1Byb3BzLmNsYXNzTmFtZSA9IGNsYXNzTmFtZTtcbiAgICAgIG5ld1Byb3BzLnJlZiA9IHJlZjtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoSW5zZXJ0aW9uLCB7XG4gICAgICAgIGNhY2hlOiBjYWNoZSxcbiAgICAgICAgc2VyaWFsaXplZDogc2VyaWFsaXplZCxcbiAgICAgICAgaXNTdHJpbmdUYWc6IHR5cGVvZiBGaW5hbFRhZyA9PT0gJ3N0cmluZydcbiAgICAgIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChGaW5hbFRhZywgbmV3UHJvcHMpKTtcbiAgICB9KTtcbiAgICBTdHlsZWQuZGlzcGxheU5hbWUgPSBpZGVudGlmaWVyTmFtZSAhPT0gdW5kZWZpbmVkID8gaWRlbnRpZmllck5hbWUgOiBcIlN0eWxlZChcIiArICh0eXBlb2YgYmFzZVRhZyA9PT0gJ3N0cmluZycgPyBiYXNlVGFnIDogYmFzZVRhZy5kaXNwbGF5TmFtZSB8fCBiYXNlVGFnLm5hbWUgfHwgJ0NvbXBvbmVudCcpICsgXCIpXCI7XG4gICAgU3R5bGVkLmRlZmF1bHRQcm9wcyA9IHRhZy5kZWZhdWx0UHJvcHM7XG4gICAgU3R5bGVkLl9fZW1vdGlvbl9yZWFsID0gU3R5bGVkO1xuICAgIFN0eWxlZC5fX2Vtb3Rpb25fYmFzZSA9IGJhc2VUYWc7XG4gICAgU3R5bGVkLl9fZW1vdGlvbl9zdHlsZXMgPSBzdHlsZXM7XG4gICAgU3R5bGVkLl9fZW1vdGlvbl9mb3J3YXJkUHJvcCA9IHNob3VsZEZvcndhcmRQcm9wO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTdHlsZWQsICd0b1N0cmluZycsIHtcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZSgpIHtcbiAgICAgICAgaWYgKHRhcmdldENsYXNzTmFtZSA9PT0gdW5kZWZpbmVkICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICByZXR1cm4gJ05PX0NPTVBPTkVOVF9TRUxFQ1RPUic7XG4gICAgICAgIH0gLy8gJEZsb3dGaXhNZTogY29lcmNlIHVuZGVmaW5lZCB0byBzdHJpbmdcblxuXG4gICAgICAgIHJldHVybiBcIi5cIiArIHRhcmdldENsYXNzTmFtZTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIFN0eWxlZC53aXRoQ29tcG9uZW50ID0gZnVuY3Rpb24gKG5leHRUYWcsIG5leHRPcHRpb25zKSB7XG4gICAgICByZXR1cm4gY3JlYXRlU3R5bGVkKG5leHRUYWcsIF9leHRlbmRzKHt9LCBvcHRpb25zLCBuZXh0T3B0aW9ucywge1xuICAgICAgICBzaG91bGRGb3J3YXJkUHJvcDogY29tcG9zZVNob3VsZEZvcndhcmRQcm9wcyhTdHlsZWQsIG5leHRPcHRpb25zLCB0cnVlKVxuICAgICAgfSkpLmFwcGx5KHZvaWQgMCwgc3R5bGVzKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFN0eWxlZDtcbiAgfTtcbn07XG5cbmV4cG9ydCB7IGNyZWF0ZVN0eWxlZCBhcyBkZWZhdWx0IH07XG4iLCJpbXBvcnQgY3JlYXRlU3R5bGVkIGZyb20gJy4uL2Jhc2UvZGlzdC9lbW90aW9uLXN0eWxlZC1iYXNlLmJyb3dzZXIuZXNtLmpzJztcbmltcG9ydCAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCAncmVhY3QnO1xuaW1wb3J0ICdAZW1vdGlvbi9pcy1wcm9wLXZhbGlkJztcbmltcG9ydCAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0ICdAZW1vdGlvbi91dGlscyc7XG5pbXBvcnQgJ0BlbW90aW9uL3NlcmlhbGl6ZSc7XG5pbXBvcnQgJ0BlbW90aW9uL3VzZS1pbnNlcnRpb24tZWZmZWN0LXdpdGgtZmFsbGJhY2tzJztcblxudmFyIHRhZ3MgPSBbJ2EnLCAnYWJicicsICdhZGRyZXNzJywgJ2FyZWEnLCAnYXJ0aWNsZScsICdhc2lkZScsICdhdWRpbycsICdiJywgJ2Jhc2UnLCAnYmRpJywgJ2JkbycsICdiaWcnLCAnYmxvY2txdW90ZScsICdib2R5JywgJ2JyJywgJ2J1dHRvbicsICdjYW52YXMnLCAnY2FwdGlvbicsICdjaXRlJywgJ2NvZGUnLCAnY29sJywgJ2NvbGdyb3VwJywgJ2RhdGEnLCAnZGF0YWxpc3QnLCAnZGQnLCAnZGVsJywgJ2RldGFpbHMnLCAnZGZuJywgJ2RpYWxvZycsICdkaXYnLCAnZGwnLCAnZHQnLCAnZW0nLCAnZW1iZWQnLCAnZmllbGRzZXQnLCAnZmlnY2FwdGlvbicsICdmaWd1cmUnLCAnZm9vdGVyJywgJ2Zvcm0nLCAnaDEnLCAnaDInLCAnaDMnLCAnaDQnLCAnaDUnLCAnaDYnLCAnaGVhZCcsICdoZWFkZXInLCAnaGdyb3VwJywgJ2hyJywgJ2h0bWwnLCAnaScsICdpZnJhbWUnLCAnaW1nJywgJ2lucHV0JywgJ2lucycsICdrYmQnLCAna2V5Z2VuJywgJ2xhYmVsJywgJ2xlZ2VuZCcsICdsaScsICdsaW5rJywgJ21haW4nLCAnbWFwJywgJ21hcmsnLCAnbWFycXVlZScsICdtZW51JywgJ21lbnVpdGVtJywgJ21ldGEnLCAnbWV0ZXInLCAnbmF2JywgJ25vc2NyaXB0JywgJ29iamVjdCcsICdvbCcsICdvcHRncm91cCcsICdvcHRpb24nLCAnb3V0cHV0JywgJ3AnLCAncGFyYW0nLCAncGljdHVyZScsICdwcmUnLCAncHJvZ3Jlc3MnLCAncScsICdycCcsICdydCcsICdydWJ5JywgJ3MnLCAnc2FtcCcsICdzY3JpcHQnLCAnc2VjdGlvbicsICdzZWxlY3QnLCAnc21hbGwnLCAnc291cmNlJywgJ3NwYW4nLCAnc3Ryb25nJywgJ3N0eWxlJywgJ3N1YicsICdzdW1tYXJ5JywgJ3N1cCcsICd0YWJsZScsICd0Ym9keScsICd0ZCcsICd0ZXh0YXJlYScsICd0Zm9vdCcsICd0aCcsICd0aGVhZCcsICd0aW1lJywgJ3RpdGxlJywgJ3RyJywgJ3RyYWNrJywgJ3UnLCAndWwnLCAndmFyJywgJ3ZpZGVvJywgJ3dicicsIC8vIFNWR1xuJ2NpcmNsZScsICdjbGlwUGF0aCcsICdkZWZzJywgJ2VsbGlwc2UnLCAnZm9yZWlnbk9iamVjdCcsICdnJywgJ2ltYWdlJywgJ2xpbmUnLCAnbGluZWFyR3JhZGllbnQnLCAnbWFzaycsICdwYXRoJywgJ3BhdHRlcm4nLCAncG9seWdvbicsICdwb2x5bGluZScsICdyYWRpYWxHcmFkaWVudCcsICdyZWN0JywgJ3N0b3AnLCAnc3ZnJywgJ3RleHQnLCAndHNwYW4nXTtcblxudmFyIG5ld1N0eWxlZCA9IGNyZWF0ZVN0eWxlZC5iaW5kKCk7XG50YWdzLmZvckVhY2goZnVuY3Rpb24gKHRhZ05hbWUpIHtcbiAgLy8gJEZsb3dGaXhNZTogd2UgY2FuIGlnbm9yZSB0aGlzIGJlY2F1c2UgaXRzIGV4cG9zZWQgdHlwZSBpcyBkZWZpbmVkIGJ5IHRoZSBDcmVhdGVTdHlsZWQgdHlwZVxuICBuZXdTdHlsZWRbdGFnTmFtZV0gPSBuZXdTdHlsZWQodGFnTmFtZSk7XG59KTtcblxuZXhwb3J0IHsgbmV3U3R5bGVkIGFzIGRlZmF1bHQgfTtcbiIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IENhY2hlUHJvdmlkZXIgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgY3JlYXRlQ2FjaGUgZnJvbSAnQGVtb3Rpb24vY2FjaGUnO1xuXG4vLyBwcmVwZW5kOiB0cnVlIG1vdmVzIE1VSSBzdHlsZXMgdG8gdGhlIHRvcCBvZiB0aGUgPGhlYWQ+IHNvIHRoZXkncmUgbG9hZGVkIGZpcnN0LlxuLy8gSXQgYWxsb3dzIGRldmVsb3BlcnMgdG8gZWFzaWx5IG92ZXJyaWRlIE1VSSBzdHlsZXMgd2l0aCBvdGhlciBzdHlsaW5nIHNvbHV0aW9ucywgbGlrZSBDU1MgbW9kdWxlcy5cbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5sZXQgY2FjaGU7XG5pZiAodHlwZW9mIGRvY3VtZW50ID09PSAnb2JqZWN0Jykge1xuICBjYWNoZSA9IGNyZWF0ZUNhY2hlKHtcbiAgICBrZXk6ICdjc3MnLFxuICAgIHByZXBlbmQ6IHRydWVcbiAgfSk7XG59XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBTdHlsZWRFbmdpbmVQcm92aWRlcihwcm9wcykge1xuICBjb25zdCB7XG4gICAgaW5qZWN0Rmlyc3QsXG4gICAgY2hpbGRyZW5cbiAgfSA9IHByb3BzO1xuICByZXR1cm4gaW5qZWN0Rmlyc3QgJiYgY2FjaGUgPyAvKiNfX1BVUkVfXyovX2pzeChDYWNoZVByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGNhY2hlLFxuICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICB9KSA6IGNoaWxkcmVuO1xufVxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gU3R5bGVkRW5naW5lUHJvdmlkZXIucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogWW91ciBjb21wb25lbnQgdHJlZS5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIEJ5IGRlZmF1bHQsIHRoZSBzdHlsZXMgYXJlIGluamVjdGVkIGxhc3QgaW4gdGhlIDxoZWFkPiBlbGVtZW50IG9mIHRoZSBwYWdlLlxuICAgKiBBcyBhIHJlc3VsdCwgdGhleSBnYWluIG1vcmUgc3BlY2lmaWNpdHkgdGhhbiBhbnkgb3RoZXIgc3R5bGUgc2hlZXQuXG4gICAqIElmIHlvdSB3YW50IHRvIG92ZXJyaWRlIE1VSSdzIHN0eWxlcywgc2V0IHRoaXMgcHJvcC5cbiAgICovXG4gIGluamVjdEZpcnN0OiBQcm9wVHlwZXMuYm9vbFxufSA6IHZvaWQgMDsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBHbG9iYWwgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuZnVuY3Rpb24gaXNFbXB0eShvYmopIHtcbiAgcmV0dXJuIG9iaiA9PT0gdW5kZWZpbmVkIHx8IG9iaiA9PT0gbnVsbCB8fCBPYmplY3Qua2V5cyhvYmopLmxlbmd0aCA9PT0gMDtcbn1cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEdsb2JhbFN0eWxlcyhwcm9wcykge1xuICBjb25zdCB7XG4gICAgc3R5bGVzLFxuICAgIGRlZmF1bHRUaGVtZSA9IHt9XG4gIH0gPSBwcm9wcztcbiAgY29uc3QgZ2xvYmFsU3R5bGVzID0gdHlwZW9mIHN0eWxlcyA9PT0gJ2Z1bmN0aW9uJyA/IHRoZW1lSW5wdXQgPT4gc3R5bGVzKGlzRW1wdHkodGhlbWVJbnB1dCkgPyBkZWZhdWx0VGhlbWUgOiB0aGVtZUlucHV0KSA6IHN0eWxlcztcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KEdsb2JhbCwge1xuICAgIHN0eWxlczogZ2xvYmFsU3R5bGVzXG4gIH0pO1xufVxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gR2xvYmFsU3R5bGVzLnByb3BUeXBlcyA9IHtcbiAgZGVmYXVsdFRoZW1lOiBQcm9wVHlwZXMub2JqZWN0LFxuICBzdHlsZXM6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheSwgUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmZ1bmNdKVxufSA6IHZvaWQgMDsiLCIvKipcbiAqIEBtdWkvc3R5bGVkLWVuZ2luZSB2NS4xNS4xNFxuICpcbiAqIEBsaWNlbnNlIE1JVFxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2UgY2xpZW50JztcblxuLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZXJzY29yZS1kYW5nbGUgKi9cbmltcG9ydCBlbVN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3R5bGVkKHRhZywgb3B0aW9ucykge1xuICBjb25zdCBzdHlsZXNGYWN0b3J5ID0gZW1TdHlsZWQodGFnLCBvcHRpb25zKTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICByZXR1cm4gKC4uLnN0eWxlcykgPT4ge1xuICAgICAgY29uc3QgY29tcG9uZW50ID0gdHlwZW9mIHRhZyA9PT0gJ3N0cmluZycgPyBgXCIke3RhZ31cImAgOiAnY29tcG9uZW50JztcbiAgICAgIGlmIChzdHlsZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoW2BNVUk6IFNlZW1zIGxpa2UgeW91IGNhbGxlZCBcXGBzdHlsZWQoJHtjb21wb25lbnR9KSgpXFxgIHdpdGhvdXQgYSBcXGBzdHlsZVxcYCBhcmd1bWVudC5gLCAnWW91IG11c3QgcHJvdmlkZSBhIGBzdHlsZXNgIGFyZ3VtZW50OiBgc3R5bGVkKFwiZGl2XCIpKHN0eWxlWW91Rm9yZ290VG9QYXNzKWAuJ10uam9pbignXFxuJykpO1xuICAgICAgfSBlbHNlIGlmIChzdHlsZXMuc29tZShzdHlsZSA9PiBzdHlsZSA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKGBNVUk6IHRoZSBzdHlsZWQoJHtjb21wb25lbnR9KSguLi5hcmdzKSBBUEkgcmVxdWlyZXMgYWxsIGl0cyBhcmdzIHRvIGJlIGRlZmluZWQuYCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3R5bGVzRmFjdG9yeSguLi5zdHlsZXMpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIHN0eWxlc0ZhY3Rvcnk7XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cbmV4cG9ydCBjb25zdCBpbnRlcm5hbF9wcm9jZXNzU3R5bGVzID0gKHRhZywgcHJvY2Vzc29yKSA9PiB7XG4gIC8vIEVtb3Rpb24gYXR0YWNoZXMgYWxsIHRoZSBzdHlsZXMgYXMgYF9fZW1vdGlvbl9zdHlsZXNgLlxuICAvLyBSZWY6IGh0dHBzOi8vZ2l0aHViLmNvbS9lbW90aW9uLWpzL2Vtb3Rpb24vYmxvYi8xNmQ5NzFkMGRhMjI5NTk2ZDZiY2MzOWQyODJiYTk3NTNjOWVlN2NmL3BhY2thZ2VzL3N0eWxlZC9zcmMvYmFzZS5qcyNMMTg2XG4gIGlmIChBcnJheS5pc0FycmF5KHRhZy5fX2Vtb3Rpb25fc3R5bGVzKSkge1xuICAgIHRhZy5fX2Vtb3Rpb25fc3R5bGVzID0gcHJvY2Vzc29yKHRhZy5fX2Vtb3Rpb25fc3R5bGVzKTtcbiAgfVxufTtcbmV4cG9ydCB7IFRoZW1lQ29udGV4dCwga2V5ZnJhbWVzLCBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIFN0eWxlZEVuZ2luZVByb3ZpZGVyIH0gZnJvbSAnLi9TdHlsZWRFbmdpbmVQcm92aWRlcic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIEdsb2JhbFN0eWxlcyB9IGZyb20gJy4vR2xvYmFsU3R5bGVzJzsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zaW5kcmVzb3JodXMvaXMtcGxhaW4tb2JqL2Jsb2IvbWFpbi9pbmRleC5qc1xuZXhwb3J0IGZ1bmN0aW9uIGlzUGxhaW5PYmplY3QoaXRlbSkge1xuICBpZiAodHlwZW9mIGl0ZW0gIT09ICdvYmplY3QnIHx8IGl0ZW0gPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgY29uc3QgcHJvdG90eXBlID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKGl0ZW0pO1xuICByZXR1cm4gKHByb3RvdHlwZSA9PT0gbnVsbCB8fCBwcm90b3R5cGUgPT09IE9iamVjdC5wcm90b3R5cGUgfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvdHlwZSkgPT09IG51bGwpICYmICEoU3ltYm9sLnRvU3RyaW5nVGFnIGluIGl0ZW0pICYmICEoU3ltYm9sLml0ZXJhdG9yIGluIGl0ZW0pO1xufVxuZnVuY3Rpb24gZGVlcENsb25lKHNvdXJjZSkge1xuICBpZiAoIWlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgIHJldHVybiBzb3VyY2U7XG4gIH1cbiAgY29uc3Qgb3V0cHV0ID0ge307XG4gIE9iamVjdC5rZXlzKHNvdXJjZSkuZm9yRWFjaChrZXkgPT4ge1xuICAgIG91dHB1dFtrZXldID0gZGVlcENsb25lKHNvdXJjZVtrZXldKTtcbiAgfSk7XG4gIHJldHVybiBvdXRwdXQ7XG59XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWVwbWVyZ2UodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMgPSB7XG4gIGNsb25lOiB0cnVlXG59KSB7XG4gIGNvbnN0IG91dHB1dCA9IG9wdGlvbnMuY2xvbmUgPyBfZXh0ZW5kcyh7fSwgdGFyZ2V0KSA6IHRhcmdldDtcbiAgaWYgKGlzUGxhaW5PYmplY3QodGFyZ2V0KSAmJiBpc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICBPYmplY3Qua2V5cyhzb3VyY2UpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIGlmIChpc1BsYWluT2JqZWN0KHNvdXJjZVtrZXldKSAmJlxuICAgICAgLy8gQXZvaWQgcHJvdG90eXBlIHBvbGx1dGlvblxuICAgICAgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRhcmdldCwga2V5KSAmJiBpc1BsYWluT2JqZWN0KHRhcmdldFtrZXldKSkge1xuICAgICAgICAvLyBTaW5jZSBgb3V0cHV0YCBpcyBhIGNsb25lIG9mIGB0YXJnZXRgIGFuZCB3ZSBoYXZlIG5hcnJvd2VkIGB0YXJnZXRgIGluIHRoaXMgYmxvY2sgd2UgY2FuIGNhc3QgdG8gdGhlIHNhbWUgdHlwZS5cbiAgICAgICAgb3V0cHV0W2tleV0gPSBkZWVwbWVyZ2UodGFyZ2V0W2tleV0sIHNvdXJjZVtrZXldLCBvcHRpb25zKTtcbiAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy5jbG9uZSkge1xuICAgICAgICBvdXRwdXRba2V5XSA9IGlzUGxhaW5PYmplY3Qoc291cmNlW2tleV0pID8gZGVlcENsb25lKHNvdXJjZVtrZXldKSA6IHNvdXJjZVtrZXldO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0cHV0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICByZXR1cm4gb3V0cHV0O1xufSIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJ2YWx1ZXNcIiwgXCJ1bml0XCIsIFwic3RlcFwiXTtcbi8vIFNvcnRlZCBBU0MgYnkgc2l6ZS4gVGhhdCdzIGltcG9ydGFudC5cbi8vIEl0IGNhbid0IGJlIGNvbmZpZ3VyZWQgYXMgaXQncyB1c2VkIHN0YXRpY2FsbHkgZm9yIHByb3BUeXBlcy5cbmV4cG9ydCBjb25zdCBicmVha3BvaW50S2V5cyA9IFsneHMnLCAnc20nLCAnbWQnLCAnbGcnLCAneGwnXTtcbmNvbnN0IHNvcnRCcmVha3BvaW50c1ZhbHVlcyA9IHZhbHVlcyA9PiB7XG4gIGNvbnN0IGJyZWFrcG9pbnRzQXNBcnJheSA9IE9iamVjdC5rZXlzKHZhbHVlcykubWFwKGtleSA9PiAoe1xuICAgIGtleSxcbiAgICB2YWw6IHZhbHVlc1trZXldXG4gIH0pKSB8fCBbXTtcbiAgLy8gU29ydCBpbiBhc2NlbmRpbmcgb3JkZXJcbiAgYnJlYWtwb2ludHNBc0FycmF5LnNvcnQoKGJyZWFrcG9pbnQxLCBicmVha3BvaW50MikgPT4gYnJlYWtwb2ludDEudmFsIC0gYnJlYWtwb2ludDIudmFsKTtcbiAgcmV0dXJuIGJyZWFrcG9pbnRzQXNBcnJheS5yZWR1Y2UoKGFjYywgb2JqKSA9PiB7XG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBhY2MsIHtcbiAgICAgIFtvYmoua2V5XTogb2JqLnZhbFxuICAgIH0pO1xuICB9LCB7fSk7XG59O1xuXG4vLyBLZWVwIGluIG1pbmQgdGhhdCBAbWVkaWEgaXMgaW5jbHVzaXZlIGJ5IHRoZSBDU1Mgc3BlY2lmaWNhdGlvbi5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUJyZWFrcG9pbnRzKGJyZWFrcG9pbnRzKSB7XG4gIGNvbnN0IHtcbiAgICAgIC8vIFRoZSBicmVha3BvaW50ICoqc3RhcnQqKiBhdCB0aGlzIHZhbHVlLlxuICAgICAgLy8gRm9yIGluc3RhbmNlIHdpdGggdGhlIGZpcnN0IGJyZWFrcG9pbnQgeHM6IFt4cywgc20pLlxuICAgICAgdmFsdWVzID0ge1xuICAgICAgICB4czogMCxcbiAgICAgICAgLy8gcGhvbmVcbiAgICAgICAgc206IDYwMCxcbiAgICAgICAgLy8gdGFibGV0XG4gICAgICAgIG1kOiA5MDAsXG4gICAgICAgIC8vIHNtYWxsIGxhcHRvcFxuICAgICAgICBsZzogMTIwMCxcbiAgICAgICAgLy8gZGVza3RvcFxuICAgICAgICB4bDogMTUzNiAvLyBsYXJnZSBzY3JlZW5cbiAgICAgIH0sXG4gICAgICB1bml0ID0gJ3B4JyxcbiAgICAgIHN0ZXAgPSA1XG4gICAgfSA9IGJyZWFrcG9pbnRzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoYnJlYWtwb2ludHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IHNvcnRlZFZhbHVlcyA9IHNvcnRCcmVha3BvaW50c1ZhbHVlcyh2YWx1ZXMpO1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoc29ydGVkVmFsdWVzKTtcbiAgZnVuY3Rpb24gdXAoa2V5KSB7XG4gICAgY29uc3QgdmFsdWUgPSB0eXBlb2YgdmFsdWVzW2tleV0gPT09ICdudW1iZXInID8gdmFsdWVzW2tleV0gOiBrZXk7XG4gICAgcmV0dXJuIGBAbWVkaWEgKG1pbi13aWR0aDoke3ZhbHVlfSR7dW5pdH0pYDtcbiAgfVxuICBmdW5jdGlvbiBkb3duKGtleSkge1xuICAgIGNvbnN0IHZhbHVlID0gdHlwZW9mIHZhbHVlc1trZXldID09PSAnbnVtYmVyJyA/IHZhbHVlc1trZXldIDoga2V5O1xuICAgIHJldHVybiBgQG1lZGlhIChtYXgtd2lkdGg6JHt2YWx1ZSAtIHN0ZXAgLyAxMDB9JHt1bml0fSlgO1xuICB9XG4gIGZ1bmN0aW9uIGJldHdlZW4oc3RhcnQsIGVuZCkge1xuICAgIGNvbnN0IGVuZEluZGV4ID0ga2V5cy5pbmRleE9mKGVuZCk7XG4gICAgcmV0dXJuIGBAbWVkaWEgKG1pbi13aWR0aDoke3R5cGVvZiB2YWx1ZXNbc3RhcnRdID09PSAnbnVtYmVyJyA/IHZhbHVlc1tzdGFydF0gOiBzdGFydH0ke3VuaXR9KSBhbmQgYCArIGAobWF4LXdpZHRoOiR7KGVuZEluZGV4ICE9PSAtMSAmJiB0eXBlb2YgdmFsdWVzW2tleXNbZW5kSW5kZXhdXSA9PT0gJ251bWJlcicgPyB2YWx1ZXNba2V5c1tlbmRJbmRleF1dIDogZW5kKSAtIHN0ZXAgLyAxMDB9JHt1bml0fSlgO1xuICB9XG4gIGZ1bmN0aW9uIG9ubHkoa2V5KSB7XG4gICAgaWYgKGtleXMuaW5kZXhPZihrZXkpICsgMSA8IGtleXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gYmV0d2VlbihrZXksIGtleXNba2V5cy5pbmRleE9mKGtleSkgKyAxXSk7XG4gICAgfVxuICAgIHJldHVybiB1cChrZXkpO1xuICB9XG4gIGZ1bmN0aW9uIG5vdChrZXkpIHtcbiAgICAvLyBoYW5kbGUgZmlyc3QgYW5kIGxhc3Qga2V5IHNlcGFyYXRlbHksIGZvciBiZXR0ZXIgcmVhZGFiaWxpdHlcbiAgICBjb25zdCBrZXlJbmRleCA9IGtleXMuaW5kZXhPZihrZXkpO1xuICAgIGlmIChrZXlJbmRleCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHVwKGtleXNbMV0pO1xuICAgIH1cbiAgICBpZiAoa2V5SW5kZXggPT09IGtleXMubGVuZ3RoIC0gMSkge1xuICAgICAgcmV0dXJuIGRvd24oa2V5c1trZXlJbmRleF0pO1xuICAgIH1cbiAgICByZXR1cm4gYmV0d2VlbihrZXksIGtleXNba2V5cy5pbmRleE9mKGtleSkgKyAxXSkucmVwbGFjZSgnQG1lZGlhJywgJ0BtZWRpYSBub3QgYWxsIGFuZCcpO1xuICB9XG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAga2V5cyxcbiAgICB2YWx1ZXM6IHNvcnRlZFZhbHVlcyxcbiAgICB1cCxcbiAgICBkb3duLFxuICAgIGJldHdlZW4sXG4gICAgb25seSxcbiAgICBub3QsXG4gICAgdW5pdFxuICB9LCBvdGhlcik7XG59IiwiY29uc3Qgc2hhcGUgPSB7XG4gIGJvcmRlclJhZGl1czogNFxufTtcbmV4cG9ydCBkZWZhdWx0IHNoYXBlOyIsImltcG9ydCBkZWVwbWVyZ2UgZnJvbSAnQG11aS91dGlscy9kZWVwbWVyZ2UnO1xuZnVuY3Rpb24gbWVyZ2UoYWNjLCBpdGVtKSB7XG4gIGlmICghaXRlbSkge1xuICAgIHJldHVybiBhY2M7XG4gIH1cbiAgcmV0dXJuIGRlZXBtZXJnZShhY2MsIGl0ZW0sIHtcbiAgICBjbG9uZTogZmFsc2UgLy8gTm8gbmVlZCB0byBjbG9uZSBkZWVwLCBpdCdzIHdheSBmYXN0ZXIuXG4gIH0pO1xufVxuZXhwb3J0IGRlZmF1bHQgbWVyZ2U7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGRlZXBtZXJnZSBmcm9tICdAbXVpL3V0aWxzL2RlZXBtZXJnZSc7XG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi9tZXJnZSc7XG5cbi8vIFRoZSBicmVha3BvaW50ICoqc3RhcnQqKiBhdCB0aGlzIHZhbHVlLlxuLy8gRm9yIGluc3RhbmNlIHdpdGggdGhlIGZpcnN0IGJyZWFrcG9pbnQgeHM6IFt4cywgc21bLlxuZXhwb3J0IGNvbnN0IHZhbHVlcyA9IHtcbiAgeHM6IDAsXG4gIC8vIHBob25lXG4gIHNtOiA2MDAsXG4gIC8vIHRhYmxldFxuICBtZDogOTAwLFxuICAvLyBzbWFsbCBsYXB0b3BcbiAgbGc6IDEyMDAsXG4gIC8vIGRlc2t0b3BcbiAgeGw6IDE1MzYgLy8gbGFyZ2Ugc2NyZWVuXG59O1xuY29uc3QgZGVmYXVsdEJyZWFrcG9pbnRzID0ge1xuICAvLyBTb3J0ZWQgQVNDIGJ5IHNpemUuIFRoYXQncyBpbXBvcnRhbnQuXG4gIC8vIEl0IGNhbid0IGJlIGNvbmZpZ3VyZWQgYXMgaXQncyB1c2VkIHN0YXRpY2FsbHkgZm9yIHByb3BUeXBlcy5cbiAga2V5czogWyd4cycsICdzbScsICdtZCcsICdsZycsICd4bCddLFxuICB1cDoga2V5ID0+IGBAbWVkaWEgKG1pbi13aWR0aDoke3ZhbHVlc1trZXldfXB4KWBcbn07XG5leHBvcnQgZnVuY3Rpb24gaGFuZGxlQnJlYWtwb2ludHMocHJvcHMsIHByb3BWYWx1ZSwgc3R5bGVGcm9tUHJvcFZhbHVlKSB7XG4gIGNvbnN0IHRoZW1lID0gcHJvcHMudGhlbWUgfHwge307XG4gIGlmIChBcnJheS5pc0FycmF5KHByb3BWYWx1ZSkpIHtcbiAgICBjb25zdCB0aGVtZUJyZWFrcG9pbnRzID0gdGhlbWUuYnJlYWtwb2ludHMgfHwgZGVmYXVsdEJyZWFrcG9pbnRzO1xuICAgIHJldHVybiBwcm9wVmFsdWUucmVkdWNlKChhY2MsIGl0ZW0sIGluZGV4KSA9PiB7XG4gICAgICBhY2NbdGhlbWVCcmVha3BvaW50cy51cCh0aGVtZUJyZWFrcG9pbnRzLmtleXNbaW5kZXhdKV0gPSBzdHlsZUZyb21Qcm9wVmFsdWUocHJvcFZhbHVlW2luZGV4XSk7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbiAgfVxuICBpZiAodHlwZW9mIHByb3BWYWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICBjb25zdCB0aGVtZUJyZWFrcG9pbnRzID0gdGhlbWUuYnJlYWtwb2ludHMgfHwgZGVmYXVsdEJyZWFrcG9pbnRzO1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhwcm9wVmFsdWUpLnJlZHVjZSgoYWNjLCBicmVha3BvaW50KSA9PiB7XG4gICAgICAvLyBrZXkgaXMgYnJlYWtwb2ludFxuICAgICAgaWYgKE9iamVjdC5rZXlzKHRoZW1lQnJlYWtwb2ludHMudmFsdWVzIHx8IHZhbHVlcykuaW5kZXhPZihicmVha3BvaW50KSAhPT0gLTEpIHtcbiAgICAgICAgY29uc3QgbWVkaWFLZXkgPSB0aGVtZUJyZWFrcG9pbnRzLnVwKGJyZWFrcG9pbnQpO1xuICAgICAgICBhY2NbbWVkaWFLZXldID0gc3R5bGVGcm9tUHJvcFZhbHVlKHByb3BWYWx1ZVticmVha3BvaW50XSwgYnJlYWtwb2ludCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBjc3NLZXkgPSBicmVha3BvaW50O1xuICAgICAgICBhY2NbY3NzS2V5XSA9IHByb3BWYWx1ZVtjc3NLZXldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSk7XG4gIH1cbiAgY29uc3Qgb3V0cHV0ID0gc3R5bGVGcm9tUHJvcFZhbHVlKHByb3BWYWx1ZSk7XG4gIHJldHVybiBvdXRwdXQ7XG59XG5mdW5jdGlvbiBicmVha3BvaW50cyhzdHlsZUZ1bmN0aW9uKSB7XG4gIC8vIGZhbHNlIHBvc2l0aXZlXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9mdW5jdGlvbi1jb21wb25lbnQtZGVmaW5pdGlvblxuICBjb25zdCBuZXdTdHlsZUZ1bmN0aW9uID0gcHJvcHMgPT4ge1xuICAgIGNvbnN0IHRoZW1lID0gcHJvcHMudGhlbWUgfHwge307XG4gICAgY29uc3QgYmFzZSA9IHN0eWxlRnVuY3Rpb24ocHJvcHMpO1xuICAgIGNvbnN0IHRoZW1lQnJlYWtwb2ludHMgPSB0aGVtZS5icmVha3BvaW50cyB8fCBkZWZhdWx0QnJlYWtwb2ludHM7XG4gICAgY29uc3QgZXh0ZW5kZWQgPSB0aGVtZUJyZWFrcG9pbnRzLmtleXMucmVkdWNlKChhY2MsIGtleSkgPT4ge1xuICAgICAgaWYgKHByb3BzW2tleV0pIHtcbiAgICAgICAgYWNjID0gYWNjIHx8IHt9O1xuICAgICAgICBhY2NbdGhlbWVCcmVha3BvaW50cy51cChrZXkpXSA9IHN0eWxlRnVuY3Rpb24oX2V4dGVuZHMoe1xuICAgICAgICAgIHRoZW1lXG4gICAgICAgIH0sIHByb3BzW2tleV0pKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwgbnVsbCk7XG4gICAgcmV0dXJuIG1lcmdlKGJhc2UsIGV4dGVuZGVkKTtcbiAgfTtcbiAgbmV3U3R5bGVGdW5jdGlvbi5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gX2V4dGVuZHMoe30sIHN0eWxlRnVuY3Rpb24ucHJvcFR5cGVzLCB7XG4gICAgeHM6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgc206IFByb3BUeXBlcy5vYmplY3QsXG4gICAgbWQ6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgbGc6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgeGw6IFByb3BUeXBlcy5vYmplY3RcbiAgfSkgOiB7fTtcbiAgbmV3U3R5bGVGdW5jdGlvbi5maWx0ZXJQcm9wcyA9IFsneHMnLCAnc20nLCAnbWQnLCAnbGcnLCAneGwnLCAuLi5zdHlsZUZ1bmN0aW9uLmZpbHRlclByb3BzXTtcbiAgcmV0dXJuIG5ld1N0eWxlRnVuY3Rpb247XG59XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRW1wdHlCcmVha3BvaW50T2JqZWN0KGJyZWFrcG9pbnRzSW5wdXQgPSB7fSkge1xuICB2YXIgX2JyZWFrcG9pbnRzSW5wdXQka2V5O1xuICBjb25zdCBicmVha3BvaW50c0luT3JkZXIgPSAoX2JyZWFrcG9pbnRzSW5wdXQka2V5ID0gYnJlYWtwb2ludHNJbnB1dC5rZXlzKSA9PSBudWxsID8gdm9pZCAwIDogX2JyZWFrcG9pbnRzSW5wdXQka2V5LnJlZHVjZSgoYWNjLCBrZXkpID0+IHtcbiAgICBjb25zdCBicmVha3BvaW50U3R5bGVLZXkgPSBicmVha3BvaW50c0lucHV0LnVwKGtleSk7XG4gICAgYWNjW2JyZWFrcG9pbnRTdHlsZUtleV0gPSB7fTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG4gIHJldHVybiBicmVha3BvaW50c0luT3JkZXIgfHwge307XG59XG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlVW51c2VkQnJlYWtwb2ludHMoYnJlYWtwb2ludEtleXMsIHN0eWxlKSB7XG4gIHJldHVybiBicmVha3BvaW50S2V5cy5yZWR1Y2UoKGFjYywga2V5KSA9PiB7XG4gICAgY29uc3QgYnJlYWtwb2ludE91dHB1dCA9IGFjY1trZXldO1xuICAgIGNvbnN0IGlzQnJlYWtwb2ludFVudXNlZCA9ICFicmVha3BvaW50T3V0cHV0IHx8IE9iamVjdC5rZXlzKGJyZWFrcG9pbnRPdXRwdXQpLmxlbmd0aCA9PT0gMDtcbiAgICBpZiAoaXNCcmVha3BvaW50VW51c2VkKSB7XG4gICAgICBkZWxldGUgYWNjW2tleV07XG4gICAgfVxuICAgIHJldHVybiBhY2M7XG4gIH0sIHN0eWxlKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZUJyZWFrcG9pbnRzSW5PcmRlcihicmVha3BvaW50c0lucHV0LCAuLi5zdHlsZXMpIHtcbiAgY29uc3QgZW1wdHlCcmVha3BvaW50cyA9IGNyZWF0ZUVtcHR5QnJlYWtwb2ludE9iamVjdChicmVha3BvaW50c0lucHV0KTtcbiAgY29uc3QgbWVyZ2VkT3V0cHV0ID0gW2VtcHR5QnJlYWtwb2ludHMsIC4uLnN0eWxlc10ucmVkdWNlKChwcmV2LCBuZXh0KSA9PiBkZWVwbWVyZ2UocHJldiwgbmV4dCksIHt9KTtcbiAgcmV0dXJuIHJlbW92ZVVudXNlZEJyZWFrcG9pbnRzKE9iamVjdC5rZXlzKGVtcHR5QnJlYWtwb2ludHMpLCBtZXJnZWRPdXRwdXQpO1xufVxuXG4vLyBjb21wdXRlIGJhc2UgZm9yIHJlc3BvbnNpdmUgdmFsdWVzOyBlLmcuLFxuLy8gWzEsMiwzXSA9PiB7eHM6IHRydWUsIHNtOiB0cnVlLCBtZDogdHJ1ZX1cbi8vIHt4czogMSwgc206IDIsIG1kOiAzfSA9PiB7eHM6IHRydWUsIHNtOiB0cnVlLCBtZDogdHJ1ZX1cbmV4cG9ydCBmdW5jdGlvbiBjb21wdXRlQnJlYWtwb2ludHNCYXNlKGJyZWFrcG9pbnRWYWx1ZXMsIHRoZW1lQnJlYWtwb2ludHMpIHtcbiAgLy8gZml4ZWQgdmFsdWVcbiAgaWYgKHR5cGVvZiBicmVha3BvaW50VmFsdWVzICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiB7fTtcbiAgfVxuICBjb25zdCBiYXNlID0ge307XG4gIGNvbnN0IGJyZWFrcG9pbnRzS2V5cyA9IE9iamVjdC5rZXlzKHRoZW1lQnJlYWtwb2ludHMpO1xuICBpZiAoQXJyYXkuaXNBcnJheShicmVha3BvaW50VmFsdWVzKSkge1xuICAgIGJyZWFrcG9pbnRzS2V5cy5mb3JFYWNoKChicmVha3BvaW50LCBpKSA9PiB7XG4gICAgICBpZiAoaSA8IGJyZWFrcG9pbnRWYWx1ZXMubGVuZ3RoKSB7XG4gICAgICAgIGJhc2VbYnJlYWtwb2ludF0gPSB0cnVlO1xuICAgICAgfVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGJyZWFrcG9pbnRzS2V5cy5mb3JFYWNoKGJyZWFrcG9pbnQgPT4ge1xuICAgICAgaWYgKGJyZWFrcG9pbnRWYWx1ZXNbYnJlYWtwb2ludF0gIT0gbnVsbCkge1xuICAgICAgICBiYXNlW2JyZWFrcG9pbnRdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICByZXR1cm4gYmFzZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlQnJlYWtwb2ludFZhbHVlcyh7XG4gIHZhbHVlczogYnJlYWtwb2ludFZhbHVlcyxcbiAgYnJlYWtwb2ludHM6IHRoZW1lQnJlYWtwb2ludHMsXG4gIGJhc2U6IGN1c3RvbUJhc2Vcbn0pIHtcbiAgY29uc3QgYmFzZSA9IGN1c3RvbUJhc2UgfHwgY29tcHV0ZUJyZWFrcG9pbnRzQmFzZShicmVha3BvaW50VmFsdWVzLCB0aGVtZUJyZWFrcG9pbnRzKTtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGJhc2UpO1xuICBpZiAoa2V5cy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gYnJlYWtwb2ludFZhbHVlcztcbiAgfVxuICBsZXQgcHJldmlvdXM7XG4gIHJldHVybiBrZXlzLnJlZHVjZSgoYWNjLCBicmVha3BvaW50LCBpKSA9PiB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYnJlYWtwb2ludFZhbHVlcykpIHtcbiAgICAgIGFjY1ticmVha3BvaW50XSA9IGJyZWFrcG9pbnRWYWx1ZXNbaV0gIT0gbnVsbCA/IGJyZWFrcG9pbnRWYWx1ZXNbaV0gOiBicmVha3BvaW50VmFsdWVzW3ByZXZpb3VzXTtcbiAgICAgIHByZXZpb3VzID0gaTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBicmVha3BvaW50VmFsdWVzID09PSAnb2JqZWN0Jykge1xuICAgICAgYWNjW2JyZWFrcG9pbnRdID0gYnJlYWtwb2ludFZhbHVlc1ticmVha3BvaW50XSAhPSBudWxsID8gYnJlYWtwb2ludFZhbHVlc1ticmVha3BvaW50XSA6IGJyZWFrcG9pbnRWYWx1ZXNbcHJldmlvdXNdO1xuICAgICAgcHJldmlvdXMgPSBicmVha3BvaW50O1xuICAgIH0gZWxzZSB7XG4gICAgICBhY2NbYnJlYWtwb2ludF0gPSBicmVha3BvaW50VmFsdWVzO1xuICAgIH1cbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG59XG5leHBvcnQgZGVmYXVsdCBicmVha3BvaW50czsiLCJpbXBvcnQgX2Zvcm1hdE11aUVycm9yTWVzc2FnZSBmcm9tIFwiQG11aS91dGlscy9mb3JtYXRNdWlFcnJvck1lc3NhZ2VcIjtcbi8vIEl0IHNob3VsZCB0byBiZSBub3RlZCB0aGF0IHRoaXMgZnVuY3Rpb24gaXNuJ3QgZXF1aXZhbGVudCB0byBgdGV4dC10cmFuc2Zvcm06IGNhcGl0YWxpemVgLlxuLy9cbi8vIEEgc3RyaWN0IGNhcGl0YWxpemF0aW9uIHNob3VsZCB1cHBlcmNhc2UgdGhlIGZpcnN0IGxldHRlciBvZiBlYWNoIHdvcmQgaW4gdGhlIHNlbnRlbmNlLlxuLy8gV2Ugb25seSBoYW5kbGUgdGhlIGZpcnN0IHdvcmQuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjYXBpdGFsaXplKHN0cmluZykge1xuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gYE1VSTogXFxgY2FwaXRhbGl6ZShzdHJpbmcpXFxgIGV4cGVjdHMgYSBzdHJpbmcgYXJndW1lbnQuYCA6IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UoNykpO1xuICB9XG4gIHJldHVybiBzdHJpbmcuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHJpbmcuc2xpY2UoMSk7XG59IiwiaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnQG11aS91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCByZXNwb25zaXZlUHJvcFR5cGUgZnJvbSAnLi9yZXNwb25zaXZlUHJvcFR5cGUnO1xuaW1wb3J0IHsgaGFuZGxlQnJlYWtwb2ludHMgfSBmcm9tICcuL2JyZWFrcG9pbnRzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRQYXRoKG9iaiwgcGF0aCwgY2hlY2tWYXJzID0gdHJ1ZSkge1xuICBpZiAoIXBhdGggfHwgdHlwZW9mIHBhdGggIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvLyBDaGVjayBpZiBDU1MgdmFyaWFibGVzIGFyZSB1c2VkXG4gIGlmIChvYmogJiYgb2JqLnZhcnMgJiYgY2hlY2tWYXJzKSB7XG4gICAgY29uc3QgdmFsID0gYHZhcnMuJHtwYXRofWAuc3BsaXQoJy4nKS5yZWR1Y2UoKGFjYywgaXRlbSkgPT4gYWNjICYmIGFjY1tpdGVtXSA/IGFjY1tpdGVtXSA6IG51bGwsIG9iaik7XG4gICAgaWYgKHZhbCAhPSBudWxsKSB7XG4gICAgICByZXR1cm4gdmFsO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcGF0aC5zcGxpdCgnLicpLnJlZHVjZSgoYWNjLCBpdGVtKSA9PiB7XG4gICAgaWYgKGFjYyAmJiBhY2NbaXRlbV0gIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGFjY1tpdGVtXTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sIG9iaik7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0U3R5bGVWYWx1ZSh0aGVtZU1hcHBpbmcsIHRyYW5zZm9ybSwgcHJvcFZhbHVlRmluYWwsIHVzZXJWYWx1ZSA9IHByb3BWYWx1ZUZpbmFsKSB7XG4gIGxldCB2YWx1ZTtcbiAgaWYgKHR5cGVvZiB0aGVtZU1hcHBpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YWx1ZSA9IHRoZW1lTWFwcGluZyhwcm9wVmFsdWVGaW5hbCk7XG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh0aGVtZU1hcHBpbmcpKSB7XG4gICAgdmFsdWUgPSB0aGVtZU1hcHBpbmdbcHJvcFZhbHVlRmluYWxdIHx8IHVzZXJWYWx1ZTtcbiAgfSBlbHNlIHtcbiAgICB2YWx1ZSA9IGdldFBhdGgodGhlbWVNYXBwaW5nLCBwcm9wVmFsdWVGaW5hbCkgfHwgdXNlclZhbHVlO1xuICB9XG4gIGlmICh0cmFuc2Zvcm0pIHtcbiAgICB2YWx1ZSA9IHRyYW5zZm9ybSh2YWx1ZSwgdXNlclZhbHVlLCB0aGVtZU1hcHBpbmcpO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIHN0eWxlKG9wdGlvbnMpIHtcbiAgY29uc3Qge1xuICAgIHByb3AsXG4gICAgY3NzUHJvcGVydHkgPSBvcHRpb25zLnByb3AsXG4gICAgdGhlbWVLZXksXG4gICAgdHJhbnNmb3JtXG4gIH0gPSBvcHRpb25zO1xuXG4gIC8vIGZhbHNlIHBvc2l0aXZlXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9mdW5jdGlvbi1jb21wb25lbnQtZGVmaW5pdGlvblxuICBjb25zdCBmbiA9IHByb3BzID0+IHtcbiAgICBpZiAocHJvcHNbcHJvcF0gPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IHByb3BWYWx1ZSA9IHByb3BzW3Byb3BdO1xuICAgIGNvbnN0IHRoZW1lID0gcHJvcHMudGhlbWU7XG4gICAgY29uc3QgdGhlbWVNYXBwaW5nID0gZ2V0UGF0aCh0aGVtZSwgdGhlbWVLZXkpIHx8IHt9O1xuICAgIGNvbnN0IHN0eWxlRnJvbVByb3BWYWx1ZSA9IHByb3BWYWx1ZUZpbmFsID0+IHtcbiAgICAgIGxldCB2YWx1ZSA9IGdldFN0eWxlVmFsdWUodGhlbWVNYXBwaW5nLCB0cmFuc2Zvcm0sIHByb3BWYWx1ZUZpbmFsKTtcbiAgICAgIGlmIChwcm9wVmFsdWVGaW5hbCA9PT0gdmFsdWUgJiYgdHlwZW9mIHByb3BWYWx1ZUZpbmFsID09PSAnc3RyaW5nJykge1xuICAgICAgICAvLyBIYXZlbid0IGZvdW5kIHZhbHVlXG4gICAgICAgIHZhbHVlID0gZ2V0U3R5bGVWYWx1ZSh0aGVtZU1hcHBpbmcsIHRyYW5zZm9ybSwgYCR7cHJvcH0ke3Byb3BWYWx1ZUZpbmFsID09PSAnZGVmYXVsdCcgPyAnJyA6IGNhcGl0YWxpemUocHJvcFZhbHVlRmluYWwpfWAsIHByb3BWYWx1ZUZpbmFsKTtcbiAgICAgIH1cbiAgICAgIGlmIChjc3NQcm9wZXJ0eSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgW2Nzc1Byb3BlcnR5XTogdmFsdWVcbiAgICAgIH07XG4gICAgfTtcbiAgICByZXR1cm4gaGFuZGxlQnJlYWtwb2ludHMocHJvcHMsIHByb3BWYWx1ZSwgc3R5bGVGcm9tUHJvcFZhbHVlKTtcbiAgfTtcbiAgZm4ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHtcbiAgICBbcHJvcF06IHJlc3BvbnNpdmVQcm9wVHlwZVxuICB9IDoge307XG4gIGZuLmZpbHRlclByb3BzID0gW3Byb3BdO1xuICByZXR1cm4gZm47XG59XG5leHBvcnQgZGVmYXVsdCBzdHlsZTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtZW1vaXplKGZuKSB7XG4gIGNvbnN0IGNhY2hlID0ge307XG4gIHJldHVybiBhcmcgPT4ge1xuICAgIGlmIChjYWNoZVthcmddID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGNhY2hlW2FyZ10gPSBmbihhcmcpO1xuICAgIH1cbiAgICByZXR1cm4gY2FjaGVbYXJnXTtcbiAgfTtcbn0iLCJpbXBvcnQgcmVzcG9uc2l2ZVByb3BUeXBlIGZyb20gJy4vcmVzcG9uc2l2ZVByb3BUeXBlJztcbmltcG9ydCB7IGhhbmRsZUJyZWFrcG9pbnRzIH0gZnJvbSAnLi9icmVha3BvaW50cyc7XG5pbXBvcnQgeyBnZXRQYXRoIH0gZnJvbSAnLi9zdHlsZSc7XG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi9tZXJnZSc7XG5pbXBvcnQgbWVtb2l6ZSBmcm9tICcuL21lbW9pemUnO1xuY29uc3QgcHJvcGVydGllcyA9IHtcbiAgbTogJ21hcmdpbicsXG4gIHA6ICdwYWRkaW5nJ1xufTtcbmNvbnN0IGRpcmVjdGlvbnMgPSB7XG4gIHQ6ICdUb3AnLFxuICByOiAnUmlnaHQnLFxuICBiOiAnQm90dG9tJyxcbiAgbDogJ0xlZnQnLFxuICB4OiBbJ0xlZnQnLCAnUmlnaHQnXSxcbiAgeTogWydUb3AnLCAnQm90dG9tJ11cbn07XG5jb25zdCBhbGlhc2VzID0ge1xuICBtYXJnaW5YOiAnbXgnLFxuICBtYXJnaW5ZOiAnbXknLFxuICBwYWRkaW5nWDogJ3B4JyxcbiAgcGFkZGluZ1k6ICdweSdcbn07XG5cbi8vIG1lbW9pemUoKSBpbXBhY3Q6XG4vLyBGcm9tIDMwMCwwMDAgb3BzL3NlY1xuLy8gVG8gMzUwLDAwMCBvcHMvc2VjXG5jb25zdCBnZXRDc3NQcm9wZXJ0aWVzID0gbWVtb2l6ZShwcm9wID0+IHtcbiAgLy8gSXQncyBub3QgYSBzaG9ydGhhbmQgbm90YXRpb24uXG4gIGlmIChwcm9wLmxlbmd0aCA+IDIpIHtcbiAgICBpZiAoYWxpYXNlc1twcm9wXSkge1xuICAgICAgcHJvcCA9IGFsaWFzZXNbcHJvcF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBbcHJvcF07XG4gICAgfVxuICB9XG4gIGNvbnN0IFthLCBiXSA9IHByb3Auc3BsaXQoJycpO1xuICBjb25zdCBwcm9wZXJ0eSA9IHByb3BlcnRpZXNbYV07XG4gIGNvbnN0IGRpcmVjdGlvbiA9IGRpcmVjdGlvbnNbYl0gfHwgJyc7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGRpcmVjdGlvbikgPyBkaXJlY3Rpb24ubWFwKGRpciA9PiBwcm9wZXJ0eSArIGRpcikgOiBbcHJvcGVydHkgKyBkaXJlY3Rpb25dO1xufSk7XG5leHBvcnQgY29uc3QgbWFyZ2luS2V5cyA9IFsnbScsICdtdCcsICdtcicsICdtYicsICdtbCcsICdteCcsICdteScsICdtYXJnaW4nLCAnbWFyZ2luVG9wJywgJ21hcmdpblJpZ2h0JywgJ21hcmdpbkJvdHRvbScsICdtYXJnaW5MZWZ0JywgJ21hcmdpblgnLCAnbWFyZ2luWScsICdtYXJnaW5JbmxpbmUnLCAnbWFyZ2luSW5saW5lU3RhcnQnLCAnbWFyZ2luSW5saW5lRW5kJywgJ21hcmdpbkJsb2NrJywgJ21hcmdpbkJsb2NrU3RhcnQnLCAnbWFyZ2luQmxvY2tFbmQnXTtcbmV4cG9ydCBjb25zdCBwYWRkaW5nS2V5cyA9IFsncCcsICdwdCcsICdwcicsICdwYicsICdwbCcsICdweCcsICdweScsICdwYWRkaW5nJywgJ3BhZGRpbmdUb3AnLCAncGFkZGluZ1JpZ2h0JywgJ3BhZGRpbmdCb3R0b20nLCAncGFkZGluZ0xlZnQnLCAncGFkZGluZ1gnLCAncGFkZGluZ1knLCAncGFkZGluZ0lubGluZScsICdwYWRkaW5nSW5saW5lU3RhcnQnLCAncGFkZGluZ0lubGluZUVuZCcsICdwYWRkaW5nQmxvY2snLCAncGFkZGluZ0Jsb2NrU3RhcnQnLCAncGFkZGluZ0Jsb2NrRW5kJ107XG5jb25zdCBzcGFjaW5nS2V5cyA9IFsuLi5tYXJnaW5LZXlzLCAuLi5wYWRkaW5nS2V5c107XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVW5hcnlVbml0KHRoZW1lLCB0aGVtZUtleSwgZGVmYXVsdFZhbHVlLCBwcm9wTmFtZSkge1xuICB2YXIgX2dldFBhdGg7XG4gIGNvbnN0IHRoZW1lU3BhY2luZyA9IChfZ2V0UGF0aCA9IGdldFBhdGgodGhlbWUsIHRoZW1lS2V5LCBmYWxzZSkpICE9IG51bGwgPyBfZ2V0UGF0aCA6IGRlZmF1bHRWYWx1ZTtcbiAgaWYgKHR5cGVvZiB0aGVtZVNwYWNpbmcgPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIGFicyA9PiB7XG4gICAgICBpZiAodHlwZW9mIGFicyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIGFicztcbiAgICAgIH1cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYWJzICE9PSAnbnVtYmVyJykge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYE1VSTogRXhwZWN0ZWQgJHtwcm9wTmFtZX0gYXJndW1lbnQgdG8gYmUgYSBudW1iZXIgb3IgYSBzdHJpbmcsIGdvdCAke2Fic30uYCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGVtZVNwYWNpbmcgKiBhYnM7XG4gICAgfTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh0aGVtZVNwYWNpbmcpKSB7XG4gICAgcmV0dXJuIGFicyA9PiB7XG4gICAgICBpZiAodHlwZW9mIGFicyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIGFicztcbiAgICAgIH1cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihhYnMpKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihbYE1VSTogVGhlIFxcYHRoZW1lLiR7dGhlbWVLZXl9XFxgIGFycmF5IHR5cGUgY2Fubm90IGJlIGNvbWJpbmVkIHdpdGggbm9uIGludGVnZXIgdmFsdWVzLmAgKyBgWW91IHNob3VsZCBlaXRoZXIgdXNlIGFuIGludGVnZXIgdmFsdWUgdGhhdCBjYW4gYmUgdXNlZCBhcyBpbmRleCwgb3IgZGVmaW5lIHRoZSBcXGB0aGVtZS4ke3RoZW1lS2V5fVxcYCBhcyBhIG51bWJlci5gXS5qb2luKCdcXG4nKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoYWJzID4gdGhlbWVTcGFjaW5nLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFtgTVVJOiBUaGUgdmFsdWUgcHJvdmlkZWQgKCR7YWJzfSkgb3ZlcmZsb3dzLmAsIGBUaGUgc3VwcG9ydGVkIHZhbHVlcyBhcmU6ICR7SlNPTi5zdHJpbmdpZnkodGhlbWVTcGFjaW5nKX0uYCwgYCR7YWJzfSA+ICR7dGhlbWVTcGFjaW5nLmxlbmd0aCAtIDF9LCB5b3UgbmVlZCB0byBhZGQgdGhlIG1pc3NpbmcgdmFsdWVzLmBdLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoZW1lU3BhY2luZ1thYnNdO1xuICAgIH07XG4gIH1cbiAgaWYgKHR5cGVvZiB0aGVtZVNwYWNpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gdGhlbWVTcGFjaW5nO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY29uc29sZS5lcnJvcihbYE1VSTogVGhlIFxcYHRoZW1lLiR7dGhlbWVLZXl9XFxgIHZhbHVlICgke3RoZW1lU3BhY2luZ30pIGlzIGludmFsaWQuYCwgJ0l0IHNob3VsZCBiZSBhIG51bWJlciwgYW4gYXJyYXkgb3IgYSBmdW5jdGlvbi4nXS5qb2luKCdcXG4nKSk7XG4gIH1cbiAgcmV0dXJuICgpID0+IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVVbmFyeVNwYWNpbmcodGhlbWUpIHtcbiAgcmV0dXJuIGNyZWF0ZVVuYXJ5VW5pdCh0aGVtZSwgJ3NwYWNpbmcnLCA4LCAnc3BhY2luZycpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldFZhbHVlKHRyYW5zZm9ybWVyLCBwcm9wVmFsdWUpIHtcbiAgaWYgKHR5cGVvZiBwcm9wVmFsdWUgPT09ICdzdHJpbmcnIHx8IHByb3BWYWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHByb3BWYWx1ZTtcbiAgfVxuICBjb25zdCBhYnMgPSBNYXRoLmFicyhwcm9wVmFsdWUpO1xuICBjb25zdCB0cmFuc2Zvcm1lZCA9IHRyYW5zZm9ybWVyKGFicyk7XG4gIGlmIChwcm9wVmFsdWUgPj0gMCkge1xuICAgIHJldHVybiB0cmFuc2Zvcm1lZDtcbiAgfVxuICBpZiAodHlwZW9mIHRyYW5zZm9ybWVkID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiAtdHJhbnNmb3JtZWQ7XG4gIH1cbiAgcmV0dXJuIGAtJHt0cmFuc2Zvcm1lZH1gO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldFN0eWxlRnJvbVByb3BWYWx1ZShjc3NQcm9wZXJ0aWVzLCB0cmFuc2Zvcm1lcikge1xuICByZXR1cm4gcHJvcFZhbHVlID0+IGNzc1Byb3BlcnRpZXMucmVkdWNlKChhY2MsIGNzc1Byb3BlcnR5KSA9PiB7XG4gICAgYWNjW2Nzc1Byb3BlcnR5XSA9IGdldFZhbHVlKHRyYW5zZm9ybWVyLCBwcm9wVmFsdWUpO1xuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVDc3NQcm9wZXJ0eShwcm9wcywga2V5cywgcHJvcCwgdHJhbnNmb3JtZXIpIHtcbiAgLy8gVXNpbmcgYSBoYXNoIGNvbXB1dGF0aW9uIG92ZXIgYW4gYXJyYXkgaXRlcmF0aW9uIGNvdWxkIGJlIGZhc3RlciwgYnV0IHdpdGggb25seSAyOCBpdGVtcyxcbiAgLy8gaXQncyBkb2Vzbid0IHdvcnRoIHRoZSBidW5kbGUgc2l6ZS5cbiAgaWYgKGtleXMuaW5kZXhPZihwcm9wKSA9PT0gLTEpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBjb25zdCBjc3NQcm9wZXJ0aWVzID0gZ2V0Q3NzUHJvcGVydGllcyhwcm9wKTtcbiAgY29uc3Qgc3R5bGVGcm9tUHJvcFZhbHVlID0gZ2V0U3R5bGVGcm9tUHJvcFZhbHVlKGNzc1Byb3BlcnRpZXMsIHRyYW5zZm9ybWVyKTtcbiAgY29uc3QgcHJvcFZhbHVlID0gcHJvcHNbcHJvcF07XG4gIHJldHVybiBoYW5kbGVCcmVha3BvaW50cyhwcm9wcywgcHJvcFZhbHVlLCBzdHlsZUZyb21Qcm9wVmFsdWUpO1xufVxuZnVuY3Rpb24gc3R5bGUocHJvcHMsIGtleXMpIHtcbiAgY29uc3QgdHJhbnNmb3JtZXIgPSBjcmVhdGVVbmFyeVNwYWNpbmcocHJvcHMudGhlbWUpO1xuICByZXR1cm4gT2JqZWN0LmtleXMocHJvcHMpLm1hcChwcm9wID0+IHJlc29sdmVDc3NQcm9wZXJ0eShwcm9wcywga2V5cywgcHJvcCwgdHJhbnNmb3JtZXIpKS5yZWR1Y2UobWVyZ2UsIHt9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBtYXJnaW4ocHJvcHMpIHtcbiAgcmV0dXJuIHN0eWxlKHByb3BzLCBtYXJnaW5LZXlzKTtcbn1cbm1hcmdpbi5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gbWFyZ2luS2V5cy5yZWR1Y2UoKG9iaiwga2V5KSA9PiB7XG4gIG9ialtrZXldID0gcmVzcG9uc2l2ZVByb3BUeXBlO1xuICByZXR1cm4gb2JqO1xufSwge30pIDoge307XG5tYXJnaW4uZmlsdGVyUHJvcHMgPSBtYXJnaW5LZXlzO1xuZXhwb3J0IGZ1bmN0aW9uIHBhZGRpbmcocHJvcHMpIHtcbiAgcmV0dXJuIHN0eWxlKHByb3BzLCBwYWRkaW5nS2V5cyk7XG59XG5wYWRkaW5nLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBwYWRkaW5nS2V5cy5yZWR1Y2UoKG9iaiwga2V5KSA9PiB7XG4gIG9ialtrZXldID0gcmVzcG9uc2l2ZVByb3BUeXBlO1xuICByZXR1cm4gb2JqO1xufSwge30pIDoge307XG5wYWRkaW5nLmZpbHRlclByb3BzID0gcGFkZGluZ0tleXM7XG5mdW5jdGlvbiBzcGFjaW5nKHByb3BzKSB7XG4gIHJldHVybiBzdHlsZShwcm9wcywgc3BhY2luZ0tleXMpO1xufVxuc3BhY2luZy5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gc3BhY2luZ0tleXMucmVkdWNlKChvYmosIGtleSkgPT4ge1xuICBvYmpba2V5XSA9IHJlc3BvbnNpdmVQcm9wVHlwZTtcbiAgcmV0dXJuIG9iajtcbn0sIHt9KSA6IHt9O1xuc3BhY2luZy5maWx0ZXJQcm9wcyA9IHNwYWNpbmdLZXlzO1xuZXhwb3J0IGRlZmF1bHQgc3BhY2luZzsiLCJpbXBvcnQgeyBjcmVhdGVVbmFyeVNwYWNpbmcgfSBmcm9tICcuLi9zcGFjaW5nJztcblxuLy8gVGhlIGRpZmZlcmVudCBzaWduYXR1cmVzIGltcGx5IGRpZmZlcmVudCBtZWFuaW5nIGZvciB0aGVpciBhcmd1bWVudHMgdGhhdCBjYW4ndCBiZSBleHByZXNzZWQgc3RydWN0dXJhbGx5LlxuLy8gV2UgZXhwcmVzcyB0aGUgZGlmZmVyZW5jZSB3aXRoIHZhcmlhYmxlIG5hbWVzLlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVTcGFjaW5nKHNwYWNpbmdJbnB1dCA9IDgpIHtcbiAgLy8gQWxyZWFkeSB0cmFuc2Zvcm1lZC5cbiAgaWYgKHNwYWNpbmdJbnB1dC5tdWkpIHtcbiAgICByZXR1cm4gc3BhY2luZ0lucHV0O1xuICB9XG5cbiAgLy8gTWF0ZXJpYWwgRGVzaWduIGxheW91dHMgYXJlIHZpc3VhbGx5IGJhbGFuY2VkLiBNb3N0IG1lYXN1cmVtZW50cyBhbGlnbiB0byBhbiA4ZHAgZ3JpZCwgd2hpY2ggYWxpZ25zIGJvdGggc3BhY2luZyBhbmQgdGhlIG92ZXJhbGwgbGF5b3V0LlxuICAvLyBTbWFsbGVyIGNvbXBvbmVudHMsIHN1Y2ggYXMgaWNvbnMsIGNhbiBhbGlnbiB0byBhIDRkcCBncmlkLlxuICAvLyBodHRwczovL20yLm1hdGVyaWFsLmlvL2Rlc2lnbi9sYXlvdXQvdW5kZXJzdGFuZGluZy1sYXlvdXQuaHRtbFxuICBjb25zdCB0cmFuc2Zvcm0gPSBjcmVhdGVVbmFyeVNwYWNpbmcoe1xuICAgIHNwYWNpbmc6IHNwYWNpbmdJbnB1dFxuICB9KTtcbiAgY29uc3Qgc3BhY2luZyA9ICguLi5hcmdzSW5wdXQpID0+IHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCEoYXJnc0lucHV0Lmxlbmd0aCA8PSA0KSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKGBNVUk6IFRvbyBtYW55IGFyZ3VtZW50cyBwcm92aWRlZCwgZXhwZWN0ZWQgYmV0d2VlbiAwIGFuZCA0LCBnb3QgJHthcmdzSW5wdXQubGVuZ3RofWApO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBhcmdzID0gYXJnc0lucHV0Lmxlbmd0aCA9PT0gMCA/IFsxXSA6IGFyZ3NJbnB1dDtcbiAgICByZXR1cm4gYXJncy5tYXAoYXJndW1lbnQgPT4ge1xuICAgICAgY29uc3Qgb3V0cHV0ID0gdHJhbnNmb3JtKGFyZ3VtZW50KTtcbiAgICAgIHJldHVybiB0eXBlb2Ygb3V0cHV0ID09PSAnbnVtYmVyJyA/IGAke291dHB1dH1weGAgOiBvdXRwdXQ7XG4gICAgfSkuam9pbignICcpO1xuICB9O1xuICBzcGFjaW5nLm11aSA9IHRydWU7XG4gIHJldHVybiBzcGFjaW5nO1xufSIsImltcG9ydCBtZXJnZSBmcm9tICcuL21lcmdlJztcbmZ1bmN0aW9uIGNvbXBvc2UoLi4uc3R5bGVzKSB7XG4gIGNvbnN0IGhhbmRsZXJzID0gc3R5bGVzLnJlZHVjZSgoYWNjLCBzdHlsZSkgPT4ge1xuICAgIHN0eWxlLmZpbHRlclByb3BzLmZvckVhY2gocHJvcCA9PiB7XG4gICAgICBhY2NbcHJvcF0gPSBzdHlsZTtcbiAgICB9KTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG5cbiAgLy8gZmFsc2UgcG9zaXRpdmVcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L2Z1bmN0aW9uLWNvbXBvbmVudC1kZWZpbml0aW9uXG4gIGNvbnN0IGZuID0gcHJvcHMgPT4ge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhwcm9wcykucmVkdWNlKChhY2MsIHByb3ApID0+IHtcbiAgICAgIGlmIChoYW5kbGVyc1twcm9wXSkge1xuICAgICAgICByZXR1cm4gbWVyZ2UoYWNjLCBoYW5kbGVyc1twcm9wXShwcm9wcykpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSk7XG4gIH07XG4gIGZuLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBzdHlsZXMucmVkdWNlKChhY2MsIHN0eWxlKSA9PiBPYmplY3QuYXNzaWduKGFjYywgc3R5bGUucHJvcFR5cGVzKSwge30pIDoge307XG4gIGZuLmZpbHRlclByb3BzID0gc3R5bGVzLnJlZHVjZSgoYWNjLCBzdHlsZSkgPT4gYWNjLmNvbmNhdChzdHlsZS5maWx0ZXJQcm9wcyksIFtdKTtcbiAgcmV0dXJuIGZuO1xufVxuZXhwb3J0IGRlZmF1bHQgY29tcG9zZTsiLCJpbXBvcnQgcmVzcG9uc2l2ZVByb3BUeXBlIGZyb20gJy4vcmVzcG9uc2l2ZVByb3BUeXBlJztcbmltcG9ydCBzdHlsZSBmcm9tICcuL3N0eWxlJztcbmltcG9ydCBjb21wb3NlIGZyb20gJy4vY29tcG9zZSc7XG5pbXBvcnQgeyBjcmVhdGVVbmFyeVVuaXQsIGdldFZhbHVlIH0gZnJvbSAnLi9zcGFjaW5nJztcbmltcG9ydCB7IGhhbmRsZUJyZWFrcG9pbnRzIH0gZnJvbSAnLi9icmVha3BvaW50cyc7XG5leHBvcnQgZnVuY3Rpb24gYm9yZGVyVHJhbnNmb3JtKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHJldHVybiBgJHt2YWx1ZX1weCBzb2xpZGA7XG59XG5mdW5jdGlvbiBjcmVhdGVCb3JkZXJTdHlsZShwcm9wLCB0cmFuc2Zvcm0pIHtcbiAgcmV0dXJuIHN0eWxlKHtcbiAgICBwcm9wLFxuICAgIHRoZW1lS2V5OiAnYm9yZGVycycsXG4gICAgdHJhbnNmb3JtXG4gIH0pO1xufVxuZXhwb3J0IGNvbnN0IGJvcmRlciA9IGNyZWF0ZUJvcmRlclN0eWxlKCdib3JkZXInLCBib3JkZXJUcmFuc2Zvcm0pO1xuZXhwb3J0IGNvbnN0IGJvcmRlclRvcCA9IGNyZWF0ZUJvcmRlclN0eWxlKCdib3JkZXJUb3AnLCBib3JkZXJUcmFuc2Zvcm0pO1xuZXhwb3J0IGNvbnN0IGJvcmRlclJpZ2h0ID0gY3JlYXRlQm9yZGVyU3R5bGUoJ2JvcmRlclJpZ2h0JywgYm9yZGVyVHJhbnNmb3JtKTtcbmV4cG9ydCBjb25zdCBib3JkZXJCb3R0b20gPSBjcmVhdGVCb3JkZXJTdHlsZSgnYm9yZGVyQm90dG9tJywgYm9yZGVyVHJhbnNmb3JtKTtcbmV4cG9ydCBjb25zdCBib3JkZXJMZWZ0ID0gY3JlYXRlQm9yZGVyU3R5bGUoJ2JvcmRlckxlZnQnLCBib3JkZXJUcmFuc2Zvcm0pO1xuZXhwb3J0IGNvbnN0IGJvcmRlckNvbG9yID0gY3JlYXRlQm9yZGVyU3R5bGUoJ2JvcmRlckNvbG9yJyk7XG5leHBvcnQgY29uc3QgYm9yZGVyVG9wQ29sb3IgPSBjcmVhdGVCb3JkZXJTdHlsZSgnYm9yZGVyVG9wQ29sb3InKTtcbmV4cG9ydCBjb25zdCBib3JkZXJSaWdodENvbG9yID0gY3JlYXRlQm9yZGVyU3R5bGUoJ2JvcmRlclJpZ2h0Q29sb3InKTtcbmV4cG9ydCBjb25zdCBib3JkZXJCb3R0b21Db2xvciA9IGNyZWF0ZUJvcmRlclN0eWxlKCdib3JkZXJCb3R0b21Db2xvcicpO1xuZXhwb3J0IGNvbnN0IGJvcmRlckxlZnRDb2xvciA9IGNyZWF0ZUJvcmRlclN0eWxlKCdib3JkZXJMZWZ0Q29sb3InKTtcbmV4cG9ydCBjb25zdCBvdXRsaW5lID0gY3JlYXRlQm9yZGVyU3R5bGUoJ291dGxpbmUnLCBib3JkZXJUcmFuc2Zvcm0pO1xuZXhwb3J0IGNvbnN0IG91dGxpbmVDb2xvciA9IGNyZWF0ZUJvcmRlclN0eWxlKCdvdXRsaW5lQ29sb3InKTtcblxuLy8gZmFsc2UgcG9zaXRpdmVcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9mdW5jdGlvbi1jb21wb25lbnQtZGVmaW5pdGlvblxuZXhwb3J0IGNvbnN0IGJvcmRlclJhZGl1cyA9IHByb3BzID0+IHtcbiAgaWYgKHByb3BzLmJvcmRlclJhZGl1cyAhPT0gdW5kZWZpbmVkICYmIHByb3BzLmJvcmRlclJhZGl1cyAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHRyYW5zZm9ybWVyID0gY3JlYXRlVW5hcnlVbml0KHByb3BzLnRoZW1lLCAnc2hhcGUuYm9yZGVyUmFkaXVzJywgNCwgJ2JvcmRlclJhZGl1cycpO1xuICAgIGNvbnN0IHN0eWxlRnJvbVByb3BWYWx1ZSA9IHByb3BWYWx1ZSA9PiAoe1xuICAgICAgYm9yZGVyUmFkaXVzOiBnZXRWYWx1ZSh0cmFuc2Zvcm1lciwgcHJvcFZhbHVlKVxuICAgIH0pO1xuICAgIHJldHVybiBoYW5kbGVCcmVha3BvaW50cyhwcm9wcywgcHJvcHMuYm9yZGVyUmFkaXVzLCBzdHlsZUZyb21Qcm9wVmFsdWUpO1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcbmJvcmRlclJhZGl1cy5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8ge1xuICBib3JkZXJSYWRpdXM6IHJlc3BvbnNpdmVQcm9wVHlwZVxufSA6IHt9O1xuYm9yZGVyUmFkaXVzLmZpbHRlclByb3BzID0gWydib3JkZXJSYWRpdXMnXTtcbmNvbnN0IGJvcmRlcnMgPSBjb21wb3NlKGJvcmRlciwgYm9yZGVyVG9wLCBib3JkZXJSaWdodCwgYm9yZGVyQm90dG9tLCBib3JkZXJMZWZ0LCBib3JkZXJDb2xvciwgYm9yZGVyVG9wQ29sb3IsIGJvcmRlclJpZ2h0Q29sb3IsIGJvcmRlckJvdHRvbUNvbG9yLCBib3JkZXJMZWZ0Q29sb3IsIGJvcmRlclJhZGl1cywgb3V0bGluZSwgb3V0bGluZUNvbG9yKTtcbmV4cG9ydCBkZWZhdWx0IGJvcmRlcnM7IiwiaW1wb3J0IHN0eWxlIGZyb20gJy4vc3R5bGUnO1xuaW1wb3J0IGNvbXBvc2UgZnJvbSAnLi9jb21wb3NlJztcbmltcG9ydCB7IGNyZWF0ZVVuYXJ5VW5pdCwgZ2V0VmFsdWUgfSBmcm9tICcuL3NwYWNpbmcnO1xuaW1wb3J0IHsgaGFuZGxlQnJlYWtwb2ludHMgfSBmcm9tICcuL2JyZWFrcG9pbnRzJztcbmltcG9ydCByZXNwb25zaXZlUHJvcFR5cGUgZnJvbSAnLi9yZXNwb25zaXZlUHJvcFR5cGUnO1xuXG4vLyBmYWxzZSBwb3NpdGl2ZVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L2Z1bmN0aW9uLWNvbXBvbmVudC1kZWZpbml0aW9uXG5leHBvcnQgY29uc3QgZ2FwID0gcHJvcHMgPT4ge1xuICBpZiAocHJvcHMuZ2FwICE9PSB1bmRlZmluZWQgJiYgcHJvcHMuZ2FwICE9PSBudWxsKSB7XG4gICAgY29uc3QgdHJhbnNmb3JtZXIgPSBjcmVhdGVVbmFyeVVuaXQocHJvcHMudGhlbWUsICdzcGFjaW5nJywgOCwgJ2dhcCcpO1xuICAgIGNvbnN0IHN0eWxlRnJvbVByb3BWYWx1ZSA9IHByb3BWYWx1ZSA9PiAoe1xuICAgICAgZ2FwOiBnZXRWYWx1ZSh0cmFuc2Zvcm1lciwgcHJvcFZhbHVlKVxuICAgIH0pO1xuICAgIHJldHVybiBoYW5kbGVCcmVha3BvaW50cyhwcm9wcywgcHJvcHMuZ2FwLCBzdHlsZUZyb21Qcm9wVmFsdWUpO1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcbmdhcC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8ge1xuICBnYXA6IHJlc3BvbnNpdmVQcm9wVHlwZVxufSA6IHt9O1xuZ2FwLmZpbHRlclByb3BzID0gWydnYXAnXTtcblxuLy8gZmFsc2UgcG9zaXRpdmVcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9mdW5jdGlvbi1jb21wb25lbnQtZGVmaW5pdGlvblxuZXhwb3J0IGNvbnN0IGNvbHVtbkdhcCA9IHByb3BzID0+IHtcbiAgaWYgKHByb3BzLmNvbHVtbkdhcCAhPT0gdW5kZWZpbmVkICYmIHByb3BzLmNvbHVtbkdhcCAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHRyYW5zZm9ybWVyID0gY3JlYXRlVW5hcnlVbml0KHByb3BzLnRoZW1lLCAnc3BhY2luZycsIDgsICdjb2x1bW5HYXAnKTtcbiAgICBjb25zdCBzdHlsZUZyb21Qcm9wVmFsdWUgPSBwcm9wVmFsdWUgPT4gKHtcbiAgICAgIGNvbHVtbkdhcDogZ2V0VmFsdWUodHJhbnNmb3JtZXIsIHByb3BWYWx1ZSlcbiAgICB9KTtcbiAgICByZXR1cm4gaGFuZGxlQnJlYWtwb2ludHMocHJvcHMsIHByb3BzLmNvbHVtbkdhcCwgc3R5bGVGcm9tUHJvcFZhbHVlKTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG5jb2x1bW5HYXAucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHtcbiAgY29sdW1uR2FwOiByZXNwb25zaXZlUHJvcFR5cGVcbn0gOiB7fTtcbmNvbHVtbkdhcC5maWx0ZXJQcm9wcyA9IFsnY29sdW1uR2FwJ107XG5cbi8vIGZhbHNlIHBvc2l0aXZlXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvZnVuY3Rpb24tY29tcG9uZW50LWRlZmluaXRpb25cbmV4cG9ydCBjb25zdCByb3dHYXAgPSBwcm9wcyA9PiB7XG4gIGlmIChwcm9wcy5yb3dHYXAgIT09IHVuZGVmaW5lZCAmJiBwcm9wcy5yb3dHYXAgIT09IG51bGwpIHtcbiAgICBjb25zdCB0cmFuc2Zvcm1lciA9IGNyZWF0ZVVuYXJ5VW5pdChwcm9wcy50aGVtZSwgJ3NwYWNpbmcnLCA4LCAncm93R2FwJyk7XG4gICAgY29uc3Qgc3R5bGVGcm9tUHJvcFZhbHVlID0gcHJvcFZhbHVlID0+ICh7XG4gICAgICByb3dHYXA6IGdldFZhbHVlKHRyYW5zZm9ybWVyLCBwcm9wVmFsdWUpXG4gICAgfSk7XG4gICAgcmV0dXJuIGhhbmRsZUJyZWFrcG9pbnRzKHByb3BzLCBwcm9wcy5yb3dHYXAsIHN0eWxlRnJvbVByb3BWYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xucm93R2FwLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB7XG4gIHJvd0dhcDogcmVzcG9uc2l2ZVByb3BUeXBlXG59IDoge307XG5yb3dHYXAuZmlsdGVyUHJvcHMgPSBbJ3Jvd0dhcCddO1xuZXhwb3J0IGNvbnN0IGdyaWRDb2x1bW4gPSBzdHlsZSh7XG4gIHByb3A6ICdncmlkQ29sdW1uJ1xufSk7XG5leHBvcnQgY29uc3QgZ3JpZFJvdyA9IHN0eWxlKHtcbiAgcHJvcDogJ2dyaWRSb3cnXG59KTtcbmV4cG9ydCBjb25zdCBncmlkQXV0b0Zsb3cgPSBzdHlsZSh7XG4gIHByb3A6ICdncmlkQXV0b0Zsb3cnXG59KTtcbmV4cG9ydCBjb25zdCBncmlkQXV0b0NvbHVtbnMgPSBzdHlsZSh7XG4gIHByb3A6ICdncmlkQXV0b0NvbHVtbnMnXG59KTtcbmV4cG9ydCBjb25zdCBncmlkQXV0b1Jvd3MgPSBzdHlsZSh7XG4gIHByb3A6ICdncmlkQXV0b1Jvd3MnXG59KTtcbmV4cG9ydCBjb25zdCBncmlkVGVtcGxhdGVDb2x1bW5zID0gc3R5bGUoe1xuICBwcm9wOiAnZ3JpZFRlbXBsYXRlQ29sdW1ucydcbn0pO1xuZXhwb3J0IGNvbnN0IGdyaWRUZW1wbGF0ZVJvd3MgPSBzdHlsZSh7XG4gIHByb3A6ICdncmlkVGVtcGxhdGVSb3dzJ1xufSk7XG5leHBvcnQgY29uc3QgZ3JpZFRlbXBsYXRlQXJlYXMgPSBzdHlsZSh7XG4gIHByb3A6ICdncmlkVGVtcGxhdGVBcmVhcydcbn0pO1xuZXhwb3J0IGNvbnN0IGdyaWRBcmVhID0gc3R5bGUoe1xuICBwcm9wOiAnZ3JpZEFyZWEnXG59KTtcbmNvbnN0IGdyaWQgPSBjb21wb3NlKGdhcCwgY29sdW1uR2FwLCByb3dHYXAsIGdyaWRDb2x1bW4sIGdyaWRSb3csIGdyaWRBdXRvRmxvdywgZ3JpZEF1dG9Db2x1bW5zLCBncmlkQXV0b1Jvd3MsIGdyaWRUZW1wbGF0ZUNvbHVtbnMsIGdyaWRUZW1wbGF0ZVJvd3MsIGdyaWRUZW1wbGF0ZUFyZWFzLCBncmlkQXJlYSk7XG5leHBvcnQgZGVmYXVsdCBncmlkOyIsImltcG9ydCBzdHlsZSBmcm9tICcuL3N0eWxlJztcbmltcG9ydCBjb21wb3NlIGZyb20gJy4vY29tcG9zZSc7XG5leHBvcnQgZnVuY3Rpb24gcGFsZXR0ZVRyYW5zZm9ybSh2YWx1ZSwgdXNlclZhbHVlKSB7XG4gIGlmICh1c2VyVmFsdWUgPT09ICdncmV5Jykge1xuICAgIHJldHVybiB1c2VyVmFsdWU7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuZXhwb3J0IGNvbnN0IGNvbG9yID0gc3R5bGUoe1xuICBwcm9wOiAnY29sb3InLFxuICB0aGVtZUtleTogJ3BhbGV0dGUnLFxuICB0cmFuc2Zvcm06IHBhbGV0dGVUcmFuc2Zvcm1cbn0pO1xuZXhwb3J0IGNvbnN0IGJnY29sb3IgPSBzdHlsZSh7XG4gIHByb3A6ICdiZ2NvbG9yJyxcbiAgY3NzUHJvcGVydHk6ICdiYWNrZ3JvdW5kQ29sb3InLFxuICB0aGVtZUtleTogJ3BhbGV0dGUnLFxuICB0cmFuc2Zvcm06IHBhbGV0dGVUcmFuc2Zvcm1cbn0pO1xuZXhwb3J0IGNvbnN0IGJhY2tncm91bmRDb2xvciA9IHN0eWxlKHtcbiAgcHJvcDogJ2JhY2tncm91bmRDb2xvcicsXG4gIHRoZW1lS2V5OiAncGFsZXR0ZScsXG4gIHRyYW5zZm9ybTogcGFsZXR0ZVRyYW5zZm9ybVxufSk7XG5jb25zdCBwYWxldHRlID0gY29tcG9zZShjb2xvciwgYmdjb2xvciwgYmFja2dyb3VuZENvbG9yKTtcbmV4cG9ydCBkZWZhdWx0IHBhbGV0dGU7IiwiaW1wb3J0IHN0eWxlIGZyb20gJy4vc3R5bGUnO1xuaW1wb3J0IGNvbXBvc2UgZnJvbSAnLi9jb21wb3NlJztcbmltcG9ydCB7IGhhbmRsZUJyZWFrcG9pbnRzLCB2YWx1ZXMgYXMgYnJlYWtwb2ludHNWYWx1ZXMgfSBmcm9tICcuL2JyZWFrcG9pbnRzJztcbmV4cG9ydCBmdW5jdGlvbiBzaXppbmdUcmFuc2Zvcm0odmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlIDw9IDEgJiYgdmFsdWUgIT09IDAgPyBgJHt2YWx1ZSAqIDEwMH0lYCA6IHZhbHVlO1xufVxuZXhwb3J0IGNvbnN0IHdpZHRoID0gc3R5bGUoe1xuICBwcm9wOiAnd2lkdGgnLFxuICB0cmFuc2Zvcm06IHNpemluZ1RyYW5zZm9ybVxufSk7XG5leHBvcnQgY29uc3QgbWF4V2lkdGggPSBwcm9wcyA9PiB7XG4gIGlmIChwcm9wcy5tYXhXaWR0aCAhPT0gdW5kZWZpbmVkICYmIHByb3BzLm1heFdpZHRoICE9PSBudWxsKSB7XG4gICAgY29uc3Qgc3R5bGVGcm9tUHJvcFZhbHVlID0gcHJvcFZhbHVlID0+IHtcbiAgICAgIHZhciBfcHJvcHMkdGhlbWUsIF9wcm9wcyR0aGVtZTI7XG4gICAgICBjb25zdCBicmVha3BvaW50ID0gKChfcHJvcHMkdGhlbWUgPSBwcm9wcy50aGVtZSkgPT0gbnVsbCB8fCAoX3Byb3BzJHRoZW1lID0gX3Byb3BzJHRoZW1lLmJyZWFrcG9pbnRzKSA9PSBudWxsIHx8IChfcHJvcHMkdGhlbWUgPSBfcHJvcHMkdGhlbWUudmFsdWVzKSA9PSBudWxsID8gdm9pZCAwIDogX3Byb3BzJHRoZW1lW3Byb3BWYWx1ZV0pIHx8IGJyZWFrcG9pbnRzVmFsdWVzW3Byb3BWYWx1ZV07XG4gICAgICBpZiAoIWJyZWFrcG9pbnQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBtYXhXaWR0aDogc2l6aW5nVHJhbnNmb3JtKHByb3BWYWx1ZSlcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGlmICgoKF9wcm9wcyR0aGVtZTIgPSBwcm9wcy50aGVtZSkgPT0gbnVsbCB8fCAoX3Byb3BzJHRoZW1lMiA9IF9wcm9wcyR0aGVtZTIuYnJlYWtwb2ludHMpID09IG51bGwgPyB2b2lkIDAgOiBfcHJvcHMkdGhlbWUyLnVuaXQpICE9PSAncHgnKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbWF4V2lkdGg6IGAke2JyZWFrcG9pbnR9JHtwcm9wcy50aGVtZS5icmVha3BvaW50cy51bml0fWBcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIG1heFdpZHRoOiBicmVha3BvaW50XG4gICAgICB9O1xuICAgIH07XG4gICAgcmV0dXJuIGhhbmRsZUJyZWFrcG9pbnRzKHByb3BzLCBwcm9wcy5tYXhXaWR0aCwgc3R5bGVGcm9tUHJvcFZhbHVlKTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG5tYXhXaWR0aC5maWx0ZXJQcm9wcyA9IFsnbWF4V2lkdGgnXTtcbmV4cG9ydCBjb25zdCBtaW5XaWR0aCA9IHN0eWxlKHtcbiAgcHJvcDogJ21pbldpZHRoJyxcbiAgdHJhbnNmb3JtOiBzaXppbmdUcmFuc2Zvcm1cbn0pO1xuZXhwb3J0IGNvbnN0IGhlaWdodCA9IHN0eWxlKHtcbiAgcHJvcDogJ2hlaWdodCcsXG4gIHRyYW5zZm9ybTogc2l6aW5nVHJhbnNmb3JtXG59KTtcbmV4cG9ydCBjb25zdCBtYXhIZWlnaHQgPSBzdHlsZSh7XG4gIHByb3A6ICdtYXhIZWlnaHQnLFxuICB0cmFuc2Zvcm06IHNpemluZ1RyYW5zZm9ybVxufSk7XG5leHBvcnQgY29uc3QgbWluSGVpZ2h0ID0gc3R5bGUoe1xuICBwcm9wOiAnbWluSGVpZ2h0JyxcbiAgdHJhbnNmb3JtOiBzaXppbmdUcmFuc2Zvcm1cbn0pO1xuZXhwb3J0IGNvbnN0IHNpemVXaWR0aCA9IHN0eWxlKHtcbiAgcHJvcDogJ3NpemUnLFxuICBjc3NQcm9wZXJ0eTogJ3dpZHRoJyxcbiAgdHJhbnNmb3JtOiBzaXppbmdUcmFuc2Zvcm1cbn0pO1xuZXhwb3J0IGNvbnN0IHNpemVIZWlnaHQgPSBzdHlsZSh7XG4gIHByb3A6ICdzaXplJyxcbiAgY3NzUHJvcGVydHk6ICdoZWlnaHQnLFxuICB0cmFuc2Zvcm06IHNpemluZ1RyYW5zZm9ybVxufSk7XG5leHBvcnQgY29uc3QgYm94U2l6aW5nID0gc3R5bGUoe1xuICBwcm9wOiAnYm94U2l6aW5nJ1xufSk7XG5jb25zdCBzaXppbmcgPSBjb21wb3NlKHdpZHRoLCBtYXhXaWR0aCwgbWluV2lkdGgsIGhlaWdodCwgbWF4SGVpZ2h0LCBtaW5IZWlnaHQsIGJveFNpemluZyk7XG5leHBvcnQgZGVmYXVsdCBzaXppbmc7IiwiaW1wb3J0IHsgcGFkZGluZywgbWFyZ2luIH0gZnJvbSAnLi4vc3BhY2luZyc7XG5pbXBvcnQgeyBib3JkZXJSYWRpdXMsIGJvcmRlclRyYW5zZm9ybSB9IGZyb20gJy4uL2JvcmRlcnMnO1xuaW1wb3J0IHsgZ2FwLCByb3dHYXAsIGNvbHVtbkdhcCB9IGZyb20gJy4uL2Nzc0dyaWQnO1xuaW1wb3J0IHsgcGFsZXR0ZVRyYW5zZm9ybSB9IGZyb20gJy4uL3BhbGV0dGUnO1xuaW1wb3J0IHsgbWF4V2lkdGgsIHNpemluZ1RyYW5zZm9ybSB9IGZyb20gJy4uL3NpemluZyc7XG5jb25zdCBkZWZhdWx0U3hDb25maWcgPSB7XG4gIC8vIGJvcmRlcnNcbiAgYm9yZGVyOiB7XG4gICAgdGhlbWVLZXk6ICdib3JkZXJzJyxcbiAgICB0cmFuc2Zvcm06IGJvcmRlclRyYW5zZm9ybVxuICB9LFxuICBib3JkZXJUb3A6IHtcbiAgICB0aGVtZUtleTogJ2JvcmRlcnMnLFxuICAgIHRyYW5zZm9ybTogYm9yZGVyVHJhbnNmb3JtXG4gIH0sXG4gIGJvcmRlclJpZ2h0OiB7XG4gICAgdGhlbWVLZXk6ICdib3JkZXJzJyxcbiAgICB0cmFuc2Zvcm06IGJvcmRlclRyYW5zZm9ybVxuICB9LFxuICBib3JkZXJCb3R0b206IHtcbiAgICB0aGVtZUtleTogJ2JvcmRlcnMnLFxuICAgIHRyYW5zZm9ybTogYm9yZGVyVHJhbnNmb3JtXG4gIH0sXG4gIGJvcmRlckxlZnQ6IHtcbiAgICB0aGVtZUtleTogJ2JvcmRlcnMnLFxuICAgIHRyYW5zZm9ybTogYm9yZGVyVHJhbnNmb3JtXG4gIH0sXG4gIGJvcmRlckNvbG9yOiB7XG4gICAgdGhlbWVLZXk6ICdwYWxldHRlJ1xuICB9LFxuICBib3JkZXJUb3BDb2xvcjoge1xuICAgIHRoZW1lS2V5OiAncGFsZXR0ZSdcbiAgfSxcbiAgYm9yZGVyUmlnaHRDb2xvcjoge1xuICAgIHRoZW1lS2V5OiAncGFsZXR0ZSdcbiAgfSxcbiAgYm9yZGVyQm90dG9tQ29sb3I6IHtcbiAgICB0aGVtZUtleTogJ3BhbGV0dGUnXG4gIH0sXG4gIGJvcmRlckxlZnRDb2xvcjoge1xuICAgIHRoZW1lS2V5OiAncGFsZXR0ZSdcbiAgfSxcbiAgb3V0bGluZToge1xuICAgIHRoZW1lS2V5OiAnYm9yZGVycycsXG4gICAgdHJhbnNmb3JtOiBib3JkZXJUcmFuc2Zvcm1cbiAgfSxcbiAgb3V0bGluZUNvbG9yOiB7XG4gICAgdGhlbWVLZXk6ICdwYWxldHRlJ1xuICB9LFxuICBib3JkZXJSYWRpdXM6IHtcbiAgICB0aGVtZUtleTogJ3NoYXBlLmJvcmRlclJhZGl1cycsXG4gICAgc3R5bGU6IGJvcmRlclJhZGl1c1xuICB9LFxuICAvLyBwYWxldHRlXG4gIGNvbG9yOiB7XG4gICAgdGhlbWVLZXk6ICdwYWxldHRlJyxcbiAgICB0cmFuc2Zvcm06IHBhbGV0dGVUcmFuc2Zvcm1cbiAgfSxcbiAgYmdjb2xvcjoge1xuICAgIHRoZW1lS2V5OiAncGFsZXR0ZScsXG4gICAgY3NzUHJvcGVydHk6ICdiYWNrZ3JvdW5kQ29sb3InLFxuICAgIHRyYW5zZm9ybTogcGFsZXR0ZVRyYW5zZm9ybVxuICB9LFxuICBiYWNrZ3JvdW5kQ29sb3I6IHtcbiAgICB0aGVtZUtleTogJ3BhbGV0dGUnLFxuICAgIHRyYW5zZm9ybTogcGFsZXR0ZVRyYW5zZm9ybVxuICB9LFxuICAvLyBzcGFjaW5nXG4gIHA6IHtcbiAgICBzdHlsZTogcGFkZGluZ1xuICB9LFxuICBwdDoge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHByOiB7XG4gICAgc3R5bGU6IHBhZGRpbmdcbiAgfSxcbiAgcGI6IHtcbiAgICBzdHlsZTogcGFkZGluZ1xuICB9LFxuICBwbDoge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHB4OiB7XG4gICAgc3R5bGU6IHBhZGRpbmdcbiAgfSxcbiAgcHk6IHtcbiAgICBzdHlsZTogcGFkZGluZ1xuICB9LFxuICBwYWRkaW5nOiB7XG4gICAgc3R5bGU6IHBhZGRpbmdcbiAgfSxcbiAgcGFkZGluZ1RvcDoge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHBhZGRpbmdSaWdodDoge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHBhZGRpbmdCb3R0b206IHtcbiAgICBzdHlsZTogcGFkZGluZ1xuICB9LFxuICBwYWRkaW5nTGVmdDoge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHBhZGRpbmdYOiB7XG4gICAgc3R5bGU6IHBhZGRpbmdcbiAgfSxcbiAgcGFkZGluZ1k6IHtcbiAgICBzdHlsZTogcGFkZGluZ1xuICB9LFxuICBwYWRkaW5nSW5saW5lOiB7XG4gICAgc3R5bGU6IHBhZGRpbmdcbiAgfSxcbiAgcGFkZGluZ0lubGluZVN0YXJ0OiB7XG4gICAgc3R5bGU6IHBhZGRpbmdcbiAgfSxcbiAgcGFkZGluZ0lubGluZUVuZDoge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHBhZGRpbmdCbG9jazoge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHBhZGRpbmdCbG9ja1N0YXJ0OiB7XG4gICAgc3R5bGU6IHBhZGRpbmdcbiAgfSxcbiAgcGFkZGluZ0Jsb2NrRW5kOiB7XG4gICAgc3R5bGU6IHBhZGRpbmdcbiAgfSxcbiAgbToge1xuICAgIHN0eWxlOiBtYXJnaW5cbiAgfSxcbiAgbXQ6IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG1yOiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBtYjoge1xuICAgIHN0eWxlOiBtYXJnaW5cbiAgfSxcbiAgbWw6IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG14OiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBteToge1xuICAgIHN0eWxlOiBtYXJnaW5cbiAgfSxcbiAgbWFyZ2luOiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBtYXJnaW5Ub3A6IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG1hcmdpblJpZ2h0OiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBtYXJnaW5Cb3R0b206IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG1hcmdpbkxlZnQ6IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG1hcmdpblg6IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG1hcmdpblk6IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG1hcmdpbklubGluZToge1xuICAgIHN0eWxlOiBtYXJnaW5cbiAgfSxcbiAgbWFyZ2luSW5saW5lU3RhcnQ6IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG1hcmdpbklubGluZUVuZDoge1xuICAgIHN0eWxlOiBtYXJnaW5cbiAgfSxcbiAgbWFyZ2luQmxvY2s6IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG1hcmdpbkJsb2NrU3RhcnQ6IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG1hcmdpbkJsb2NrRW5kOiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICAvLyBkaXNwbGF5XG4gIGRpc3BsYXlQcmludDoge1xuICAgIGNzc1Byb3BlcnR5OiBmYWxzZSxcbiAgICB0cmFuc2Zvcm06IHZhbHVlID0+ICh7XG4gICAgICAnQG1lZGlhIHByaW50Jzoge1xuICAgICAgICBkaXNwbGF5OiB2YWx1ZVxuICAgICAgfVxuICAgIH0pXG4gIH0sXG4gIGRpc3BsYXk6IHt9LFxuICBvdmVyZmxvdzoge30sXG4gIHRleHRPdmVyZmxvdzoge30sXG4gIHZpc2liaWxpdHk6IHt9LFxuICB3aGl0ZVNwYWNlOiB7fSxcbiAgLy8gZmxleGJveFxuICBmbGV4QmFzaXM6IHt9LFxuICBmbGV4RGlyZWN0aW9uOiB7fSxcbiAgZmxleFdyYXA6IHt9LFxuICBqdXN0aWZ5Q29udGVudDoge30sXG4gIGFsaWduSXRlbXM6IHt9LFxuICBhbGlnbkNvbnRlbnQ6IHt9LFxuICBvcmRlcjoge30sXG4gIGZsZXg6IHt9LFxuICBmbGV4R3Jvdzoge30sXG4gIGZsZXhTaHJpbms6IHt9LFxuICBhbGlnblNlbGY6IHt9LFxuICBqdXN0aWZ5SXRlbXM6IHt9LFxuICBqdXN0aWZ5U2VsZjoge30sXG4gIC8vIGdyaWRcbiAgZ2FwOiB7XG4gICAgc3R5bGU6IGdhcFxuICB9LFxuICByb3dHYXA6IHtcbiAgICBzdHlsZTogcm93R2FwXG4gIH0sXG4gIGNvbHVtbkdhcDoge1xuICAgIHN0eWxlOiBjb2x1bW5HYXBcbiAgfSxcbiAgZ3JpZENvbHVtbjoge30sXG4gIGdyaWRSb3c6IHt9LFxuICBncmlkQXV0b0Zsb3c6IHt9LFxuICBncmlkQXV0b0NvbHVtbnM6IHt9LFxuICBncmlkQXV0b1Jvd3M6IHt9LFxuICBncmlkVGVtcGxhdGVDb2x1bW5zOiB7fSxcbiAgZ3JpZFRlbXBsYXRlUm93czoge30sXG4gIGdyaWRUZW1wbGF0ZUFyZWFzOiB7fSxcbiAgZ3JpZEFyZWE6IHt9LFxuICAvLyBwb3NpdGlvbnNcbiAgcG9zaXRpb246IHt9LFxuICB6SW5kZXg6IHtcbiAgICB0aGVtZUtleTogJ3pJbmRleCdcbiAgfSxcbiAgdG9wOiB7fSxcbiAgcmlnaHQ6IHt9LFxuICBib3R0b206IHt9LFxuICBsZWZ0OiB7fSxcbiAgLy8gc2hhZG93c1xuICBib3hTaGFkb3c6IHtcbiAgICB0aGVtZUtleTogJ3NoYWRvd3MnXG4gIH0sXG4gIC8vIHNpemluZ1xuICB3aWR0aDoge1xuICAgIHRyYW5zZm9ybTogc2l6aW5nVHJhbnNmb3JtXG4gIH0sXG4gIG1heFdpZHRoOiB7XG4gICAgc3R5bGU6IG1heFdpZHRoXG4gIH0sXG4gIG1pbldpZHRoOiB7XG4gICAgdHJhbnNmb3JtOiBzaXppbmdUcmFuc2Zvcm1cbiAgfSxcbiAgaGVpZ2h0OiB7XG4gICAgdHJhbnNmb3JtOiBzaXppbmdUcmFuc2Zvcm1cbiAgfSxcbiAgbWF4SGVpZ2h0OiB7XG4gICAgdHJhbnNmb3JtOiBzaXppbmdUcmFuc2Zvcm1cbiAgfSxcbiAgbWluSGVpZ2h0OiB7XG4gICAgdHJhbnNmb3JtOiBzaXppbmdUcmFuc2Zvcm1cbiAgfSxcbiAgYm94U2l6aW5nOiB7fSxcbiAgLy8gdHlwb2dyYXBoeVxuICBmb250RmFtaWx5OiB7XG4gICAgdGhlbWVLZXk6ICd0eXBvZ3JhcGh5J1xuICB9LFxuICBmb250U2l6ZToge1xuICAgIHRoZW1lS2V5OiAndHlwb2dyYXBoeSdcbiAgfSxcbiAgZm9udFN0eWxlOiB7XG4gICAgdGhlbWVLZXk6ICd0eXBvZ3JhcGh5J1xuICB9LFxuICBmb250V2VpZ2h0OiB7XG4gICAgdGhlbWVLZXk6ICd0eXBvZ3JhcGh5J1xuICB9LFxuICBsZXR0ZXJTcGFjaW5nOiB7fSxcbiAgdGV4dFRyYW5zZm9ybToge30sXG4gIGxpbmVIZWlnaHQ6IHt9LFxuICB0ZXh0QWxpZ246IHt9LFxuICB0eXBvZ3JhcGh5OiB7XG4gICAgY3NzUHJvcGVydHk6IGZhbHNlLFxuICAgIHRoZW1lS2V5OiAndHlwb2dyYXBoeSdcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGRlZmF1bHRTeENvbmZpZzsiLCJpbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICdAbXVpL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IG1lcmdlIGZyb20gJy4uL21lcmdlJztcbmltcG9ydCB7IGdldFBhdGgsIGdldFN0eWxlVmFsdWUgYXMgZ2V0VmFsdWUgfSBmcm9tICcuLi9zdHlsZSc7XG5pbXBvcnQgeyBoYW5kbGVCcmVha3BvaW50cywgY3JlYXRlRW1wdHlCcmVha3BvaW50T2JqZWN0LCByZW1vdmVVbnVzZWRCcmVha3BvaW50cyB9IGZyb20gJy4uL2JyZWFrcG9pbnRzJztcbmltcG9ydCBkZWZhdWx0U3hDb25maWcgZnJvbSAnLi9kZWZhdWx0U3hDb25maWcnO1xuZnVuY3Rpb24gb2JqZWN0c0hhdmVTYW1lS2V5cyguLi5vYmplY3RzKSB7XG4gIGNvbnN0IGFsbEtleXMgPSBvYmplY3RzLnJlZHVjZSgoa2V5cywgb2JqZWN0KSA9PiBrZXlzLmNvbmNhdChPYmplY3Qua2V5cyhvYmplY3QpKSwgW10pO1xuICBjb25zdCB1bmlvbiA9IG5ldyBTZXQoYWxsS2V5cyk7XG4gIHJldHVybiBvYmplY3RzLmV2ZXJ5KG9iamVjdCA9PiB1bmlvbi5zaXplID09PSBPYmplY3Qua2V5cyhvYmplY3QpLmxlbmd0aCk7XG59XG5mdW5jdGlvbiBjYWxsSWZGbihtYXliZUZuLCBhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBtYXliZUZuID09PSAnZnVuY3Rpb24nID8gbWF5YmVGbihhcmcpIDogbWF5YmVGbjtcbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvblxuZXhwb3J0IGZ1bmN0aW9uIHVuc3RhYmxlX2NyZWF0ZVN0eWxlRnVuY3Rpb25TeCgpIHtcbiAgZnVuY3Rpb24gZ2V0VGhlbWVWYWx1ZShwcm9wLCB2YWwsIHRoZW1lLCBjb25maWcpIHtcbiAgICBjb25zdCBwcm9wcyA9IHtcbiAgICAgIFtwcm9wXTogdmFsLFxuICAgICAgdGhlbWVcbiAgICB9O1xuICAgIGNvbnN0IG9wdGlvbnMgPSBjb25maWdbcHJvcF07XG4gICAgaWYgKCFvcHRpb25zKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBbcHJvcF06IHZhbFxuICAgICAgfTtcbiAgICB9XG4gICAgY29uc3Qge1xuICAgICAgY3NzUHJvcGVydHkgPSBwcm9wLFxuICAgICAgdGhlbWVLZXksXG4gICAgICB0cmFuc2Zvcm0sXG4gICAgICBzdHlsZVxuICAgIH0gPSBvcHRpb25zO1xuICAgIGlmICh2YWwgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgLy8gVE9ETyB2NjogcmVtb3ZlLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL211aS9tYXRlcmlhbC11aS9wdWxsLzM4MTIzXG4gICAgaWYgKHRoZW1lS2V5ID09PSAndHlwb2dyYXBoeScgJiYgdmFsID09PSAnaW5oZXJpdCcpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIFtwcm9wXTogdmFsXG4gICAgICB9O1xuICAgIH1cbiAgICBjb25zdCB0aGVtZU1hcHBpbmcgPSBnZXRQYXRoKHRoZW1lLCB0aGVtZUtleSkgfHwge307XG4gICAgaWYgKHN0eWxlKSB7XG4gICAgICByZXR1cm4gc3R5bGUocHJvcHMpO1xuICAgIH1cbiAgICBjb25zdCBzdHlsZUZyb21Qcm9wVmFsdWUgPSBwcm9wVmFsdWVGaW5hbCA9PiB7XG4gICAgICBsZXQgdmFsdWUgPSBnZXRWYWx1ZSh0aGVtZU1hcHBpbmcsIHRyYW5zZm9ybSwgcHJvcFZhbHVlRmluYWwpO1xuICAgICAgaWYgKHByb3BWYWx1ZUZpbmFsID09PSB2YWx1ZSAmJiB0eXBlb2YgcHJvcFZhbHVlRmluYWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIC8vIEhhdmVuJ3QgZm91bmQgdmFsdWVcbiAgICAgICAgdmFsdWUgPSBnZXRWYWx1ZSh0aGVtZU1hcHBpbmcsIHRyYW5zZm9ybSwgYCR7cHJvcH0ke3Byb3BWYWx1ZUZpbmFsID09PSAnZGVmYXVsdCcgPyAnJyA6IGNhcGl0YWxpemUocHJvcFZhbHVlRmluYWwpfWAsIHByb3BWYWx1ZUZpbmFsKTtcbiAgICAgIH1cbiAgICAgIGlmIChjc3NQcm9wZXJ0eSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgW2Nzc1Byb3BlcnR5XTogdmFsdWVcbiAgICAgIH07XG4gICAgfTtcbiAgICByZXR1cm4gaGFuZGxlQnJlYWtwb2ludHMocHJvcHMsIHZhbCwgc3R5bGVGcm9tUHJvcFZhbHVlKTtcbiAgfVxuICBmdW5jdGlvbiBzdHlsZUZ1bmN0aW9uU3gocHJvcHMpIHtcbiAgICB2YXIgX3RoZW1lJHVuc3RhYmxlX3N4Q29uO1xuICAgIGNvbnN0IHtcbiAgICAgIHN4LFxuICAgICAgdGhlbWUgPSB7fVxuICAgIH0gPSBwcm9wcyB8fCB7fTtcbiAgICBpZiAoIXN4KSB7XG4gICAgICByZXR1cm4gbnVsbDsgLy8gRW1vdGlvbiAmIHN0eWxlZC1jb21wb25lbnRzIHdpbGwgbmVnbGVjdCBudWxsXG4gICAgfVxuICAgIGNvbnN0IGNvbmZpZyA9IChfdGhlbWUkdW5zdGFibGVfc3hDb24gPSB0aGVtZS51bnN0YWJsZV9zeENvbmZpZykgIT0gbnVsbCA/IF90aGVtZSR1bnN0YWJsZV9zeENvbiA6IGRlZmF1bHRTeENvbmZpZztcblxuICAgIC8qXG4gICAgICogUmVjZWl2ZSBgc3hJbnB1dGAgYXMgb2JqZWN0IG9yIGNhbGxiYWNrXG4gICAgICogYW5kIHRoZW4gcmVjdXJzaXZlbHkgY2hlY2sga2V5cyAmIHZhbHVlcyB0byBjcmVhdGUgbWVkaWEgcXVlcnkgb2JqZWN0IHN0eWxlcy5cbiAgICAgKiAodGhlIHJlc3VsdCB3aWxsIGJlIHVzZWQgaW4gYHN0eWxlZGApXG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJhdmVyc2Uoc3hJbnB1dCkge1xuICAgICAgbGV0IHN4T2JqZWN0ID0gc3hJbnB1dDtcbiAgICAgIGlmICh0eXBlb2Ygc3hJbnB1dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBzeE9iamVjdCA9IHN4SW5wdXQodGhlbWUpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygc3hJbnB1dCAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgLy8gdmFsdWVcbiAgICAgICAgcmV0dXJuIHN4SW5wdXQ7XG4gICAgICB9XG4gICAgICBpZiAoIXN4T2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgY29uc3QgZW1wdHlCcmVha3BvaW50cyA9IGNyZWF0ZUVtcHR5QnJlYWtwb2ludE9iamVjdCh0aGVtZS5icmVha3BvaW50cyk7XG4gICAgICBjb25zdCBicmVha3BvaW50c0tleXMgPSBPYmplY3Qua2V5cyhlbXB0eUJyZWFrcG9pbnRzKTtcbiAgICAgIGxldCBjc3MgPSBlbXB0eUJyZWFrcG9pbnRzO1xuICAgICAgT2JqZWN0LmtleXMoc3hPYmplY3QpLmZvckVhY2goc3R5bGVLZXkgPT4ge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGNhbGxJZkZuKHN4T2JqZWN0W3N0eWxlS2V5XSwgdGhlbWUpO1xuICAgICAgICBpZiAodmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBpZiAoY29uZmlnW3N0eWxlS2V5XSkge1xuICAgICAgICAgICAgICBjc3MgPSBtZXJnZShjc3MsIGdldFRoZW1lVmFsdWUoc3R5bGVLZXksIHZhbHVlLCB0aGVtZSwgY29uZmlnKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjb25zdCBicmVha3BvaW50c1ZhbHVlcyA9IGhhbmRsZUJyZWFrcG9pbnRzKHtcbiAgICAgICAgICAgICAgICB0aGVtZVxuICAgICAgICAgICAgICB9LCB2YWx1ZSwgeCA9PiAoe1xuICAgICAgICAgICAgICAgIFtzdHlsZUtleV06IHhcbiAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICBpZiAob2JqZWN0c0hhdmVTYW1lS2V5cyhicmVha3BvaW50c1ZhbHVlcywgdmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgY3NzW3N0eWxlS2V5XSA9IHN0eWxlRnVuY3Rpb25TeCh7XG4gICAgICAgICAgICAgICAgICBzeDogdmFsdWUsXG4gICAgICAgICAgICAgICAgICB0aGVtZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNzcyA9IG1lcmdlKGNzcywgYnJlYWtwb2ludHNWYWx1ZXMpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNzcyA9IG1lcmdlKGNzcywgZ2V0VGhlbWVWYWx1ZShzdHlsZUtleSwgdmFsdWUsIHRoZW1lLCBjb25maWcpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlbW92ZVVudXNlZEJyZWFrcG9pbnRzKGJyZWFrcG9pbnRzS2V5cywgY3NzKTtcbiAgICB9XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoc3gpID8gc3gubWFwKHRyYXZlcnNlKSA6IHRyYXZlcnNlKHN4KTtcbiAgfVxuICByZXR1cm4gc3R5bGVGdW5jdGlvblN4O1xufVxuY29uc3Qgc3R5bGVGdW5jdGlvblN4ID0gdW5zdGFibGVfY3JlYXRlU3R5bGVGdW5jdGlvblN4KCk7XG5zdHlsZUZ1bmN0aW9uU3guZmlsdGVyUHJvcHMgPSBbJ3N4J107XG5leHBvcnQgZGVmYXVsdCBzdHlsZUZ1bmN0aW9uU3g7IiwiLyoqXG4gKiBBIHVuaXZlcnNhbCB1dGlsaXR5IHRvIHN0eWxlIGNvbXBvbmVudHMgd2l0aCBtdWx0aXBsZSBjb2xvciBtb2Rlcy4gQWx3YXlzIHVzZSBpdCBmcm9tIHRoZSB0aGVtZSBvYmplY3QuXG4gKiBJdCB3b3JrcyB3aXRoOlxuICogIC0gW0Jhc2ljIHRoZW1lXShodHRwczovL211aS5jb20vbWF0ZXJpYWwtdWkvY3VzdG9taXphdGlvbi9kYXJrLW1vZGUvKVxuICogIC0gW0NTUyB0aGVtZSB2YXJpYWJsZXNdKGh0dHBzOi8vbXVpLmNvbS9tYXRlcmlhbC11aS9leHBlcmltZW50YWwtYXBpL2Nzcy10aGVtZS12YXJpYWJsZXMvb3ZlcnZpZXcvKVxuICogIC0gWmVyby1ydW50aW1lIGVuZ2luZVxuICpcbiAqIFRpcHM6IFVzZSBhbiBhcnJheSBvdmVyIG9iamVjdCBzcHJlYWQgYW5kIHBsYWNlIGB0aGVtZS5hcHBseVN0eWxlcygpYCBsYXN0LlxuICpcbiAqIOKchSBbeyBiYWNrZ3JvdW5kOiAnI2U1ZTVlNScgfSwgdGhlbWUuYXBwbHlTdHlsZXMoJ2RhcmsnLCB7IGJhY2tncm91bmQ6ICcjMWMxYzFjJyB9KV1cbiAqXG4gKiDwn5qrIHsgYmFja2dyb3VuZDogJyNlNWU1ZTUnLCAuLi50aGVtZS5hcHBseVN0eWxlcygnZGFyaycsIHsgYmFja2dyb3VuZDogJyMxYzFjMWMnIH0pfVxuICpcbiAqIEBleGFtcGxlXG4gKiAxLiB1c2luZyB3aXRoIGBzdHlsZWRgOlxuICogYGBganN4XG4gKiAgIGNvbnN0IENvbXBvbmVudCA9IHN0eWxlZCgnZGl2JykoKHsgdGhlbWUgfSkgPT4gW1xuICogICAgIHsgYmFja2dyb3VuZDogJyNlNWU1ZTUnIH0sXG4gKiAgICAgdGhlbWUuYXBwbHlTdHlsZXMoJ2RhcmsnLCB7XG4gKiAgICAgICBiYWNrZ3JvdW5kOiAnIzFjMWMxYycsXG4gKiAgICAgICBjb2xvcjogJyNmZmYnLFxuICogICAgIH0pLFxuICogICBdKTtcbiAqIGBgYFxuICpcbiAqIEBleGFtcGxlXG4gKiAyLiB1c2luZyB3aXRoIGBzeGAgcHJvcDpcbiAqIGBgYGpzeFxuICogICA8Qm94IHN4PXt0aGVtZSA9PiBbXG4gKiAgICAgeyBiYWNrZ3JvdW5kOiAnI2U1ZTVlNScgfSxcbiAqICAgICB0aGVtZS5hcHBseVN0eWxlcygnZGFyaycsIHtcbiAqICAgICAgICBiYWNrZ3JvdW5kOiAnIzFjMWMxYycsXG4gKiAgICAgICAgY29sb3I6ICcjZmZmJyxcbiAqICAgICAgfSksXG4gKiAgICAgXX1cbiAqICAgLz5cbiAqIGBgYFxuICpcbiAqIEBleGFtcGxlXG4gKiAzLiB0aGVtaW5nIGEgY29tcG9uZW50OlxuICogYGBganN4XG4gKiAgIGV4dGVuZFRoZW1lKHtcbiAqICAgICBjb21wb25lbnRzOiB7XG4gKiAgICAgICBNdWlCdXR0b246IHtcbiAqICAgICAgICAgc3R5bGVPdmVycmlkZXM6IHtcbiAqICAgICAgICAgICByb290OiAoeyB0aGVtZSB9KSA9PiBbXG4gKiAgICAgICAgICAgICB7IGJhY2tncm91bmQ6ICcjZTVlNWU1JyB9LFxuICogICAgICAgICAgICAgdGhlbWUuYXBwbHlTdHlsZXMoJ2RhcmsnLCB7XG4gKiAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICcjMWMxYzFjJyxcbiAqICAgICAgICAgICAgICAgY29sb3I6ICcjZmZmJyxcbiAqICAgICAgICAgICAgIH0pLFxuICogICAgICAgICAgIF0sXG4gKiAgICAgICAgIH0sXG4gKiAgICAgICB9XG4gKiAgICAgfVxuICogICB9KVxuICpgYGBcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYXBwbHlTdHlsZXMoa2V5LCBzdHlsZXMpIHtcbiAgLy8gQHRzLWV4cGVjdC1lcnJvciB0aGlzIGlzICdhbnknIHR5cGVcbiAgY29uc3QgdGhlbWUgPSB0aGlzO1xuICBpZiAodGhlbWUudmFycyAmJiB0eXBlb2YgdGhlbWUuZ2V0Q29sb3JTY2hlbWVTZWxlY3RvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vIElmIENzc1ZhcnNQcm92aWRlciBpcyB1c2VkIGFzIGEgcHJvdmlkZXIsXG4gICAgLy8gcmV0dXJucyAnKiA6d2hlcmUoW2RhdGEtbXVpLWNvbG9yLXNjaGVtZT1cImxpZ2h0fGRhcmtcIl0pICYnXG4gICAgY29uc3Qgc2VsZWN0b3IgPSB0aGVtZS5nZXRDb2xvclNjaGVtZVNlbGVjdG9yKGtleSkucmVwbGFjZSgvKFxcW1teXFxdXStcXF0pLywgJyo6d2hlcmUoJDEpJyk7XG4gICAgcmV0dXJuIHtcbiAgICAgIFtzZWxlY3Rvcl06IHN0eWxlc1xuICAgIH07XG4gIH1cbiAgaWYgKHRoZW1lLnBhbGV0dGUubW9kZSA9PT0ga2V5KSB7XG4gICAgcmV0dXJuIHN0eWxlcztcbiAgfVxuICByZXR1cm4ge307XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImJyZWFrcG9pbnRzXCIsIFwicGFsZXR0ZVwiLCBcInNwYWNpbmdcIiwgXCJzaGFwZVwiXTtcbmltcG9ydCBkZWVwbWVyZ2UgZnJvbSAnQG11aS91dGlscy9kZWVwbWVyZ2UnO1xuaW1wb3J0IGNyZWF0ZUJyZWFrcG9pbnRzIGZyb20gJy4vY3JlYXRlQnJlYWtwb2ludHMnO1xuaW1wb3J0IHNoYXBlIGZyb20gJy4vc2hhcGUnO1xuaW1wb3J0IGNyZWF0ZVNwYWNpbmcgZnJvbSAnLi9jcmVhdGVTcGFjaW5nJztcbmltcG9ydCBzdHlsZUZ1bmN0aW9uU3ggZnJvbSAnLi4vc3R5bGVGdW5jdGlvblN4L3N0eWxlRnVuY3Rpb25TeCc7XG5pbXBvcnQgZGVmYXVsdFN4Q29uZmlnIGZyb20gJy4uL3N0eWxlRnVuY3Rpb25TeC9kZWZhdWx0U3hDb25maWcnO1xuaW1wb3J0IGFwcGx5U3R5bGVzIGZyb20gJy4vYXBwbHlTdHlsZXMnO1xuZnVuY3Rpb24gY3JlYXRlVGhlbWUob3B0aW9ucyA9IHt9LCAuLi5hcmdzKSB7XG4gIGNvbnN0IHtcbiAgICAgIGJyZWFrcG9pbnRzOiBicmVha3BvaW50c0lucHV0ID0ge30sXG4gICAgICBwYWxldHRlOiBwYWxldHRlSW5wdXQgPSB7fSxcbiAgICAgIHNwYWNpbmc6IHNwYWNpbmdJbnB1dCxcbiAgICAgIHNoYXBlOiBzaGFwZUlucHV0ID0ge31cbiAgICB9ID0gb3B0aW9ucyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKG9wdGlvbnMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IGJyZWFrcG9pbnRzID0gY3JlYXRlQnJlYWtwb2ludHMoYnJlYWtwb2ludHNJbnB1dCk7XG4gIGNvbnN0IHNwYWNpbmcgPSBjcmVhdGVTcGFjaW5nKHNwYWNpbmdJbnB1dCk7XG4gIGxldCBtdWlUaGVtZSA9IGRlZXBtZXJnZSh7XG4gICAgYnJlYWtwb2ludHMsXG4gICAgZGlyZWN0aW9uOiAnbHRyJyxcbiAgICBjb21wb25lbnRzOiB7fSxcbiAgICAvLyBJbmplY3QgY29tcG9uZW50IGRlZmluaXRpb25zLlxuICAgIHBhbGV0dGU6IF9leHRlbmRzKHtcbiAgICAgIG1vZGU6ICdsaWdodCdcbiAgICB9LCBwYWxldHRlSW5wdXQpLFxuICAgIHNwYWNpbmcsXG4gICAgc2hhcGU6IF9leHRlbmRzKHt9LCBzaGFwZSwgc2hhcGVJbnB1dClcbiAgfSwgb3RoZXIpO1xuICBtdWlUaGVtZS5hcHBseVN0eWxlcyA9IGFwcGx5U3R5bGVzO1xuICBtdWlUaGVtZSA9IGFyZ3MucmVkdWNlKChhY2MsIGFyZ3VtZW50KSA9PiBkZWVwbWVyZ2UoYWNjLCBhcmd1bWVudCksIG11aVRoZW1lKTtcbiAgbXVpVGhlbWUudW5zdGFibGVfc3hDb25maWcgPSBfZXh0ZW5kcyh7fSwgZGVmYXVsdFN4Q29uZmlnLCBvdGhlciA9PSBudWxsID8gdm9pZCAwIDogb3RoZXIudW5zdGFibGVfc3hDb25maWcpO1xuICBtdWlUaGVtZS51bnN0YWJsZV9zeCA9IGZ1bmN0aW9uIHN4KHByb3BzKSB7XG4gICAgcmV0dXJuIHN0eWxlRnVuY3Rpb25TeCh7XG4gICAgICBzeDogcHJvcHMsXG4gICAgICB0aGVtZTogdGhpc1xuICAgIH0pO1xuICB9O1xuICByZXR1cm4gbXVpVGhlbWU7XG59XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVUaGVtZTsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFRoZW1lQ29udGV4dCB9IGZyb20gJ0BtdWkvc3R5bGVkLWVuZ2luZSc7XG5mdW5jdGlvbiBpc09iamVjdEVtcHR5KG9iaikge1xuICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5sZW5ndGggPT09IDA7XG59XG5mdW5jdGlvbiB1c2VUaGVtZShkZWZhdWx0VGhlbWUgPSBudWxsKSB7XG4gIGNvbnN0IGNvbnRleHRUaGVtZSA9IFJlYWN0LnVzZUNvbnRleHQoVGhlbWVDb250ZXh0KTtcbiAgcmV0dXJuICFjb250ZXh0VGhlbWUgfHwgaXNPYmplY3RFbXB0eShjb250ZXh0VGhlbWUpID8gZGVmYXVsdFRoZW1lIDogY29udGV4dFRoZW1lO1xufVxuZXhwb3J0IGRlZmF1bHQgdXNlVGhlbWU7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgY3JlYXRlVGhlbWUgZnJvbSAnLi9jcmVhdGVUaGVtZSc7XG5pbXBvcnQgdXNlVGhlbWVXaXRob3V0RGVmYXVsdCBmcm9tICcuL3VzZVRoZW1lV2l0aG91dERlZmF1bHQnO1xuZXhwb3J0IGNvbnN0IHN5c3RlbURlZmF1bHRUaGVtZSA9IGNyZWF0ZVRoZW1lKCk7XG5mdW5jdGlvbiB1c2VUaGVtZShkZWZhdWx0VGhlbWUgPSBzeXN0ZW1EZWZhdWx0VGhlbWUpIHtcbiAgcmV0dXJuIHVzZVRoZW1lV2l0aG91dERlZmF1bHQoZGVmYXVsdFRoZW1lKTtcbn1cbmV4cG9ydCBkZWZhdWx0IHVzZVRoZW1lOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IEdsb2JhbFN0eWxlcyBhcyBNdWlHbG9iYWxTdHlsZXMgfSBmcm9tICdAbXVpL3N0eWxlZC1lbmdpbmUnO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4uL3VzZVRoZW1lJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5mdW5jdGlvbiBHbG9iYWxTdHlsZXMoe1xuICBzdHlsZXMsXG4gIHRoZW1lSWQsXG4gIGRlZmF1bHRUaGVtZSA9IHt9XG59KSB7XG4gIGNvbnN0IHVwcGVyVGhlbWUgPSB1c2VUaGVtZShkZWZhdWx0VGhlbWUpO1xuICBjb25zdCBnbG9iYWxTdHlsZXMgPSB0eXBlb2Ygc3R5bGVzID09PSAnZnVuY3Rpb24nID8gc3R5bGVzKHRoZW1lSWQgPyB1cHBlclRoZW1lW3RoZW1lSWRdIHx8IHVwcGVyVGhlbWUgOiB1cHBlclRoZW1lKSA6IHN0eWxlcztcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KE11aUdsb2JhbFN0eWxlcywge1xuICAgIHN0eWxlczogZ2xvYmFsU3R5bGVzXG4gIH0pO1xufVxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gR2xvYmFsU3R5bGVzLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgVHlwZVNjcmlwdCB0eXBlcyBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGRlZmF1bHRUaGVtZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHN0eWxlczogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuYm9vbF0pLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgdGhlbWVJZDogUHJvcFR5cGVzLnN0cmluZ1xufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IEdsb2JhbFN0eWxlczsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wic3hcIl07XG5pbXBvcnQgeyBpc1BsYWluT2JqZWN0IH0gZnJvbSAnQG11aS91dGlscy9kZWVwbWVyZ2UnO1xuaW1wb3J0IGRlZmF1bHRTeENvbmZpZyBmcm9tICcuL2RlZmF1bHRTeENvbmZpZyc7XG5jb25zdCBzcGxpdFByb3BzID0gcHJvcHMgPT4ge1xuICB2YXIgX3Byb3BzJHRoZW1lJHVuc3RhYmxlLCBfcHJvcHMkdGhlbWU7XG4gIGNvbnN0IHJlc3VsdCA9IHtcbiAgICBzeXN0ZW1Qcm9wczoge30sXG4gICAgb3RoZXJQcm9wczoge31cbiAgfTtcbiAgY29uc3QgY29uZmlnID0gKF9wcm9wcyR0aGVtZSR1bnN0YWJsZSA9IHByb3BzID09IG51bGwgfHwgKF9wcm9wcyR0aGVtZSA9IHByb3BzLnRoZW1lKSA9PSBudWxsID8gdm9pZCAwIDogX3Byb3BzJHRoZW1lLnVuc3RhYmxlX3N4Q29uZmlnKSAhPSBudWxsID8gX3Byb3BzJHRoZW1lJHVuc3RhYmxlIDogZGVmYXVsdFN4Q29uZmlnO1xuICBPYmplY3Qua2V5cyhwcm9wcykuZm9yRWFjaChwcm9wID0+IHtcbiAgICBpZiAoY29uZmlnW3Byb3BdKSB7XG4gICAgICByZXN1bHQuc3lzdGVtUHJvcHNbcHJvcF0gPSBwcm9wc1twcm9wXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0Lm90aGVyUHJvcHNbcHJvcF0gPSBwcm9wc1twcm9wXTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGV4dGVuZFN4UHJvcChwcm9wcykge1xuICBjb25zdCB7XG4gICAgICBzeDogaW5TeFxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCB7XG4gICAgc3lzdGVtUHJvcHMsXG4gICAgb3RoZXJQcm9wc1xuICB9ID0gc3BsaXRQcm9wcyhvdGhlcik7XG4gIGxldCBmaW5hbFN4O1xuICBpZiAoQXJyYXkuaXNBcnJheShpblN4KSkge1xuICAgIGZpbmFsU3ggPSBbc3lzdGVtUHJvcHMsIC4uLmluU3hdO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBpblN4ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZmluYWxTeCA9ICguLi5hcmdzKSA9PiB7XG4gICAgICBjb25zdCByZXN1bHQgPSBpblN4KC4uLmFyZ3MpO1xuICAgICAgaWYgKCFpc1BsYWluT2JqZWN0KHJlc3VsdCkpIHtcbiAgICAgICAgcmV0dXJuIHN5c3RlbVByb3BzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBzeXN0ZW1Qcm9wcywgcmVzdWx0KTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIGZpbmFsU3ggPSBfZXh0ZW5kcyh7fSwgc3lzdGVtUHJvcHMsIGluU3gpO1xuICB9XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgb3RoZXJQcm9wcywge1xuICAgIHN4OiBmaW5hbFN4XG4gIH0pO1xufSIsImNvbnN0IGRlZmF1bHRHZW5lcmF0b3IgPSBjb21wb25lbnROYW1lID0+IGNvbXBvbmVudE5hbWU7XG5jb25zdCBjcmVhdGVDbGFzc05hbWVHZW5lcmF0b3IgPSAoKSA9PiB7XG4gIGxldCBnZW5lcmF0ZSA9IGRlZmF1bHRHZW5lcmF0b3I7XG4gIHJldHVybiB7XG4gICAgY29uZmlndXJlKGdlbmVyYXRvcikge1xuICAgICAgZ2VuZXJhdGUgPSBnZW5lcmF0b3I7XG4gICAgfSxcbiAgICBnZW5lcmF0ZShjb21wb25lbnROYW1lKSB7XG4gICAgICByZXR1cm4gZ2VuZXJhdGUoY29tcG9uZW50TmFtZSk7XG4gICAgfSxcbiAgICByZXNldCgpIHtcbiAgICAgIGdlbmVyYXRlID0gZGVmYXVsdEdlbmVyYXRvcjtcbiAgICB9XG4gIH07XG59O1xuY29uc3QgQ2xhc3NOYW1lR2VuZXJhdG9yID0gY3JlYXRlQ2xhc3NOYW1lR2VuZXJhdG9yKCk7XG5leHBvcnQgZGVmYXVsdCBDbGFzc05hbWVHZW5lcmF0b3I7IiwiZnVuY3Rpb24gcihlKXt2YXIgdCxmLG49XCJcIjtpZihcInN0cmluZ1wiPT10eXBlb2YgZXx8XCJudW1iZXJcIj09dHlwZW9mIGUpbis9ZTtlbHNlIGlmKFwib2JqZWN0XCI9PXR5cGVvZiBlKWlmKEFycmF5LmlzQXJyYXkoZSkpe3ZhciBvPWUubGVuZ3RoO2Zvcih0PTA7dDxvO3QrKyllW3RdJiYoZj1yKGVbdF0pKSYmKG4mJihuKz1cIiBcIiksbis9Zil9ZWxzZSBmb3IoZiBpbiBlKWVbZl0mJihuJiYobis9XCIgXCIpLG4rPWYpO3JldHVybiBufWV4cG9ydCBmdW5jdGlvbiBjbHN4KCl7Zm9yKHZhciBlLHQsZj0wLG49XCJcIixvPWFyZ3VtZW50cy5sZW5ndGg7ZjxvO2YrKykoZT1hcmd1bWVudHNbZl0pJiYodD1yKGUpKSYmKG4mJihuKz1cIiBcIiksbis9dCk7cmV0dXJuIG59ZXhwb3J0IGRlZmF1bHQgY2xzeDsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQG11aS9zdHlsZWQtZW5naW5lJztcbmltcG9ydCBzdHlsZUZ1bmN0aW9uU3gsIHsgZXh0ZW5kU3hQcm9wIH0gZnJvbSAnLi9zdHlsZUZ1bmN0aW9uU3gnO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4vdXNlVGhlbWUnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUJveChvcHRpb25zID0ge30pIHtcbiAgY29uc3Qge1xuICAgIHRoZW1lSWQsXG4gICAgZGVmYXVsdFRoZW1lLFxuICAgIGRlZmF1bHRDbGFzc05hbWUgPSAnTXVpQm94LXJvb3QnLFxuICAgIGdlbmVyYXRlQ2xhc3NOYW1lXG4gIH0gPSBvcHRpb25zO1xuICBjb25zdCBCb3hSb290ID0gc3R5bGVkKCdkaXYnLCB7XG4gICAgc2hvdWxkRm9yd2FyZFByb3A6IHByb3AgPT4gcHJvcCAhPT0gJ3RoZW1lJyAmJiBwcm9wICE9PSAnc3gnICYmIHByb3AgIT09ICdhcydcbiAgfSkoc3R5bGVGdW5jdGlvblN4KTtcbiAgY29uc3QgQm94ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQm94KGluUHJvcHMsIHJlZikge1xuICAgIGNvbnN0IHRoZW1lID0gdXNlVGhlbWUoZGVmYXVsdFRoZW1lKTtcbiAgICBjb25zdCBfZXh0ZW5kU3hQcm9wID0gZXh0ZW5kU3hQcm9wKGluUHJvcHMpLFxuICAgICAge1xuICAgICAgICBjbGFzc05hbWUsXG4gICAgICAgIGNvbXBvbmVudCA9ICdkaXYnXG4gICAgICB9ID0gX2V4dGVuZFN4UHJvcCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX2V4dGVuZFN4UHJvcCwgX2V4Y2x1ZGVkKTtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL19qc3goQm94Um9vdCwgX2V4dGVuZHMoe1xuICAgICAgYXM6IGNvbXBvbmVudCxcbiAgICAgIHJlZjogcmVmLFxuICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzTmFtZSwgZ2VuZXJhdGVDbGFzc05hbWUgPyBnZW5lcmF0ZUNsYXNzTmFtZShkZWZhdWx0Q2xhc3NOYW1lKSA6IGRlZmF1bHRDbGFzc05hbWUpLFxuICAgICAgdGhlbWU6IHRoZW1lSWQgPyB0aGVtZVt0aGVtZUlkXSB8fCB0aGVtZSA6IHRoZW1lXG4gICAgfSwgb3RoZXIpKTtcbiAgfSk7XG4gIHJldHVybiBCb3g7XG59IiwiaW1wb3J0IENsYXNzTmFtZUdlbmVyYXRvciBmcm9tICcuLi9DbGFzc05hbWVHZW5lcmF0b3InO1xuZXhwb3J0IGNvbnN0IGdsb2JhbFN0YXRlQ2xhc3NlcyA9IHtcbiAgYWN0aXZlOiAnYWN0aXZlJyxcbiAgY2hlY2tlZDogJ2NoZWNrZWQnLFxuICBjb21wbGV0ZWQ6ICdjb21wbGV0ZWQnLFxuICBkaXNhYmxlZDogJ2Rpc2FibGVkJyxcbiAgZXJyb3I6ICdlcnJvcicsXG4gIGV4cGFuZGVkOiAnZXhwYW5kZWQnLFxuICBmb2N1c2VkOiAnZm9jdXNlZCcsXG4gIGZvY3VzVmlzaWJsZTogJ2ZvY3VzVmlzaWJsZScsXG4gIG9wZW46ICdvcGVuJyxcbiAgcmVhZE9ubHk6ICdyZWFkT25seScsXG4gIHJlcXVpcmVkOiAncmVxdWlyZWQnLFxuICBzZWxlY3RlZDogJ3NlbGVjdGVkJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdlbmVyYXRlVXRpbGl0eUNsYXNzKGNvbXBvbmVudE5hbWUsIHNsb3QsIGdsb2JhbFN0YXRlUHJlZml4ID0gJ011aScpIHtcbiAgY29uc3QgZ2xvYmFsU3RhdGVDbGFzcyA9IGdsb2JhbFN0YXRlQ2xhc3Nlc1tzbG90XTtcbiAgcmV0dXJuIGdsb2JhbFN0YXRlQ2xhc3MgPyBgJHtnbG9iYWxTdGF0ZVByZWZpeH0tJHtnbG9iYWxTdGF0ZUNsYXNzfWAgOiBgJHtDbGFzc05hbWVHZW5lcmF0b3IuZ2VuZXJhdGUoY29tcG9uZW50TmFtZSl9LSR7c2xvdH1gO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzR2xvYmFsU3RhdGUoc2xvdCkge1xuICByZXR1cm4gZ2xvYmFsU3RhdGVDbGFzc2VzW3Nsb3RdICE9PSB1bmRlZmluZWQ7XG59IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJy4uL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoY29tcG9uZW50TmFtZSwgc2xvdHMsIGdsb2JhbFN0YXRlUHJlZml4ID0gJ011aScpIHtcbiAgY29uc3QgcmVzdWx0ID0ge307XG4gIHNsb3RzLmZvckVhY2goc2xvdCA9PiB7XG4gICAgcmVzdWx0W3Nsb3RdID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoY29tcG9uZW50TmFtZSwgc2xvdCwgZ2xvYmFsU3RhdGVQcmVmaXgpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn0iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiByZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGI9U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIiksYz1TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpLGQ9U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpLGU9U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpLGY9U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpLGc9U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpLGg9U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIiksaz1TeW1ib2wuZm9yKFwicmVhY3Quc2VydmVyX2NvbnRleHRcIiksbD1TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIiksbT1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIiksbj1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKSxwPVN5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpLHE9U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIiksdD1TeW1ib2wuZm9yKFwicmVhY3Qub2Zmc2NyZWVuXCIpLHU7dT1TeW1ib2wuZm9yKFwicmVhY3QubW9kdWxlLnJlZmVyZW5jZVwiKTtcbmZ1bmN0aW9uIHYoYSl7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSl7dmFyIHI9YS4kJHR5cGVvZjtzd2l0Y2gocil7Y2FzZSBiOnN3aXRjaChhPWEudHlwZSxhKXtjYXNlIGQ6Y2FzZSBmOmNhc2UgZTpjYXNlIG06Y2FzZSBuOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBoOmNhc2UgbDpjYXNlIHE6Y2FzZSBwOmNhc2UgZzpyZXR1cm4gYTtkZWZhdWx0OnJldHVybiByfX1jYXNlIGM6cmV0dXJuIHJ9fX1leHBvcnRzLkNvbnRleHRDb25zdW1lcj1oO2V4cG9ydHMuQ29udGV4dFByb3ZpZGVyPWc7ZXhwb3J0cy5FbGVtZW50PWI7ZXhwb3J0cy5Gb3J3YXJkUmVmPWw7ZXhwb3J0cy5GcmFnbWVudD1kO2V4cG9ydHMuTGF6eT1xO2V4cG9ydHMuTWVtbz1wO2V4cG9ydHMuUG9ydGFsPWM7ZXhwb3J0cy5Qcm9maWxlcj1mO2V4cG9ydHMuU3RyaWN0TW9kZT1lO2V4cG9ydHMuU3VzcGVuc2U9bTtcbmV4cG9ydHMuU3VzcGVuc2VMaXN0PW47ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbigpe3JldHVybiExfTtleHBvcnRzLmlzQ29uY3VycmVudE1vZGU9ZnVuY3Rpb24oKXtyZXR1cm4hMX07ZXhwb3J0cy5pc0NvbnRleHRDb25zdW1lcj1mdW5jdGlvbihhKXtyZXR1cm4gdihhKT09PWh9O2V4cG9ydHMuaXNDb250ZXh0UHJvdmlkZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1nfTtleHBvcnRzLmlzRWxlbWVudD1mdW5jdGlvbihhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09Yn07ZXhwb3J0cy5pc0ZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1sfTtleHBvcnRzLmlzRnJhZ21lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1kfTtleHBvcnRzLmlzTGF6eT1mdW5jdGlvbihhKXtyZXR1cm4gdihhKT09PXF9O2V4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09cH07XG5leHBvcnRzLmlzUG9ydGFsPWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09Y307ZXhwb3J0cy5pc1Byb2ZpbGVyPWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09Zn07ZXhwb3J0cy5pc1N0cmljdE1vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1lfTtleHBvcnRzLmlzU3VzcGVuc2U9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1tfTtleHBvcnRzLmlzU3VzcGVuc2VMaXN0PWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09bn07XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZHx8YT09PWZ8fGE9PT1lfHxhPT09bXx8YT09PW58fGE9PT10fHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXF8fGEuJCR0eXBlb2Y9PT1wfHxhLiQkdHlwZW9mPT09Z3x8YS4kJHR5cGVvZj09PWh8fGEuJCR0eXBlb2Y9PT1sfHxhLiQkdHlwZW9mPT09dXx8dm9pZCAwIT09YS5nZXRNb2R1bGVJZCk/ITA6ITF9O2V4cG9ydHMudHlwZU9mPXY7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsImltcG9ydCB7IEZvcndhcmRSZWYsIE1lbW8gfSBmcm9tICdyZWFjdC1pcyc7XG5cbi8vIFNpbXBsaWZpZWQgcG9seWZpbGwgZm9yIElFMTEgc3VwcG9ydFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL0phbWVzTUdyZWVuZS9GdW5jdGlvbi5uYW1lL2Jsb2IvNThiMzE0ZDRhOTgzMTEwYzM2ODJmMTIyOGY4NDVkMzljY2NhMTgxNy9GdW5jdGlvbi5uYW1lLmpzI0wzXG5jb25zdCBmbk5hbWVNYXRjaFJlZ2V4ID0gL15cXHMqZnVuY3Rpb24oPzpcXHN8XFxzKlxcL1xcKi4qXFwqXFwvXFxzKikrKFteKFxccy9dKilcXHMqLztcbmV4cG9ydCBmdW5jdGlvbiBnZXRGdW5jdGlvbk5hbWUoZm4pIHtcbiAgY29uc3QgbWF0Y2ggPSBgJHtmbn1gLm1hdGNoKGZuTmFtZU1hdGNoUmVnZXgpO1xuICBjb25zdCBuYW1lID0gbWF0Y2ggJiYgbWF0Y2hbMV07XG4gIHJldHVybiBuYW1lIHx8ICcnO1xufVxuZnVuY3Rpb24gZ2V0RnVuY3Rpb25Db21wb25lbnROYW1lKENvbXBvbmVudCwgZmFsbGJhY2sgPSAnJykge1xuICByZXR1cm4gQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lIHx8IGdldEZ1bmN0aW9uTmFtZShDb21wb25lbnQpIHx8IGZhbGxiYWNrO1xufVxuZnVuY3Rpb24gZ2V0V3JhcHBlZE5hbWUob3V0ZXJUeXBlLCBpbm5lclR5cGUsIHdyYXBwZXJOYW1lKSB7XG4gIGNvbnN0IGZ1bmN0aW9uTmFtZSA9IGdldEZ1bmN0aW9uQ29tcG9uZW50TmFtZShpbm5lclR5cGUpO1xuICByZXR1cm4gb3V0ZXJUeXBlLmRpc3BsYXlOYW1lIHx8IChmdW5jdGlvbk5hbWUgIT09ICcnID8gYCR7d3JhcHBlck5hbWV9KCR7ZnVuY3Rpb25OYW1lfSlgIDogd3JhcHBlck5hbWUpO1xufVxuXG4vKipcbiAqIGNoZXJyeS1waWNrIGZyb21cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9ibG9iLzc2OWIxZjI3MGUxMjUxZDlkYmRjZTBmY2JkOWU5MmU1MDJkMDU5YjgvcGFja2FnZXMvc2hhcmVkL2dldENvbXBvbmVudE5hbWUuanNcbiAqIG9yaWdpbmFsbHkgZm9ya2VkIGZyb20gcmVjb21wb3NlL2dldERpc3BsYXlOYW1lIHdpdGggYWRkZWQgSUUxMSBzdXBwb3J0XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldERpc3BsYXlOYW1lKENvbXBvbmVudCkge1xuICBpZiAoQ29tcG9uZW50ID09IG51bGwpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG4gIGlmICh0eXBlb2YgQ29tcG9uZW50ID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBDb21wb25lbnQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBDb21wb25lbnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZ2V0RnVuY3Rpb25Db21wb25lbnROYW1lKENvbXBvbmVudCwgJ0NvbXBvbmVudCcpO1xuICB9XG5cbiAgLy8gVHlwZVNjcmlwdCBjYW4ndCBoYXZlIGNvbXBvbmVudHMgYXMgb2JqZWN0cyBidXQgdGhleSBleGlzdCBpbiB0aGUgZm9ybSBvZiBgbWVtb2Agb3IgYFN1c3BlbnNlYFxuICBpZiAodHlwZW9mIENvbXBvbmVudCA9PT0gJ29iamVjdCcpIHtcbiAgICBzd2l0Y2ggKENvbXBvbmVudC4kJHR5cGVvZikge1xuICAgICAgY2FzZSBGb3J3YXJkUmVmOlxuICAgICAgICByZXR1cm4gZ2V0V3JhcHBlZE5hbWUoQ29tcG9uZW50LCBDb21wb25lbnQucmVuZGVyLCAnRm9yd2FyZFJlZicpO1xuICAgICAgY2FzZSBNZW1vOlxuICAgICAgICByZXR1cm4gZ2V0V3JhcHBlZE5hbWUoQ29tcG9uZW50LCBDb21wb25lbnQudHlwZSwgJ21lbW8nKTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG4gIHJldHVybiB1bmRlZmluZWQ7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcIm93bmVyU3RhdGVcIl0sXG4gIF9leGNsdWRlZDIgPSBbXCJ2YXJpYW50c1wiXSxcbiAgX2V4Y2x1ZGVkMyA9IFtcIm5hbWVcIiwgXCJzbG90XCIsIFwic2tpcFZhcmlhbnRzUmVzb2x2ZXJcIiwgXCJza2lwU3hcIiwgXCJvdmVycmlkZXNSZXNvbHZlclwiXTtcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVyc2NvcmUtZGFuZ2xlICovXG5pbXBvcnQgc3R5bGVkRW5naW5lU3R5bGVkLCB7IGludGVybmFsX3Byb2Nlc3NTdHlsZXMgYXMgcHJvY2Vzc1N0eWxlcyB9IGZyb20gJ0BtdWkvc3R5bGVkLWVuZ2luZSc7XG5pbXBvcnQgeyBpc1BsYWluT2JqZWN0IH0gZnJvbSAnQG11aS91dGlscy9kZWVwbWVyZ2UnO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnQG11aS91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCBnZXREaXNwbGF5TmFtZSBmcm9tICdAbXVpL3V0aWxzL2dldERpc3BsYXlOYW1lJztcbmltcG9ydCBjcmVhdGVUaGVtZSBmcm9tICcuL2NyZWF0ZVRoZW1lJztcbmltcG9ydCBzdHlsZUZ1bmN0aW9uU3ggZnJvbSAnLi9zdHlsZUZ1bmN0aW9uU3gnO1xuZnVuY3Rpb24gaXNFbXB0eShvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikubGVuZ3RoID09PSAwO1xufVxuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vZW1vdGlvbi1qcy9lbW90aW9uL2Jsb2IvMjZkZWQ2MTA5ZmNkOGNhOTg3NWNjMmNlNDU2NGZlZTY3OGEzZjNjNS9wYWNrYWdlcy9zdHlsZWQvc3JjL3V0aWxzLmpzI0w0MFxuZnVuY3Rpb24gaXNTdHJpbmdUYWcodGFnKSB7XG4gIHJldHVybiB0eXBlb2YgdGFnID09PSAnc3RyaW5nJyAmJlxuICAvLyA5NiBpcyBvbmUgbGVzcyB0aGFuIHRoZSBjaGFyIGNvZGVcbiAgLy8gZm9yIFwiYVwiIHNvIHRoaXMgaXMgY2hlY2tpbmcgdGhhdFxuICAvLyBpdCdzIGEgbG93ZXJjYXNlIGNoYXJhY3RlclxuICB0YWcuY2hhckNvZGVBdCgwKSA+IDk2O1xufVxuXG4vLyBVcGRhdGUgL3N5c3RlbS9zdHlsZWQvI2FwaSBpbiBjYXNlIGlmIHRoaXMgY2hhbmdlc1xuZXhwb3J0IGZ1bmN0aW9uIHNob3VsZEZvcndhcmRQcm9wKHByb3ApIHtcbiAgcmV0dXJuIHByb3AgIT09ICdvd25lclN0YXRlJyAmJiBwcm9wICE9PSAndGhlbWUnICYmIHByb3AgIT09ICdzeCcgJiYgcHJvcCAhPT0gJ2FzJztcbn1cbmV4cG9ydCBjb25zdCBzeXN0ZW1EZWZhdWx0VGhlbWUgPSBjcmVhdGVUaGVtZSgpO1xuY29uc3QgbG93ZXJjYXNlRmlyc3RMZXR0ZXIgPSBzdHJpbmcgPT4ge1xuICBpZiAoIXN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmc7XG4gIH1cbiAgcmV0dXJuIHN0cmluZy5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKSArIHN0cmluZy5zbGljZSgxKTtcbn07XG5mdW5jdGlvbiByZXNvbHZlVGhlbWUoe1xuICBkZWZhdWx0VGhlbWUsXG4gIHRoZW1lLFxuICB0aGVtZUlkXG59KSB7XG4gIHJldHVybiBpc0VtcHR5KHRoZW1lKSA/IGRlZmF1bHRUaGVtZSA6IHRoZW1lW3RoZW1lSWRdIHx8IHRoZW1lO1xufVxuZnVuY3Rpb24gZGVmYXVsdE92ZXJyaWRlc1Jlc29sdmVyKHNsb3QpIHtcbiAgaWYgKCFzbG90KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXNbc2xvdF07XG59XG5mdW5jdGlvbiBwcm9jZXNzU3R5bGVBcmcoY2FsbGFibGVTdHlsZSwgX3JlZikge1xuICBsZXQge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBfcmVmLFxuICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgX2V4Y2x1ZGVkKTtcbiAgY29uc3QgcmVzb2x2ZWRTdHlsZXNBcmcgPSB0eXBlb2YgY2FsbGFibGVTdHlsZSA9PT0gJ2Z1bmN0aW9uJyA/IGNhbGxhYmxlU3R5bGUoX2V4dGVuZHMoe1xuICAgIG93bmVyU3RhdGVcbiAgfSwgcHJvcHMpKSA6IGNhbGxhYmxlU3R5bGU7XG4gIGlmIChBcnJheS5pc0FycmF5KHJlc29sdmVkU3R5bGVzQXJnKSkge1xuICAgIHJldHVybiByZXNvbHZlZFN0eWxlc0FyZy5mbGF0TWFwKHJlc29sdmVkU3R5bGUgPT4gcHJvY2Vzc1N0eWxlQXJnKHJlc29sdmVkU3R5bGUsIF9leHRlbmRzKHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9LCBwcm9wcykpKTtcbiAgfVxuICBpZiAoISFyZXNvbHZlZFN0eWxlc0FyZyAmJiB0eXBlb2YgcmVzb2x2ZWRTdHlsZXNBcmcgPT09ICdvYmplY3QnICYmIEFycmF5LmlzQXJyYXkocmVzb2x2ZWRTdHlsZXNBcmcudmFyaWFudHMpKSB7XG4gICAgY29uc3Qge1xuICAgICAgICB2YXJpYW50cyA9IFtdXG4gICAgICB9ID0gcmVzb2x2ZWRTdHlsZXNBcmcsXG4gICAgICBvdGhlclN0eWxlcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHJlc29sdmVkU3R5bGVzQXJnLCBfZXhjbHVkZWQyKTtcbiAgICBsZXQgcmVzdWx0ID0gb3RoZXJTdHlsZXM7XG4gICAgdmFyaWFudHMuZm9yRWFjaCh2YXJpYW50ID0+IHtcbiAgICAgIGxldCBpc01hdGNoID0gdHJ1ZTtcbiAgICAgIGlmICh0eXBlb2YgdmFyaWFudC5wcm9wcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBpc01hdGNoID0gdmFyaWFudC5wcm9wcyhfZXh0ZW5kcyh7XG4gICAgICAgICAgb3duZXJTdGF0ZVxuICAgICAgICB9LCBwcm9wcywgb3duZXJTdGF0ZSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgT2JqZWN0LmtleXModmFyaWFudC5wcm9wcykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICAgIGlmICgob3duZXJTdGF0ZSA9PSBudWxsID8gdm9pZCAwIDogb3duZXJTdGF0ZVtrZXldKSAhPT0gdmFyaWFudC5wcm9wc1trZXldICYmIHByb3BzW2tleV0gIT09IHZhcmlhbnQucHJvcHNba2V5XSkge1xuICAgICAgICAgICAgaXNNYXRjaCA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAoaXNNYXRjaCkge1xuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkocmVzdWx0KSkge1xuICAgICAgICAgIHJlc3VsdCA9IFtyZXN1bHRdO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdC5wdXNoKHR5cGVvZiB2YXJpYW50LnN0eWxlID09PSAnZnVuY3Rpb24nID8gdmFyaWFudC5zdHlsZShfZXh0ZW5kcyh7XG4gICAgICAgICAgb3duZXJTdGF0ZVxuICAgICAgICB9LCBwcm9wcywgb3duZXJTdGF0ZSkpIDogdmFyaWFudC5zdHlsZSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICByZXR1cm4gcmVzb2x2ZWRTdHlsZXNBcmc7XG59XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVTdHlsZWQoaW5wdXQgPSB7fSkge1xuICBjb25zdCB7XG4gICAgdGhlbWVJZCxcbiAgICBkZWZhdWx0VGhlbWUgPSBzeXN0ZW1EZWZhdWx0VGhlbWUsXG4gICAgcm9vdFNob3VsZEZvcndhcmRQcm9wID0gc2hvdWxkRm9yd2FyZFByb3AsXG4gICAgc2xvdFNob3VsZEZvcndhcmRQcm9wID0gc2hvdWxkRm9yd2FyZFByb3BcbiAgfSA9IGlucHV0O1xuICBjb25zdCBzeXN0ZW1TeCA9IHByb3BzID0+IHtcbiAgICByZXR1cm4gc3R5bGVGdW5jdGlvblN4KF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgdGhlbWU6IHJlc29sdmVUaGVtZShfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgICAgZGVmYXVsdFRoZW1lLFxuICAgICAgICB0aGVtZUlkXG4gICAgICB9KSlcbiAgICB9KSk7XG4gIH07XG4gIHN5c3RlbVN4Ll9fbXVpX3N5c3RlbVN4ID0gdHJ1ZTtcbiAgcmV0dXJuICh0YWcsIGlucHV0T3B0aW9ucyA9IHt9KSA9PiB7XG4gICAgLy8gRmlsdGVyIG91dCB0aGUgYHN4YCBzdHlsZSBmdW5jdGlvbiBmcm9tIHRoZSBwcmV2aW91cyBzdHlsZWQgY29tcG9uZW50IHRvIHByZXZlbnQgdW5uZWNlc3Nhcnkgc3R5bGVzIGdlbmVyYXRlZCBieSB0aGUgY29tcG9zaXRlIGNvbXBvbmVudHMuXG4gICAgcHJvY2Vzc1N0eWxlcyh0YWcsIHN0eWxlcyA9PiBzdHlsZXMuZmlsdGVyKHN0eWxlID0+ICEoc3R5bGUgIT0gbnVsbCAmJiBzdHlsZS5fX211aV9zeXN0ZW1TeCkpKTtcbiAgICBjb25zdCB7XG4gICAgICAgIG5hbWU6IGNvbXBvbmVudE5hbWUsXG4gICAgICAgIHNsb3Q6IGNvbXBvbmVudFNsb3QsXG4gICAgICAgIHNraXBWYXJpYW50c1Jlc29sdmVyOiBpbnB1dFNraXBWYXJpYW50c1Jlc29sdmVyLFxuICAgICAgICBza2lwU3g6IGlucHV0U2tpcFN4LFxuICAgICAgICAvLyBUT0RPIHY2OiByZW1vdmUgYGxvd2VyY2FzZUZpcnN0TGV0dGVyKClgIGluIHRoZSBuZXh0IG1ham9yIHJlbGVhc2VcbiAgICAgICAgLy8gRm9yIG1vcmUgZGV0YWlsczogaHR0cHM6Ly9naXRodWIuY29tL211aS9tYXRlcmlhbC11aS9wdWxsLzM3OTA4XG4gICAgICAgIG92ZXJyaWRlc1Jlc29sdmVyID0gZGVmYXVsdE92ZXJyaWRlc1Jlc29sdmVyKGxvd2VyY2FzZUZpcnN0TGV0dGVyKGNvbXBvbmVudFNsb3QpKVxuICAgICAgfSA9IGlucHV0T3B0aW9ucyxcbiAgICAgIG9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShpbnB1dE9wdGlvbnMsIF9leGNsdWRlZDMpO1xuXG4gICAgLy8gaWYgc2tpcFZhcmlhbnRzUmVzb2x2ZXIgb3B0aW9uIGlzIGRlZmluZWQsIHRha2UgdGhlIHZhbHVlLCBvdGhlcndpc2UsIHRydWUgZm9yIHJvb3QgYW5kIGZhbHNlIGZvciBvdGhlciBzbG90cy5cbiAgICBjb25zdCBza2lwVmFyaWFudHNSZXNvbHZlciA9IGlucHV0U2tpcFZhcmlhbnRzUmVzb2x2ZXIgIT09IHVuZGVmaW5lZCA/IGlucHV0U2tpcFZhcmlhbnRzUmVzb2x2ZXIgOlxuICAgIC8vIFRPRE8gdjY6IHJlbW92ZSBgUm9vdGAgaW4gdGhlIG5leHQgbWFqb3IgcmVsZWFzZVxuICAgIC8vIEZvciBtb3JlIGRldGFpbHM6IGh0dHBzOi8vZ2l0aHViLmNvbS9tdWkvbWF0ZXJpYWwtdWkvcHVsbC8zNzkwOFxuICAgIGNvbXBvbmVudFNsb3QgJiYgY29tcG9uZW50U2xvdCAhPT0gJ1Jvb3QnICYmIGNvbXBvbmVudFNsb3QgIT09ICdyb290JyB8fCBmYWxzZTtcbiAgICBjb25zdCBza2lwU3ggPSBpbnB1dFNraXBTeCB8fCBmYWxzZTtcbiAgICBsZXQgbGFiZWw7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChjb21wb25lbnROYW1lKSB7XG4gICAgICAgIC8vIFRPRE8gdjY6IHJlbW92ZSBgbG93ZXJjYXNlRmlyc3RMZXR0ZXIoKWAgaW4gdGhlIG5leHQgbWFqb3IgcmVsZWFzZVxuICAgICAgICAvLyBGb3IgbW9yZSBkZXRhaWxzOiBodHRwczovL2dpdGh1Yi5jb20vbXVpL21hdGVyaWFsLXVpL3B1bGwvMzc5MDhcbiAgICAgICAgbGFiZWwgPSBgJHtjb21wb25lbnROYW1lfS0ke2xvd2VyY2FzZUZpcnN0TGV0dGVyKGNvbXBvbmVudFNsb3QgfHwgJ1Jvb3QnKX1gO1xuICAgICAgfVxuICAgIH1cbiAgICBsZXQgc2hvdWxkRm9yd2FyZFByb3BPcHRpb24gPSBzaG91bGRGb3J3YXJkUHJvcDtcblxuICAgIC8vIFRPRE8gdjY6IHJlbW92ZSBgUm9vdGAgaW4gdGhlIG5leHQgbWFqb3IgcmVsZWFzZVxuICAgIC8vIEZvciBtb3JlIGRldGFpbHM6IGh0dHBzOi8vZ2l0aHViLmNvbS9tdWkvbWF0ZXJpYWwtdWkvcHVsbC8zNzkwOFxuICAgIGlmIChjb21wb25lbnRTbG90ID09PSAnUm9vdCcgfHwgY29tcG9uZW50U2xvdCA9PT0gJ3Jvb3QnKSB7XG4gICAgICBzaG91bGRGb3J3YXJkUHJvcE9wdGlvbiA9IHJvb3RTaG91bGRGb3J3YXJkUHJvcDtcbiAgICB9IGVsc2UgaWYgKGNvbXBvbmVudFNsb3QpIHtcbiAgICAgIC8vIGFueSBvdGhlciBzbG90IHNwZWNpZmllZFxuICAgICAgc2hvdWxkRm9yd2FyZFByb3BPcHRpb24gPSBzbG90U2hvdWxkRm9yd2FyZFByb3A7XG4gICAgfSBlbHNlIGlmIChpc1N0cmluZ1RhZyh0YWcpKSB7XG4gICAgICAvLyBmb3Igc3RyaW5nIChodG1sKSB0YWcsIHByZXNlcnZlIHRoZSBiZWhhdmlvciBpbiBlbW90aW9uICYgc3R5bGVkLWNvbXBvbmVudHMuXG4gICAgICBzaG91bGRGb3J3YXJkUHJvcE9wdGlvbiA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgY29uc3QgZGVmYXVsdFN0eWxlZFJlc29sdmVyID0gc3R5bGVkRW5naW5lU3R5bGVkKHRhZywgX2V4dGVuZHMoe1xuICAgICAgc2hvdWxkRm9yd2FyZFByb3A6IHNob3VsZEZvcndhcmRQcm9wT3B0aW9uLFxuICAgICAgbGFiZWxcbiAgICB9LCBvcHRpb25zKSk7XG4gICAgY29uc3QgdHJhbnNmb3JtU3R5bGVBcmcgPSBzdHlsZXNBcmcgPT4ge1xuICAgICAgLy8gT24gdGhlIHNlcnZlciBFbW90aW9uIGRvZXNuJ3QgdXNlIFJlYWN0LmZvcndhcmRSZWYgZm9yIGNyZWF0aW5nIGNvbXBvbmVudHMsIHNvIHRoZSBjcmVhdGVkXG4gICAgICAvLyBjb21wb25lbnQgc3RheXMgYXMgYSBmdW5jdGlvbi4gVGhpcyBjb25kaXRpb24gbWFrZXMgc3VyZSB0aGF0IHdlIGRvIG5vdCBpbnRlcnBvbGF0ZSBmdW5jdGlvbnNcbiAgICAgIC8vIHdoaWNoIGFyZSBiYXNpY2FsbHkgY29tcG9uZW50cyB1c2VkIGFzIGEgc2VsZWN0b3JzLlxuICAgICAgaWYgKHR5cGVvZiBzdHlsZXNBcmcgPT09ICdmdW5jdGlvbicgJiYgc3R5bGVzQXJnLl9fZW1vdGlvbl9yZWFsICE9PSBzdHlsZXNBcmcgfHwgaXNQbGFpbk9iamVjdChzdHlsZXNBcmcpKSB7XG4gICAgICAgIHJldHVybiBwcm9wcyA9PiBwcm9jZXNzU3R5bGVBcmcoc3R5bGVzQXJnLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgICAgICB0aGVtZTogcmVzb2x2ZVRoZW1lKHtcbiAgICAgICAgICAgIHRoZW1lOiBwcm9wcy50aGVtZSxcbiAgICAgICAgICAgIGRlZmF1bHRUaGVtZSxcbiAgICAgICAgICAgIHRoZW1lSWRcbiAgICAgICAgICB9KVxuICAgICAgICB9KSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3R5bGVzQXJnO1xuICAgIH07XG4gICAgY29uc3QgbXVpU3R5bGVkUmVzb2x2ZXIgPSAoc3R5bGVBcmcsIC4uLmV4cHJlc3Npb25zKSA9PiB7XG4gICAgICBsZXQgdHJhbnNmb3JtZWRTdHlsZUFyZyA9IHRyYW5zZm9ybVN0eWxlQXJnKHN0eWxlQXJnKTtcbiAgICAgIGNvbnN0IGV4cHJlc3Npb25zV2l0aERlZmF1bHRUaGVtZSA9IGV4cHJlc3Npb25zID8gZXhwcmVzc2lvbnMubWFwKHRyYW5zZm9ybVN0eWxlQXJnKSA6IFtdO1xuICAgICAgaWYgKGNvbXBvbmVudE5hbWUgJiYgb3ZlcnJpZGVzUmVzb2x2ZXIpIHtcbiAgICAgICAgZXhwcmVzc2lvbnNXaXRoRGVmYXVsdFRoZW1lLnB1c2gocHJvcHMgPT4ge1xuICAgICAgICAgIGNvbnN0IHRoZW1lID0gcmVzb2x2ZVRoZW1lKF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgICAgICAgZGVmYXVsdFRoZW1lLFxuICAgICAgICAgICAgdGhlbWVJZFxuICAgICAgICAgIH0pKTtcbiAgICAgICAgICBpZiAoIXRoZW1lLmNvbXBvbmVudHMgfHwgIXRoZW1lLmNvbXBvbmVudHNbY29tcG9uZW50TmFtZV0gfHwgIXRoZW1lLmNvbXBvbmVudHNbY29tcG9uZW50TmFtZV0uc3R5bGVPdmVycmlkZXMpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBzdHlsZU92ZXJyaWRlcyA9IHRoZW1lLmNvbXBvbmVudHNbY29tcG9uZW50TmFtZV0uc3R5bGVPdmVycmlkZXM7XG4gICAgICAgICAgY29uc3QgcmVzb2x2ZWRTdHlsZU92ZXJyaWRlcyA9IHt9O1xuICAgICAgICAgIC8vIFRPRE86IHY3IHJlbW92ZSBpdGVyYXRpb24gYW5kIHVzZSBgcmVzb2x2ZVN0eWxlQXJnKHN0eWxlT3ZlcnJpZGVzW3Nsb3RdKWAgZGlyZWN0bHlcbiAgICAgICAgICBPYmplY3QuZW50cmllcyhzdHlsZU92ZXJyaWRlcykuZm9yRWFjaCgoW3Nsb3RLZXksIHNsb3RTdHlsZV0pID0+IHtcbiAgICAgICAgICAgIHJlc29sdmVkU3R5bGVPdmVycmlkZXNbc2xvdEtleV0gPSBwcm9jZXNzU3R5bGVBcmcoc2xvdFN0eWxlLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgICAgICAgICAgdGhlbWVcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gb3ZlcnJpZGVzUmVzb2x2ZXIocHJvcHMsIHJlc29sdmVkU3R5bGVPdmVycmlkZXMpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChjb21wb25lbnROYW1lICYmICFza2lwVmFyaWFudHNSZXNvbHZlcikge1xuICAgICAgICBleHByZXNzaW9uc1dpdGhEZWZhdWx0VGhlbWUucHVzaChwcm9wcyA9PiB7XG4gICAgICAgICAgdmFyIF90aGVtZSRjb21wb25lbnRzO1xuICAgICAgICAgIGNvbnN0IHRoZW1lID0gcmVzb2x2ZVRoZW1lKF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgICAgICAgZGVmYXVsdFRoZW1lLFxuICAgICAgICAgICAgdGhlbWVJZFxuICAgICAgICAgIH0pKTtcbiAgICAgICAgICBjb25zdCB0aGVtZVZhcmlhbnRzID0gdGhlbWUgPT0gbnVsbCB8fCAoX3RoZW1lJGNvbXBvbmVudHMgPSB0aGVtZS5jb21wb25lbnRzKSA9PSBudWxsIHx8IChfdGhlbWUkY29tcG9uZW50cyA9IF90aGVtZSRjb21wb25lbnRzW2NvbXBvbmVudE5hbWVdKSA9PSBudWxsID8gdm9pZCAwIDogX3RoZW1lJGNvbXBvbmVudHMudmFyaWFudHM7XG4gICAgICAgICAgcmV0dXJuIHByb2Nlc3NTdHlsZUFyZyh7XG4gICAgICAgICAgICB2YXJpYW50czogdGhlbWVWYXJpYW50c1xuICAgICAgICAgIH0sIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgICAgICAgdGhlbWVcbiAgICAgICAgICB9KSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKCFza2lwU3gpIHtcbiAgICAgICAgZXhwcmVzc2lvbnNXaXRoRGVmYXVsdFRoZW1lLnB1c2goc3lzdGVtU3gpO1xuICAgICAgfVxuICAgICAgY29uc3QgbnVtT2ZDdXN0b21GbnNBcHBsaWVkID0gZXhwcmVzc2lvbnNXaXRoRGVmYXVsdFRoZW1lLmxlbmd0aCAtIGV4cHJlc3Npb25zLmxlbmd0aDtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHN0eWxlQXJnKSAmJiBudW1PZkN1c3RvbUZuc0FwcGxpZWQgPiAwKSB7XG4gICAgICAgIGNvbnN0IHBsYWNlaG9sZGVycyA9IG5ldyBBcnJheShudW1PZkN1c3RvbUZuc0FwcGxpZWQpLmZpbGwoJycpO1xuICAgICAgICAvLyBJZiB0aGUgdHlwZSBpcyBhcnJheSwgdGhhbiB3ZSBuZWVkIHRvIGFkZCBwbGFjZWhvbGRlcnMgaW4gdGhlIHRlbXBsYXRlIGZvciB0aGUgb3ZlcnJpZGVzLCB2YXJpYW50cyBhbmQgdGhlIHN4IHN0eWxlcy5cbiAgICAgICAgdHJhbnNmb3JtZWRTdHlsZUFyZyA9IFsuLi5zdHlsZUFyZywgLi4ucGxhY2Vob2xkZXJzXTtcbiAgICAgICAgdHJhbnNmb3JtZWRTdHlsZUFyZy5yYXcgPSBbLi4uc3R5bGVBcmcucmF3LCAuLi5wbGFjZWhvbGRlcnNdO1xuICAgICAgfVxuICAgICAgY29uc3QgQ29tcG9uZW50ID0gZGVmYXVsdFN0eWxlZFJlc29sdmVyKHRyYW5zZm9ybWVkU3R5bGVBcmcsIC4uLmV4cHJlc3Npb25zV2l0aERlZmF1bHRUaGVtZSk7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBsZXQgZGlzcGxheU5hbWU7XG4gICAgICAgIGlmIChjb21wb25lbnROYW1lKSB7XG4gICAgICAgICAgZGlzcGxheU5hbWUgPSBgJHtjb21wb25lbnROYW1lfSR7Y2FwaXRhbGl6ZShjb21wb25lbnRTbG90IHx8ICcnKX1gO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkaXNwbGF5TmFtZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgZGlzcGxheU5hbWUgPSBgU3R5bGVkKCR7Z2V0RGlzcGxheU5hbWUodGFnKX0pYDtcbiAgICAgICAgfVxuICAgICAgICBDb21wb25lbnQuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcbiAgICAgIH1cbiAgICAgIGlmICh0YWcubXVpTmFtZSkge1xuICAgICAgICBDb21wb25lbnQubXVpTmFtZSA9IHRhZy5tdWlOYW1lO1xuICAgICAgfVxuICAgICAgcmV0dXJuIENvbXBvbmVudDtcbiAgICB9O1xuICAgIGlmIChkZWZhdWx0U3R5bGVkUmVzb2x2ZXIud2l0aENvbmZpZykge1xuICAgICAgbXVpU3R5bGVkUmVzb2x2ZXIud2l0aENvbmZpZyA9IGRlZmF1bHRTdHlsZWRSZXNvbHZlci53aXRoQ29uZmlnO1xuICAgIH1cbiAgICByZXR1cm4gbXVpU3R5bGVkUmVzb2x2ZXI7XG4gIH07XG59IiwiaW1wb3J0IGNyZWF0ZVN0eWxlZCBmcm9tICcuL2NyZWF0ZVN0eWxlZCc7XG5jb25zdCBzdHlsZWQgPSBjcmVhdGVTdHlsZWQoKTtcbmV4cG9ydCBkZWZhdWx0IHN0eWxlZDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbi8qKlxuICogQWRkIGtleXMsIHZhbHVlcyBvZiBgZGVmYXVsdFByb3BzYCB0aGF0IGRvZXMgbm90IGV4aXN0IGluIGBwcm9wc2BcbiAqIEBwYXJhbSB7b2JqZWN0fSBkZWZhdWx0UHJvcHNcbiAqIEBwYXJhbSB7b2JqZWN0fSBwcm9wc1xuICogQHJldHVybnMge29iamVjdH0gcmVzb2x2ZWQgcHJvcHNcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVzb2x2ZVByb3BzKGRlZmF1bHRQcm9wcywgcHJvcHMpIHtcbiAgY29uc3Qgb3V0cHV0ID0gX2V4dGVuZHMoe30sIHByb3BzKTtcbiAgT2JqZWN0LmtleXMoZGVmYXVsdFByb3BzKS5mb3JFYWNoKHByb3BOYW1lID0+IHtcbiAgICBpZiAocHJvcE5hbWUudG9TdHJpbmcoKS5tYXRjaCgvXihjb21wb25lbnRzfHNsb3RzKSQvKSkge1xuICAgICAgb3V0cHV0W3Byb3BOYW1lXSA9IF9leHRlbmRzKHt9LCBkZWZhdWx0UHJvcHNbcHJvcE5hbWVdLCBvdXRwdXRbcHJvcE5hbWVdKTtcbiAgICB9IGVsc2UgaWYgKHByb3BOYW1lLnRvU3RyaW5nKCkubWF0Y2goL14oY29tcG9uZW50c1Byb3BzfHNsb3RQcm9wcykkLykpIHtcbiAgICAgIGNvbnN0IGRlZmF1bHRTbG90UHJvcHMgPSBkZWZhdWx0UHJvcHNbcHJvcE5hbWVdIHx8IHt9O1xuICAgICAgY29uc3Qgc2xvdFByb3BzID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgICAgb3V0cHV0W3Byb3BOYW1lXSA9IHt9O1xuICAgICAgaWYgKCFzbG90UHJvcHMgfHwgIU9iamVjdC5rZXlzKHNsb3RQcm9wcykpIHtcbiAgICAgICAgLy8gUmVkdWNlIHRoZSBpdGVyYXRpb24gaWYgdGhlIHNsb3QgcHJvcHMgaXMgZW1wdHlcbiAgICAgICAgb3V0cHV0W3Byb3BOYW1lXSA9IGRlZmF1bHRTbG90UHJvcHM7XG4gICAgICB9IGVsc2UgaWYgKCFkZWZhdWx0U2xvdFByb3BzIHx8ICFPYmplY3Qua2V5cyhkZWZhdWx0U2xvdFByb3BzKSkge1xuICAgICAgICAvLyBSZWR1Y2UgdGhlIGl0ZXJhdGlvbiBpZiB0aGUgZGVmYXVsdCBzbG90IHByb3BzIGlzIGVtcHR5XG4gICAgICAgIG91dHB1dFtwcm9wTmFtZV0gPSBzbG90UHJvcHM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXRwdXRbcHJvcE5hbWVdID0gX2V4dGVuZHMoe30sIHNsb3RQcm9wcyk7XG4gICAgICAgIE9iamVjdC5rZXlzKGRlZmF1bHRTbG90UHJvcHMpLmZvckVhY2goc2xvdFByb3BOYW1lID0+IHtcbiAgICAgICAgICBvdXRwdXRbcHJvcE5hbWVdW3Nsb3RQcm9wTmFtZV0gPSByZXNvbHZlUHJvcHMoZGVmYXVsdFNsb3RQcm9wc1tzbG90UHJvcE5hbWVdLCBzbG90UHJvcHNbc2xvdFByb3BOYW1lXSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAob3V0cHV0W3Byb3BOYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBvdXRwdXRbcHJvcE5hbWVdID0gZGVmYXVsdFByb3BzW3Byb3BOYW1lXTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gb3V0cHV0O1xufSIsImltcG9ydCByZXNvbHZlUHJvcHMgZnJvbSAnQG11aS91dGlscy9yZXNvbHZlUHJvcHMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VGhlbWVQcm9wcyhwYXJhbXMpIHtcbiAgY29uc3Qge1xuICAgIHRoZW1lLFxuICAgIG5hbWUsXG4gICAgcHJvcHNcbiAgfSA9IHBhcmFtcztcbiAgaWYgKCF0aGVtZSB8fCAhdGhlbWUuY29tcG9uZW50cyB8fCAhdGhlbWUuY29tcG9uZW50c1tuYW1lXSB8fCAhdGhlbWUuY29tcG9uZW50c1tuYW1lXS5kZWZhdWx0UHJvcHMpIHtcbiAgICByZXR1cm4gcHJvcHM7XG4gIH1cbiAgcmV0dXJuIHJlc29sdmVQcm9wcyh0aGVtZS5jb21wb25lbnRzW25hbWVdLmRlZmF1bHRQcm9wcywgcHJvcHMpO1xufSIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IGdldFRoZW1lUHJvcHMgZnJvbSAnLi9nZXRUaGVtZVByb3BzJztcbmltcG9ydCB1c2VUaGVtZSBmcm9tICcuLi91c2VUaGVtZSc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VUaGVtZVByb3BzKHtcbiAgcHJvcHMsXG4gIG5hbWUsXG4gIGRlZmF1bHRUaGVtZSxcbiAgdGhlbWVJZFxufSkge1xuICBsZXQgdGhlbWUgPSB1c2VUaGVtZShkZWZhdWx0VGhlbWUpO1xuICBpZiAodGhlbWVJZCkge1xuICAgIHRoZW1lID0gdGhlbWVbdGhlbWVJZF0gfHwgdGhlbWU7XG4gIH1cbiAgY29uc3QgbWVyZ2VkUHJvcHMgPSBnZXRUaGVtZVByb3BzKHtcbiAgICB0aGVtZSxcbiAgICBuYW1lLFxuICAgIHByb3BzXG4gIH0pO1xuICByZXR1cm4gbWVyZ2VkUHJvcHM7XG59IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbi8qKlxuICogQSB2ZXJzaW9uIG9mIGBSZWFjdC51c2VMYXlvdXRFZmZlY3RgIHRoYXQgZG9lcyBub3Qgc2hvdyBhIHdhcm5pbmcgd2hlbiBzZXJ2ZXItc2lkZSByZW5kZXJpbmcuXG4gKiBUaGlzIGlzIHVzZWZ1bCBmb3IgZWZmZWN0cyB0aGF0IGFyZSBvbmx5IG5lZWRlZCBmb3IgY2xpZW50LXNpZGUgcmVuZGVyaW5nIGJ1dCBub3QgZm9yIFNTUi5cbiAqXG4gKiBCZWZvcmUgeW91IHVzZSB0aGlzIGhvb2ssIG1ha2Ugc3VyZSB0byByZWFkIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL2dhZWFyb24vZTdkOTdjZGYzOGEyOTA3OTI0ZWExMmU0ZWJkZjNjODVcbiAqIGFuZCBjb25maXJtIGl0IGRvZXNuJ3QgYXBwbHkgdG8geW91ciB1c2UtY2FzZS5cbiAqL1xuY29uc3QgdXNlRW5oYW5jZWRFZmZlY3QgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IFJlYWN0LnVzZUxheW91dEVmZmVjdCA6IFJlYWN0LnVzZUVmZmVjdDtcbmV4cG9ydCBkZWZhdWx0IHVzZUVuaGFuY2VkRWZmZWN0OyIsImZ1bmN0aW9uIGNsYW1wKHZhbCwgbWluID0gTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVIsIG1heCA9IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSKSB7XG4gIHJldHVybiBNYXRoLm1heChtaW4sIE1hdGgubWluKHZhbCwgbWF4KSk7XG59XG5leHBvcnQgZGVmYXVsdCBjbGFtcDsiLCIvKipcbiAqIFNhZmUgY2hhaW5lZCBmdW5jdGlvbi5cbiAqXG4gKiBXaWxsIG9ubHkgY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIGlmIG5lZWRlZCxcbiAqIG90aGVyd2lzZSB3aWxsIHBhc3MgYmFjayBleGlzdGluZyBmdW5jdGlvbnMgb3IgbnVsbC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKC4uLmZ1bmNzKSB7XG4gIHJldHVybiBmdW5jcy5yZWR1Y2UoKGFjYywgZnVuYykgPT4ge1xuICAgIGlmIChmdW5jID09IG51bGwpIHtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiBjaGFpbmVkRnVuY3Rpb24oLi4uYXJncykge1xuICAgICAgYWNjLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9O1xuICB9LCAoKSA9PiB7fSk7XG59IiwiLy8gQ29ycmVzcG9uZHMgdG8gMTAgZnJhbWVzIGF0IDYwIEh6LlxuLy8gQSBmZXcgYnl0ZXMgcGF5bG9hZCBvdmVyaGVhZCB3aGVuIGxvZGFzaC9kZWJvdW5jZSBpcyB+MyBrQiBhbmQgZGVib3VuY2UgfjMwMCBCLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVib3VuY2UoZnVuYywgd2FpdCA9IDE2Nikge1xuICBsZXQgdGltZW91dDtcbiAgZnVuY3Rpb24gZGVib3VuY2VkKC4uLmFyZ3MpIHtcbiAgICBjb25zdCBsYXRlciA9ICgpID0+IHtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgfTtcbiAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHdhaXQpO1xuICB9XG4gIGRlYm91bmNlZC5jbGVhciA9ICgpID0+IHtcbiAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gIH07XG4gIHJldHVybiBkZWJvdW5jZWQ7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVwcmVjYXRlZFByb3BUeXBlKHZhbGlkYXRvciwgcmVhc29uKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgcmV0dXJuICgpID0+IG51bGw7XG4gIH1cbiAgcmV0dXJuIChwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpID0+IHtcbiAgICBjb25zdCBjb21wb25lbnROYW1lU2FmZSA9IGNvbXBvbmVudE5hbWUgfHwgJzw8YW5vbnltb3VzPj4nO1xuICAgIGNvbnN0IHByb3BGdWxsTmFtZVNhZmUgPSBwcm9wRnVsbE5hbWUgfHwgcHJvcE5hbWU7XG4gICAgaWYgKHR5cGVvZiBwcm9wc1twcm9wTmFtZV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKGBUaGUgJHtsb2NhdGlvbn0gXFxgJHtwcm9wRnVsbE5hbWVTYWZlfVxcYCBvZiBgICsgYFxcYCR7Y29tcG9uZW50TmFtZVNhZmV9XFxgIGlzIGRlcHJlY2F0ZWQuICR7cmVhc29ufWApO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc011aUVsZW1lbnQoZWxlbWVudCwgbXVpTmFtZXMpIHtcbiAgdmFyIF9tdWlOYW1lLCBfZWxlbWVudCR0eXBlO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGVsZW1lbnQpICYmIG11aU5hbWVzLmluZGV4T2YoIC8vIEZvciBzZXJ2ZXIgY29tcG9uZW50cyBgbXVpTmFtZWAgaXMgYXZhaWFsYmxlIGluIGVsZW1lbnQudHlwZS5fcGF5bG9hZC52YWx1ZS5tdWlOYW1lXG4gIC8vIHJlbGV2YW50IGluZm8gLSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvYmxvYi8yODA3ZDc4MWEwOGRiOGU5ODczNjg3ZmNjYzI1YzBmMTJiNGZiM2Q0L3BhY2thZ2VzL3JlYWN0L3NyYy9SZWFjdExhenkuanMjTDQ1XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlcnNjb3JlLWRhbmdsZVxuICAoX211aU5hbWUgPSBlbGVtZW50LnR5cGUubXVpTmFtZSkgIT0gbnVsbCA/IF9tdWlOYW1lIDogKF9lbGVtZW50JHR5cGUgPSBlbGVtZW50LnR5cGUpID09IG51bGwgfHwgKF9lbGVtZW50JHR5cGUgPSBfZWxlbWVudCR0eXBlLl9wYXlsb2FkKSA9PSBudWxsIHx8IChfZWxlbWVudCR0eXBlID0gX2VsZW1lbnQkdHlwZS52YWx1ZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9lbGVtZW50JHR5cGUubXVpTmFtZSkgIT09IC0xO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG93bmVyRG9jdW1lbnQobm9kZSkge1xuICByZXR1cm4gbm9kZSAmJiBub2RlLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQ7XG59IiwiaW1wb3J0IG93bmVyRG9jdW1lbnQgZnJvbSAnLi4vb3duZXJEb2N1bWVudCc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvd25lcldpbmRvdyhub2RlKSB7XG4gIGNvbnN0IGRvYyA9IG93bmVyRG9jdW1lbnQobm9kZSk7XG4gIHJldHVybiBkb2MuZGVmYXVsdFZpZXcgfHwgd2luZG93O1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVxdWlyZVByb3BGYWN0b3J5KGNvbXBvbmVudE5hbWVJbkVycm9yLCBDb21wb25lbnQpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgICByZXR1cm4gKCkgPT4gbnVsbDtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9mb3JiaWQtZm9yZWlnbi1wcm9wLXR5cGVzXG4gIGNvbnN0IHByZXZQcm9wVHlwZXMgPSBDb21wb25lbnQgPyBfZXh0ZW5kcyh7fSwgQ29tcG9uZW50LnByb3BUeXBlcykgOiBudWxsO1xuICBjb25zdCByZXF1aXJlUHJvcCA9IHJlcXVpcmVkUHJvcCA9PiAocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCAuLi5hcmdzKSA9PiB7XG4gICAgY29uc3QgcHJvcEZ1bGxOYW1lU2FmZSA9IHByb3BGdWxsTmFtZSB8fCBwcm9wTmFtZTtcbiAgICBjb25zdCBkZWZhdWx0VHlwZUNoZWNrZXIgPSBwcmV2UHJvcFR5cGVzID09IG51bGwgPyB2b2lkIDAgOiBwcmV2UHJvcFR5cGVzW3Byb3BGdWxsTmFtZVNhZmVdO1xuICAgIGlmIChkZWZhdWx0VHlwZUNoZWNrZXIpIHtcbiAgICAgIGNvbnN0IHR5cGVDaGVja2VyUmVzdWx0ID0gZGVmYXVsdFR5cGVDaGVja2VyKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgLi4uYXJncyk7XG4gICAgICBpZiAodHlwZUNoZWNrZXJSZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVDaGVja2VyUmVzdWx0O1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodHlwZW9mIHByb3BzW3Byb3BOYW1lXSAhPT0gJ3VuZGVmaW5lZCcgJiYgIXByb3BzW3JlcXVpcmVkUHJvcF0pIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoYFRoZSBwcm9wIFxcYCR7cHJvcEZ1bGxOYW1lU2FmZX1cXGAgb2YgYCArIGBcXGAke2NvbXBvbmVudE5hbWVJbkVycm9yfVxcYCBjYW4gb25seSBiZSB1c2VkIHRvZ2V0aGVyIHdpdGggdGhlIFxcYCR7cmVxdWlyZWRQcm9wfVxcYCBwcm9wLmApO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcbiAgcmV0dXJuIHJlcXVpcmVQcm9wO1xufSIsIi8qKlxuICogVE9ETyB2NTogY29uc2lkZXIgbWFraW5nIGl0IHByaXZhdGVcbiAqXG4gKiBwYXNzZXMge3ZhbHVlfSB0byB7cmVmfVxuICpcbiAqIFdBUk5JTkc6IEJlIHN1cmUgdG8gb25seSBjYWxsIHRoaXMgaW5zaWRlIGEgY2FsbGJhY2sgdGhhdCBpcyBwYXNzZWQgYXMgYSByZWYuXG4gKiBPdGhlcndpc2UsIG1ha2Ugc3VyZSB0byBjbGVhbnVwIHRoZSBwcmV2aW91cyB7cmVmfSBpZiBpdCBjaGFuZ2VzLiBTZWVcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9tdWkvbWF0ZXJpYWwtdWkvaXNzdWVzLzEzNTM5XG4gKlxuICogVXNlZnVsIGlmIHlvdSB3YW50IHRvIGV4cG9zZSB0aGUgcmVmIG9mIGFuIGlubmVyIGNvbXBvbmVudCB0byB0aGUgcHVibGljIEFQSVxuICogd2hpbGUgc3RpbGwgdXNpbmcgaXQgaW5zaWRlIHRoZSBjb21wb25lbnQuXG4gKiBAcGFyYW0gcmVmIEEgcmVmIGNhbGxiYWNrIG9yIHJlZiBvYmplY3QuIElmIGFueXRoaW5nIGZhbHN5LCB0aGlzIGlzIGEgbm8tb3AuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNldFJlZihyZWYsIHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgcmVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmVmKHZhbHVlKTtcbiAgfSBlbHNlIGlmIChyZWYpIHtcbiAgICByZWYuY3VycmVudCA9IHZhbHVlO1xuICB9XG59IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5sZXQgZ2xvYmFsSWQgPSAwO1xuZnVuY3Rpb24gdXNlR2xvYmFsSWQoaWRPdmVycmlkZSkge1xuICBjb25zdCBbZGVmYXVsdElkLCBzZXREZWZhdWx0SWRdID0gUmVhY3QudXNlU3RhdGUoaWRPdmVycmlkZSk7XG4gIGNvbnN0IGlkID0gaWRPdmVycmlkZSB8fCBkZWZhdWx0SWQ7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGRlZmF1bHRJZCA9PSBudWxsKSB7XG4gICAgICAvLyBGYWxsYmFjayB0byB0aGlzIGRlZmF1bHQgaWQgd2hlbiBwb3NzaWJsZS5cbiAgICAgIC8vIFVzZSB0aGUgaW5jcmVtZW50aW5nIHZhbHVlIGZvciBjbGllbnQtc2lkZSByZW5kZXJpbmcgb25seS5cbiAgICAgIC8vIFdlIGNhbid0IHVzZSBpdCBzZXJ2ZXItc2lkZS5cbiAgICAgIC8vIElmIHlvdSB3YW50IHRvIHVzZSByYW5kb20gdmFsdWVzIHBsZWFzZSBjb25zaWRlciB0aGUgQmlydGhkYXkgUHJvYmxlbTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmlydGhkYXlfcHJvYmxlbVxuICAgICAgZ2xvYmFsSWQgKz0gMTtcbiAgICAgIHNldERlZmF1bHRJZChgbXVpLSR7Z2xvYmFsSWR9YCk7XG4gICAgfVxuICB9LCBbZGVmYXVsdElkXSk7XG4gIHJldHVybiBpZDtcbn1cblxuLy8gZG93bnN0cmVhbSBidW5kbGVycyBtYXkgcmVtb3ZlIHVubmVjZXNzYXJ5IGNvbmNhdGVuYXRpb24sIGJ1dCB3b24ndCByZW1vdmUgdG9TdHJpbmcgY2FsbCAtLSBXb3JrYXJvdW5kIGZvciBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay93ZWJwYWNrL2lzc3Vlcy8xNDgxNFxuY29uc3QgbWF5YmVSZWFjdFVzZUlkID0gUmVhY3RbJ3VzZUlkJy50b1N0cmluZygpXTtcbi8qKlxuICpcbiAqIEBleGFtcGxlIDxkaXYgaWQ9e3VzZUlkKCl9IC8+XG4gKiBAcGFyYW0gaWRPdmVycmlkZVxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlSWQoaWRPdmVycmlkZSkge1xuICBpZiAobWF5YmVSZWFjdFVzZUlkICE9PSB1bmRlZmluZWQpIHtcbiAgICBjb25zdCByZWFjdElkID0gbWF5YmVSZWFjdFVzZUlkKCk7XG4gICAgcmV0dXJuIGlkT3ZlcnJpZGUgIT0gbnVsbCA/IGlkT3ZlcnJpZGUgOiByZWFjdElkO1xuICB9XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rcyAtLSBgUmVhY3QudXNlSWRgIGlzIGludmFyaWFudCBhdCBydW50aW1lLlxuICByZXR1cm4gdXNlR2xvYmFsSWQoaWRPdmVycmlkZSk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdW5zdXBwb3J0ZWRQcm9wKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGNvbnN0IHByb3BGdWxsTmFtZVNhZmUgPSBwcm9wRnVsbE5hbWUgfHwgcHJvcE5hbWU7XG4gIGlmICh0eXBlb2YgcHJvcHNbcHJvcE5hbWVdICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBuZXcgRXJyb3IoYFRoZSBwcm9wIFxcYCR7cHJvcEZ1bGxOYW1lU2FmZX1cXGAgaXMgbm90IHN1cHBvcnRlZC4gUGxlYXNlIHJlbW92ZSBpdC5gKTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn0iLCIndXNlIGNsaWVudCc7XG5cbi8qIGVzbGludC1kaXNhYmxlIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzLCByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHMgKi9cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZUNvbnRyb2xsZWQoe1xuICBjb250cm9sbGVkLFxuICBkZWZhdWx0OiBkZWZhdWx0UHJvcCxcbiAgbmFtZSxcbiAgc3RhdGUgPSAndmFsdWUnXG59KSB7XG4gIC8vIGlzQ29udHJvbGxlZCBpcyBpZ25vcmVkIGluIHRoZSBob29rIGRlcGVuZGVuY3kgbGlzdHMgYXMgaXQgc2hvdWxkIG5ldmVyIGNoYW5nZS5cbiAgY29uc3Qge1xuICAgIGN1cnJlbnQ6IGlzQ29udHJvbGxlZFxuICB9ID0gUmVhY3QudXNlUmVmKGNvbnRyb2xsZWQgIT09IHVuZGVmaW5lZCk7XG4gIGNvbnN0IFt2YWx1ZVN0YXRlLCBzZXRWYWx1ZV0gPSBSZWFjdC51c2VTdGF0ZShkZWZhdWx0UHJvcCk7XG4gIGNvbnN0IHZhbHVlID0gaXNDb250cm9sbGVkID8gY29udHJvbGxlZCA6IHZhbHVlU3RhdGU7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAgIGlmIChpc0NvbnRyb2xsZWQgIT09IChjb250cm9sbGVkICE9PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoW2BNVUk6IEEgY29tcG9uZW50IGlzIGNoYW5naW5nIHRoZSAke2lzQ29udHJvbGxlZCA/ICcnIDogJ3VuJ31jb250cm9sbGVkICR7c3RhdGV9IHN0YXRlIG9mICR7bmFtZX0gdG8gYmUgJHtpc0NvbnRyb2xsZWQgPyAndW4nIDogJyd9Y29udHJvbGxlZC5gLCAnRWxlbWVudHMgc2hvdWxkIG5vdCBzd2l0Y2ggZnJvbSB1bmNvbnRyb2xsZWQgdG8gY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuJywgYERlY2lkZSBiZXR3ZWVuIHVzaW5nIGEgY29udHJvbGxlZCBvciB1bmNvbnRyb2xsZWQgJHtuYW1lfSBgICsgJ2VsZW1lbnQgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgY29tcG9uZW50LicsIFwiVGhlIG5hdHVyZSBvZiB0aGUgc3RhdGUgaXMgZGV0ZXJtaW5lZCBkdXJpbmcgdGhlIGZpcnN0IHJlbmRlci4gSXQncyBjb25zaWRlcmVkIGNvbnRyb2xsZWQgaWYgdGhlIHZhbHVlIGlzIG5vdCBgdW5kZWZpbmVkYC5cIiwgJ01vcmUgaW5mbzogaHR0cHM6Ly9mYi5tZS9yZWFjdC1jb250cm9sbGVkLWNvbXBvbmVudHMnXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgfSwgW3N0YXRlLCBuYW1lLCBjb250cm9sbGVkXSk7XG4gICAgY29uc3Qge1xuICAgICAgY3VycmVudDogZGVmYXVsdFZhbHVlXG4gICAgfSA9IFJlYWN0LnVzZVJlZihkZWZhdWx0UHJvcCk7XG4gICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAgIGlmICghaXNDb250cm9sbGVkICYmICFPYmplY3QuaXMoZGVmYXVsdFZhbHVlLCBkZWZhdWx0UHJvcCkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihbYE1VSTogQSBjb21wb25lbnQgaXMgY2hhbmdpbmcgdGhlIGRlZmF1bHQgJHtzdGF0ZX0gc3RhdGUgb2YgYW4gdW5jb250cm9sbGVkICR7bmFtZX0gYWZ0ZXIgYmVpbmcgaW5pdGlhbGl6ZWQuIGAgKyBgVG8gc3VwcHJlc3MgdGhpcyB3YXJuaW5nIG9wdCB0byB1c2UgYSBjb250cm9sbGVkICR7bmFtZX0uYF0uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH0sIFtKU09OLnN0cmluZ2lmeShkZWZhdWx0UHJvcCldKTtcbiAgfVxuICBjb25zdCBzZXRWYWx1ZUlmVW5jb250cm9sbGVkID0gUmVhY3QudXNlQ2FsbGJhY2sobmV3VmFsdWUgPT4ge1xuICAgIGlmICghaXNDb250cm9sbGVkKSB7XG4gICAgICBzZXRWYWx1ZShuZXdWYWx1ZSk7XG4gICAgfVxuICB9LCBbXSk7XG4gIHJldHVybiBbdmFsdWUsIHNldFZhbHVlSWZVbmNvbnRyb2xsZWRdO1xufSIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHVzZUVuaGFuY2VkRWZmZWN0IGZyb20gJy4uL3VzZUVuaGFuY2VkRWZmZWN0JztcblxuLyoqXG4gKiBJbnNwaXJlZCBieSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzE0MDk5I2lzc3VlY29tbWVudC00NDAwMTM4OTJcbiAqIFNlZSBSRkMgaW4gaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmZjcy9wdWxsLzIyMFxuICovXG5cbmZ1bmN0aW9uIHVzZUV2ZW50Q2FsbGJhY2soZm4pIHtcbiAgY29uc3QgcmVmID0gUmVhY3QudXNlUmVmKGZuKTtcbiAgdXNlRW5oYW5jZWRFZmZlY3QoKCkgPT4ge1xuICAgIHJlZi5jdXJyZW50ID0gZm47XG4gIH0pO1xuICByZXR1cm4gUmVhY3QudXNlUmVmKCguLi5hcmdzKSA9PlxuICAvLyBAdHMtZXhwZWN0LWVycm9yIGhpZGUgYHRoaXNgXG4gICgwLCByZWYuY3VycmVudCkoLi4uYXJncykpLmN1cnJlbnQ7XG59XG5leHBvcnQgZGVmYXVsdCB1c2VFdmVudENhbGxiYWNrOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHNldFJlZiBmcm9tICcuLi9zZXRSZWYnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlRm9ya1JlZiguLi5yZWZzKSB7XG4gIC8qKlxuICAgKiBUaGlzIHdpbGwgY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIGlmIHRoZSByZWZzIHBhc3NlZCB0byB0aGlzIGhvb2sgY2hhbmdlIGFuZCBhcmUgYWxsIGRlZmluZWQuXG4gICAqIFRoaXMgbWVhbnMgcmVhY3Qgd2lsbCBjYWxsIHRoZSBvbGQgZm9ya1JlZiB3aXRoIGBudWxsYCBhbmQgdGhlIG5ldyBmb3JrUmVmXG4gICAqIHdpdGggdGhlIHJlZi4gQ2xlYW51cCBuYXR1cmFsbHkgZW1lcmdlcyBmcm9tIHRoaXMgYmVoYXZpb3IuXG4gICAqL1xuICByZXR1cm4gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgaWYgKHJlZnMuZXZlcnkocmVmID0+IHJlZiA9PSBudWxsKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBpbnN0YW5jZSA9PiB7XG4gICAgICByZWZzLmZvckVhY2gocmVmID0+IHtcbiAgICAgICAgc2V0UmVmKHJlZiwgaW5zdGFuY2UpO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIH0sIHJlZnMpO1xufSIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuY29uc3QgVU5JTklUSUFMSVpFRCA9IHt9O1xuXG4vKipcbiAqIEEgUmVhY3QudXNlUmVmKCkgdGhhdCBpcyBpbml0aWFsaXplZCBsYXppbHkgd2l0aCBhIGZ1bmN0aW9uLiBOb3RlIHRoYXQgaXQgYWNjZXB0cyBhbiBvcHRpb25hbFxuICogaW5pdGlhbGl6YXRpb24gYXJndW1lbnQsIHNvIHRoZSBpbml0aWFsaXphdGlvbiBmdW5jdGlvbiBkb2Vzbid0IG5lZWQgdG8gYmUgYW4gaW5saW5lIGNsb3N1cmUuXG4gKlxuICogQHVzYWdlXG4gKiAgIGNvbnN0IHJlZiA9IHVzZUxhenlSZWYoc29ydENvbHVtbnMsIGNvbHVtbnMpXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZUxhenlSZWYoaW5pdCwgaW5pdEFyZykge1xuICBjb25zdCByZWYgPSBSZWFjdC51c2VSZWYoVU5JTklUSUFMSVpFRCk7XG4gIGlmIChyZWYuY3VycmVudCA9PT0gVU5JTklUSUFMSVpFRCkge1xuICAgIHJlZi5jdXJyZW50ID0gaW5pdChpbml0QXJnKTtcbiAgfVxuICByZXR1cm4gcmVmO1xufSIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuY29uc3QgRU1QVFkgPSBbXTtcblxuLyoqXG4gKiBBIFJlYWN0LnVzZUVmZmVjdCBlcXVpdmFsZW50IHRoYXQgcnVucyBvbmNlLCB3aGVuIHRoZSBjb21wb25lbnQgaXMgbW91bnRlZC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlT25Nb3VudChmbikge1xuICAvKiBlc2xpbnQtZGlzYWJsZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHMgKi9cbiAgUmVhY3QudXNlRWZmZWN0KGZuLCBFTVBUWSk7XG4gIC8qIGVzbGludC1lbmFibGUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzICovXG59IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgdXNlTGF6eVJlZiBmcm9tICcuLi91c2VMYXp5UmVmL3VzZUxhenlSZWYnO1xuaW1wb3J0IHVzZU9uTW91bnQgZnJvbSAnLi4vdXNlT25Nb3VudC91c2VPbk1vdW50JztcbmV4cG9ydCBjbGFzcyBUaW1lb3V0IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5jdXJyZW50SWQgPSBudWxsO1xuICAgIHRoaXMuY2xlYXIgPSAoKSA9PiB7XG4gICAgICBpZiAodGhpcy5jdXJyZW50SWQgIT09IG51bGwpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuY3VycmVudElkKTtcbiAgICAgICAgdGhpcy5jdXJyZW50SWQgPSBudWxsO1xuICAgICAgfVxuICAgIH07XG4gICAgdGhpcy5kaXNwb3NlRWZmZWN0ID0gKCkgPT4ge1xuICAgICAgcmV0dXJuIHRoaXMuY2xlYXI7XG4gICAgfTtcbiAgfVxuICBzdGF0aWMgY3JlYXRlKCkge1xuICAgIHJldHVybiBuZXcgVGltZW91dCgpO1xuICB9XG4gIC8qKlxuICAgKiBFeGVjdXRlcyBgZm5gIGFmdGVyIGBkZWxheWAsIGNsZWFyaW5nIGFueSBwcmV2aW91c2x5IHNjaGVkdWxlZCBjYWxsLlxuICAgKi9cbiAgc3RhcnQoZGVsYXksIGZuKSB7XG4gICAgdGhpcy5jbGVhcigpO1xuICAgIHRoaXMuY3VycmVudElkID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLmN1cnJlbnRJZCA9IG51bGw7XG4gICAgICBmbigpO1xuICAgIH0sIGRlbGF5KTtcbiAgfVxufVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlVGltZW91dCgpIHtcbiAgY29uc3QgdGltZW91dCA9IHVzZUxhenlSZWYoVGltZW91dC5jcmVhdGUpLmN1cnJlbnQ7XG4gIHVzZU9uTW91bnQodGltZW91dC5kaXNwb3NlRWZmZWN0KTtcbiAgcmV0dXJuIHRpbWVvdXQ7XG59IiwiJ3VzZSBjbGllbnQnO1xuXG4vLyBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vV0lDRy9mb2N1cy12aXNpYmxlL2Jsb2IvdjQuMS41L3NyYy9mb2N1cy12aXNpYmxlLmpzXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBUaW1lb3V0IH0gZnJvbSAnLi4vdXNlVGltZW91dC91c2VUaW1lb3V0JztcbmxldCBoYWRLZXlib2FyZEV2ZW50ID0gdHJ1ZTtcbmxldCBoYWRGb2N1c1Zpc2libGVSZWNlbnRseSA9IGZhbHNlO1xuY29uc3QgaGFkRm9jdXNWaXNpYmxlUmVjZW50bHlUaW1lb3V0ID0gbmV3IFRpbWVvdXQoKTtcbmNvbnN0IGlucHV0VHlwZXNXaGl0ZWxpc3QgPSB7XG4gIHRleHQ6IHRydWUsXG4gIHNlYXJjaDogdHJ1ZSxcbiAgdXJsOiB0cnVlLFxuICB0ZWw6IHRydWUsXG4gIGVtYWlsOiB0cnVlLFxuICBwYXNzd29yZDogdHJ1ZSxcbiAgbnVtYmVyOiB0cnVlLFxuICBkYXRlOiB0cnVlLFxuICBtb250aDogdHJ1ZSxcbiAgd2VlazogdHJ1ZSxcbiAgdGltZTogdHJ1ZSxcbiAgZGF0ZXRpbWU6IHRydWUsXG4gICdkYXRldGltZS1sb2NhbCc6IHRydWVcbn07XG5cbi8qKlxuICogQ29tcHV0ZXMgd2hldGhlciB0aGUgZ2l2ZW4gZWxlbWVudCBzaG91bGQgYXV0b21hdGljYWxseSB0cmlnZ2VyIHRoZVxuICogYGZvY3VzLXZpc2libGVgIGNsYXNzIGJlaW5nIGFkZGVkLCBpLmUuIHdoZXRoZXIgaXQgc2hvdWxkIGFsd2F5cyBtYXRjaFxuICogYDpmb2N1cy12aXNpYmxlYCB3aGVuIGZvY3VzZWQuXG4gKiBAcGFyYW0ge0VsZW1lbnR9IG5vZGVcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBmb2N1c1RyaWdnZXJzS2V5Ym9hcmRNb2RhbGl0eShub2RlKSB7XG4gIGNvbnN0IHtcbiAgICB0eXBlLFxuICAgIHRhZ05hbWVcbiAgfSA9IG5vZGU7XG4gIGlmICh0YWdOYW1lID09PSAnSU5QVVQnICYmIGlucHV0VHlwZXNXaGl0ZWxpc3RbdHlwZV0gJiYgIW5vZGUucmVhZE9ubHkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAodGFnTmFtZSA9PT0gJ1RFWFRBUkVBJyAmJiAhbm9kZS5yZWFkT25seSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmIChub2RlLmlzQ29udGVudEVkaXRhYmxlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIEtlZXAgdHJhY2sgb2Ygb3VyIGtleWJvYXJkIG1vZGFsaXR5IHN0YXRlIHdpdGggYGhhZEtleWJvYXJkRXZlbnRgLlxuICogSWYgdGhlIG1vc3QgcmVjZW50IHVzZXIgaW50ZXJhY3Rpb24gd2FzIHZpYSB0aGUga2V5Ym9hcmQ7XG4gKiBhbmQgdGhlIGtleSBwcmVzcyBkaWQgbm90IGluY2x1ZGUgYSBtZXRhLCBhbHQvb3B0aW9uLCBvciBjb250cm9sIGtleTtcbiAqIHRoZW4gdGhlIG1vZGFsaXR5IGlzIGtleWJvYXJkLiBPdGhlcndpc2UsIHRoZSBtb2RhbGl0eSBpcyBub3Qga2V5Ym9hcmQuXG4gKiBAcGFyYW0ge0tleWJvYXJkRXZlbnR9IGV2ZW50XG4gKi9cbmZ1bmN0aW9uIGhhbmRsZUtleURvd24oZXZlbnQpIHtcbiAgaWYgKGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuYWx0S2V5IHx8IGV2ZW50LmN0cmxLZXkpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaGFkS2V5Ym9hcmRFdmVudCA9IHRydWU7XG59XG5cbi8qKlxuICogSWYgYXQgYW55IHBvaW50IGEgdXNlciBjbGlja3Mgd2l0aCBhIHBvaW50aW5nIGRldmljZSwgZW5zdXJlIHRoYXQgd2UgY2hhbmdlXG4gKiB0aGUgbW9kYWxpdHkgYXdheSBmcm9tIGtleWJvYXJkLlxuICogVGhpcyBhdm9pZHMgdGhlIHNpdHVhdGlvbiB3aGVyZSBhIHVzZXIgcHJlc3NlcyBhIGtleSBvbiBhbiBhbHJlYWR5IGZvY3VzZWRcbiAqIGVsZW1lbnQsIGFuZCB0aGVuIGNsaWNrcyBvbiBhIGRpZmZlcmVudCBlbGVtZW50LCBmb2N1c2luZyBpdCB3aXRoIGFcbiAqIHBvaW50aW5nIGRldmljZSwgd2hpbGUgd2Ugc3RpbGwgdGhpbmsgd2UncmUgaW4ga2V5Ym9hcmQgbW9kYWxpdHkuXG4gKi9cbmZ1bmN0aW9uIGhhbmRsZVBvaW50ZXJEb3duKCkge1xuICBoYWRLZXlib2FyZEV2ZW50ID0gZmFsc2U7XG59XG5mdW5jdGlvbiBoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlKCkge1xuICBpZiAodGhpcy52aXNpYmlsaXR5U3RhdGUgPT09ICdoaWRkZW4nKSB7XG4gICAgLy8gSWYgdGhlIHRhYiBiZWNvbWVzIGFjdGl2ZSBhZ2FpbiwgdGhlIGJyb3dzZXIgd2lsbCBoYW5kbGUgY2FsbGluZyBmb2N1c1xuICAgIC8vIG9uIHRoZSBlbGVtZW50IChTYWZhcmkgYWN0dWFsbHkgY2FsbHMgaXQgdHdpY2UpLlxuICAgIC8vIElmIHRoaXMgdGFiIGNoYW5nZSBjYXVzZWQgYSBibHVyIG9uIGFuIGVsZW1lbnQgd2l0aCBmb2N1cy12aXNpYmxlLFxuICAgIC8vIHJlLWFwcGx5IHRoZSBjbGFzcyB3aGVuIHRoZSB1c2VyIHN3aXRjaGVzIGJhY2sgdG8gdGhlIHRhYi5cbiAgICBpZiAoaGFkRm9jdXNWaXNpYmxlUmVjZW50bHkpIHtcbiAgICAgIGhhZEtleWJvYXJkRXZlbnQgPSB0cnVlO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gcHJlcGFyZShkb2MpIHtcbiAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBoYW5kbGVLZXlEb3duLCB0cnVlKTtcbiAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGhhbmRsZVBvaW50ZXJEb3duLCB0cnVlKTtcbiAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJkb3duJywgaGFuZGxlUG9pbnRlckRvd24sIHRydWUpO1xuICBkb2MuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIGhhbmRsZVBvaW50ZXJEb3duLCB0cnVlKTtcbiAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCBoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlLCB0cnVlKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB0ZWFyZG93bihkb2MpIHtcbiAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBoYW5kbGVLZXlEb3duLCB0cnVlKTtcbiAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGhhbmRsZVBvaW50ZXJEb3duLCB0cnVlKTtcbiAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJkb3duJywgaGFuZGxlUG9pbnRlckRvd24sIHRydWUpO1xuICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIGhhbmRsZVBvaW50ZXJEb3duLCB0cnVlKTtcbiAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCBoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlLCB0cnVlKTtcbn1cbmZ1bmN0aW9uIGlzRm9jdXNWaXNpYmxlKGV2ZW50KSB7XG4gIGNvbnN0IHtcbiAgICB0YXJnZXRcbiAgfSA9IGV2ZW50O1xuICB0cnkge1xuICAgIHJldHVybiB0YXJnZXQubWF0Y2hlcygnOmZvY3VzLXZpc2libGUnKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAvLyBCcm93c2VycyBub3QgaW1wbGVtZW50aW5nIDpmb2N1cy12aXNpYmxlIHdpbGwgdGhyb3cgYSBTeW50YXhFcnJvci5cbiAgICAvLyBXZSB1c2Ugb3VyIG93biBoZXVyaXN0aWMgZm9yIHRob3NlIGJyb3dzZXJzLlxuICAgIC8vIFJldGhyb3cgbWlnaHQgYmUgYmV0dGVyIGlmIGl0J3Mgbm90IHRoZSBleHBlY3RlZCBlcnJvciBidXQgZG8gd2UgcmVhbGx5XG4gICAgLy8gd2FudCB0byBjcmFzaCBpZiBmb2N1cy12aXNpYmxlIG1hbGZ1bmN0aW9uZWQ/XG4gIH1cblxuICAvLyBObyBuZWVkIGZvciB2YWxpZEZvY3VzVGFyZ2V0IGNoZWNrLiBUaGUgdXNlciBkb2VzIHRoYXQgYnkgYXR0YWNoaW5nIGl0IHRvXG4gIC8vIGZvY3VzYWJsZSBldmVudHMgb25seS5cbiAgcmV0dXJuIGhhZEtleWJvYXJkRXZlbnQgfHwgZm9jdXNUcmlnZ2Vyc0tleWJvYXJkTW9kYWxpdHkodGFyZ2V0KTtcbn1cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZUlzRm9jdXNWaXNpYmxlKCkge1xuICBjb25zdCByZWYgPSBSZWFjdC51c2VDYWxsYmFjayhub2RlID0+IHtcbiAgICBpZiAobm9kZSAhPSBudWxsKSB7XG4gICAgICBwcmVwYXJlKG5vZGUub3duZXJEb2N1bWVudCk7XG4gICAgfVxuICB9LCBbXSk7XG4gIGNvbnN0IGlzRm9jdXNWaXNpYmxlUmVmID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcblxuICAvKipcbiAgICogU2hvdWxkIGJlIGNhbGxlZCBpZiBhIGJsdXIgZXZlbnQgaXMgZmlyZWRcbiAgICovXG4gIGZ1bmN0aW9uIGhhbmRsZUJsdXJWaXNpYmxlKCkge1xuICAgIC8vIGNoZWNraW5nIGFnYWluc3QgcG90ZW50aWFsIHN0YXRlIHZhcmlhYmxlIGRvZXMgbm90IHN1ZmZpY2UgaWYgd2UgZm9jdXMgYW5kIGJsdXIgc3luY2hyb25vdXNseS5cbiAgICAvLyBSZWFjdCB3b3VsZG4ndCBoYXZlIHRpbWUgdG8gdHJpZ2dlciBhIHJlLXJlbmRlciBzbyBgZm9jdXNWaXNpYmxlYCB3b3VsZCBiZSBzdGFsZS5cbiAgICAvLyBJZGVhbGx5IHdlIHdvdWxkIGFkanVzdCBgaXNGb2N1c1Zpc2libGUoZXZlbnQpYCB0byBsb29rIGF0IGByZWxhdGVkVGFyZ2V0YCBmb3IgYmx1ciBldmVudHMuXG4gICAgLy8gVGhpcyBkb2Vzbid0IHdvcmsgaW4gSUUxMSBkdWUgdG8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8zNzUxXG4gICAgLy8gVE9ETzogY2hlY2sgYWdhaW4gaWYgUmVhY3QgcmVsZWFzZXMgdGhlaXIgaW50ZXJuYWwgY2hhbmdlcyB0byBmb2N1cyBldmVudCBoYW5kbGluZyAoaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L3B1bGwvMTkxODYpLlxuICAgIGlmIChpc0ZvY3VzVmlzaWJsZVJlZi5jdXJyZW50KSB7XG4gICAgICAvLyBUbyBkZXRlY3QgYSB0YWIvd2luZG93IHN3aXRjaCwgd2UgbG9vayBmb3IgYSBibHVyIGV2ZW50IGZvbGxvd2VkXG4gICAgICAvLyByYXBpZGx5IGJ5IGEgdmlzaWJpbGl0eSBjaGFuZ2UuXG4gICAgICAvLyBJZiB3ZSBkb24ndCBzZWUgYSB2aXNpYmlsaXR5IGNoYW5nZSB3aXRoaW4gMTAwbXMsIGl0J3MgcHJvYmFibHkgYVxuICAgICAgLy8gcmVndWxhciBmb2N1cyBjaGFuZ2UuXG4gICAgICBoYWRGb2N1c1Zpc2libGVSZWNlbnRseSA9IHRydWU7XG4gICAgICBoYWRGb2N1c1Zpc2libGVSZWNlbnRseVRpbWVvdXQuc3RhcnQoMTAwLCAoKSA9PiB7XG4gICAgICAgIGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5ID0gZmFsc2U7XG4gICAgICB9KTtcbiAgICAgIGlzRm9jdXNWaXNpYmxlUmVmLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogU2hvdWxkIGJlIGNhbGxlZCBpZiBhIGJsdXIgZXZlbnQgaXMgZmlyZWRcbiAgICovXG4gIGZ1bmN0aW9uIGhhbmRsZUZvY3VzVmlzaWJsZShldmVudCkge1xuICAgIGlmIChpc0ZvY3VzVmlzaWJsZShldmVudCkpIHtcbiAgICAgIGlzRm9jdXNWaXNpYmxlUmVmLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGlzRm9jdXNWaXNpYmxlUmVmLFxuICAgIG9uRm9jdXM6IGhhbmRsZUZvY3VzVmlzaWJsZSxcbiAgICBvbkJsdXI6IGhhbmRsZUJsdXJWaXNpYmxlLFxuICAgIHJlZlxuICB9O1xufSIsIi8vIEEgY2hhbmdlIG9mIHRoZSBicm93c2VyIHpvb20gY2hhbmdlIHRoZSBzY3JvbGxiYXIgc2l6ZS5cbi8vIENyZWRpdCBodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi80ODhmZDhhZmM1MzVjYTNhNmFkNGRjNTgxZjVlODkyMTdiNmEzNmFjL2pzL3NyYy91dGlsL3Njcm9sbGJhci5qcyNMMTQtTDE4XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRTY3JvbGxiYXJTaXplKGRvYykge1xuICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvV2luZG93L2lubmVyV2lkdGgjdXNhZ2Vfbm90ZXNcbiAgY29uc3QgZG9jdW1lbnRXaWR0aCA9IGRvYy5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGg7XG4gIHJldHVybiBNYXRoLmFicyh3aW5kb3cuaW5uZXJXaWR0aCAtIGRvY3VtZW50V2lkdGgpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRVdGlsaXR5Q2xhc3MsIGNsYXNzZXMgPSB1bmRlZmluZWQpIHtcbiAgY29uc3Qgb3V0cHV0ID0ge307XG4gIE9iamVjdC5rZXlzKHNsb3RzKS5mb3JFYWNoKFxuICAvLyBgT2JqZWN0LmtleXMoc2xvdHMpYCBjYW4ndCBiZSB3aWRlciB0aGFuIGBUYCBiZWNhdXNlIHdlIGluZmVyIGBUYCBmcm9tIGBzbG90c2AuXG4gIC8vIEB0cy1leHBlY3QtZXJyb3IgaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9UeXBlU2NyaXB0L3B1bGwvMTIyNTMjaXNzdWVjb21tZW50LTI2MzEzMjIwOFxuICBzbG90ID0+IHtcbiAgICBvdXRwdXRbc2xvdF0gPSBzbG90c1tzbG90XS5yZWR1Y2UoKGFjYywga2V5KSA9PiB7XG4gICAgICBpZiAoa2V5KSB7XG4gICAgICAgIGNvbnN0IHV0aWxpdHlDbGFzcyA9IGdldFV0aWxpdHlDbGFzcyhrZXkpO1xuICAgICAgICBpZiAodXRpbGl0eUNsYXNzICE9PSAnJykge1xuICAgICAgICAgIGFjYy5wdXNoKHV0aWxpdHlDbGFzcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNsYXNzZXMgJiYgY2xhc3Nlc1trZXldKSB7XG4gICAgICAgICAgYWNjLnB1c2goY2xhc3Nlc1trZXldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCBbXSkuam9pbignICcpO1xuICB9KTtcbiAgcmV0dXJuIG91dHB1dDtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1widmFsdWVcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IFJ0bENvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dCgpO1xuZnVuY3Rpb24gUnRsUHJvdmlkZXIoX3JlZikge1xuICBsZXQge1xuICAgICAgdmFsdWVcbiAgICB9ID0gX3JlZixcbiAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIF9leGNsdWRlZCk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChSdGxDb250ZXh0LlByb3ZpZGVyLCBfZXh0ZW5kcyh7XG4gICAgdmFsdWU6IHZhbHVlICE9IG51bGwgPyB2YWx1ZSA6IHRydWVcbiAgfSwgcHJvcHMpKTtcbn1cbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFJ0bFByb3ZpZGVyLnByb3BUeXBlcyA9IHtcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICB2YWx1ZTogUHJvcFR5cGVzLmJvb2xcbn0gOiB2b2lkIDA7XG5leHBvcnQgY29uc3QgdXNlUnRsID0gKCkgPT4ge1xuICBjb25zdCB2YWx1ZSA9IFJlYWN0LnVzZUNvbnRleHQoUnRsQ29udGV4dCk7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsID8gdmFsdWUgOiBmYWxzZTtcbn07XG5leHBvcnQgZGVmYXVsdCBSdGxQcm92aWRlcjsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY29tcG9uZW50XCIsIFwiZGlyZWN0aW9uXCIsIFwic3BhY2luZ1wiLCBcImRpdmlkZXJcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcInVzZUZsZXhHYXBcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgZGVlcG1lcmdlIGZyb20gJ0BtdWkvdXRpbHMvZGVlcG1lcmdlJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCBzeXN0ZW1TdHlsZWQgZnJvbSAnLi4vc3R5bGVkJztcbmltcG9ydCB1c2VUaGVtZVByb3BzU3lzdGVtIGZyb20gJy4uL3VzZVRoZW1lUHJvcHMnO1xuaW1wb3J0IHsgZXh0ZW5kU3hQcm9wIH0gZnJvbSAnLi4vc3R5bGVGdW5jdGlvblN4JztcbmltcG9ydCBjcmVhdGVUaGVtZSBmcm9tICcuLi9jcmVhdGVUaGVtZSc7XG5pbXBvcnQgeyBoYW5kbGVCcmVha3BvaW50cywgbWVyZ2VCcmVha3BvaW50c0luT3JkZXIsIHJlc29sdmVCcmVha3BvaW50VmFsdWVzIH0gZnJvbSAnLi4vYnJlYWtwb2ludHMnO1xuaW1wb3J0IHsgY3JlYXRlVW5hcnlTcGFjaW5nLCBnZXRWYWx1ZSB9IGZyb20gJy4uL3NwYWNpbmcnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IGRlZmF1bHRUaGVtZSA9IGNyZWF0ZVRoZW1lKCk7XG4vLyB3aWRlbmluZyBUaGVtZSB0byBhbnkgc28gdGhhdCB0aGUgY29uc3VtZXIgY2FuIG93biB0aGUgdGhlbWUgc3RydWN0dXJlLlxuY29uc3QgZGVmYXVsdENyZWF0ZVN0eWxlZENvbXBvbmVudCA9IHN5c3RlbVN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnTXVpU3RhY2snLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLnJvb3Rcbn0pO1xuZnVuY3Rpb24gdXNlVGhlbWVQcm9wc0RlZmF1bHQocHJvcHMpIHtcbiAgcmV0dXJuIHVzZVRoZW1lUHJvcHNTeXN0ZW0oe1xuICAgIHByb3BzLFxuICAgIG5hbWU6ICdNdWlTdGFjaycsXG4gICAgZGVmYXVsdFRoZW1lXG4gIH0pO1xufVxuXG4vKipcbiAqIFJldHVybiBhbiBhcnJheSB3aXRoIHRoZSBzZXBhcmF0b3IgUmVhY3QgZWxlbWVudCBpbnRlcnNwZXJzZWQgYmV0d2VlblxuICogZWFjaCBSZWFjdCBub2RlIG9mIHRoZSBpbnB1dCBjaGlsZHJlbi5cbiAqXG4gKiA+IGpvaW5DaGlsZHJlbihbMSwyLDNdLCAwKVxuICogWzEsMCwyLDAsM11cbiAqL1xuZnVuY3Rpb24gam9pbkNoaWxkcmVuKGNoaWxkcmVuLCBzZXBhcmF0b3IpIHtcbiAgY29uc3QgY2hpbGRyZW5BcnJheSA9IFJlYWN0LkNoaWxkcmVuLnRvQXJyYXkoY2hpbGRyZW4pLmZpbHRlcihCb29sZWFuKTtcbiAgcmV0dXJuIGNoaWxkcmVuQXJyYXkucmVkdWNlKChvdXRwdXQsIGNoaWxkLCBpbmRleCkgPT4ge1xuICAgIG91dHB1dC5wdXNoKGNoaWxkKTtcbiAgICBpZiAoaW5kZXggPCBjaGlsZHJlbkFycmF5Lmxlbmd0aCAtIDEpIHtcbiAgICAgIG91dHB1dC5wdXNoKCAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KHNlcGFyYXRvciwge1xuICAgICAgICBrZXk6IGBzZXBhcmF0b3ItJHtpbmRleH1gXG4gICAgICB9KSk7XG4gICAgfVxuICAgIHJldHVybiBvdXRwdXQ7XG4gIH0sIFtdKTtcbn1cbmNvbnN0IGdldFNpZGVGcm9tRGlyZWN0aW9uID0gZGlyZWN0aW9uID0+IHtcbiAgcmV0dXJuIHtcbiAgICByb3c6ICdMZWZ0JyxcbiAgICAncm93LXJldmVyc2UnOiAnUmlnaHQnLFxuICAgIGNvbHVtbjogJ1RvcCcsXG4gICAgJ2NvbHVtbi1yZXZlcnNlJzogJ0JvdHRvbSdcbiAgfVtkaXJlY3Rpb25dO1xufTtcbmV4cG9ydCBjb25zdCBzdHlsZSA9ICh7XG4gIG93bmVyU3RhdGUsXG4gIHRoZW1lXG59KSA9PiB7XG4gIGxldCBzdHlsZXMgPSBfZXh0ZW5kcyh7XG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nXG4gIH0sIGhhbmRsZUJyZWFrcG9pbnRzKHtcbiAgICB0aGVtZVxuICB9LCByZXNvbHZlQnJlYWtwb2ludFZhbHVlcyh7XG4gICAgdmFsdWVzOiBvd25lclN0YXRlLmRpcmVjdGlvbixcbiAgICBicmVha3BvaW50czogdGhlbWUuYnJlYWtwb2ludHMudmFsdWVzXG4gIH0pLCBwcm9wVmFsdWUgPT4gKHtcbiAgICBmbGV4RGlyZWN0aW9uOiBwcm9wVmFsdWVcbiAgfSkpKTtcbiAgaWYgKG93bmVyU3RhdGUuc3BhY2luZykge1xuICAgIGNvbnN0IHRyYW5zZm9ybWVyID0gY3JlYXRlVW5hcnlTcGFjaW5nKHRoZW1lKTtcbiAgICBjb25zdCBiYXNlID0gT2JqZWN0LmtleXModGhlbWUuYnJlYWtwb2ludHMudmFsdWVzKS5yZWR1Y2UoKGFjYywgYnJlYWtwb2ludCkgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBvd25lclN0YXRlLnNwYWNpbmcgPT09ICdvYmplY3QnICYmIG93bmVyU3RhdGUuc3BhY2luZ1ticmVha3BvaW50XSAhPSBudWxsIHx8IHR5cGVvZiBvd25lclN0YXRlLmRpcmVjdGlvbiA9PT0gJ29iamVjdCcgJiYgb3duZXJTdGF0ZS5kaXJlY3Rpb25bYnJlYWtwb2ludF0gIT0gbnVsbCkge1xuICAgICAgICBhY2NbYnJlYWtwb2ludF0gPSB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSk7XG4gICAgY29uc3QgZGlyZWN0aW9uVmFsdWVzID0gcmVzb2x2ZUJyZWFrcG9pbnRWYWx1ZXMoe1xuICAgICAgdmFsdWVzOiBvd25lclN0YXRlLmRpcmVjdGlvbixcbiAgICAgIGJhc2VcbiAgICB9KTtcbiAgICBjb25zdCBzcGFjaW5nVmFsdWVzID0gcmVzb2x2ZUJyZWFrcG9pbnRWYWx1ZXMoe1xuICAgICAgdmFsdWVzOiBvd25lclN0YXRlLnNwYWNpbmcsXG4gICAgICBiYXNlXG4gICAgfSk7XG4gICAgaWYgKHR5cGVvZiBkaXJlY3Rpb25WYWx1ZXMgPT09ICdvYmplY3QnKSB7XG4gICAgICBPYmplY3Qua2V5cyhkaXJlY3Rpb25WYWx1ZXMpLmZvckVhY2goKGJyZWFrcG9pbnQsIGluZGV4LCBicmVha3BvaW50cykgPT4ge1xuICAgICAgICBjb25zdCBkaXJlY3Rpb25WYWx1ZSA9IGRpcmVjdGlvblZhbHVlc1ticmVha3BvaW50XTtcbiAgICAgICAgaWYgKCFkaXJlY3Rpb25WYWx1ZSkge1xuICAgICAgICAgIGNvbnN0IHByZXZpb3VzRGlyZWN0aW9uVmFsdWUgPSBpbmRleCA+IDAgPyBkaXJlY3Rpb25WYWx1ZXNbYnJlYWtwb2ludHNbaW5kZXggLSAxXV0gOiAnY29sdW1uJztcbiAgICAgICAgICBkaXJlY3Rpb25WYWx1ZXNbYnJlYWtwb2ludF0gPSBwcmV2aW91c0RpcmVjdGlvblZhbHVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgY29uc3Qgc3R5bGVGcm9tUHJvcFZhbHVlID0gKHByb3BWYWx1ZSwgYnJlYWtwb2ludCkgPT4ge1xuICAgICAgaWYgKG93bmVyU3RhdGUudXNlRmxleEdhcCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGdhcDogZ2V0VmFsdWUodHJhbnNmb3JtZXIsIHByb3BWYWx1ZSlcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIC8vIFRoZSB1c2VGbGV4R2FwPXtmYWxzZX0gaW1wbGVtZW50IHJlbGllcyBvbiBlYWNoIGNoaWxkIHRvIGdpdmUgdXAgY29udHJvbCBvZiB0aGUgbWFyZ2luLlxuICAgICAgICAvLyBXZSBuZWVkIHRvIHJlc2V0IHRoZSBtYXJnaW4gdG8gYXZvaWQgZG91YmxlIHNwYWNpbmcuXG4gICAgICAgICcmID4gOm5vdChzdHlsZSk6bm90KHN0eWxlKSc6IHtcbiAgICAgICAgICBtYXJnaW46IDBcbiAgICAgICAgfSxcbiAgICAgICAgJyYgPiA6bm90KHN0eWxlKSB+IDpub3Qoc3R5bGUpJzoge1xuICAgICAgICAgIFtgbWFyZ2luJHtnZXRTaWRlRnJvbURpcmVjdGlvbihicmVha3BvaW50ID8gZGlyZWN0aW9uVmFsdWVzW2JyZWFrcG9pbnRdIDogb3duZXJTdGF0ZS5kaXJlY3Rpb24pfWBdOiBnZXRWYWx1ZSh0cmFuc2Zvcm1lciwgcHJvcFZhbHVlKVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH07XG4gICAgc3R5bGVzID0gZGVlcG1lcmdlKHN0eWxlcywgaGFuZGxlQnJlYWtwb2ludHMoe1xuICAgICAgdGhlbWVcbiAgICB9LCBzcGFjaW5nVmFsdWVzLCBzdHlsZUZyb21Qcm9wVmFsdWUpKTtcbiAgfVxuICBzdHlsZXMgPSBtZXJnZUJyZWFrcG9pbnRzSW5PcmRlcih0aGVtZS5icmVha3BvaW50cywgc3R5bGVzKTtcbiAgcmV0dXJuIHN0eWxlcztcbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVTdGFjayhvcHRpb25zID0ge30pIHtcbiAgY29uc3Qge1xuICAgIC8vIFRoaXMgd2lsbCBhbGxvdyBhZGRpbmcgY3VzdG9tIHN0eWxlZCBmbiAoZm9yIGV4YW1wbGUgZm9yIGN1c3RvbSBzeCBzdHlsZSBmdW5jdGlvbilcbiAgICBjcmVhdGVTdHlsZWRDb21wb25lbnQgPSBkZWZhdWx0Q3JlYXRlU3R5bGVkQ29tcG9uZW50LFxuICAgIHVzZVRoZW1lUHJvcHMgPSB1c2VUaGVtZVByb3BzRGVmYXVsdCxcbiAgICBjb21wb25lbnROYW1lID0gJ011aVN0YWNrJ1xuICB9ID0gb3B0aW9ucztcbiAgY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSAoKSA9PiB7XG4gICAgY29uc3Qgc2xvdHMgPSB7XG4gICAgICByb290OiBbJ3Jvb3QnXVxuICAgIH07XG4gICAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBzbG90ID0+IGdlbmVyYXRlVXRpbGl0eUNsYXNzKGNvbXBvbmVudE5hbWUsIHNsb3QpLCB7fSk7XG4gIH07XG4gIGNvbnN0IFN0YWNrUm9vdCA9IGNyZWF0ZVN0eWxlZENvbXBvbmVudChzdHlsZSk7XG4gIGNvbnN0IFN0YWNrID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gR3JpZChpblByb3BzLCByZWYpIHtcbiAgICBjb25zdCB0aGVtZVByb3BzID0gdXNlVGhlbWVQcm9wcyhpblByb3BzKTtcbiAgICBjb25zdCBwcm9wcyA9IGV4dGVuZFN4UHJvcCh0aGVtZVByb3BzKTsgLy8gYGNvbG9yYCB0eXBlIGNvbmZsaWN0cyB3aXRoIGh0bWwgY29sb3IgYXR0cmlidXRlLlxuICAgIGNvbnN0IHtcbiAgICAgICAgY29tcG9uZW50ID0gJ2RpdicsXG4gICAgICAgIGRpcmVjdGlvbiA9ICdjb2x1bW4nLFxuICAgICAgICBzcGFjaW5nID0gMCxcbiAgICAgICAgZGl2aWRlcixcbiAgICAgICAgY2hpbGRyZW4sXG4gICAgICAgIGNsYXNzTmFtZSxcbiAgICAgICAgdXNlRmxleEdhcCA9IGZhbHNlXG4gICAgICB9ID0gcHJvcHMsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICAgIGNvbnN0IG93bmVyU3RhdGUgPSB7XG4gICAgICBkaXJlY3Rpb24sXG4gICAgICBzcGFjaW5nLFxuICAgICAgdXNlRmxleEdhcFxuICAgIH07XG4gICAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKCk7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFN0YWNrUm9vdCwgX2V4dGVuZHMoe1xuICAgICAgYXM6IGNvbXBvbmVudCxcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgICByZWY6IHJlZixcbiAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSlcbiAgICB9LCBvdGhlciwge1xuICAgICAgY2hpbGRyZW46IGRpdmlkZXIgPyBqb2luQ2hpbGRyZW4oY2hpbGRyZW4sIGRpdmlkZXIpIDogY2hpbGRyZW5cbiAgICB9KSk7XG4gIH0pO1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTdGFjay5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgZGlyZWN0aW9uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydjb2x1bW4tcmV2ZXJzZScsICdjb2x1bW4nLCAncm93LXJldmVyc2UnLCAncm93J10pLCBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2YoWydjb2x1bW4tcmV2ZXJzZScsICdjb2x1bW4nLCAncm93LXJldmVyc2UnLCAncm93J10pKSwgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAgIGRpdmlkZXI6IFByb3BUeXBlcy5ub2RlLFxuICAgIHNwYWNpbmc6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSksIFByb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG4gIH0gOiB2b2lkIDA7XG4gIHJldHVybiBTdGFjaztcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZU1peGlucyhicmVha3BvaW50cywgbWl4aW5zKSB7XG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgdG9vbGJhcjoge1xuICAgICAgbWluSGVpZ2h0OiA1NixcbiAgICAgIFticmVha3BvaW50cy51cCgneHMnKV06IHtcbiAgICAgICAgJ0BtZWRpYSAob3JpZW50YXRpb246IGxhbmRzY2FwZSknOiB7XG4gICAgICAgICAgbWluSGVpZ2h0OiA0OFxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgW2JyZWFrcG9pbnRzLnVwKCdzbScpXToge1xuICAgICAgICBtaW5IZWlnaHQ6IDY0XG4gICAgICB9XG4gICAgfVxuICB9LCBtaXhpbnMpO1xufSIsImZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoZSkge1xuICByZXR1cm4gZSAmJiBlLl9fZXNNb2R1bGUgPyBlIDoge1xuICAgIFwiZGVmYXVsdFwiOiBlXG4gIH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5hbHBoYSA9IGFscGhhO1xuZXhwb3J0cy5ibGVuZCA9IGJsZW5kO1xuZXhwb3J0cy5jb2xvckNoYW5uZWwgPSB2b2lkIDA7XG5leHBvcnRzLmRhcmtlbiA9IGRhcmtlbjtcbmV4cG9ydHMuZGVjb21wb3NlQ29sb3IgPSBkZWNvbXBvc2VDb2xvcjtcbmV4cG9ydHMuZW1waGFzaXplID0gZW1waGFzaXplO1xuZXhwb3J0cy5nZXRDb250cmFzdFJhdGlvID0gZ2V0Q29udHJhc3RSYXRpbztcbmV4cG9ydHMuZ2V0THVtaW5hbmNlID0gZ2V0THVtaW5hbmNlO1xuZXhwb3J0cy5oZXhUb1JnYiA9IGhleFRvUmdiO1xuZXhwb3J0cy5oc2xUb1JnYiA9IGhzbFRvUmdiO1xuZXhwb3J0cy5saWdodGVuID0gbGlnaHRlbjtcbmV4cG9ydHMucHJpdmF0ZV9zYWZlQWxwaGEgPSBwcml2YXRlX3NhZmVBbHBoYTtcbmV4cG9ydHMucHJpdmF0ZV9zYWZlQ29sb3JDaGFubmVsID0gdm9pZCAwO1xuZXhwb3J0cy5wcml2YXRlX3NhZmVEYXJrZW4gPSBwcml2YXRlX3NhZmVEYXJrZW47XG5leHBvcnRzLnByaXZhdGVfc2FmZUVtcGhhc2l6ZSA9IHByaXZhdGVfc2FmZUVtcGhhc2l6ZTtcbmV4cG9ydHMucHJpdmF0ZV9zYWZlTGlnaHRlbiA9IHByaXZhdGVfc2FmZUxpZ2h0ZW47XG5leHBvcnRzLnJlY29tcG9zZUNvbG9yID0gcmVjb21wb3NlQ29sb3I7XG5leHBvcnRzLnJnYlRvSGV4ID0gcmdiVG9IZXg7XG52YXIgX2Zvcm1hdE11aUVycm9yTWVzc2FnZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAbXVpL3V0aWxzL2Zvcm1hdE11aUVycm9yTWVzc2FnZVwiKSk7XG52YXIgX2NsYW1wID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQG11aS91dGlscy9jbGFtcFwiKSk7XG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb24gKi9cblxuLyoqXG4gKiBSZXR1cm5zIGEgbnVtYmVyIHdob3NlIHZhbHVlIGlzIGxpbWl0ZWQgdG8gdGhlIGdpdmVuIHJhbmdlLlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFRoZSB2YWx1ZSB0byBiZSBjbGFtcGVkXG4gKiBAcGFyYW0ge251bWJlcn0gbWluIFRoZSBsb3dlciBib3VuZGFyeSBvZiB0aGUgb3V0cHV0IHJhbmdlXG4gKiBAcGFyYW0ge251bWJlcn0gbWF4IFRoZSB1cHBlciBib3VuZGFyeSBvZiB0aGUgb3V0cHV0IHJhbmdlXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBBIG51bWJlciBpbiB0aGUgcmFuZ2UgW21pbiwgbWF4XVxuICovXG5mdW5jdGlvbiBjbGFtcFdyYXBwZXIodmFsdWUsIG1pbiA9IDAsIG1heCA9IDEpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAodmFsdWUgPCBtaW4gfHwgdmFsdWUgPiBtYXgpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYE1VSTogVGhlIHZhbHVlIHByb3ZpZGVkICR7dmFsdWV9IGlzIG91dCBvZiByYW5nZSBbJHttaW59LCAke21heH1dLmApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gKDAsIF9jbGFtcC5kZWZhdWx0KSh2YWx1ZSwgbWluLCBtYXgpO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGEgY29sb3IgZnJvbSBDU1MgaGV4IGZvcm1hdCB0byBDU1MgcmdiIGZvcm1hdC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIEhleCBjb2xvciwgaS5lLiAjbm5uIG9yICNubm5ubm5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIHJnYiBjb2xvciBzdHJpbmdcbiAqL1xuZnVuY3Rpb24gaGV4VG9SZ2IoY29sb3IpIHtcbiAgY29sb3IgPSBjb2xvci5zbGljZSgxKTtcbiAgY29uc3QgcmUgPSBuZXcgUmVnRXhwKGAuezEsJHtjb2xvci5sZW5ndGggPj0gNiA/IDIgOiAxfX1gLCAnZycpO1xuICBsZXQgY29sb3JzID0gY29sb3IubWF0Y2gocmUpO1xuICBpZiAoY29sb3JzICYmIGNvbG9yc1swXS5sZW5ndGggPT09IDEpIHtcbiAgICBjb2xvcnMgPSBjb2xvcnMubWFwKG4gPT4gbiArIG4pO1xuICB9XG4gIHJldHVybiBjb2xvcnMgPyBgcmdiJHtjb2xvcnMubGVuZ3RoID09PSA0ID8gJ2EnIDogJyd9KCR7Y29sb3JzLm1hcCgobiwgaW5kZXgpID0+IHtcbiAgICByZXR1cm4gaW5kZXggPCAzID8gcGFyc2VJbnQobiwgMTYpIDogTWF0aC5yb3VuZChwYXJzZUludChuLCAxNikgLyAyNTUgKiAxMDAwKSAvIDEwMDA7XG4gIH0pLmpvaW4oJywgJyl9KWAgOiAnJztcbn1cbmZ1bmN0aW9uIGludFRvSGV4KGludCkge1xuICBjb25zdCBoZXggPSBpbnQudG9TdHJpbmcoMTYpO1xuICByZXR1cm4gaGV4Lmxlbmd0aCA9PT0gMSA/IGAwJHtoZXh9YCA6IGhleDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCB3aXRoIHRoZSB0eXBlIGFuZCB2YWx1ZXMgb2YgYSBjb2xvci5cbiAqXG4gKiBOb3RlOiBEb2VzIG5vdCBzdXBwb3J0IHJnYiAlIHZhbHVlcy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKCksIGNvbG9yKClcbiAqIEByZXR1cm5zIHtvYmplY3R9IC0gQSBNVUkgY29sb3Igb2JqZWN0OiB7dHlwZTogc3RyaW5nLCB2YWx1ZXM6IG51bWJlcltdfVxuICovXG5mdW5jdGlvbiBkZWNvbXBvc2VDb2xvcihjb2xvcikge1xuICAvLyBJZGVtcG90ZW50XG4gIGlmIChjb2xvci50eXBlKSB7XG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG4gIGlmIChjb2xvci5jaGFyQXQoMCkgPT09ICcjJykge1xuICAgIHJldHVybiBkZWNvbXBvc2VDb2xvcihoZXhUb1JnYihjb2xvcikpO1xuICB9XG4gIGNvbnN0IG1hcmtlciA9IGNvbG9yLmluZGV4T2YoJygnKTtcbiAgY29uc3QgdHlwZSA9IGNvbG9yLnN1YnN0cmluZygwLCBtYXJrZXIpO1xuICBpZiAoWydyZ2InLCAncmdiYScsICdoc2wnLCAnaHNsYScsICdjb2xvciddLmluZGV4T2YodHlwZSkgPT09IC0xKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGBNVUk6IFVuc3VwcG9ydGVkIFxcYCR7Y29sb3J9XFxgIGNvbG9yLlxuVGhlIGZvbGxvd2luZyBmb3JtYXRzIGFyZSBzdXBwb3J0ZWQ6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKCksIGNvbG9yKCkuYCA6ICgwLCBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlMi5kZWZhdWx0KSg5LCBjb2xvcikpO1xuICB9XG4gIGxldCB2YWx1ZXMgPSBjb2xvci5zdWJzdHJpbmcobWFya2VyICsgMSwgY29sb3IubGVuZ3RoIC0gMSk7XG4gIGxldCBjb2xvclNwYWNlO1xuICBpZiAodHlwZSA9PT0gJ2NvbG9yJykge1xuICAgIHZhbHVlcyA9IHZhbHVlcy5zcGxpdCgnICcpO1xuICAgIGNvbG9yU3BhY2UgPSB2YWx1ZXMuc2hpZnQoKTtcbiAgICBpZiAodmFsdWVzLmxlbmd0aCA9PT0gNCAmJiB2YWx1ZXNbM10uY2hhckF0KDApID09PSAnLycpIHtcbiAgICAgIHZhbHVlc1szXSA9IHZhbHVlc1szXS5zbGljZSgxKTtcbiAgICB9XG4gICAgaWYgKFsnc3JnYicsICdkaXNwbGF5LXAzJywgJ2E5OC1yZ2InLCAncHJvcGhvdG8tcmdiJywgJ3JlYy0yMDIwJ10uaW5kZXhPZihjb2xvclNwYWNlKSA9PT0gLTEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBgTVVJOiB1bnN1cHBvcnRlZCBcXGAke2NvbG9yU3BhY2V9XFxgIGNvbG9yIHNwYWNlLlxuVGhlIGZvbGxvd2luZyBjb2xvciBzcGFjZXMgYXJlIHN1cHBvcnRlZDogc3JnYiwgZGlzcGxheS1wMywgYTk4LXJnYiwgcHJvcGhvdG8tcmdiLCByZWMtMjAyMC5gIDogKDAsIF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UyLmRlZmF1bHQpKDEwLCBjb2xvclNwYWNlKSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhbHVlcyA9IHZhbHVlcy5zcGxpdCgnLCcpO1xuICB9XG4gIHZhbHVlcyA9IHZhbHVlcy5tYXAodmFsdWUgPT4gcGFyc2VGbG9hdCh2YWx1ZSkpO1xuICByZXR1cm4ge1xuICAgIHR5cGUsXG4gICAgdmFsdWVzLFxuICAgIGNvbG9yU3BhY2VcbiAgfTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgY2hhbm5lbCBjcmVhdGVkIGZyb20gdGhlIGlucHV0IGNvbG9yLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKCksIGNvbG9yKClcbiAqIEByZXR1cm5zIHtzdHJpbmd9IC0gVGhlIGNoYW5uZWwgZm9yIHRoZSBjb2xvciwgdGhhdCBjYW4gYmUgdXNlZCBpbiByZ2JhIG9yIGhzbGEgY29sb3JzXG4gKi9cbmNvbnN0IGNvbG9yQ2hhbm5lbCA9IGNvbG9yID0+IHtcbiAgY29uc3QgZGVjb21wb3NlZENvbG9yID0gZGVjb21wb3NlQ29sb3IoY29sb3IpO1xuICByZXR1cm4gZGVjb21wb3NlZENvbG9yLnZhbHVlcy5zbGljZSgwLCAzKS5tYXAoKHZhbCwgaWR4KSA9PiBkZWNvbXBvc2VkQ29sb3IudHlwZS5pbmRleE9mKCdoc2wnKSAhPT0gLTEgJiYgaWR4ICE9PSAwID8gYCR7dmFsfSVgIDogdmFsKS5qb2luKCcgJyk7XG59O1xuZXhwb3J0cy5jb2xvckNoYW5uZWwgPSBjb2xvckNoYW5uZWw7XG5jb25zdCBwcml2YXRlX3NhZmVDb2xvckNoYW5uZWwgPSAoY29sb3IsIHdhcm5pbmcpID0+IHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gY29sb3JDaGFubmVsKGNvbG9yKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpZiAod2FybmluZyAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjb25zb2xlLndhcm4od2FybmluZyk7XG4gICAgfVxuICAgIHJldHVybiBjb2xvcjtcbiAgfVxufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIGNvbG9yIG9iamVjdCB3aXRoIHR5cGUgYW5kIHZhbHVlcyB0byBhIHN0cmluZy5cbiAqIEBwYXJhbSB7b2JqZWN0fSBjb2xvciAtIERlY29tcG9zZWQgY29sb3JcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvci50eXBlIC0gT25lIG9mOiAncmdiJywgJ3JnYmEnLCAnaHNsJywgJ2hzbGEnLCAnY29sb3InXG4gKiBAcGFyYW0ge2FycmF5fSBjb2xvci52YWx1ZXMgLSBbbixuLG5dIG9yIFtuLG4sbixuXVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nXG4gKi9cbmV4cG9ydHMucHJpdmF0ZV9zYWZlQ29sb3JDaGFubmVsID0gcHJpdmF0ZV9zYWZlQ29sb3JDaGFubmVsO1xuZnVuY3Rpb24gcmVjb21wb3NlQ29sb3IoY29sb3IpIHtcbiAgY29uc3Qge1xuICAgIHR5cGUsXG4gICAgY29sb3JTcGFjZVxuICB9ID0gY29sb3I7XG4gIGxldCB7XG4gICAgdmFsdWVzXG4gIH0gPSBjb2xvcjtcbiAgaWYgKHR5cGUuaW5kZXhPZigncmdiJykgIT09IC0xKSB7XG4gICAgLy8gT25seSBjb252ZXJ0IHRoZSBmaXJzdCAzIHZhbHVlcyB0byBpbnQgKGkuZS4gbm90IGFscGhhKVxuICAgIHZhbHVlcyA9IHZhbHVlcy5tYXAoKG4sIGkpID0+IGkgPCAzID8gcGFyc2VJbnQobiwgMTApIDogbik7XG4gIH0gZWxzZSBpZiAodHlwZS5pbmRleE9mKCdoc2wnKSAhPT0gLTEpIHtcbiAgICB2YWx1ZXNbMV0gPSBgJHt2YWx1ZXNbMV19JWA7XG4gICAgdmFsdWVzWzJdID0gYCR7dmFsdWVzWzJdfSVgO1xuICB9XG4gIGlmICh0eXBlLmluZGV4T2YoJ2NvbG9yJykgIT09IC0xKSB7XG4gICAgdmFsdWVzID0gYCR7Y29sb3JTcGFjZX0gJHt2YWx1ZXMuam9pbignICcpfWA7XG4gIH0gZWxzZSB7XG4gICAgdmFsdWVzID0gYCR7dmFsdWVzLmpvaW4oJywgJyl9YDtcbiAgfVxuICByZXR1cm4gYCR7dHlwZX0oJHt2YWx1ZXN9KWA7XG59XG5cbi8qKlxuICogQ29udmVydHMgYSBjb2xvciBmcm9tIENTUyByZ2IgZm9ybWF0IHRvIENTUyBoZXggZm9ybWF0LlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gUkdCIGNvbG9yLCBpLmUuIHJnYihuLCBuLCBuKVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgcmdiIGNvbG9yIHN0cmluZywgaS5lLiAjbm5ubm5uXG4gKi9cbmZ1bmN0aW9uIHJnYlRvSGV4KGNvbG9yKSB7XG4gIC8vIElkZW1wb3RlbnRcbiAgaWYgKGNvbG9yLmluZGV4T2YoJyMnKSA9PT0gMCkge1xuICAgIHJldHVybiBjb2xvcjtcbiAgfVxuICBjb25zdCB7XG4gICAgdmFsdWVzXG4gIH0gPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIHJldHVybiBgIyR7dmFsdWVzLm1hcCgobiwgaSkgPT4gaW50VG9IZXgoaSA9PT0gMyA/IE1hdGgucm91bmQoMjU1ICogbikgOiBuKSkuam9pbignJyl9YDtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhIGNvbG9yIGZyb20gaHNsIGZvcm1hdCB0byByZ2IgZm9ybWF0LlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gSFNMIGNvbG9yIHZhbHVlc1xuICogQHJldHVybnMge3N0cmluZ30gcmdiIGNvbG9yIHZhbHVlc1xuICovXG5mdW5jdGlvbiBoc2xUb1JnYihjb2xvcikge1xuICBjb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgY29uc3Qge1xuICAgIHZhbHVlc1xuICB9ID0gY29sb3I7XG4gIGNvbnN0IGggPSB2YWx1ZXNbMF07XG4gIGNvbnN0IHMgPSB2YWx1ZXNbMV0gLyAxMDA7XG4gIGNvbnN0IGwgPSB2YWx1ZXNbMl0gLyAxMDA7XG4gIGNvbnN0IGEgPSBzICogTWF0aC5taW4obCwgMSAtIGwpO1xuICBjb25zdCBmID0gKG4sIGsgPSAobiArIGggLyAzMCkgJSAxMikgPT4gbCAtIGEgKiBNYXRoLm1heChNYXRoLm1pbihrIC0gMywgOSAtIGssIDEpLCAtMSk7XG4gIGxldCB0eXBlID0gJ3JnYic7XG4gIGNvbnN0IHJnYiA9IFtNYXRoLnJvdW5kKGYoMCkgKiAyNTUpLCBNYXRoLnJvdW5kKGYoOCkgKiAyNTUpLCBNYXRoLnJvdW5kKGYoNCkgKiAyNTUpXTtcbiAgaWYgKGNvbG9yLnR5cGUgPT09ICdoc2xhJykge1xuICAgIHR5cGUgKz0gJ2EnO1xuICAgIHJnYi5wdXNoKHZhbHVlc1szXSk7XG4gIH1cbiAgcmV0dXJuIHJlY29tcG9zZUNvbG9yKHtcbiAgICB0eXBlLFxuICAgIHZhbHVlczogcmdiXG4gIH0pO1xufVxuLyoqXG4gKiBUaGUgcmVsYXRpdmUgYnJpZ2h0bmVzcyBvZiBhbnkgcG9pbnQgaW4gYSBjb2xvciBzcGFjZSxcbiAqIG5vcm1hbGl6ZWQgdG8gMCBmb3IgZGFya2VzdCBibGFjayBhbmQgMSBmb3IgbGlnaHRlc3Qgd2hpdGUuXG4gKlxuICogRm9ybXVsYTogaHR0cHM6Ly93d3cudzMub3JnL1RSL1dDQUcyMC1URUNIUy9HMTcuaHRtbCNHMTctdGVzdHNcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKCksIGNvbG9yKClcbiAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSByZWxhdGl2ZSBicmlnaHRuZXNzIG9mIHRoZSBjb2xvciBpbiB0aGUgcmFuZ2UgMCAtIDFcbiAqL1xuZnVuY3Rpb24gZ2V0THVtaW5hbmNlKGNvbG9yKSB7XG4gIGNvbG9yID0gZGVjb21wb3NlQ29sb3IoY29sb3IpO1xuICBsZXQgcmdiID0gY29sb3IudHlwZSA9PT0gJ2hzbCcgfHwgY29sb3IudHlwZSA9PT0gJ2hzbGEnID8gZGVjb21wb3NlQ29sb3IoaHNsVG9SZ2IoY29sb3IpKS52YWx1ZXMgOiBjb2xvci52YWx1ZXM7XG4gIHJnYiA9IHJnYi5tYXAodmFsID0+IHtcbiAgICBpZiAoY29sb3IudHlwZSAhPT0gJ2NvbG9yJykge1xuICAgICAgdmFsIC89IDI1NTsgLy8gbm9ybWFsaXplZFxuICAgIH1cbiAgICByZXR1cm4gdmFsIDw9IDAuMDM5MjggPyB2YWwgLyAxMi45MiA6ICgodmFsICsgMC4wNTUpIC8gMS4wNTUpICoqIDIuNDtcbiAgfSk7XG5cbiAgLy8gVHJ1bmNhdGUgYXQgMyBkaWdpdHNcbiAgcmV0dXJuIE51bWJlcigoMC4yMTI2ICogcmdiWzBdICsgMC43MTUyICogcmdiWzFdICsgMC4wNzIyICogcmdiWzJdKS50b0ZpeGVkKDMpKTtcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBjb250cmFzdCByYXRpbyBiZXR3ZWVuIHR3byBjb2xvcnMuXG4gKlxuICogRm9ybXVsYTogaHR0cHM6Ly93d3cudzMub3JnL1RSL1dDQUcyMC1URUNIUy9HMTcuaHRtbCNHMTctdGVzdHNcbiAqIEBwYXJhbSB7c3RyaW5nfSBmb3JlZ3JvdW5kIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKVxuICogQHBhcmFtIHtzdHJpbmd9IGJhY2tncm91bmQgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBBIGNvbnRyYXN0IHJhdGlvIHZhbHVlIGluIHRoZSByYW5nZSAwIC0gMjEuXG4gKi9cbmZ1bmN0aW9uIGdldENvbnRyYXN0UmF0aW8oZm9yZWdyb3VuZCwgYmFja2dyb3VuZCkge1xuICBjb25zdCBsdW1BID0gZ2V0THVtaW5hbmNlKGZvcmVncm91bmQpO1xuICBjb25zdCBsdW1CID0gZ2V0THVtaW5hbmNlKGJhY2tncm91bmQpO1xuICByZXR1cm4gKE1hdGgubWF4KGx1bUEsIGx1bUIpICsgMC4wNSkgLyAoTWF0aC5taW4obHVtQSwgbHVtQikgKyAwLjA1KTtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBhYnNvbHV0ZSB0cmFuc3BhcmVuY3kgb2YgYSBjb2xvci5cbiAqIEFueSBleGlzdGluZyBhbHBoYSB2YWx1ZXMgYXJlIG92ZXJ3cml0dGVuLlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKSwgY29sb3IoKVxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIC0gdmFsdWUgdG8gc2V0IHRoZSBhbHBoYSBjaGFubmVsIHRvIGluIHRoZSByYW5nZSAwIC0gMVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nLiBIZXggaW5wdXQgdmFsdWVzIGFyZSByZXR1cm5lZCBhcyByZ2JcbiAqL1xuZnVuY3Rpb24gYWxwaGEoY29sb3IsIHZhbHVlKSB7XG4gIGNvbG9yID0gZGVjb21wb3NlQ29sb3IoY29sb3IpO1xuICB2YWx1ZSA9IGNsYW1wV3JhcHBlcih2YWx1ZSk7XG4gIGlmIChjb2xvci50eXBlID09PSAncmdiJyB8fCBjb2xvci50eXBlID09PSAnaHNsJykge1xuICAgIGNvbG9yLnR5cGUgKz0gJ2EnO1xuICB9XG4gIGlmIChjb2xvci50eXBlID09PSAnY29sb3InKSB7XG4gICAgY29sb3IudmFsdWVzWzNdID0gYC8ke3ZhbHVlfWA7XG4gIH0gZWxzZSB7XG4gICAgY29sb3IudmFsdWVzWzNdID0gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIHJlY29tcG9zZUNvbG9yKGNvbG9yKTtcbn1cbmZ1bmN0aW9uIHByaXZhdGVfc2FmZUFscGhhKGNvbG9yLCB2YWx1ZSwgd2FybmluZykge1xuICB0cnkge1xuICAgIHJldHVybiBhbHBoYShjb2xvciwgdmFsdWUpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlmICh3YXJuaW5nICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNvbnNvbGUud2Fybih3YXJuaW5nKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG59XG5cbi8qKlxuICogRGFya2VucyBhIGNvbG9yLlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKSwgY29sb3IoKVxuICogQHBhcmFtIHtudW1iZXJ9IGNvZWZmaWNpZW50IC0gbXVsdGlwbGllciBpbiB0aGUgcmFuZ2UgMCAtIDFcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIGNvbG9yIHN0cmluZy4gSGV4IGlucHV0IHZhbHVlcyBhcmUgcmV0dXJuZWQgYXMgcmdiXG4gKi9cbmZ1bmN0aW9uIGRhcmtlbihjb2xvciwgY29lZmZpY2llbnQpIHtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIGNvZWZmaWNpZW50ID0gY2xhbXBXcmFwcGVyKGNvZWZmaWNpZW50KTtcbiAgaWYgKGNvbG9yLnR5cGUuaW5kZXhPZignaHNsJykgIT09IC0xKSB7XG4gICAgY29sb3IudmFsdWVzWzJdICo9IDEgLSBjb2VmZmljaWVudDtcbiAgfSBlbHNlIGlmIChjb2xvci50eXBlLmluZGV4T2YoJ3JnYicpICE9PSAtMSB8fCBjb2xvci50eXBlLmluZGV4T2YoJ2NvbG9yJykgIT09IC0xKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAzOyBpICs9IDEpIHtcbiAgICAgIGNvbG9yLnZhbHVlc1tpXSAqPSAxIC0gY29lZmZpY2llbnQ7XG4gICAgfVxuICB9XG4gIHJldHVybiByZWNvbXBvc2VDb2xvcihjb2xvcik7XG59XG5mdW5jdGlvbiBwcml2YXRlX3NhZmVEYXJrZW4oY29sb3IsIGNvZWZmaWNpZW50LCB3YXJuaW5nKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRhcmtlbihjb2xvciwgY29lZmZpY2llbnQpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlmICh3YXJuaW5nICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNvbnNvbGUud2Fybih3YXJuaW5nKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG59XG5cbi8qKlxuICogTGlnaHRlbnMgYSBjb2xvci5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKCksIGNvbG9yKClcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb2VmZmljaWVudCAtIG11bHRpcGxpZXIgaW4gdGhlIHJhbmdlIDAgLSAxXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmcuIEhleCBpbnB1dCB2YWx1ZXMgYXJlIHJldHVybmVkIGFzIHJnYlxuICovXG5mdW5jdGlvbiBsaWdodGVuKGNvbG9yLCBjb2VmZmljaWVudCkge1xuICBjb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgY29lZmZpY2llbnQgPSBjbGFtcFdyYXBwZXIoY29lZmZpY2llbnQpO1xuICBpZiAoY29sb3IudHlwZS5pbmRleE9mKCdoc2wnKSAhPT0gLTEpIHtcbiAgICBjb2xvci52YWx1ZXNbMl0gKz0gKDEwMCAtIGNvbG9yLnZhbHVlc1syXSkgKiBjb2VmZmljaWVudDtcbiAgfSBlbHNlIGlmIChjb2xvci50eXBlLmluZGV4T2YoJ3JnYicpICE9PSAtMSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzsgaSArPSAxKSB7XG4gICAgICBjb2xvci52YWx1ZXNbaV0gKz0gKDI1NSAtIGNvbG9yLnZhbHVlc1tpXSkgKiBjb2VmZmljaWVudDtcbiAgICB9XG4gIH0gZWxzZSBpZiAoY29sb3IudHlwZS5pbmRleE9mKCdjb2xvcicpICE9PSAtMSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzsgaSArPSAxKSB7XG4gICAgICBjb2xvci52YWx1ZXNbaV0gKz0gKDEgLSBjb2xvci52YWx1ZXNbaV0pICogY29lZmZpY2llbnQ7XG4gICAgfVxuICB9XG4gIHJldHVybiByZWNvbXBvc2VDb2xvcihjb2xvcik7XG59XG5mdW5jdGlvbiBwcml2YXRlX3NhZmVMaWdodGVuKGNvbG9yLCBjb2VmZmljaWVudCwgd2FybmluZykge1xuICB0cnkge1xuICAgIHJldHVybiBsaWdodGVuKGNvbG9yLCBjb2VmZmljaWVudCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaWYgKHdhcm5pbmcgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY29uc29sZS53YXJuKHdhcm5pbmcpO1xuICAgIH1cbiAgICByZXR1cm4gY29sb3I7XG4gIH1cbn1cblxuLyoqXG4gKiBEYXJrZW4gb3IgbGlnaHRlbiBhIGNvbG9yLCBkZXBlbmRpbmcgb24gaXRzIGx1bWluYW5jZS5cbiAqIExpZ2h0IGNvbG9ycyBhcmUgZGFya2VuZWQsIGRhcmsgY29sb3JzIGFyZSBsaWdodGVuZWQuXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpLCBjb2xvcigpXG4gKiBAcGFyYW0ge251bWJlcn0gY29lZmZpY2llbnQ9MC4xNSAtIG11bHRpcGxpZXIgaW4gdGhlIHJhbmdlIDAgLSAxXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmcuIEhleCBpbnB1dCB2YWx1ZXMgYXJlIHJldHVybmVkIGFzIHJnYlxuICovXG5mdW5jdGlvbiBlbXBoYXNpemUoY29sb3IsIGNvZWZmaWNpZW50ID0gMC4xNSkge1xuICByZXR1cm4gZ2V0THVtaW5hbmNlKGNvbG9yKSA+IDAuNSA/IGRhcmtlbihjb2xvciwgY29lZmZpY2llbnQpIDogbGlnaHRlbihjb2xvciwgY29lZmZpY2llbnQpO1xufVxuZnVuY3Rpb24gcHJpdmF0ZV9zYWZlRW1waGFzaXplKGNvbG9yLCBjb2VmZmljaWVudCwgd2FybmluZykge1xuICB0cnkge1xuICAgIHJldHVybiBlbXBoYXNpemUoY29sb3IsIGNvZWZmaWNpZW50KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpZiAod2FybmluZyAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjb25zb2xlLndhcm4od2FybmluZyk7XG4gICAgfVxuICAgIHJldHVybiBjb2xvcjtcbiAgfVxufVxuXG4vKipcbiAqIEJsZW5kIGEgdHJhbnNwYXJlbnQgb3ZlcmxheSBjb2xvciB3aXRoIGEgYmFja2dyb3VuZCBjb2xvciwgcmVzdWx0aW5nIGluIGEgc2luZ2xlXG4gKiBSR0IgY29sb3IuXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFja2dyb3VuZCAtIENTUyBjb2xvclxuICogQHBhcmFtIHtzdHJpbmd9IG92ZXJsYXkgLSBDU1MgY29sb3JcbiAqIEBwYXJhbSB7bnVtYmVyfSBvcGFjaXR5IC0gT3BhY2l0eSBtdWx0aXBsaWVyIGluIHRoZSByYW5nZSAwIC0gMVxuICogQHBhcmFtIHtudW1iZXJ9IFtnYW1tYT0xLjBdIC0gR2FtbWEgY29ycmVjdGlvbiBmYWN0b3IuIEZvciBnYW1tYS1jb3JyZWN0IGJsZW5kaW5nLCAyLjIgaXMgdXN1YWwuXG4gKi9cbmZ1bmN0aW9uIGJsZW5kKGJhY2tncm91bmQsIG92ZXJsYXksIG9wYWNpdHksIGdhbW1hID0gMS4wKSB7XG4gIGNvbnN0IGJsZW5kQ2hhbm5lbCA9IChiLCBvKSA9PiBNYXRoLnJvdW5kKChiICoqICgxIC8gZ2FtbWEpICogKDEgLSBvcGFjaXR5KSArIG8gKiogKDEgLyBnYW1tYSkgKiBvcGFjaXR5KSAqKiBnYW1tYSk7XG4gIGNvbnN0IGJhY2tncm91bmRDb2xvciA9IGRlY29tcG9zZUNvbG9yKGJhY2tncm91bmQpO1xuICBjb25zdCBvdmVybGF5Q29sb3IgPSBkZWNvbXBvc2VDb2xvcihvdmVybGF5KTtcbiAgY29uc3QgcmdiID0gW2JsZW5kQ2hhbm5lbChiYWNrZ3JvdW5kQ29sb3IudmFsdWVzWzBdLCBvdmVybGF5Q29sb3IudmFsdWVzWzBdKSwgYmxlbmRDaGFubmVsKGJhY2tncm91bmRDb2xvci52YWx1ZXNbMV0sIG92ZXJsYXlDb2xvci52YWx1ZXNbMV0pLCBibGVuZENoYW5uZWwoYmFja2dyb3VuZENvbG9yLnZhbHVlc1syXSwgb3ZlcmxheUNvbG9yLnZhbHVlc1syXSldO1xuICByZXR1cm4gcmVjb21wb3NlQ29sb3Ioe1xuICAgIHR5cGU6ICdyZ2InLFxuICAgIHZhbHVlczogcmdiXG4gIH0pO1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2Zvcm1hdE11aUVycm9yTWVzc2FnZSBmcm9tIFwiQG11aS91dGlscy9mb3JtYXRNdWlFcnJvck1lc3NhZ2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcIm1vZGVcIiwgXCJjb250cmFzdFRocmVzaG9sZFwiLCBcInRvbmFsT2Zmc2V0XCJdO1xuaW1wb3J0IGRlZXBtZXJnZSBmcm9tICdAbXVpL3V0aWxzL2RlZXBtZXJnZSc7XG5pbXBvcnQgeyBkYXJrZW4sIGdldENvbnRyYXN0UmF0aW8sIGxpZ2h0ZW4gfSBmcm9tICdAbXVpL3N5c3RlbS9jb2xvck1hbmlwdWxhdG9yJztcbmltcG9ydCBjb21tb24gZnJvbSAnLi4vY29sb3JzL2NvbW1vbic7XG5pbXBvcnQgZ3JleSBmcm9tICcuLi9jb2xvcnMvZ3JleSc7XG5pbXBvcnQgcHVycGxlIGZyb20gJy4uL2NvbG9ycy9wdXJwbGUnO1xuaW1wb3J0IHJlZCBmcm9tICcuLi9jb2xvcnMvcmVkJztcbmltcG9ydCBvcmFuZ2UgZnJvbSAnLi4vY29sb3JzL29yYW5nZSc7XG5pbXBvcnQgYmx1ZSBmcm9tICcuLi9jb2xvcnMvYmx1ZSc7XG5pbXBvcnQgbGlnaHRCbHVlIGZyb20gJy4uL2NvbG9ycy9saWdodEJsdWUnO1xuaW1wb3J0IGdyZWVuIGZyb20gJy4uL2NvbG9ycy9ncmVlbic7XG5leHBvcnQgY29uc3QgbGlnaHQgPSB7XG4gIC8vIFRoZSBjb2xvcnMgdXNlZCB0byBzdHlsZSB0aGUgdGV4dC5cbiAgdGV4dDoge1xuICAgIC8vIFRoZSBtb3N0IGltcG9ydGFudCB0ZXh0LlxuICAgIHByaW1hcnk6ICdyZ2JhKDAsIDAsIDAsIDAuODcpJyxcbiAgICAvLyBTZWNvbmRhcnkgdGV4dC5cbiAgICBzZWNvbmRhcnk6ICdyZ2JhKDAsIDAsIDAsIDAuNiknLFxuICAgIC8vIERpc2FibGVkIHRleHQgaGF2ZSBldmVuIGxvd2VyIHZpc3VhbCBwcm9taW5lbmNlLlxuICAgIGRpc2FibGVkOiAncmdiYSgwLCAwLCAwLCAwLjM4KSdcbiAgfSxcbiAgLy8gVGhlIGNvbG9yIHVzZWQgdG8gZGl2aWRlIGRpZmZlcmVudCBlbGVtZW50cy5cbiAgZGl2aWRlcjogJ3JnYmEoMCwgMCwgMCwgMC4xMiknLFxuICAvLyBUaGUgYmFja2dyb3VuZCBjb2xvcnMgdXNlZCB0byBzdHlsZSB0aGUgc3VyZmFjZXMuXG4gIC8vIENvbnNpc3RlbmN5IGJldHdlZW4gdGhlc2UgdmFsdWVzIGlzIGltcG9ydGFudC5cbiAgYmFja2dyb3VuZDoge1xuICAgIHBhcGVyOiBjb21tb24ud2hpdGUsXG4gICAgZGVmYXVsdDogY29tbW9uLndoaXRlXG4gIH0sXG4gIC8vIFRoZSBjb2xvcnMgdXNlZCB0byBzdHlsZSB0aGUgYWN0aW9uIGVsZW1lbnRzLlxuICBhY3Rpb246IHtcbiAgICAvLyBUaGUgY29sb3Igb2YgYW4gYWN0aXZlIGFjdGlvbiBsaWtlIGFuIGljb24gYnV0dG9uLlxuICAgIGFjdGl2ZTogJ3JnYmEoMCwgMCwgMCwgMC41NCknLFxuICAgIC8vIFRoZSBjb2xvciBvZiBhbiBob3ZlcmVkIGFjdGlvbi5cbiAgICBob3ZlcjogJ3JnYmEoMCwgMCwgMCwgMC4wNCknLFxuICAgIGhvdmVyT3BhY2l0eTogMC4wNCxcbiAgICAvLyBUaGUgY29sb3Igb2YgYSBzZWxlY3RlZCBhY3Rpb24uXG4gICAgc2VsZWN0ZWQ6ICdyZ2JhKDAsIDAsIDAsIDAuMDgpJyxcbiAgICBzZWxlY3RlZE9wYWNpdHk6IDAuMDgsXG4gICAgLy8gVGhlIGNvbG9yIG9mIGEgZGlzYWJsZWQgYWN0aW9uLlxuICAgIGRpc2FibGVkOiAncmdiYSgwLCAwLCAwLCAwLjI2KScsXG4gICAgLy8gVGhlIGJhY2tncm91bmQgY29sb3Igb2YgYSBkaXNhYmxlZCBhY3Rpb24uXG4gICAgZGlzYWJsZWRCYWNrZ3JvdW5kOiAncmdiYSgwLCAwLCAwLCAwLjEyKScsXG4gICAgZGlzYWJsZWRPcGFjaXR5OiAwLjM4LFxuICAgIGZvY3VzOiAncmdiYSgwLCAwLCAwLCAwLjEyKScsXG4gICAgZm9jdXNPcGFjaXR5OiAwLjEyLFxuICAgIGFjdGl2YXRlZE9wYWNpdHk6IDAuMTJcbiAgfVxufTtcbmV4cG9ydCBjb25zdCBkYXJrID0ge1xuICB0ZXh0OiB7XG4gICAgcHJpbWFyeTogY29tbW9uLndoaXRlLFxuICAgIHNlY29uZGFyeTogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC43KScsXG4gICAgZGlzYWJsZWQ6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSknLFxuICAgIGljb246ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSknXG4gIH0sXG4gIGRpdmlkZXI6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTIpJyxcbiAgYmFja2dyb3VuZDoge1xuICAgIHBhcGVyOiAnIzEyMTIxMicsXG4gICAgZGVmYXVsdDogJyMxMjEyMTInXG4gIH0sXG4gIGFjdGlvbjoge1xuICAgIGFjdGl2ZTogY29tbW9uLndoaXRlLFxuICAgIGhvdmVyOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjA4KScsXG4gICAgaG92ZXJPcGFjaXR5OiAwLjA4LFxuICAgIHNlbGVjdGVkOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjE2KScsXG4gICAgc2VsZWN0ZWRPcGFjaXR5OiAwLjE2LFxuICAgIGRpc2FibGVkOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjMpJyxcbiAgICBkaXNhYmxlZEJhY2tncm91bmQ6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTIpJyxcbiAgICBkaXNhYmxlZE9wYWNpdHk6IDAuMzgsXG4gICAgZm9jdXM6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTIpJyxcbiAgICBmb2N1c09wYWNpdHk6IDAuMTIsXG4gICAgYWN0aXZhdGVkT3BhY2l0eTogMC4yNFxuICB9XG59O1xuZnVuY3Rpb24gYWRkTGlnaHRPckRhcmsoaW50ZW50LCBkaXJlY3Rpb24sIHNoYWRlLCB0b25hbE9mZnNldCkge1xuICBjb25zdCB0b25hbE9mZnNldExpZ2h0ID0gdG9uYWxPZmZzZXQubGlnaHQgfHwgdG9uYWxPZmZzZXQ7XG4gIGNvbnN0IHRvbmFsT2Zmc2V0RGFyayA9IHRvbmFsT2Zmc2V0LmRhcmsgfHwgdG9uYWxPZmZzZXQgKiAxLjU7XG4gIGlmICghaW50ZW50W2RpcmVjdGlvbl0pIHtcbiAgICBpZiAoaW50ZW50Lmhhc093blByb3BlcnR5KHNoYWRlKSkge1xuICAgICAgaW50ZW50W2RpcmVjdGlvbl0gPSBpbnRlbnRbc2hhZGVdO1xuICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSAnbGlnaHQnKSB7XG4gICAgICBpbnRlbnQubGlnaHQgPSBsaWdodGVuKGludGVudC5tYWluLCB0b25hbE9mZnNldExpZ2h0KTtcbiAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gJ2RhcmsnKSB7XG4gICAgICBpbnRlbnQuZGFyayA9IGRhcmtlbihpbnRlbnQubWFpbiwgdG9uYWxPZmZzZXREYXJrKTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGdldERlZmF1bHRQcmltYXJ5KG1vZGUgPSAnbGlnaHQnKSB7XG4gIGlmIChtb2RlID09PSAnZGFyaycpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWFpbjogYmx1ZVsyMDBdLFxuICAgICAgbGlnaHQ6IGJsdWVbNTBdLFxuICAgICAgZGFyazogYmx1ZVs0MDBdXG4gICAgfTtcbiAgfVxuICByZXR1cm4ge1xuICAgIG1haW46IGJsdWVbNzAwXSxcbiAgICBsaWdodDogYmx1ZVs0MDBdLFxuICAgIGRhcms6IGJsdWVbODAwXVxuICB9O1xufVxuZnVuY3Rpb24gZ2V0RGVmYXVsdFNlY29uZGFyeShtb2RlID0gJ2xpZ2h0Jykge1xuICBpZiAobW9kZSA9PT0gJ2RhcmsnKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1haW46IHB1cnBsZVsyMDBdLFxuICAgICAgbGlnaHQ6IHB1cnBsZVs1MF0sXG4gICAgICBkYXJrOiBwdXJwbGVbNDAwXVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBtYWluOiBwdXJwbGVbNTAwXSxcbiAgICBsaWdodDogcHVycGxlWzMwMF0sXG4gICAgZGFyazogcHVycGxlWzcwMF1cbiAgfTtcbn1cbmZ1bmN0aW9uIGdldERlZmF1bHRFcnJvcihtb2RlID0gJ2xpZ2h0Jykge1xuICBpZiAobW9kZSA9PT0gJ2RhcmsnKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1haW46IHJlZFs1MDBdLFxuICAgICAgbGlnaHQ6IHJlZFszMDBdLFxuICAgICAgZGFyazogcmVkWzcwMF1cbiAgICB9O1xuICB9XG4gIHJldHVybiB7XG4gICAgbWFpbjogcmVkWzcwMF0sXG4gICAgbGlnaHQ6IHJlZFs0MDBdLFxuICAgIGRhcms6IHJlZFs4MDBdXG4gIH07XG59XG5mdW5jdGlvbiBnZXREZWZhdWx0SW5mbyhtb2RlID0gJ2xpZ2h0Jykge1xuICBpZiAobW9kZSA9PT0gJ2RhcmsnKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1haW46IGxpZ2h0Qmx1ZVs0MDBdLFxuICAgICAgbGlnaHQ6IGxpZ2h0Qmx1ZVszMDBdLFxuICAgICAgZGFyazogbGlnaHRCbHVlWzcwMF1cbiAgICB9O1xuICB9XG4gIHJldHVybiB7XG4gICAgbWFpbjogbGlnaHRCbHVlWzcwMF0sXG4gICAgbGlnaHQ6IGxpZ2h0Qmx1ZVs1MDBdLFxuICAgIGRhcms6IGxpZ2h0Qmx1ZVs5MDBdXG4gIH07XG59XG5mdW5jdGlvbiBnZXREZWZhdWx0U3VjY2Vzcyhtb2RlID0gJ2xpZ2h0Jykge1xuICBpZiAobW9kZSA9PT0gJ2RhcmsnKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1haW46IGdyZWVuWzQwMF0sXG4gICAgICBsaWdodDogZ3JlZW5bMzAwXSxcbiAgICAgIGRhcms6IGdyZWVuWzcwMF1cbiAgICB9O1xuICB9XG4gIHJldHVybiB7XG4gICAgbWFpbjogZ3JlZW5bODAwXSxcbiAgICBsaWdodDogZ3JlZW5bNTAwXSxcbiAgICBkYXJrOiBncmVlbls5MDBdXG4gIH07XG59XG5mdW5jdGlvbiBnZXREZWZhdWx0V2FybmluZyhtb2RlID0gJ2xpZ2h0Jykge1xuICBpZiAobW9kZSA9PT0gJ2RhcmsnKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1haW46IG9yYW5nZVs0MDBdLFxuICAgICAgbGlnaHQ6IG9yYW5nZVszMDBdLFxuICAgICAgZGFyazogb3JhbmdlWzcwMF1cbiAgICB9O1xuICB9XG4gIHJldHVybiB7XG4gICAgbWFpbjogJyNlZDZjMDInLFxuICAgIC8vIGNsb3Nlc3QgdG8gb3JhbmdlWzgwMF0gdGhhdCBwYXNzIDM6MS5cbiAgICBsaWdodDogb3JhbmdlWzUwMF0sXG4gICAgZGFyazogb3JhbmdlWzkwMF1cbiAgfTtcbn1cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVBhbGV0dGUocGFsZXR0ZSkge1xuICBjb25zdCB7XG4gICAgICBtb2RlID0gJ2xpZ2h0JyxcbiAgICAgIGNvbnRyYXN0VGhyZXNob2xkID0gMyxcbiAgICAgIHRvbmFsT2Zmc2V0ID0gMC4yXG4gICAgfSA9IHBhbGV0dGUsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwYWxldHRlLCBfZXhjbHVkZWQpO1xuICBjb25zdCBwcmltYXJ5ID0gcGFsZXR0ZS5wcmltYXJ5IHx8IGdldERlZmF1bHRQcmltYXJ5KG1vZGUpO1xuICBjb25zdCBzZWNvbmRhcnkgPSBwYWxldHRlLnNlY29uZGFyeSB8fCBnZXREZWZhdWx0U2Vjb25kYXJ5KG1vZGUpO1xuICBjb25zdCBlcnJvciA9IHBhbGV0dGUuZXJyb3IgfHwgZ2V0RGVmYXVsdEVycm9yKG1vZGUpO1xuICBjb25zdCBpbmZvID0gcGFsZXR0ZS5pbmZvIHx8IGdldERlZmF1bHRJbmZvKG1vZGUpO1xuICBjb25zdCBzdWNjZXNzID0gcGFsZXR0ZS5zdWNjZXNzIHx8IGdldERlZmF1bHRTdWNjZXNzKG1vZGUpO1xuICBjb25zdCB3YXJuaW5nID0gcGFsZXR0ZS53YXJuaW5nIHx8IGdldERlZmF1bHRXYXJuaW5nKG1vZGUpO1xuXG4gIC8vIFVzZSB0aGUgc2FtZSBsb2dpYyBhc1xuICAvLyBCb290c3RyYXA6IGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iLzFkNmUzNzEwZGQ0NDdkZTFhMjAwZjI5ZThmYTUyMWY4YTA5MDhmNzAvc2Nzcy9fZnVuY3Rpb25zLnNjc3MjTDU5XG4gIC8vIGFuZCBtYXRlcmlhbC1jb21wb25lbnRzLXdlYiBodHRwczovL2dpdGh1Yi5jb20vbWF0ZXJpYWwtY29tcG9uZW50cy9tYXRlcmlhbC1jb21wb25lbnRzLXdlYi9ibG9iL2FjNDZiODg2M2M0ZGFiOWZjMjJjNGM2NjJkYzZiZDFiNjVkZDY1MmYvcGFja2FnZXMvbWRjLXRoZW1lL19mdW5jdGlvbnMuc2NzcyNMNTRcbiAgZnVuY3Rpb24gZ2V0Q29udHJhc3RUZXh0KGJhY2tncm91bmQpIHtcbiAgICBjb25zdCBjb250cmFzdFRleHQgPSBnZXRDb250cmFzdFJhdGlvKGJhY2tncm91bmQsIGRhcmsudGV4dC5wcmltYXJ5KSA+PSBjb250cmFzdFRocmVzaG9sZCA/IGRhcmsudGV4dC5wcmltYXJ5IDogbGlnaHQudGV4dC5wcmltYXJ5O1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjb25zdCBjb250cmFzdCA9IGdldENvbnRyYXN0UmF0aW8oYmFja2dyb3VuZCwgY29udHJhc3RUZXh0KTtcbiAgICAgIGlmIChjb250cmFzdCA8IDMpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihbYE1VSTogVGhlIGNvbnRyYXN0IHJhdGlvIG9mICR7Y29udHJhc3R9OjEgZm9yICR7Y29udHJhc3RUZXh0fSBvbiAke2JhY2tncm91bmR9YCwgJ2ZhbGxzIGJlbG93IHRoZSBXQ0FHIHJlY29tbWVuZGVkIGFic29sdXRlIG1pbmltdW0gY29udHJhc3QgcmF0aW8gb2YgMzoxLicsICdodHRwczovL3d3dy53My5vcmcvVFIvMjAwOC9SRUMtV0NBRzIwLTIwMDgxMjExLyN2aXN1YWwtYXVkaW8tY29udHJhc3QtY29udHJhc3QnXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjb250cmFzdFRleHQ7XG4gIH1cbiAgY29uc3QgYXVnbWVudENvbG9yID0gKHtcbiAgICBjb2xvcixcbiAgICBuYW1lLFxuICAgIG1haW5TaGFkZSA9IDUwMCxcbiAgICBsaWdodFNoYWRlID0gMzAwLFxuICAgIGRhcmtTaGFkZSA9IDcwMFxuICB9KSA9PiB7XG4gICAgY29sb3IgPSBfZXh0ZW5kcyh7fSwgY29sb3IpO1xuICAgIGlmICghY29sb3IubWFpbiAmJiBjb2xvclttYWluU2hhZGVdKSB7XG4gICAgICBjb2xvci5tYWluID0gY29sb3JbbWFpblNoYWRlXTtcbiAgICB9XG4gICAgaWYgKCFjb2xvci5oYXNPd25Qcm9wZXJ0eSgnbWFpbicpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gYE1VSTogVGhlIGNvbG9yJHtuYW1lID8gYCAoJHtuYW1lfSlgIDogJyd9IHByb3ZpZGVkIHRvIGF1Z21lbnRDb2xvcihjb2xvcikgaXMgaW52YWxpZC5cblRoZSBjb2xvciBvYmplY3QgbmVlZHMgdG8gaGF2ZSBhIFxcYG1haW5cXGAgcHJvcGVydHkgb3IgYSBcXGAke21haW5TaGFkZX1cXGAgcHJvcGVydHkuYCA6IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UoMTEsIG5hbWUgPyBgICgke25hbWV9KWAgOiAnJywgbWFpblNoYWRlKSk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgY29sb3IubWFpbiAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBgTVVJOiBUaGUgY29sb3Ike25hbWUgPyBgICgke25hbWV9KWAgOiAnJ30gcHJvdmlkZWQgdG8gYXVnbWVudENvbG9yKGNvbG9yKSBpcyBpbnZhbGlkLlxuXFxgY29sb3IubWFpblxcYCBzaG91bGQgYmUgYSBzdHJpbmcsIGJ1dCBcXGAke0pTT04uc3RyaW5naWZ5KGNvbG9yLm1haW4pfVxcYCB3YXMgcHJvdmlkZWQgaW5zdGVhZC5cblxuRGlkIHlvdSBpbnRlbmQgdG8gdXNlIG9uZSBvZiB0aGUgZm9sbG93aW5nIGFwcHJvYWNoZXM/XG5cbmltcG9ydCB7IGdyZWVuIH0gZnJvbSBcIkBtdWkvbWF0ZXJpYWwvY29sb3JzXCI7XG5cbmNvbnN0IHRoZW1lMSA9IGNyZWF0ZVRoZW1lKHsgcGFsZXR0ZToge1xuICBwcmltYXJ5OiBncmVlbixcbn0gfSk7XG5cbmNvbnN0IHRoZW1lMiA9IGNyZWF0ZVRoZW1lKHsgcGFsZXR0ZToge1xuICBwcmltYXJ5OiB7IG1haW46IGdyZWVuWzUwMF0gfSxcbn0gfSk7YCA6IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UoMTIsIG5hbWUgPyBgICgke25hbWV9KWAgOiAnJywgSlNPTi5zdHJpbmdpZnkoY29sb3IubWFpbikpKTtcbiAgICB9XG4gICAgYWRkTGlnaHRPckRhcmsoY29sb3IsICdsaWdodCcsIGxpZ2h0U2hhZGUsIHRvbmFsT2Zmc2V0KTtcbiAgICBhZGRMaWdodE9yRGFyayhjb2xvciwgJ2RhcmsnLCBkYXJrU2hhZGUsIHRvbmFsT2Zmc2V0KTtcbiAgICBpZiAoIWNvbG9yLmNvbnRyYXN0VGV4dCkge1xuICAgICAgY29sb3IuY29udHJhc3RUZXh0ID0gZ2V0Q29udHJhc3RUZXh0KGNvbG9yLm1haW4pO1xuICAgIH1cbiAgICByZXR1cm4gY29sb3I7XG4gIH07XG4gIGNvbnN0IG1vZGVzID0ge1xuICAgIGRhcmssXG4gICAgbGlnaHRcbiAgfTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoIW1vZGVzW21vZGVdKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGBNVUk6IFRoZSBwYWxldHRlIG1vZGUgXFxgJHttb2RlfVxcYCBpcyBub3Qgc3VwcG9ydGVkLmApO1xuICAgIH1cbiAgfVxuICBjb25zdCBwYWxldHRlT3V0cHV0ID0gZGVlcG1lcmdlKF9leHRlbmRzKHtcbiAgICAvLyBBIGNvbGxlY3Rpb24gb2YgY29tbW9uIGNvbG9ycy5cbiAgICBjb21tb246IF9leHRlbmRzKHt9LCBjb21tb24pLFxuICAgIC8vIHByZXZlbnQgbXV0YWJsZSBvYmplY3QuXG4gICAgLy8gVGhlIHBhbGV0dGUgbW9kZSwgY2FuIGJlIGxpZ2h0IG9yIGRhcmsuXG4gICAgbW9kZSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gcmVwcmVzZW50IHByaW1hcnkgaW50ZXJmYWNlIGVsZW1lbnRzIGZvciBhIHVzZXIuXG4gICAgcHJpbWFyeTogYXVnbWVudENvbG9yKHtcbiAgICAgIGNvbG9yOiBwcmltYXJ5LFxuICAgICAgbmFtZTogJ3ByaW1hcnknXG4gICAgfSksXG4gICAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHJlcHJlc2VudCBzZWNvbmRhcnkgaW50ZXJmYWNlIGVsZW1lbnRzIGZvciBhIHVzZXIuXG4gICAgc2Vjb25kYXJ5OiBhdWdtZW50Q29sb3Ioe1xuICAgICAgY29sb3I6IHNlY29uZGFyeSxcbiAgICAgIG5hbWU6ICdzZWNvbmRhcnknLFxuICAgICAgbWFpblNoYWRlOiAnQTQwMCcsXG4gICAgICBsaWdodFNoYWRlOiAnQTIwMCcsXG4gICAgICBkYXJrU2hhZGU6ICdBNzAwJ1xuICAgIH0pLFxuICAgIC8vIFRoZSBjb2xvcnMgdXNlZCB0byByZXByZXNlbnQgaW50ZXJmYWNlIGVsZW1lbnRzIHRoYXQgdGhlIHVzZXIgc2hvdWxkIGJlIG1hZGUgYXdhcmUgb2YuXG4gICAgZXJyb3I6IGF1Z21lbnRDb2xvcih7XG4gICAgICBjb2xvcjogZXJyb3IsXG4gICAgICBuYW1lOiAnZXJyb3InXG4gICAgfSksXG4gICAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHJlcHJlc2VudCBwb3RlbnRpYWxseSBkYW5nZXJvdXMgYWN0aW9ucyBvciBpbXBvcnRhbnQgbWVzc2FnZXMuXG4gICAgd2FybmluZzogYXVnbWVudENvbG9yKHtcbiAgICAgIGNvbG9yOiB3YXJuaW5nLFxuICAgICAgbmFtZTogJ3dhcm5pbmcnXG4gICAgfSksXG4gICAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHByZXNlbnQgaW5mb3JtYXRpb24gdG8gdGhlIHVzZXIgdGhhdCBpcyBuZXV0cmFsIGFuZCBub3QgbmVjZXNzYXJpbHkgaW1wb3J0YW50LlxuICAgIGluZm86IGF1Z21lbnRDb2xvcih7XG4gICAgICBjb2xvcjogaW5mbyxcbiAgICAgIG5hbWU6ICdpbmZvJ1xuICAgIH0pLFxuICAgIC8vIFRoZSBjb2xvcnMgdXNlZCB0byBpbmRpY2F0ZSB0aGUgc3VjY2Vzc2Z1bCBjb21wbGV0aW9uIG9mIGFuIGFjdGlvbiB0aGF0IHVzZXIgdHJpZ2dlcmVkLlxuICAgIHN1Y2Nlc3M6IGF1Z21lbnRDb2xvcih7XG4gICAgICBjb2xvcjogc3VjY2VzcyxcbiAgICAgIG5hbWU6ICdzdWNjZXNzJ1xuICAgIH0pLFxuICAgIC8vIFRoZSBncmV5IGNvbG9ycy5cbiAgICBncmV5LFxuICAgIC8vIFVzZWQgYnkgYGdldENvbnRyYXN0VGV4dCgpYCB0byBtYXhpbWl6ZSB0aGUgY29udHJhc3QgYmV0d2VlblxuICAgIC8vIHRoZSBiYWNrZ3JvdW5kIGFuZCB0aGUgdGV4dC5cbiAgICBjb250cmFzdFRocmVzaG9sZCxcbiAgICAvLyBUYWtlcyBhIGJhY2tncm91bmQgY29sb3IgYW5kIHJldHVybnMgdGhlIHRleHQgY29sb3IgdGhhdCBtYXhpbWl6ZXMgdGhlIGNvbnRyYXN0LlxuICAgIGdldENvbnRyYXN0VGV4dCxcbiAgICAvLyBHZW5lcmF0ZSBhIHJpY2ggY29sb3Igb2JqZWN0LlxuICAgIGF1Z21lbnRDb2xvcixcbiAgICAvLyBVc2VkIGJ5IHRoZSBmdW5jdGlvbnMgYmVsb3cgdG8gc2hpZnQgYSBjb2xvcidzIGx1bWluYW5jZSBieSBhcHByb3hpbWF0ZWx5XG4gICAgLy8gdHdvIGluZGV4ZXMgd2l0aGluIGl0cyB0b25hbCBwYWxldHRlLlxuICAgIC8vIEUuZy4sIHNoaWZ0IGZyb20gUmVkIDUwMCB0byBSZWQgMzAwIG9yIFJlZCA3MDAuXG4gICAgdG9uYWxPZmZzZXRcbiAgfSwgbW9kZXNbbW9kZV0pLCBvdGhlcik7XG4gIHJldHVybiBwYWxldHRlT3V0cHV0O1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJmb250RmFtaWx5XCIsIFwiZm9udFNpemVcIiwgXCJmb250V2VpZ2h0TGlnaHRcIiwgXCJmb250V2VpZ2h0UmVndWxhclwiLCBcImZvbnRXZWlnaHRNZWRpdW1cIiwgXCJmb250V2VpZ2h0Qm9sZFwiLCBcImh0bWxGb250U2l6ZVwiLCBcImFsbFZhcmlhbnRzXCIsIFwicHhUb1JlbVwiXTtcbmltcG9ydCBkZWVwbWVyZ2UgZnJvbSAnQG11aS91dGlscy9kZWVwbWVyZ2UnO1xuZnVuY3Rpb24gcm91bmQodmFsdWUpIHtcbiAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUgKiAxZTUpIC8gMWU1O1xufVxuY29uc3QgY2FzZUFsbENhcHMgPSB7XG4gIHRleHRUcmFuc2Zvcm06ICd1cHBlcmNhc2UnXG59O1xuY29uc3QgZGVmYXVsdEZvbnRGYW1pbHkgPSAnXCJSb2JvdG9cIiwgXCJIZWx2ZXRpY2FcIiwgXCJBcmlhbFwiLCBzYW5zLXNlcmlmJztcblxuLyoqXG4gKiBAc2VlIEBsaW5re2h0dHBzOi8vbTIubWF0ZXJpYWwuaW8vZGVzaWduL3R5cG9ncmFwaHkvdGhlLXR5cGUtc3lzdGVtLmh0bWx9XG4gKiBAc2VlIEBsaW5re2h0dHBzOi8vbTIubWF0ZXJpYWwuaW8vZGVzaWduL3R5cG9ncmFwaHkvdW5kZXJzdGFuZGluZy10eXBvZ3JhcGh5Lmh0bWx9XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVR5cG9ncmFwaHkocGFsZXR0ZSwgdHlwb2dyYXBoeSkge1xuICBjb25zdCBfcmVmID0gdHlwZW9mIHR5cG9ncmFwaHkgPT09ICdmdW5jdGlvbicgPyB0eXBvZ3JhcGh5KHBhbGV0dGUpIDogdHlwb2dyYXBoeSxcbiAgICB7XG4gICAgICBmb250RmFtaWx5ID0gZGVmYXVsdEZvbnRGYW1pbHksXG4gICAgICAvLyBUaGUgZGVmYXVsdCBmb250IHNpemUgb2YgdGhlIE1hdGVyaWFsIFNwZWNpZmljYXRpb24uXG4gICAgICBmb250U2l6ZSA9IDE0LFxuICAgICAgLy8gcHhcbiAgICAgIGZvbnRXZWlnaHRMaWdodCA9IDMwMCxcbiAgICAgIGZvbnRXZWlnaHRSZWd1bGFyID0gNDAwLFxuICAgICAgZm9udFdlaWdodE1lZGl1bSA9IDUwMCxcbiAgICAgIGZvbnRXZWlnaHRCb2xkID0gNzAwLFxuICAgICAgLy8gVGVsbCBNVUkgd2hhdCdzIHRoZSBmb250LXNpemUgb24gdGhlIGh0bWwgZWxlbWVudC5cbiAgICAgIC8vIDE2cHggaXMgdGhlIGRlZmF1bHQgZm9udC1zaXplIHVzZWQgYnkgYnJvd3NlcnMuXG4gICAgICBodG1sRm9udFNpemUgPSAxNixcbiAgICAgIC8vIEFwcGx5IHRoZSBDU1MgcHJvcGVydGllcyB0byBhbGwgdGhlIHZhcmlhbnRzLlxuICAgICAgYWxsVmFyaWFudHMsXG4gICAgICBweFRvUmVtOiBweFRvUmVtMlxuICAgIH0gPSBfcmVmLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgX2V4Y2x1ZGVkKTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAodHlwZW9mIGZvbnRTaXplICE9PSAnbnVtYmVyJykge1xuICAgICAgY29uc29sZS5lcnJvcignTVVJOiBgZm9udFNpemVgIGlzIHJlcXVpcmVkIHRvIGJlIGEgbnVtYmVyLicpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGh0bWxGb250U2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ01VSTogYGh0bWxGb250U2l6ZWAgaXMgcmVxdWlyZWQgdG8gYmUgYSBudW1iZXIuJyk7XG4gICAgfVxuICB9XG4gIGNvbnN0IGNvZWYgPSBmb250U2l6ZSAvIDE0O1xuICBjb25zdCBweFRvUmVtID0gcHhUb1JlbTIgfHwgKHNpemUgPT4gYCR7c2l6ZSAvIGh0bWxGb250U2l6ZSAqIGNvZWZ9cmVtYCk7XG4gIGNvbnN0IGJ1aWxkVmFyaWFudCA9IChmb250V2VpZ2h0LCBzaXplLCBsaW5lSGVpZ2h0LCBsZXR0ZXJTcGFjaW5nLCBjYXNpbmcpID0+IF9leHRlbmRzKHtcbiAgICBmb250RmFtaWx5LFxuICAgIGZvbnRXZWlnaHQsXG4gICAgZm9udFNpemU6IHB4VG9SZW0oc2l6ZSksXG4gICAgLy8gVW5pdGxlc3MgZm9sbG93aW5nIGh0dHBzOi8vbWV5ZXJ3ZWIuY29tL2VyaWMvdGhvdWdodHMvMjAwNi8wMi8wOC91bml0bGVzcy1saW5lLWhlaWdodHMvXG4gICAgbGluZUhlaWdodFxuICB9LCBmb250RmFtaWx5ID09PSBkZWZhdWx0Rm9udEZhbWlseSA/IHtcbiAgICBsZXR0ZXJTcGFjaW5nOiBgJHtyb3VuZChsZXR0ZXJTcGFjaW5nIC8gc2l6ZSl9ZW1gXG4gIH0gOiB7fSwgY2FzaW5nLCBhbGxWYXJpYW50cyk7XG4gIGNvbnN0IHZhcmlhbnRzID0ge1xuICAgIGgxOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodExpZ2h0LCA5NiwgMS4xNjcsIC0xLjUpLFxuICAgIGgyOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodExpZ2h0LCA2MCwgMS4yLCAtMC41KSxcbiAgICBoMzogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCA0OCwgMS4xNjcsIDApLFxuICAgIGg0OiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDM0LCAxLjIzNSwgMC4yNSksXG4gICAgaDU6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMjQsIDEuMzM0LCAwKSxcbiAgICBoNjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRNZWRpdW0sIDIwLCAxLjYsIDAuMTUpLFxuICAgIHN1YnRpdGxlMTogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAxNiwgMS43NSwgMC4xNSksXG4gICAgc3VidGl0bGUyOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodE1lZGl1bSwgMTQsIDEuNTcsIDAuMSksXG4gICAgYm9keTE6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMTYsIDEuNSwgMC4xNSksXG4gICAgYm9keTI6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMTQsIDEuNDMsIDAuMTUpLFxuICAgIGJ1dHRvbjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRNZWRpdW0sIDE0LCAxLjc1LCAwLjQsIGNhc2VBbGxDYXBzKSxcbiAgICBjYXB0aW9uOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDEyLCAxLjY2LCAwLjQpLFxuICAgIG92ZXJsaW5lOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDEyLCAyLjY2LCAxLCBjYXNlQWxsQ2FwcyksXG4gICAgLy8gVE9ETyB2NjogUmVtb3ZlIGhhbmRsaW5nIG9mICdpbmhlcml0JyB2YXJpYW50IGZyb20gdGhlIHRoZW1lIGFzIGl0IGlzIGFscmVhZHkgaGFuZGxlZCBpbiBNYXRlcmlhbCBVSSdzIFR5cG9ncmFwaHkgY29tcG9uZW50LiBBbHNvLCByZW1lbWJlciB0byByZW1vdmUgdGhlIGFzc29jaWF0ZWQgdHlwZXMuXG4gICAgaW5oZXJpdDoge1xuICAgICAgZm9udEZhbWlseTogJ2luaGVyaXQnLFxuICAgICAgZm9udFdlaWdodDogJ2luaGVyaXQnLFxuICAgICAgZm9udFNpemU6ICdpbmhlcml0JyxcbiAgICAgIGxpbmVIZWlnaHQ6ICdpbmhlcml0JyxcbiAgICAgIGxldHRlclNwYWNpbmc6ICdpbmhlcml0J1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGRlZXBtZXJnZShfZXh0ZW5kcyh7XG4gICAgaHRtbEZvbnRTaXplLFxuICAgIHB4VG9SZW0sXG4gICAgZm9udEZhbWlseSxcbiAgICBmb250U2l6ZSxcbiAgICBmb250V2VpZ2h0TGlnaHQsXG4gICAgZm9udFdlaWdodFJlZ3VsYXIsXG4gICAgZm9udFdlaWdodE1lZGl1bSxcbiAgICBmb250V2VpZ2h0Qm9sZFxuICB9LCB2YXJpYW50cyksIG90aGVyLCB7XG4gICAgY2xvbmU6IGZhbHNlIC8vIE5vIG5lZWQgdG8gY2xvbmUgZGVlcFxuICB9KTtcbn0iLCJjb25zdCBzaGFkb3dLZXlVbWJyYU9wYWNpdHkgPSAwLjI7XG5jb25zdCBzaGFkb3dLZXlQZW51bWJyYU9wYWNpdHkgPSAwLjE0O1xuY29uc3Qgc2hhZG93QW1iaWVudFNoYWRvd09wYWNpdHkgPSAwLjEyO1xuZnVuY3Rpb24gY3JlYXRlU2hhZG93KC4uLnB4KSB7XG4gIHJldHVybiBbYCR7cHhbMF19cHggJHtweFsxXX1weCAke3B4WzJdfXB4ICR7cHhbM119cHggcmdiYSgwLDAsMCwke3NoYWRvd0tleVVtYnJhT3BhY2l0eX0pYCwgYCR7cHhbNF19cHggJHtweFs1XX1weCAke3B4WzZdfXB4ICR7cHhbN119cHggcmdiYSgwLDAsMCwke3NoYWRvd0tleVBlbnVtYnJhT3BhY2l0eX0pYCwgYCR7cHhbOF19cHggJHtweFs5XX1weCAke3B4WzEwXX1weCAke3B4WzExXX1weCByZ2JhKDAsMCwwLCR7c2hhZG93QW1iaWVudFNoYWRvd09wYWNpdHl9KWBdLmpvaW4oJywnKTtcbn1cblxuLy8gVmFsdWVzIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL21hdGVyaWFsLWNvbXBvbmVudHMvbWF0ZXJpYWwtY29tcG9uZW50cy13ZWIvYmxvYi9iZTg3NDdmOTQ1NzQ2NjljYjVlN2FkZDFhN2M1NGZhNDFhODljZWM3L3BhY2thZ2VzL21kYy1lbGV2YXRpb24vX3ZhcmlhYmxlcy5zY3NzXG5jb25zdCBzaGFkb3dzID0gWydub25lJywgY3JlYXRlU2hhZG93KDAsIDIsIDEsIC0xLCAwLCAxLCAxLCAwLCAwLCAxLCAzLCAwKSwgY3JlYXRlU2hhZG93KDAsIDMsIDEsIC0yLCAwLCAyLCAyLCAwLCAwLCAxLCA1LCAwKSwgY3JlYXRlU2hhZG93KDAsIDMsIDMsIC0yLCAwLCAzLCA0LCAwLCAwLCAxLCA4LCAwKSwgY3JlYXRlU2hhZG93KDAsIDIsIDQsIC0xLCAwLCA0LCA1LCAwLCAwLCAxLCAxMCwgMCksIGNyZWF0ZVNoYWRvdygwLCAzLCA1LCAtMSwgMCwgNSwgOCwgMCwgMCwgMSwgMTQsIDApLCBjcmVhdGVTaGFkb3coMCwgMywgNSwgLTEsIDAsIDYsIDEwLCAwLCAwLCAxLCAxOCwgMCksIGNyZWF0ZVNoYWRvdygwLCA0LCA1LCAtMiwgMCwgNywgMTAsIDEsIDAsIDIsIDE2LCAxKSwgY3JlYXRlU2hhZG93KDAsIDUsIDUsIC0zLCAwLCA4LCAxMCwgMSwgMCwgMywgMTQsIDIpLCBjcmVhdGVTaGFkb3coMCwgNSwgNiwgLTMsIDAsIDksIDEyLCAxLCAwLCAzLCAxNiwgMiksIGNyZWF0ZVNoYWRvdygwLCA2LCA2LCAtMywgMCwgMTAsIDE0LCAxLCAwLCA0LCAxOCwgMyksIGNyZWF0ZVNoYWRvdygwLCA2LCA3LCAtNCwgMCwgMTEsIDE1LCAxLCAwLCA0LCAyMCwgMyksIGNyZWF0ZVNoYWRvdygwLCA3LCA4LCAtNCwgMCwgMTIsIDE3LCAyLCAwLCA1LCAyMiwgNCksIGNyZWF0ZVNoYWRvdygwLCA3LCA4LCAtNCwgMCwgMTMsIDE5LCAyLCAwLCA1LCAyNCwgNCksIGNyZWF0ZVNoYWRvdygwLCA3LCA5LCAtNCwgMCwgMTQsIDIxLCAyLCAwLCA1LCAyNiwgNCksIGNyZWF0ZVNoYWRvdygwLCA4LCA5LCAtNSwgMCwgMTUsIDIyLCAyLCAwLCA2LCAyOCwgNSksIGNyZWF0ZVNoYWRvdygwLCA4LCAxMCwgLTUsIDAsIDE2LCAyNCwgMiwgMCwgNiwgMzAsIDUpLCBjcmVhdGVTaGFkb3coMCwgOCwgMTEsIC01LCAwLCAxNywgMjYsIDIsIDAsIDYsIDMyLCA1KSwgY3JlYXRlU2hhZG93KDAsIDksIDExLCAtNSwgMCwgMTgsIDI4LCAyLCAwLCA3LCAzNCwgNiksIGNyZWF0ZVNoYWRvdygwLCA5LCAxMiwgLTYsIDAsIDE5LCAyOSwgMiwgMCwgNywgMzYsIDYpLCBjcmVhdGVTaGFkb3coMCwgMTAsIDEzLCAtNiwgMCwgMjAsIDMxLCAzLCAwLCA4LCAzOCwgNyksIGNyZWF0ZVNoYWRvdygwLCAxMCwgMTMsIC02LCAwLCAyMSwgMzMsIDMsIDAsIDgsIDQwLCA3KSwgY3JlYXRlU2hhZG93KDAsIDEwLCAxNCwgLTYsIDAsIDIyLCAzNSwgMywgMCwgOCwgNDIsIDcpLCBjcmVhdGVTaGFkb3coMCwgMTEsIDE0LCAtNywgMCwgMjMsIDM2LCAzLCAwLCA5LCA0NCwgOCksIGNyZWF0ZVNoYWRvdygwLCAxMSwgMTUsIC03LCAwLCAyNCwgMzgsIDMsIDAsIDksIDQ2LCA4KV07XG5leHBvcnQgZGVmYXVsdCBzaGFkb3dzOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJkdXJhdGlvblwiLCBcImVhc2luZ1wiLCBcImRlbGF5XCJdO1xuLy8gRm9sbG93IGh0dHBzOi8vbWF0ZXJpYWwuZ29vZ2xlLmNvbS9tb3Rpb24vZHVyYXRpb24tZWFzaW5nLmh0bWwjZHVyYXRpb24tZWFzaW5nLW5hdHVyYWwtZWFzaW5nLWN1cnZlc1xuLy8gdG8gbGVhcm4gdGhlIGNvbnRleHQgaW4gd2hpY2ggZWFjaCBlYXNpbmcgc2hvdWxkIGJlIHVzZWQuXG5leHBvcnQgY29uc3QgZWFzaW5nID0ge1xuICAvLyBUaGlzIGlzIHRoZSBtb3N0IGNvbW1vbiBlYXNpbmcgY3VydmUuXG4gIGVhc2VJbk91dDogJ2N1YmljLWJlemllcigwLjQsIDAsIDAuMiwgMSknLFxuICAvLyBPYmplY3RzIGVudGVyIHRoZSBzY3JlZW4gYXQgZnVsbCB2ZWxvY2l0eSBmcm9tIG9mZi1zY3JlZW4gYW5kXG4gIC8vIHNsb3dseSBkZWNlbGVyYXRlIHRvIGEgcmVzdGluZyBwb2ludC5cbiAgZWFzZU91dDogJ2N1YmljLWJlemllcigwLjAsIDAsIDAuMiwgMSknLFxuICAvLyBPYmplY3RzIGxlYXZlIHRoZSBzY3JlZW4gYXQgZnVsbCB2ZWxvY2l0eS4gVGhleSBkbyBub3QgZGVjZWxlcmF0ZSB3aGVuIG9mZi1zY3JlZW4uXG4gIGVhc2VJbjogJ2N1YmljLWJlemllcigwLjQsIDAsIDEsIDEpJyxcbiAgLy8gVGhlIHNoYXJwIGN1cnZlIGlzIHVzZWQgYnkgb2JqZWN0cyB0aGF0IG1heSByZXR1cm4gdG8gdGhlIHNjcmVlbiBhdCBhbnkgdGltZS5cbiAgc2hhcnA6ICdjdWJpYy1iZXppZXIoMC40LCAwLCAwLjYsIDEpJ1xufTtcblxuLy8gRm9sbG93IGh0dHBzOi8vbTIubWF0ZXJpYWwuaW8vZ3VpZGVsaW5lcy9tb3Rpb24vZHVyYXRpb24tZWFzaW5nLmh0bWwjZHVyYXRpb24tZWFzaW5nLWNvbW1vbi1kdXJhdGlvbnNcbi8vIHRvIGxlYXJuIHdoZW4gdXNlIHdoYXQgdGltaW5nXG5leHBvcnQgY29uc3QgZHVyYXRpb24gPSB7XG4gIHNob3J0ZXN0OiAxNTAsXG4gIHNob3J0ZXI6IDIwMCxcbiAgc2hvcnQ6IDI1MCxcbiAgLy8gbW9zdCBiYXNpYyByZWNvbW1lbmRlZCB0aW1pbmdcbiAgc3RhbmRhcmQ6IDMwMCxcbiAgLy8gdGhpcyBpcyB0byBiZSB1c2VkIGluIGNvbXBsZXggYW5pbWF0aW9uc1xuICBjb21wbGV4OiAzNzUsXG4gIC8vIHJlY29tbWVuZGVkIHdoZW4gc29tZXRoaW5nIGlzIGVudGVyaW5nIHNjcmVlblxuICBlbnRlcmluZ1NjcmVlbjogMjI1LFxuICAvLyByZWNvbW1lbmRlZCB3aGVuIHNvbWV0aGluZyBpcyBsZWF2aW5nIHNjcmVlblxuICBsZWF2aW5nU2NyZWVuOiAxOTVcbn07XG5mdW5jdGlvbiBmb3JtYXRNcyhtaWxsaXNlY29uZHMpIHtcbiAgcmV0dXJuIGAke01hdGgucm91bmQobWlsbGlzZWNvbmRzKX1tc2A7XG59XG5mdW5jdGlvbiBnZXRBdXRvSGVpZ2h0RHVyYXRpb24oaGVpZ2h0KSB7XG4gIGlmICghaGVpZ2h0KSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgY29uc3QgY29uc3RhbnQgPSBoZWlnaHQgLyAzNjtcblxuICAvLyBodHRwczovL3d3dy53b2xmcmFtYWxwaGEuY29tL2lucHV0Lz9pPSg0KyUyQisxNSsqKyh4KyUyRiszNispKyoqKzAuMjUrJTJCKyh4KyUyRiszNikrJTJGKzUpKyorMTBcbiAgcmV0dXJuIE1hdGgucm91bmQoKDQgKyAxNSAqIGNvbnN0YW50ICoqIDAuMjUgKyBjb25zdGFudCAvIDUpICogMTApO1xufVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlVHJhbnNpdGlvbnMoaW5wdXRUcmFuc2l0aW9ucykge1xuICBjb25zdCBtZXJnZWRFYXNpbmcgPSBfZXh0ZW5kcyh7fSwgZWFzaW5nLCBpbnB1dFRyYW5zaXRpb25zLmVhc2luZyk7XG4gIGNvbnN0IG1lcmdlZER1cmF0aW9uID0gX2V4dGVuZHMoe30sIGR1cmF0aW9uLCBpbnB1dFRyYW5zaXRpb25zLmR1cmF0aW9uKTtcbiAgY29uc3QgY3JlYXRlID0gKHByb3BzID0gWydhbGwnXSwgb3B0aW9ucyA9IHt9KSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgICBkdXJhdGlvbjogZHVyYXRpb25PcHRpb24gPSBtZXJnZWREdXJhdGlvbi5zdGFuZGFyZCxcbiAgICAgICAgZWFzaW5nOiBlYXNpbmdPcHRpb24gPSBtZXJnZWRFYXNpbmcuZWFzZUluT3V0LFxuICAgICAgICBkZWxheSA9IDBcbiAgICAgIH0gPSBvcHRpb25zLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShvcHRpb25zLCBfZXhjbHVkZWQpO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjb25zdCBpc1N0cmluZyA9IHZhbHVlID0+IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZyc7XG4gICAgICAvLyBJRTExIHN1cHBvcnQsIHJlcGxhY2Ugd2l0aCBOdW1iZXIuaXNOYU5cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLWdsb2JhbHNcbiAgICAgIGNvbnN0IGlzTnVtYmVyID0gdmFsdWUgPT4gIWlzTmFOKHBhcnNlRmxvYXQodmFsdWUpKTtcbiAgICAgIGlmICghaXNTdHJpbmcocHJvcHMpICYmICFBcnJheS5pc0FycmF5KHByb3BzKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdNVUk6IEFyZ3VtZW50IFwicHJvcHNcIiBtdXN0IGJlIGEgc3RyaW5nIG9yIEFycmF5LicpO1xuICAgICAgfVxuICAgICAgaWYgKCFpc051bWJlcihkdXJhdGlvbk9wdGlvbikgJiYgIWlzU3RyaW5nKGR1cmF0aW9uT3B0aW9uKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKGBNVUk6IEFyZ3VtZW50IFwiZHVyYXRpb25cIiBtdXN0IGJlIGEgbnVtYmVyIG9yIGEgc3RyaW5nIGJ1dCBmb3VuZCAke2R1cmF0aW9uT3B0aW9ufS5gKTtcbiAgICAgIH1cbiAgICAgIGlmICghaXNTdHJpbmcoZWFzaW5nT3B0aW9uKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdNVUk6IEFyZ3VtZW50IFwiZWFzaW5nXCIgbXVzdCBiZSBhIHN0cmluZy4nKTtcbiAgICAgIH1cbiAgICAgIGlmICghaXNOdW1iZXIoZGVsYXkpICYmICFpc1N0cmluZyhkZWxheSkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignTVVJOiBBcmd1bWVudCBcImRlbGF5XCIgbXVzdCBiZSBhIG51bWJlciBvciBhIHN0cmluZy4nKTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihbJ01VSTogU2Vjb25nIGFyZ3VtZW50IG9mIHRyYW5zaXRpb24uY3JlYXRlIG11c3QgYmUgYW4gb2JqZWN0LicsIFwiQXJndW1lbnRzIHNob3VsZCBiZSBlaXRoZXIgYGNyZWF0ZSgncHJvcDEnLCBvcHRpb25zKWAgb3IgYGNyZWF0ZShbJ3Byb3AxJywgJ3Byb3AyJ10sIG9wdGlvbnMpYFwiXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgICBpZiAoT2JqZWN0LmtleXMob3RoZXIpLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKGBNVUk6IFVucmVjb2duaXplZCBhcmd1bWVudChzKSBbJHtPYmplY3Qua2V5cyhvdGhlcikuam9pbignLCcpfV0uYCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAoQXJyYXkuaXNBcnJheShwcm9wcykgPyBwcm9wcyA6IFtwcm9wc10pLm1hcChhbmltYXRlZFByb3AgPT4gYCR7YW5pbWF0ZWRQcm9wfSAke3R5cGVvZiBkdXJhdGlvbk9wdGlvbiA9PT0gJ3N0cmluZycgPyBkdXJhdGlvbk9wdGlvbiA6IGZvcm1hdE1zKGR1cmF0aW9uT3B0aW9uKX0gJHtlYXNpbmdPcHRpb259ICR7dHlwZW9mIGRlbGF5ID09PSAnc3RyaW5nJyA/IGRlbGF5IDogZm9ybWF0TXMoZGVsYXkpfWApLmpvaW4oJywnKTtcbiAgfTtcbiAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICBnZXRBdXRvSGVpZ2h0RHVyYXRpb24sXG4gICAgY3JlYXRlXG4gIH0sIGlucHV0VHJhbnNpdGlvbnMsIHtcbiAgICBlYXNpbmc6IG1lcmdlZEVhc2luZyxcbiAgICBkdXJhdGlvbjogbWVyZ2VkRHVyYXRpb25cbiAgfSk7XG59IiwiLy8gV2UgbmVlZCB0byBjZW50cmFsaXplIHRoZSB6SW5kZXggZGVmaW5pdGlvbnMgYXMgdGhleSB3b3JrXG4vLyBsaWtlIGdsb2JhbCB2YWx1ZXMgaW4gdGhlIGJyb3dzZXIuXG5jb25zdCB6SW5kZXggPSB7XG4gIG1vYmlsZVN0ZXBwZXI6IDEwMDAsXG4gIGZhYjogMTA1MCxcbiAgc3BlZWREaWFsOiAxMDUwLFxuICBhcHBCYXI6IDExMDAsXG4gIGRyYXdlcjogMTIwMCxcbiAgbW9kYWw6IDEzMDAsXG4gIHNuYWNrYmFyOiAxNDAwLFxuICB0b29sdGlwOiAxNTAwXG59O1xuZXhwb3J0IGRlZmF1bHQgekluZGV4OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2Zvcm1hdE11aUVycm9yTWVzc2FnZSBmcm9tIFwiQG11aS91dGlscy9mb3JtYXRNdWlFcnJvck1lc3NhZ2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImJyZWFrcG9pbnRzXCIsIFwibWl4aW5zXCIsIFwic3BhY2luZ1wiLCBcInBhbGV0dGVcIiwgXCJ0cmFuc2l0aW9uc1wiLCBcInR5cG9ncmFwaHlcIiwgXCJzaGFwZVwiXTtcbmltcG9ydCBkZWVwbWVyZ2UgZnJvbSAnQG11aS91dGlscy9kZWVwbWVyZ2UnO1xuaW1wb3J0IHN0eWxlRnVuY3Rpb25TeCwgeyB1bnN0YWJsZV9kZWZhdWx0U3hDb25maWcgYXMgZGVmYXVsdFN4Q29uZmlnIH0gZnJvbSAnQG11aS9zeXN0ZW0vc3R5bGVGdW5jdGlvblN4JztcbmltcG9ydCBzeXN0ZW1DcmVhdGVUaGVtZSBmcm9tICdAbXVpL3N5c3RlbS9jcmVhdGVUaGVtZSc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5pbXBvcnQgY3JlYXRlTWl4aW5zIGZyb20gJy4vY3JlYXRlTWl4aW5zJztcbmltcG9ydCBjcmVhdGVQYWxldHRlIGZyb20gJy4vY3JlYXRlUGFsZXR0ZSc7XG5pbXBvcnQgY3JlYXRlVHlwb2dyYXBoeSBmcm9tICcuL2NyZWF0ZVR5cG9ncmFwaHknO1xuaW1wb3J0IHNoYWRvd3MgZnJvbSAnLi9zaGFkb3dzJztcbmltcG9ydCBjcmVhdGVUcmFuc2l0aW9ucyBmcm9tICcuL2NyZWF0ZVRyYW5zaXRpb25zJztcbmltcG9ydCB6SW5kZXggZnJvbSAnLi96SW5kZXgnO1xuZnVuY3Rpb24gY3JlYXRlVGhlbWUob3B0aW9ucyA9IHt9LCAuLi5hcmdzKSB7XG4gIGNvbnN0IHtcbiAgICAgIG1peGluczogbWl4aW5zSW5wdXQgPSB7fSxcbiAgICAgIHBhbGV0dGU6IHBhbGV0dGVJbnB1dCA9IHt9LFxuICAgICAgdHJhbnNpdGlvbnM6IHRyYW5zaXRpb25zSW5wdXQgPSB7fSxcbiAgICAgIHR5cG9ncmFwaHk6IHR5cG9ncmFwaHlJbnB1dCA9IHt9XG4gICAgfSA9IG9wdGlvbnMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShvcHRpb25zLCBfZXhjbHVkZWQpO1xuICBpZiAob3B0aW9ucy52YXJzKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGBNVUk6IFxcYHZhcnNcXGAgaXMgYSBwcml2YXRlIGZpZWxkIHVzZWQgZm9yIENTUyB2YXJpYWJsZXMgc3VwcG9ydC5cblBsZWFzZSB1c2UgYW5vdGhlciBuYW1lLmAgOiBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlKDE4KSk7XG4gIH1cbiAgY29uc3QgcGFsZXR0ZSA9IGNyZWF0ZVBhbGV0dGUocGFsZXR0ZUlucHV0KTtcbiAgY29uc3Qgc3lzdGVtVGhlbWUgPSBzeXN0ZW1DcmVhdGVUaGVtZShvcHRpb25zKTtcbiAgbGV0IG11aVRoZW1lID0gZGVlcG1lcmdlKHN5c3RlbVRoZW1lLCB7XG4gICAgbWl4aW5zOiBjcmVhdGVNaXhpbnMoc3lzdGVtVGhlbWUuYnJlYWtwb2ludHMsIG1peGluc0lucHV0KSxcbiAgICBwYWxldHRlLFxuICAgIC8vIERvbid0IHVzZSBbLi4uc2hhZG93c10gdW50aWwgeW91J3ZlIHZlcmlmaWVkIGl0cyB0cmFuc3BpbGVkIGNvZGUgaXMgbm90IGludm9raW5nIHRoZSBpdGVyYXRvciBwcm90b2NvbC5cbiAgICBzaGFkb3dzOiBzaGFkb3dzLnNsaWNlKCksXG4gICAgdHlwb2dyYXBoeTogY3JlYXRlVHlwb2dyYXBoeShwYWxldHRlLCB0eXBvZ3JhcGh5SW5wdXQpLFxuICAgIHRyYW5zaXRpb25zOiBjcmVhdGVUcmFuc2l0aW9ucyh0cmFuc2l0aW9uc0lucHV0KSxcbiAgICB6SW5kZXg6IF9leHRlbmRzKHt9LCB6SW5kZXgpXG4gIH0pO1xuICBtdWlUaGVtZSA9IGRlZXBtZXJnZShtdWlUaGVtZSwgb3RoZXIpO1xuICBtdWlUaGVtZSA9IGFyZ3MucmVkdWNlKChhY2MsIGFyZ3VtZW50KSA9PiBkZWVwbWVyZ2UoYWNjLCBhcmd1bWVudCksIG11aVRoZW1lKTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUT0RPIHY2OiBSZWZhY3RvciB0byB1c2UgZ2xvYmFsU3RhdGVDbGFzc2VzTWFwcGluZyBmcm9tIEBtdWkvdXRpbHMgb25jZSBgcmVhZE9ubHlgIHN0YXRlIGNsYXNzIGlzIHVzZWQgaW4gUmF0aW5nIGNvbXBvbmVudC5cbiAgICBjb25zdCBzdGF0ZUNsYXNzZXMgPSBbJ2FjdGl2ZScsICdjaGVja2VkJywgJ2NvbXBsZXRlZCcsICdkaXNhYmxlZCcsICdlcnJvcicsICdleHBhbmRlZCcsICdmb2N1c2VkJywgJ2ZvY3VzVmlzaWJsZScsICdyZXF1aXJlZCcsICdzZWxlY3RlZCddO1xuICAgIGNvbnN0IHRyYXZlcnNlID0gKG5vZGUsIGNvbXBvbmVudCkgPT4ge1xuICAgICAgbGV0IGtleTtcblxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGd1YXJkLWZvci1pbiwgbm8tcmVzdHJpY3RlZC1zeW50YXhcbiAgICAgIGZvciAoa2V5IGluIG5vZGUpIHtcbiAgICAgICAgY29uc3QgY2hpbGQgPSBub2RlW2tleV07XG4gICAgICAgIGlmIChzdGF0ZUNsYXNzZXMuaW5kZXhPZihrZXkpICE9PSAtMSAmJiBPYmplY3Qua2V5cyhjaGlsZCkubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICBjb25zdCBzdGF0ZUNsYXNzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJycsIGtleSk7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFtgTVVJOiBUaGUgXFxgJHtjb21wb25lbnR9XFxgIGNvbXBvbmVudCBpbmNyZWFzZXMgYCArIGB0aGUgQ1NTIHNwZWNpZmljaXR5IG9mIHRoZSBcXGAke2tleX1cXGAgaW50ZXJuYWwgc3RhdGUuYCwgJ1lvdSBjYW4gbm90IG92ZXJyaWRlIGl0IGxpa2UgdGhpczogJywgSlNPTi5zdHJpbmdpZnkobm9kZSwgbnVsbCwgMiksICcnLCBgSW5zdGVhZCwgeW91IG5lZWQgdG8gdXNlIHRoZSAnJi4ke3N0YXRlQ2xhc3N9JyBzeW50YXg6YCwgSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICByb290OiB7XG4gICAgICAgICAgICAgICAgW2AmLiR7c3RhdGVDbGFzc31gXTogY2hpbGRcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgbnVsbCwgMiksICcnLCAnaHR0cHM6Ly9tdWkuY29tL3Ivc3RhdGUtY2xhc3Nlcy1ndWlkZSddLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gUmVtb3ZlIHRoZSBzdHlsZSB0byBwcmV2ZW50IGdsb2JhbCBjb25mbGljdHMuXG4gICAgICAgICAgbm9kZVtrZXldID0ge307XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIE9iamVjdC5rZXlzKG11aVRoZW1lLmNvbXBvbmVudHMpLmZvckVhY2goY29tcG9uZW50ID0+IHtcbiAgICAgIGNvbnN0IHN0eWxlT3ZlcnJpZGVzID0gbXVpVGhlbWUuY29tcG9uZW50c1tjb21wb25lbnRdLnN0eWxlT3ZlcnJpZGVzO1xuICAgICAgaWYgKHN0eWxlT3ZlcnJpZGVzICYmIGNvbXBvbmVudC5pbmRleE9mKCdNdWknKSA9PT0gMCkge1xuICAgICAgICB0cmF2ZXJzZShzdHlsZU92ZXJyaWRlcywgY29tcG9uZW50KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBtdWlUaGVtZS51bnN0YWJsZV9zeENvbmZpZyA9IF9leHRlbmRzKHt9LCBkZWZhdWx0U3hDb25maWcsIG90aGVyID09IG51bGwgPyB2b2lkIDAgOiBvdGhlci51bnN0YWJsZV9zeENvbmZpZyk7XG4gIG11aVRoZW1lLnVuc3RhYmxlX3N4ID0gZnVuY3Rpb24gc3gocHJvcHMpIHtcbiAgICByZXR1cm4gc3R5bGVGdW5jdGlvblN4KHtcbiAgICAgIHN4OiBwcm9wcyxcbiAgICAgIHRoZW1lOiB0aGlzXG4gICAgfSk7XG4gIH07XG4gIHJldHVybiBtdWlUaGVtZTtcbn1cbmxldCB3YXJuZWRPbmNlID0gZmFsc2U7XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTXVpVGhlbWUoLi4uYXJncykge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICghd2FybmVkT25jZSkge1xuICAgICAgd2FybmVkT25jZSA9IHRydWU7XG4gICAgICBjb25zb2xlLmVycm9yKFsnTVVJOiB0aGUgY3JlYXRlTXVpVGhlbWUgZnVuY3Rpb24gd2FzIHJlbmFtZWQgdG8gY3JlYXRlVGhlbWUuJywgJycsIFwiWW91IHNob3VsZCB1c2UgYGltcG9ydCB7IGNyZWF0ZVRoZW1lIH0gZnJvbSAnQG11aS9tYXRlcmlhbC9zdHlsZXMnYFwiXS5qb2luKCdcXG4nKSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBjcmVhdGVUaGVtZSguLi5hcmdzKTtcbn1cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVRoZW1lOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IGNyZWF0ZVRoZW1lIGZyb20gJy4vY3JlYXRlVGhlbWUnO1xuY29uc3QgZGVmYXVsdFRoZW1lID0gY3JlYXRlVGhlbWUoKTtcbmV4cG9ydCBkZWZhdWx0IGRlZmF1bHRUaGVtZTsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZVRoZW1lIGFzIHVzZVRoZW1lU3lzdGVtIH0gZnJvbSAnQG11aS9zeXN0ZW0nO1xuaW1wb3J0IGRlZmF1bHRUaGVtZSBmcm9tICcuL2RlZmF1bHRUaGVtZSc7XG5pbXBvcnQgVEhFTUVfSUQgZnJvbSAnLi9pZGVudGlmaWVyJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZVRoZW1lKCkge1xuICBjb25zdCB0aGVtZSA9IHVzZVRoZW1lU3lzdGVtKGRlZmF1bHRUaGVtZSk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgUmVhY3QudXNlRGVidWdWYWx1ZSh0aGVtZSk7XG4gIH1cbiAgcmV0dXJuIHRoZW1lW1RIRU1FX0lEXSB8fCB0aGVtZTtcbn0iLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBzeXN0ZW1Vc2VUaGVtZVByb3BzIGZyb20gJ0BtdWkvc3lzdGVtL3VzZVRoZW1lUHJvcHMnO1xuaW1wb3J0IGRlZmF1bHRUaGVtZSBmcm9tICcuL2RlZmF1bHRUaGVtZSc7XG5pbXBvcnQgVEhFTUVfSUQgZnJvbSAnLi9pZGVudGlmaWVyJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZVRoZW1lUHJvcHMoe1xuICBwcm9wcyxcbiAgbmFtZVxufSkge1xuICByZXR1cm4gc3lzdGVtVXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHMsXG4gICAgbmFtZSxcbiAgICBkZWZhdWx0VGhlbWUsXG4gICAgdGhlbWVJZDogVEhFTUVfSURcbiAgfSk7XG59IiwiZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UociwgZSkge1xuICBpZiAobnVsbCA9PSByKSByZXR1cm4ge307XG4gIHZhciB0ID0ge307XG4gIGZvciAodmFyIG4gaW4gcikgaWYgKHt9Lmhhc093blByb3BlcnR5LmNhbGwociwgbikpIHtcbiAgICBpZiAoZS5pbmRleE9mKG4pID49IDApIGNvbnRpbnVlO1xuICAgIHRbbl0gPSByW25dO1xuICB9XG4gIHJldHVybiB0O1xufVxubW9kdWxlLmV4cG9ydHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBjcmVhdGVTdHlsZWQ7XG5leHBvcnRzLnNob3VsZEZvcndhcmRQcm9wID0gc2hvdWxkRm9yd2FyZFByb3A7XG5leHBvcnRzLnN5c3RlbURlZmF1bHRUaGVtZSA9IHZvaWQgMDtcbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiKSk7XG52YXIgX3N0eWxlZEVuZ2luZSA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJAbXVpL3N0eWxlZC1lbmdpbmVcIikpO1xudmFyIF9kZWVwbWVyZ2UgPSByZXF1aXJlKFwiQG11aS91dGlscy9kZWVwbWVyZ2VcIik7XG52YXIgX2NhcGl0YWxpemUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAbXVpL3V0aWxzL2NhcGl0YWxpemVcIikpO1xudmFyIF9nZXREaXNwbGF5TmFtZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBtdWkvdXRpbHMvZ2V0RGlzcGxheU5hbWVcIikpO1xudmFyIF9jcmVhdGVUaGVtZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY3JlYXRlVGhlbWVcIikpO1xudmFyIF9zdHlsZUZ1bmN0aW9uU3ggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3N0eWxlRnVuY3Rpb25TeFwiKSk7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJvd25lclN0YXRlXCJdLFxuICBfZXhjbHVkZWQyID0gW1widmFyaWFudHNcIl0sXG4gIF9leGNsdWRlZDMgPSBbXCJuYW1lXCIsIFwic2xvdFwiLCBcInNraXBWYXJpYW50c1Jlc29sdmVyXCIsIFwic2tpcFN4XCIsIFwib3ZlcnJpZGVzUmVzb2x2ZXJcIl07XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlcnNjb3JlLWRhbmdsZSAqL1xuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKGUpIHsgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgV2Vha01hcCkgcmV0dXJuIG51bGw7IHZhciByID0gbmV3IFdlYWtNYXAoKSwgdCA9IG5ldyBXZWFrTWFwKCk7IHJldHVybiAoX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGUgPyB0IDogcjsgfSkoZSk7IH1cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKGUsIHIpIHsgaWYgKCFyICYmIGUgJiYgZS5fX2VzTW9kdWxlKSByZXR1cm4gZTsgaWYgKG51bGwgPT09IGUgfHwgXCJvYmplY3RcIiAhPSB0eXBlb2YgZSAmJiBcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGUpIHJldHVybiB7IGRlZmF1bHQ6IGUgfTsgdmFyIHQgPSBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUocik7IGlmICh0ICYmIHQuaGFzKGUpKSByZXR1cm4gdC5nZXQoZSk7IHZhciBuID0geyBfX3Byb3RvX186IG51bGwgfSwgYSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciB1IGluIGUpIGlmIChcImRlZmF1bHRcIiAhPT0gdSAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSwgdSkpIHsgdmFyIGkgPSBhID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLCB1KSA6IG51bGw7IGkgJiYgKGkuZ2V0IHx8IGkuc2V0KSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLCB1LCBpKSA6IG5bdV0gPSBlW3VdOyB9IHJldHVybiBuLmRlZmF1bHQgPSBlLCB0ICYmIHQuc2V0KGUsIG4pLCBuOyB9XG5mdW5jdGlvbiBpc0VtcHR5KG9iaikge1xuICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5sZW5ndGggPT09IDA7XG59XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9lbW90aW9uLWpzL2Vtb3Rpb24vYmxvYi8yNmRlZDYxMDlmY2Q4Y2E5ODc1Y2MyY2U0NTY0ZmVlNjc4YTNmM2M1L3BhY2thZ2VzL3N0eWxlZC9zcmMvdXRpbHMuanMjTDQwXG5mdW5jdGlvbiBpc1N0cmluZ1RhZyh0YWcpIHtcbiAgcmV0dXJuIHR5cGVvZiB0YWcgPT09ICdzdHJpbmcnICYmXG4gIC8vIDk2IGlzIG9uZSBsZXNzIHRoYW4gdGhlIGNoYXIgY29kZVxuICAvLyBmb3IgXCJhXCIgc28gdGhpcyBpcyBjaGVja2luZyB0aGF0XG4gIC8vIGl0J3MgYSBsb3dlcmNhc2UgY2hhcmFjdGVyXG4gIHRhZy5jaGFyQ29kZUF0KDApID4gOTY7XG59XG5cbi8vIFVwZGF0ZSAvc3lzdGVtL3N0eWxlZC8jYXBpIGluIGNhc2UgaWYgdGhpcyBjaGFuZ2VzXG5mdW5jdGlvbiBzaG91bGRGb3J3YXJkUHJvcChwcm9wKSB7XG4gIHJldHVybiBwcm9wICE9PSAnb3duZXJTdGF0ZScgJiYgcHJvcCAhPT0gJ3RoZW1lJyAmJiBwcm9wICE9PSAnc3gnICYmIHByb3AgIT09ICdhcyc7XG59XG5jb25zdCBzeXN0ZW1EZWZhdWx0VGhlbWUgPSBleHBvcnRzLnN5c3RlbURlZmF1bHRUaGVtZSA9ICgwLCBfY3JlYXRlVGhlbWUuZGVmYXVsdCkoKTtcbmNvbnN0IGxvd2VyY2FzZUZpcnN0TGV0dGVyID0gc3RyaW5nID0+IHtcbiAgaWYgKCFzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nO1xuICB9XG4gIHJldHVybiBzdHJpbmcuY2hhckF0KDApLnRvTG93ZXJDYXNlKCkgKyBzdHJpbmcuc2xpY2UoMSk7XG59O1xuZnVuY3Rpb24gcmVzb2x2ZVRoZW1lKHtcbiAgZGVmYXVsdFRoZW1lLFxuICB0aGVtZSxcbiAgdGhlbWVJZFxufSkge1xuICByZXR1cm4gaXNFbXB0eSh0aGVtZSkgPyBkZWZhdWx0VGhlbWUgOiB0aGVtZVt0aGVtZUlkXSB8fCB0aGVtZTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRPdmVycmlkZXNSZXNvbHZlcihzbG90KSB7XG4gIGlmICghc2xvdCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzW3Nsb3RdO1xufVxuZnVuY3Rpb24gcHJvY2Vzc1N0eWxlQXJnKGNhbGxhYmxlU3R5bGUsIF9yZWYpIHtcbiAgbGV0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gX3JlZixcbiAgICBwcm9wcyA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkoX3JlZiwgX2V4Y2x1ZGVkKTtcbiAgY29uc3QgcmVzb2x2ZWRTdHlsZXNBcmcgPSB0eXBlb2YgY2FsbGFibGVTdHlsZSA9PT0gJ2Z1bmN0aW9uJyA/IGNhbGxhYmxlU3R5bGUoKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgb3duZXJTdGF0ZVxuICB9LCBwcm9wcykpIDogY2FsbGFibGVTdHlsZTtcbiAgaWYgKEFycmF5LmlzQXJyYXkocmVzb2x2ZWRTdHlsZXNBcmcpKSB7XG4gICAgcmV0dXJuIHJlc29sdmVkU3R5bGVzQXJnLmZsYXRNYXAocmVzb2x2ZWRTdHlsZSA9PiBwcm9jZXNzU3R5bGVBcmcocmVzb2x2ZWRTdHlsZSwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSwgcHJvcHMpKSk7XG4gIH1cbiAgaWYgKCEhcmVzb2x2ZWRTdHlsZXNBcmcgJiYgdHlwZW9mIHJlc29sdmVkU3R5bGVzQXJnID09PSAnb2JqZWN0JyAmJiBBcnJheS5pc0FycmF5KHJlc29sdmVkU3R5bGVzQXJnLnZhcmlhbnRzKSkge1xuICAgIGNvbnN0IHtcbiAgICAgICAgdmFyaWFudHMgPSBbXVxuICAgICAgfSA9IHJlc29sdmVkU3R5bGVzQXJnLFxuICAgICAgb3RoZXJTdHlsZXMgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyLmRlZmF1bHQpKHJlc29sdmVkU3R5bGVzQXJnLCBfZXhjbHVkZWQyKTtcbiAgICBsZXQgcmVzdWx0ID0gb3RoZXJTdHlsZXM7XG4gICAgdmFyaWFudHMuZm9yRWFjaCh2YXJpYW50ID0+IHtcbiAgICAgIGxldCBpc01hdGNoID0gdHJ1ZTtcbiAgICAgIGlmICh0eXBlb2YgdmFyaWFudC5wcm9wcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBpc01hdGNoID0gdmFyaWFudC5wcm9wcygoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgICAgICBvd25lclN0YXRlXG4gICAgICAgIH0sIHByb3BzLCBvd25lclN0YXRlKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBPYmplY3Qua2V5cyh2YXJpYW50LnByb3BzKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgICAgaWYgKChvd25lclN0YXRlID09IG51bGwgPyB2b2lkIDAgOiBvd25lclN0YXRlW2tleV0pICE9PSB2YXJpYW50LnByb3BzW2tleV0gJiYgcHJvcHNba2V5XSAhPT0gdmFyaWFudC5wcm9wc1trZXldKSB7XG4gICAgICAgICAgICBpc01hdGNoID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChpc01hdGNoKSB7XG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShyZXN1bHQpKSB7XG4gICAgICAgICAgcmVzdWx0ID0gW3Jlc3VsdF07XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0LnB1c2godHlwZW9mIHZhcmlhbnQuc3R5bGUgPT09ICdmdW5jdGlvbicgPyB2YXJpYW50LnN0eWxlKCgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgICAgIG93bmVyU3RhdGVcbiAgICAgICAgfSwgcHJvcHMsIG93bmVyU3RhdGUpKSA6IHZhcmlhbnQuc3R5bGUpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgcmV0dXJuIHJlc29sdmVkU3R5bGVzQXJnO1xufVxuZnVuY3Rpb24gY3JlYXRlU3R5bGVkKGlucHV0ID0ge30pIHtcbiAgY29uc3Qge1xuICAgIHRoZW1lSWQsXG4gICAgZGVmYXVsdFRoZW1lID0gc3lzdGVtRGVmYXVsdFRoZW1lLFxuICAgIHJvb3RTaG91bGRGb3J3YXJkUHJvcCA9IHNob3VsZEZvcndhcmRQcm9wLFxuICAgIHNsb3RTaG91bGRGb3J3YXJkUHJvcCA9IHNob3VsZEZvcndhcmRQcm9wXG4gIH0gPSBpbnB1dDtcbiAgY29uc3Qgc3lzdGVtU3ggPSBwcm9wcyA9PiB7XG4gICAgcmV0dXJuICgwLCBfc3R5bGVGdW5jdGlvblN4LmRlZmF1bHQpKCgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIHByb3BzLCB7XG4gICAgICB0aGVtZTogcmVzb2x2ZVRoZW1lKCgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIHByb3BzLCB7XG4gICAgICAgIGRlZmF1bHRUaGVtZSxcbiAgICAgICAgdGhlbWVJZFxuICAgICAgfSkpXG4gICAgfSkpO1xuICB9O1xuICBzeXN0ZW1TeC5fX211aV9zeXN0ZW1TeCA9IHRydWU7XG4gIHJldHVybiAodGFnLCBpbnB1dE9wdGlvbnMgPSB7fSkgPT4ge1xuICAgIC8vIEZpbHRlciBvdXQgdGhlIGBzeGAgc3R5bGUgZnVuY3Rpb24gZnJvbSB0aGUgcHJldmlvdXMgc3R5bGVkIGNvbXBvbmVudCB0byBwcmV2ZW50IHVubmVjZXNzYXJ5IHN0eWxlcyBnZW5lcmF0ZWQgYnkgdGhlIGNvbXBvc2l0ZSBjb21wb25lbnRzLlxuICAgICgwLCBfc3R5bGVkRW5naW5lLmludGVybmFsX3Byb2Nlc3NTdHlsZXMpKHRhZywgc3R5bGVzID0+IHN0eWxlcy5maWx0ZXIoc3R5bGUgPT4gIShzdHlsZSAhPSBudWxsICYmIHN0eWxlLl9fbXVpX3N5c3RlbVN4KSkpO1xuICAgIGNvbnN0IHtcbiAgICAgICAgbmFtZTogY29tcG9uZW50TmFtZSxcbiAgICAgICAgc2xvdDogY29tcG9uZW50U2xvdCxcbiAgICAgICAgc2tpcFZhcmlhbnRzUmVzb2x2ZXI6IGlucHV0U2tpcFZhcmlhbnRzUmVzb2x2ZXIsXG4gICAgICAgIHNraXBTeDogaW5wdXRTa2lwU3gsXG4gICAgICAgIC8vIFRPRE8gdjY6IHJlbW92ZSBgbG93ZXJjYXNlRmlyc3RMZXR0ZXIoKWAgaW4gdGhlIG5leHQgbWFqb3IgcmVsZWFzZVxuICAgICAgICAvLyBGb3IgbW9yZSBkZXRhaWxzOiBodHRwczovL2dpdGh1Yi5jb20vbXVpL21hdGVyaWFsLXVpL3B1bGwvMzc5MDhcbiAgICAgICAgb3ZlcnJpZGVzUmVzb2x2ZXIgPSBkZWZhdWx0T3ZlcnJpZGVzUmVzb2x2ZXIobG93ZXJjYXNlRmlyc3RMZXR0ZXIoY29tcG9uZW50U2xvdCkpXG4gICAgICB9ID0gaW5wdXRPcHRpb25zLFxuICAgICAgb3B0aW9ucyA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkoaW5wdXRPcHRpb25zLCBfZXhjbHVkZWQzKTtcblxuICAgIC8vIGlmIHNraXBWYXJpYW50c1Jlc29sdmVyIG9wdGlvbiBpcyBkZWZpbmVkLCB0YWtlIHRoZSB2YWx1ZSwgb3RoZXJ3aXNlLCB0cnVlIGZvciByb290IGFuZCBmYWxzZSBmb3Igb3RoZXIgc2xvdHMuXG4gICAgY29uc3Qgc2tpcFZhcmlhbnRzUmVzb2x2ZXIgPSBpbnB1dFNraXBWYXJpYW50c1Jlc29sdmVyICE9PSB1bmRlZmluZWQgPyBpbnB1dFNraXBWYXJpYW50c1Jlc29sdmVyIDpcbiAgICAvLyBUT0RPIHY2OiByZW1vdmUgYFJvb3RgIGluIHRoZSBuZXh0IG1ham9yIHJlbGVhc2VcbiAgICAvLyBGb3IgbW9yZSBkZXRhaWxzOiBodHRwczovL2dpdGh1Yi5jb20vbXVpL21hdGVyaWFsLXVpL3B1bGwvMzc5MDhcbiAgICBjb21wb25lbnRTbG90ICYmIGNvbXBvbmVudFNsb3QgIT09ICdSb290JyAmJiBjb21wb25lbnRTbG90ICE9PSAncm9vdCcgfHwgZmFsc2U7XG4gICAgY29uc3Qgc2tpcFN4ID0gaW5wdXRTa2lwU3ggfHwgZmFsc2U7XG4gICAgbGV0IGxhYmVsO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoY29tcG9uZW50TmFtZSkge1xuICAgICAgICAvLyBUT0RPIHY2OiByZW1vdmUgYGxvd2VyY2FzZUZpcnN0TGV0dGVyKClgIGluIHRoZSBuZXh0IG1ham9yIHJlbGVhc2VcbiAgICAgICAgLy8gRm9yIG1vcmUgZGV0YWlsczogaHR0cHM6Ly9naXRodWIuY29tL211aS9tYXRlcmlhbC11aS9wdWxsLzM3OTA4XG4gICAgICAgIGxhYmVsID0gYCR7Y29tcG9uZW50TmFtZX0tJHtsb3dlcmNhc2VGaXJzdExldHRlcihjb21wb25lbnRTbG90IHx8ICdSb290Jyl9YDtcbiAgICAgIH1cbiAgICB9XG4gICAgbGV0IHNob3VsZEZvcndhcmRQcm9wT3B0aW9uID0gc2hvdWxkRm9yd2FyZFByb3A7XG5cbiAgICAvLyBUT0RPIHY2OiByZW1vdmUgYFJvb3RgIGluIHRoZSBuZXh0IG1ham9yIHJlbGVhc2VcbiAgICAvLyBGb3IgbW9yZSBkZXRhaWxzOiBodHRwczovL2dpdGh1Yi5jb20vbXVpL21hdGVyaWFsLXVpL3B1bGwvMzc5MDhcbiAgICBpZiAoY29tcG9uZW50U2xvdCA9PT0gJ1Jvb3QnIHx8IGNvbXBvbmVudFNsb3QgPT09ICdyb290Jykge1xuICAgICAgc2hvdWxkRm9yd2FyZFByb3BPcHRpb24gPSByb290U2hvdWxkRm9yd2FyZFByb3A7XG4gICAgfSBlbHNlIGlmIChjb21wb25lbnRTbG90KSB7XG4gICAgICAvLyBhbnkgb3RoZXIgc2xvdCBzcGVjaWZpZWRcbiAgICAgIHNob3VsZEZvcndhcmRQcm9wT3B0aW9uID0gc2xvdFNob3VsZEZvcndhcmRQcm9wO1xuICAgIH0gZWxzZSBpZiAoaXNTdHJpbmdUYWcodGFnKSkge1xuICAgICAgLy8gZm9yIHN0cmluZyAoaHRtbCkgdGFnLCBwcmVzZXJ2ZSB0aGUgYmVoYXZpb3IgaW4gZW1vdGlvbiAmIHN0eWxlZC1jb21wb25lbnRzLlxuICAgICAgc2hvdWxkRm9yd2FyZFByb3BPcHRpb24gPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGNvbnN0IGRlZmF1bHRTdHlsZWRSZXNvbHZlciA9ICgwLCBfc3R5bGVkRW5naW5lLmRlZmF1bHQpKHRhZywgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICBzaG91bGRGb3J3YXJkUHJvcDogc2hvdWxkRm9yd2FyZFByb3BPcHRpb24sXG4gICAgICBsYWJlbFxuICAgIH0sIG9wdGlvbnMpKTtcbiAgICBjb25zdCB0cmFuc2Zvcm1TdHlsZUFyZyA9IHN0eWxlc0FyZyA9PiB7XG4gICAgICAvLyBPbiB0aGUgc2VydmVyIEVtb3Rpb24gZG9lc24ndCB1c2UgUmVhY3QuZm9yd2FyZFJlZiBmb3IgY3JlYXRpbmcgY29tcG9uZW50cywgc28gdGhlIGNyZWF0ZWRcbiAgICAgIC8vIGNvbXBvbmVudCBzdGF5cyBhcyBhIGZ1bmN0aW9uLiBUaGlzIGNvbmRpdGlvbiBtYWtlcyBzdXJlIHRoYXQgd2UgZG8gbm90IGludGVycG9sYXRlIGZ1bmN0aW9uc1xuICAgICAgLy8gd2hpY2ggYXJlIGJhc2ljYWxseSBjb21wb25lbnRzIHVzZWQgYXMgYSBzZWxlY3RvcnMuXG4gICAgICBpZiAodHlwZW9mIHN0eWxlc0FyZyA9PT0gJ2Z1bmN0aW9uJyAmJiBzdHlsZXNBcmcuX19lbW90aW9uX3JlYWwgIT09IHN0eWxlc0FyZyB8fCAoMCwgX2RlZXBtZXJnZS5pc1BsYWluT2JqZWN0KShzdHlsZXNBcmcpKSB7XG4gICAgICAgIHJldHVybiBwcm9wcyA9PiBwcm9jZXNzU3R5bGVBcmcoc3R5bGVzQXJnLCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBwcm9wcywge1xuICAgICAgICAgIHRoZW1lOiByZXNvbHZlVGhlbWUoe1xuICAgICAgICAgICAgdGhlbWU6IHByb3BzLnRoZW1lLFxuICAgICAgICAgICAgZGVmYXVsdFRoZW1lLFxuICAgICAgICAgICAgdGhlbWVJZFxuICAgICAgICAgIH0pXG4gICAgICAgIH0pKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdHlsZXNBcmc7XG4gICAgfTtcbiAgICBjb25zdCBtdWlTdHlsZWRSZXNvbHZlciA9IChzdHlsZUFyZywgLi4uZXhwcmVzc2lvbnMpID0+IHtcbiAgICAgIGxldCB0cmFuc2Zvcm1lZFN0eWxlQXJnID0gdHJhbnNmb3JtU3R5bGVBcmcoc3R5bGVBcmcpO1xuICAgICAgY29uc3QgZXhwcmVzc2lvbnNXaXRoRGVmYXVsdFRoZW1lID0gZXhwcmVzc2lvbnMgPyBleHByZXNzaW9ucy5tYXAodHJhbnNmb3JtU3R5bGVBcmcpIDogW107XG4gICAgICBpZiAoY29tcG9uZW50TmFtZSAmJiBvdmVycmlkZXNSZXNvbHZlcikge1xuICAgICAgICBleHByZXNzaW9uc1dpdGhEZWZhdWx0VGhlbWUucHVzaChwcm9wcyA9PiB7XG4gICAgICAgICAgY29uc3QgdGhlbWUgPSByZXNvbHZlVGhlbWUoKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgcHJvcHMsIHtcbiAgICAgICAgICAgIGRlZmF1bHRUaGVtZSxcbiAgICAgICAgICAgIHRoZW1lSWRcbiAgICAgICAgICB9KSk7XG4gICAgICAgICAgaWYgKCF0aGVtZS5jb21wb25lbnRzIHx8ICF0aGVtZS5jb21wb25lbnRzW2NvbXBvbmVudE5hbWVdIHx8ICF0aGVtZS5jb21wb25lbnRzW2NvbXBvbmVudE5hbWVdLnN0eWxlT3ZlcnJpZGVzKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3Qgc3R5bGVPdmVycmlkZXMgPSB0aGVtZS5jb21wb25lbnRzW2NvbXBvbmVudE5hbWVdLnN0eWxlT3ZlcnJpZGVzO1xuICAgICAgICAgIGNvbnN0IHJlc29sdmVkU3R5bGVPdmVycmlkZXMgPSB7fTtcbiAgICAgICAgICAvLyBUT0RPOiB2NyByZW1vdmUgaXRlcmF0aW9uIGFuZCB1c2UgYHJlc29sdmVTdHlsZUFyZyhzdHlsZU92ZXJyaWRlc1tzbG90XSlgIGRpcmVjdGx5XG4gICAgICAgICAgT2JqZWN0LmVudHJpZXMoc3R5bGVPdmVycmlkZXMpLmZvckVhY2goKFtzbG90S2V5LCBzbG90U3R5bGVdKSA9PiB7XG4gICAgICAgICAgICByZXNvbHZlZFN0eWxlT3ZlcnJpZGVzW3Nsb3RLZXldID0gcHJvY2Vzc1N0eWxlQXJnKHNsb3RTdHlsZSwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgcHJvcHMsIHtcbiAgICAgICAgICAgICAgdGhlbWVcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gb3ZlcnJpZGVzUmVzb2x2ZXIocHJvcHMsIHJlc29sdmVkU3R5bGVPdmVycmlkZXMpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChjb21wb25lbnROYW1lICYmICFza2lwVmFyaWFudHNSZXNvbHZlcikge1xuICAgICAgICBleHByZXNzaW9uc1dpdGhEZWZhdWx0VGhlbWUucHVzaChwcm9wcyA9PiB7XG4gICAgICAgICAgdmFyIF90aGVtZSRjb21wb25lbnRzO1xuICAgICAgICAgIGNvbnN0IHRoZW1lID0gcmVzb2x2ZVRoZW1lKCgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIHByb3BzLCB7XG4gICAgICAgICAgICBkZWZhdWx0VGhlbWUsXG4gICAgICAgICAgICB0aGVtZUlkXG4gICAgICAgICAgfSkpO1xuICAgICAgICAgIGNvbnN0IHRoZW1lVmFyaWFudHMgPSB0aGVtZSA9PSBudWxsIHx8IChfdGhlbWUkY29tcG9uZW50cyA9IHRoZW1lLmNvbXBvbmVudHMpID09IG51bGwgfHwgKF90aGVtZSRjb21wb25lbnRzID0gX3RoZW1lJGNvbXBvbmVudHNbY29tcG9uZW50TmFtZV0pID09IG51bGwgPyB2b2lkIDAgOiBfdGhlbWUkY29tcG9uZW50cy52YXJpYW50cztcbiAgICAgICAgICByZXR1cm4gcHJvY2Vzc1N0eWxlQXJnKHtcbiAgICAgICAgICAgIHZhcmlhbnRzOiB0aGVtZVZhcmlhbnRzXG4gICAgICAgICAgfSwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgcHJvcHMsIHtcbiAgICAgICAgICAgIHRoZW1lXG4gICAgICAgICAgfSkpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmICghc2tpcFN4KSB7XG4gICAgICAgIGV4cHJlc3Npb25zV2l0aERlZmF1bHRUaGVtZS5wdXNoKHN5c3RlbVN4KTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG51bU9mQ3VzdG9tRm5zQXBwbGllZCA9IGV4cHJlc3Npb25zV2l0aERlZmF1bHRUaGVtZS5sZW5ndGggLSBleHByZXNzaW9ucy5sZW5ndGg7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShzdHlsZUFyZykgJiYgbnVtT2ZDdXN0b21GbnNBcHBsaWVkID4gMCkge1xuICAgICAgICBjb25zdCBwbGFjZWhvbGRlcnMgPSBuZXcgQXJyYXkobnVtT2ZDdXN0b21GbnNBcHBsaWVkKS5maWxsKCcnKTtcbiAgICAgICAgLy8gSWYgdGhlIHR5cGUgaXMgYXJyYXksIHRoYW4gd2UgbmVlZCB0byBhZGQgcGxhY2Vob2xkZXJzIGluIHRoZSB0ZW1wbGF0ZSBmb3IgdGhlIG92ZXJyaWRlcywgdmFyaWFudHMgYW5kIHRoZSBzeCBzdHlsZXMuXG4gICAgICAgIHRyYW5zZm9ybWVkU3R5bGVBcmcgPSBbLi4uc3R5bGVBcmcsIC4uLnBsYWNlaG9sZGVyc107XG4gICAgICAgIHRyYW5zZm9ybWVkU3R5bGVBcmcucmF3ID0gWy4uLnN0eWxlQXJnLnJhdywgLi4ucGxhY2Vob2xkZXJzXTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IENvbXBvbmVudCA9IGRlZmF1bHRTdHlsZWRSZXNvbHZlcih0cmFuc2Zvcm1lZFN0eWxlQXJnLCAuLi5leHByZXNzaW9uc1dpdGhEZWZhdWx0VGhlbWUpO1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgbGV0IGRpc3BsYXlOYW1lO1xuICAgICAgICBpZiAoY29tcG9uZW50TmFtZSkge1xuICAgICAgICAgIGRpc3BsYXlOYW1lID0gYCR7Y29tcG9uZW50TmFtZX0keygwLCBfY2FwaXRhbGl6ZS5kZWZhdWx0KShjb21wb25lbnRTbG90IHx8ICcnKX1gO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkaXNwbGF5TmFtZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgZGlzcGxheU5hbWUgPSBgU3R5bGVkKCR7KDAsIF9nZXREaXNwbGF5TmFtZS5kZWZhdWx0KSh0YWcpfSlgO1xuICAgICAgICB9XG4gICAgICAgIENvbXBvbmVudC5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuICAgICAgfVxuICAgICAgaWYgKHRhZy5tdWlOYW1lKSB7XG4gICAgICAgIENvbXBvbmVudC5tdWlOYW1lID0gdGFnLm11aU5hbWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gQ29tcG9uZW50O1xuICAgIH07XG4gICAgaWYgKGRlZmF1bHRTdHlsZWRSZXNvbHZlci53aXRoQ29uZmlnKSB7XG4gICAgICBtdWlTdHlsZWRSZXNvbHZlci53aXRoQ29uZmlnID0gZGVmYXVsdFN0eWxlZFJlc29sdmVyLndpdGhDb25maWc7XG4gICAgfVxuICAgIHJldHVybiBtdWlTdHlsZWRSZXNvbHZlcjtcbiAgfTtcbn0iLCIvLyBjb3BpZWQgZnJvbSBAbXVpL3N5c3RlbS9jcmVhdGVTdHlsZWRcbmZ1bmN0aW9uIHNsb3RTaG91bGRGb3J3YXJkUHJvcChwcm9wKSB7XG4gIHJldHVybiBwcm9wICE9PSAnb3duZXJTdGF0ZScgJiYgcHJvcCAhPT0gJ3RoZW1lJyAmJiBwcm9wICE9PSAnc3gnICYmIHByb3AgIT09ICdhcyc7XG59XG5leHBvcnQgZGVmYXVsdCBzbG90U2hvdWxkRm9yd2FyZFByb3A7IiwiaW1wb3J0IHNsb3RTaG91bGRGb3J3YXJkUHJvcCBmcm9tICcuL3Nsb3RTaG91bGRGb3J3YXJkUHJvcCc7XG5jb25zdCByb290U2hvdWxkRm9yd2FyZFByb3AgPSBwcm9wID0+IHNsb3RTaG91bGRGb3J3YXJkUHJvcChwcm9wKSAmJiBwcm9wICE9PSAnY2xhc3Nlcyc7XG5leHBvcnQgZGVmYXVsdCByb290U2hvdWxkRm9yd2FyZFByb3A7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgY3JlYXRlU3R5bGVkIGZyb20gJ0BtdWkvc3lzdGVtL2NyZWF0ZVN0eWxlZCc7XG5pbXBvcnQgZGVmYXVsdFRoZW1lIGZyb20gJy4vZGVmYXVsdFRoZW1lJztcbmltcG9ydCBUSEVNRV9JRCBmcm9tICcuL2lkZW50aWZpZXInO1xuaW1wb3J0IHJvb3RTaG91bGRGb3J3YXJkUHJvcCBmcm9tICcuL3Jvb3RTaG91bGRGb3J3YXJkUHJvcCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHNsb3RTaG91bGRGb3J3YXJkUHJvcCB9IGZyb20gJy4vc2xvdFNob3VsZEZvcndhcmRQcm9wJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgcm9vdFNob3VsZEZvcndhcmRQcm9wIH0gZnJvbSAnLi9yb290U2hvdWxkRm9yd2FyZFByb3AnO1xuY29uc3Qgc3R5bGVkID0gY3JlYXRlU3R5bGVkKHtcbiAgdGhlbWVJZDogVEhFTUVfSUQsXG4gIGRlZmF1bHRUaGVtZSxcbiAgcm9vdFNob3VsZEZvcndhcmRQcm9wXG59KTtcbmV4cG9ydCBkZWZhdWx0IHN0eWxlZDsiLCIvLyBJbnNwaXJlZCBieSBodHRwczovL2dpdGh1Yi5jb20vbWF0ZXJpYWwtY29tcG9uZW50cy9tYXRlcmlhbC1jb21wb25lbnRzLWlvcy9ibG9iL2JjYTM2MTA3NDA1NTk0ZDViN2IxNjI2NWE1YjBlZDY5OGY4NWE1ZWUvY29tcG9uZW50cy9FbGV2YXRpb24vc3JjL1VJQ29sb3IlMkJNYXRlcmlhbEVsZXZhdGlvbi5tI0w2MVxuY29uc3QgZ2V0T3ZlcmxheUFscGhhID0gZWxldmF0aW9uID0+IHtcbiAgbGV0IGFscGhhVmFsdWU7XG4gIGlmIChlbGV2YXRpb24gPCAxKSB7XG4gICAgYWxwaGFWYWx1ZSA9IDUuMTE5MTYgKiBlbGV2YXRpb24gKiogMjtcbiAgfSBlbHNlIHtcbiAgICBhbHBoYVZhbHVlID0gNC41ICogTWF0aC5sb2coZWxldmF0aW9uICsgMSkgKyAyO1xuICB9XG4gIHJldHVybiAoYWxwaGFWYWx1ZSAvIDEwMCkudG9GaXhlZCgyKTtcbn07XG5leHBvcnQgZGVmYXVsdCBnZXRPdmVybGF5QWxwaGE7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRTdmdJY29uVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlTdmdJY29uJywgc2xvdCk7XG59XG5jb25zdCBzdmdJY29uQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aVN2Z0ljb24nLCBbJ3Jvb3QnLCAnY29sb3JQcmltYXJ5JywgJ2NvbG9yU2Vjb25kYXJ5JywgJ2NvbG9yQWN0aW9uJywgJ2NvbG9yRXJyb3InLCAnY29sb3JEaXNhYmxlZCcsICdmb250U2l6ZUluaGVyaXQnLCAnZm9udFNpemVTbWFsbCcsICdmb250U2l6ZU1lZGl1bScsICdmb250U2l6ZUxhcmdlJ10pO1xuZXhwb3J0IGRlZmF1bHQgc3ZnSWNvbkNsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImNvbXBvbmVudFwiLCBcImZvbnRTaXplXCIsIFwiaHRtbENvbG9yXCIsIFwiaW5oZXJpdFZpZXdCb3hcIiwgXCJ0aXRsZUFjY2Vzc1wiLCBcInZpZXdCb3hcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgeyBnZXRTdmdJY29uVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9zdmdJY29uQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNvbG9yLFxuICAgIGZvbnRTaXplLFxuICAgIGNsYXNzZXNcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIGNvbG9yICE9PSAnaW5oZXJpdCcgJiYgYGNvbG9yJHtjYXBpdGFsaXplKGNvbG9yKX1gLCBgZm9udFNpemUke2NhcGl0YWxpemUoZm9udFNpemUpfWBdXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0U3ZnSWNvblV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuY29uc3QgU3ZnSWNvblJvb3QgPSBzdHlsZWQoJ3N2ZycsIHtcbiAgbmFtZTogJ011aVN2Z0ljb24nLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgb3duZXJTdGF0ZS5jb2xvciAhPT0gJ2luaGVyaXQnICYmIHN0eWxlc1tgY29sb3Ike2NhcGl0YWxpemUob3duZXJTdGF0ZS5jb2xvcil9YF0sIHN0eWxlc1tgZm9udFNpemUke2NhcGl0YWxpemUob3duZXJTdGF0ZS5mb250U2l6ZSl9YF1dO1xuICB9XG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4ge1xuICB2YXIgX3RoZW1lJHRyYW5zaXRpb25zLCBfdGhlbWUkdHJhbnNpdGlvbnMkY3IsIF90aGVtZSR0cmFuc2l0aW9uczIsIF90aGVtZSR0eXBvZ3JhcGh5LCBfdGhlbWUkdHlwb2dyYXBoeSRweFQsIF90aGVtZSR0eXBvZ3JhcGh5MiwgX3RoZW1lJHR5cG9ncmFwaHkyJHB4LCBfdGhlbWUkdHlwb2dyYXBoeTMsIF90aGVtZSR0eXBvZ3JhcGh5MyRweCwgX3BhbGV0dGUkb3duZXJTdGF0ZSRjLCBfcGFsZXR0ZSwgX3BhbGV0dGUyLCBfcGFsZXR0ZTM7XG4gIHJldHVybiB7XG4gICAgdXNlclNlbGVjdDogJ25vbmUnLFxuICAgIHdpZHRoOiAnMWVtJyxcbiAgICBoZWlnaHQ6ICcxZW0nLFxuICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgIC8vIHRoZSA8c3ZnPiB3aWxsIGRlZmluZSB0aGUgcHJvcGVydHkgdGhhdCBoYXMgYGN1cnJlbnRDb2xvcmBcbiAgICAvLyBmb3IgZXhhbXBsZSBoZXJvaWNvbnMgdXNlcyBmaWxsPVwibm9uZVwiIGFuZCBzdHJva2U9XCJjdXJyZW50Q29sb3JcIlxuICAgIGZpbGw6IG93bmVyU3RhdGUuaGFzU3ZnQXNDaGlsZCA/IHVuZGVmaW5lZCA6ICdjdXJyZW50Q29sb3InLFxuICAgIGZsZXhTaHJpbms6IDAsXG4gICAgdHJhbnNpdGlvbjogKF90aGVtZSR0cmFuc2l0aW9ucyA9IHRoZW1lLnRyYW5zaXRpb25zKSA9PSBudWxsIHx8IChfdGhlbWUkdHJhbnNpdGlvbnMkY3IgPSBfdGhlbWUkdHJhbnNpdGlvbnMuY3JlYXRlKSA9PSBudWxsID8gdm9pZCAwIDogX3RoZW1lJHRyYW5zaXRpb25zJGNyLmNhbGwoX3RoZW1lJHRyYW5zaXRpb25zLCAnZmlsbCcsIHtcbiAgICAgIGR1cmF0aW9uOiAoX3RoZW1lJHRyYW5zaXRpb25zMiA9IHRoZW1lLnRyYW5zaXRpb25zKSA9PSBudWxsIHx8IChfdGhlbWUkdHJhbnNpdGlvbnMyID0gX3RoZW1lJHRyYW5zaXRpb25zMi5kdXJhdGlvbikgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGVtZSR0cmFuc2l0aW9uczIuc2hvcnRlclxuICAgIH0pLFxuICAgIGZvbnRTaXplOiB7XG4gICAgICBpbmhlcml0OiAnaW5oZXJpdCcsXG4gICAgICBzbWFsbDogKChfdGhlbWUkdHlwb2dyYXBoeSA9IHRoZW1lLnR5cG9ncmFwaHkpID09IG51bGwgfHwgKF90aGVtZSR0eXBvZ3JhcGh5JHB4VCA9IF90aGVtZSR0eXBvZ3JhcGh5LnB4VG9SZW0pID09IG51bGwgPyB2b2lkIDAgOiBfdGhlbWUkdHlwb2dyYXBoeSRweFQuY2FsbChfdGhlbWUkdHlwb2dyYXBoeSwgMjApKSB8fCAnMS4yNXJlbScsXG4gICAgICBtZWRpdW06ICgoX3RoZW1lJHR5cG9ncmFwaHkyID0gdGhlbWUudHlwb2dyYXBoeSkgPT0gbnVsbCB8fCAoX3RoZW1lJHR5cG9ncmFwaHkyJHB4ID0gX3RoZW1lJHR5cG9ncmFwaHkyLnB4VG9SZW0pID09IG51bGwgPyB2b2lkIDAgOiBfdGhlbWUkdHlwb2dyYXBoeTIkcHguY2FsbChfdGhlbWUkdHlwb2dyYXBoeTIsIDI0KSkgfHwgJzEuNXJlbScsXG4gICAgICBsYXJnZTogKChfdGhlbWUkdHlwb2dyYXBoeTMgPSB0aGVtZS50eXBvZ3JhcGh5KSA9PSBudWxsIHx8IChfdGhlbWUkdHlwb2dyYXBoeTMkcHggPSBfdGhlbWUkdHlwb2dyYXBoeTMucHhUb1JlbSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGVtZSR0eXBvZ3JhcGh5MyRweC5jYWxsKF90aGVtZSR0eXBvZ3JhcGh5MywgMzUpKSB8fCAnMi4xODc1cmVtJ1xuICAgIH1bb3duZXJTdGF0ZS5mb250U2l6ZV0sXG4gICAgLy8gVE9ETyB2NSBkZXByZWNhdGUsIHY2IHJlbW92ZSBmb3Igc3hcbiAgICBjb2xvcjogKF9wYWxldHRlJG93bmVyU3RhdGUkYyA9IChfcGFsZXR0ZSA9ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlKSA9PSBudWxsIHx8IChfcGFsZXR0ZSA9IF9wYWxldHRlW293bmVyU3RhdGUuY29sb3JdKSA9PSBudWxsID8gdm9pZCAwIDogX3BhbGV0dGUubWFpbikgIT0gbnVsbCA/IF9wYWxldHRlJG93bmVyU3RhdGUkYyA6IHtcbiAgICAgIGFjdGlvbjogKF9wYWxldHRlMiA9ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlKSA9PSBudWxsIHx8IChfcGFsZXR0ZTIgPSBfcGFsZXR0ZTIuYWN0aW9uKSA9PSBudWxsID8gdm9pZCAwIDogX3BhbGV0dGUyLmFjdGl2ZSxcbiAgICAgIGRpc2FibGVkOiAoX3BhbGV0dGUzID0gKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUpID09IG51bGwgfHwgKF9wYWxldHRlMyA9IF9wYWxldHRlMy5hY3Rpb24pID09IG51bGwgPyB2b2lkIDAgOiBfcGFsZXR0ZTMuZGlzYWJsZWQsXG4gICAgICBpbmhlcml0OiB1bmRlZmluZWRcbiAgICB9W293bmVyU3RhdGUuY29sb3JdXG4gIH07XG59KTtcbmNvbnN0IFN2Z0ljb24gPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBTdmdJY29uKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlTdmdJY29uJ1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUsXG4gICAgICBjb2xvciA9ICdpbmhlcml0JyxcbiAgICAgIGNvbXBvbmVudCA9ICdzdmcnLFxuICAgICAgZm9udFNpemUgPSAnbWVkaXVtJyxcbiAgICAgIGh0bWxDb2xvcixcbiAgICAgIGluaGVyaXRWaWV3Qm94ID0gZmFsc2UsXG4gICAgICB0aXRsZUFjY2VzcyxcbiAgICAgIHZpZXdCb3ggPSAnMCAwIDI0IDI0J1xuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBoYXNTdmdBc0NoaWxkID0gLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkcmVuKSAmJiBjaGlsZHJlbi50eXBlID09PSAnc3ZnJztcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGNvbG9yLFxuICAgIGNvbXBvbmVudCxcbiAgICBmb250U2l6ZSxcbiAgICBpbnN0YW5jZUZvbnRTaXplOiBpblByb3BzLmZvbnRTaXplLFxuICAgIGluaGVyaXRWaWV3Qm94LFxuICAgIHZpZXdCb3gsXG4gICAgaGFzU3ZnQXNDaGlsZFxuICB9KTtcbiAgY29uc3QgbW9yZSA9IHt9O1xuICBpZiAoIWluaGVyaXRWaWV3Qm94KSB7XG4gICAgbW9yZS52aWV3Qm94ID0gdmlld0JveDtcbiAgfVxuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeHMoU3ZnSWNvblJvb3QsIF9leHRlbmRzKHtcbiAgICBhczogY29tcG9uZW50LFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgZm9jdXNhYmxlOiBcImZhbHNlXCIsXG4gICAgY29sb3I6IGh0bWxDb2xvcixcbiAgICBcImFyaWEtaGlkZGVuXCI6IHRpdGxlQWNjZXNzID8gdW5kZWZpbmVkIDogdHJ1ZSxcbiAgICByb2xlOiB0aXRsZUFjY2VzcyA/ICdpbWcnIDogdW5kZWZpbmVkLFxuICAgIHJlZjogcmVmXG4gIH0sIG1vcmUsIG90aGVyLCBoYXNTdmdBc0NoaWxkICYmIGNoaWxkcmVuLnByb3BzLCB7XG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICBjaGlsZHJlbjogW2hhc1N2Z0FzQ2hpbGQgPyBjaGlsZHJlbi5wcm9wcy5jaGlsZHJlbiA6IGNoaWxkcmVuLCB0aXRsZUFjY2VzcyA/IC8qI19fUFVSRV9fKi9fanN4KFwidGl0bGVcIiwge1xuICAgICAgY2hpbGRyZW46IHRpdGxlQWNjZXNzXG4gICAgfSkgOiBudWxsXVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFN2Z0ljb24ucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogTm9kZSBwYXNzZWQgaW50byB0aGUgU1ZHIGVsZW1lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIEl0IHN1cHBvcnRzIGJvdGggZGVmYXVsdCBhbmQgY3VzdG9tIHRoZW1lIGNvbG9ycywgd2hpY2ggY2FuIGJlIGFkZGVkIGFzIHNob3duIGluIHRoZVxuICAgKiBbcGFsZXR0ZSBjdXN0b21pemF0aW9uIGd1aWRlXShodHRwczovL211aS5jb20vbWF0ZXJpYWwtdWkvY3VzdG9taXphdGlvbi9wYWxldHRlLyNjdXN0b20tY29sb3JzKS5cbiAgICogWW91IGNhbiB1c2UgdGhlIGBodG1sQ29sb3JgIHByb3AgdG8gYXBwbHkgYSBjb2xvciBhdHRyaWJ1dGUgdG8gdGhlIFNWRyBlbGVtZW50LlxuICAgKiBAZGVmYXVsdCAnaW5oZXJpdCdcbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2luaGVyaXQnLCAnYWN0aW9uJywgJ2Rpc2FibGVkJywgJ3ByaW1hcnknLCAnc2Vjb25kYXJ5JywgJ2Vycm9yJywgJ2luZm8nLCAnc3VjY2VzcycsICd3YXJuaW5nJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgLyoqXG4gICAqIFRoZSBmb250U2l6ZSBhcHBsaWVkIHRvIHRoZSBpY29uLiBEZWZhdWx0cyB0byAyNHB4LCBidXQgY2FuIGJlIGNvbmZpZ3VyZSB0byBpbmhlcml0IGZvbnQgc2l6ZS5cbiAgICogQGRlZmF1bHQgJ21lZGl1bSdcbiAgICovXG4gIGZvbnRTaXplOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2luaGVyaXQnLCAnbGFyZ2UnLCAnbWVkaXVtJywgJ3NtYWxsJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBBcHBsaWVzIGEgY29sb3IgYXR0cmlidXRlIHRvIHRoZSBTVkcgZWxlbWVudC5cbiAgICovXG4gIGh0bWxDb2xvcjogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHJvb3Qgbm9kZSB3aWxsIGluaGVyaXQgdGhlIGN1c3RvbSBgY29tcG9uZW50YCdzIHZpZXdCb3ggYW5kIHRoZSBgdmlld0JveGBcbiAgICogcHJvcCB3aWxsIGJlIGlnbm9yZWQuXG4gICAqIFVzZWZ1bCB3aGVuIHlvdSB3YW50IHRvIHJlZmVyZW5jZSBhIGN1c3RvbSBgY29tcG9uZW50YCBhbmQgaGF2ZSBgU3ZnSWNvbmAgcGFzcyB0aGF0XG4gICAqIGBjb21wb25lbnRgJ3Mgdmlld0JveCB0byB0aGUgcm9vdCBub2RlLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgaW5oZXJpdFZpZXdCb3g6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIHNoYXBlLXJlbmRlcmluZyBhdHRyaWJ1dGUuIFRoZSBiZWhhdmlvciBvZiB0aGUgZGlmZmVyZW50IG9wdGlvbnMgaXMgZGVzY3JpYmVkIG9uIHRoZVxuICAgKiBbTUROIFdlYiBEb2NzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9TVkcvQXR0cmlidXRlL3NoYXBlLXJlbmRlcmluZykuXG4gICAqIElmIHlvdSBhcmUgaGF2aW5nIGlzc3VlcyB3aXRoIGJsdXJyeSBpY29ucyB5b3Ugc2hvdWxkIGludmVzdGlnYXRlIHRoaXMgcHJvcC5cbiAgICovXG4gIHNoYXBlUmVuZGVyaW5nOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogUHJvdmlkZXMgYSBodW1hbi1yZWFkYWJsZSB0aXRsZSBmb3IgdGhlIGVsZW1lbnQgdGhhdCBjb250YWlucyBpdC5cbiAgICogaHR0cHM6Ly93d3cudzMub3JnL1RSL1NWRy1hY2Nlc3MvI0VxdWl2YWxlbnRcbiAgICovXG4gIHRpdGxlQWNjZXNzOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogQWxsb3dzIHlvdSB0byByZWRlZmluZSB3aGF0IHRoZSBjb29yZGluYXRlcyB3aXRob3V0IHVuaXRzIG1lYW4gaW5zaWRlIGFuIFNWRyBlbGVtZW50LlxuICAgKiBGb3IgZXhhbXBsZSwgaWYgdGhlIFNWRyBlbGVtZW50IGlzIDUwMCAod2lkdGgpIGJ5IDIwMCAoaGVpZ2h0KSxcbiAgICogYW5kIHlvdSBwYXNzIHZpZXdCb3g9XCIwIDAgNTAgMjBcIixcbiAgICogdGhpcyBtZWFucyB0aGF0IHRoZSBjb29yZGluYXRlcyBpbnNpZGUgdGhlIFNWRyB3aWxsIGdvIGZyb20gdGhlIHRvcCBsZWZ0IGNvcm5lciAoMCwwKVxuICAgKiB0byBib3R0b20gcmlnaHQgKDUwLDIwKSBhbmQgZWFjaCB1bml0IHdpbGwgYmUgd29ydGggMTBweC5cbiAgICogQGRlZmF1bHQgJzAgMCAyNCAyNCdcbiAgICovXG4gIHZpZXdCb3g6IFByb3BUeXBlcy5zdHJpbmdcbn0gOiB2b2lkIDA7XG5TdmdJY29uLm11aU5hbWUgPSAnU3ZnSWNvbic7XG5leHBvcnQgZGVmYXVsdCBTdmdJY29uOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgU3ZnSWNvbiBmcm9tICcuLi9TdmdJY29uJztcblxuLyoqXG4gKiBQcml2YXRlIG1vZHVsZSByZXNlcnZlZCBmb3IgQG11aSBwYWNrYWdlcy5cbiAqL1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVN2Z0ljb24ocGF0aCwgZGlzcGxheU5hbWUpIHtcbiAgZnVuY3Rpb24gQ29tcG9uZW50KHByb3BzLCByZWYpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL19qc3goU3ZnSWNvbiwgX2V4dGVuZHMoe1xuICAgICAgXCJkYXRhLXRlc3RpZFwiOiBgJHtkaXNwbGF5TmFtZX1JY29uYCxcbiAgICAgIHJlZjogcmVmXG4gICAgfSwgcHJvcHMsIHtcbiAgICAgIGNoaWxkcmVuOiBwYXRoXG4gICAgfSkpO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gTmVlZCB0byBzZXQgYGRpc3BsYXlOYW1lYCBvbiB0aGUgaW5uZXIgY29tcG9uZW50IGZvciBSZWFjdC5tZW1vLlxuICAgIC8vIFJlYWN0IHByaW9yIHRvIDE2LjE0IGlnbm9yZXMgYGRpc3BsYXlOYW1lYCBvbiB0aGUgd3JhcHBlci5cbiAgICBDb21wb25lbnQuZGlzcGxheU5hbWUgPSBgJHtkaXNwbGF5TmFtZX1JY29uYDtcbiAgfVxuICBDb21wb25lbnQubXVpTmFtZSA9IFN2Z0ljb24ubXVpTmFtZTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5tZW1vKCAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihDb21wb25lbnQpKTtcbn0iLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCB7IHVuc3RhYmxlX0NsYXNzTmFtZUdlbmVyYXRvciBhcyBDbGFzc05hbWVHZW5lcmF0b3IgfSBmcm9tICdAbXVpL2Jhc2UvQ2xhc3NOYW1lR2VuZXJhdG9yJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgY2FwaXRhbGl6ZSB9IGZyb20gJy4vY2FwaXRhbGl6ZSc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGNyZWF0ZUNoYWluZWRGdW5jdGlvbiB9IGZyb20gJy4vY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgY3JlYXRlU3ZnSWNvbiB9IGZyb20gJy4vY3JlYXRlU3ZnSWNvbic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGRlYm91bmNlIH0gZnJvbSAnLi9kZWJvdW5jZSc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGRlcHJlY2F0ZWRQcm9wVHlwZSB9IGZyb20gJy4vZGVwcmVjYXRlZFByb3BUeXBlJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgaXNNdWlFbGVtZW50IH0gZnJvbSAnLi9pc011aUVsZW1lbnQnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBvd25lckRvY3VtZW50IH0gZnJvbSAnLi9vd25lckRvY3VtZW50JztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgb3duZXJXaW5kb3cgfSBmcm9tICcuL293bmVyV2luZG93JztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgcmVxdWlyZVByb3BGYWN0b3J5IH0gZnJvbSAnLi9yZXF1aXJlUHJvcEZhY3RvcnknO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBzZXRSZWYgfSBmcm9tICcuL3NldFJlZic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHVuc3RhYmxlX3VzZUVuaGFuY2VkRWZmZWN0IH0gZnJvbSAnLi91c2VFbmhhbmNlZEVmZmVjdCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHVuc3RhYmxlX3VzZUlkIH0gZnJvbSAnLi91c2VJZCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHVuc3VwcG9ydGVkUHJvcCB9IGZyb20gJy4vdW5zdXBwb3J0ZWRQcm9wJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdXNlQ29udHJvbGxlZCB9IGZyb20gJy4vdXNlQ29udHJvbGxlZCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHVzZUV2ZW50Q2FsbGJhY2sgfSBmcm9tICcuL3VzZUV2ZW50Q2FsbGJhY2snO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB1c2VGb3JrUmVmIH0gZnJvbSAnLi91c2VGb3JrUmVmJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdXNlSXNGb2N1c1Zpc2libGUgfSBmcm9tICcuL3VzZUlzRm9jdXNWaXNpYmxlJztcbi8vIFRPRE86IHJlbW92ZSB0aGlzIGV4cG9ydCBvbmNlIENsYXNzTmFtZUdlbmVyYXRvciBpcyBzdGFibGVcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cbmV4cG9ydCBjb25zdCB1bnN0YWJsZV9DbGFzc05hbWVHZW5lcmF0b3IgPSB7XG4gIGNvbmZpZ3VyZTogZ2VuZXJhdG9yID0+IHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY29uc29sZS53YXJuKFsnTVVJOiBgQ2xhc3NOYW1lR2VuZXJhdG9yYCBpbXBvcnQgZnJvbSBgQG11aS9tYXRlcmlhbC91dGlsc2AgaXMgb3V0ZGF0ZWQgYW5kIG1pZ2h0IGNhdXNlIHVuZXhwZWN0ZWQgaXNzdWVzLicsICcnLCBcIllvdSBzaG91bGQgdXNlIGBpbXBvcnQgeyB1bnN0YWJsZV9DbGFzc05hbWVHZW5lcmF0b3IgfSBmcm9tICdAbXVpL21hdGVyaWFsL2NsYXNzTmFtZSdgIGluc3RlYWRcIiwgJycsICdUaGUgZGV0YWlsIG9mIHRoZSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL211aS9tYXRlcmlhbC11aS9pc3N1ZXMvMzAwMTEjaXNzdWVjb21tZW50LTEwMjQ5OTM0MDEnLCAnJywgJ1RoZSB1cGRhdGVkIGRvY3VtZW50YXRpb246IGh0dHBzOi8vbXVpLmNvbS9ndWlkZXMvY2xhc3NuYW1lLWdlbmVyYXRvci8nXS5qb2luKCdcXG4nKSk7XG4gICAgfVxuICAgIENsYXNzTmFtZUdlbmVyYXRvci5jb25maWd1cmUoZ2VuZXJhdG9yKTtcbiAgfVxufTsiLCJpbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHN0eWxlZCB9IGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVXNlVGhlbWVQcm9wcyhuYW1lKSB7XG4gIHJldHVybiB1c2VUaGVtZVByb3BzO1xufSIsImZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZih0LCBlKSB7XG4gIHJldHVybiBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gKHQsIGUpIHtcbiAgICByZXR1cm4gdC5fX3Byb3RvX18gPSBlLCB0O1xuICB9LCBfc2V0UHJvdG90eXBlT2YodCwgZSk7XG59XG5leHBvcnQgeyBfc2V0UHJvdG90eXBlT2YgYXMgZGVmYXVsdCB9OyIsImltcG9ydCBzZXRQcm90b3R5cGVPZiBmcm9tIFwiLi9zZXRQcm90b3R5cGVPZi5qc1wiO1xuZnVuY3Rpb24gX2luaGVyaXRzTG9vc2UodCwgbykge1xuICB0LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoby5wcm90b3R5cGUpLCB0LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHQsIHNldFByb3RvdHlwZU9mKHQsIG8pO1xufVxuZXhwb3J0IHsgX2luaGVyaXRzTG9vc2UgYXMgZGVmYXVsdCB9OyIsImV4cG9ydCBkZWZhdWx0IHtcbiAgZGlzYWJsZWQ6IGZhbHNlXG59OyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5leHBvcnQgZGVmYXVsdCBSZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpOyIsImV4cG9ydCB2YXIgZm9yY2VSZWZsb3cgPSBmdW5jdGlvbiBmb3JjZVJlZmxvdyhub2RlKSB7XG4gIHJldHVybiBub2RlLnNjcm9sbFRvcDtcbn07IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgY29uZmlnIGZyb20gJy4vY29uZmlnJztcbmltcG9ydCB7IHRpbWVvdXRzU2hhcGUgfSBmcm9tICcuL3V0aWxzL1Byb3BUeXBlcyc7XG5pbXBvcnQgVHJhbnNpdGlvbkdyb3VwQ29udGV4dCBmcm9tICcuL1RyYW5zaXRpb25Hcm91cENvbnRleHQnO1xuaW1wb3J0IHsgZm9yY2VSZWZsb3cgfSBmcm9tICcuL3V0aWxzL3JlZmxvdyc7XG5leHBvcnQgdmFyIFVOTU9VTlRFRCA9ICd1bm1vdW50ZWQnO1xuZXhwb3J0IHZhciBFWElURUQgPSAnZXhpdGVkJztcbmV4cG9ydCB2YXIgRU5URVJJTkcgPSAnZW50ZXJpbmcnO1xuZXhwb3J0IHZhciBFTlRFUkVEID0gJ2VudGVyZWQnO1xuZXhwb3J0IHZhciBFWElUSU5HID0gJ2V4aXRpbmcnO1xuLyoqXG4gKiBUaGUgVHJhbnNpdGlvbiBjb21wb25lbnQgbGV0cyB5b3UgZGVzY3JpYmUgYSB0cmFuc2l0aW9uIGZyb20gb25lIGNvbXBvbmVudFxuICogc3RhdGUgdG8gYW5vdGhlciBfb3ZlciB0aW1lXyB3aXRoIGEgc2ltcGxlIGRlY2xhcmF0aXZlIEFQSS4gTW9zdCBjb21tb25seVxuICogaXQncyB1c2VkIHRvIGFuaW1hdGUgdGhlIG1vdW50aW5nIGFuZCB1bm1vdW50aW5nIG9mIGEgY29tcG9uZW50LCBidXQgY2FuIGFsc29cbiAqIGJlIHVzZWQgdG8gZGVzY3JpYmUgaW4tcGxhY2UgdHJhbnNpdGlvbiBzdGF0ZXMgYXMgd2VsbC5cbiAqXG4gKiAtLS1cbiAqXG4gKiAqKk5vdGUqKjogYFRyYW5zaXRpb25gIGlzIGEgcGxhdGZvcm0tYWdub3N0aWMgYmFzZSBjb21wb25lbnQuIElmIHlvdSdyZSB1c2luZ1xuICogdHJhbnNpdGlvbnMgaW4gQ1NTLCB5b3UnbGwgcHJvYmFibHkgd2FudCB0byB1c2VcbiAqIFtgQ1NTVHJhbnNpdGlvbmBdKGh0dHBzOi8vcmVhY3Rjb21tdW5pdHkub3JnL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvY3NzLXRyYW5zaXRpb24pXG4gKiBpbnN0ZWFkLiBJdCBpbmhlcml0cyBhbGwgdGhlIGZlYXR1cmVzIG9mIGBUcmFuc2l0aW9uYCwgYnV0IGNvbnRhaW5zXG4gKiBhZGRpdGlvbmFsIGZlYXR1cmVzIG5lY2Vzc2FyeSB0byBwbGF5IG5pY2Ugd2l0aCBDU1MgdHJhbnNpdGlvbnMgKGhlbmNlIHRoZVxuICogbmFtZSBvZiB0aGUgY29tcG9uZW50KS5cbiAqXG4gKiAtLS1cbiAqXG4gKiBCeSBkZWZhdWx0IHRoZSBgVHJhbnNpdGlvbmAgY29tcG9uZW50IGRvZXMgbm90IGFsdGVyIHRoZSBiZWhhdmlvciBvZiB0aGVcbiAqIGNvbXBvbmVudCBpdCByZW5kZXJzLCBpdCBvbmx5IHRyYWNrcyBcImVudGVyXCIgYW5kIFwiZXhpdFwiIHN0YXRlcyBmb3IgdGhlXG4gKiBjb21wb25lbnRzLiBJdCdzIHVwIHRvIHlvdSB0byBnaXZlIG1lYW5pbmcgYW5kIGVmZmVjdCB0byB0aG9zZSBzdGF0ZXMuIEZvclxuICogZXhhbXBsZSB3ZSBjYW4gYWRkIHN0eWxlcyB0byBhIGNvbXBvbmVudCB3aGVuIGl0IGVudGVycyBvciBleGl0czpcbiAqXG4gKiBgYGBqc3hcbiAqIGltcG9ydCB7IFRyYW5zaXRpb24gfSBmcm9tICdyZWFjdC10cmFuc2l0aW9uLWdyb3VwJztcbiAqXG4gKiBjb25zdCBkdXJhdGlvbiA9IDMwMDtcbiAqXG4gKiBjb25zdCBkZWZhdWx0U3R5bGUgPSB7XG4gKiAgIHRyYW5zaXRpb246IGBvcGFjaXR5ICR7ZHVyYXRpb259bXMgZWFzZS1pbi1vdXRgLFxuICogICBvcGFjaXR5OiAwLFxuICogfVxuICpcbiAqIGNvbnN0IHRyYW5zaXRpb25TdHlsZXMgPSB7XG4gKiAgIGVudGVyaW5nOiB7IG9wYWNpdHk6IDEgfSxcbiAqICAgZW50ZXJlZDogIHsgb3BhY2l0eTogMSB9LFxuICogICBleGl0aW5nOiAgeyBvcGFjaXR5OiAwIH0sXG4gKiAgIGV4aXRlZDogIHsgb3BhY2l0eTogMCB9LFxuICogfTtcbiAqXG4gKiBjb25zdCBGYWRlID0gKHsgaW46IGluUHJvcCB9KSA9PiAoXG4gKiAgIDxUcmFuc2l0aW9uIGluPXtpblByb3B9IHRpbWVvdXQ9e2R1cmF0aW9ufT5cbiAqICAgICB7c3RhdGUgPT4gKFxuICogICAgICAgPGRpdiBzdHlsZT17e1xuICogICAgICAgICAuLi5kZWZhdWx0U3R5bGUsXG4gKiAgICAgICAgIC4uLnRyYW5zaXRpb25TdHlsZXNbc3RhdGVdXG4gKiAgICAgICB9fT5cbiAqICAgICAgICAgSSdtIGEgZmFkZSBUcmFuc2l0aW9uIVxuICogICAgICAgPC9kaXY+XG4gKiAgICAgKX1cbiAqICAgPC9UcmFuc2l0aW9uPlxuICogKTtcbiAqIGBgYFxuICpcbiAqIFRoZXJlIGFyZSA0IG1haW4gc3RhdGVzIGEgVHJhbnNpdGlvbiBjYW4gYmUgaW46XG4gKiAgLSBgJ2VudGVyaW5nJ2BcbiAqICAtIGAnZW50ZXJlZCdgXG4gKiAgLSBgJ2V4aXRpbmcnYFxuICogIC0gYCdleGl0ZWQnYFxuICpcbiAqIFRyYW5zaXRpb24gc3RhdGUgaXMgdG9nZ2xlZCB2aWEgdGhlIGBpbmAgcHJvcC4gV2hlbiBgdHJ1ZWAgdGhlIGNvbXBvbmVudFxuICogYmVnaW5zIHRoZSBcIkVudGVyXCIgc3RhZ2UuIER1cmluZyB0aGlzIHN0YWdlLCB0aGUgY29tcG9uZW50IHdpbGwgc2hpZnQgZnJvbVxuICogaXRzIGN1cnJlbnQgdHJhbnNpdGlvbiBzdGF0ZSwgdG8gYCdlbnRlcmluZydgIGZvciB0aGUgZHVyYXRpb24gb2YgdGhlXG4gKiB0cmFuc2l0aW9uIGFuZCB0aGVuIHRvIHRoZSBgJ2VudGVyZWQnYCBzdGFnZSBvbmNlIGl0J3MgY29tcGxldGUuIExldCdzIHRha2VcbiAqIHRoZSBmb2xsb3dpbmcgZXhhbXBsZSAod2UnbGwgdXNlIHRoZVxuICogW3VzZVN0YXRlXShodHRwczovL3JlYWN0anMub3JnL2RvY3MvaG9va3MtcmVmZXJlbmNlLmh0bWwjdXNlc3RhdGUpIGhvb2spOlxuICpcbiAqIGBgYGpzeFxuICogZnVuY3Rpb24gQXBwKCkge1xuICogICBjb25zdCBbaW5Qcm9wLCBzZXRJblByb3BdID0gdXNlU3RhdGUoZmFsc2UpO1xuICogICByZXR1cm4gKFxuICogICAgIDxkaXY+XG4gKiAgICAgICA8VHJhbnNpdGlvbiBpbj17aW5Qcm9wfSB0aW1lb3V0PXs1MDB9PlxuICogICAgICAgICB7c3RhdGUgPT4gKFxuICogICAgICAgICAgIC8vIC4uLlxuICogICAgICAgICApfVxuICogICAgICAgPC9UcmFuc2l0aW9uPlxuICogICAgICAgPGJ1dHRvbiBvbkNsaWNrPXsoKSA9PiBzZXRJblByb3AodHJ1ZSl9PlxuICogICAgICAgICBDbGljayB0byBFbnRlclxuICogICAgICAgPC9idXR0b24+XG4gKiAgICAgPC9kaXY+XG4gKiAgICk7XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBXaGVuIHRoZSBidXR0b24gaXMgY2xpY2tlZCB0aGUgY29tcG9uZW50IHdpbGwgc2hpZnQgdG8gdGhlIGAnZW50ZXJpbmcnYCBzdGF0ZVxuICogYW5kIHN0YXkgdGhlcmUgZm9yIDUwMG1zICh0aGUgdmFsdWUgb2YgYHRpbWVvdXRgKSBiZWZvcmUgaXQgZmluYWxseSBzd2l0Y2hlc1xuICogdG8gYCdlbnRlcmVkJ2AuXG4gKlxuICogV2hlbiBgaW5gIGlzIGBmYWxzZWAgdGhlIHNhbWUgdGhpbmcgaGFwcGVucyBleGNlcHQgdGhlIHN0YXRlIG1vdmVzIGZyb21cbiAqIGAnZXhpdGluZydgIHRvIGAnZXhpdGVkJ2AuXG4gKi9cblxudmFyIFRyYW5zaXRpb24gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoVHJhbnNpdGlvbiwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVHJhbnNpdGlvbihwcm9wcywgY29udGV4dCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzLCBjb250ZXh0KSB8fCB0aGlzO1xuICAgIHZhciBwYXJlbnRHcm91cCA9IGNvbnRleHQ7IC8vIEluIHRoZSBjb250ZXh0IG9mIGEgVHJhbnNpdGlvbkdyb3VwIGFsbCBlbnRlcnMgYXJlIHJlYWxseSBhcHBlYXJzXG5cbiAgICB2YXIgYXBwZWFyID0gcGFyZW50R3JvdXAgJiYgIXBhcmVudEdyb3VwLmlzTW91bnRpbmcgPyBwcm9wcy5lbnRlciA6IHByb3BzLmFwcGVhcjtcbiAgICB2YXIgaW5pdGlhbFN0YXR1cztcbiAgICBfdGhpcy5hcHBlYXJTdGF0dXMgPSBudWxsO1xuXG4gICAgaWYgKHByb3BzLmluKSB7XG4gICAgICBpZiAoYXBwZWFyKSB7XG4gICAgICAgIGluaXRpYWxTdGF0dXMgPSBFWElURUQ7XG4gICAgICAgIF90aGlzLmFwcGVhclN0YXR1cyA9IEVOVEVSSU5HO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5pdGlhbFN0YXR1cyA9IEVOVEVSRUQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwcm9wcy51bm1vdW50T25FeGl0IHx8IHByb3BzLm1vdW50T25FbnRlcikge1xuICAgICAgICBpbml0aWFsU3RhdHVzID0gVU5NT1VOVEVEO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5pdGlhbFN0YXR1cyA9IEVYSVRFRDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHN0YXR1czogaW5pdGlhbFN0YXR1c1xuICAgIH07XG4gICAgX3RoaXMubmV4dENhbGxiYWNrID0gbnVsbDtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBUcmFuc2l0aW9uLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9IGZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhfcmVmLCBwcmV2U3RhdGUpIHtcbiAgICB2YXIgbmV4dEluID0gX3JlZi5pbjtcblxuICAgIGlmIChuZXh0SW4gJiYgcHJldlN0YXRlLnN0YXR1cyA9PT0gVU5NT1VOVEVEKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdGF0dXM6IEVYSVRFRFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSAvLyBnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgLy8gICBsZXQgbmV4dFN0YXR1cyA9IG51bGxcbiAgLy8gICBpZiAocHJldlByb3BzICE9PSB0aGlzLnByb3BzKSB7XG4gIC8vICAgICBjb25zdCB7IHN0YXR1cyB9ID0gdGhpcy5zdGF0ZVxuICAvLyAgICAgaWYgKHRoaXMucHJvcHMuaW4pIHtcbiAgLy8gICAgICAgaWYgKHN0YXR1cyAhPT0gRU5URVJJTkcgJiYgc3RhdHVzICE9PSBFTlRFUkVEKSB7XG4gIC8vICAgICAgICAgbmV4dFN0YXR1cyA9IEVOVEVSSU5HXG4gIC8vICAgICAgIH1cbiAgLy8gICAgIH0gZWxzZSB7XG4gIC8vICAgICAgIGlmIChzdGF0dXMgPT09IEVOVEVSSU5HIHx8IHN0YXR1cyA9PT0gRU5URVJFRCkge1xuICAvLyAgICAgICAgIG5leHRTdGF0dXMgPSBFWElUSU5HXG4gIC8vICAgICAgIH1cbiAgLy8gICAgIH1cbiAgLy8gICB9XG4gIC8vICAgcmV0dXJuIHsgbmV4dFN0YXR1cyB9XG4gIC8vIH1cbiAgO1xuXG4gIHZhciBfcHJvdG8gPSBUcmFuc2l0aW9uLnByb3RvdHlwZTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLnVwZGF0ZVN0YXR1cyh0cnVlLCB0aGlzLmFwcGVhclN0YXR1cyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICB2YXIgbmV4dFN0YXR1cyA9IG51bGw7XG5cbiAgICBpZiAocHJldlByb3BzICE9PSB0aGlzLnByb3BzKSB7XG4gICAgICB2YXIgc3RhdHVzID0gdGhpcy5zdGF0ZS5zdGF0dXM7XG5cbiAgICAgIGlmICh0aGlzLnByb3BzLmluKSB7XG4gICAgICAgIGlmIChzdGF0dXMgIT09IEVOVEVSSU5HICYmIHN0YXR1cyAhPT0gRU5URVJFRCkge1xuICAgICAgICAgIG5leHRTdGF0dXMgPSBFTlRFUklORztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHN0YXR1cyA9PT0gRU5URVJJTkcgfHwgc3RhdHVzID09PSBFTlRFUkVEKSB7XG4gICAgICAgICAgbmV4dFN0YXR1cyA9IEVYSVRJTkc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnVwZGF0ZVN0YXR1cyhmYWxzZSwgbmV4dFN0YXR1cyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy5jYW5jZWxOZXh0Q2FsbGJhY2soKTtcbiAgfTtcblxuICBfcHJvdG8uZ2V0VGltZW91dHMgPSBmdW5jdGlvbiBnZXRUaW1lb3V0cygpIHtcbiAgICB2YXIgdGltZW91dCA9IHRoaXMucHJvcHMudGltZW91dDtcbiAgICB2YXIgZXhpdCwgZW50ZXIsIGFwcGVhcjtcbiAgICBleGl0ID0gZW50ZXIgPSBhcHBlYXIgPSB0aW1lb3V0O1xuXG4gICAgaWYgKHRpbWVvdXQgIT0gbnVsbCAmJiB0eXBlb2YgdGltZW91dCAhPT0gJ251bWJlcicpIHtcbiAgICAgIGV4aXQgPSB0aW1lb3V0LmV4aXQ7XG4gICAgICBlbnRlciA9IHRpbWVvdXQuZW50ZXI7IC8vIFRPRE86IHJlbW92ZSBmYWxsYmFjayBmb3IgbmV4dCBtYWpvclxuXG4gICAgICBhcHBlYXIgPSB0aW1lb3V0LmFwcGVhciAhPT0gdW5kZWZpbmVkID8gdGltZW91dC5hcHBlYXIgOiBlbnRlcjtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgZXhpdDogZXhpdCxcbiAgICAgIGVudGVyOiBlbnRlcixcbiAgICAgIGFwcGVhcjogYXBwZWFyXG4gICAgfTtcbiAgfTtcblxuICBfcHJvdG8udXBkYXRlU3RhdHVzID0gZnVuY3Rpb24gdXBkYXRlU3RhdHVzKG1vdW50aW5nLCBuZXh0U3RhdHVzKSB7XG4gICAgaWYgKG1vdW50aW5nID09PSB2b2lkIDApIHtcbiAgICAgIG1vdW50aW5nID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKG5leHRTdGF0dXMgIT09IG51bGwpIHtcbiAgICAgIC8vIG5leHRTdGF0dXMgd2lsbCBhbHdheXMgYmUgRU5URVJJTkcgb3IgRVhJVElORy5cbiAgICAgIHRoaXMuY2FuY2VsTmV4dENhbGxiYWNrKCk7XG5cbiAgICAgIGlmIChuZXh0U3RhdHVzID09PSBFTlRFUklORykge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy51bm1vdW50T25FeGl0IHx8IHRoaXMucHJvcHMubW91bnRPbkVudGVyKSB7XG4gICAgICAgICAgdmFyIG5vZGUgPSB0aGlzLnByb3BzLm5vZGVSZWYgPyB0aGlzLnByb3BzLm5vZGVSZWYuY3VycmVudCA6IFJlYWN0RE9NLmZpbmRET01Ob2RlKHRoaXMpOyAvLyBodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL3B1bGwvNzQ5XG4gICAgICAgICAgLy8gV2l0aCB1bm1vdW50T25FeGl0IG9yIG1vdW50T25FbnRlciwgdGhlIGVudGVyIGFuaW1hdGlvbiBzaG91bGQgaGFwcGVuIGF0IHRoZSB0cmFuc2l0aW9uIGJldHdlZW4gYGV4aXRlZGAgYW5kIGBlbnRlcmluZ2AuXG4gICAgICAgICAgLy8gVG8gbWFrZSB0aGUgYW5pbWF0aW9uIGhhcHBlbiwgIHdlIGhhdmUgdG8gc2VwYXJhdGUgZWFjaCByZW5kZXJpbmcgYW5kIGF2b2lkIGJlaW5nIHByb2Nlc3NlZCBhcyBiYXRjaGVkLlxuXG4gICAgICAgICAgaWYgKG5vZGUpIGZvcmNlUmVmbG93KG5vZGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5wZXJmb3JtRW50ZXIobW91bnRpbmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5wZXJmb3JtRXhpdCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy5wcm9wcy51bm1vdW50T25FeGl0ICYmIHRoaXMuc3RhdGUuc3RhdHVzID09PSBFWElURUQpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBzdGF0dXM6IFVOTU9VTlRFRFxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5wZXJmb3JtRW50ZXIgPSBmdW5jdGlvbiBwZXJmb3JtRW50ZXIobW91bnRpbmcpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBlbnRlciA9IHRoaXMucHJvcHMuZW50ZXI7XG4gICAgdmFyIGFwcGVhcmluZyA9IHRoaXMuY29udGV4dCA/IHRoaXMuY29udGV4dC5pc01vdW50aW5nIDogbW91bnRpbmc7XG5cbiAgICB2YXIgX3JlZjIgPSB0aGlzLnByb3BzLm5vZGVSZWYgPyBbYXBwZWFyaW5nXSA6IFtSZWFjdERPTS5maW5kRE9NTm9kZSh0aGlzKSwgYXBwZWFyaW5nXSxcbiAgICAgICAgbWF5YmVOb2RlID0gX3JlZjJbMF0sXG4gICAgICAgIG1heWJlQXBwZWFyaW5nID0gX3JlZjJbMV07XG5cbiAgICB2YXIgdGltZW91dHMgPSB0aGlzLmdldFRpbWVvdXRzKCk7XG4gICAgdmFyIGVudGVyVGltZW91dCA9IGFwcGVhcmluZyA/IHRpbWVvdXRzLmFwcGVhciA6IHRpbWVvdXRzLmVudGVyOyAvLyBubyBlbnRlciBhbmltYXRpb24gc2tpcCByaWdodCB0byBFTlRFUkVEXG4gICAgLy8gaWYgd2UgYXJlIG1vdW50aW5nIGFuZCBydW5uaW5nIHRoaXMgaXQgbWVhbnMgYXBwZWFyIF9tdXN0XyBiZSBzZXRcblxuICAgIGlmICghbW91bnRpbmcgJiYgIWVudGVyIHx8IGNvbmZpZy5kaXNhYmxlZCkge1xuICAgICAgdGhpcy5zYWZlU2V0U3RhdGUoe1xuICAgICAgICBzdGF0dXM6IEVOVEVSRURcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLnByb3BzLm9uRW50ZXJlZChtYXliZU5vZGUpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5wcm9wcy5vbkVudGVyKG1heWJlTm9kZSwgbWF5YmVBcHBlYXJpbmcpO1xuICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgIHN0YXR1czogRU5URVJJTkdcbiAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczIucHJvcHMub25FbnRlcmluZyhtYXliZU5vZGUsIG1heWJlQXBwZWFyaW5nKTtcblxuICAgICAgX3RoaXMyLm9uVHJhbnNpdGlvbkVuZChlbnRlclRpbWVvdXQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLnNhZmVTZXRTdGF0ZSh7XG4gICAgICAgICAgc3RhdHVzOiBFTlRFUkVEXG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpczIucHJvcHMub25FbnRlcmVkKG1heWJlTm9kZSwgbWF5YmVBcHBlYXJpbmcpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5wZXJmb3JtRXhpdCA9IGZ1bmN0aW9uIHBlcmZvcm1FeGl0KCkge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgdmFyIGV4aXQgPSB0aGlzLnByb3BzLmV4aXQ7XG4gICAgdmFyIHRpbWVvdXRzID0gdGhpcy5nZXRUaW1lb3V0cygpO1xuICAgIHZhciBtYXliZU5vZGUgPSB0aGlzLnByb3BzLm5vZGVSZWYgPyB1bmRlZmluZWQgOiBSZWFjdERPTS5maW5kRE9NTm9kZSh0aGlzKTsgLy8gbm8gZXhpdCBhbmltYXRpb24gc2tpcCByaWdodCB0byBFWElURURcblxuICAgIGlmICghZXhpdCB8fCBjb25maWcuZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgICAgc3RhdHVzOiBFWElURURcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMzLnByb3BzLm9uRXhpdGVkKG1heWJlTm9kZSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnByb3BzLm9uRXhpdChtYXliZU5vZGUpO1xuICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgIHN0YXR1czogRVhJVElOR1xuICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzMy5wcm9wcy5vbkV4aXRpbmcobWF5YmVOb2RlKTtcblxuICAgICAgX3RoaXMzLm9uVHJhbnNpdGlvbkVuZCh0aW1lb3V0cy5leGl0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMy5zYWZlU2V0U3RhdGUoe1xuICAgICAgICAgIHN0YXR1czogRVhJVEVEXG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpczMucHJvcHMub25FeGl0ZWQobWF5YmVOb2RlKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uY2FuY2VsTmV4dENhbGxiYWNrID0gZnVuY3Rpb24gY2FuY2VsTmV4dENhbGxiYWNrKCkge1xuICAgIGlmICh0aGlzLm5leHRDYWxsYmFjayAhPT0gbnVsbCkge1xuICAgICAgdGhpcy5uZXh0Q2FsbGJhY2suY2FuY2VsKCk7XG4gICAgICB0aGlzLm5leHRDYWxsYmFjayA9IG51bGw7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5zYWZlU2V0U3RhdGUgPSBmdW5jdGlvbiBzYWZlU2V0U3RhdGUobmV4dFN0YXRlLCBjYWxsYmFjaykge1xuICAgIC8vIFRoaXMgc2hvdWxkbid0IGJlIG5lY2Vzc2FyeSwgYnV0IHRoZXJlIGFyZSB3ZWlyZCByYWNlIGNvbmRpdGlvbnMgd2l0aFxuICAgIC8vIHNldFN0YXRlIGNhbGxiYWNrcyBhbmQgdW5tb3VudGluZyBpbiB0ZXN0aW5nLCBzbyBhbHdheXMgbWFrZSBzdXJlIHRoYXRcbiAgICAvLyB3ZSBjYW4gY2FuY2VsIGFueSBwZW5kaW5nIHNldFN0YXRlIGNhbGxiYWNrcyBhZnRlciB3ZSB1bm1vdW50LlxuICAgIGNhbGxiYWNrID0gdGhpcy5zZXROZXh0Q2FsbGJhY2soY2FsbGJhY2spO1xuICAgIHRoaXMuc2V0U3RhdGUobmV4dFN0YXRlLCBjYWxsYmFjayk7XG4gIH07XG5cbiAgX3Byb3RvLnNldE5leHRDYWxsYmFjayA9IGZ1bmN0aW9uIHNldE5leHRDYWxsYmFjayhjYWxsYmFjaykge1xuICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgdmFyIGFjdGl2ZSA9IHRydWU7XG5cbiAgICB0aGlzLm5leHRDYWxsYmFjayA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKGFjdGl2ZSkge1xuICAgICAgICBhY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgX3RoaXM0Lm5leHRDYWxsYmFjayA9IG51bGw7XG4gICAgICAgIGNhbGxiYWNrKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5uZXh0Q2FsbGJhY2suY2FuY2VsID0gZnVuY3Rpb24gKCkge1xuICAgICAgYWN0aXZlID0gZmFsc2U7XG4gICAgfTtcblxuICAgIHJldHVybiB0aGlzLm5leHRDYWxsYmFjaztcbiAgfTtcblxuICBfcHJvdG8ub25UcmFuc2l0aW9uRW5kID0gZnVuY3Rpb24gb25UcmFuc2l0aW9uRW5kKHRpbWVvdXQsIGhhbmRsZXIpIHtcbiAgICB0aGlzLnNldE5leHRDYWxsYmFjayhoYW5kbGVyKTtcbiAgICB2YXIgbm9kZSA9IHRoaXMucHJvcHMubm9kZVJlZiA/IHRoaXMucHJvcHMubm9kZVJlZi5jdXJyZW50IDogUmVhY3RET00uZmluZERPTU5vZGUodGhpcyk7XG4gICAgdmFyIGRvZXNOb3RIYXZlVGltZW91dE9yTGlzdGVuZXIgPSB0aW1lb3V0ID09IG51bGwgJiYgIXRoaXMucHJvcHMuYWRkRW5kTGlzdGVuZXI7XG5cbiAgICBpZiAoIW5vZGUgfHwgZG9lc05vdEhhdmVUaW1lb3V0T3JMaXN0ZW5lcikge1xuICAgICAgc2V0VGltZW91dCh0aGlzLm5leHRDYWxsYmFjaywgMCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucHJvcHMuYWRkRW5kTGlzdGVuZXIpIHtcbiAgICAgIHZhciBfcmVmMyA9IHRoaXMucHJvcHMubm9kZVJlZiA/IFt0aGlzLm5leHRDYWxsYmFja10gOiBbbm9kZSwgdGhpcy5uZXh0Q2FsbGJhY2tdLFxuICAgICAgICAgIG1heWJlTm9kZSA9IF9yZWYzWzBdLFxuICAgICAgICAgIG1heWJlTmV4dENhbGxiYWNrID0gX3JlZjNbMV07XG5cbiAgICAgIHRoaXMucHJvcHMuYWRkRW5kTGlzdGVuZXIobWF5YmVOb2RlLCBtYXliZU5leHRDYWxsYmFjayk7XG4gICAgfVxuXG4gICAgaWYgKHRpbWVvdXQgIT0gbnVsbCkge1xuICAgICAgc2V0VGltZW91dCh0aGlzLm5leHRDYWxsYmFjaywgdGltZW91dCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIHN0YXR1cyA9IHRoaXMuc3RhdGUuc3RhdHVzO1xuXG4gICAgaWYgKHN0YXR1cyA9PT0gVU5NT1VOVEVEKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICBfaW4gPSBfdGhpcyRwcm9wcy5pbixcbiAgICAgICAgX21vdW50T25FbnRlciA9IF90aGlzJHByb3BzLm1vdW50T25FbnRlcixcbiAgICAgICAgX3VubW91bnRPbkV4aXQgPSBfdGhpcyRwcm9wcy51bm1vdW50T25FeGl0LFxuICAgICAgICBfYXBwZWFyID0gX3RoaXMkcHJvcHMuYXBwZWFyLFxuICAgICAgICBfZW50ZXIgPSBfdGhpcyRwcm9wcy5lbnRlcixcbiAgICAgICAgX2V4aXQgPSBfdGhpcyRwcm9wcy5leGl0LFxuICAgICAgICBfdGltZW91dCA9IF90aGlzJHByb3BzLnRpbWVvdXQsXG4gICAgICAgIF9hZGRFbmRMaXN0ZW5lciA9IF90aGlzJHByb3BzLmFkZEVuZExpc3RlbmVyLFxuICAgICAgICBfb25FbnRlciA9IF90aGlzJHByb3BzLm9uRW50ZXIsXG4gICAgICAgIF9vbkVudGVyaW5nID0gX3RoaXMkcHJvcHMub25FbnRlcmluZyxcbiAgICAgICAgX29uRW50ZXJlZCA9IF90aGlzJHByb3BzLm9uRW50ZXJlZCxcbiAgICAgICAgX29uRXhpdCA9IF90aGlzJHByb3BzLm9uRXhpdCxcbiAgICAgICAgX29uRXhpdGluZyA9IF90aGlzJHByb3BzLm9uRXhpdGluZyxcbiAgICAgICAgX29uRXhpdGVkID0gX3RoaXMkcHJvcHMub25FeGl0ZWQsXG4gICAgICAgIF9ub2RlUmVmID0gX3RoaXMkcHJvcHMubm9kZVJlZixcbiAgICAgICAgY2hpbGRQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImluXCIsIFwibW91bnRPbkVudGVyXCIsIFwidW5tb3VudE9uRXhpdFwiLCBcImFwcGVhclwiLCBcImVudGVyXCIsIFwiZXhpdFwiLCBcInRpbWVvdXRcIiwgXCJhZGRFbmRMaXN0ZW5lclwiLCBcIm9uRW50ZXJcIiwgXCJvbkVudGVyaW5nXCIsIFwib25FbnRlcmVkXCIsIFwib25FeGl0XCIsIFwib25FeGl0aW5nXCIsIFwib25FeGl0ZWRcIiwgXCJub2RlUmVmXCJdKTtcblxuICAgIHJldHVybiAoXG4gICAgICAvKiNfX1BVUkVfXyovXG4gICAgICAvLyBhbGxvd3MgZm9yIG5lc3RlZCBUcmFuc2l0aW9uc1xuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uR3JvdXBDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiBudWxsXG4gICAgICB9LCB0eXBlb2YgY2hpbGRyZW4gPT09ICdmdW5jdGlvbicgPyBjaGlsZHJlbihzdGF0dXMsIGNoaWxkUHJvcHMpIDogUmVhY3QuY2xvbmVFbGVtZW50KFJlYWN0LkNoaWxkcmVuLm9ubHkoY2hpbGRyZW4pLCBjaGlsZFByb3BzKSlcbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBUcmFuc2l0aW9uO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5UcmFuc2l0aW9uLmNvbnRleHRUeXBlID0gVHJhbnNpdGlvbkdyb3VwQ29udGV4dDtcblRyYW5zaXRpb24ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogQSBSZWFjdCByZWZlcmVuY2UgdG8gRE9NIGVsZW1lbnQgdGhhdCBuZWVkIHRvIHRyYW5zaXRpb246XG4gICAqIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS81MTEyNzEzMC80NjcxOTMyXG4gICAqXG4gICAqICAgLSBXaGVuIGBub2RlUmVmYCBwcm9wIGlzIHVzZWQsIGBub2RlYCBpcyBub3QgcGFzc2VkIHRvIGNhbGxiYWNrIGZ1bmN0aW9uc1xuICAgKiAgICAgIChlLmcuIGBvbkVudGVyYCkgYmVjYXVzZSB1c2VyIGFscmVhZHkgaGFzIGRpcmVjdCBhY2Nlc3MgdG8gdGhlIG5vZGUuXG4gICAqICAgLSBXaGVuIGNoYW5naW5nIGBrZXlgIHByb3Agb2YgYFRyYW5zaXRpb25gIGluIGEgYFRyYW5zaXRpb25Hcm91cGAgYSBuZXdcbiAgICogICAgIGBub2RlUmVmYCBuZWVkIHRvIGJlIHByb3ZpZGVkIHRvIGBUcmFuc2l0aW9uYCB3aXRoIGNoYW5nZWQgYGtleWAgcHJvcFxuICAgKiAgICAgKHNlZVxuICAgKiAgICAgW3Rlc3QvQ1NTVHJhbnNpdGlvbi10ZXN0LmpzXShodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2Jsb2IvMTM0MzVmODk3YjNhYjcxZjZlMTlkNzI0ZjE0NTU5NmY1OTEwNTgxYy90ZXN0L0NTU1RyYW5zaXRpb24tdGVzdC5qcyNMMzYyLUw0MzcpKS5cbiAgICovXG4gIG5vZGVSZWY6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgY3VycmVudDogdHlwZW9mIEVsZW1lbnQgPT09ICd1bmRlZmluZWQnID8gUHJvcFR5cGVzLmFueSA6IGZ1bmN0aW9uIChwcm9wVmFsdWUsIGtleSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG4gICAgICB2YXIgdmFsdWUgPSBwcm9wVmFsdWVba2V5XTtcbiAgICAgIHJldHVybiBQcm9wVHlwZXMuaW5zdGFuY2VPZih2YWx1ZSAmJiAnb3duZXJEb2N1bWVudCcgaW4gdmFsdWUgPyB2YWx1ZS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3LkVsZW1lbnQgOiBFbGVtZW50KShwcm9wVmFsdWUsIGtleSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KTtcbiAgICB9XG4gIH0pLFxuXG4gIC8qKlxuICAgKiBBIGBmdW5jdGlvbmAgY2hpbGQgY2FuIGJlIHVzZWQgaW5zdGVhZCBvZiBhIFJlYWN0IGVsZW1lbnQuIFRoaXMgZnVuY3Rpb24gaXNcbiAgICogY2FsbGVkIHdpdGggdGhlIGN1cnJlbnQgdHJhbnNpdGlvbiBzdGF0dXMgKGAnZW50ZXJpbmcnYCwgYCdlbnRlcmVkJ2AsXG4gICAqIGAnZXhpdGluZydgLCBgJ2V4aXRlZCdgKSwgd2hpY2ggY2FuIGJlIHVzZWQgdG8gYXBwbHkgY29udGV4dFxuICAgKiBzcGVjaWZpYyBwcm9wcyB0byBhIGNvbXBvbmVudC5cbiAgICpcbiAgICogYGBganN4XG4gICAqIDxUcmFuc2l0aW9uIGluPXt0aGlzLnN0YXRlLmlufSB0aW1lb3V0PXsxNTB9PlxuICAgKiAgIHtzdGF0ZSA9PiAoXG4gICAqICAgICA8TXlDb21wb25lbnQgY2xhc3NOYW1lPXtgZmFkZSBmYWRlLSR7c3RhdGV9YH0gLz5cbiAgICogICApfVxuICAgKiA8L1RyYW5zaXRpb24+XG4gICAqIGBgYFxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsIFByb3BUeXBlcy5lbGVtZW50LmlzUmVxdWlyZWRdKS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBTaG93IHRoZSBjb21wb25lbnQ7IHRyaWdnZXJzIHRoZSBlbnRlciBvciBleGl0IHN0YXRlc1xuICAgKi9cbiAgaW46IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBCeSBkZWZhdWx0IHRoZSBjaGlsZCBjb21wb25lbnQgaXMgbW91bnRlZCBpbW1lZGlhdGVseSBhbG9uZyB3aXRoXG4gICAqIHRoZSBwYXJlbnQgYFRyYW5zaXRpb25gIGNvbXBvbmVudC4gSWYgeW91IHdhbnQgdG8gXCJsYXp5IG1vdW50XCIgdGhlIGNvbXBvbmVudCBvbiB0aGVcbiAgICogZmlyc3QgYGluPXt0cnVlfWAgeW91IGNhbiBzZXQgYG1vdW50T25FbnRlcmAuIEFmdGVyIHRoZSBmaXJzdCBlbnRlciB0cmFuc2l0aW9uIHRoZSBjb21wb25lbnQgd2lsbCBzdGF5XG4gICAqIG1vdW50ZWQsIGV2ZW4gb24gXCJleGl0ZWRcIiwgdW5sZXNzIHlvdSBhbHNvIHNwZWNpZnkgYHVubW91bnRPbkV4aXRgLlxuICAgKi9cbiAgbW91bnRPbkVudGVyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQnkgZGVmYXVsdCB0aGUgY2hpbGQgY29tcG9uZW50IHN0YXlzIG1vdW50ZWQgYWZ0ZXIgaXQgcmVhY2hlcyB0aGUgYCdleGl0ZWQnYCBzdGF0ZS5cbiAgICogU2V0IGB1bm1vdW50T25FeGl0YCBpZiB5b3UnZCBwcmVmZXIgdG8gdW5tb3VudCB0aGUgY29tcG9uZW50IGFmdGVyIGl0IGZpbmlzaGVzIGV4aXRpbmcuXG4gICAqL1xuICB1bm1vdW50T25FeGl0OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQnkgZGVmYXVsdCB0aGUgY2hpbGQgY29tcG9uZW50IGRvZXMgbm90IHBlcmZvcm0gdGhlIGVudGVyIHRyYW5zaXRpb24gd2hlblxuICAgKiBpdCBmaXJzdCBtb3VudHMsIHJlZ2FyZGxlc3Mgb2YgdGhlIHZhbHVlIG9mIGBpbmAuIElmIHlvdSB3YW50IHRoaXNcbiAgICogYmVoYXZpb3IsIHNldCBib3RoIGBhcHBlYXJgIGFuZCBgaW5gIHRvIGB0cnVlYC5cbiAgICpcbiAgICogPiAqKk5vdGUqKjogdGhlcmUgYXJlIG5vIHNwZWNpYWwgYXBwZWFyIHN0YXRlcyBsaWtlIGBhcHBlYXJpbmdgL2BhcHBlYXJlZGAsIHRoaXMgcHJvcFxuICAgKiA+IG9ubHkgYWRkcyBhbiBhZGRpdGlvbmFsIGVudGVyIHRyYW5zaXRpb24uIEhvd2V2ZXIsIGluIHRoZVxuICAgKiA+IGA8Q1NTVHJhbnNpdGlvbj5gIGNvbXBvbmVudCB0aGF0IGZpcnN0IGVudGVyIHRyYW5zaXRpb24gZG9lcyByZXN1bHQgaW5cbiAgICogPiBhZGRpdGlvbmFsIGAuYXBwZWFyLSpgIGNsYXNzZXMsIHRoYXQgd2F5IHlvdSBjYW4gY2hvb3NlIHRvIHN0eWxlIGl0XG4gICAqID4gZGlmZmVyZW50bHkuXG4gICAqL1xuICBhcHBlYXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBFbmFibGUgb3IgZGlzYWJsZSBlbnRlciB0cmFuc2l0aW9ucy5cbiAgICovXG4gIGVudGVyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRW5hYmxlIG9yIGRpc2FibGUgZXhpdCB0cmFuc2l0aW9ucy5cbiAgICovXG4gIGV4aXQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgZHVyYXRpb24gb2YgdGhlIHRyYW5zaXRpb24sIGluIG1pbGxpc2Vjb25kcy5cbiAgICogUmVxdWlyZWQgdW5sZXNzIGBhZGRFbmRMaXN0ZW5lcmAgaXMgcHJvdmlkZWQuXG4gICAqXG4gICAqIFlvdSBtYXkgc3BlY2lmeSBhIHNpbmdsZSB0aW1lb3V0IGZvciBhbGwgdHJhbnNpdGlvbnM6XG4gICAqXG4gICAqIGBgYGpzeFxuICAgKiB0aW1lb3V0PXs1MDB9XG4gICAqIGBgYFxuICAgKlxuICAgKiBvciBpbmRpdmlkdWFsbHk6XG4gICAqXG4gICAqIGBgYGpzeFxuICAgKiB0aW1lb3V0PXt7XG4gICAqICBhcHBlYXI6IDUwMCxcbiAgICogIGVudGVyOiAzMDAsXG4gICAqICBleGl0OiA1MDAsXG4gICAqIH19XG4gICAqIGBgYFxuICAgKlxuICAgKiAtIGBhcHBlYXJgIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSBvZiBgZW50ZXJgXG4gICAqIC0gYGVudGVyYCBkZWZhdWx0cyB0byBgMGBcbiAgICogLSBgZXhpdGAgZGVmYXVsdHMgdG8gYDBgXG4gICAqXG4gICAqIEB0eXBlIHtudW1iZXIgfCB7IGVudGVyPzogbnVtYmVyLCBleGl0PzogbnVtYmVyLCBhcHBlYXI/OiBudW1iZXIgfX1cbiAgICovXG4gIHRpbWVvdXQ6IGZ1bmN0aW9uIHRpbWVvdXQocHJvcHMpIHtcbiAgICB2YXIgcHQgPSB0aW1lb3V0c1NoYXBlO1xuICAgIGlmICghcHJvcHMuYWRkRW5kTGlzdGVuZXIpIHB0ID0gcHQuaXNSZXF1aXJlZDtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBwdC5hcHBseSh2b2lkIDAsIFtwcm9wc10uY29uY2F0KGFyZ3MpKTtcbiAgfSxcblxuICAvKipcbiAgICogQWRkIGEgY3VzdG9tIHRyYW5zaXRpb24gZW5kIHRyaWdnZXIuIENhbGxlZCB3aXRoIHRoZSB0cmFuc2l0aW9uaW5nXG4gICAqIERPTSBub2RlIGFuZCBhIGBkb25lYCBjYWxsYmFjay4gQWxsb3dzIGZvciBtb3JlIGZpbmUgZ3JhaW5lZCB0cmFuc2l0aW9uIGVuZFxuICAgKiBsb2dpYy4gVGltZW91dHMgYXJlIHN0aWxsIHVzZWQgYXMgYSBmYWxsYmFjayBpZiBwcm92aWRlZC5cbiAgICpcbiAgICogKipOb3RlKio6IHdoZW4gYG5vZGVSZWZgIHByb3AgaXMgcGFzc2VkLCBgbm9kZWAgaXMgbm90IHBhc3NlZC5cbiAgICpcbiAgICogYGBganN4XG4gICAqIGFkZEVuZExpc3RlbmVyPXsobm9kZSwgZG9uZSkgPT4ge1xuICAgKiAgIC8vIHVzZSB0aGUgY3NzIHRyYW5zaXRpb25lbmQgZXZlbnQgdG8gbWFyayB0aGUgZmluaXNoIG9mIGEgdHJhbnNpdGlvblxuICAgKiAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIGRvbmUsIGZhbHNlKTtcbiAgICogfX1cbiAgICogYGBgXG4gICAqL1xuICBhZGRFbmRMaXN0ZW5lcjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGJlZm9yZSB0aGUgXCJlbnRlcmluZ1wiIHN0YXR1cyBpcyBhcHBsaWVkLiBBbiBleHRyYSBwYXJhbWV0ZXJcbiAgICogYGlzQXBwZWFyaW5nYCBpcyBzdXBwbGllZCB0byBpbmRpY2F0ZSBpZiB0aGUgZW50ZXIgc3RhZ2UgaXMgb2NjdXJyaW5nIG9uIHRoZSBpbml0aWFsIG1vdW50XG4gICAqXG4gICAqICoqTm90ZSoqOiB3aGVuIGBub2RlUmVmYCBwcm9wIGlzIHBhc3NlZCwgYG5vZGVgIGlzIG5vdCBwYXNzZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50LCBpc0FwcGVhcmluZzogYm9vbCkgLT4gdm9pZFxuICAgKi9cbiAgb25FbnRlcjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBcImVudGVyaW5nXCIgc3RhdHVzIGlzIGFwcGxpZWQuIEFuIGV4dHJhIHBhcmFtZXRlclxuICAgKiBgaXNBcHBlYXJpbmdgIGlzIHN1cHBsaWVkIHRvIGluZGljYXRlIGlmIHRoZSBlbnRlciBzdGFnZSBpcyBvY2N1cnJpbmcgb24gdGhlIGluaXRpYWwgbW91bnRcbiAgICpcbiAgICogKipOb3RlKio6IHdoZW4gYG5vZGVSZWZgIHByb3AgaXMgcGFzc2VkLCBgbm9kZWAgaXMgbm90IHBhc3NlZC5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQsIGlzQXBwZWFyaW5nOiBib29sKVxuICAgKi9cbiAgb25FbnRlcmluZzogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBcImVudGVyZWRcIiBzdGF0dXMgaXMgYXBwbGllZC4gQW4gZXh0cmEgcGFyYW1ldGVyXG4gICAqIGBpc0FwcGVhcmluZ2AgaXMgc3VwcGxpZWQgdG8gaW5kaWNhdGUgaWYgdGhlIGVudGVyIHN0YWdlIGlzIG9jY3VycmluZyBvbiB0aGUgaW5pdGlhbCBtb3VudFxuICAgKlxuICAgKiAqKk5vdGUqKjogd2hlbiBgbm9kZVJlZmAgcHJvcCBpcyBwYXNzZWQsIGBub2RlYCBpcyBub3QgcGFzc2VkLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCwgaXNBcHBlYXJpbmc6IGJvb2wpIC0+IHZvaWRcbiAgICovXG4gIG9uRW50ZXJlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGJlZm9yZSB0aGUgXCJleGl0aW5nXCIgc3RhdHVzIGlzIGFwcGxpZWQuXG4gICAqXG4gICAqICoqTm90ZSoqOiB3aGVuIGBub2RlUmVmYCBwcm9wIGlzIHBhc3NlZCwgYG5vZGVgIGlzIG5vdCBwYXNzZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50KSAtPiB2b2lkXG4gICAqL1xuICBvbkV4aXQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgXCJleGl0aW5nXCIgc3RhdHVzIGlzIGFwcGxpZWQuXG4gICAqXG4gICAqICoqTm90ZSoqOiB3aGVuIGBub2RlUmVmYCBwcm9wIGlzIHBhc3NlZCwgYG5vZGVgIGlzIG5vdCBwYXNzZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50KSAtPiB2b2lkXG4gICAqL1xuICBvbkV4aXRpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgXCJleGl0ZWRcIiBzdGF0dXMgaXMgYXBwbGllZC5cbiAgICpcbiAgICogKipOb3RlKio6IHdoZW4gYG5vZGVSZWZgIHByb3AgaXMgcGFzc2VkLCBgbm9kZWAgaXMgbm90IHBhc3NlZFxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCkgLT4gdm9pZFxuICAgKi9cbiAgb25FeGl0ZWQ6IFByb3BUeXBlcy5mdW5jXG59IDoge307IC8vIE5hbWUgdGhlIGZ1bmN0aW9uIHNvIGl0IGlzIGNsZWFyZXIgaW4gdGhlIGRvY3VtZW50YXRpb25cblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cblRyYW5zaXRpb24uZGVmYXVsdFByb3BzID0ge1xuICBpbjogZmFsc2UsXG4gIG1vdW50T25FbnRlcjogZmFsc2UsXG4gIHVubW91bnRPbkV4aXQ6IGZhbHNlLFxuICBhcHBlYXI6IGZhbHNlLFxuICBlbnRlcjogdHJ1ZSxcbiAgZXhpdDogdHJ1ZSxcbiAgb25FbnRlcjogbm9vcCxcbiAgb25FbnRlcmluZzogbm9vcCxcbiAgb25FbnRlcmVkOiBub29wLFxuICBvbkV4aXQ6IG5vb3AsXG4gIG9uRXhpdGluZzogbm9vcCxcbiAgb25FeGl0ZWQ6IG5vb3Bcbn07XG5UcmFuc2l0aW9uLlVOTU9VTlRFRCA9IFVOTU9VTlRFRDtcblRyYW5zaXRpb24uRVhJVEVEID0gRVhJVEVEO1xuVHJhbnNpdGlvbi5FTlRFUklORyA9IEVOVEVSSU5HO1xuVHJhbnNpdGlvbi5FTlRFUkVEID0gRU5URVJFRDtcblRyYW5zaXRpb24uRVhJVElORyA9IEVYSVRJTkc7XG5leHBvcnQgZGVmYXVsdCBUcmFuc2l0aW9uOyIsImZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoZSkge1xuICBpZiAodm9pZCAwID09PSBlKSB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIHJldHVybiBlO1xufVxuZXhwb3J0IHsgX2Fzc2VydFRoaXNJbml0aWFsaXplZCBhcyBkZWZhdWx0IH07IiwiaW1wb3J0IHsgQ2hpbGRyZW4sIGNsb25lRWxlbWVudCwgaXNWYWxpZEVsZW1lbnQgfSBmcm9tICdyZWFjdCc7XG4vKipcbiAqIEdpdmVuIGB0aGlzLnByb3BzLmNoaWxkcmVuYCwgcmV0dXJuIGFuIG9iamVjdCBtYXBwaW5nIGtleSB0byBjaGlsZC5cbiAqXG4gKiBAcGFyYW0geyp9IGNoaWxkcmVuIGB0aGlzLnByb3BzLmNoaWxkcmVuYFxuICogQHJldHVybiB7b2JqZWN0fSBNYXBwaW5nIG9mIGtleSB0byBjaGlsZFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDaGlsZE1hcHBpbmcoY2hpbGRyZW4sIG1hcEZuKSB7XG4gIHZhciBtYXBwZXIgPSBmdW5jdGlvbiBtYXBwZXIoY2hpbGQpIHtcbiAgICByZXR1cm4gbWFwRm4gJiYgaXNWYWxpZEVsZW1lbnQoY2hpbGQpID8gbWFwRm4oY2hpbGQpIDogY2hpbGQ7XG4gIH07XG5cbiAgdmFyIHJlc3VsdCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGlmIChjaGlsZHJlbikgQ2hpbGRyZW4ubWFwKGNoaWxkcmVuLCBmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiBjO1xuICB9KS5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIC8vIHJ1biB0aGUgbWFwIGZ1bmN0aW9uIGhlcmUgaW5zdGVhZCBzbyB0aGF0IHRoZSBrZXkgaXMgdGhlIGNvbXB1dGVkIG9uZVxuICAgIHJlc3VsdFtjaGlsZC5rZXldID0gbWFwcGVyKGNoaWxkKTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG4vKipcbiAqIFdoZW4geW91J3JlIGFkZGluZyBvciByZW1vdmluZyBjaGlsZHJlbiBzb21lIG1heSBiZSBhZGRlZCBvciByZW1vdmVkIGluIHRoZVxuICogc2FtZSByZW5kZXIgcGFzcy4gV2Ugd2FudCB0byBzaG93ICpib3RoKiBzaW5jZSB3ZSB3YW50IHRvIHNpbXVsdGFuZW91c2x5XG4gKiBhbmltYXRlIGVsZW1lbnRzIGluIGFuZCBvdXQuIFRoaXMgZnVuY3Rpb24gdGFrZXMgYSBwcmV2aW91cyBzZXQgb2Yga2V5c1xuICogYW5kIGEgbmV3IHNldCBvZiBrZXlzIGFuZCBtZXJnZXMgdGhlbSB3aXRoIGl0cyBiZXN0IGd1ZXNzIG9mIHRoZSBjb3JyZWN0XG4gKiBvcmRlcmluZy4gSW4gdGhlIGZ1dHVyZSB3ZSBtYXkgZXhwb3NlIHNvbWUgb2YgdGhlIHV0aWxpdGllcyBpblxuICogUmVhY3RNdWx0aUNoaWxkIHRvIG1ha2UgdGhpcyBlYXN5LCBidXQgZm9yIG5vdyBSZWFjdCBpdHNlbGYgZG9lcyBub3RcbiAqIGRpcmVjdGx5IGhhdmUgdGhpcyBjb25jZXB0IG9mIHRoZSB1bmlvbiBvZiBwcmV2Q2hpbGRyZW4gYW5kIG5leHRDaGlsZHJlblxuICogc28gd2UgaW1wbGVtZW50IGl0IGhlcmUuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IHByZXYgcHJldiBjaGlsZHJlbiBhcyByZXR1cm5lZCBmcm9tXG4gKiBgUmVhY3RUcmFuc2l0aW9uQ2hpbGRNYXBwaW5nLmdldENoaWxkTWFwcGluZygpYC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuZXh0IG5leHQgY2hpbGRyZW4gYXMgcmV0dXJuZWQgZnJvbVxuICogYFJlYWN0VHJhbnNpdGlvbkNoaWxkTWFwcGluZy5nZXRDaGlsZE1hcHBpbmcoKWAuXG4gKiBAcmV0dXJuIHtvYmplY3R9IGEga2V5IHNldCB0aGF0IGNvbnRhaW5zIGFsbCBrZXlzIGluIGBwcmV2YCBhbmQgYWxsIGtleXNcbiAqIGluIGBuZXh0YCBpbiBhIHJlYXNvbmFibGUgb3JkZXIuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlQ2hpbGRNYXBwaW5ncyhwcmV2LCBuZXh0KSB7XG4gIHByZXYgPSBwcmV2IHx8IHt9O1xuICBuZXh0ID0gbmV4dCB8fCB7fTtcblxuICBmdW5jdGlvbiBnZXRWYWx1ZUZvcktleShrZXkpIHtcbiAgICByZXR1cm4ga2V5IGluIG5leHQgPyBuZXh0W2tleV0gOiBwcmV2W2tleV07XG4gIH0gLy8gRm9yIGVhY2gga2V5IG9mIGBuZXh0YCwgdGhlIGxpc3Qgb2Yga2V5cyB0byBpbnNlcnQgYmVmb3JlIHRoYXQga2V5IGluXG4gIC8vIHRoZSBjb21iaW5lZCBsaXN0XG5cblxuICB2YXIgbmV4dEtleXNQZW5kaW5nID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdmFyIHBlbmRpbmdLZXlzID0gW107XG5cbiAgZm9yICh2YXIgcHJldktleSBpbiBwcmV2KSB7XG4gICAgaWYgKHByZXZLZXkgaW4gbmV4dCkge1xuICAgICAgaWYgKHBlbmRpbmdLZXlzLmxlbmd0aCkge1xuICAgICAgICBuZXh0S2V5c1BlbmRpbmdbcHJldktleV0gPSBwZW5kaW5nS2V5cztcbiAgICAgICAgcGVuZGluZ0tleXMgPSBbXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVuZGluZ0tleXMucHVzaChwcmV2S2V5KTtcbiAgICB9XG4gIH1cblxuICB2YXIgaTtcbiAgdmFyIGNoaWxkTWFwcGluZyA9IHt9O1xuXG4gIGZvciAodmFyIG5leHRLZXkgaW4gbmV4dCkge1xuICAgIGlmIChuZXh0S2V5c1BlbmRpbmdbbmV4dEtleV0pIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuZXh0S2V5c1BlbmRpbmdbbmV4dEtleV0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHBlbmRpbmdOZXh0S2V5ID0gbmV4dEtleXNQZW5kaW5nW25leHRLZXldW2ldO1xuICAgICAgICBjaGlsZE1hcHBpbmdbbmV4dEtleXNQZW5kaW5nW25leHRLZXldW2ldXSA9IGdldFZhbHVlRm9yS2V5KHBlbmRpbmdOZXh0S2V5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjaGlsZE1hcHBpbmdbbmV4dEtleV0gPSBnZXRWYWx1ZUZvcktleShuZXh0S2V5KTtcbiAgfSAvLyBGaW5hbGx5LCBhZGQgdGhlIGtleXMgd2hpY2ggZGlkbid0IGFwcGVhciBiZWZvcmUgYW55IGtleSBpbiBgbmV4dGBcblxuXG4gIGZvciAoaSA9IDA7IGkgPCBwZW5kaW5nS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGNoaWxkTWFwcGluZ1twZW5kaW5nS2V5c1tpXV0gPSBnZXRWYWx1ZUZvcktleShwZW5kaW5nS2V5c1tpXSk7XG4gIH1cblxuICByZXR1cm4gY2hpbGRNYXBwaW5nO1xufVxuXG5mdW5jdGlvbiBnZXRQcm9wKGNoaWxkLCBwcm9wLCBwcm9wcykge1xuICByZXR1cm4gcHJvcHNbcHJvcF0gIT0gbnVsbCA/IHByb3BzW3Byb3BdIDogY2hpbGQucHJvcHNbcHJvcF07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRJbml0aWFsQ2hpbGRNYXBwaW5nKHByb3BzLCBvbkV4aXRlZCkge1xuICByZXR1cm4gZ2V0Q2hpbGRNYXBwaW5nKHByb3BzLmNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICByZXR1cm4gY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICBvbkV4aXRlZDogb25FeGl0ZWQuYmluZChudWxsLCBjaGlsZCksXG4gICAgICBpbjogdHJ1ZSxcbiAgICAgIGFwcGVhcjogZ2V0UHJvcChjaGlsZCwgJ2FwcGVhcicsIHByb3BzKSxcbiAgICAgIGVudGVyOiBnZXRQcm9wKGNoaWxkLCAnZW50ZXInLCBwcm9wcyksXG4gICAgICBleGl0OiBnZXRQcm9wKGNoaWxkLCAnZXhpdCcsIHByb3BzKVxuICAgIH0pO1xuICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXROZXh0Q2hpbGRNYXBwaW5nKG5leHRQcm9wcywgcHJldkNoaWxkTWFwcGluZywgb25FeGl0ZWQpIHtcbiAgdmFyIG5leHRDaGlsZE1hcHBpbmcgPSBnZXRDaGlsZE1hcHBpbmcobmV4dFByb3BzLmNoaWxkcmVuKTtcbiAgdmFyIGNoaWxkcmVuID0gbWVyZ2VDaGlsZE1hcHBpbmdzKHByZXZDaGlsZE1hcHBpbmcsIG5leHRDaGlsZE1hcHBpbmcpO1xuICBPYmplY3Qua2V5cyhjaGlsZHJlbikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIGNoaWxkID0gY2hpbGRyZW5ba2V5XTtcbiAgICBpZiAoIWlzVmFsaWRFbGVtZW50KGNoaWxkKSkgcmV0dXJuO1xuICAgIHZhciBoYXNQcmV2ID0gKGtleSBpbiBwcmV2Q2hpbGRNYXBwaW5nKTtcbiAgICB2YXIgaGFzTmV4dCA9IChrZXkgaW4gbmV4dENoaWxkTWFwcGluZyk7XG4gICAgdmFyIHByZXZDaGlsZCA9IHByZXZDaGlsZE1hcHBpbmdba2V5XTtcbiAgICB2YXIgaXNMZWF2aW5nID0gaXNWYWxpZEVsZW1lbnQocHJldkNoaWxkKSAmJiAhcHJldkNoaWxkLnByb3BzLmluOyAvLyBpdGVtIGlzIG5ldyAoZW50ZXJpbmcpXG5cbiAgICBpZiAoaGFzTmV4dCAmJiAoIWhhc1ByZXYgfHwgaXNMZWF2aW5nKSkge1xuICAgICAgLy8gY29uc29sZS5sb2coJ2VudGVyaW5nJywga2V5KVxuICAgICAgY2hpbGRyZW5ba2V5XSA9IGNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgICBvbkV4aXRlZDogb25FeGl0ZWQuYmluZChudWxsLCBjaGlsZCksXG4gICAgICAgIGluOiB0cnVlLFxuICAgICAgICBleGl0OiBnZXRQcm9wKGNoaWxkLCAnZXhpdCcsIG5leHRQcm9wcyksXG4gICAgICAgIGVudGVyOiBnZXRQcm9wKGNoaWxkLCAnZW50ZXInLCBuZXh0UHJvcHMpXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKCFoYXNOZXh0ICYmIGhhc1ByZXYgJiYgIWlzTGVhdmluZykge1xuICAgICAgLy8gaXRlbSBpcyBvbGQgKGV4aXRpbmcpXG4gICAgICAvLyBjb25zb2xlLmxvZygnbGVhdmluZycsIGtleSlcbiAgICAgIGNoaWxkcmVuW2tleV0gPSBjbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgICAgaW46IGZhbHNlXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKGhhc05leHQgJiYgaGFzUHJldiAmJiBpc1ZhbGlkRWxlbWVudChwcmV2Q2hpbGQpKSB7XG4gICAgICAvLyBpdGVtIGhhc24ndCBjaGFuZ2VkIHRyYW5zaXRpb24gc3RhdGVzXG4gICAgICAvLyBjb3B5IG92ZXIgdGhlIGxhc3QgdHJhbnNpdGlvbiBwcm9wcztcbiAgICAgIC8vIGNvbnNvbGUubG9nKCd1bmNoYW5nZWQnLCBrZXkpXG4gICAgICBjaGlsZHJlbltrZXldID0gY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICAgIG9uRXhpdGVkOiBvbkV4aXRlZC5iaW5kKG51bGwsIGNoaWxkKSxcbiAgICAgICAgaW46IHByZXZDaGlsZC5wcm9wcy5pbixcbiAgICAgICAgZXhpdDogZ2V0UHJvcChjaGlsZCwgJ2V4aXQnLCBuZXh0UHJvcHMpLFxuICAgICAgICBlbnRlcjogZ2V0UHJvcChjaGlsZCwgJ2VudGVyJywgbmV4dFByb3BzKVxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGNoaWxkcmVuO1xufSIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX2Fzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFRyYW5zaXRpb25Hcm91cENvbnRleHQgZnJvbSAnLi9UcmFuc2l0aW9uR3JvdXBDb250ZXh0JztcbmltcG9ydCB7IGdldENoaWxkTWFwcGluZywgZ2V0SW5pdGlhbENoaWxkTWFwcGluZywgZ2V0TmV4dENoaWxkTWFwcGluZyB9IGZyb20gJy4vdXRpbHMvQ2hpbGRNYXBwaW5nJztcblxudmFyIHZhbHVlcyA9IE9iamVjdC52YWx1ZXMgfHwgZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5tYXAoZnVuY3Rpb24gKGspIHtcbiAgICByZXR1cm4gb2JqW2tdO1xuICB9KTtcbn07XG5cbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGNvbXBvbmVudDogJ2RpdicsXG4gIGNoaWxkRmFjdG9yeTogZnVuY3Rpb24gY2hpbGRGYWN0b3J5KGNoaWxkKSB7XG4gICAgcmV0dXJuIGNoaWxkO1xuICB9XG59O1xuLyoqXG4gKiBUaGUgYDxUcmFuc2l0aW9uR3JvdXA+YCBjb21wb25lbnQgbWFuYWdlcyBhIHNldCBvZiB0cmFuc2l0aW9uIGNvbXBvbmVudHNcbiAqIChgPFRyYW5zaXRpb24+YCBhbmQgYDxDU1NUcmFuc2l0aW9uPmApIGluIGEgbGlzdC4gTGlrZSB3aXRoIHRoZSB0cmFuc2l0aW9uXG4gKiBjb21wb25lbnRzLCBgPFRyYW5zaXRpb25Hcm91cD5gIGlzIGEgc3RhdGUgbWFjaGluZSBmb3IgbWFuYWdpbmcgdGhlIG1vdW50aW5nXG4gKiBhbmQgdW5tb3VudGluZyBvZiBjb21wb25lbnRzIG92ZXIgdGltZS5cbiAqXG4gKiBDb25zaWRlciB0aGUgZXhhbXBsZSBiZWxvdy4gQXMgaXRlbXMgYXJlIHJlbW92ZWQgb3IgYWRkZWQgdG8gdGhlIFRvZG9MaXN0IHRoZVxuICogYGluYCBwcm9wIGlzIHRvZ2dsZWQgYXV0b21hdGljYWxseSBieSB0aGUgYDxUcmFuc2l0aW9uR3JvdXA+YC5cbiAqXG4gKiBOb3RlIHRoYXQgYDxUcmFuc2l0aW9uR3JvdXA+YCAgZG9lcyBub3QgZGVmaW5lIGFueSBhbmltYXRpb24gYmVoYXZpb3IhXG4gKiBFeGFjdGx5IF9ob3dfIGEgbGlzdCBpdGVtIGFuaW1hdGVzIGlzIHVwIHRvIHRoZSBpbmRpdmlkdWFsIHRyYW5zaXRpb25cbiAqIGNvbXBvbmVudC4gVGhpcyBtZWFucyB5b3UgY2FuIG1peCBhbmQgbWF0Y2ggYW5pbWF0aW9ucyBhY3Jvc3MgZGlmZmVyZW50IGxpc3RcbiAqIGl0ZW1zLlxuICovXG5cbnZhciBUcmFuc2l0aW9uR3JvdXAgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoVHJhbnNpdGlvbkdyb3VwLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUcmFuc2l0aW9uR3JvdXAocHJvcHMsIGNvbnRleHQpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkgfHwgdGhpcztcblxuICAgIHZhciBoYW5kbGVFeGl0ZWQgPSBfdGhpcy5oYW5kbGVFeGl0ZWQuYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7IC8vIEluaXRpYWwgY2hpbGRyZW4gc2hvdWxkIGFsbCBiZSBlbnRlcmluZywgZGVwZW5kZW50IG9uIGFwcGVhclxuXG5cbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGNvbnRleHRWYWx1ZToge1xuICAgICAgICBpc01vdW50aW5nOiB0cnVlXG4gICAgICB9LFxuICAgICAgaGFuZGxlRXhpdGVkOiBoYW5kbGVFeGl0ZWQsXG4gICAgICBmaXJzdFJlbmRlcjogdHJ1ZVxuICAgIH07XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFRyYW5zaXRpb25Hcm91cC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5tb3VudGVkID0gdHJ1ZTtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGNvbnRleHRWYWx1ZToge1xuICAgICAgICBpc01vdW50aW5nOiBmYWxzZVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMubW91bnRlZCA9IGZhbHNlO1xuICB9O1xuXG4gIFRyYW5zaXRpb25Hcm91cC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMobmV4dFByb3BzLCBfcmVmKSB7XG4gICAgdmFyIHByZXZDaGlsZE1hcHBpbmcgPSBfcmVmLmNoaWxkcmVuLFxuICAgICAgICBoYW5kbGVFeGl0ZWQgPSBfcmVmLmhhbmRsZUV4aXRlZCxcbiAgICAgICAgZmlyc3RSZW5kZXIgPSBfcmVmLmZpcnN0UmVuZGVyO1xuICAgIHJldHVybiB7XG4gICAgICBjaGlsZHJlbjogZmlyc3RSZW5kZXIgPyBnZXRJbml0aWFsQ2hpbGRNYXBwaW5nKG5leHRQcm9wcywgaGFuZGxlRXhpdGVkKSA6IGdldE5leHRDaGlsZE1hcHBpbmcobmV4dFByb3BzLCBwcmV2Q2hpbGRNYXBwaW5nLCBoYW5kbGVFeGl0ZWQpLFxuICAgICAgZmlyc3RSZW5kZXI6IGZhbHNlXG4gICAgfTtcbiAgfSAvLyBub2RlIGlzIGB1bmRlZmluZWRgIHdoZW4gdXNlciBwcm92aWRlZCBgbm9kZVJlZmAgcHJvcFxuICA7XG5cbiAgX3Byb3RvLmhhbmRsZUV4aXRlZCA9IGZ1bmN0aW9uIGhhbmRsZUV4aXRlZChjaGlsZCwgbm9kZSkge1xuICAgIHZhciBjdXJyZW50Q2hpbGRNYXBwaW5nID0gZ2V0Q2hpbGRNYXBwaW5nKHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuICAgIGlmIChjaGlsZC5rZXkgaW4gY3VycmVudENoaWxkTWFwcGluZykgcmV0dXJuO1xuXG4gICAgaWYgKGNoaWxkLnByb3BzLm9uRXhpdGVkKSB7XG4gICAgICBjaGlsZC5wcm9wcy5vbkV4aXRlZChub2RlKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5tb3VudGVkKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgICB2YXIgY2hpbGRyZW4gPSBfZXh0ZW5kcyh7fSwgc3RhdGUuY2hpbGRyZW4pO1xuXG4gICAgICAgIGRlbGV0ZSBjaGlsZHJlbltjaGlsZC5rZXldO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgQ29tcG9uZW50ID0gX3RoaXMkcHJvcHMuY29tcG9uZW50LFxuICAgICAgICBjaGlsZEZhY3RvcnkgPSBfdGhpcyRwcm9wcy5jaGlsZEZhY3RvcnksXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImNvbXBvbmVudFwiLCBcImNoaWxkRmFjdG9yeVwiXSk7XG5cbiAgICB2YXIgY29udGV4dFZhbHVlID0gdGhpcy5zdGF0ZS5jb250ZXh0VmFsdWU7XG4gICAgdmFyIGNoaWxkcmVuID0gdmFsdWVzKHRoaXMuc3RhdGUuY2hpbGRyZW4pLm1hcChjaGlsZEZhY3RvcnkpO1xuICAgIGRlbGV0ZSBwcm9wcy5hcHBlYXI7XG4gICAgZGVsZXRlIHByb3BzLmVudGVyO1xuICAgIGRlbGV0ZSBwcm9wcy5leGl0O1xuXG4gICAgaWYgKENvbXBvbmVudCA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFRyYW5zaXRpb25Hcm91cENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgICAgdmFsdWU6IGNvbnRleHRWYWx1ZVxuICAgICAgfSwgY2hpbGRyZW4pO1xuICAgIH1cblxuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uR3JvdXBDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZTogY29udGV4dFZhbHVlXG4gICAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBwcm9wcywgY2hpbGRyZW4pKTtcbiAgfTtcblxuICByZXR1cm4gVHJhbnNpdGlvbkdyb3VwO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5UcmFuc2l0aW9uR3JvdXAucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogYDxUcmFuc2l0aW9uR3JvdXA+YCByZW5kZXJzIGEgYDxkaXY+YCBieSBkZWZhdWx0LiBZb3UgY2FuIGNoYW5nZSB0aGlzXG4gICAqIGJlaGF2aW9yIGJ5IHByb3ZpZGluZyBhIGBjb21wb25lbnRgIHByb3AuXG4gICAqIElmIHlvdSB1c2UgUmVhY3QgdjE2KyBhbmQgd291bGQgbGlrZSB0byBhdm9pZCBhIHdyYXBwaW5nIGA8ZGl2PmAgZWxlbWVudFxuICAgKiB5b3UgY2FuIHBhc3MgaW4gYGNvbXBvbmVudD17bnVsbH1gLiBUaGlzIGlzIHVzZWZ1bCBpZiB0aGUgd3JhcHBpbmcgZGl2XG4gICAqIGJvcmtzIHlvdXIgY3NzIHN0eWxlcy5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmFueSxcblxuICAvKipcbiAgICogQSBzZXQgb2YgYDxUcmFuc2l0aW9uPmAgY29tcG9uZW50cywgdGhhdCBhcmUgdG9nZ2xlZCBgaW5gIGFuZCBvdXQgYXMgdGhleVxuICAgKiBsZWF2ZS4gdGhlIGA8VHJhbnNpdGlvbkdyb3VwPmAgd2lsbCBpbmplY3Qgc3BlY2lmaWMgdHJhbnNpdGlvbiBwcm9wcywgc29cbiAgICogcmVtZW1iZXIgdG8gc3ByZWFkIHRoZW0gdGhyb3VnaCBpZiB5b3UgYXJlIHdyYXBwaW5nIHRoZSBgPFRyYW5zaXRpb24+YCBhc1xuICAgKiB3aXRoIG91ciBgPEZhZGU+YCBleGFtcGxlLlxuICAgKlxuICAgKiBXaGlsZSB0aGlzIGNvbXBvbmVudCBpcyBtZWFudCBmb3IgbXVsdGlwbGUgYFRyYW5zaXRpb25gIG9yIGBDU1NUcmFuc2l0aW9uYFxuICAgKiBjaGlsZHJlbiwgc29tZXRpbWVzIHlvdSBtYXkgd2FudCB0byBoYXZlIGEgc2luZ2xlIHRyYW5zaXRpb24gY2hpbGQgd2l0aFxuICAgKiBjb250ZW50IHRoYXQgeW91IHdhbnQgdG8gYmUgdHJhbnNpdGlvbmVkIG91dCBhbmQgaW4gd2hlbiB5b3UgY2hhbmdlIGl0XG4gICAqIChlLmcuIHJvdXRlcywgaW1hZ2VzIGV0Yy4pIEluIHRoYXQgY2FzZSB5b3UgY2FuIGNoYW5nZSB0aGUgYGtleWAgcHJvcCBvZlxuICAgKiB0aGUgdHJhbnNpdGlvbiBjaGlsZCBhcyB5b3UgY2hhbmdlIGl0cyBjb250ZW50LCB0aGlzIHdpbGwgY2F1c2VcbiAgICogYFRyYW5zaXRpb25Hcm91cGAgdG8gdHJhbnNpdGlvbiB0aGUgY2hpbGQgb3V0IGFuZCBiYWNrIGluLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBBIGNvbnZlbmllbmNlIHByb3AgdGhhdCBlbmFibGVzIG9yIGRpc2FibGVzIGFwcGVhciBhbmltYXRpb25zXG4gICAqIGZvciBhbGwgY2hpbGRyZW4uIE5vdGUgdGhhdCBzcGVjaWZ5aW5nIHRoaXMgd2lsbCBvdmVycmlkZSBhbnkgZGVmYXVsdHMgc2V0XG4gICAqIG9uIGluZGl2aWR1YWwgY2hpbGRyZW4gVHJhbnNpdGlvbnMuXG4gICAqL1xuICBhcHBlYXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBBIGNvbnZlbmllbmNlIHByb3AgdGhhdCBlbmFibGVzIG9yIGRpc2FibGVzIGVudGVyIGFuaW1hdGlvbnNcbiAgICogZm9yIGFsbCBjaGlsZHJlbi4gTm90ZSB0aGF0IHNwZWNpZnlpbmcgdGhpcyB3aWxsIG92ZXJyaWRlIGFueSBkZWZhdWx0cyBzZXRcbiAgICogb24gaW5kaXZpZHVhbCBjaGlsZHJlbiBUcmFuc2l0aW9ucy5cbiAgICovXG4gIGVudGVyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQSBjb252ZW5pZW5jZSBwcm9wIHRoYXQgZW5hYmxlcyBvciBkaXNhYmxlcyBleGl0IGFuaW1hdGlvbnNcbiAgICogZm9yIGFsbCBjaGlsZHJlbi4gTm90ZSB0aGF0IHNwZWNpZnlpbmcgdGhpcyB3aWxsIG92ZXJyaWRlIGFueSBkZWZhdWx0cyBzZXRcbiAgICogb24gaW5kaXZpZHVhbCBjaGlsZHJlbiBUcmFuc2l0aW9ucy5cbiAgICovXG4gIGV4aXQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBZb3UgbWF5IG5lZWQgdG8gYXBwbHkgcmVhY3RpdmUgdXBkYXRlcyB0byBhIGNoaWxkIGFzIGl0IGlzIGV4aXRpbmcuXG4gICAqIFRoaXMgaXMgZ2VuZXJhbGx5IGRvbmUgYnkgdXNpbmcgYGNsb25lRWxlbWVudGAgaG93ZXZlciBpbiB0aGUgY2FzZSBvZiBhbiBleGl0aW5nXG4gICAqIGNoaWxkIHRoZSBlbGVtZW50IGhhcyBhbHJlYWR5IGJlZW4gcmVtb3ZlZCBhbmQgbm90IGFjY2Vzc2libGUgdG8gdGhlIGNvbnN1bWVyLlxuICAgKlxuICAgKiBJZiB5b3UgZG8gbmVlZCB0byB1cGRhdGUgYSBjaGlsZCBhcyBpdCBsZWF2ZXMgeW91IGNhbiBwcm92aWRlIGEgYGNoaWxkRmFjdG9yeWBcbiAgICogdG8gd3JhcCBldmVyeSBjaGlsZCwgZXZlbiB0aGUgb25lcyB0aGF0IGFyZSBsZWF2aW5nLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihjaGlsZDogUmVhY3RFbGVtZW50KSAtPiBSZWFjdEVsZW1lbnRcbiAgICovXG4gIGNoaWxkRmFjdG9yeTogUHJvcFR5cGVzLmZ1bmNcbn0gOiB7fTtcblRyYW5zaXRpb25Hcm91cC5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5leHBvcnQgZGVmYXVsdCBUcmFuc2l0aW9uR3JvdXA7IiwiZXhwb3J0IGNvbnN0IHJlZmxvdyA9IG5vZGUgPT4gbm9kZS5zY3JvbGxUb3A7XG5leHBvcnQgZnVuY3Rpb24gZ2V0VHJhbnNpdGlvblByb3BzKHByb3BzLCBvcHRpb25zKSB7XG4gIHZhciBfc3R5bGUkdHJhbnNpdGlvbkR1cmEsIF9zdHlsZSR0cmFuc2l0aW9uVGltaTtcbiAgY29uc3Qge1xuICAgIHRpbWVvdXQsXG4gICAgZWFzaW5nLFxuICAgIHN0eWxlID0ge31cbiAgfSA9IHByb3BzO1xuICByZXR1cm4ge1xuICAgIGR1cmF0aW9uOiAoX3N0eWxlJHRyYW5zaXRpb25EdXJhID0gc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uKSAhPSBudWxsID8gX3N0eWxlJHRyYW5zaXRpb25EdXJhIDogdHlwZW9mIHRpbWVvdXQgPT09ICdudW1iZXInID8gdGltZW91dCA6IHRpbWVvdXRbb3B0aW9ucy5tb2RlXSB8fCAwLFxuICAgIGVhc2luZzogKF9zdHlsZSR0cmFuc2l0aW9uVGltaSA9IHN0eWxlLnRyYW5zaXRpb25UaW1pbmdGdW5jdGlvbikgIT0gbnVsbCA/IF9zdHlsZSR0cmFuc2l0aW9uVGltaSA6IHR5cGVvZiBlYXNpbmcgPT09ICdvYmplY3QnID8gZWFzaW5nW29wdGlvbnMubW9kZV0gOiBlYXNpbmcsXG4gICAgZGVsYXk6IHN0eWxlLnRyYW5zaXRpb25EZWxheVxuICB9O1xufSIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29sbGFwc2VVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUNvbGxhcHNlJywgc2xvdCk7XG59XG5jb25zdCBjb2xsYXBzZUNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlDb2xsYXBzZScsIFsncm9vdCcsICdob3Jpem9udGFsJywgJ3ZlcnRpY2FsJywgJ2VudGVyZWQnLCAnaGlkZGVuJywgJ3dyYXBwZXInLCAnd3JhcHBlcklubmVyJ10pO1xuZXhwb3J0IGRlZmF1bHQgY29sbGFwc2VDbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImFkZEVuZExpc3RlbmVyXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xsYXBzZWRTaXplXCIsIFwiY29tcG9uZW50XCIsIFwiZWFzaW5nXCIsIFwiaW5cIiwgXCJvbkVudGVyXCIsIFwib25FbnRlcmVkXCIsIFwib25FbnRlcmluZ1wiLCBcIm9uRXhpdFwiLCBcIm9uRXhpdGVkXCIsIFwib25FeGl0aW5nXCIsIFwib3JpZW50YXRpb25cIiwgXCJzdHlsZVwiLCBcInRpbWVvdXRcIiwgXCJUcmFuc2l0aW9uQ29tcG9uZW50XCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgVHJhbnNpdGlvbiB9IGZyb20gJ3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAnO1xuaW1wb3J0IHVzZVRpbWVvdXQgZnJvbSAnQG11aS91dGlscy91c2VUaW1lb3V0JztcbmltcG9ydCBlbGVtZW50VHlwZUFjY2VwdGluZ1JlZiBmcm9tICdAbXVpL3V0aWxzL2VsZW1lbnRUeXBlQWNjZXB0aW5nUmVmJztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgeyBkdXJhdGlvbiB9IGZyb20gJy4uL3N0eWxlcy9jcmVhdGVUcmFuc2l0aW9ucyc7XG5pbXBvcnQgeyBnZXRUcmFuc2l0aW9uUHJvcHMgfSBmcm9tICcuLi90cmFuc2l0aW9ucy91dGlscyc7XG5pbXBvcnQgdXNlVGhlbWUgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lJztcbmltcG9ydCB7IHVzZUZvcmtSZWYgfSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgeyBnZXRDb2xsYXBzZVV0aWxpdHlDbGFzcyB9IGZyb20gJy4vY29sbGFwc2VDbGFzc2VzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgb3JpZW50YXRpb24sXG4gICAgY2xhc3Nlc1xuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgYCR7b3JpZW50YXRpb259YF0sXG4gICAgZW50ZXJlZDogWydlbnRlcmVkJ10sXG4gICAgaGlkZGVuOiBbJ2hpZGRlbiddLFxuICAgIHdyYXBwZXI6IFsnd3JhcHBlcicsIGAke29yaWVudGF0aW9ufWBdLFxuICAgIHdyYXBwZXJJbm5lcjogWyd3cmFwcGVySW5uZXInLCBgJHtvcmllbnRhdGlvbn1gXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldENvbGxhcHNlVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBDb2xsYXBzZVJvb3QgPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aUNvbGxhcHNlJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLnJvb3QsIHN0eWxlc1tvd25lclN0YXRlLm9yaWVudGF0aW9uXSwgb3duZXJTdGF0ZS5zdGF0ZSA9PT0gJ2VudGVyZWQnICYmIHN0eWxlcy5lbnRlcmVkLCBvd25lclN0YXRlLnN0YXRlID09PSAnZXhpdGVkJyAmJiAhb3duZXJTdGF0ZS5pbiAmJiBvd25lclN0YXRlLmNvbGxhcHNlZFNpemUgPT09ICcwcHgnICYmIHN0eWxlcy5oaWRkZW5dO1xuICB9XG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICBoZWlnaHQ6IDAsXG4gIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdoZWlnaHQnKVxufSwgb3duZXJTdGF0ZS5vcmllbnRhdGlvbiA9PT0gJ2hvcml6b250YWwnICYmIHtcbiAgaGVpZ2h0OiAnYXV0bycsXG4gIHdpZHRoOiAwLFxuICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ3dpZHRoJylcbn0sIG93bmVyU3RhdGUuc3RhdGUgPT09ICdlbnRlcmVkJyAmJiBfZXh0ZW5kcyh7XG4gIGhlaWdodDogJ2F1dG8nLFxuICBvdmVyZmxvdzogJ3Zpc2libGUnXG59LCBvd25lclN0YXRlLm9yaWVudGF0aW9uID09PSAnaG9yaXpvbnRhbCcgJiYge1xuICB3aWR0aDogJ2F1dG8nXG59KSwgb3duZXJTdGF0ZS5zdGF0ZSA9PT0gJ2V4aXRlZCcgJiYgIW93bmVyU3RhdGUuaW4gJiYgb3duZXJTdGF0ZS5jb2xsYXBzZWRTaXplID09PSAnMHB4JyAmJiB7XG4gIHZpc2liaWxpdHk6ICdoaWRkZW4nXG59KSk7XG5jb25zdCBDb2xsYXBzZVdyYXBwZXIgPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aUNvbGxhcHNlJyxcbiAgc2xvdDogJ1dyYXBwZXInLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy53cmFwcGVyXG59KSgoe1xuICBvd25lclN0YXRlXG59KSA9PiBfZXh0ZW5kcyh7XG4gIC8vIEhhY2sgdG8gZ2V0IGNoaWxkcmVuIHdpdGggYSBuZWdhdGl2ZSBtYXJnaW4gdG8gbm90IGZhbHNpZnkgdGhlIGhlaWdodCBjb21wdXRhdGlvbi5cbiAgZGlzcGxheTogJ2ZsZXgnLFxuICB3aWR0aDogJzEwMCUnXG59LCBvd25lclN0YXRlLm9yaWVudGF0aW9uID09PSAnaG9yaXpvbnRhbCcgJiYge1xuICB3aWR0aDogJ2F1dG8nLFxuICBoZWlnaHQ6ICcxMDAlJ1xufSkpO1xuY29uc3QgQ29sbGFwc2VXcmFwcGVySW5uZXIgPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aUNvbGxhcHNlJyxcbiAgc2xvdDogJ1dyYXBwZXJJbm5lcicsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLndyYXBwZXJJbm5lclxufSkoKHtcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICB3aWR0aDogJzEwMCUnXG59LCBvd25lclN0YXRlLm9yaWVudGF0aW9uID09PSAnaG9yaXpvbnRhbCcgJiYge1xuICB3aWR0aDogJ2F1dG8nLFxuICBoZWlnaHQ6ICcxMDAlJ1xufSkpO1xuXG4vKipcbiAqIFRoZSBDb2xsYXBzZSB0cmFuc2l0aW9uIGlzIHVzZWQgYnkgdGhlXG4gKiBbVmVydGljYWwgU3RlcHBlcl0oL21hdGVyaWFsLXVpL3JlYWN0LXN0ZXBwZXIvI3ZlcnRpY2FsLXN0ZXBwZXIpIFN0ZXBDb250ZW50IGNvbXBvbmVudC5cbiAqIEl0IHVzZXMgW3JlYWN0LXRyYW5zaXRpb24tZ3JvdXBdKGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXApIGludGVybmFsbHkuXG4gKi9cbmNvbnN0IENvbGxhcHNlID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQ29sbGFwc2UoaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aUNvbGxhcHNlJ1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgYWRkRW5kTGlzdGVuZXIsXG4gICAgICBjaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNvbGxhcHNlZFNpemU6IGNvbGxhcHNlZFNpemVQcm9wID0gJzBweCcsXG4gICAgICBjb21wb25lbnQsXG4gICAgICBlYXNpbmcsXG4gICAgICBpbjogaW5Qcm9wLFxuICAgICAgb25FbnRlcixcbiAgICAgIG9uRW50ZXJlZCxcbiAgICAgIG9uRW50ZXJpbmcsXG4gICAgICBvbkV4aXQsXG4gICAgICBvbkV4aXRlZCxcbiAgICAgIG9uRXhpdGluZyxcbiAgICAgIG9yaWVudGF0aW9uID0gJ3ZlcnRpY2FsJyxcbiAgICAgIHN0eWxlLFxuICAgICAgdGltZW91dCA9IGR1cmF0aW9uLnN0YW5kYXJkLFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L3Byb3AtdHlwZXNcbiAgICAgIFRyYW5zaXRpb25Db21wb25lbnQgPSBUcmFuc2l0aW9uXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBvcmllbnRhdGlvbixcbiAgICBjb2xsYXBzZWRTaXplOiBjb2xsYXBzZWRTaXplUHJvcFxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICBjb25zdCB0aGVtZSA9IHVzZVRoZW1lKCk7XG4gIGNvbnN0IHRpbWVyID0gdXNlVGltZW91dCgpO1xuICBjb25zdCB3cmFwcGVyUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCBhdXRvVHJhbnNpdGlvbkR1cmF0aW9uID0gUmVhY3QudXNlUmVmKCk7XG4gIGNvbnN0IGNvbGxhcHNlZFNpemUgPSB0eXBlb2YgY29sbGFwc2VkU2l6ZVByb3AgPT09ICdudW1iZXInID8gYCR7Y29sbGFwc2VkU2l6ZVByb3B9cHhgIDogY29sbGFwc2VkU2l6ZVByb3A7XG4gIGNvbnN0IGlzSG9yaXpvbnRhbCA9IG9yaWVudGF0aW9uID09PSAnaG9yaXpvbnRhbCc7XG4gIGNvbnN0IHNpemUgPSBpc0hvcml6b250YWwgPyAnd2lkdGgnIDogJ2hlaWdodCc7XG4gIGNvbnN0IG5vZGVSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIGNvbnN0IGhhbmRsZVJlZiA9IHVzZUZvcmtSZWYocmVmLCBub2RlUmVmKTtcbiAgY29uc3Qgbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayA9IGNhbGxiYWNrID0+IG1heWJlSXNBcHBlYXJpbmcgPT4ge1xuICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgY29uc3Qgbm9kZSA9IG5vZGVSZWYuY3VycmVudDtcblxuICAgICAgLy8gb25FbnRlclh4eCBhbmQgb25FeGl0WHh4IGNhbGxiYWNrcyBoYXZlIGEgZGlmZmVyZW50IGFyZ3VtZW50cy5sZW5ndGggdmFsdWUuXG4gICAgICBpZiAobWF5YmVJc0FwcGVhcmluZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNhbGxiYWNrKG5vZGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FsbGJhY2sobm9kZSwgbWF5YmVJc0FwcGVhcmluZyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBjb25zdCBnZXRXcmFwcGVyU2l6ZSA9ICgpID0+IHdyYXBwZXJSZWYuY3VycmVudCA/IHdyYXBwZXJSZWYuY3VycmVudFtpc0hvcml6b250YWwgPyAnY2xpZW50V2lkdGgnIDogJ2NsaWVudEhlaWdodCddIDogMDtcbiAgY29uc3QgaGFuZGxlRW50ZXIgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKChub2RlLCBpc0FwcGVhcmluZykgPT4ge1xuICAgIGlmICh3cmFwcGVyUmVmLmN1cnJlbnQgJiYgaXNIb3Jpem9udGFsKSB7XG4gICAgICAvLyBTZXQgYWJzb2x1dGUgcG9zaXRpb24gdG8gZ2V0IHRoZSBzaXplIG9mIGNvbGxhcHNlZCBjb250ZW50XG4gICAgICB3cmFwcGVyUmVmLmN1cnJlbnQuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgIH1cbiAgICBub2RlLnN0eWxlW3NpemVdID0gY29sbGFwc2VkU2l6ZTtcbiAgICBpZiAob25FbnRlcikge1xuICAgICAgb25FbnRlcihub2RlLCBpc0FwcGVhcmluZyk7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgaGFuZGxlRW50ZXJpbmcgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKChub2RlLCBpc0FwcGVhcmluZykgPT4ge1xuICAgIGNvbnN0IHdyYXBwZXJTaXplID0gZ2V0V3JhcHBlclNpemUoKTtcbiAgICBpZiAod3JhcHBlclJlZi5jdXJyZW50ICYmIGlzSG9yaXpvbnRhbCkge1xuICAgICAgLy8gQWZ0ZXIgdGhlIHNpemUgaXMgcmVhZCByZXNldCB0aGUgcG9zaXRpb24gYmFjayB0byBkZWZhdWx0XG4gICAgICB3cmFwcGVyUmVmLmN1cnJlbnQuc3R5bGUucG9zaXRpb24gPSAnJztcbiAgICB9XG4gICAgY29uc3Qge1xuICAgICAgZHVyYXRpb246IHRyYW5zaXRpb25EdXJhdGlvbixcbiAgICAgIGVhc2luZzogdHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uXG4gICAgfSA9IGdldFRyYW5zaXRpb25Qcm9wcyh7XG4gICAgICBzdHlsZSxcbiAgICAgIHRpbWVvdXQsXG4gICAgICBlYXNpbmdcbiAgICB9LCB7XG4gICAgICBtb2RlOiAnZW50ZXInXG4gICAgfSk7XG4gICAgaWYgKHRpbWVvdXQgPT09ICdhdXRvJykge1xuICAgICAgY29uc3QgZHVyYXRpb24yID0gdGhlbWUudHJhbnNpdGlvbnMuZ2V0QXV0b0hlaWdodER1cmF0aW9uKHdyYXBwZXJTaXplKTtcbiAgICAgIG5vZGUuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gYCR7ZHVyYXRpb24yfW1zYDtcbiAgICAgIGF1dG9UcmFuc2l0aW9uRHVyYXRpb24uY3VycmVudCA9IGR1cmF0aW9uMjtcbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZS5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSB0eXBlb2YgdHJhbnNpdGlvbkR1cmF0aW9uID09PSAnc3RyaW5nJyA/IHRyYW5zaXRpb25EdXJhdGlvbiA6IGAke3RyYW5zaXRpb25EdXJhdGlvbn1tc2A7XG4gICAgfVxuICAgIG5vZGUuc3R5bGVbc2l6ZV0gPSBgJHt3cmFwcGVyU2l6ZX1weGA7XG4gICAgbm9kZS5zdHlsZS50cmFuc2l0aW9uVGltaW5nRnVuY3Rpb24gPSB0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb247XG4gICAgaWYgKG9uRW50ZXJpbmcpIHtcbiAgICAgIG9uRW50ZXJpbmcobm9kZSwgaXNBcHBlYXJpbmcpO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGhhbmRsZUVudGVyZWQgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKChub2RlLCBpc0FwcGVhcmluZykgPT4ge1xuICAgIG5vZGUuc3R5bGVbc2l6ZV0gPSAnYXV0byc7XG4gICAgaWYgKG9uRW50ZXJlZCkge1xuICAgICAgb25FbnRlcmVkKG5vZGUsIGlzQXBwZWFyaW5nKTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBoYW5kbGVFeGl0ID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhub2RlID0+IHtcbiAgICBub2RlLnN0eWxlW3NpemVdID0gYCR7Z2V0V3JhcHBlclNpemUoKX1weGA7XG4gICAgaWYgKG9uRXhpdCkge1xuICAgICAgb25FeGl0KG5vZGUpO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGhhbmRsZUV4aXRlZCA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2sob25FeGl0ZWQpO1xuICBjb25zdCBoYW5kbGVFeGl0aW5nID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhub2RlID0+IHtcbiAgICBjb25zdCB3cmFwcGVyU2l6ZSA9IGdldFdyYXBwZXJTaXplKCk7XG4gICAgY29uc3Qge1xuICAgICAgZHVyYXRpb246IHRyYW5zaXRpb25EdXJhdGlvbixcbiAgICAgIGVhc2luZzogdHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uXG4gICAgfSA9IGdldFRyYW5zaXRpb25Qcm9wcyh7XG4gICAgICBzdHlsZSxcbiAgICAgIHRpbWVvdXQsXG4gICAgICBlYXNpbmdcbiAgICB9LCB7XG4gICAgICBtb2RlOiAnZXhpdCdcbiAgICB9KTtcbiAgICBpZiAodGltZW91dCA9PT0gJ2F1dG8nKSB7XG4gICAgICAvLyBUT0RPOiByZW5hbWUgZ2V0QXV0b0hlaWdodER1cmF0aW9uIHRvIHNvbWV0aGluZyBtb3JlIGdlbmVyaWMgKHdpZHRoIHN1cHBvcnQpXG4gICAgICAvLyBBY3R1YWxseSBpdCBqdXN0IGNhbGN1bGF0ZXMgYW5pbWF0aW9uIGR1cmF0aW9uIGJhc2VkIG9uIHNpemVcbiAgICAgIGNvbnN0IGR1cmF0aW9uMiA9IHRoZW1lLnRyYW5zaXRpb25zLmdldEF1dG9IZWlnaHREdXJhdGlvbih3cmFwcGVyU2l6ZSk7XG4gICAgICBub2RlLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IGAke2R1cmF0aW9uMn1tc2A7XG4gICAgICBhdXRvVHJhbnNpdGlvbkR1cmF0aW9uLmN1cnJlbnQgPSBkdXJhdGlvbjI7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5vZGUuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gdHlwZW9mIHRyYW5zaXRpb25EdXJhdGlvbiA9PT0gJ3N0cmluZycgPyB0cmFuc2l0aW9uRHVyYXRpb24gOiBgJHt0cmFuc2l0aW9uRHVyYXRpb259bXNgO1xuICAgIH1cbiAgICBub2RlLnN0eWxlW3NpemVdID0gY29sbGFwc2VkU2l6ZTtcbiAgICBub2RlLnN0eWxlLnRyYW5zaXRpb25UaW1pbmdGdW5jdGlvbiA9IHRyYW5zaXRpb25UaW1pbmdGdW5jdGlvbjtcbiAgICBpZiAob25FeGl0aW5nKSB7XG4gICAgICBvbkV4aXRpbmcobm9kZSk7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgaGFuZGxlQWRkRW5kTGlzdGVuZXIgPSBuZXh0ID0+IHtcbiAgICBpZiAodGltZW91dCA9PT0gJ2F1dG8nKSB7XG4gICAgICB0aW1lci5zdGFydChhdXRvVHJhbnNpdGlvbkR1cmF0aW9uLmN1cnJlbnQgfHwgMCwgbmV4dCk7XG4gICAgfVxuICAgIGlmIChhZGRFbmRMaXN0ZW5lcikge1xuICAgICAgLy8gT2xkIGNhbGwgc2lnbmF0dXJlIGJlZm9yZSBgcmVhY3QtdHJhbnNpdGlvbi1ncm91cGAgaW1wbGVtZW50ZWQgYG5vZGVSZWZgXG4gICAgICBhZGRFbmRMaXN0ZW5lcihub2RlUmVmLmN1cnJlbnQsIG5leHQpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFRyYW5zaXRpb25Db21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBpbjogaW5Qcm9wLFxuICAgIG9uRW50ZXI6IGhhbmRsZUVudGVyLFxuICAgIG9uRW50ZXJlZDogaGFuZGxlRW50ZXJlZCxcbiAgICBvbkVudGVyaW5nOiBoYW5kbGVFbnRlcmluZyxcbiAgICBvbkV4aXQ6IGhhbmRsZUV4aXQsXG4gICAgb25FeGl0ZWQ6IGhhbmRsZUV4aXRlZCxcbiAgICBvbkV4aXRpbmc6IGhhbmRsZUV4aXRpbmcsXG4gICAgYWRkRW5kTGlzdGVuZXI6IGhhbmRsZUFkZEVuZExpc3RlbmVyLFxuICAgIG5vZGVSZWY6IG5vZGVSZWYsXG4gICAgdGltZW91dDogdGltZW91dCA9PT0gJ2F1dG8nID8gbnVsbCA6IHRpbWVvdXRcbiAgfSwgb3RoZXIsIHtcbiAgICBjaGlsZHJlbjogKHN0YXRlLCBjaGlsZFByb3BzKSA9PiAvKiNfX1BVUkVfXyovX2pzeChDb2xsYXBzZVJvb3QsIF9leHRlbmRzKHtcbiAgICAgIGFzOiBjb21wb25lbnQsXG4gICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUsIHtcbiAgICAgICAgJ2VudGVyZWQnOiBjbGFzc2VzLmVudGVyZWQsXG4gICAgICAgICdleGl0ZWQnOiAhaW5Qcm9wICYmIGNvbGxhcHNlZFNpemUgPT09ICcwcHgnICYmIGNsYXNzZXMuaGlkZGVuXG4gICAgICB9W3N0YXRlXSksXG4gICAgICBzdHlsZTogX2V4dGVuZHMoe1xuICAgICAgICBbaXNIb3Jpem9udGFsID8gJ21pbldpZHRoJyA6ICdtaW5IZWlnaHQnXTogY29sbGFwc2VkU2l6ZVxuICAgICAgfSwgc3R5bGUpLFxuICAgICAgcmVmOiBoYW5kbGVSZWZcbiAgICB9LCBjaGlsZFByb3BzLCB7XG4gICAgICAvLyBgb3duZXJTdGF0ZWAgaXMgc2V0IGFmdGVyIGBjaGlsZFByb3BzYCB0byBvdmVycmlkZSBhbnkgZXhpc3RpbmcgYG93bmVyU3RhdGVgIHByb3BlcnR5IGluIGBjaGlsZFByb3BzYFxuICAgICAgLy8gdGhhdCBtaWdodCBoYXZlIGJlZW4gZm9yd2FyZGVkIGZyb20gdGhlIFRyYW5zaXRpb24gY29tcG9uZW50LlxuICAgICAgb3duZXJTdGF0ZTogX2V4dGVuZHMoe30sIG93bmVyU3RhdGUsIHtcbiAgICAgICAgc3RhdGVcbiAgICAgIH0pLFxuICAgICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9fanN4KENvbGxhcHNlV3JhcHBlciwge1xuICAgICAgICBvd25lclN0YXRlOiBfZXh0ZW5kcyh7fSwgb3duZXJTdGF0ZSwge1xuICAgICAgICAgIHN0YXRlXG4gICAgICAgIH0pLFxuICAgICAgICBjbGFzc05hbWU6IGNsYXNzZXMud3JhcHBlcixcbiAgICAgICAgcmVmOiB3cmFwcGVyUmVmLFxuICAgICAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goQ29sbGFwc2VXcmFwcGVySW5uZXIsIHtcbiAgICAgICAgICBvd25lclN0YXRlOiBfZXh0ZW5kcyh7fSwgb3duZXJTdGF0ZSwge1xuICAgICAgICAgICAgc3RhdGVcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzZXMud3JhcHBlcklubmVyLFxuICAgICAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9KSlcbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBDb2xsYXBzZS5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBBZGQgYSBjdXN0b20gdHJhbnNpdGlvbiBlbmQgdHJpZ2dlci4gQ2FsbGVkIHdpdGggdGhlIHRyYW5zaXRpb25pbmcgRE9NXG4gICAqIG5vZGUgYW5kIGEgZG9uZSBjYWxsYmFjay4gQWxsb3dzIGZvciBtb3JlIGZpbmUgZ3JhaW5lZCB0cmFuc2l0aW9uIGVuZFxuICAgKiBsb2dpYy4gTm90ZTogVGltZW91dHMgYXJlIHN0aWxsIHVzZWQgYXMgYSBmYWxsYmFjayBpZiBwcm92aWRlZC5cbiAgICovXG4gIGFkZEVuZExpc3RlbmVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG5vZGUgdG8gYmUgY29sbGFwc2VkLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSB3aWR0aCAoaG9yaXpvbnRhbCkgb3IgaGVpZ2h0ICh2ZXJ0aWNhbCkgb2YgdGhlIGNvbnRhaW5lciB3aGVuIGNvbGxhcHNlZC5cbiAgICogQGRlZmF1bHQgJzBweCdcbiAgICovXG4gIGNvbGxhcHNlZFNpemU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogZWxlbWVudFR5cGVBY2NlcHRpbmdSZWYsXG4gIC8qKlxuICAgKiBUaGUgdHJhbnNpdGlvbiB0aW1pbmcgZnVuY3Rpb24uXG4gICAqIFlvdSBtYXkgc3BlY2lmeSBhIHNpbmdsZSBlYXNpbmcgb3IgYSBvYmplY3QgY29udGFpbmluZyBlbnRlciBhbmQgZXhpdCB2YWx1ZXMuXG4gICAqL1xuICBlYXNpbmc6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zaGFwZSh7XG4gICAgZW50ZXI6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZXhpdDogUHJvcFR5cGVzLnN0cmluZ1xuICB9KSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IHdpbGwgdHJhbnNpdGlvbiBpbi5cbiAgICovXG4gIGluOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FbnRlcmVkOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRW50ZXJpbmc6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FeGl0OiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRXhpdGVkOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRXhpdGluZzogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBUaGUgdHJhbnNpdGlvbiBvcmllbnRhdGlvbi5cbiAgICogQGRlZmF1bHQgJ3ZlcnRpY2FsJ1xuICAgKi9cbiAgb3JpZW50YXRpb246IFByb3BUeXBlcy5vbmVPZihbJ2hvcml6b250YWwnLCAndmVydGljYWwnXSksXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgLyoqXG4gICAqIFRoZSBkdXJhdGlvbiBmb3IgdGhlIHRyYW5zaXRpb24sIGluIG1pbGxpc2Vjb25kcy5cbiAgICogWW91IG1heSBzcGVjaWZ5IGEgc2luZ2xlIHRpbWVvdXQgZm9yIGFsbCB0cmFuc2l0aW9ucywgb3IgaW5kaXZpZHVhbGx5IHdpdGggYW4gb2JqZWN0LlxuICAgKlxuICAgKiBTZXQgdG8gJ2F1dG8nIHRvIGF1dG9tYXRpY2FsbHkgY2FsY3VsYXRlIHRyYW5zaXRpb24gdGltZSBiYXNlZCBvbiBoZWlnaHQuXG4gICAqIEBkZWZhdWx0IGR1cmF0aW9uLnN0YW5kYXJkXG4gICAqL1xuICB0aW1lb3V0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydhdXRvJ10pLCBQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGFwcGVhcjogUHJvcFR5cGVzLm51bWJlcixcbiAgICBlbnRlcjogUHJvcFR5cGVzLm51bWJlcixcbiAgICBleGl0OiBQcm9wVHlwZXMubnVtYmVyXG4gIH0pXSlcbn0gOiB2b2lkIDA7XG5Db2xsYXBzZS5tdWlTdXBwb3J0QXV0byA9IHRydWU7XG5leHBvcnQgZGVmYXVsdCBDb2xsYXBzZTsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFBhcGVyVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlQYXBlcicsIHNsb3QpO1xufVxuY29uc3QgcGFwZXJDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpUGFwZXInLCBbJ3Jvb3QnLCAncm91bmRlZCcsICdvdXRsaW5lZCcsICdlbGV2YXRpb24nLCAnZWxldmF0aW9uMCcsICdlbGV2YXRpb24xJywgJ2VsZXZhdGlvbjInLCAnZWxldmF0aW9uMycsICdlbGV2YXRpb240JywgJ2VsZXZhdGlvbjUnLCAnZWxldmF0aW9uNicsICdlbGV2YXRpb243JywgJ2VsZXZhdGlvbjgnLCAnZWxldmF0aW9uOScsICdlbGV2YXRpb24xMCcsICdlbGV2YXRpb24xMScsICdlbGV2YXRpb24xMicsICdlbGV2YXRpb24xMycsICdlbGV2YXRpb24xNCcsICdlbGV2YXRpb24xNScsICdlbGV2YXRpb24xNicsICdlbGV2YXRpb24xNycsICdlbGV2YXRpb24xOCcsICdlbGV2YXRpb24xOScsICdlbGV2YXRpb24yMCcsICdlbGV2YXRpb24yMScsICdlbGV2YXRpb24yMicsICdlbGV2YXRpb24yMycsICdlbGV2YXRpb24yNCddKTtcbmV4cG9ydCBkZWZhdWx0IHBhcGVyQ2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJlbGV2YXRpb25cIiwgXCJzcXVhcmVcIiwgXCJ2YXJpYW50XCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IGludGVnZXJQcm9wVHlwZSBmcm9tICdAbXVpL3V0aWxzL2ludGVnZXJQcm9wVHlwZSc7XG5pbXBvcnQgY2hhaW5Qcm9wVHlwZXMgZnJvbSAnQG11aS91dGlscy9jaGFpblByb3BUeXBlcyc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgeyBhbHBoYSB9IGZyb20gJ0BtdWkvc3lzdGVtL2NvbG9yTWFuaXB1bGF0b3InO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCBnZXRPdmVybGF5QWxwaGEgZnJvbSAnLi4vc3R5bGVzL2dldE92ZXJsYXlBbHBoYSc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgdXNlVGhlbWUgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lJztcbmltcG9ydCB7IGdldFBhcGVyVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9wYXBlckNsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBzcXVhcmUsXG4gICAgZWxldmF0aW9uLFxuICAgIHZhcmlhbnQsXG4gICAgY2xhc3Nlc1xuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgdmFyaWFudCwgIXNxdWFyZSAmJiAncm91bmRlZCcsIHZhcmlhbnQgPT09ICdlbGV2YXRpb24nICYmIGBlbGV2YXRpb24ke2VsZXZhdGlvbn1gXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldFBhcGVyVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBQYXBlclJvb3QgPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aVBhcGVyJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLnJvb3QsIHN0eWxlc1tvd25lclN0YXRlLnZhcmlhbnRdLCAhb3duZXJTdGF0ZS5zcXVhcmUgJiYgc3R5bGVzLnJvdW5kZWQsIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2VsZXZhdGlvbicgJiYgc3R5bGVzW2BlbGV2YXRpb24ke293bmVyU3RhdGUuZWxldmF0aW9ufWBdXTtcbiAgfVxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IHtcbiAgdmFyIF90aGVtZSR2YXJzJG92ZXJsYXlzO1xuICByZXR1cm4gX2V4dGVuZHMoe1xuICAgIGJhY2tncm91bmRDb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuYmFja2dyb3VuZC5wYXBlcixcbiAgICBjb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUudGV4dC5wcmltYXJ5LFxuICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnYm94LXNoYWRvdycpXG4gIH0sICFvd25lclN0YXRlLnNxdWFyZSAmJiB7XG4gICAgYm9yZGVyUmFkaXVzOiB0aGVtZS5zaGFwZS5ib3JkZXJSYWRpdXNcbiAgfSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnb3V0bGluZWQnICYmIHtcbiAgICBib3JkZXI6IGAxcHggc29saWQgJHsodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5kaXZpZGVyfWBcbiAgfSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnZWxldmF0aW9uJyAmJiBfZXh0ZW5kcyh7XG4gICAgYm94U2hhZG93OiAodGhlbWUudmFycyB8fCB0aGVtZSkuc2hhZG93c1tvd25lclN0YXRlLmVsZXZhdGlvbl1cbiAgfSwgIXRoZW1lLnZhcnMgJiYgdGhlbWUucGFsZXR0ZS5tb2RlID09PSAnZGFyaycgJiYge1xuICAgIGJhY2tncm91bmRJbWFnZTogYGxpbmVhci1ncmFkaWVudCgke2FscGhhKCcjZmZmJywgZ2V0T3ZlcmxheUFscGhhKG93bmVyU3RhdGUuZWxldmF0aW9uKSl9LCAke2FscGhhKCcjZmZmJywgZ2V0T3ZlcmxheUFscGhhKG93bmVyU3RhdGUuZWxldmF0aW9uKSl9KWBcbiAgfSwgdGhlbWUudmFycyAmJiB7XG4gICAgYmFja2dyb3VuZEltYWdlOiAoX3RoZW1lJHZhcnMkb3ZlcmxheXMgPSB0aGVtZS52YXJzLm92ZXJsYXlzKSA9PSBudWxsID8gdm9pZCAwIDogX3RoZW1lJHZhcnMkb3ZlcmxheXNbb3duZXJTdGF0ZS5lbGV2YXRpb25dXG4gIH0pKTtcbn0pO1xuY29uc3QgUGFwZXIgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBQYXBlcihpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpUGFwZXInXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBjbGFzc05hbWUsXG4gICAgICBjb21wb25lbnQgPSAnZGl2JyxcbiAgICAgIGVsZXZhdGlvbiA9IDEsXG4gICAgICBzcXVhcmUgPSBmYWxzZSxcbiAgICAgIHZhcmlhbnQgPSAnZWxldmF0aW9uJ1xuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY29tcG9uZW50LFxuICAgIGVsZXZhdGlvbixcbiAgICBzcXVhcmUsXG4gICAgdmFyaWFudFxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIGNvbnN0IHRoZW1lID0gdXNlVGhlbWUoKTtcbiAgICBpZiAodGhlbWUuc2hhZG93c1tlbGV2YXRpb25dID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoW2BNVUk6IFRoZSBlbGV2YXRpb24gcHJvdmlkZWQgPFBhcGVyIGVsZXZhdGlvbj17JHtlbGV2YXRpb259fT4gaXMgbm90IGF2YWlsYWJsZSBpbiB0aGUgdGhlbWUuYCwgYFBsZWFzZSBtYWtlIHN1cmUgdGhhdCBcXGB0aGVtZS5zaGFkb3dzWyR7ZWxldmF0aW9ufV1cXGAgaXMgZGVmaW5lZC5gXS5qb2luKCdcXG4nKSk7XG4gICAgfVxuICB9XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChQYXBlclJvb3QsIF9leHRlbmRzKHtcbiAgICBhczogY29tcG9uZW50LFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBQYXBlci5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogU2hhZG93IGRlcHRoLCBjb3JyZXNwb25kcyB0byBgZHBgIGluIHRoZSBzcGVjLlxuICAgKiBJdCBhY2NlcHRzIHZhbHVlcyBiZXR3ZWVuIDAgYW5kIDI0IGluY2x1c2l2ZS5cbiAgICogQGRlZmF1bHQgMVxuICAgKi9cbiAgZWxldmF0aW9uOiBjaGFpblByb3BUeXBlcyhpbnRlZ2VyUHJvcFR5cGUsIHByb3BzID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBlbGV2YXRpb24sXG4gICAgICB2YXJpYW50XG4gICAgfSA9IHByb3BzO1xuICAgIGlmIChlbGV2YXRpb24gPiAwICYmIHZhcmlhbnQgPT09ICdvdXRsaW5lZCcpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoYE1VSTogQ29tYmluaW5nIFxcYGVsZXZhdGlvbj17JHtlbGV2YXRpb259fVxcYCB3aXRoIFxcYHZhcmlhbnQ9XCIke3ZhcmlhbnR9XCJcXGAgaGFzIG5vIGVmZmVjdC4gRWl0aGVyIHVzZSBcXGBlbGV2YXRpb249ezB9XFxgIG9yIHVzZSBhIGRpZmZlcmVudCBcXGB2YXJpYW50XFxgLmApO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfSksXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHJvdW5kZWQgY29ybmVycyBhcmUgZGlzYWJsZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBzcXVhcmU6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKiBAZGVmYXVsdCAnZWxldmF0aW9uJ1xuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydlbGV2YXRpb24nLCAnb3V0bGluZWQnXSksIFByb3BUeXBlcy5zdHJpbmddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IFBhcGVyOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKiBAdHlwZSB7UmVhY3QuQ29udGV4dDx7fSB8IHtleHBhbmRlZDogYm9vbGVhbiwgZGlzYWJsZWQ6IGJvb2xlYW4sIHRvZ2dsZTogKCkgPT4gdm9pZH0+fVxuICovXG5jb25zdCBBY2NvcmRpb25Db250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQoe30pO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgQWNjb3JkaW9uQ29udGV4dC5kaXNwbGF5TmFtZSA9ICdBY2NvcmRpb25Db250ZXh0Jztcbn1cbmV4cG9ydCBkZWZhdWx0IEFjY29yZGlvbkNvbnRleHQ7IiwiLyoqXG4gKiBEZXRlcm1pbmVzIGlmIGEgZ2l2ZW4gZWxlbWVudCBpcyBhIERPTSBlbGVtZW50IG5hbWUgKGkuZS4gbm90IGEgUmVhY3QgY29tcG9uZW50KS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzSG9zdENvbXBvbmVudChlbGVtZW50KSB7XG4gIHJldHVybiB0eXBlb2YgZWxlbWVudCA9PT0gJ3N0cmluZyc7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgeyBpc0hvc3RDb21wb25lbnQgfSBmcm9tICcuL2lzSG9zdENvbXBvbmVudCc7XG5cbi8qKlxuICogVHlwZSBvZiB0aGUgb3duZXJTdGF0ZSBiYXNlZCBvbiB0aGUgdHlwZSBvZiBhbiBlbGVtZW50IGl0IGFwcGxpZXMgdG8uXG4gKiBUaGlzIHJlc29sdmVzIHRvIHRoZSBwcm92aWRlZCBPd25lclN0YXRlIGZvciBSZWFjdCBjb21wb25lbnRzIGFuZCBgdW5kZWZpbmVkYCBmb3IgaG9zdCBjb21wb25lbnRzLlxuICogRmFsbHMgYmFjayB0byBgT3duZXJTdGF0ZSB8IHVuZGVmaW5lZGAgd2hlbiB0aGUgZXhhY3QgdHlwZSBjYW4ndCBiZSBkZXRlcm1pbmVkIGluIGRldmVsb3BtZW50IHRpbWUuXG4gKi9cblxuLyoqXG4gKiBBcHBlbmRzIHRoZSBvd25lclN0YXRlIG9iamVjdCB0byB0aGUgcHJvcHMsIG1lcmdpbmcgd2l0aCB0aGUgZXhpc3Rpbmcgb25lIGlmIG5lY2Vzc2FyeS5cbiAqXG4gKiBAcGFyYW0gZWxlbWVudFR5cGUgVHlwZSBvZiB0aGUgZWxlbWVudCB0aGF0IG93bnMgdGhlIGBleGlzdGluZ1Byb3BzYC4gSWYgdGhlIGVsZW1lbnQgaXMgYSBET00gbm9kZSBvciB1bmRlZmluZWQsIGBvd25lclN0YXRlYCBpcyBub3QgYXBwbGllZC5cbiAqIEBwYXJhbSBvdGhlclByb3BzIFByb3BzIG9mIHRoZSBlbGVtZW50LlxuICogQHBhcmFtIG93bmVyU3RhdGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFwcGVuZE93bmVyU3RhdGUoZWxlbWVudFR5cGUsIG90aGVyUHJvcHMsIG93bmVyU3RhdGUpIHtcbiAgaWYgKGVsZW1lbnRUeXBlID09PSB1bmRlZmluZWQgfHwgaXNIb3N0Q29tcG9uZW50KGVsZW1lbnRUeXBlKSkge1xuICAgIHJldHVybiBvdGhlclByb3BzO1xuICB9XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgb3RoZXJQcm9wcywge1xuICAgIG93bmVyU3RhdGU6IF9leHRlbmRzKHt9LCBvdGhlclByb3BzLm93bmVyU3RhdGUsIG93bmVyU3RhdGUpXG4gIH0pO1xufSIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IGRlZmF1bHRDb250ZXh0VmFsdWUgPSB7XG4gIGRpc2FibGVEZWZhdWx0Q2xhc3NlczogZmFsc2Vcbn07XG5jb25zdCBDbGFzc05hbWVDb25maWd1cmF0b3JDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQoZGVmYXVsdENvbnRleHRWYWx1ZSk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBDbGFzc05hbWVDb25maWd1cmF0b3JDb250ZXh0LmRpc3BsYXlOYW1lID0gJ0NsYXNzTmFtZUNvbmZpZ3VyYXRvckNvbnRleHQnO1xufVxuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgaG9vay5cbiAqXG4gKiBXcmFwcyB0aGUgYGdlbmVyYXRlVXRpbGl0eUNsYXNzYCBmdW5jdGlvbiBhbmQgY29udHJvbHMgaG93IHRoZSBjbGFzc2VzIGFyZSBnZW5lcmF0ZWQuXG4gKiBDdXJyZW50bHkgaXQgb25seSBhZmZlY3RzIHdoZXRoZXIgdGhlIGNsYXNzZXMgYXJlIGFwcGxpZWQgb3Igbm90LlxuICpcbiAqIEByZXR1cm5zIEZ1bmN0aW9uIHRvIGJlIGNhbGxlZCB3aXRoIHRoZSBgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NgIGZ1bmN0aW9uIHNwZWNpZmljIHRvIGEgY29tcG9uZW50IHRvIGdlbmVyYXRlIHRoZSBjbGFzc2VzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlQ2xhc3NOYW1lc092ZXJyaWRlKGdlbmVyYXRlVXRpbGl0eUNsYXNzKSB7XG4gIGNvbnN0IHtcbiAgICBkaXNhYmxlRGVmYXVsdENsYXNzZXNcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoQ2xhc3NOYW1lQ29uZmlndXJhdG9yQ29udGV4dCk7XG4gIHJldHVybiBzbG90ID0+IHtcbiAgICBpZiAoZGlzYWJsZURlZmF1bHRDbGFzc2VzKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcyhzbG90KTtcbiAgfTtcbn1cblxuLyoqXG4gKiBBbGxvd3MgdG8gY29uZmlndXJlIHRoZSBjb21wb25lbnRzIHdpdGhpbiB0byBub3QgYXBwbHkgYW55IGJ1aWx0LWluIGNsYXNzZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBDbGFzc05hbWVDb25maWd1cmF0b3IocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgIGRpc2FibGVEZWZhdWx0Q2xhc3NlcyxcbiAgICBjaGlsZHJlblxuICB9ID0gcHJvcHM7XG4gIGNvbnN0IGNvbnRleHRWYWx1ZSA9IFJlYWN0LnVzZU1lbW8oKCkgPT4gKHtcbiAgICBkaXNhYmxlRGVmYXVsdENsYXNzZXM6IGRpc2FibGVEZWZhdWx0Q2xhc3NlcyAhPSBudWxsID8gZGlzYWJsZURlZmF1bHRDbGFzc2VzIDogZmFsc2VcbiAgfSksIFtkaXNhYmxlRGVmYXVsdENsYXNzZXNdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KENsYXNzTmFtZUNvbmZpZ3VyYXRvckNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogY29udGV4dFZhbHVlLFxuICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICB9KTtcbn0iLCIvKipcbiAqIEV4dHJhY3RzIGV2ZW50IGhhbmRsZXJzIGZyb20gYSBnaXZlbiBvYmplY3QuXG4gKiBBIHByb3AgaXMgY29uc2lkZXJlZCBhbiBldmVudCBoYW5kbGVyIGlmIGl0IGlzIGEgZnVuY3Rpb24gYW5kIGl0cyBuYW1lIHN0YXJ0cyB3aXRoIGBvbmAuXG4gKlxuICogQHBhcmFtIG9iamVjdCBBbiBvYmplY3QgdG8gZXh0cmFjdCBldmVudCBoYW5kbGVycyBmcm9tLlxuICogQHBhcmFtIGV4Y2x1ZGVLZXlzIEFuIGFycmF5IG9mIGtleXMgdG8gZXhjbHVkZSBmcm9tIHRoZSByZXR1cm5lZCBvYmplY3QuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0RXZlbnRIYW5kbGVycyhvYmplY3QsIGV4Y2x1ZGVLZXlzID0gW10pIHtcbiAgaWYgKG9iamVjdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG4gIGNvbnN0IHJlc3VsdCA9IHt9O1xuICBPYmplY3Qua2V5cyhvYmplY3QpLmZpbHRlcihwcm9wID0+IHByb3AubWF0Y2goL15vbltBLVpdLykgJiYgdHlwZW9mIG9iamVjdFtwcm9wXSA9PT0gJ2Z1bmN0aW9uJyAmJiAhZXhjbHVkZUtleXMuaW5jbHVkZXMocHJvcCkpLmZvckVhY2gocHJvcCA9PiB7XG4gICAgcmVzdWx0W3Byb3BdID0gb2JqZWN0W3Byb3BdO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn0iLCIvKipcbiAqIElmIGBjb21wb25lbnRQcm9wc2AgaXMgYSBmdW5jdGlvbiwgY2FsbHMgaXQgd2l0aCB0aGUgcHJvdmlkZWQgYG93bmVyU3RhdGVgLlxuICogT3RoZXJ3aXNlLCBqdXN0IHJldHVybnMgYGNvbXBvbmVudFByb3BzYC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVDb21wb25lbnRQcm9wcyhjb21wb25lbnRQcm9wcywgb3duZXJTdGF0ZSwgc2xvdFN0YXRlKSB7XG4gIGlmICh0eXBlb2YgY29tcG9uZW50UHJvcHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gY29tcG9uZW50UHJvcHMob3duZXJTdGF0ZSwgc2xvdFN0YXRlKTtcbiAgfVxuICByZXR1cm4gY29tcG9uZW50UHJvcHM7XG59IiwiLyoqXG4gKiBSZW1vdmVzIGV2ZW50IGhhbmRsZXJzIGZyb20gdGhlIGdpdmVuIG9iamVjdC5cbiAqIEEgZmllbGQgaXMgY29uc2lkZXJlZCBhbiBldmVudCBoYW5kbGVyIGlmIGl0IGlzIGEgZnVuY3Rpb24gd2l0aCBhIG5hbWUgYmVnaW5uaW5nIHdpdGggYG9uYC5cbiAqXG4gKiBAcGFyYW0gb2JqZWN0IE9iamVjdCB0byByZW1vdmUgZXZlbnQgaGFuZGxlcnMgZnJvbS5cbiAqIEByZXR1cm5zIE9iamVjdCB3aXRoIGV2ZW50IGhhbmRsZXJzIHJlbW92ZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBvbWl0RXZlbnRIYW5kbGVycyhvYmplY3QpIHtcbiAgaWYgKG9iamVjdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG4gIGNvbnN0IHJlc3VsdCA9IHt9O1xuICBPYmplY3Qua2V5cyhvYmplY3QpLmZpbHRlcihwcm9wID0+ICEocHJvcC5tYXRjaCgvXm9uW0EtWl0vKSAmJiB0eXBlb2Ygb2JqZWN0W3Byb3BdID09PSAnZnVuY3Rpb24nKSkuZm9yRWFjaChwcm9wID0+IHtcbiAgICByZXN1bHRbcHJvcF0gPSBvYmplY3RbcHJvcF07XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyBleHRyYWN0RXZlbnRIYW5kbGVycyB9IGZyb20gJy4vZXh0cmFjdEV2ZW50SGFuZGxlcnMnO1xuaW1wb3J0IHsgb21pdEV2ZW50SGFuZGxlcnMgfSBmcm9tICcuL29taXRFdmVudEhhbmRsZXJzJztcbi8qKlxuICogTWVyZ2VzIHRoZSBzbG90IGNvbXBvbmVudCBpbnRlcm5hbCBwcm9wcyAodXN1YWxseSBjb21pbmcgZnJvbSBhIGhvb2spXG4gKiB3aXRoIHRoZSBleHRlcm5hbGx5IHByb3ZpZGVkIG9uZXMuXG4gKlxuICogVGhlIG1lcmdlIG9yZGVyIGlzICh0aGUgbGF0dGVyIG92ZXJyaWRlcyB0aGUgZm9ybWVyKTpcbiAqIDEuIFRoZSBpbnRlcm5hbCBwcm9wcyAoc3BlY2lmaWVkIGFzIGEgZ2V0dGVyIGZ1bmN0aW9uIHRvIHdvcmsgd2l0aCBnZXQqUHJvcHMgaG9vayByZXN1bHQpXG4gKiAyLiBBZGRpdGlvbmFsIHByb3BzIChzcGVjaWZpZWQgaW50ZXJuYWxseSBvbiBhIEJhc2UgVUkgY29tcG9uZW50KVxuICogMy4gRXh0ZXJuYWwgcHJvcHMgc3BlY2lmaWVkIG9uIHRoZSBvd25lciBjb21wb25lbnQuIFRoZXNlIHNob3VsZCBvbmx5IGJlIHVzZWQgb24gYSByb290IHNsb3QuXG4gKiA0LiBFeHRlcm5hbCBwcm9wcyBzcGVjaWZpZWQgaW4gdGhlIGBzbG90UHJvcHMuKmAgcHJvcC5cbiAqIDUuIFRoZSBgY2xhc3NOYW1lYCBwcm9wIC0gY29tYmluZWQgZnJvbSBhbGwgdGhlIGFib3ZlLlxuICogQHBhcmFtIHBhcmFtZXRlcnNcbiAqIEByZXR1cm5zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZVNsb3RQcm9wcyhwYXJhbWV0ZXJzKSB7XG4gIGNvbnN0IHtcbiAgICBnZXRTbG90UHJvcHMsXG4gICAgYWRkaXRpb25hbFByb3BzLFxuICAgIGV4dGVybmFsU2xvdFByb3BzLFxuICAgIGV4dGVybmFsRm9yd2FyZGVkUHJvcHMsXG4gICAgY2xhc3NOYW1lXG4gIH0gPSBwYXJhbWV0ZXJzO1xuICBpZiAoIWdldFNsb3RQcm9wcykge1xuICAgIC8vIFRoZSBzaW1wbGVyIGNhc2UgLSBnZXRTbG90UHJvcHMgaXMgbm90IGRlZmluZWQsIHNvIG5vIGludGVybmFsIGV2ZW50IGhhbmRsZXJzIGFyZSBkZWZpbmVkLFxuICAgIC8vIHNvIHdlIGNhbiBzaW1wbHkgbWVyZ2UgYWxsIHRoZSBwcm9wcyB3aXRob3V0IGhhdmluZyB0byB3b3JyeSBhYm91dCBleHRyYWN0aW5nIGV2ZW50IGhhbmRsZXJzLlxuICAgIGNvbnN0IGpvaW5lZENsYXNzZXMgPSBjbHN4KGFkZGl0aW9uYWxQcm9wcyA9PSBudWxsID8gdm9pZCAwIDogYWRkaXRpb25hbFByb3BzLmNsYXNzTmFtZSwgY2xhc3NOYW1lLCBleHRlcm5hbEZvcndhcmRlZFByb3BzID09IG51bGwgPyB2b2lkIDAgOiBleHRlcm5hbEZvcndhcmRlZFByb3BzLmNsYXNzTmFtZSwgZXh0ZXJuYWxTbG90UHJvcHMgPT0gbnVsbCA/IHZvaWQgMCA6IGV4dGVybmFsU2xvdFByb3BzLmNsYXNzTmFtZSk7XG4gICAgY29uc3QgbWVyZ2VkU3R5bGUgPSBfZXh0ZW5kcyh7fSwgYWRkaXRpb25hbFByb3BzID09IG51bGwgPyB2b2lkIDAgOiBhZGRpdGlvbmFsUHJvcHMuc3R5bGUsIGV4dGVybmFsRm9yd2FyZGVkUHJvcHMgPT0gbnVsbCA/IHZvaWQgMCA6IGV4dGVybmFsRm9yd2FyZGVkUHJvcHMuc3R5bGUsIGV4dGVybmFsU2xvdFByb3BzID09IG51bGwgPyB2b2lkIDAgOiBleHRlcm5hbFNsb3RQcm9wcy5zdHlsZSk7XG4gICAgY29uc3QgcHJvcHMgPSBfZXh0ZW5kcyh7fSwgYWRkaXRpb25hbFByb3BzLCBleHRlcm5hbEZvcndhcmRlZFByb3BzLCBleHRlcm5hbFNsb3RQcm9wcyk7XG4gICAgaWYgKGpvaW5lZENsYXNzZXMubGVuZ3RoID4gMCkge1xuICAgICAgcHJvcHMuY2xhc3NOYW1lID0gam9pbmVkQ2xhc3NlcztcbiAgICB9XG4gICAgaWYgKE9iamVjdC5rZXlzKG1lcmdlZFN0eWxlKS5sZW5ndGggPiAwKSB7XG4gICAgICBwcm9wcy5zdHlsZSA9IG1lcmdlZFN0eWxlO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgcHJvcHMsXG4gICAgICBpbnRlcm5hbFJlZjogdW5kZWZpbmVkXG4gICAgfTtcbiAgfVxuXG4gIC8vIEluIHRoaXMgY2FzZSwgZ2V0U2xvdFByb3BzIGlzIHJlc3BvbnNpYmxlIGZvciBjYWxsaW5nIHRoZSBleHRlcm5hbCBldmVudCBoYW5kbGVycy5cbiAgLy8gV2UgZG9uJ3QgbmVlZCB0byBpbmNsdWRlIHRoZW0gaW4gdGhlIG1lcmdlZCBwcm9wcyBiZWNhdXNlIG9mIHRoaXMuXG5cbiAgY29uc3QgZXZlbnRIYW5kbGVycyA9IGV4dHJhY3RFdmVudEhhbmRsZXJzKF9leHRlbmRzKHt9LCBleHRlcm5hbEZvcndhcmRlZFByb3BzLCBleHRlcm5hbFNsb3RQcm9wcykpO1xuICBjb25zdCBjb21wb25lbnRzUHJvcHNXaXRob3V0RXZlbnRIYW5kbGVycyA9IG9taXRFdmVudEhhbmRsZXJzKGV4dGVybmFsU2xvdFByb3BzKTtcbiAgY29uc3Qgb3RoZXJQcm9wc1dpdGhvdXRFdmVudEhhbmRsZXJzID0gb21pdEV2ZW50SGFuZGxlcnMoZXh0ZXJuYWxGb3J3YXJkZWRQcm9wcyk7XG4gIGNvbnN0IGludGVybmFsU2xvdFByb3BzID0gZ2V0U2xvdFByb3BzKGV2ZW50SGFuZGxlcnMpO1xuXG4gIC8vIFRoZSBvcmRlciBvZiBjbGFzc2VzIGlzIGltcG9ydGFudCBoZXJlLlxuICAvLyBFbW90aW9uICh0aGF0IHdlIHVzZSBpbiBsaWJyYXJpZXMgY29uc3VtaW5nIEJhc2UgVUkpIGRlcGVuZHMgb24gdGhpcyBvcmRlclxuICAvLyB0byBwcm9wZXJseSBvdmVycmlkZSBzdHlsZS4gSXQgcmVxdWlyZXMgdGhlIG1vc3QgaW1wb3J0YW50IGNsYXNzZXMgdG8gYmUgbGFzdFxuICAvLyAoc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tdWkvbWF0ZXJpYWwtdWkvcHVsbC8zMzIwNSkgZm9yIHRoZSByZWxhdGVkIGRpc2N1c3Npb24uXG4gIGNvbnN0IGpvaW5lZENsYXNzZXMgPSBjbHN4KGludGVybmFsU2xvdFByb3BzID09IG51bGwgPyB2b2lkIDAgOiBpbnRlcm5hbFNsb3RQcm9wcy5jbGFzc05hbWUsIGFkZGl0aW9uYWxQcm9wcyA9PSBudWxsID8gdm9pZCAwIDogYWRkaXRpb25hbFByb3BzLmNsYXNzTmFtZSwgY2xhc3NOYW1lLCBleHRlcm5hbEZvcndhcmRlZFByb3BzID09IG51bGwgPyB2b2lkIDAgOiBleHRlcm5hbEZvcndhcmRlZFByb3BzLmNsYXNzTmFtZSwgZXh0ZXJuYWxTbG90UHJvcHMgPT0gbnVsbCA/IHZvaWQgMCA6IGV4dGVybmFsU2xvdFByb3BzLmNsYXNzTmFtZSk7XG4gIGNvbnN0IG1lcmdlZFN0eWxlID0gX2V4dGVuZHMoe30sIGludGVybmFsU2xvdFByb3BzID09IG51bGwgPyB2b2lkIDAgOiBpbnRlcm5hbFNsb3RQcm9wcy5zdHlsZSwgYWRkaXRpb25hbFByb3BzID09IG51bGwgPyB2b2lkIDAgOiBhZGRpdGlvbmFsUHJvcHMuc3R5bGUsIGV4dGVybmFsRm9yd2FyZGVkUHJvcHMgPT0gbnVsbCA/IHZvaWQgMCA6IGV4dGVybmFsRm9yd2FyZGVkUHJvcHMuc3R5bGUsIGV4dGVybmFsU2xvdFByb3BzID09IG51bGwgPyB2b2lkIDAgOiBleHRlcm5hbFNsb3RQcm9wcy5zdHlsZSk7XG4gIGNvbnN0IHByb3BzID0gX2V4dGVuZHMoe30sIGludGVybmFsU2xvdFByb3BzLCBhZGRpdGlvbmFsUHJvcHMsIG90aGVyUHJvcHNXaXRob3V0RXZlbnRIYW5kbGVycywgY29tcG9uZW50c1Byb3BzV2l0aG91dEV2ZW50SGFuZGxlcnMpO1xuICBpZiAoam9pbmVkQ2xhc3Nlcy5sZW5ndGggPiAwKSB7XG4gICAgcHJvcHMuY2xhc3NOYW1lID0gam9pbmVkQ2xhc3NlcztcbiAgfVxuICBpZiAoT2JqZWN0LmtleXMobWVyZ2VkU3R5bGUpLmxlbmd0aCA+IDApIHtcbiAgICBwcm9wcy5zdHlsZSA9IG1lcmdlZFN0eWxlO1xuICB9XG4gIHJldHVybiB7XG4gICAgcHJvcHMsXG4gICAgaW50ZXJuYWxSZWY6IGludGVybmFsU2xvdFByb3BzLnJlZlxuICB9O1xufSIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImVsZW1lbnRUeXBlXCIsIFwiZXh0ZXJuYWxTbG90UHJvcHNcIiwgXCJvd25lclN0YXRlXCIsIFwic2tpcFJlc29sdmluZ1Nsb3RQcm9wc1wiXTtcbmltcG9ydCB7IHVuc3RhYmxlX3VzZUZvcmtSZWYgYXMgdXNlRm9ya1JlZiB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IHsgYXBwZW5kT3duZXJTdGF0ZSB9IGZyb20gJy4vYXBwZW5kT3duZXJTdGF0ZSc7XG5pbXBvcnQgeyBtZXJnZVNsb3RQcm9wcyB9IGZyb20gJy4vbWVyZ2VTbG90UHJvcHMnO1xuaW1wb3J0IHsgcmVzb2x2ZUNvbXBvbmVudFByb3BzIH0gZnJvbSAnLi9yZXNvbHZlQ29tcG9uZW50UHJvcHMnO1xuLyoqXG4gKiBAaWdub3JlIC0gZG8gbm90IGRvY3VtZW50LlxuICogQnVpbGRzIHRoZSBwcm9wcyB0byBiZSBwYXNzZWQgaW50byB0aGUgc2xvdCBvZiBhbiB1bnN0eWxlZCBjb21wb25lbnQuXG4gKiBJdCBtZXJnZXMgdGhlIGludGVybmFsIHByb3BzIG9mIHRoZSBjb21wb25lbnQgd2l0aCB0aGUgb25lcyBzdXBwbGllZCBieSB0aGUgdXNlciwgYWxsb3dpbmcgdG8gY3VzdG9taXplIHRoZSBiZWhhdmlvci5cbiAqIElmIHRoZSBzbG90IGNvbXBvbmVudCBpcyBub3QgYSBob3N0IGNvbXBvbmVudCwgaXQgYWxzbyBtZXJnZXMgaW4gdGhlIGBvd25lclN0YXRlYC5cbiAqXG4gKiBAcGFyYW0gcGFyYW1ldGVycy5nZXRTbG90UHJvcHMgLSBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgcHJvcHMgdG8gYmUgcGFzc2VkIHRvIHRoZSBzbG90IGNvbXBvbmVudC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVNsb3RQcm9wcyhwYXJhbWV0ZXJzKSB7XG4gIHZhciBfcGFyYW1ldGVycyRhZGRpdGlvbmE7XG4gIGNvbnN0IHtcbiAgICAgIGVsZW1lbnRUeXBlLFxuICAgICAgZXh0ZXJuYWxTbG90UHJvcHMsXG4gICAgICBvd25lclN0YXRlLFxuICAgICAgc2tpcFJlc29sdmluZ1Nsb3RQcm9wcyA9IGZhbHNlXG4gICAgfSA9IHBhcmFtZXRlcnMsXG4gICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHBhcmFtZXRlcnMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IHJlc29sdmVkQ29tcG9uZW50c1Byb3BzID0gc2tpcFJlc29sdmluZ1Nsb3RQcm9wcyA/IHt9IDogcmVzb2x2ZUNvbXBvbmVudFByb3BzKGV4dGVybmFsU2xvdFByb3BzLCBvd25lclN0YXRlKTtcbiAgY29uc3Qge1xuICAgIHByb3BzOiBtZXJnZWRQcm9wcyxcbiAgICBpbnRlcm5hbFJlZlxuICB9ID0gbWVyZ2VTbG90UHJvcHMoX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICBleHRlcm5hbFNsb3RQcm9wczogcmVzb2x2ZWRDb21wb25lbnRzUHJvcHNcbiAgfSkpO1xuICBjb25zdCByZWYgPSB1c2VGb3JrUmVmKGludGVybmFsUmVmLCByZXNvbHZlZENvbXBvbmVudHNQcm9wcyA9PSBudWxsID8gdm9pZCAwIDogcmVzb2x2ZWRDb21wb25lbnRzUHJvcHMucmVmLCAoX3BhcmFtZXRlcnMkYWRkaXRpb25hID0gcGFyYW1ldGVycy5hZGRpdGlvbmFsUHJvcHMpID09IG51bGwgPyB2b2lkIDAgOiBfcGFyYW1ldGVycyRhZGRpdGlvbmEucmVmKTtcbiAgY29uc3QgcHJvcHMgPSBhcHBlbmRPd25lclN0YXRlKGVsZW1lbnRUeXBlLCBfZXh0ZW5kcyh7fSwgbWVyZ2VkUHJvcHMsIHtcbiAgICByZWZcbiAgfSksIG93bmVyU3RhdGUpO1xuICByZXR1cm4gcHJvcHM7XG59IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2xhc3NOYW1lXCIsIFwiZWxlbWVudFR5cGVcIiwgXCJvd25lclN0YXRlXCIsIFwiZXh0ZXJuYWxGb3J3YXJkZWRQcm9wc1wiLCBcImdldFNsb3RPd25lclN0YXRlXCIsIFwiaW50ZXJuYWxGb3J3YXJkZWRQcm9wc1wiXSxcbiAgX2V4Y2x1ZGVkMiA9IFtcImNvbXBvbmVudFwiLCBcInNsb3RzXCIsIFwic2xvdFByb3BzXCJdLFxuICBfZXhjbHVkZWQzID0gW1wiY29tcG9uZW50XCJdO1xuaW1wb3J0IHVzZUZvcmtSZWYgZnJvbSAnQG11aS91dGlscy91c2VGb3JrUmVmJztcbmltcG9ydCB7IGFwcGVuZE93bmVyU3RhdGUsIHJlc29sdmVDb21wb25lbnRQcm9wcywgbWVyZ2VTbG90UHJvcHMgfSBmcm9tICdAbXVpL2Jhc2UvdXRpbHMnO1xuLyoqXG4gKiBBbiBpbnRlcm5hbCBmdW5jdGlvbiB0byBjcmVhdGUgYSBNYXRlcmlhbCBVSSBzbG90LlxuICpcbiAqIFRoaXMgaXMgYW4gYWR2YW5jZWQgdmVyc2lvbiBvZiBCYXNlIFVJIGB1c2VTbG90UHJvcHNgIGJlY2F1c2UgTWF0ZXJpYWwgVUkgYWxsb3dzIGxlYWYgY29tcG9uZW50IHRvIGJlIGN1c3RvbWl6ZWQgdmlhIGBjb21wb25lbnRgIHByb3BcbiAqIHdoaWxlIEJhc2UgVUkgZG9lcyBub3QgbmVlZCB0byBzdXBwb3J0IGxlYWYgY29tcG9uZW50IGN1c3RvbWl6YXRpb24uXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWU6IG5hbWUgb2YgdGhlIHNsb3RcbiAqIEBwYXJhbSB7b2JqZWN0fSBwYXJhbWV0ZXJzXG4gKiBAcmV0dXJucyB7W1Nsb3QsIHNsb3RQcm9wc119IFRoZSBzbG90J3MgUmVhY3QgY29tcG9uZW50IGFuZCB0aGUgc2xvdCdzIHByb3BzXG4gKlxuICogTm90ZTogdGhlIHJldHVybmVkIHNsb3QncyBwcm9wc1xuICogLSB3aWxsIG5ldmVyIGNvbnRhaW4gYGNvbXBvbmVudGAgcHJvcC5cbiAqIC0gbWlnaHQgY29udGFpbiBgYXNgIHByb3AuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZVNsb3QoXG4vKipcbiAqIFRoZSBzbG90J3MgbmFtZS4gQWxsIE1hdGVyaWFsIFVJIGNvbXBvbmVudHMgc2hvdWxkIGhhdmUgYHJvb3RgIHNsb3QuXG4gKlxuICogSWYgdGhlIG5hbWUgaXMgYHJvb3RgLCB0aGUgbG9naWMgYmVoYXZlcyBkaWZmZXJlbnRseSBmcm9tIG90aGVyIHNsb3RzLFxuICogZS5nLiB0aGUgYGV4dGVybmFsRm9yd2FyZGVkUHJvcHNgIGFyZSBzcHJlYWQgdG8gYHJvb3RgIHNsb3QgYnV0IG5vdCBvdGhlciBzbG90cy5cbiAqL1xubmFtZSwgcGFyYW1ldGVycykge1xuICBjb25zdCB7XG4gICAgICBjbGFzc05hbWUsXG4gICAgICBlbGVtZW50VHlwZTogaW5pdGlhbEVsZW1lbnRUeXBlLFxuICAgICAgb3duZXJTdGF0ZSxcbiAgICAgIGV4dGVybmFsRm9yd2FyZGVkUHJvcHMsXG4gICAgICBnZXRTbG90T3duZXJTdGF0ZSxcbiAgICAgIGludGVybmFsRm9yd2FyZGVkUHJvcHNcbiAgICB9ID0gcGFyYW1ldGVycyxcbiAgICB1c2VTbG90UHJvcHNQYXJhbXMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwYXJhbWV0ZXJzLCBfZXhjbHVkZWQpO1xuICBjb25zdCB7XG4gICAgICBjb21wb25lbnQ6IHJvb3RDb21wb25lbnQsXG4gICAgICBzbG90cyA9IHtcbiAgICAgICAgW25hbWVdOiB1bmRlZmluZWRcbiAgICAgIH0sXG4gICAgICBzbG90UHJvcHMgPSB7XG4gICAgICAgIFtuYW1lXTogdW5kZWZpbmVkXG4gICAgICB9XG4gICAgfSA9IGV4dGVybmFsRm9yd2FyZGVkUHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShleHRlcm5hbEZvcndhcmRlZFByb3BzLCBfZXhjbHVkZWQyKTtcbiAgY29uc3QgZWxlbWVudFR5cGUgPSBzbG90c1tuYW1lXSB8fCBpbml0aWFsRWxlbWVudFR5cGU7XG5cbiAgLy8gYHNsb3RQcm9wc1tuYW1lXWAgY2FuIGJlIGEgY2FsbGJhY2sgdGhhdCByZWNlaXZlcyB0aGUgY29tcG9uZW50J3Mgb3duZXJTdGF0ZS5cbiAgLy8gYHJlc29sdmVkQ29tcG9uZW50c1Byb3BzYCBpcyBhbHdheXMgYSBwbGFpbiBvYmplY3QuXG4gIGNvbnN0IHJlc29sdmVkQ29tcG9uZW50c1Byb3BzID0gcmVzb2x2ZUNvbXBvbmVudFByb3BzKHNsb3RQcm9wc1tuYW1lXSwgb3duZXJTdGF0ZSk7XG4gIGNvbnN0IF9tZXJnZVNsb3RQcm9wcyA9IG1lcmdlU2xvdFByb3BzKF9leHRlbmRzKHtcbiAgICAgIGNsYXNzTmFtZVxuICAgIH0sIHVzZVNsb3RQcm9wc1BhcmFtcywge1xuICAgICAgZXh0ZXJuYWxGb3J3YXJkZWRQcm9wczogbmFtZSA9PT0gJ3Jvb3QnID8gb3RoZXIgOiB1bmRlZmluZWQsXG4gICAgICBleHRlcm5hbFNsb3RQcm9wczogcmVzb2x2ZWRDb21wb25lbnRzUHJvcHNcbiAgICB9KSksXG4gICAge1xuICAgICAgcHJvcHM6IHtcbiAgICAgICAgY29tcG9uZW50OiBzbG90Q29tcG9uZW50XG4gICAgICB9LFxuICAgICAgaW50ZXJuYWxSZWZcbiAgICB9ID0gX21lcmdlU2xvdFByb3BzLFxuICAgIG1lcmdlZFByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX21lcmdlU2xvdFByb3BzLnByb3BzLCBfZXhjbHVkZWQzKTtcbiAgY29uc3QgcmVmID0gdXNlRm9ya1JlZihpbnRlcm5hbFJlZiwgcmVzb2x2ZWRDb21wb25lbnRzUHJvcHMgPT0gbnVsbCA/IHZvaWQgMCA6IHJlc29sdmVkQ29tcG9uZW50c1Byb3BzLnJlZiwgcGFyYW1ldGVycy5yZWYpO1xuICBjb25zdCBzbG90T3duZXJTdGF0ZSA9IGdldFNsb3RPd25lclN0YXRlID8gZ2V0U2xvdE93bmVyU3RhdGUobWVyZ2VkUHJvcHMpIDoge307XG4gIGNvbnN0IGZpbmFsT3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBvd25lclN0YXRlLCBzbG90T3duZXJTdGF0ZSk7XG4gIGNvbnN0IExlYWZDb21wb25lbnQgPSBuYW1lID09PSAncm9vdCcgPyBzbG90Q29tcG9uZW50IHx8IHJvb3RDb21wb25lbnQgOiBzbG90Q29tcG9uZW50O1xuICBjb25zdCBwcm9wcyA9IGFwcGVuZE93bmVyU3RhdGUoZWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCBuYW1lID09PSAncm9vdCcgJiYgIXJvb3RDb21wb25lbnQgJiYgIXNsb3RzW25hbWVdICYmIGludGVybmFsRm9yd2FyZGVkUHJvcHMsIG5hbWUgIT09ICdyb290JyAmJiAhc2xvdHNbbmFtZV0gJiYgaW50ZXJuYWxGb3J3YXJkZWRQcm9wcywgbWVyZ2VkUHJvcHMsIExlYWZDb21wb25lbnQgJiYge1xuICAgIGFzOiBMZWFmQ29tcG9uZW50XG4gIH0sIHtcbiAgICByZWZcbiAgfSksIGZpbmFsT3duZXJTdGF0ZSk7XG4gIE9iamVjdC5rZXlzKHNsb3RPd25lclN0YXRlKS5mb3JFYWNoKHByb3BOYW1lID0+IHtcbiAgICBkZWxldGUgcHJvcHNbcHJvcE5hbWVdO1xuICB9KTtcbiAgcmV0dXJuIFtlbGVtZW50VHlwZSwgcHJvcHNdO1xufSIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0QWNjb3JkaW9uVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlBY2NvcmRpb24nLCBzbG90KTtcbn1cbmNvbnN0IGFjY29yZGlvbkNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlBY2NvcmRpb24nLCBbJ3Jvb3QnLCAncm91bmRlZCcsICdleHBhbmRlZCcsICdkaXNhYmxlZCcsICdndXR0ZXJzJywgJ3JlZ2lvbiddKTtcbmV4cG9ydCBkZWZhdWx0IGFjY29yZGlvbkNsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJkZWZhdWx0RXhwYW5kZWRcIiwgXCJkaXNhYmxlZFwiLCBcImRpc2FibGVHdXR0ZXJzXCIsIFwiZXhwYW5kZWRcIiwgXCJvbkNoYW5nZVwiLCBcInNxdWFyZVwiLCBcInNsb3RzXCIsIFwic2xvdFByb3BzXCIsIFwiVHJhbnNpdGlvbkNvbXBvbmVudFwiLCBcIlRyYW5zaXRpb25Qcm9wc1wiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGlzRnJhZ21lbnQgfSBmcm9tICdyZWFjdC1pcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgY2hhaW5Qcm9wVHlwZXMgZnJvbSAnQG11aS91dGlscy9jaGFpblByb3BUeXBlcyc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgeyBzdHlsZWQsIGNyZWF0ZVVzZVRoZW1lUHJvcHMgfSBmcm9tICcuLi96ZXJvLXN0eWxlZCc7XG5pbXBvcnQgQ29sbGFwc2UgZnJvbSAnLi4vQ29sbGFwc2UnO1xuaW1wb3J0IFBhcGVyIGZyb20gJy4uL1BhcGVyJztcbmltcG9ydCBBY2NvcmRpb25Db250ZXh0IGZyb20gJy4vQWNjb3JkaW9uQ29udGV4dCc7XG5pbXBvcnQgdXNlQ29udHJvbGxlZCBmcm9tICcuLi91dGlscy91c2VDb250cm9sbGVkJztcbmltcG9ydCB1c2VTbG90IGZyb20gJy4uL3V0aWxzL3VzZVNsb3QnO1xuaW1wb3J0IGFjY29yZGlvbkNsYXNzZXMsIHsgZ2V0QWNjb3JkaW9uVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9hY2NvcmRpb25DbGFzc2VzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCB1c2VUaGVtZVByb3BzID0gY3JlYXRlVXNlVGhlbWVQcm9wcygnTXVpQWNjb3JkaW9uJyk7XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3NlcyxcbiAgICBzcXVhcmUsXG4gICAgZXhwYW5kZWQsXG4gICAgZGlzYWJsZWQsXG4gICAgZGlzYWJsZUd1dHRlcnNcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsICFzcXVhcmUgJiYgJ3JvdW5kZWQnLCBleHBhbmRlZCAmJiAnZXhwYW5kZWQnLCBkaXNhYmxlZCAmJiAnZGlzYWJsZWQnLCAhZGlzYWJsZUd1dHRlcnMgJiYgJ2d1dHRlcnMnXSxcbiAgICByZWdpb246IFsncmVnaW9uJ11cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRBY2NvcmRpb25VdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcbmNvbnN0IEFjY29yZGlvblJvb3QgPSBzdHlsZWQoUGFwZXIsIHtcbiAgbmFtZTogJ011aUFjY29yZGlvbicsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3tcbiAgICAgIFtgJiAuJHthY2NvcmRpb25DbGFzc2VzLnJlZ2lvbn1gXTogc3R5bGVzLnJlZ2lvblxuICAgIH0sIHN0eWxlcy5yb290LCAhb3duZXJTdGF0ZS5zcXVhcmUgJiYgc3R5bGVzLnJvdW5kZWQsICFvd25lclN0YXRlLmRpc2FibGVHdXR0ZXJzICYmIHN0eWxlcy5ndXR0ZXJzXTtcbiAgfVxufSkoKHtcbiAgdGhlbWVcbn0pID0+IHtcbiAgY29uc3QgdHJhbnNpdGlvbiA9IHtcbiAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlc3RcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoWydtYXJnaW4nXSwgdHJhbnNpdGlvbiksXG4gICAgb3ZlcmZsb3dBbmNob3I6ICdub25lJyxcbiAgICAvLyBLZWVwIHRoZSBzYW1lIHNjcm9sbGluZyBwb3NpdGlvblxuICAgICcmOjpiZWZvcmUnOiB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICB0b3A6IC0xLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICBoZWlnaHQ6IDEsXG4gICAgICBjb250ZW50OiAnXCJcIicsXG4gICAgICBvcGFjaXR5OiAxLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5kaXZpZGVyLFxuICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKFsnb3BhY2l0eScsICdiYWNrZ3JvdW5kLWNvbG9yJ10sIHRyYW5zaXRpb24pXG4gICAgfSxcbiAgICAnJjpmaXJzdC1vZi10eXBlJzoge1xuICAgICAgJyY6OmJlZm9yZSc6IHtcbiAgICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgICB9XG4gICAgfSxcbiAgICBbYCYuJHthY2NvcmRpb25DbGFzc2VzLmV4cGFuZGVkfWBdOiB7XG4gICAgICAnJjo6YmVmb3JlJzoge1xuICAgICAgICBvcGFjaXR5OiAwXG4gICAgICB9LFxuICAgICAgJyY6Zmlyc3Qtb2YtdHlwZSc6IHtcbiAgICAgICAgbWFyZ2luVG9wOiAwXG4gICAgICB9LFxuICAgICAgJyY6bGFzdC1vZi10eXBlJzoge1xuICAgICAgICBtYXJnaW5Cb3R0b206IDBcbiAgICAgIH0sXG4gICAgICAnJiArICYnOiB7XG4gICAgICAgICcmOjpiZWZvcmUnOiB7XG4gICAgICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIFtgJi4ke2FjY29yZGlvbkNsYXNzZXMuZGlzYWJsZWR9YF06IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkQmFja2dyb3VuZFxuICAgIH1cbiAgfTtcbn0sICh7XG4gIHRoZW1lXG59KSA9PiAoe1xuICB2YXJpYW50czogW3tcbiAgICBwcm9wczogcHJvcHMgPT4gIXByb3BzLnNxdWFyZSxcbiAgICBzdHlsZToge1xuICAgICAgYm9yZGVyUmFkaXVzOiAwLFxuICAgICAgJyY6Zmlyc3Qtb2YtdHlwZSc6IHtcbiAgICAgICAgYm9yZGVyVG9wTGVmdFJhZGl1czogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnNoYXBlLmJvcmRlclJhZGl1cyxcbiAgICAgICAgYm9yZGVyVG9wUmlnaHRSYWRpdXM6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5zaGFwZS5ib3JkZXJSYWRpdXNcbiAgICAgIH0sXG4gICAgICAnJjpsYXN0LW9mLXR5cGUnOiB7XG4gICAgICAgIGJvcmRlckJvdHRvbUxlZnRSYWRpdXM6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5zaGFwZS5ib3JkZXJSYWRpdXMsXG4gICAgICAgIGJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzOiAodGhlbWUudmFycyB8fCB0aGVtZSkuc2hhcGUuYm9yZGVyUmFkaXVzLFxuICAgICAgICAvLyBGaXggYSByZW5kZXJpbmcgaXNzdWUgb24gRWRnZVxuICAgICAgICAnQHN1cHBvcnRzICgtbXMtaW1lLWFsaWduOiBhdXRvKSc6IHtcbiAgICAgICAgICBib3JkZXJCb3R0b21MZWZ0UmFkaXVzOiAwLFxuICAgICAgICAgIGJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzOiAwXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBwcm9wczogcHJvcHMgPT4gIXByb3BzLmRpc2FibGVHdXR0ZXJzLFxuICAgIHN0eWxlOiB7XG4gICAgICBbYCYuJHthY2NvcmRpb25DbGFzc2VzLmV4cGFuZGVkfWBdOiB7XG4gICAgICAgIG1hcmdpbjogJzE2cHggMCdcbiAgICAgIH1cbiAgICB9XG4gIH1dXG59KSk7XG5jb25zdCBBY2NvcmRpb24gPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBBY2NvcmRpb24oaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aUFjY29yZGlvbidcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblByb3AsXG4gICAgICBjbGFzc05hbWUsXG4gICAgICBkZWZhdWx0RXhwYW5kZWQgPSBmYWxzZSxcbiAgICAgIGRpc2FibGVkID0gZmFsc2UsXG4gICAgICBkaXNhYmxlR3V0dGVycyA9IGZhbHNlLFxuICAgICAgZXhwYW5kZWQ6IGV4cGFuZGVkUHJvcCxcbiAgICAgIG9uQ2hhbmdlLFxuICAgICAgc3F1YXJlID0gZmFsc2UsXG4gICAgICBzbG90cyA9IHt9LFxuICAgICAgc2xvdFByb3BzID0ge30sXG4gICAgICBUcmFuc2l0aW9uQ29tcG9uZW50OiBUcmFuc2l0aW9uQ29tcG9uZW50UHJvcCxcbiAgICAgIFRyYW5zaXRpb25Qcm9wczogVHJhbnNpdGlvblByb3BzUHJvcFxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBbZXhwYW5kZWQsIHNldEV4cGFuZGVkU3RhdGVdID0gdXNlQ29udHJvbGxlZCh7XG4gICAgY29udHJvbGxlZDogZXhwYW5kZWRQcm9wLFxuICAgIGRlZmF1bHQ6IGRlZmF1bHRFeHBhbmRlZCxcbiAgICBuYW1lOiAnQWNjb3JkaW9uJyxcbiAgICBzdGF0ZTogJ2V4cGFuZGVkJ1xuICB9KTtcbiAgY29uc3QgaGFuZGxlQ2hhbmdlID0gUmVhY3QudXNlQ2FsbGJhY2soZXZlbnQgPT4ge1xuICAgIHNldEV4cGFuZGVkU3RhdGUoIWV4cGFuZGVkKTtcbiAgICBpZiAob25DaGFuZ2UpIHtcbiAgICAgIG9uQ2hhbmdlKGV2ZW50LCAhZXhwYW5kZWQpO1xuICAgIH1cbiAgfSwgW2V4cGFuZGVkLCBvbkNoYW5nZSwgc2V0RXhwYW5kZWRTdGF0ZV0pO1xuICBjb25zdCBbc3VtbWFyeSwgLi4uY2hpbGRyZW5dID0gUmVhY3QuQ2hpbGRyZW4udG9BcnJheShjaGlsZHJlblByb3ApO1xuICBjb25zdCBjb250ZXh0VmFsdWUgPSBSZWFjdC51c2VNZW1vKCgpID0+ICh7XG4gICAgZXhwYW5kZWQsXG4gICAgZGlzYWJsZWQsXG4gICAgZGlzYWJsZUd1dHRlcnMsXG4gICAgdG9nZ2xlOiBoYW5kbGVDaGFuZ2VcbiAgfSksIFtleHBhbmRlZCwgZGlzYWJsZWQsIGRpc2FibGVHdXR0ZXJzLCBoYW5kbGVDaGFuZ2VdKTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIHNxdWFyZSxcbiAgICBkaXNhYmxlZCxcbiAgICBkaXNhYmxlR3V0dGVycyxcbiAgICBleHBhbmRlZFxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICBjb25zdCBiYWNrd2FyZENvbXBhdGlibGVTbG90cyA9IF9leHRlbmRzKHtcbiAgICB0cmFuc2l0aW9uOiBUcmFuc2l0aW9uQ29tcG9uZW50UHJvcFxuICB9LCBzbG90cyk7XG4gIGNvbnN0IGJhY2t3YXJkQ29tcGF0aWJsZVNsb3RQcm9wcyA9IF9leHRlbmRzKHtcbiAgICB0cmFuc2l0aW9uOiBUcmFuc2l0aW9uUHJvcHNQcm9wXG4gIH0sIHNsb3RQcm9wcyk7XG4gIGNvbnN0IFtUcmFuc2l0aW9uU2xvdCwgdHJhbnNpdGlvblByb3BzXSA9IHVzZVNsb3QoJ3RyYW5zaXRpb24nLCB7XG4gICAgZWxlbWVudFR5cGU6IENvbGxhcHNlLFxuICAgIGV4dGVybmFsRm9yd2FyZGVkUHJvcHM6IHtcbiAgICAgIHNsb3RzOiBiYWNrd2FyZENvbXBhdGlibGVTbG90cyxcbiAgICAgIHNsb3RQcm9wczogYmFja3dhcmRDb21wYXRpYmxlU2xvdFByb3BzXG4gICAgfSxcbiAgICBvd25lclN0YXRlXG4gIH0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3hzKEFjY29yZGlvblJvb3QsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIHJlZjogcmVmLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgc3F1YXJlOiBzcXVhcmVcbiAgfSwgb3RoZXIsIHtcbiAgICBjaGlsZHJlbjogWy8qI19fUFVSRV9fKi9fanN4KEFjY29yZGlvbkNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiBjb250ZXh0VmFsdWUsXG4gICAgICBjaGlsZHJlbjogc3VtbWFyeVxuICAgIH0pLCAvKiNfX1BVUkVfXyovX2pzeChUcmFuc2l0aW9uU2xvdCwgX2V4dGVuZHMoe1xuICAgICAgaW46IGV4cGFuZGVkLFxuICAgICAgdGltZW91dDogXCJhdXRvXCJcbiAgICB9LCB0cmFuc2l0aW9uUHJvcHMsIHtcbiAgICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeChcImRpdlwiLCB7XG4gICAgICAgIFwiYXJpYS1sYWJlbGxlZGJ5XCI6IHN1bW1hcnkucHJvcHMuaWQsXG4gICAgICAgIGlkOiBzdW1tYXJ5LnByb3BzWydhcmlhLWNvbnRyb2xzJ10sXG4gICAgICAgIHJvbGU6IFwicmVnaW9uXCIsXG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5yZWdpb24sXG4gICAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICAgICAgfSlcbiAgICB9KSldXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQWNjb3JkaW9uLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogY2hhaW5Qcm9wVHlwZXMoUHJvcFR5cGVzLm5vZGUuaXNSZXF1aXJlZCwgcHJvcHMgPT4ge1xuICAgIGNvbnN0IHN1bW1hcnkgPSBSZWFjdC5DaGlsZHJlbi50b0FycmF5KHByb3BzLmNoaWxkcmVuKVswXTtcbiAgICBpZiAoaXNGcmFnbWVudChzdW1tYXJ5KSkge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcihcIk1VSTogVGhlIEFjY29yZGlvbiBkb2Vzbid0IGFjY2VwdCBhIEZyYWdtZW50IGFzIGEgY2hpbGQuIFwiICsgJ0NvbnNpZGVyIHByb3ZpZGluZyBhbiBhcnJheSBpbnN0ZWFkLicpO1xuICAgIH1cbiAgICBpZiAoISAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQoc3VtbWFyeSkpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoJ01VSTogRXhwZWN0ZWQgdGhlIGZpcnN0IGNoaWxkIG9mIEFjY29yZGlvbiB0byBiZSBhIHZhbGlkIGVsZW1lbnQuJyk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9KSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGV4cGFuZHMgdGhlIGFjY29yZGlvbiBieSBkZWZhdWx0LlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGVmYXVsdEV4cGFuZGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpcyBkaXNhYmxlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgaXQgcmVtb3ZlcyB0aGUgbWFyZ2luIGJldHdlZW4gdHdvIGV4cGFuZGVkIGFjY29yZGlvbiBpdGVtcyBhbmQgdGhlIGluY3JlYXNlIG9mIGhlaWdodC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVHdXR0ZXJzOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgZXhwYW5kcyB0aGUgYWNjb3JkaW9uLCBvdGhlcndpc2UgY29sbGFwc2UgaXQuXG4gICAqIFNldHRpbmcgdGhpcyBwcm9wIGVuYWJsZXMgY29udHJvbCBvdmVyIHRoZSBhY2NvcmRpb24uXG4gICAqL1xuICBleHBhbmRlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBleHBhbmQvY29sbGFwc2Ugc3RhdGUgaXMgY2hhbmdlZC5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdC5TeW50aGV0aWNFdmVudH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suICoqV2FybmluZyoqOiBUaGlzIGlzIGEgZ2VuZXJpYyBldmVudCBub3QgYSBjaGFuZ2UgZXZlbnQuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gZXhwYW5kZWQgVGhlIGBleHBhbmRlZGAgc3RhdGUgb2YgdGhlIGFjY29yZGlvbi5cbiAgICovXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIFRoZSBwcm9wcyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlLlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgc2xvdFByb3BzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIHRyYW5zaXRpb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSlcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50cyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlLlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgc2xvdHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgdHJhbnNpdGlvbjogUHJvcFR5cGVzLmVsZW1lbnRUeXBlXG4gIH0pLFxuICAvKipcbiAgICogSWYgYHRydWVgLCByb3VuZGVkIGNvcm5lcnMgYXJlIGRpc2FibGVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgc3F1YXJlOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHRyYW5zaXRpb24uXG4gICAqIFtGb2xsb3cgdGhpcyBndWlkZV0oL21hdGVyaWFsLXVpL3RyYW5zaXRpb25zLyN0cmFuc2l0aW9uY29tcG9uZW50LXByb3ApIHRvIGxlYXJuIG1vcmUgYWJvdXQgdGhlIHJlcXVpcmVtZW50cyBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqIEBkZXByZWNhdGVkIFVzZSBgc2xvdHMudHJhbnNpdGlvbmAgaW5zdGVhZC4gVGhpcyBwcm9wIHdpbGwgYmUgcmVtb3ZlZCBpbiB2Ny4gW0hvdyB0byBtaWdyYXRlXSgvbWF0ZXJpYWwtdWkvbWlncmF0aW9uL21pZ3JhdGluZy1mcm9tLWRlcHJlY2F0ZWQtYXBpcy8pLlxuICAgKi9cbiAgVHJhbnNpdGlvbkNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgdHJhbnNpdGlvbiBlbGVtZW50LlxuICAgKiBCeSBkZWZhdWx0LCB0aGUgZWxlbWVudCBpcyBiYXNlZCBvbiB0aGlzIFtgVHJhbnNpdGlvbmBdKGh0dHBzOi8vcmVhY3Rjb21tdW5pdHkub3JnL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvdHJhbnNpdGlvbi8pIGNvbXBvbmVudC5cbiAgICogQGRlcHJlY2F0ZWQgVXNlIGBzbG90UHJvcHMudHJhbnNpdGlvbmAgaW5zdGVhZC4gVGhpcyBwcm9wIHdpbGwgYmUgcmVtb3ZlZCBpbiB2Ny4gW0hvdyB0byBtaWdyYXRlXSgvbWF0ZXJpYWwtdWkvbWlncmF0aW9uL21pZ3JhdGluZy1mcm9tLWRlcHJlY2F0ZWQtYXBpcy8pLlxuICAgKi9cbiAgVHJhbnNpdGlvblByb3BzOiBQcm9wVHlwZXMub2JqZWN0XG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgQWNjb3JkaW9uOyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0QWNjb3JkaW9uRGV0YWlsc1V0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpQWNjb3JkaW9uRGV0YWlscycsIHNsb3QpO1xufVxuY29uc3QgYWNjb3JkaW9uRGV0YWlsc0NsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlBY2NvcmRpb25EZXRhaWxzJywgWydyb290J10pO1xuZXhwb3J0IGRlZmF1bHQgYWNjb3JkaW9uRGV0YWlsc0NsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2xhc3NOYW1lXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IHsgc3R5bGVkLCBjcmVhdGVVc2VUaGVtZVByb3BzIH0gZnJvbSAnLi4vemVyby1zdHlsZWQnO1xuaW1wb3J0IHsgZ2V0QWNjb3JkaW9uRGV0YWlsc1V0aWxpdHlDbGFzcyB9IGZyb20gJy4vYWNjb3JkaW9uRGV0YWlsc0NsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVRoZW1lUHJvcHMgPSBjcmVhdGVVc2VUaGVtZVByb3BzKCdNdWlBY2NvcmRpb25EZXRhaWxzJyk7XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3Nlc1xuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290J11cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRBY2NvcmRpb25EZXRhaWxzVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBBY2NvcmRpb25EZXRhaWxzUm9vdCA9IHN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnTXVpQWNjb3JkaW9uRGV0YWlscycsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMucm9vdFxufSkoKHtcbiAgdGhlbWVcbn0pID0+ICh7XG4gIHBhZGRpbmc6IHRoZW1lLnNwYWNpbmcoMSwgMiwgMilcbn0pKTtcbmNvbnN0IEFjY29yZGlvbkRldGFpbHMgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBBY2NvcmRpb25EZXRhaWxzKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlBY2NvcmRpb25EZXRhaWxzJ1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgY2xhc3NOYW1lXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBwcm9wcztcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goQWNjb3JkaW9uRGV0YWlsc1Jvb3QsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIHJlZjogcmVmLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGVcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQWNjb3JkaW9uRGV0YWlscy5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IEFjY29yZGlvbkRldGFpbHM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5cbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmZ1bmN0aW9uIFJpcHBsZShwcm9wcykge1xuICBjb25zdCB7XG4gICAgY2xhc3NOYW1lLFxuICAgIGNsYXNzZXMsXG4gICAgcHVsc2F0ZSA9IGZhbHNlLFxuICAgIHJpcHBsZVgsXG4gICAgcmlwcGxlWSxcbiAgICByaXBwbGVTaXplLFxuICAgIGluOiBpblByb3AsXG4gICAgb25FeGl0ZWQsXG4gICAgdGltZW91dFxuICB9ID0gcHJvcHM7XG4gIGNvbnN0IFtsZWF2aW5nLCBzZXRMZWF2aW5nXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgcmlwcGxlQ2xhc3NOYW1lID0gY2xzeChjbGFzc05hbWUsIGNsYXNzZXMucmlwcGxlLCBjbGFzc2VzLnJpcHBsZVZpc2libGUsIHB1bHNhdGUgJiYgY2xhc3Nlcy5yaXBwbGVQdWxzYXRlKTtcbiAgY29uc3QgcmlwcGxlU3R5bGVzID0ge1xuICAgIHdpZHRoOiByaXBwbGVTaXplLFxuICAgIGhlaWdodDogcmlwcGxlU2l6ZSxcbiAgICB0b3A6IC0ocmlwcGxlU2l6ZSAvIDIpICsgcmlwcGxlWSxcbiAgICBsZWZ0OiAtKHJpcHBsZVNpemUgLyAyKSArIHJpcHBsZVhcbiAgfTtcbiAgY29uc3QgY2hpbGRDbGFzc05hbWUgPSBjbHN4KGNsYXNzZXMuY2hpbGQsIGxlYXZpbmcgJiYgY2xhc3Nlcy5jaGlsZExlYXZpbmcsIHB1bHNhdGUgJiYgY2xhc3Nlcy5jaGlsZFB1bHNhdGUpO1xuICBpZiAoIWluUHJvcCAmJiAhbGVhdmluZykge1xuICAgIHNldExlYXZpbmcodHJ1ZSk7XG4gIH1cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIWluUHJvcCAmJiBvbkV4aXRlZCAhPSBudWxsKSB7XG4gICAgICAvLyByZWFjdC10cmFuc2l0aW9uLWdyb3VwI29uRXhpdGVkXG4gICAgICBjb25zdCB0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KG9uRXhpdGVkLCB0aW1lb3V0KTtcbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SWQpO1xuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfSwgW29uRXhpdGVkLCBpblByb3AsIHRpbWVvdXRdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFwic3BhblwiLCB7XG4gICAgY2xhc3NOYW1lOiByaXBwbGVDbGFzc05hbWUsXG4gICAgc3R5bGU6IHJpcHBsZVN0eWxlcyxcbiAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goXCJzcGFuXCIsIHtcbiAgICAgIGNsYXNzTmFtZTogY2hpbGRDbGFzc05hbWVcbiAgICB9KVxuICB9KTtcbn1cbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFJpcHBsZS5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIEBpZ25vcmUgLSBpbmplY3RlZCBmcm9tIFRyYW5zaXRpb25Hcm91cFxuICAgKi9cbiAgaW46IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogQGlnbm9yZSAtIGluamVjdGVkIGZyb20gVHJhbnNpdGlvbkdyb3VwXG4gICAqL1xuICBvbkV4aXRlZDogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSByaXBwbGUgcHVsc2F0ZXMsIHR5cGljYWxseSBpbmRpY2F0aW5nIHRoZSBrZXlib2FyZCBmb2N1cyBzdGF0ZSBvZiBhbiBlbGVtZW50LlxuICAgKi9cbiAgcHVsc2F0ZTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBEaWFtZXRlciBvZiB0aGUgcmlwcGxlLlxuICAgKi9cbiAgcmlwcGxlU2l6ZTogUHJvcFR5cGVzLm51bWJlcixcbiAgLyoqXG4gICAqIEhvcml6b250YWwgcG9zaXRpb24gb2YgdGhlIHJpcHBsZSBjZW50ZXIuXG4gICAqL1xuICByaXBwbGVYOiBQcm9wVHlwZXMubnVtYmVyLFxuICAvKipcbiAgICogVmVydGljYWwgcG9zaXRpb24gb2YgdGhlIHJpcHBsZSBjZW50ZXIuXG4gICAqL1xuICByaXBwbGVZOiBQcm9wVHlwZXMubnVtYmVyLFxuICAvKipcbiAgICogZXhpdCBkZWxheVxuICAgKi9cbiAgdGltZW91dDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgUmlwcGxlOyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0VG91Y2hSaXBwbGVVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aVRvdWNoUmlwcGxlJywgc2xvdCk7XG59XG5jb25zdCB0b3VjaFJpcHBsZUNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlUb3VjaFJpcHBsZScsIFsncm9vdCcsICdyaXBwbGUnLCAncmlwcGxlVmlzaWJsZScsICdyaXBwbGVQdWxzYXRlJywgJ2NoaWxkJywgJ2NoaWxkTGVhdmluZycsICdjaGlsZFB1bHNhdGUnXSk7XG5leHBvcnQgZGVmYXVsdCB0b3VjaFJpcHBsZUNsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2VudGVyXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiXTtcbmxldCBfID0gdCA9PiB0LFxuICBfdCxcbiAgX3QyLFxuICBfdDMsXG4gIF90NDtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBUcmFuc2l0aW9uR3JvdXAgfSBmcm9tICdyZWFjdC10cmFuc2l0aW9uLWdyb3VwJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsga2V5ZnJhbWVzIH0gZnJvbSAnQG11aS9zeXN0ZW0nO1xuaW1wb3J0IHVzZVRpbWVvdXQgZnJvbSAnQG11aS91dGlscy91c2VUaW1lb3V0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgUmlwcGxlIGZyb20gJy4vUmlwcGxlJztcbmltcG9ydCB0b3VjaFJpcHBsZUNsYXNzZXMgZnJvbSAnLi90b3VjaFJpcHBsZUNsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IERVUkFUSU9OID0gNTUwO1xuZXhwb3J0IGNvbnN0IERFTEFZX1JJUFBMRSA9IDgwO1xuY29uc3QgZW50ZXJLZXlmcmFtZSA9IGtleWZyYW1lcyhfdCB8fCAoX3QgPSBfYFxuICAwJSB7XG4gICAgdHJhbnNmb3JtOiBzY2FsZSgwKTtcbiAgICBvcGFjaXR5OiAwLjE7XG4gIH1cblxuICAxMDAlIHtcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDEpO1xuICAgIG9wYWNpdHk6IDAuMztcbiAgfVxuYCkpO1xuY29uc3QgZXhpdEtleWZyYW1lID0ga2V5ZnJhbWVzKF90MiB8fCAoX3QyID0gX2BcbiAgMCUge1xuICAgIG9wYWNpdHk6IDE7XG4gIH1cblxuICAxMDAlIHtcbiAgICBvcGFjaXR5OiAwO1xuICB9XG5gKSk7XG5jb25zdCBwdWxzYXRlS2V5ZnJhbWUgPSBrZXlmcmFtZXMoX3QzIHx8IChfdDMgPSBfYFxuICAwJSB7XG4gICAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcbiAgfVxuXG4gIDUwJSB7XG4gICAgdHJhbnNmb3JtOiBzY2FsZSgwLjkyKTtcbiAgfVxuXG4gIDEwMCUge1xuICAgIHRyYW5zZm9ybTogc2NhbGUoMSk7XG4gIH1cbmApKTtcbmV4cG9ydCBjb25zdCBUb3VjaFJpcHBsZVJvb3QgPSBzdHlsZWQoJ3NwYW4nLCB7XG4gIG5hbWU6ICdNdWlUb3VjaFJpcHBsZScsXG4gIHNsb3Q6ICdSb290J1xufSkoe1xuICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gIHBvaW50ZXJFdmVudHM6ICdub25lJyxcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIHpJbmRleDogMCxcbiAgdG9wOiAwLFxuICByaWdodDogMCxcbiAgYm90dG9tOiAwLFxuICBsZWZ0OiAwLFxuICBib3JkZXJSYWRpdXM6ICdpbmhlcml0J1xufSk7XG5cbi8vIFRoaXMgYHN0eWxlZCgpYCBmdW5jdGlvbiBpbnZva2VzIGtleWZyYW1lcy4gYHN0eWxlZC1jb21wb25lbnRzYCBvbmx5IHN1cHBvcnRzIGtleWZyYW1lc1xuLy8gaW4gc3RyaW5nIHRlbXBsYXRlcy4gRG8gbm90IGNvbnZlcnQgdGhlc2Ugc3R5bGVzIGluIEpTIG9iamVjdCBhcyBpdCB3aWxsIGJyZWFrLlxuZXhwb3J0IGNvbnN0IFRvdWNoUmlwcGxlUmlwcGxlID0gc3R5bGVkKFJpcHBsZSwge1xuICBuYW1lOiAnTXVpVG91Y2hSaXBwbGUnLFxuICBzbG90OiAnUmlwcGxlJ1xufSkoX3Q0IHx8IChfdDQgPSBfYFxuICBvcGFjaXR5OiAwO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG5cbiAgJi4kezB9IHtcbiAgICBvcGFjaXR5OiAwLjM7XG4gICAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcbiAgICBhbmltYXRpb24tbmFtZTogJHswfTtcbiAgICBhbmltYXRpb24tZHVyYXRpb246ICR7MH1tcztcbiAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiAkezB9O1xuICB9XG5cbiAgJi4kezB9IHtcbiAgICBhbmltYXRpb24tZHVyYXRpb246ICR7MH1tcztcbiAgfVxuXG4gICYgLiR7MH0ge1xuICAgIG9wYWNpdHk6IDE7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBjdXJyZW50Q29sb3I7XG4gIH1cblxuICAmIC4kezB9IHtcbiAgICBvcGFjaXR5OiAwO1xuICAgIGFuaW1hdGlvbi1uYW1lOiAkezB9O1xuICAgIGFuaW1hdGlvbi1kdXJhdGlvbjogJHswfW1zO1xuICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ICR7MH07XG4gIH1cblxuICAmIC4kezB9IHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgLyogQG5vZmxpcCAqL1xuICAgIGxlZnQ6IDBweDtcbiAgICB0b3A6IDA7XG4gICAgYW5pbWF0aW9uLW5hbWU6ICR7MH07XG4gICAgYW5pbWF0aW9uLWR1cmF0aW9uOiAyNTAwbXM7XG4gICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogJHswfTtcbiAgICBhbmltYXRpb24taXRlcmF0aW9uLWNvdW50OiBpbmZpbml0ZTtcbiAgICBhbmltYXRpb24tZGVsYXk6IDIwMG1zO1xuICB9XG5gKSwgdG91Y2hSaXBwbGVDbGFzc2VzLnJpcHBsZVZpc2libGUsIGVudGVyS2V5ZnJhbWUsIERVUkFUSU9OLCAoe1xuICB0aGVtZVxufSkgPT4gdGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VJbk91dCwgdG91Y2hSaXBwbGVDbGFzc2VzLnJpcHBsZVB1bHNhdGUsICh7XG4gIHRoZW1lXG59KSA9PiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVyLCB0b3VjaFJpcHBsZUNsYXNzZXMuY2hpbGQsIHRvdWNoUmlwcGxlQ2xhc3Nlcy5jaGlsZExlYXZpbmcsIGV4aXRLZXlmcmFtZSwgRFVSQVRJT04sICh7XG4gIHRoZW1lXG59KSA9PiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZUluT3V0LCB0b3VjaFJpcHBsZUNsYXNzZXMuY2hpbGRQdWxzYXRlLCBwdWxzYXRlS2V5ZnJhbWUsICh7XG4gIHRoZW1lXG59KSA9PiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZUluT3V0KTtcblxuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICpcbiAqIFRPRE8gdjU6IE1ha2UgcHJpdmF0ZVxuICovXG5jb25zdCBUb3VjaFJpcHBsZSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFRvdWNoUmlwcGxlKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlUb3VjaFJpcHBsZSdcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGNlbnRlcjogY2VudGVyUHJvcCA9IGZhbHNlLFxuICAgICAgY2xhc3NlcyA9IHt9LFxuICAgICAgY2xhc3NOYW1lXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IFtyaXBwbGVzLCBzZXRSaXBwbGVzXSA9IFJlYWN0LnVzZVN0YXRlKFtdKTtcbiAgY29uc3QgbmV4dEtleSA9IFJlYWN0LnVzZVJlZigwKTtcbiAgY29uc3QgcmlwcGxlQ2FsbGJhY2sgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKHJpcHBsZUNhbGxiYWNrLmN1cnJlbnQpIHtcbiAgICAgIHJpcHBsZUNhbGxiYWNrLmN1cnJlbnQoKTtcbiAgICAgIHJpcHBsZUNhbGxiYWNrLmN1cnJlbnQgPSBudWxsO1xuICAgIH1cbiAgfSwgW3JpcHBsZXNdKTtcblxuICAvLyBVc2VkIHRvIGZpbHRlciBvdXQgbW91c2UgZW11bGF0ZWQgZXZlbnRzIG9uIG1vYmlsZS5cbiAgY29uc3QgaWdub3JpbmdNb3VzZURvd24gPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuICAvLyBXZSB1c2UgYSB0aW1lciBpbiBvcmRlciB0byBvbmx5IHNob3cgdGhlIHJpcHBsZXMgZm9yIHRvdWNoIFwiY2xpY2tcIiBsaWtlIGV2ZW50cy5cbiAgLy8gV2UgZG9uJ3Qgd2FudCB0byBkaXNwbGF5IHRoZSByaXBwbGUgZm9yIHRvdWNoIHNjcm9sbCBldmVudHMuXG4gIGNvbnN0IHN0YXJ0VGltZXIgPSB1c2VUaW1lb3V0KCk7XG5cbiAgLy8gVGhpcyBpcyB0aGUgaG9vayBjYWxsZWQgb25jZSB0aGUgcHJldmlvdXMgdGltZW91dCBpcyByZWFkeS5cbiAgY29uc3Qgc3RhcnRUaW1lckNvbW1pdCA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3QgY29udGFpbmVyID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCBzdGFydENvbW1pdCA9IFJlYWN0LnVzZUNhbGxiYWNrKHBhcmFtcyA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgcHVsc2F0ZSxcbiAgICAgIHJpcHBsZVgsXG4gICAgICByaXBwbGVZLFxuICAgICAgcmlwcGxlU2l6ZSxcbiAgICAgIGNiXG4gICAgfSA9IHBhcmFtcztcbiAgICBzZXRSaXBwbGVzKG9sZFJpcHBsZXMgPT4gWy4uLm9sZFJpcHBsZXMsIC8qI19fUFVSRV9fKi9fanN4KFRvdWNoUmlwcGxlUmlwcGxlLCB7XG4gICAgICBjbGFzc2VzOiB7XG4gICAgICAgIHJpcHBsZTogY2xzeChjbGFzc2VzLnJpcHBsZSwgdG91Y2hSaXBwbGVDbGFzc2VzLnJpcHBsZSksXG4gICAgICAgIHJpcHBsZVZpc2libGU6IGNsc3goY2xhc3Nlcy5yaXBwbGVWaXNpYmxlLCB0b3VjaFJpcHBsZUNsYXNzZXMucmlwcGxlVmlzaWJsZSksXG4gICAgICAgIHJpcHBsZVB1bHNhdGU6IGNsc3goY2xhc3Nlcy5yaXBwbGVQdWxzYXRlLCB0b3VjaFJpcHBsZUNsYXNzZXMucmlwcGxlUHVsc2F0ZSksXG4gICAgICAgIGNoaWxkOiBjbHN4KGNsYXNzZXMuY2hpbGQsIHRvdWNoUmlwcGxlQ2xhc3Nlcy5jaGlsZCksXG4gICAgICAgIGNoaWxkTGVhdmluZzogY2xzeChjbGFzc2VzLmNoaWxkTGVhdmluZywgdG91Y2hSaXBwbGVDbGFzc2VzLmNoaWxkTGVhdmluZyksXG4gICAgICAgIGNoaWxkUHVsc2F0ZTogY2xzeChjbGFzc2VzLmNoaWxkUHVsc2F0ZSwgdG91Y2hSaXBwbGVDbGFzc2VzLmNoaWxkUHVsc2F0ZSlcbiAgICAgIH0sXG4gICAgICB0aW1lb3V0OiBEVVJBVElPTixcbiAgICAgIHB1bHNhdGU6IHB1bHNhdGUsXG4gICAgICByaXBwbGVYOiByaXBwbGVYLFxuICAgICAgcmlwcGxlWTogcmlwcGxlWSxcbiAgICAgIHJpcHBsZVNpemU6IHJpcHBsZVNpemVcbiAgICB9LCBuZXh0S2V5LmN1cnJlbnQpXSk7XG4gICAgbmV4dEtleS5jdXJyZW50ICs9IDE7XG4gICAgcmlwcGxlQ2FsbGJhY2suY3VycmVudCA9IGNiO1xuICB9LCBbY2xhc3Nlc10pO1xuICBjb25zdCBzdGFydCA9IFJlYWN0LnVzZUNhbGxiYWNrKChldmVudCA9IHt9LCBvcHRpb25zID0ge30sIGNiID0gKCkgPT4ge30pID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBwdWxzYXRlID0gZmFsc2UsXG4gICAgICBjZW50ZXIgPSBjZW50ZXJQcm9wIHx8IG9wdGlvbnMucHVsc2F0ZSxcbiAgICAgIGZha2VFbGVtZW50ID0gZmFsc2UgLy8gRm9yIHRlc3QgcHVycG9zZXNcbiAgICB9ID0gb3B0aW9ucztcbiAgICBpZiAoKGV2ZW50ID09IG51bGwgPyB2b2lkIDAgOiBldmVudC50eXBlKSA9PT0gJ21vdXNlZG93bicgJiYgaWdub3JpbmdNb3VzZURvd24uY3VycmVudCkge1xuICAgICAgaWdub3JpbmdNb3VzZURvd24uY3VycmVudCA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoKGV2ZW50ID09IG51bGwgPyB2b2lkIDAgOiBldmVudC50eXBlKSA9PT0gJ3RvdWNoc3RhcnQnKSB7XG4gICAgICBpZ25vcmluZ01vdXNlRG93bi5jdXJyZW50ID0gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3QgZWxlbWVudCA9IGZha2VFbGVtZW50ID8gbnVsbCA6IGNvbnRhaW5lci5jdXJyZW50O1xuICAgIGNvbnN0IHJlY3QgPSBlbGVtZW50ID8gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSA6IHtcbiAgICAgIHdpZHRoOiAwLFxuICAgICAgaGVpZ2h0OiAwLFxuICAgICAgbGVmdDogMCxcbiAgICAgIHRvcDogMFxuICAgIH07XG5cbiAgICAvLyBHZXQgdGhlIHNpemUgb2YgdGhlIHJpcHBsZVxuICAgIGxldCByaXBwbGVYO1xuICAgIGxldCByaXBwbGVZO1xuICAgIGxldCByaXBwbGVTaXplO1xuICAgIGlmIChjZW50ZXIgfHwgZXZlbnQgPT09IHVuZGVmaW5lZCB8fCBldmVudC5jbGllbnRYID09PSAwICYmIGV2ZW50LmNsaWVudFkgPT09IDAgfHwgIWV2ZW50LmNsaWVudFggJiYgIWV2ZW50LnRvdWNoZXMpIHtcbiAgICAgIHJpcHBsZVggPSBNYXRoLnJvdW5kKHJlY3Qud2lkdGggLyAyKTtcbiAgICAgIHJpcHBsZVkgPSBNYXRoLnJvdW5kKHJlY3QuaGVpZ2h0IC8gMik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgY2xpZW50WCxcbiAgICAgICAgY2xpZW50WVxuICAgICAgfSA9IGV2ZW50LnRvdWNoZXMgJiYgZXZlbnQudG91Y2hlcy5sZW5ndGggPiAwID8gZXZlbnQudG91Y2hlc1swXSA6IGV2ZW50O1xuICAgICAgcmlwcGxlWCA9IE1hdGgucm91bmQoY2xpZW50WCAtIHJlY3QubGVmdCk7XG4gICAgICByaXBwbGVZID0gTWF0aC5yb3VuZChjbGllbnRZIC0gcmVjdC50b3ApO1xuICAgIH1cbiAgICBpZiAoY2VudGVyKSB7XG4gICAgICByaXBwbGVTaXplID0gTWF0aC5zcXJ0KCgyICogcmVjdC53aWR0aCAqKiAyICsgcmVjdC5oZWlnaHQgKiogMikgLyAzKTtcblxuICAgICAgLy8gRm9yIHNvbWUgcmVhc29uIHRoZSBhbmltYXRpb24gaXMgYnJva2VuIG9uIE1vYmlsZSBDaHJvbWUgaWYgdGhlIHNpemUgaXMgZXZlbi5cbiAgICAgIGlmIChyaXBwbGVTaXplICUgMiA9PT0gMCkge1xuICAgICAgICByaXBwbGVTaXplICs9IDE7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHNpemVYID0gTWF0aC5tYXgoTWF0aC5hYnMoKGVsZW1lbnQgPyBlbGVtZW50LmNsaWVudFdpZHRoIDogMCkgLSByaXBwbGVYKSwgcmlwcGxlWCkgKiAyICsgMjtcbiAgICAgIGNvbnN0IHNpemVZID0gTWF0aC5tYXgoTWF0aC5hYnMoKGVsZW1lbnQgPyBlbGVtZW50LmNsaWVudEhlaWdodCA6IDApIC0gcmlwcGxlWSksIHJpcHBsZVkpICogMiArIDI7XG4gICAgICByaXBwbGVTaXplID0gTWF0aC5zcXJ0KHNpemVYICoqIDIgKyBzaXplWSAqKiAyKTtcbiAgICB9XG5cbiAgICAvLyBUb3VjaGUgZGV2aWNlc1xuICAgIGlmIChldmVudCAhPSBudWxsICYmIGV2ZW50LnRvdWNoZXMpIHtcbiAgICAgIC8vIGNoZWNrIHRoYXQgdGhpcyBpc24ndCBhbm90aGVyIHRvdWNoc3RhcnQgZHVlIHRvIG11bHRpdG91Y2hcbiAgICAgIC8vIG90aGVyd2lzZSB3ZSB3aWxsIG9ubHkgY2xlYXIgYSBzaW5nbGUgdGltZXIgd2hlbiB1bm1vdW50aW5nIHdoaWxlIHR3b1xuICAgICAgLy8gYXJlIHJ1bm5pbmdcbiAgICAgIGlmIChzdGFydFRpbWVyQ29tbWl0LmN1cnJlbnQgPT09IG51bGwpIHtcbiAgICAgICAgLy8gUHJlcGFyZSB0aGUgcmlwcGxlIGVmZmVjdC5cbiAgICAgICAgc3RhcnRUaW1lckNvbW1pdC5jdXJyZW50ID0gKCkgPT4ge1xuICAgICAgICAgIHN0YXJ0Q29tbWl0KHtcbiAgICAgICAgICAgIHB1bHNhdGUsXG4gICAgICAgICAgICByaXBwbGVYLFxuICAgICAgICAgICAgcmlwcGxlWSxcbiAgICAgICAgICAgIHJpcHBsZVNpemUsXG4gICAgICAgICAgICBjYlxuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICAvLyBEZWxheSB0aGUgZXhlY3V0aW9uIG9mIHRoZSByaXBwbGUgZWZmZWN0LlxuICAgICAgICAvLyBXZSBoYXZlIHRvIG1ha2UgYSB0cmFkZW9mZiB3aXRoIHRoaXMgZGVsYXkgdmFsdWUuXG4gICAgICAgIHN0YXJ0VGltZXIuc3RhcnQoREVMQVlfUklQUExFLCAoKSA9PiB7XG4gICAgICAgICAgaWYgKHN0YXJ0VGltZXJDb21taXQuY3VycmVudCkge1xuICAgICAgICAgICAgc3RhcnRUaW1lckNvbW1pdC5jdXJyZW50KCk7XG4gICAgICAgICAgICBzdGFydFRpbWVyQ29tbWl0LmN1cnJlbnQgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXJ0Q29tbWl0KHtcbiAgICAgICAgcHVsc2F0ZSxcbiAgICAgICAgcmlwcGxlWCxcbiAgICAgICAgcmlwcGxlWSxcbiAgICAgICAgcmlwcGxlU2l6ZSxcbiAgICAgICAgY2JcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgW2NlbnRlclByb3AsIHN0YXJ0Q29tbWl0LCBzdGFydFRpbWVyXSk7XG4gIGNvbnN0IHB1bHNhdGUgPSBSZWFjdC51c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgc3RhcnQoe30sIHtcbiAgICAgIHB1bHNhdGU6IHRydWVcbiAgICB9KTtcbiAgfSwgW3N0YXJ0XSk7XG4gIGNvbnN0IHN0b3AgPSBSZWFjdC51c2VDYWxsYmFjaygoZXZlbnQsIGNiKSA9PiB7XG4gICAgc3RhcnRUaW1lci5jbGVhcigpO1xuXG4gICAgLy8gVGhlIHRvdWNoIGludGVyYWN0aW9uIG9jY3VycyB0b28gcXVpY2tseS5cbiAgICAvLyBXZSBzdGlsbCB3YW50IHRvIHNob3cgcmlwcGxlIGVmZmVjdC5cbiAgICBpZiAoKGV2ZW50ID09IG51bGwgPyB2b2lkIDAgOiBldmVudC50eXBlKSA9PT0gJ3RvdWNoZW5kJyAmJiBzdGFydFRpbWVyQ29tbWl0LmN1cnJlbnQpIHtcbiAgICAgIHN0YXJ0VGltZXJDb21taXQuY3VycmVudCgpO1xuICAgICAgc3RhcnRUaW1lckNvbW1pdC5jdXJyZW50ID0gbnVsbDtcbiAgICAgIHN0YXJ0VGltZXIuc3RhcnQoMCwgKCkgPT4ge1xuICAgICAgICBzdG9wKGV2ZW50LCBjYik7XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc3RhcnRUaW1lckNvbW1pdC5jdXJyZW50ID0gbnVsbDtcbiAgICBzZXRSaXBwbGVzKG9sZFJpcHBsZXMgPT4ge1xuICAgICAgaWYgKG9sZFJpcHBsZXMubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm4gb2xkUmlwcGxlcy5zbGljZSgxKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvbGRSaXBwbGVzO1xuICAgIH0pO1xuICAgIHJpcHBsZUNhbGxiYWNrLmN1cnJlbnQgPSBjYjtcbiAgfSwgW3N0YXJ0VGltZXJdKTtcbiAgUmVhY3QudXNlSW1wZXJhdGl2ZUhhbmRsZShyZWYsICgpID0+ICh7XG4gICAgcHVsc2F0ZSxcbiAgICBzdGFydCxcbiAgICBzdG9wXG4gIH0pLCBbcHVsc2F0ZSwgc3RhcnQsIHN0b3BdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFRvdWNoUmlwcGxlUm9vdCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeCh0b3VjaFJpcHBsZUNsYXNzZXMucm9vdCwgY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIHJlZjogY29udGFpbmVyXG4gIH0sIG90aGVyLCB7XG4gICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9fanN4KFRyYW5zaXRpb25Hcm91cCwge1xuICAgICAgY29tcG9uZW50OiBudWxsLFxuICAgICAgZXhpdDogdHJ1ZSxcbiAgICAgIGNoaWxkcmVuOiByaXBwbGVzXG4gICAgfSlcbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUb3VjaFJpcHBsZS5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSByaXBwbGUgc3RhcnRzIGF0IHRoZSBjZW50ZXIgb2YgdGhlIGNvbXBvbmVudFxuICAgKiByYXRoZXIgdGhhbiBhdCB0aGUgcG9pbnQgb2YgaW50ZXJhY3Rpb24uXG4gICAqL1xuICBjZW50ZXI6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZ1xufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IFRvdWNoUmlwcGxlOyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0QnV0dG9uQmFzZVV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpQnV0dG9uQmFzZScsIHNsb3QpO1xufVxuY29uc3QgYnV0dG9uQmFzZUNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlCdXR0b25CYXNlJywgWydyb290JywgJ2Rpc2FibGVkJywgJ2ZvY3VzVmlzaWJsZSddKTtcbmV4cG9ydCBkZWZhdWx0IGJ1dHRvbkJhc2VDbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImFjdGlvblwiLCBcImNlbnRlclJpcHBsZVwiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCIsIFwiZGlzYWJsZWRcIiwgXCJkaXNhYmxlUmlwcGxlXCIsIFwiZGlzYWJsZVRvdWNoUmlwcGxlXCIsIFwiZm9jdXNSaXBwbGVcIiwgXCJmb2N1c1Zpc2libGVDbGFzc05hbWVcIiwgXCJMaW5rQ29tcG9uZW50XCIsIFwib25CbHVyXCIsIFwib25DbGlja1wiLCBcIm9uQ29udGV4dE1lbnVcIiwgXCJvbkRyYWdMZWF2ZVwiLCBcIm9uRm9jdXNcIiwgXCJvbkZvY3VzVmlzaWJsZVwiLCBcIm9uS2V5RG93blwiLCBcIm9uS2V5VXBcIiwgXCJvbk1vdXNlRG93blwiLCBcIm9uTW91c2VMZWF2ZVwiLCBcIm9uTW91c2VVcFwiLCBcIm9uVG91Y2hFbmRcIiwgXCJvblRvdWNoTW92ZVwiLCBcIm9uVG91Y2hTdGFydFwiLCBcInRhYkluZGV4XCIsIFwiVG91Y2hSaXBwbGVQcm9wc1wiLCBcInRvdWNoUmlwcGxlUmVmXCIsIFwidHlwZVwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCByZWZUeXBlIGZyb20gJ0BtdWkvdXRpbHMvcmVmVHlwZSc7XG5pbXBvcnQgZWxlbWVudFR5cGVBY2NlcHRpbmdSZWYgZnJvbSAnQG11aS91dGlscy9lbGVtZW50VHlwZUFjY2VwdGluZ1JlZic7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHVzZVRoZW1lUHJvcHMgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lUHJvcHMnO1xuaW1wb3J0IHVzZUZvcmtSZWYgZnJvbSAnLi4vdXRpbHMvdXNlRm9ya1JlZic7XG5pbXBvcnQgdXNlRXZlbnRDYWxsYmFjayBmcm9tICcuLi91dGlscy91c2VFdmVudENhbGxiYWNrJztcbmltcG9ydCB1c2VJc0ZvY3VzVmlzaWJsZSBmcm9tICcuLi91dGlscy91c2VJc0ZvY3VzVmlzaWJsZSc7XG5pbXBvcnQgVG91Y2hSaXBwbGUgZnJvbSAnLi9Ub3VjaFJpcHBsZSc7XG5pbXBvcnQgYnV0dG9uQmFzZUNsYXNzZXMsIHsgZ2V0QnV0dG9uQmFzZVV0aWxpdHlDbGFzcyB9IGZyb20gJy4vYnV0dG9uQmFzZUNsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBkaXNhYmxlZCxcbiAgICBmb2N1c1Zpc2libGUsXG4gICAgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lLFxuICAgIGNsYXNzZXNcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIGRpc2FibGVkICYmICdkaXNhYmxlZCcsIGZvY3VzVmlzaWJsZSAmJiAnZm9jdXNWaXNpYmxlJ11cbiAgfTtcbiAgY29uc3QgY29tcG9zZWRDbGFzc2VzID0gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldEJ1dHRvbkJhc2VVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xuICBpZiAoZm9jdXNWaXNpYmxlICYmIGZvY3VzVmlzaWJsZUNsYXNzTmFtZSkge1xuICAgIGNvbXBvc2VkQ2xhc3Nlcy5yb290ICs9IGAgJHtmb2N1c1Zpc2libGVDbGFzc05hbWV9YDtcbiAgfVxuICByZXR1cm4gY29tcG9zZWRDbGFzc2VzO1xufTtcbmV4cG9ydCBjb25zdCBCdXR0b25CYXNlUm9vdCA9IHN0eWxlZCgnYnV0dG9uJywge1xuICBuYW1lOiAnTXVpQnV0dG9uQmFzZScsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMucm9vdFxufSkoe1xuICBkaXNwbGF5OiAnaW5saW5lLWZsZXgnLFxuICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gIFdlYmtpdFRhcEhpZ2hsaWdodENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCcsXG4gIC8vIFJlc2V0IGRlZmF1bHQgdmFsdWVcbiAgLy8gV2UgZGlzYWJsZSB0aGUgZm9jdXMgcmluZyBmb3IgbW91c2UsIHRvdWNoIGFuZCBrZXlib2FyZCB1c2Vycy5cbiAgb3V0bGluZTogMCxcbiAgYm9yZGVyOiAwLFxuICBtYXJnaW46IDAsXG4gIC8vIFJlbW92ZSB0aGUgbWFyZ2luIGluIFNhZmFyaVxuICBib3JkZXJSYWRpdXM6IDAsXG4gIHBhZGRpbmc6IDAsXG4gIC8vIFJlbW92ZSB0aGUgcGFkZGluZyBpbiBGaXJlZm94XG4gIGN1cnNvcjogJ3BvaW50ZXInLFxuICB1c2VyU2VsZWN0OiAnbm9uZScsXG4gIHZlcnRpY2FsQWxpZ246ICdtaWRkbGUnLFxuICBNb3pBcHBlYXJhbmNlOiAnbm9uZScsXG4gIC8vIFJlc2V0XG4gIFdlYmtpdEFwcGVhcmFuY2U6ICdub25lJyxcbiAgLy8gUmVzZXRcbiAgdGV4dERlY29yYXRpb246ICdub25lJyxcbiAgLy8gU28gd2UgdGFrZSBwcmVjZWRlbnQgb3ZlciB0aGUgc3R5bGUgb2YgYSBuYXRpdmUgPGEgLz4gZWxlbWVudC5cbiAgY29sb3I6ICdpbmhlcml0JyxcbiAgJyY6Oi1tb3otZm9jdXMtaW5uZXInOiB7XG4gICAgYm9yZGVyU3R5bGU6ICdub25lJyAvLyBSZW1vdmUgRmlyZWZveCBkb3R0ZWQgb3V0bGluZS5cbiAgfSxcbiAgW2AmLiR7YnV0dG9uQmFzZUNsYXNzZXMuZGlzYWJsZWR9YF06IHtcbiAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gICAgLy8gRGlzYWJsZSBsaW5rIGludGVyYWN0aW9uc1xuICAgIGN1cnNvcjogJ2RlZmF1bHQnXG4gIH0sXG4gICdAbWVkaWEgcHJpbnQnOiB7XG4gICAgY29sb3JBZGp1c3Q6ICdleGFjdCdcbiAgfVxufSk7XG5cbi8qKlxuICogYEJ1dHRvbkJhc2VgIGNvbnRhaW5zIGFzIGZldyBzdHlsZXMgYXMgcG9zc2libGUuXG4gKiBJdCBhaW1zIHRvIGJlIGEgc2ltcGxlIGJ1aWxkaW5nIGJsb2NrIGZvciBjcmVhdGluZyBhIGJ1dHRvbi5cbiAqIEl0IGNvbnRhaW5zIGEgbG9hZCBvZiBzdHlsZSByZXNldCBhbmQgc29tZSBmb2N1cy9yaXBwbGUgbG9naWMuXG4gKi9cbmNvbnN0IEJ1dHRvbkJhc2UgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBCdXR0b25CYXNlKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlCdXR0b25CYXNlJ1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgYWN0aW9uLFxuICAgICAgY2VudGVyUmlwcGxlID0gZmFsc2UsXG4gICAgICBjaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNvbXBvbmVudCA9ICdidXR0b24nLFxuICAgICAgZGlzYWJsZWQgPSBmYWxzZSxcbiAgICAgIGRpc2FibGVSaXBwbGUgPSBmYWxzZSxcbiAgICAgIGRpc2FibGVUb3VjaFJpcHBsZSA9IGZhbHNlLFxuICAgICAgZm9jdXNSaXBwbGUgPSBmYWxzZSxcbiAgICAgIExpbmtDb21wb25lbnQgPSAnYScsXG4gICAgICBvbkJsdXIsXG4gICAgICBvbkNsaWNrLFxuICAgICAgb25Db250ZXh0TWVudSxcbiAgICAgIG9uRHJhZ0xlYXZlLFxuICAgICAgb25Gb2N1cyxcbiAgICAgIG9uRm9jdXNWaXNpYmxlLFxuICAgICAgb25LZXlEb3duLFxuICAgICAgb25LZXlVcCxcbiAgICAgIG9uTW91c2VEb3duLFxuICAgICAgb25Nb3VzZUxlYXZlLFxuICAgICAgb25Nb3VzZVVwLFxuICAgICAgb25Ub3VjaEVuZCxcbiAgICAgIG9uVG91Y2hNb3ZlLFxuICAgICAgb25Ub3VjaFN0YXJ0LFxuICAgICAgdGFiSW5kZXggPSAwLFxuICAgICAgVG91Y2hSaXBwbGVQcm9wcyxcbiAgICAgIHRvdWNoUmlwcGxlUmVmLFxuICAgICAgdHlwZVxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBidXR0b25SZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIGNvbnN0IHJpcHBsZVJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3QgaGFuZGxlUmlwcGxlUmVmID0gdXNlRm9ya1JlZihyaXBwbGVSZWYsIHRvdWNoUmlwcGxlUmVmKTtcbiAgY29uc3Qge1xuICAgIGlzRm9jdXNWaXNpYmxlUmVmLFxuICAgIG9uRm9jdXM6IGhhbmRsZUZvY3VzVmlzaWJsZSxcbiAgICBvbkJsdXI6IGhhbmRsZUJsdXJWaXNpYmxlLFxuICAgIHJlZjogZm9jdXNWaXNpYmxlUmVmXG4gIH0gPSB1c2VJc0ZvY3VzVmlzaWJsZSgpO1xuICBjb25zdCBbZm9jdXNWaXNpYmxlLCBzZXRGb2N1c1Zpc2libGVdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuICBpZiAoZGlzYWJsZWQgJiYgZm9jdXNWaXNpYmxlKSB7XG4gICAgc2V0Rm9jdXNWaXNpYmxlKGZhbHNlKTtcbiAgfVxuICBSZWFjdC51c2VJbXBlcmF0aXZlSGFuZGxlKGFjdGlvbiwgKCkgPT4gKHtcbiAgICBmb2N1c1Zpc2libGU6ICgpID0+IHtcbiAgICAgIHNldEZvY3VzVmlzaWJsZSh0cnVlKTtcbiAgICAgIGJ1dHRvblJlZi5jdXJyZW50LmZvY3VzKCk7XG4gICAgfVxuICB9KSwgW10pO1xuICBjb25zdCBbbW91bnRlZFN0YXRlLCBzZXRNb3VudGVkU3RhdGVdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHNldE1vdW50ZWRTdGF0ZSh0cnVlKTtcbiAgfSwgW10pO1xuICBjb25zdCBlbmFibGVUb3VjaFJpcHBsZSA9IG1vdW50ZWRTdGF0ZSAmJiAhZGlzYWJsZVJpcHBsZSAmJiAhZGlzYWJsZWQ7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGZvY3VzVmlzaWJsZSAmJiBmb2N1c1JpcHBsZSAmJiAhZGlzYWJsZVJpcHBsZSAmJiBtb3VudGVkU3RhdGUpIHtcbiAgICAgIHJpcHBsZVJlZi5jdXJyZW50LnB1bHNhdGUoKTtcbiAgICB9XG4gIH0sIFtkaXNhYmxlUmlwcGxlLCBmb2N1c1JpcHBsZSwgZm9jdXNWaXNpYmxlLCBtb3VudGVkU3RhdGVdKTtcbiAgZnVuY3Rpb24gdXNlUmlwcGxlSGFuZGxlcihyaXBwbGVBY3Rpb24sIGV2ZW50Q2FsbGJhY2ssIHNraXBSaXBwbGVBY3Rpb24gPSBkaXNhYmxlVG91Y2hSaXBwbGUpIHtcbiAgICByZXR1cm4gdXNlRXZlbnRDYWxsYmFjayhldmVudCA9PiB7XG4gICAgICBpZiAoZXZlbnRDYWxsYmFjaykge1xuICAgICAgICBldmVudENhbGxiYWNrKGV2ZW50KTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGlnbm9yZSA9IHNraXBSaXBwbGVBY3Rpb247XG4gICAgICBpZiAoIWlnbm9yZSAmJiByaXBwbGVSZWYuY3VycmVudCkge1xuICAgICAgICByaXBwbGVSZWYuY3VycmVudFtyaXBwbGVBY3Rpb25dKGV2ZW50KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pO1xuICB9XG4gIGNvbnN0IGhhbmRsZU1vdXNlRG93biA9IHVzZVJpcHBsZUhhbmRsZXIoJ3N0YXJ0Jywgb25Nb3VzZURvd24pO1xuICBjb25zdCBoYW5kbGVDb250ZXh0TWVudSA9IHVzZVJpcHBsZUhhbmRsZXIoJ3N0b3AnLCBvbkNvbnRleHRNZW51KTtcbiAgY29uc3QgaGFuZGxlRHJhZ0xlYXZlID0gdXNlUmlwcGxlSGFuZGxlcignc3RvcCcsIG9uRHJhZ0xlYXZlKTtcbiAgY29uc3QgaGFuZGxlTW91c2VVcCA9IHVzZVJpcHBsZUhhbmRsZXIoJ3N0b3AnLCBvbk1vdXNlVXApO1xuICBjb25zdCBoYW5kbGVNb3VzZUxlYXZlID0gdXNlUmlwcGxlSGFuZGxlcignc3RvcCcsIGV2ZW50ID0+IHtcbiAgICBpZiAoZm9jdXNWaXNpYmxlKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgICBpZiAob25Nb3VzZUxlYXZlKSB7XG4gICAgICBvbk1vdXNlTGVhdmUoZXZlbnQpO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGhhbmRsZVRvdWNoU3RhcnQgPSB1c2VSaXBwbGVIYW5kbGVyKCdzdGFydCcsIG9uVG91Y2hTdGFydCk7XG4gIGNvbnN0IGhhbmRsZVRvdWNoRW5kID0gdXNlUmlwcGxlSGFuZGxlcignc3RvcCcsIG9uVG91Y2hFbmQpO1xuICBjb25zdCBoYW5kbGVUb3VjaE1vdmUgPSB1c2VSaXBwbGVIYW5kbGVyKCdzdG9wJywgb25Ub3VjaE1vdmUpO1xuICBjb25zdCBoYW5kbGVCbHVyID0gdXNlUmlwcGxlSGFuZGxlcignc3RvcCcsIGV2ZW50ID0+IHtcbiAgICBoYW5kbGVCbHVyVmlzaWJsZShldmVudCk7XG4gICAgaWYgKGlzRm9jdXNWaXNpYmxlUmVmLmN1cnJlbnQgPT09IGZhbHNlKSB7XG4gICAgICBzZXRGb2N1c1Zpc2libGUoZmFsc2UpO1xuICAgIH1cbiAgICBpZiAob25CbHVyKSB7XG4gICAgICBvbkJsdXIoZXZlbnQpO1xuICAgIH1cbiAgfSwgZmFsc2UpO1xuICBjb25zdCBoYW5kbGVGb2N1cyA9IHVzZUV2ZW50Q2FsbGJhY2soZXZlbnQgPT4ge1xuICAgIC8vIEZpeCBmb3IgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy83NzY5XG4gICAgaWYgKCFidXR0b25SZWYuY3VycmVudCkge1xuICAgICAgYnV0dG9uUmVmLmN1cnJlbnQgPSBldmVudC5jdXJyZW50VGFyZ2V0O1xuICAgIH1cbiAgICBoYW5kbGVGb2N1c1Zpc2libGUoZXZlbnQpO1xuICAgIGlmIChpc0ZvY3VzVmlzaWJsZVJlZi5jdXJyZW50ID09PSB0cnVlKSB7XG4gICAgICBzZXRGb2N1c1Zpc2libGUodHJ1ZSk7XG4gICAgICBpZiAob25Gb2N1c1Zpc2libGUpIHtcbiAgICAgICAgb25Gb2N1c1Zpc2libGUoZXZlbnQpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAob25Gb2N1cykge1xuICAgICAgb25Gb2N1cyhldmVudCk7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgaXNOb25OYXRpdmVCdXR0b24gPSAoKSA9PiB7XG4gICAgY29uc3QgYnV0dG9uID0gYnV0dG9uUmVmLmN1cnJlbnQ7XG4gICAgcmV0dXJuIGNvbXBvbmVudCAmJiBjb21wb25lbnQgIT09ICdidXR0b24nICYmICEoYnV0dG9uLnRhZ05hbWUgPT09ICdBJyAmJiBidXR0b24uaHJlZik7XG4gIH07XG5cbiAgLyoqXG4gICAqIElFMTEgc2hpbSBmb3IgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0tleWJvYXJkRXZlbnQvcmVwZWF0XG4gICAqL1xuICBjb25zdCBrZXlkb3duUmVmID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcbiAgY29uc3QgaGFuZGxlS2V5RG93biA9IHVzZUV2ZW50Q2FsbGJhY2soZXZlbnQgPT4ge1xuICAgIC8vIENoZWNrIGlmIGtleSBpcyBhbHJlYWR5IGRvd24gdG8gYXZvaWQgcmVwZWF0cyBiZWluZyBjb3VudGVkIGFzIG11bHRpcGxlIGFjdGl2YXRpb25zXG4gICAgaWYgKGZvY3VzUmlwcGxlICYmICFrZXlkb3duUmVmLmN1cnJlbnQgJiYgZm9jdXNWaXNpYmxlICYmIHJpcHBsZVJlZi5jdXJyZW50ICYmIGV2ZW50LmtleSA9PT0gJyAnKSB7XG4gICAgICBrZXlkb3duUmVmLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgcmlwcGxlUmVmLmN1cnJlbnQuc3RvcChldmVudCwgKCkgPT4ge1xuICAgICAgICByaXBwbGVSZWYuY3VycmVudC5zdGFydChldmVudCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGV2ZW50LnRhcmdldCA9PT0gZXZlbnQuY3VycmVudFRhcmdldCAmJiBpc05vbk5hdGl2ZUJ1dHRvbigpICYmIGV2ZW50LmtleSA9PT0gJyAnKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgICBpZiAob25LZXlEb3duKSB7XG4gICAgICBvbktleURvd24oZXZlbnQpO1xuICAgIH1cblxuICAgIC8vIEtleWJvYXJkIGFjY2Vzc2liaWxpdHkgZm9yIG5vbiBpbnRlcmFjdGl2ZSBlbGVtZW50c1xuICAgIGlmIChldmVudC50YXJnZXQgPT09IGV2ZW50LmN1cnJlbnRUYXJnZXQgJiYgaXNOb25OYXRpdmVCdXR0b24oKSAmJiBldmVudC5rZXkgPT09ICdFbnRlcicgJiYgIWRpc2FibGVkKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgaWYgKG9uQ2xpY2spIHtcbiAgICAgICAgb25DbGljayhldmVudCk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgY29uc3QgaGFuZGxlS2V5VXAgPSB1c2VFdmVudENhbGxiYWNrKGV2ZW50ID0+IHtcbiAgICAvLyBjYWxsaW5nIHByZXZlbnREZWZhdWx0IGluIGtleVVwIG9uIGEgPGJ1dHRvbj4gd2lsbCBub3QgZGlzcGF0Y2ggYSBjbGljayBldmVudCBpZiBTcGFjZSBpcyBwcmVzc2VkXG4gICAgLy8gaHR0cHM6Ly9jb2Rlc2FuZGJveC5pby9wL3NhbmRib3gvYnV0dG9uLWtleXVwLXByZXZlbnRkZWZhdWx0LWRuN2YwXG4gICAgaWYgKGZvY3VzUmlwcGxlICYmIGV2ZW50LmtleSA9PT0gJyAnICYmIHJpcHBsZVJlZi5jdXJyZW50ICYmIGZvY3VzVmlzaWJsZSAmJiAhZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAga2V5ZG93blJlZi5jdXJyZW50ID0gZmFsc2U7XG4gICAgICByaXBwbGVSZWYuY3VycmVudC5zdG9wKGV2ZW50LCAoKSA9PiB7XG4gICAgICAgIHJpcHBsZVJlZi5jdXJyZW50LnB1bHNhdGUoZXZlbnQpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChvbktleVVwKSB7XG4gICAgICBvbktleVVwKGV2ZW50KTtcbiAgICB9XG5cbiAgICAvLyBLZXlib2FyZCBhY2Nlc3NpYmlsaXR5IGZvciBub24gaW50ZXJhY3RpdmUgZWxlbWVudHNcbiAgICBpZiAob25DbGljayAmJiBldmVudC50YXJnZXQgPT09IGV2ZW50LmN1cnJlbnRUYXJnZXQgJiYgaXNOb25OYXRpdmVCdXR0b24oKSAmJiBldmVudC5rZXkgPT09ICcgJyAmJiAhZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgb25DbGljayhldmVudCk7XG4gICAgfVxuICB9KTtcbiAgbGV0IENvbXBvbmVudFByb3AgPSBjb21wb25lbnQ7XG4gIGlmIChDb21wb25lbnRQcm9wID09PSAnYnV0dG9uJyAmJiAob3RoZXIuaHJlZiB8fCBvdGhlci50bykpIHtcbiAgICBDb21wb25lbnRQcm9wID0gTGlua0NvbXBvbmVudDtcbiAgfVxuICBjb25zdCBidXR0b25Qcm9wcyA9IHt9O1xuICBpZiAoQ29tcG9uZW50UHJvcCA9PT0gJ2J1dHRvbicpIHtcbiAgICBidXR0b25Qcm9wcy50eXBlID0gdHlwZSA9PT0gdW5kZWZpbmVkID8gJ2J1dHRvbicgOiB0eXBlO1xuICAgIGJ1dHRvblByb3BzLmRpc2FibGVkID0gZGlzYWJsZWQ7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCFvdGhlci5ocmVmICYmICFvdGhlci50bykge1xuICAgICAgYnV0dG9uUHJvcHMucm9sZSA9ICdidXR0b24nO1xuICAgIH1cbiAgICBpZiAoZGlzYWJsZWQpIHtcbiAgICAgIGJ1dHRvblByb3BzWydhcmlhLWRpc2FibGVkJ10gPSBkaXNhYmxlZDtcbiAgICB9XG4gIH1cbiAgY29uc3QgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihyZWYsIGZvY3VzVmlzaWJsZVJlZiwgYnV0dG9uUmVmKTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgaWYgKGVuYWJsZVRvdWNoUmlwcGxlICYmICFyaXBwbGVSZWYuY3VycmVudCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFsnTVVJOiBUaGUgYGNvbXBvbmVudGAgcHJvcCBwcm92aWRlZCB0byBCdXR0b25CYXNlIGlzIGludmFsaWQuJywgJ1BsZWFzZSBtYWtlIHN1cmUgdGhlIGNoaWxkcmVuIHByb3AgaXMgcmVuZGVyZWQgaW4gdGhpcyBjdXN0b20gY29tcG9uZW50LiddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9LCBbZW5hYmxlVG91Y2hSaXBwbGVdKTtcbiAgfVxuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY2VudGVyUmlwcGxlLFxuICAgIGNvbXBvbmVudCxcbiAgICBkaXNhYmxlZCxcbiAgICBkaXNhYmxlUmlwcGxlLFxuICAgIGRpc2FibGVUb3VjaFJpcHBsZSxcbiAgICBmb2N1c1JpcHBsZSxcbiAgICB0YWJJbmRleCxcbiAgICBmb2N1c1Zpc2libGVcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4cyhCdXR0b25CYXNlUm9vdCwgX2V4dGVuZHMoe1xuICAgIGFzOiBDb21wb25lbnRQcm9wLFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICBvbkJsdXI6IGhhbmRsZUJsdXIsXG4gICAgb25DbGljazogb25DbGljayxcbiAgICBvbkNvbnRleHRNZW51OiBoYW5kbGVDb250ZXh0TWVudSxcbiAgICBvbkZvY3VzOiBoYW5kbGVGb2N1cyxcbiAgICBvbktleURvd246IGhhbmRsZUtleURvd24sXG4gICAgb25LZXlVcDogaGFuZGxlS2V5VXAsXG4gICAgb25Nb3VzZURvd246IGhhbmRsZU1vdXNlRG93bixcbiAgICBvbk1vdXNlTGVhdmU6IGhhbmRsZU1vdXNlTGVhdmUsXG4gICAgb25Nb3VzZVVwOiBoYW5kbGVNb3VzZVVwLFxuICAgIG9uRHJhZ0xlYXZlOiBoYW5kbGVEcmFnTGVhdmUsXG4gICAgb25Ub3VjaEVuZDogaGFuZGxlVG91Y2hFbmQsXG4gICAgb25Ub3VjaE1vdmU6IGhhbmRsZVRvdWNoTW92ZSxcbiAgICBvblRvdWNoU3RhcnQ6IGhhbmRsZVRvdWNoU3RhcnQsXG4gICAgcmVmOiBoYW5kbGVSZWYsXG4gICAgdGFiSW5kZXg6IGRpc2FibGVkID8gLTEgOiB0YWJJbmRleCxcbiAgICB0eXBlOiB0eXBlXG4gIH0sIGJ1dHRvblByb3BzLCBvdGhlciwge1xuICAgIGNoaWxkcmVuOiBbY2hpbGRyZW4sIGVuYWJsZVRvdWNoUmlwcGxlID9cbiAgICAvKiNfX1BVUkVfXyovXG4gICAgLyogVG91Y2hSaXBwbGUgaXMgb25seSBuZWVkZWQgY2xpZW50LXNpZGUsIHgyIGJvb3N0IG9uIHRoZSBzZXJ2ZXIuICovXG4gICAgX2pzeChUb3VjaFJpcHBsZSwgX2V4dGVuZHMoe1xuICAgICAgcmVmOiBoYW5kbGVSaXBwbGVSZWYsXG4gICAgICBjZW50ZXI6IGNlbnRlclJpcHBsZVxuICAgIH0sIFRvdWNoUmlwcGxlUHJvcHMpKSA6IG51bGxdXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQnV0dG9uQmFzZS5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBBIHJlZiBmb3IgaW1wZXJhdGl2ZSBhY3Rpb25zLlxuICAgKiBJdCBjdXJyZW50bHkgb25seSBzdXBwb3J0cyBgZm9jdXNWaXNpYmxlKClgIGFjdGlvbi5cbiAgICovXG4gIGFjdGlvbjogcmVmVHlwZSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHJpcHBsZXMgYXJlIGNlbnRlcmVkLlxuICAgKiBUaGV5IHdvbid0IHN0YXJ0IGF0IHRoZSBjdXJzb3IgaW50ZXJhY3Rpb24gcG9zaXRpb24uXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBjZW50ZXJSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IGVsZW1lbnRUeXBlQWNjZXB0aW5nUmVmLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIGRpc2FibGVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgcmlwcGxlIGVmZmVjdCBpcyBkaXNhYmxlZC5cbiAgICpcbiAgICog4pqg77iPIFdpdGhvdXQgYSByaXBwbGUgdGhlcmUgaXMgbm8gc3R5bGluZyBmb3IgOmZvY3VzLXZpc2libGUgYnkgZGVmYXVsdC4gQmUgc3VyZVxuICAgKiB0byBoaWdobGlnaHQgdGhlIGVsZW1lbnQgYnkgYXBwbHlpbmcgc2VwYXJhdGUgc3R5bGVzIHdpdGggdGhlIGAuTXVpLWZvY3VzVmlzaWJsZWAgY2xhc3MuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlUmlwcGxlOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHRvdWNoIHJpcHBsZSBlZmZlY3QgaXMgZGlzYWJsZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlVG91Y2hSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYmFzZSBidXR0b24gd2lsbCBoYXZlIGEga2V5Ym9hcmQgZm9jdXMgcmlwcGxlLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZm9jdXNSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhpcyBwcm9wIGNhbiBoZWxwIGlkZW50aWZ5IHdoaWNoIGVsZW1lbnQgaGFzIGtleWJvYXJkIGZvY3VzLlxuICAgKiBUaGUgY2xhc3MgbmFtZSB3aWxsIGJlIGFwcGxpZWQgd2hlbiB0aGUgZWxlbWVudCBnYWlucyB0aGUgZm9jdXMgdGhyb3VnaCBrZXlib2FyZCBpbnRlcmFjdGlvbi5cbiAgICogSXQncyBhIHBvbHlmaWxsIGZvciB0aGUgW0NTUyA6Zm9jdXMtdmlzaWJsZSBzZWxlY3Rvcl0oaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL3NlbGVjdG9ycy00LyN0aGUtZm9jdXMtdmlzaWJsZS1wc2V1ZG8pLlxuICAgKiBUaGUgcmF0aW9uYWxlIGZvciB1c2luZyB0aGlzIGZlYXR1cmUgW2lzIGV4cGxhaW5lZCBoZXJlXShodHRwczovL2dpdGh1Yi5jb20vV0lDRy9mb2N1cy12aXNpYmxlL2Jsb2IvSEVBRC9leHBsYWluZXIubWQpLlxuICAgKiBBIFtwb2x5ZmlsbCBjYW4gYmUgdXNlZF0oaHR0cHM6Ly9naXRodWIuY29tL1dJQ0cvZm9jdXMtdmlzaWJsZSkgdG8gYXBwbHkgYSBgZm9jdXMtdmlzaWJsZWAgY2xhc3MgdG8gb3RoZXIgY29tcG9uZW50c1xuICAgKiBpZiBuZWVkZWQuXG4gICAqL1xuICBmb2N1c1Zpc2libGVDbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBocmVmOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5hbnksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgdG8gcmVuZGVyIGEgbGluayB3aGVuIHRoZSBgaHJlZmAgcHJvcCBpcyBwcm92aWRlZC5cbiAgICogQGRlZmF1bHQgJ2EnXG4gICAqL1xuICBMaW5rQ29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkJsdXI6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkNvbnRleHRNZW51OiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRHJhZ0xlYXZlOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRm9jdXM6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGZvY3VzZWQgd2l0aCBhIGtleWJvYXJkLlxuICAgKiBXZSB0cmlnZ2VyIGEgYG9uRm9jdXNgIGNhbGxiYWNrIHRvby5cbiAgICovXG4gIG9uRm9jdXNWaXNpYmxlOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uS2V5RG93bjogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbktleVVwOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uTW91c2VEb3duOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uTW91c2VMZWF2ZTogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbk1vdXNlVXA6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Ub3VjaEVuZDogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvblRvdWNoTW92ZTogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvblRvdWNoU3RhcnQ6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogQGRlZmF1bHQgMFxuICAgKi9cbiAgdGFiSW5kZXg6IFByb3BUeXBlcy5udW1iZXIsXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBgVG91Y2hSaXBwbGVgIGVsZW1lbnQuXG4gICAqL1xuICBUb3VjaFJpcHBsZVByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQSByZWYgdGhhdCBwb2ludHMgdG8gdGhlIGBUb3VjaFJpcHBsZWAgZWxlbWVudC5cbiAgICovXG4gIHRvdWNoUmlwcGxlUmVmOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBjdXJyZW50OiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgcHVsc2F0ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgIHN0YXJ0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgc3RvcDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxuICAgIH0pXG4gIH0pXSksXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICB0eXBlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydidXR0b24nLCAncmVzZXQnLCAnc3VibWl0J10pLCBQcm9wVHlwZXMuc3RyaW5nXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBCdXR0b25CYXNlOyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0QWNjb3JkaW9uU3VtbWFyeVV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpQWNjb3JkaW9uU3VtbWFyeScsIHNsb3QpO1xufVxuY29uc3QgYWNjb3JkaW9uU3VtbWFyeUNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlBY2NvcmRpb25TdW1tYXJ5JywgWydyb290JywgJ2V4cGFuZGVkJywgJ2ZvY3VzVmlzaWJsZScsICdkaXNhYmxlZCcsICdndXR0ZXJzJywgJ2NvbnRlbnRHdXR0ZXJzJywgJ2NvbnRlbnQnLCAnZXhwYW5kSWNvbldyYXBwZXInXSk7XG5leHBvcnQgZGVmYXVsdCBhY2NvcmRpb25TdW1tYXJ5Q2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImV4cGFuZEljb25cIiwgXCJmb2N1c1Zpc2libGVDbGFzc05hbWVcIiwgXCJvbkNsaWNrXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IHsgc3R5bGVkLCBjcmVhdGVVc2VUaGVtZVByb3BzIH0gZnJvbSAnLi4vemVyby1zdHlsZWQnO1xuaW1wb3J0IEJ1dHRvbkJhc2UgZnJvbSAnLi4vQnV0dG9uQmFzZSc7XG5pbXBvcnQgQWNjb3JkaW9uQ29udGV4dCBmcm9tICcuLi9BY2NvcmRpb24vQWNjb3JkaW9uQ29udGV4dCc7XG5pbXBvcnQgYWNjb3JkaW9uU3VtbWFyeUNsYXNzZXMsIHsgZ2V0QWNjb3JkaW9uU3VtbWFyeVV0aWxpdHlDbGFzcyB9IGZyb20gJy4vYWNjb3JkaW9uU3VtbWFyeUNsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVRoZW1lUHJvcHMgPSBjcmVhdGVVc2VUaGVtZVByb3BzKCdNdWlBY2NvcmRpb25TdW1tYXJ5Jyk7XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3NlcyxcbiAgICBleHBhbmRlZCxcbiAgICBkaXNhYmxlZCxcbiAgICBkaXNhYmxlR3V0dGVyc1xuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgZXhwYW5kZWQgJiYgJ2V4cGFuZGVkJywgZGlzYWJsZWQgJiYgJ2Rpc2FibGVkJywgIWRpc2FibGVHdXR0ZXJzICYmICdndXR0ZXJzJ10sXG4gICAgZm9jdXNWaXNpYmxlOiBbJ2ZvY3VzVmlzaWJsZSddLFxuICAgIGNvbnRlbnQ6IFsnY29udGVudCcsIGV4cGFuZGVkICYmICdleHBhbmRlZCcsICFkaXNhYmxlR3V0dGVycyAmJiAnY29udGVudEd1dHRlcnMnXSxcbiAgICBleHBhbmRJY29uV3JhcHBlcjogWydleHBhbmRJY29uV3JhcHBlcicsIGV4cGFuZGVkICYmICdleHBhbmRlZCddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0QWNjb3JkaW9uU3VtbWFyeVV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuY29uc3QgQWNjb3JkaW9uU3VtbWFyeVJvb3QgPSBzdHlsZWQoQnV0dG9uQmFzZSwge1xuICBuYW1lOiAnTXVpQWNjb3JkaW9uU3VtbWFyeScsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMucm9vdFxufSkoKHtcbiAgdGhlbWVcbn0pID0+IHtcbiAgY29uc3QgdHJhbnNpdGlvbiA9IHtcbiAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlc3RcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgbWluSGVpZ2h0OiA0OCxcbiAgICBwYWRkaW5nOiB0aGVtZS5zcGFjaW5nKDAsIDIpLFxuICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZShbJ21pbi1oZWlnaHQnLCAnYmFja2dyb3VuZC1jb2xvciddLCB0cmFuc2l0aW9uKSxcbiAgICBbYCYuJHthY2NvcmRpb25TdW1tYXJ5Q2xhc3Nlcy5mb2N1c1Zpc2libGV9YF06IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuYWN0aW9uLmZvY3VzXG4gICAgfSxcbiAgICBbYCYuJHthY2NvcmRpb25TdW1tYXJ5Q2xhc3Nlcy5kaXNhYmxlZH1gXToge1xuICAgICAgb3BhY2l0eTogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkT3BhY2l0eVxuICAgIH0sXG4gICAgW2AmOmhvdmVyOm5vdCguJHthY2NvcmRpb25TdW1tYXJ5Q2xhc3Nlcy5kaXNhYmxlZH0pYF06IHtcbiAgICAgIGN1cnNvcjogJ3BvaW50ZXInXG4gICAgfSxcbiAgICB2YXJpYW50czogW3tcbiAgICAgIHByb3BzOiBwcm9wcyA9PiAhcHJvcHMuZGlzYWJsZUd1dHRlcnMsXG4gICAgICBzdHlsZToge1xuICAgICAgICBbYCYuJHthY2NvcmRpb25TdW1tYXJ5Q2xhc3Nlcy5leHBhbmRlZH1gXToge1xuICAgICAgICAgIG1pbkhlaWdodDogNjRcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1dXG4gIH07XG59KTtcbmNvbnN0IEFjY29yZGlvblN1bW1hcnlDb250ZW50ID0gc3R5bGVkKCdkaXYnLCB7XG4gIG5hbWU6ICdNdWlBY2NvcmRpb25TdW1tYXJ5JyxcbiAgc2xvdDogJ0NvbnRlbnQnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5jb250ZW50XG59KSgoe1xuICB0aGVtZVxufSkgPT4gKHtcbiAgZGlzcGxheTogJ2ZsZXgnLFxuICBmbGV4R3JvdzogMSxcbiAgbWFyZ2luOiAnMTJweCAwJyxcbiAgdmFyaWFudHM6IFt7XG4gICAgcHJvcHM6IHByb3BzID0+ICFwcm9wcy5kaXNhYmxlR3V0dGVycyxcbiAgICBzdHlsZToge1xuICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKFsnbWFyZ2luJ10sIHtcbiAgICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXN0XG4gICAgICB9KSxcbiAgICAgIFtgJi4ke2FjY29yZGlvblN1bW1hcnlDbGFzc2VzLmV4cGFuZGVkfWBdOiB7XG4gICAgICAgIG1hcmdpbjogJzIwcHggMCdcbiAgICAgIH1cbiAgICB9XG4gIH1dXG59KSk7XG5jb25zdCBBY2NvcmRpb25TdW1tYXJ5RXhwYW5kSWNvbldyYXBwZXIgPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aUFjY29yZGlvblN1bW1hcnknLFxuICBzbG90OiAnRXhwYW5kSWNvbldyYXBwZXInLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5leHBhbmRJY29uV3JhcHBlclxufSkoKHtcbiAgdGhlbWVcbn0pID0+ICh7XG4gIGRpc3BsYXk6ICdmbGV4JyxcbiAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmFjdGlvbi5hY3RpdmUsXG4gIHRyYW5zZm9ybTogJ3JvdGF0ZSgwZGVnKScsXG4gIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgndHJhbnNmb3JtJywge1xuICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVzdFxuICB9KSxcbiAgW2AmLiR7YWNjb3JkaW9uU3VtbWFyeUNsYXNzZXMuZXhwYW5kZWR9YF06IHtcbiAgICB0cmFuc2Zvcm06ICdyb3RhdGUoMTgwZGVnKSdcbiAgfVxufSkpO1xuY29uc3QgQWNjb3JkaW9uU3VtbWFyeSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEFjY29yZGlvblN1bW1hcnkoaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aUFjY29yZGlvblN1bW1hcnknXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBjaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGV4cGFuZEljb24sXG4gICAgICBmb2N1c1Zpc2libGVDbGFzc05hbWUsXG4gICAgICBvbkNsaWNrXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IHtcbiAgICBkaXNhYmxlZCA9IGZhbHNlLFxuICAgIGRpc2FibGVHdXR0ZXJzLFxuICAgIGV4cGFuZGVkLFxuICAgIHRvZ2dsZVxuICB9ID0gUmVhY3QudXNlQ29udGV4dChBY2NvcmRpb25Db250ZXh0KTtcbiAgY29uc3QgaGFuZGxlQ2hhbmdlID0gZXZlbnQgPT4ge1xuICAgIGlmICh0b2dnbGUpIHtcbiAgICAgIHRvZ2dsZShldmVudCk7XG4gICAgfVxuICAgIGlmIChvbkNsaWNrKSB7XG4gICAgICBvbkNsaWNrKGV2ZW50KTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBleHBhbmRlZCxcbiAgICBkaXNhYmxlZCxcbiAgICBkaXNhYmxlR3V0dGVyc1xuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3hzKEFjY29yZGlvblN1bW1hcnlSb290LCBfZXh0ZW5kcyh7XG4gICAgZm9jdXNSaXBwbGU6IGZhbHNlLFxuICAgIGRpc2FibGVSaXBwbGU6IHRydWUsXG4gICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgIGNvbXBvbmVudDogXCJkaXZcIixcbiAgICBcImFyaWEtZXhwYW5kZWRcIjogZXhwYW5kZWQsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICBmb2N1c1Zpc2libGVDbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5mb2N1c1Zpc2libGUsIGZvY3VzVmlzaWJsZUNsYXNzTmFtZSksXG4gICAgb25DbGljazogaGFuZGxlQ2hhbmdlLFxuICAgIHJlZjogcmVmLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGVcbiAgfSwgb3RoZXIsIHtcbiAgICBjaGlsZHJlbjogWy8qI19fUFVSRV9fKi9fanN4KEFjY29yZGlvblN1bW1hcnlDb250ZW50LCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMuY29udGVudCxcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgICB9KSwgZXhwYW5kSWNvbiAmJiAvKiNfX1BVUkVfXyovX2pzeChBY2NvcmRpb25TdW1tYXJ5RXhwYW5kSWNvbldyYXBwZXIsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5leHBhbmRJY29uV3JhcHBlcixcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgICBjaGlsZHJlbjogZXhwYW5kSWNvblxuICAgIH0pXVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEFjY29yZGlvblN1bW1hcnkucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgaWNvbiB0byBkaXNwbGF5IGFzIHRoZSBleHBhbmQgaW5kaWNhdG9yLlxuICAgKi9cbiAgZXhwYW5kSWNvbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBUaGlzIHByb3AgY2FuIGhlbHAgaWRlbnRpZnkgd2hpY2ggZWxlbWVudCBoYXMga2V5Ym9hcmQgZm9jdXMuXG4gICAqIFRoZSBjbGFzcyBuYW1lIHdpbGwgYmUgYXBwbGllZCB3aGVuIHRoZSBlbGVtZW50IGdhaW5zIHRoZSBmb2N1cyB0aHJvdWdoIGtleWJvYXJkIGludGVyYWN0aW9uLlxuICAgKiBJdCdzIGEgcG9seWZpbGwgZm9yIHRoZSBbQ1NTIDpmb2N1cy12aXNpYmxlIHNlbGVjdG9yXShodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvc2VsZWN0b3JzLTQvI3RoZS1mb2N1cy12aXNpYmxlLXBzZXVkbykuXG4gICAqIFRoZSByYXRpb25hbGUgZm9yIHVzaW5nIHRoaXMgZmVhdHVyZSBbaXMgZXhwbGFpbmVkIGhlcmVdKGh0dHBzOi8vZ2l0aHViLmNvbS9XSUNHL2ZvY3VzLXZpc2libGUvYmxvYi9IRUFEL2V4cGxhaW5lci5tZCkuXG4gICAqIEEgW3BvbHlmaWxsIGNhbiBiZSB1c2VkXShodHRwczovL2dpdGh1Yi5jb20vV0lDRy9mb2N1cy12aXNpYmxlKSB0byBhcHBseSBhIGBmb2N1cy12aXNpYmxlYCBjbGFzcyB0byBvdGhlciBjb21wb25lbnRzXG4gICAqIGlmIG5lZWRlZC5cbiAgICovXG4gIGZvY3VzVmlzaWJsZUNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgQWNjb3JkaW9uU3VtbWFyeTsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldEFsZXJ0VXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlBbGVydCcsIHNsb3QpO1xufVxuY29uc3QgYWxlcnRDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpQWxlcnQnLCBbJ3Jvb3QnLCAnYWN0aW9uJywgJ2ljb24nLCAnbWVzc2FnZScsICdmaWxsZWQnLCAnY29sb3JTdWNjZXNzJywgJ2NvbG9ySW5mbycsICdjb2xvcldhcm5pbmcnLCAnY29sb3JFcnJvcicsICdmaWxsZWRTdWNjZXNzJywgJ2ZpbGxlZEluZm8nLCAnZmlsbGVkV2FybmluZycsICdmaWxsZWRFcnJvcicsICdvdXRsaW5lZCcsICdvdXRsaW5lZFN1Y2Nlc3MnLCAnb3V0bGluZWRJbmZvJywgJ291dGxpbmVkV2FybmluZycsICdvdXRsaW5lZEVycm9yJywgJ3N0YW5kYXJkJywgJ3N0YW5kYXJkU3VjY2VzcycsICdzdGFuZGFyZEluZm8nLCAnc3RhbmRhcmRXYXJuaW5nJywgJ3N0YW5kYXJkRXJyb3InXSk7XG5leHBvcnQgZGVmYXVsdCBhbGVydENsYXNzZXM7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRJY29uQnV0dG9uVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlJY29uQnV0dG9uJywgc2xvdCk7XG59XG5jb25zdCBpY29uQnV0dG9uQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUljb25CdXR0b24nLCBbJ3Jvb3QnLCAnZGlzYWJsZWQnLCAnY29sb3JJbmhlcml0JywgJ2NvbG9yUHJpbWFyeScsICdjb2xvclNlY29uZGFyeScsICdjb2xvckVycm9yJywgJ2NvbG9ySW5mbycsICdjb2xvclN1Y2Nlc3MnLCAnY29sb3JXYXJuaW5nJywgJ2VkZ2VTdGFydCcsICdlZGdlRW5kJywgJ3NpemVTbWFsbCcsICdzaXplTWVkaXVtJywgJ3NpemVMYXJnZSddKTtcbmV4cG9ydCBkZWZhdWx0IGljb25CdXR0b25DbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImVkZ2VcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbG9yXCIsIFwiZGlzYWJsZWRcIiwgXCJkaXNhYmxlRm9jdXNSaXBwbGVcIiwgXCJzaXplXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IGNoYWluUHJvcFR5cGVzIGZyb20gJ0BtdWkvdXRpbHMvY2hhaW5Qcm9wVHlwZXMnO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IHsgYWxwaGEgfSBmcm9tICdAbXVpL3N5c3RlbS9jb2xvck1hbmlwdWxhdG9yJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgQnV0dG9uQmFzZSBmcm9tICcuLi9CdXR0b25CYXNlJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IGljb25CdXR0b25DbGFzc2VzLCB7IGdldEljb25CdXR0b25VdGlsaXR5Q2xhc3MgfSBmcm9tICcuL2ljb25CdXR0b25DbGFzc2VzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3NlcyxcbiAgICBkaXNhYmxlZCxcbiAgICBjb2xvcixcbiAgICBlZGdlLFxuICAgIHNpemVcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIGRpc2FibGVkICYmICdkaXNhYmxlZCcsIGNvbG9yICE9PSAnZGVmYXVsdCcgJiYgYGNvbG9yJHtjYXBpdGFsaXplKGNvbG9yKX1gLCBlZGdlICYmIGBlZGdlJHtjYXBpdGFsaXplKGVkZ2UpfWAsIGBzaXplJHtjYXBpdGFsaXplKHNpemUpfWBdXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0SWNvbkJ1dHRvblV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuY29uc3QgSWNvbkJ1dHRvblJvb3QgPSBzdHlsZWQoQnV0dG9uQmFzZSwge1xuICBuYW1lOiAnTXVpSWNvbkJ1dHRvbicsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5yb290LCBvd25lclN0YXRlLmNvbG9yICE9PSAnZGVmYXVsdCcgJiYgc3R5bGVzW2Bjb2xvciR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLmNvbG9yKX1gXSwgb3duZXJTdGF0ZS5lZGdlICYmIHN0eWxlc1tgZWRnZSR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLmVkZ2UpfWBdLCBzdHlsZXNbYHNpemUke2NhcGl0YWxpemUob3duZXJTdGF0ZS5zaXplKX1gXV07XG4gIH1cbn0pKCh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiBfZXh0ZW5kcyh7XG4gIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gIGZsZXg6ICcwIDAgYXV0bycsXG4gIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMjQpLFxuICBwYWRkaW5nOiA4LFxuICBib3JkZXJSYWRpdXM6ICc1MCUnLFxuICBvdmVyZmxvdzogJ3Zpc2libGUnLFxuICAvLyBFeHBsaWNpdGx5IHNldCB0aGUgZGVmYXVsdCB2YWx1ZSB0byBzb2x2ZSBhIGJ1ZyBvbiBJRTExLlxuICBjb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuYWN0aW9uLmFjdGl2ZSxcbiAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdiYWNrZ3JvdW5kLWNvbG9yJywge1xuICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVzdFxuICB9KVxufSwgIW93bmVyU3RhdGUuZGlzYWJsZVJpcHBsZSAmJiB7XG4gICcmOmhvdmVyJzoge1xuICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUudmFycyA/IGByZ2JhKCR7dGhlbWUudmFycy5wYWxldHRlLmFjdGlvbi5hY3RpdmVDaGFubmVsfSAvICR7dGhlbWUudmFycy5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHl9KWAgOiBhbHBoYSh0aGVtZS5wYWxldHRlLmFjdGlvbi5hY3RpdmUsIHRoZW1lLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eSksXG4gICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCdcbiAgICB9XG4gIH1cbn0sIG93bmVyU3RhdGUuZWRnZSA9PT0gJ3N0YXJ0JyAmJiB7XG4gIG1hcmdpbkxlZnQ6IG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyA/IC0zIDogLTEyXG59LCBvd25lclN0YXRlLmVkZ2UgPT09ICdlbmQnICYmIHtcbiAgbWFyZ2luUmlnaHQ6IG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyA/IC0zIDogLTEyXG59KSwgKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IHtcbiAgdmFyIF9wYWxldHRlO1xuICBjb25zdCBwYWxldHRlID0gKF9wYWxldHRlID0gKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUpID09IG51bGwgPyB2b2lkIDAgOiBfcGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXTtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBvd25lclN0YXRlLmNvbG9yID09PSAnaW5oZXJpdCcgJiYge1xuICAgIGNvbG9yOiAnaW5oZXJpdCdcbiAgfSwgb3duZXJTdGF0ZS5jb2xvciAhPT0gJ2luaGVyaXQnICYmIG93bmVyU3RhdGUuY29sb3IgIT09ICdkZWZhdWx0JyAmJiBfZXh0ZW5kcyh7XG4gICAgY29sb3I6IHBhbGV0dGUgPT0gbnVsbCA/IHZvaWQgMCA6IHBhbGV0dGUubWFpblxuICB9LCAhb3duZXJTdGF0ZS5kaXNhYmxlUmlwcGxlICYmIHtcbiAgICAnJjpob3Zlcic6IF9leHRlbmRzKHt9LCBwYWxldHRlICYmIHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUudmFycyA/IGByZ2JhKCR7cGFsZXR0ZS5tYWluQ2hhbm5lbH0gLyAke3RoZW1lLnZhcnMucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5fSlgIDogYWxwaGEocGFsZXR0ZS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpXG4gICAgfSwge1xuICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgICB9XG4gICAgfSlcbiAgfSksIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiB7XG4gICAgcGFkZGluZzogNSxcbiAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDE4KVxuICB9LCBvd25lclN0YXRlLnNpemUgPT09ICdsYXJnZScgJiYge1xuICAgIHBhZGRpbmc6IDEyLFxuICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMjgpXG4gIH0sIHtcbiAgICBbYCYuJHtpY29uQnV0dG9uQ2xhc3Nlcy5kaXNhYmxlZH1gXToge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgICAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZFxuICAgIH1cbiAgfSk7XG59KTtcblxuLyoqXG4gKiBSZWZlciB0byB0aGUgW0ljb25zXSgvbWF0ZXJpYWwtdWkvaWNvbnMvKSBzZWN0aW9uIG9mIHRoZSBkb2N1bWVudGF0aW9uXG4gKiByZWdhcmRpbmcgdGhlIGF2YWlsYWJsZSBpY29uIG9wdGlvbnMuXG4gKi9cbmNvbnN0IEljb25CdXR0b24gPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBJY29uQnV0dG9uKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlJY29uQnV0dG9uJ1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgZWRnZSA9IGZhbHNlLFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUsXG4gICAgICBjb2xvciA9ICdkZWZhdWx0JyxcbiAgICAgIGRpc2FibGVkID0gZmFsc2UsXG4gICAgICBkaXNhYmxlRm9jdXNSaXBwbGUgPSBmYWxzZSxcbiAgICAgIHNpemUgPSAnbWVkaXVtJ1xuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgZWRnZSxcbiAgICBjb2xvcixcbiAgICBkaXNhYmxlZCxcbiAgICBkaXNhYmxlRm9jdXNSaXBwbGUsXG4gICAgc2l6ZVxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goSWNvbkJ1dHRvblJvb3QsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIGNlbnRlclJpcHBsZTogdHJ1ZSxcbiAgICBmb2N1c1JpcHBsZTogIWRpc2FibGVGb2N1c1JpcHBsZSxcbiAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIsIHtcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEljb25CdXR0b24ucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogVGhlIGljb24gdG8gZGlzcGxheS5cbiAgICovXG4gIGNoaWxkcmVuOiBjaGFpblByb3BUeXBlcyhQcm9wVHlwZXMubm9kZSwgcHJvcHMgPT4ge1xuICAgIGNvbnN0IGZvdW5kID0gUmVhY3QuQ2hpbGRyZW4udG9BcnJheShwcm9wcy5jaGlsZHJlbikuc29tZShjaGlsZCA9PiAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGQpICYmIGNoaWxkLnByb3BzLm9uQ2xpY2spO1xuICAgIGlmIChmb3VuZCkge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcihbJ01VSTogWW91IGFyZSBwcm92aWRpbmcgYW4gb25DbGljayBldmVudCBsaXN0ZW5lciB0byBhIGNoaWxkIG9mIGEgYnV0dG9uIGVsZW1lbnQuJywgJ1ByZWZlciBhcHBseWluZyBpdCB0byB0aGUgSWNvbkJ1dHRvbiBkaXJlY3RseS4nLCAnVGhpcyBndWFyYW50ZWVzIHRoYXQgdGhlIHdob2xlIDxidXR0b24+IHdpbGwgYmUgcmVzcG9uc2l2ZSB0byBjbGljayBldmVudHMuJ10uam9pbignXFxuJykpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfSksXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIEl0IHN1cHBvcnRzIGJvdGggZGVmYXVsdCBhbmQgY3VzdG9tIHRoZW1lIGNvbG9ycywgd2hpY2ggY2FuIGJlIGFkZGVkIGFzIHNob3duIGluIHRoZVxuICAgKiBbcGFsZXR0ZSBjdXN0b21pemF0aW9uIGd1aWRlXShodHRwczovL211aS5jb20vbWF0ZXJpYWwtdWkvY3VzdG9taXphdGlvbi9wYWxldHRlLyNjdXN0b20tY29sb3JzKS5cbiAgICogQGRlZmF1bHQgJ2RlZmF1bHQnXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydpbmhlcml0JywgJ2RlZmF1bHQnLCAncHJpbWFyeScsICdzZWNvbmRhcnknLCAnZXJyb3InLCAnaW5mbycsICdzdWNjZXNzJywgJ3dhcm5pbmcnXSksIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpcyBkaXNhYmxlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlICBrZXlib2FyZCBmb2N1cyByaXBwbGUgaXMgZGlzYWJsZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlRm9jdXNSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgcmlwcGxlIGVmZmVjdCBpcyBkaXNhYmxlZC5cbiAgICpcbiAgICog4pqg77iPIFdpdGhvdXQgYSByaXBwbGUgdGhlcmUgaXMgbm8gc3R5bGluZyBmb3IgOmZvY3VzLXZpc2libGUgYnkgZGVmYXVsdC4gQmUgc3VyZVxuICAgKiB0byBoaWdobGlnaHQgdGhlIGVsZW1lbnQgYnkgYXBwbHlpbmcgc2VwYXJhdGUgc3R5bGVzIHdpdGggdGhlIGAuTXVpLWZvY3VzVmlzaWJsZWAgY2xhc3MuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlUmlwcGxlOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGdpdmVuLCB1c2VzIGEgbmVnYXRpdmUgbWFyZ2luIHRvIGNvdW50ZXJhY3QgdGhlIHBhZGRpbmcgb24gb25lXG4gICAqIHNpZGUgKHRoaXMgaXMgb2Z0ZW4gaGVscGZ1bCBmb3IgYWxpZ25pbmcgdGhlIGxlZnQgb3IgcmlnaHRcbiAgICogc2lkZSBvZiB0aGUgaWNvbiB3aXRoIGNvbnRlbnQgYWJvdmUgb3IgYmVsb3csIHdpdGhvdXQgcnVpbmluZyB0aGUgYm9yZGVyXG4gICAqIHNpemUgYW5kIHNoYXBlKS5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGVkZ2U6IFByb3BUeXBlcy5vbmVPZihbJ2VuZCcsICdzdGFydCcsIGZhbHNlXSksXG4gIC8qKlxuICAgKiBUaGUgc2l6ZSBvZiB0aGUgY29tcG9uZW50LlxuICAgKiBgc21hbGxgIGlzIGVxdWl2YWxlbnQgdG8gdGhlIGRlbnNlIGJ1dHRvbiBzdHlsaW5nLlxuICAgKiBAZGVmYXVsdCAnbWVkaXVtJ1xuICAgKi9cbiAgc2l6ZTogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydzbWFsbCcsICdtZWRpdW0nLCAnbGFyZ2UnXSksIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IEljb25CdXR0b247IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY3JlYXRlU3ZnSWNvbiBmcm9tICcuLi8uLi91dGlscy9jcmVhdGVTdmdJY29uJztcblxuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuZXhwb3J0IGRlZmF1bHQgY3JlYXRlU3ZnSWNvbiggLyojX19QVVJFX18qL19qc3goXCJwYXRoXCIsIHtcbiAgZDogXCJNMjAsMTJBOCw4IDAgMCwxIDEyLDIwQTgsOCAwIDAsMSA0LDEyQTgsOCAwIDAsMSAxMiw0QzEyLjc2LDQgMTMuNSw0LjExIDE0LjIsIDQuMzFMMTUuNzcsMi43NEMxNC42MSwyLjI2IDEzLjM0LDIgMTIsMkExMCwxMCAwIDAsMCAyLDEyQTEwLDEwIDAgMCwwIDEyLDIyQTEwLDEwIDAgMCwgMCAyMiwxMk03LjkxLDEwLjA4TDYuNSwxMS41TDExLDE2TDIxLDZMMTkuNTksNC41OEwxMSwxMy4xN0w3LjkxLDEwLjA4WlwiXG59KSwgJ1N1Y2Nlc3NPdXRsaW5lZCcpOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNyZWF0ZVN2Z0ljb24gZnJvbSAnLi4vLi4vdXRpbHMvY3JlYXRlU3ZnSWNvbic7XG5cbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVN2Z0ljb24oIC8qI19fUFVSRV9fKi9fanN4KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTEyIDUuOTlMMTkuNTMgMTlINC40N0wxMiA1Ljk5TTEyIDJMMSAyMWgyMkwxMiAyem0xIDE0aC0ydjJoMnYtMnptMC02aC0ydjRoMnYtNHpcIlxufSksICdSZXBvcnRQcm9ibGVtT3V0bGluZWQnKTsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjcmVhdGVTdmdJY29uIGZyb20gJy4uLy4uL3V0aWxzL2NyZWF0ZVN2Z0ljb24nO1xuXG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVTdmdJY29uKCAvKiNfX1BVUkVfXyovX2pzeChcInBhdGhcIiwge1xuICBkOiBcIk0xMSAxNWgydjJoLTJ6bTAtOGgydjZoLTJ6bS45OS01QzYuNDcgMiAyIDYuNDggMiAxMnM0LjQ3IDEwIDkuOTkgMTBDMTcuNTIgMjIgMjIgMTcuNTIgMjIgMTJTMTcuNTIgMiAxMS45OSAyek0xMiAyMGMtNC40MiAwLTgtMy41OC04LThzMy41OC04IDgtOCA4IDMuNTggOCA4LTMuNTggOC04IDh6XCJcbn0pLCAnRXJyb3JPdXRsaW5lJyk7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY3JlYXRlU3ZnSWNvbiBmcm9tICcuLi8uLi91dGlscy9jcmVhdGVTdmdJY29uJztcblxuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuZXhwb3J0IGRlZmF1bHQgY3JlYXRlU3ZnSWNvbiggLyojX19QVVJFX18qL19qc3goXCJwYXRoXCIsIHtcbiAgZDogXCJNMTEsOUgxM1Y3SDExTTEyLDIwQzcuNTksMjAgNCwxNi40MSA0LDEyQzQsNy41OSA3LjU5LDQgMTIsNEMxNi40MSw0IDIwLDcuNTkgMjAsIDEyQzIwLDE2LjQxIDE2LjQxLDIwIDEyLDIwTTEyLDJBMTAsMTAgMCAwLDAgMiwxMkExMCwxMCAwIDAsMCAxMiwyMkExMCwxMCAwIDAsMCAyMiwxMkExMCwgMTAgMCAwLDAgMTIsMk0xMSwxN0gxM1YxMUgxMVYxN1pcIlxufSksICdJbmZvT3V0bGluZWQnKTsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjcmVhdGVTdmdJY29uIGZyb20gJy4uLy4uL3V0aWxzL2NyZWF0ZVN2Z0ljb24nO1xuXG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKlxuICogQWxpYXMgdG8gYENsZWFyYC5cbiAqL1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVN2Z0ljb24oIC8qI19fUFVSRV9fKi9fanN4KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTE5IDYuNDFMMTcuNTkgNSAxMiAxMC41OSA2LjQxIDUgNSA2LjQxIDEwLjU5IDEyIDUgMTcuNTkgNi40MSAxOSAxMiAxMy40MSAxNy41OSAxOSAxOSAxNy41OSAxMy40MSAxMnpcIlxufSksICdDbG9zZScpOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImFjdGlvblwiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiY2xvc2VUZXh0XCIsIFwiY29sb3JcIiwgXCJjb21wb25lbnRzXCIsIFwiY29tcG9uZW50c1Byb3BzXCIsIFwiaWNvblwiLCBcImljb25NYXBwaW5nXCIsIFwib25DbG9zZVwiLCBcInJvbGVcIiwgXCJzZXZlcml0eVwiLCBcInNsb3RQcm9wc1wiLCBcInNsb3RzXCIsIFwidmFyaWFudFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCB7IGRhcmtlbiwgbGlnaHRlbiB9IGZyb20gJ0BtdWkvc3lzdGVtL2NvbG9yTWFuaXB1bGF0b3InO1xuaW1wb3J0IHsgc3R5bGVkLCBjcmVhdGVVc2VUaGVtZVByb3BzIH0gZnJvbSAnLi4vemVyby1zdHlsZWQnO1xuaW1wb3J0IHVzZVNsb3QgZnJvbSAnLi4vdXRpbHMvdXNlU2xvdCc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCBQYXBlciBmcm9tICcuLi9QYXBlcic7XG5pbXBvcnQgYWxlcnRDbGFzc2VzLCB7IGdldEFsZXJ0VXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9hbGVydENsYXNzZXMnO1xuaW1wb3J0IEljb25CdXR0b24gZnJvbSAnLi4vSWNvbkJ1dHRvbic7XG5pbXBvcnQgU3VjY2Vzc091dGxpbmVkSWNvbiBmcm9tICcuLi9pbnRlcm5hbC9zdmctaWNvbnMvU3VjY2Vzc091dGxpbmVkJztcbmltcG9ydCBSZXBvcnRQcm9ibGVtT3V0bGluZWRJY29uIGZyb20gJy4uL2ludGVybmFsL3N2Zy1pY29ucy9SZXBvcnRQcm9ibGVtT3V0bGluZWQnO1xuaW1wb3J0IEVycm9yT3V0bGluZUljb24gZnJvbSAnLi4vaW50ZXJuYWwvc3ZnLWljb25zL0Vycm9yT3V0bGluZSc7XG5pbXBvcnQgSW5mb091dGxpbmVkSWNvbiBmcm9tICcuLi9pbnRlcm5hbC9zdmctaWNvbnMvSW5mb091dGxpbmVkJztcbmltcG9ydCBDbG9zZUljb24gZnJvbSAnLi4vaW50ZXJuYWwvc3ZnLWljb25zL0Nsb3NlJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCB1c2VUaGVtZVByb3BzID0gY3JlYXRlVXNlVGhlbWVQcm9wcygnTXVpQWxlcnQnKTtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICB2YXJpYW50LFxuICAgIGNvbG9yLFxuICAgIHNldmVyaXR5LFxuICAgIGNsYXNzZXNcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIGBjb2xvciR7Y2FwaXRhbGl6ZShjb2xvciB8fCBzZXZlcml0eSl9YCwgYCR7dmFyaWFudH0ke2NhcGl0YWxpemUoY29sb3IgfHwgc2V2ZXJpdHkpfWAsIGAke3ZhcmlhbnR9YF0sXG4gICAgaWNvbjogWydpY29uJ10sXG4gICAgbWVzc2FnZTogWydtZXNzYWdlJ10sXG4gICAgYWN0aW9uOiBbJ2FjdGlvbiddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0QWxlcnRVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcbmNvbnN0IEFsZXJ0Um9vdCA9IHN0eWxlZChQYXBlciwge1xuICBuYW1lOiAnTXVpQWxlcnQnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgc3R5bGVzW293bmVyU3RhdGUudmFyaWFudF0sIHN0eWxlc1tgJHtvd25lclN0YXRlLnZhcmlhbnR9JHtjYXBpdGFsaXplKG93bmVyU3RhdGUuY29sb3IgfHwgb3duZXJTdGF0ZS5zZXZlcml0eSl9YF1dO1xuICB9XG59KSgoe1xuICB0aGVtZVxufSkgPT4ge1xuICBjb25zdCBnZXRDb2xvciA9IHRoZW1lLnBhbGV0dGUubW9kZSA9PT0gJ2xpZ2h0JyA/IGRhcmtlbiA6IGxpZ2h0ZW47XG4gIGNvbnN0IGdldEJhY2tncm91bmRDb2xvciA9IHRoZW1lLnBhbGV0dGUubW9kZSA9PT0gJ2xpZ2h0JyA/IGxpZ2h0ZW4gOiBkYXJrZW47XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgdGhlbWUudHlwb2dyYXBoeS5ib2R5Miwge1xuICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgcGFkZGluZzogJzZweCAxNnB4JyxcbiAgICB2YXJpYW50czogWy4uLk9iamVjdC5lbnRyaWVzKHRoZW1lLnBhbGV0dGUpLmZpbHRlcigoWywgdmFsdWVdKSA9PiB2YWx1ZS5tYWluICYmIHZhbHVlLmxpZ2h0KS5tYXAoKFtjb2xvcl0pID0+ICh7XG4gICAgICBwcm9wczoge1xuICAgICAgICBjb2xvclNldmVyaXR5OiBjb2xvcixcbiAgICAgICAgdmFyaWFudDogJ3N0YW5kYXJkJ1xuICAgICAgfSxcbiAgICAgIHN0eWxlOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS52YXJzID8gdGhlbWUudmFycy5wYWxldHRlLkFsZXJ0W2Ake2NvbG9yfUNvbG9yYF0gOiBnZXRDb2xvcih0aGVtZS5wYWxldHRlW2NvbG9yXS5saWdodCwgMC42KSxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS52YXJzID8gdGhlbWUudmFycy5wYWxldHRlLkFsZXJ0W2Ake2NvbG9yfVN0YW5kYXJkQmdgXSA6IGdldEJhY2tncm91bmRDb2xvcih0aGVtZS5wYWxldHRlW2NvbG9yXS5saWdodCwgMC45KSxcbiAgICAgICAgW2AmIC4ke2FsZXJ0Q2xhc3Nlcy5pY29ufWBdOiB0aGVtZS52YXJzID8ge1xuICAgICAgICAgIGNvbG9yOiB0aGVtZS52YXJzLnBhbGV0dGUuQWxlcnRbYCR7Y29sb3J9SWNvbkNvbG9yYF1cbiAgICAgICAgfSA6IHtcbiAgICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZVtjb2xvcl0ubWFpblxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSkpLCAuLi5PYmplY3QuZW50cmllcyh0aGVtZS5wYWxldHRlKS5maWx0ZXIoKFssIHZhbHVlXSkgPT4gdmFsdWUubWFpbiAmJiB2YWx1ZS5saWdodCkubWFwKChbY29sb3JdKSA9PiAoe1xuICAgICAgcHJvcHM6IHtcbiAgICAgICAgY29sb3JTZXZlcml0eTogY29sb3IsXG4gICAgICAgIHZhcmlhbnQ6ICdvdXRsaW5lZCdcbiAgICAgIH0sXG4gICAgICBzdHlsZToge1xuICAgICAgICBjb2xvcjogdGhlbWUudmFycyA/IHRoZW1lLnZhcnMucGFsZXR0ZS5BbGVydFtgJHtjb2xvcn1Db2xvcmBdIDogZ2V0Q29sb3IodGhlbWUucGFsZXR0ZVtjb2xvcl0ubGlnaHQsIDAuNiksXG4gICAgICAgIGJvcmRlcjogYDFweCBzb2xpZCAkeyh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlW2NvbG9yXS5saWdodH1gLFxuICAgICAgICBbYCYgLiR7YWxlcnRDbGFzc2VzLmljb259YF06IHRoZW1lLnZhcnMgPyB7XG4gICAgICAgICAgY29sb3I6IHRoZW1lLnZhcnMucGFsZXR0ZS5BbGVydFtgJHtjb2xvcn1JY29uQ29sb3JgXVxuICAgICAgICB9IDoge1xuICAgICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlW2NvbG9yXS5tYWluXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KSksIC4uLk9iamVjdC5lbnRyaWVzKHRoZW1lLnBhbGV0dGUpLmZpbHRlcigoWywgdmFsdWVdKSA9PiB2YWx1ZS5tYWluICYmIHZhbHVlLmRhcmspLm1hcCgoW2NvbG9yXSkgPT4gKHtcbiAgICAgIHByb3BzOiB7XG4gICAgICAgIGNvbG9yU2V2ZXJpdHk6IGNvbG9yLFxuICAgICAgICB2YXJpYW50OiAnZmlsbGVkJ1xuICAgICAgfSxcbiAgICAgIHN0eWxlOiBfZXh0ZW5kcyh7XG4gICAgICAgIGZvbnRXZWlnaHQ6IHRoZW1lLnR5cG9ncmFwaHkuZm9udFdlaWdodE1lZGl1bVxuICAgICAgfSwgdGhlbWUudmFycyA/IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnZhcnMucGFsZXR0ZS5BbGVydFtgJHtjb2xvcn1GaWxsZWRDb2xvcmBdLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnZhcnMucGFsZXR0ZS5BbGVydFtgJHtjb2xvcn1GaWxsZWRCZ2BdXG4gICAgICB9IDoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUubW9kZSA9PT0gJ2RhcmsnID8gdGhlbWUucGFsZXR0ZVtjb2xvcl0uZGFyayA6IHRoZW1lLnBhbGV0dGVbY29sb3JdLm1haW4sXG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmdldENvbnRyYXN0VGV4dCh0aGVtZS5wYWxldHRlW2NvbG9yXS5tYWluKVxuICAgICAgfSlcbiAgICB9KSldXG4gIH0pO1xufSk7XG5jb25zdCBBbGVydEljb24gPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aUFsZXJ0JyxcbiAgc2xvdDogJ0ljb24nLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5pY29uXG59KSh7XG4gIG1hcmdpblJpZ2h0OiAxMixcbiAgcGFkZGluZzogJzdweCAwJyxcbiAgZGlzcGxheTogJ2ZsZXgnLFxuICBmb250U2l6ZTogMjIsXG4gIG9wYWNpdHk6IDAuOVxufSk7XG5jb25zdCBBbGVydE1lc3NhZ2UgPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aUFsZXJ0JyxcbiAgc2xvdDogJ01lc3NhZ2UnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5tZXNzYWdlXG59KSh7XG4gIHBhZGRpbmc6ICc4cHggMCcsXG4gIG1pbldpZHRoOiAwLFxuICBvdmVyZmxvdzogJ2F1dG8nXG59KTtcbmNvbnN0IEFsZXJ0QWN0aW9uID0gc3R5bGVkKCdkaXYnLCB7XG4gIG5hbWU6ICdNdWlBbGVydCcsXG4gIHNsb3Q6ICdBY3Rpb24nLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5hY3Rpb25cbn0pKHtcbiAgZGlzcGxheTogJ2ZsZXgnLFxuICBhbGlnbkl0ZW1zOiAnZmxleC1zdGFydCcsXG4gIHBhZGRpbmc6ICc0cHggMCAwIDE2cHgnLFxuICBtYXJnaW5MZWZ0OiAnYXV0bycsXG4gIG1hcmdpblJpZ2h0OiAtOFxufSk7XG5jb25zdCBkZWZhdWx0SWNvbk1hcHBpbmcgPSB7XG4gIHN1Y2Nlc3M6IC8qI19fUFVSRV9fKi9fanN4KFN1Y2Nlc3NPdXRsaW5lZEljb24sIHtcbiAgICBmb250U2l6ZTogXCJpbmhlcml0XCJcbiAgfSksXG4gIHdhcm5pbmc6IC8qI19fUFVSRV9fKi9fanN4KFJlcG9ydFByb2JsZW1PdXRsaW5lZEljb24sIHtcbiAgICBmb250U2l6ZTogXCJpbmhlcml0XCJcbiAgfSksXG4gIGVycm9yOiAvKiNfX1BVUkVfXyovX2pzeChFcnJvck91dGxpbmVJY29uLCB7XG4gICAgZm9udFNpemU6IFwiaW5oZXJpdFwiXG4gIH0pLFxuICBpbmZvOiAvKiNfX1BVUkVfXyovX2pzeChJbmZvT3V0bGluZWRJY29uLCB7XG4gICAgZm9udFNpemU6IFwiaW5oZXJpdFwiXG4gIH0pXG59O1xuY29uc3QgQWxlcnQgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBBbGVydChpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpQWxlcnQnXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBhY3Rpb24sXG4gICAgICBjaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNsb3NlVGV4dCA9ICdDbG9zZScsXG4gICAgICBjb2xvcixcbiAgICAgIGNvbXBvbmVudHMgPSB7fSxcbiAgICAgIGNvbXBvbmVudHNQcm9wcyA9IHt9LFxuICAgICAgaWNvbixcbiAgICAgIGljb25NYXBwaW5nID0gZGVmYXVsdEljb25NYXBwaW5nLFxuICAgICAgb25DbG9zZSxcbiAgICAgIHJvbGUgPSAnYWxlcnQnLFxuICAgICAgc2V2ZXJpdHkgPSAnc3VjY2VzcycsXG4gICAgICBzbG90UHJvcHMgPSB7fSxcbiAgICAgIHNsb3RzID0ge30sXG4gICAgICB2YXJpYW50ID0gJ3N0YW5kYXJkJ1xuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY29sb3IsXG4gICAgc2V2ZXJpdHksXG4gICAgdmFyaWFudCxcbiAgICBjb2xvclNldmVyaXR5OiBjb2xvciB8fCBzZXZlcml0eVxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICBjb25zdCBleHRlcm5hbEZvcndhcmRlZFByb3BzID0ge1xuICAgIHNsb3RzOiBfZXh0ZW5kcyh7XG4gICAgICBjbG9zZUJ1dHRvbjogY29tcG9uZW50cy5DbG9zZUJ1dHRvbixcbiAgICAgIGNsb3NlSWNvbjogY29tcG9uZW50cy5DbG9zZUljb25cbiAgICB9LCBzbG90cyksXG4gICAgc2xvdFByb3BzOiBfZXh0ZW5kcyh7fSwgY29tcG9uZW50c1Byb3BzLCBzbG90UHJvcHMpXG4gIH07XG4gIGNvbnN0IFtDbG9zZUJ1dHRvblNsb3QsIGNsb3NlQnV0dG9uUHJvcHNdID0gdXNlU2xvdCgnY2xvc2VCdXR0b24nLCB7XG4gICAgZWxlbWVudFR5cGU6IEljb25CdXR0b24sXG4gICAgZXh0ZXJuYWxGb3J3YXJkZWRQcm9wcyxcbiAgICBvd25lclN0YXRlXG4gIH0pO1xuICBjb25zdCBbQ2xvc2VJY29uU2xvdCwgY2xvc2VJY29uUHJvcHNdID0gdXNlU2xvdCgnY2xvc2VJY29uJywge1xuICAgIGVsZW1lbnRUeXBlOiBDbG9zZUljb24sXG4gICAgZXh0ZXJuYWxGb3J3YXJkZWRQcm9wcyxcbiAgICBvd25lclN0YXRlXG4gIH0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3hzKEFsZXJ0Um9vdCwgX2V4dGVuZHMoe1xuICAgIHJvbGU6IHJvbGUsXG4gICAgZWxldmF0aW9uOiAwLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciwge1xuICAgIGNoaWxkcmVuOiBbaWNvbiAhPT0gZmFsc2UgPyAvKiNfX1BVUkVfXyovX2pzeChBbGVydEljb24sIHtcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMuaWNvbixcbiAgICAgIGNoaWxkcmVuOiBpY29uIHx8IGljb25NYXBwaW5nW3NldmVyaXR5XSB8fCBkZWZhdWx0SWNvbk1hcHBpbmdbc2V2ZXJpdHldXG4gICAgfSkgOiBudWxsLCAvKiNfX1BVUkVfXyovX2pzeChBbGVydE1lc3NhZ2UsIHtcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMubWVzc2FnZSxcbiAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICAgIH0pLCBhY3Rpb24gIT0gbnVsbCA/IC8qI19fUFVSRV9fKi9fanN4KEFsZXJ0QWN0aW9uLCB7XG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLmFjdGlvbixcbiAgICAgIGNoaWxkcmVuOiBhY3Rpb25cbiAgICB9KSA6IG51bGwsIGFjdGlvbiA9PSBudWxsICYmIG9uQ2xvc2UgPyAvKiNfX1BVUkVfXyovX2pzeChBbGVydEFjdGlvbiwge1xuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5hY3Rpb24sXG4gICAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goQ2xvc2VCdXR0b25TbG90LCBfZXh0ZW5kcyh7XG4gICAgICAgIHNpemU6IFwic21hbGxcIixcbiAgICAgICAgXCJhcmlhLWxhYmVsXCI6IGNsb3NlVGV4dCxcbiAgICAgICAgdGl0bGU6IGNsb3NlVGV4dCxcbiAgICAgICAgY29sb3I6IFwiaW5oZXJpdFwiLFxuICAgICAgICBvbkNsaWNrOiBvbkNsb3NlXG4gICAgICB9LCBjbG9zZUJ1dHRvblByb3BzLCB7XG4gICAgICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeChDbG9zZUljb25TbG90LCBfZXh0ZW5kcyh7XG4gICAgICAgICAgZm9udFNpemU6IFwic21hbGxcIlxuICAgICAgICB9LCBjbG9zZUljb25Qcm9wcykpXG4gICAgICB9KSlcbiAgICB9KSA6IG51bGxdXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQWxlcnQucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogVGhlIGFjdGlvbiB0byBkaXNwbGF5LiBJdCByZW5kZXJzIGFmdGVyIHRoZSBtZXNzYWdlLCBhdCB0aGUgZW5kIG9mIHRoZSBhbGVydC5cbiAgICovXG4gIGFjdGlvbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRoZSBkZWZhdWx0IGxhYmVsIGZvciB0aGUgKmNsb3NlIHBvcHVwKiBpY29uIGJ1dHRvbi5cbiAgICpcbiAgICogRm9yIGxvY2FsaXphdGlvbiBwdXJwb3NlcywgeW91IGNhbiB1c2UgdGhlIHByb3ZpZGVkIFt0cmFuc2xhdGlvbnNdKC9tYXRlcmlhbC11aS9ndWlkZXMvbG9jYWxpemF0aW9uLykuXG4gICAqIEBkZWZhdWx0ICdDbG9zZSdcbiAgICovXG4gIGNsb3NlVGV4dDogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LiBVbmxlc3MgcHJvdmlkZWQsIHRoZSB2YWx1ZSBpcyB0YWtlbiBmcm9tIHRoZSBgc2V2ZXJpdHlgIHByb3AuXG4gICAqIEl0IHN1cHBvcnRzIGJvdGggZGVmYXVsdCBhbmQgY3VzdG9tIHRoZW1lIGNvbG9ycywgd2hpY2ggY2FuIGJlIGFkZGVkIGFzIHNob3duIGluIHRoZVxuICAgKiBbcGFsZXR0ZSBjdXN0b21pemF0aW9uIGd1aWRlXShodHRwczovL211aS5jb20vbWF0ZXJpYWwtdWkvY3VzdG9taXphdGlvbi9wYWxldHRlLyNjdXN0b20tY29sb3JzKS5cbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2Vycm9yJywgJ2luZm8nLCAnc3VjY2VzcycsICd3YXJuaW5nJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50cyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlLlxuICAgKlxuICAgKiBAZGVwcmVjYXRlZCB1c2UgdGhlIGBzbG90c2AgcHJvcCBpbnN0ZWFkLiBUaGlzIHByb3Agd2lsbCBiZSByZW1vdmVkIGluIHY3LiBbSG93IHRvIG1pZ3JhdGVdKC9tYXRlcmlhbC11aS9taWdyYXRpb24vbWlncmF0aW5nLWZyb20tZGVwcmVjYXRlZC1hcGlzLykuXG4gICAqXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBjb21wb25lbnRzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIENsb3NlQnV0dG9uOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgQ2xvc2VJY29uOiBQcm9wVHlwZXMuZWxlbWVudFR5cGVcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgZXh0cmEgcHJvcHMgZm9yIHRoZSBzbG90IGNvbXBvbmVudHMuXG4gICAqIFlvdSBjYW4gb3ZlcnJpZGUgdGhlIGV4aXN0aW5nIHByb3BzIG9yIGFkZCBuZXcgb25lcy5cbiAgICpcbiAgICogQGRlcHJlY2F0ZWQgdXNlIHRoZSBgc2xvdFByb3BzYCBwcm9wIGluc3RlYWQuIFRoaXMgcHJvcCB3aWxsIGJlIHJlbW92ZWQgaW4gdjcuIFtIb3cgdG8gbWlncmF0ZV0oL21hdGVyaWFsLXVpL21pZ3JhdGlvbi9taWdyYXRpbmctZnJvbS1kZXByZWNhdGVkLWFwaXMvKS5cbiAgICpcbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIGNvbXBvbmVudHNQcm9wczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBjbG9zZUJ1dHRvbjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBjbG9zZUljb246IFByb3BUeXBlcy5vYmplY3RcbiAgfSksXG4gIC8qKlxuICAgKiBPdmVycmlkZSB0aGUgaWNvbiBkaXNwbGF5ZWQgYmVmb3JlIHRoZSBjaGlsZHJlbi5cbiAgICogVW5sZXNzIHByb3ZpZGVkLCB0aGUgaWNvbiBpcyBtYXBwZWQgdG8gdGhlIHZhbHVlIG9mIHRoZSBgc2V2ZXJpdHlgIHByb3AuXG4gICAqIFNldCB0byBgZmFsc2VgIHRvIHJlbW92ZSB0aGUgYGljb25gLlxuICAgKi9cbiAgaWNvbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IG1hcHMgdGhlIGBzZXZlcml0eWAgcHJvcCB0byBhIHJhbmdlIG9mIGRpZmZlcmVudCBpY29ucyxcbiAgICogZm9yIGluc3RhbmNlIHN1Y2Nlc3MgdG8gYDxTdWNjZXNzT3V0bGluZWQ+YC5cbiAgICogSWYgeW91IHdpc2ggdG8gY2hhbmdlIHRoaXMgbWFwcGluZywgeW91IGNhbiBwcm92aWRlIHlvdXIgb3duLlxuICAgKiBBbHRlcm5hdGl2ZWx5LCB5b3UgY2FuIHVzZSB0aGUgYGljb25gIHByb3AgdG8gb3ZlcnJpZGUgdGhlIGljb24gZGlzcGxheWVkLlxuICAgKi9cbiAgaWNvbk1hcHBpbmc6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgZXJyb3I6IFByb3BUeXBlcy5ub2RlLFxuICAgIGluZm86IFByb3BUeXBlcy5ub2RlLFxuICAgIHN1Y2Nlc3M6IFByb3BUeXBlcy5ub2RlLFxuICAgIHdhcm5pbmc6IFByb3BUeXBlcy5ub2RlXG4gIH0pLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IHJlcXVlc3RzIHRvIGJlIGNsb3NlZC5cbiAgICogV2hlbiBwcm92aWRlZCBhbmQgbm8gYGFjdGlvbmAgcHJvcCBpcyBzZXQsIGEgY2xvc2UgaWNvbiBidXR0b24gaXMgZGlzcGxheWVkIHRoYXQgdHJpZ2dlcnMgdGhlIGNhbGxiYWNrIHdoZW4gY2xpY2tlZC5cbiAgICogQHBhcmFtIHtSZWFjdC5TeW50aGV0aWNFdmVudH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqL1xuICBvbkNsb3NlOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIFRoZSBBUklBIHJvbGUgYXR0cmlidXRlIG9mIHRoZSBlbGVtZW50LlxuICAgKiBAZGVmYXVsdCAnYWxlcnQnXG4gICAqL1xuICByb2xlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIHNldmVyaXR5IG9mIHRoZSBhbGVydC4gVGhpcyBkZWZpbmVzIHRoZSBjb2xvciBhbmQgaWNvbiB1c2VkLlxuICAgKiBAZGVmYXVsdCAnc3VjY2VzcydcbiAgICovXG4gIHNldmVyaXR5OiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2Vycm9yJywgJ2luZm8nLCAnc3VjY2VzcycsICd3YXJuaW5nJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBUaGUgcHJvcHMgdXNlZCBmb3IgZWFjaCBzbG90IGluc2lkZS5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIHNsb3RQcm9wczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBjbG9zZUJ1dHRvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgICBjbG9zZUljb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSlcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50cyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlLlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgc2xvdHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgY2xvc2VCdXR0b246IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICBjbG9zZUljb246IFByb3BUeXBlcy5lbGVtZW50VHlwZVxuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS5cbiAgICogQGRlZmF1bHQgJ3N0YW5kYXJkJ1xuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydmaWxsZWQnLCAnb3V0bGluZWQnLCAnc3RhbmRhcmQnXSksIFByb3BUeXBlcy5zdHJpbmddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IEFsZXJ0OyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0VHlwb2dyYXBoeVV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpVHlwb2dyYXBoeScsIHNsb3QpO1xufVxuY29uc3QgdHlwb2dyYXBoeUNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlUeXBvZ3JhcGh5JywgWydyb290JywgJ2gxJywgJ2gyJywgJ2gzJywgJ2g0JywgJ2g1JywgJ2g2JywgJ3N1YnRpdGxlMScsICdzdWJ0aXRsZTInLCAnYm9keTEnLCAnYm9keTInLCAnaW5oZXJpdCcsICdidXR0b24nLCAnY2FwdGlvbicsICdvdmVybGluZScsICdhbGlnbkxlZnQnLCAnYWxpZ25SaWdodCcsICdhbGlnbkNlbnRlcicsICdhbGlnbkp1c3RpZnknLCAnbm9XcmFwJywgJ2d1dHRlckJvdHRvbScsICdwYXJhZ3JhcGgnXSk7XG5leHBvcnQgZGVmYXVsdCB0eXBvZ3JhcGh5Q2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJhbGlnblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcImd1dHRlckJvdHRvbVwiLCBcIm5vV3JhcFwiLCBcInBhcmFncmFwaFwiLCBcInZhcmlhbnRcIiwgXCJ2YXJpYW50TWFwcGluZ1wiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IGV4dGVuZFN4UHJvcCB9IGZyb20gJ0BtdWkvc3lzdGVtL3N0eWxlRnVuY3Rpb25TeCc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHVzZVRoZW1lUHJvcHMgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lUHJvcHMnO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5pbXBvcnQgeyBnZXRUeXBvZ3JhcGh5VXRpbGl0eUNsYXNzIH0gZnJvbSAnLi90eXBvZ3JhcGh5Q2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGFsaWduLFxuICAgIGd1dHRlckJvdHRvbSxcbiAgICBub1dyYXAsXG4gICAgcGFyYWdyYXBoLFxuICAgIHZhcmlhbnQsXG4gICAgY2xhc3Nlc1xuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgdmFyaWFudCwgb3duZXJTdGF0ZS5hbGlnbiAhPT0gJ2luaGVyaXQnICYmIGBhbGlnbiR7Y2FwaXRhbGl6ZShhbGlnbil9YCwgZ3V0dGVyQm90dG9tICYmICdndXR0ZXJCb3R0b20nLCBub1dyYXAgJiYgJ25vV3JhcCcsIHBhcmFncmFwaCAmJiAncGFyYWdyYXBoJ11cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRUeXBvZ3JhcGh5VXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5leHBvcnQgY29uc3QgVHlwb2dyYXBoeVJvb3QgPSBzdHlsZWQoJ3NwYW4nLCB7XG4gIG5hbWU6ICdNdWlUeXBvZ3JhcGh5JyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLnJvb3QsIG93bmVyU3RhdGUudmFyaWFudCAmJiBzdHlsZXNbb3duZXJTdGF0ZS52YXJpYW50XSwgb3duZXJTdGF0ZS5hbGlnbiAhPT0gJ2luaGVyaXQnICYmIHN0eWxlc1tgYWxpZ24ke2NhcGl0YWxpemUob3duZXJTdGF0ZS5hbGlnbil9YF0sIG93bmVyU3RhdGUubm9XcmFwICYmIHN0eWxlcy5ub1dyYXAsIG93bmVyU3RhdGUuZ3V0dGVyQm90dG9tICYmIHN0eWxlcy5ndXR0ZXJCb3R0b20sIG93bmVyU3RhdGUucGFyYWdyYXBoICYmIHN0eWxlcy5wYXJhZ3JhcGhdO1xuICB9XG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICBtYXJnaW46IDBcbn0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2luaGVyaXQnICYmIHtcbiAgLy8gU29tZSBlbGVtZW50cywgbGlrZSA8YnV0dG9uPiBvbiBDaHJvbWUgaGF2ZSBkZWZhdWx0IGZvbnQgdGhhdCBkb2Vzbid0IGluaGVyaXQsIHJlc2V0IHRoaXMuXG4gIGZvbnQ6ICdpbmhlcml0J1xufSwgb3duZXJTdGF0ZS52YXJpYW50ICE9PSAnaW5oZXJpdCcgJiYgdGhlbWUudHlwb2dyYXBoeVtvd25lclN0YXRlLnZhcmlhbnRdLCBvd25lclN0YXRlLmFsaWduICE9PSAnaW5oZXJpdCcgJiYge1xuICB0ZXh0QWxpZ246IG93bmVyU3RhdGUuYWxpZ25cbn0sIG93bmVyU3RhdGUubm9XcmFwICYmIHtcbiAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICB0ZXh0T3ZlcmZsb3c6ICdlbGxpcHNpcycsXG4gIHdoaXRlU3BhY2U6ICdub3dyYXAnXG59LCBvd25lclN0YXRlLmd1dHRlckJvdHRvbSAmJiB7XG4gIG1hcmdpbkJvdHRvbTogJzAuMzVlbSdcbn0sIG93bmVyU3RhdGUucGFyYWdyYXBoICYmIHtcbiAgbWFyZ2luQm90dG9tOiAxNlxufSkpO1xuY29uc3QgZGVmYXVsdFZhcmlhbnRNYXBwaW5nID0ge1xuICBoMTogJ2gxJyxcbiAgaDI6ICdoMicsXG4gIGgzOiAnaDMnLFxuICBoNDogJ2g0JyxcbiAgaDU6ICdoNScsXG4gIGg2OiAnaDYnLFxuICBzdWJ0aXRsZTE6ICdoNicsXG4gIHN1YnRpdGxlMjogJ2g2JyxcbiAgYm9keTE6ICdwJyxcbiAgYm9keTI6ICdwJyxcbiAgaW5oZXJpdDogJ3AnXG59O1xuXG4vLyBUT0RPIHY2OiBkZXByZWNhdGUgdGhlc2UgY29sb3IgdmFsdWVzIGluIHY1LnggYW5kIHJlbW92ZSB0aGUgdHJhbnNmb3JtYXRpb24gaW4gdjZcbmNvbnN0IGNvbG9yVHJhbnNmb3JtYXRpb25zID0ge1xuICBwcmltYXJ5OiAncHJpbWFyeS5tYWluJyxcbiAgdGV4dFByaW1hcnk6ICd0ZXh0LnByaW1hcnknLFxuICBzZWNvbmRhcnk6ICdzZWNvbmRhcnkubWFpbicsXG4gIHRleHRTZWNvbmRhcnk6ICd0ZXh0LnNlY29uZGFyeScsXG4gIGVycm9yOiAnZXJyb3IubWFpbidcbn07XG5jb25zdCB0cmFuc2Zvcm1EZXByZWNhdGVkQ29sb3JzID0gY29sb3IgPT4ge1xuICByZXR1cm4gY29sb3JUcmFuc2Zvcm1hdGlvbnNbY29sb3JdIHx8IGNvbG9yO1xufTtcbmNvbnN0IFR5cG9ncmFwaHkgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBUeXBvZ3JhcGh5KGluUHJvcHMsIHJlZikge1xuICBjb25zdCB0aGVtZVByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aVR5cG9ncmFwaHknXG4gIH0pO1xuICBjb25zdCBjb2xvciA9IHRyYW5zZm9ybURlcHJlY2F0ZWRDb2xvcnModGhlbWVQcm9wcy5jb2xvcik7XG4gIGNvbnN0IHByb3BzID0gZXh0ZW5kU3hQcm9wKF9leHRlbmRzKHt9LCB0aGVtZVByb3BzLCB7XG4gICAgY29sb3JcbiAgfSkpO1xuICBjb25zdCB7XG4gICAgICBhbGlnbiA9ICdpbmhlcml0JyxcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNvbXBvbmVudCxcbiAgICAgIGd1dHRlckJvdHRvbSA9IGZhbHNlLFxuICAgICAgbm9XcmFwID0gZmFsc2UsXG4gICAgICBwYXJhZ3JhcGggPSBmYWxzZSxcbiAgICAgIHZhcmlhbnQgPSAnYm9keTEnLFxuICAgICAgdmFyaWFudE1hcHBpbmcgPSBkZWZhdWx0VmFyaWFudE1hcHBpbmdcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGFsaWduLFxuICAgIGNvbG9yLFxuICAgIGNsYXNzTmFtZSxcbiAgICBjb21wb25lbnQsXG4gICAgZ3V0dGVyQm90dG9tLFxuICAgIG5vV3JhcCxcbiAgICBwYXJhZ3JhcGgsXG4gICAgdmFyaWFudCxcbiAgICB2YXJpYW50TWFwcGluZ1xuICB9KTtcbiAgY29uc3QgQ29tcG9uZW50ID0gY29tcG9uZW50IHx8IChwYXJhZ3JhcGggPyAncCcgOiB2YXJpYW50TWFwcGluZ1t2YXJpYW50XSB8fCBkZWZhdWx0VmFyaWFudE1hcHBpbmdbdmFyaWFudF0pIHx8ICdzcGFuJztcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goVHlwb2dyYXBoeVJvb3QsIF9leHRlbmRzKHtcbiAgICBhczogQ29tcG9uZW50LFxuICAgIHJlZjogcmVmLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKVxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUeXBvZ3JhcGh5LnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIFNldCB0aGUgdGV4dC1hbGlnbiBvbiB0aGUgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCAnaW5oZXJpdCdcbiAgICovXG4gIGFsaWduOiBQcm9wVHlwZXMub25lT2YoWydjZW50ZXInLCAnaW5oZXJpdCcsICdqdXN0aWZ5JywgJ2xlZnQnLCAncmlnaHQnXSksXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgdGV4dCB3aWxsIGhhdmUgYSBib3R0b20gbWFyZ2luLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZ3V0dGVyQm90dG9tOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHRleHQgd2lsbCBub3Qgd3JhcCwgYnV0IGluc3RlYWQgd2lsbCB0cnVuY2F0ZSB3aXRoIGEgdGV4dCBvdmVyZmxvdyBlbGxpcHNpcy5cbiAgICpcbiAgICogTm90ZSB0aGF0IHRleHQgb3ZlcmZsb3cgY2FuIG9ubHkgaGFwcGVuIHdpdGggYmxvY2sgb3IgaW5saW5lLWJsb2NrIGxldmVsIGVsZW1lbnRzXG4gICAqICh0aGUgZWxlbWVudCBuZWVkcyB0byBoYXZlIGEgd2lkdGggaW4gb3JkZXIgdG8gb3ZlcmZsb3cpLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgbm9XcmFwOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGVsZW1lbnQgd2lsbCBiZSBhIHBhcmFncmFwaCBlbGVtZW50LlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgcGFyYWdyYXBoOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgLyoqXG4gICAqIEFwcGxpZXMgdGhlIHRoZW1lIHR5cG9ncmFwaHkgc3R5bGVzLlxuICAgKiBAZGVmYXVsdCAnYm9keTEnXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2JvZHkxJywgJ2JvZHkyJywgJ2J1dHRvbicsICdjYXB0aW9uJywgJ2gxJywgJ2gyJywgJ2gzJywgJ2g0JywgJ2g1JywgJ2g2JywgJ2luaGVyaXQnLCAnb3ZlcmxpbmUnLCAnc3VidGl0bGUxJywgJ3N1YnRpdGxlMiddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCBtYXBzIHRoZSB2YXJpYW50IHByb3AgdG8gYSByYW5nZSBvZiBkaWZmZXJlbnQgSFRNTCBlbGVtZW50IHR5cGVzLlxuICAgKiBGb3IgaW5zdGFuY2UsIHN1YnRpdGxlMSB0byBgPGg2PmAuXG4gICAqIElmIHlvdSB3aXNoIHRvIGNoYW5nZSB0aGF0IG1hcHBpbmcsIHlvdSBjYW4gcHJvdmlkZSB5b3VyIG93bi5cbiAgICogQWx0ZXJuYXRpdmVseSwgeW91IGNhbiB1c2UgdGhlIGBjb21wb25lbnRgIHByb3AuXG4gICAqIEBkZWZhdWx0IHtcbiAgICogICBoMTogJ2gxJyxcbiAgICogICBoMjogJ2gyJyxcbiAgICogICBoMzogJ2gzJyxcbiAgICogICBoNDogJ2g0JyxcbiAgICogICBoNTogJ2g1JyxcbiAgICogICBoNjogJ2g2JyxcbiAgICogICBzdWJ0aXRsZTE6ICdoNicsXG4gICAqICAgc3VidGl0bGUyOiAnaDYnLFxuICAgKiAgIGJvZHkxOiAncCcsXG4gICAqICAgYm9keTI6ICdwJyxcbiAgICogICBpbmhlcml0OiAncCcsXG4gICAqIH1cbiAgICovXG4gIHZhcmlhbnRNYXBwaW5nOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vYmplY3Rcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBUeXBvZ3JhcGh5OyIsImltcG9ydCB7IGdsb2JhbFN0YXRlQ2xhc3NlcyB9IGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuY29uc3QgR0xPQkFMX0NMQVNTX1BSRUZJWCA9ICdiYXNlJztcbmZ1bmN0aW9uIGJ1aWxkU3RhdGVDbGFzcyhzdGF0ZSkge1xuICByZXR1cm4gYCR7R0xPQkFMX0NMQVNTX1BSRUZJWH0tLSR7c3RhdGV9YDtcbn1cbmZ1bmN0aW9uIGJ1aWxkU2xvdENsYXNzKGNvbXBvbmVudE5hbWUsIHNsb3QpIHtcbiAgcmV0dXJuIGAke0dMT0JBTF9DTEFTU19QUkVGSVh9LSR7Y29tcG9uZW50TmFtZX0tJHtzbG90fWA7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoY29tcG9uZW50TmFtZSwgc2xvdCkge1xuICBjb25zdCBnbG9iYWxTdGF0ZUNsYXNzID0gZ2xvYmFsU3RhdGVDbGFzc2VzW3Nsb3RdO1xuICByZXR1cm4gZ2xvYmFsU3RhdGVDbGFzcyA/IGJ1aWxkU3RhdGVDbGFzcyhnbG9iYWxTdGF0ZUNsYXNzKSA6IGJ1aWxkU2xvdENsYXNzKGNvbXBvbmVudE5hbWUsIHNsb3QpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzR2xvYmFsU3RhdGUoc2xvdCkge1xuICByZXR1cm4gZ2xvYmFsU3RhdGVDbGFzc2VzW3Nsb3RdICE9PSB1bmRlZmluZWQ7XG59IiwiaW1wb3J0IHsgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgfSBmcm9tICcuLi9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyhjb21wb25lbnROYW1lLCBzbG90cykge1xuICBjb25zdCByZXN1bHQgPSB7fTtcbiAgc2xvdHMuZm9yRWFjaChzbG90ID0+IHtcbiAgICByZXN1bHRbc2xvdF0gPSBnZW5lcmF0ZVV0aWxpdHlDbGFzcyhjb21wb25lbnROYW1lLCBzbG90KTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59IiwiJ3VzZSBjbGllbnQnO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBjb25zaXN0ZW50LXJldHVybiwganN4LWExMXkvbm8tbm9uaW50ZXJhY3RpdmUtdGFiaW5kZXggKi9cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBleGFjdFByb3AsIGVsZW1lbnRBY2NlcHRpbmdSZWYsIHVuc3RhYmxlX3VzZUZvcmtSZWYgYXMgdXNlRm9ya1JlZiwgdW5zdGFibGVfb3duZXJEb2N1bWVudCBhcyBvd25lckRvY3VtZW50IH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuLy8gSW5zcGlyZWQgYnkgaHR0cHM6Ly9naXRodWIuY29tL2ZvY3VzLXRyYXAvdGFiYmFibGVcbmNvbnN0IGNhbmRpZGF0ZXNTZWxlY3RvciA9IFsnaW5wdXQnLCAnc2VsZWN0JywgJ3RleHRhcmVhJywgJ2FbaHJlZl0nLCAnYnV0dG9uJywgJ1t0YWJpbmRleF0nLCAnYXVkaW9bY29udHJvbHNdJywgJ3ZpZGVvW2NvbnRyb2xzXScsICdbY29udGVudGVkaXRhYmxlXTpub3QoW2NvbnRlbnRlZGl0YWJsZT1cImZhbHNlXCJdKSddLmpvaW4oJywnKTtcbmZ1bmN0aW9uIGdldFRhYkluZGV4KG5vZGUpIHtcbiAgY29uc3QgdGFiaW5kZXhBdHRyID0gcGFyc2VJbnQobm9kZS5nZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JykgfHwgJycsIDEwKTtcbiAgaWYgKCFOdW1iZXIuaXNOYU4odGFiaW5kZXhBdHRyKSkge1xuICAgIHJldHVybiB0YWJpbmRleEF0dHI7XG4gIH1cblxuICAvLyBCcm93c2VycyBkbyBub3QgcmV0dXJuIGB0YWJJbmRleGAgY29ycmVjdGx5IGZvciBjb250ZW50RWRpdGFibGUgbm9kZXM7XG4gIC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTY2MTEwOCZxPWNvbnRlbnRlZGl0YWJsZSUyMHRhYmluZGV4JmNhbj0yXG4gIC8vIHNvIGlmIHRoZXkgZG9uJ3QgaGF2ZSBhIHRhYmluZGV4IGF0dHJpYnV0ZSBzcGVjaWZpY2FsbHkgc2V0LCBhc3N1bWUgaXQncyAwLlxuICAvLyBpbiBDaHJvbWUsIDxkZXRhaWxzLz4sIDxhdWRpbyBjb250cm9scy8+IGFuZCA8dmlkZW8gY29udHJvbHMvPiBlbGVtZW50cyBnZXQgYSBkZWZhdWx0XG4gIC8vICBgdGFiSW5kZXhgIG9mIC0xIHdoZW4gdGhlICd0YWJpbmRleCcgYXR0cmlidXRlIGlzbid0IHNwZWNpZmllZCBpbiB0aGUgRE9NLFxuICAvLyAgeWV0IHRoZXkgYXJlIHN0aWxsIHBhcnQgb2YgdGhlIHJlZ3VsYXIgdGFiIG9yZGVyOyBpbiBGRiwgdGhleSBnZXQgYSBkZWZhdWx0XG4gIC8vICBgdGFiSW5kZXhgIG9mIDA7IHNpbmNlIENocm9tZSBzdGlsbCBwdXRzIHRob3NlIGVsZW1lbnRzIGluIHRoZSByZWd1bGFyIHRhYlxuICAvLyAgb3JkZXIsIGNvbnNpZGVyIHRoZWlyIHRhYiBpbmRleCB0byBiZSAwLlxuICBpZiAobm9kZS5jb250ZW50RWRpdGFibGUgPT09ICd0cnVlJyB8fCAobm9kZS5ub2RlTmFtZSA9PT0gJ0FVRElPJyB8fCBub2RlLm5vZGVOYW1lID09PSAnVklERU8nIHx8IG5vZGUubm9kZU5hbWUgPT09ICdERVRBSUxTJykgJiYgbm9kZS5nZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JykgPT09IG51bGwpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuICByZXR1cm4gbm9kZS50YWJJbmRleDtcbn1cbmZ1bmN0aW9uIGlzTm9uVGFiYmFibGVSYWRpbyhub2RlKSB7XG4gIGlmIChub2RlLnRhZ05hbWUgIT09ICdJTlBVVCcgfHwgbm9kZS50eXBlICE9PSAncmFkaW8nKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmICghbm9kZS5uYW1lKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IGdldFJhZGlvID0gc2VsZWN0b3IgPT4gbm9kZS5vd25lckRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYGlucHV0W3R5cGU9XCJyYWRpb1wiXSR7c2VsZWN0b3J9YCk7XG4gIGxldCByb3ZpbmcgPSBnZXRSYWRpbyhgW25hbWU9XCIke25vZGUubmFtZX1cIl06Y2hlY2tlZGApO1xuICBpZiAoIXJvdmluZykge1xuICAgIHJvdmluZyA9IGdldFJhZGlvKGBbbmFtZT1cIiR7bm9kZS5uYW1lfVwiXWApO1xuICB9XG4gIHJldHVybiByb3ZpbmcgIT09IG5vZGU7XG59XG5mdW5jdGlvbiBpc05vZGVNYXRjaGluZ1NlbGVjdG9yRm9jdXNhYmxlKG5vZGUpIHtcbiAgaWYgKG5vZGUuZGlzYWJsZWQgfHwgbm9kZS50YWdOYW1lID09PSAnSU5QVVQnICYmIG5vZGUudHlwZSA9PT0gJ2hpZGRlbicgfHwgaXNOb25UYWJiYWJsZVJhZGlvKG5vZGUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gZGVmYXVsdEdldFRhYmJhYmxlKHJvb3QpIHtcbiAgY29uc3QgcmVndWxhclRhYk5vZGVzID0gW107XG4gIGNvbnN0IG9yZGVyZWRUYWJOb2RlcyA9IFtdO1xuICBBcnJheS5mcm9tKHJvb3QucXVlcnlTZWxlY3RvckFsbChjYW5kaWRhdGVzU2VsZWN0b3IpKS5mb3JFYWNoKChub2RlLCBpKSA9PiB7XG4gICAgY29uc3Qgbm9kZVRhYkluZGV4ID0gZ2V0VGFiSW5kZXgobm9kZSk7XG4gICAgaWYgKG5vZGVUYWJJbmRleCA9PT0gLTEgfHwgIWlzTm9kZU1hdGNoaW5nU2VsZWN0b3JGb2N1c2FibGUobm9kZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKG5vZGVUYWJJbmRleCA9PT0gMCkge1xuICAgICAgcmVndWxhclRhYk5vZGVzLnB1c2gobm9kZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9yZGVyZWRUYWJOb2Rlcy5wdXNoKHtcbiAgICAgICAgZG9jdW1lbnRPcmRlcjogaSxcbiAgICAgICAgdGFiSW5kZXg6IG5vZGVUYWJJbmRleCxcbiAgICAgICAgbm9kZTogbm9kZVxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG9yZGVyZWRUYWJOb2Rlcy5zb3J0KChhLCBiKSA9PiBhLnRhYkluZGV4ID09PSBiLnRhYkluZGV4ID8gYS5kb2N1bWVudE9yZGVyIC0gYi5kb2N1bWVudE9yZGVyIDogYS50YWJJbmRleCAtIGIudGFiSW5kZXgpLm1hcChhID0+IGEubm9kZSkuY29uY2F0KHJlZ3VsYXJUYWJOb2Rlcyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0SXNFbmFibGVkKCkge1xuICByZXR1cm4gdHJ1ZTtcbn1cblxuLyoqXG4gKiBVdGlsaXR5IGNvbXBvbmVudCB0aGF0IGxvY2tzIGZvY3VzIGluc2lkZSB0aGUgY29tcG9uZW50LlxuICpcbiAqIERlbW9zOlxuICpcbiAqIC0gW0ZvY3VzIFRyYXBdKGh0dHBzOi8vbXVpLmNvbS9iYXNlLXVpL3JlYWN0LWZvY3VzLXRyYXAvKVxuICpcbiAqIEFQSTpcbiAqXG4gKiAtIFtGb2N1c1RyYXAgQVBJXShodHRwczovL211aS5jb20vYmFzZS11aS9yZWFjdC1mb2N1cy10cmFwL2NvbXBvbmVudHMtYXBpLyNmb2N1cy10cmFwKVxuICovXG5mdW5jdGlvbiBGb2N1c1RyYXAocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgIGNoaWxkcmVuLFxuICAgIGRpc2FibGVBdXRvRm9jdXMgPSBmYWxzZSxcbiAgICBkaXNhYmxlRW5mb3JjZUZvY3VzID0gZmFsc2UsXG4gICAgZGlzYWJsZVJlc3RvcmVGb2N1cyA9IGZhbHNlLFxuICAgIGdldFRhYmJhYmxlID0gZGVmYXVsdEdldFRhYmJhYmxlLFxuICAgIGlzRW5hYmxlZCA9IGRlZmF1bHRJc0VuYWJsZWQsXG4gICAgb3BlblxuICB9ID0gcHJvcHM7XG4gIGNvbnN0IGlnbm9yZU5leHRFbmZvcmNlRm9jdXMgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuICBjb25zdCBzZW50aW5lbFN0YXJ0ID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCBzZW50aW5lbEVuZCA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3Qgbm9kZVRvUmVzdG9yZSA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3QgcmVhY3RGb2N1c0V2ZW50VGFyZ2V0ID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICAvLyBUaGlzIHZhcmlhYmxlIGlzIHVzZWZ1bCB3aGVuIGRpc2FibGVBdXRvRm9jdXMgaXMgdHJ1ZS5cbiAgLy8gSXQgd2FpdHMgZm9yIHRoZSBhY3RpdmUgZWxlbWVudCB0byBtb3ZlIGludG8gdGhlIGNvbXBvbmVudCB0byBhY3RpdmF0ZS5cbiAgY29uc3QgYWN0aXZhdGVkID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcbiAgY29uc3Qgcm9vdFJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgLy8gQHRzLWV4cGVjdC1lcnJvciBUT0RPIHVwc3RyZWFtIGZpeFxuICBjb25zdCBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKGNoaWxkcmVuLnJlZiwgcm9vdFJlZik7XG4gIGNvbnN0IGxhc3RLZXlkb3duID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIC8vIFdlIG1pZ2h0IHJlbmRlciBhbiBlbXB0eSBjaGlsZC5cbiAgICBpZiAoIW9wZW4gfHwgIXJvb3RSZWYuY3VycmVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBhY3RpdmF0ZWQuY3VycmVudCA9ICFkaXNhYmxlQXV0b0ZvY3VzO1xuICB9LCBbZGlzYWJsZUF1dG9Gb2N1cywgb3Blbl0pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIC8vIFdlIG1pZ2h0IHJlbmRlciBhbiBlbXB0eSBjaGlsZC5cbiAgICBpZiAoIW9wZW4gfHwgIXJvb3RSZWYuY3VycmVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBkb2MgPSBvd25lckRvY3VtZW50KHJvb3RSZWYuY3VycmVudCk7XG4gICAgaWYgKCFyb290UmVmLmN1cnJlbnQuY29udGFpbnMoZG9jLmFjdGl2ZUVsZW1lbnQpKSB7XG4gICAgICBpZiAoIXJvb3RSZWYuY3VycmVudC5oYXNBdHRyaWJ1dGUoJ3RhYkluZGV4JykpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFsnTVVJOiBUaGUgbW9kYWwgY29udGVudCBub2RlIGRvZXMgbm90IGFjY2VwdCBmb2N1cy4nLCAnRm9yIHRoZSBiZW5lZml0IG9mIGFzc2lzdGl2ZSB0ZWNobm9sb2dpZXMsICcgKyAndGhlIHRhYkluZGV4IG9mIHRoZSBub2RlIGlzIGJlaW5nIHNldCB0byBcIi0xXCIuJ10uam9pbignXFxuJykpO1xuICAgICAgICB9XG4gICAgICAgIHJvb3RSZWYuY3VycmVudC5zZXRBdHRyaWJ1dGUoJ3RhYkluZGV4JywgJy0xJyk7XG4gICAgICB9XG4gICAgICBpZiAoYWN0aXZhdGVkLmN1cnJlbnQpIHtcbiAgICAgICAgcm9vdFJlZi5jdXJyZW50LmZvY3VzKCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAvLyByZXN0b3JlTGFzdEZvY3VzKClcbiAgICAgIGlmICghZGlzYWJsZVJlc3RvcmVGb2N1cykge1xuICAgICAgICAvLyBJbiBJRTExIGl0IGlzIHBvc3NpYmxlIGZvciBkb2N1bWVudC5hY3RpdmVFbGVtZW50IHRvIGJlIG51bGwgcmVzdWx0aW5nXG4gICAgICAgIC8vIGluIG5vZGVUb1Jlc3RvcmUuY3VycmVudCBiZWluZyBudWxsLlxuICAgICAgICAvLyBOb3QgYWxsIGVsZW1lbnRzIGluIElFMTEgaGF2ZSBhIGZvY3VzIG1ldGhvZC5cbiAgICAgICAgLy8gT25jZSBJRTExIHN1cHBvcnQgaXMgZHJvcHBlZCB0aGUgZm9jdXMoKSBjYWxsIGNhbiBiZSB1bmNvbmRpdGlvbmFsLlxuICAgICAgICBpZiAobm9kZVRvUmVzdG9yZS5jdXJyZW50ICYmIG5vZGVUb1Jlc3RvcmUuY3VycmVudC5mb2N1cykge1xuICAgICAgICAgIGlnbm9yZU5leHRFbmZvcmNlRm9jdXMuY3VycmVudCA9IHRydWU7XG4gICAgICAgICAgbm9kZVRvUmVzdG9yZS5jdXJyZW50LmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICAgICAgbm9kZVRvUmVzdG9yZS5jdXJyZW50ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9O1xuICAgIC8vIE1pc3NpbmcgYGRpc2FibGVSZXN0b3JlRm9jdXNgIHdoaWNoIGlzIGZpbmUuXG4gICAgLy8gV2UgZG9uJ3Qgc3VwcG9ydCBjaGFuZ2luZyB0aGF0IHByb3Agb24gYW4gb3BlbiBGb2N1c1RyYXBcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIH0sIFtvcGVuXSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgLy8gV2UgbWlnaHQgcmVuZGVyIGFuIGVtcHR5IGNoaWxkLlxuICAgIGlmICghb3BlbiB8fCAhcm9vdFJlZi5jdXJyZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGRvYyA9IG93bmVyRG9jdW1lbnQocm9vdFJlZi5jdXJyZW50KTtcbiAgICBjb25zdCBsb29wRm9jdXMgPSBuYXRpdmVFdmVudCA9PiB7XG4gICAgICBsYXN0S2V5ZG93bi5jdXJyZW50ID0gbmF0aXZlRXZlbnQ7XG4gICAgICBpZiAoZGlzYWJsZUVuZm9yY2VGb2N1cyB8fCAhaXNFbmFibGVkKCkgfHwgbmF0aXZlRXZlbnQua2V5ICE9PSAnVGFiJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIE1ha2Ugc3VyZSB0aGUgbmV4dCB0YWIgc3RhcnRzIGZyb20gdGhlIHJpZ2h0IHBsYWNlLlxuICAgICAgLy8gZG9jLmFjdGl2ZUVsZW1lbnQgcmVmZXJzIHRvIHRoZSBvcmlnaW4uXG4gICAgICBpZiAoZG9jLmFjdGl2ZUVsZW1lbnQgPT09IHJvb3RSZWYuY3VycmVudCAmJiBuYXRpdmVFdmVudC5zaGlmdEtleSkge1xuICAgICAgICAvLyBXZSBuZWVkIHRvIGlnbm9yZSB0aGUgbmV4dCBjb250YWluIGFzXG4gICAgICAgIC8vIGl0IHdpbGwgdHJ5IHRvIG1vdmUgdGhlIGZvY3VzIGJhY2sgdG8gdGhlIHJvb3RSZWYgZWxlbWVudC5cbiAgICAgICAgaWdub3JlTmV4dEVuZm9yY2VGb2N1cy5jdXJyZW50ID0gdHJ1ZTtcbiAgICAgICAgaWYgKHNlbnRpbmVsRW5kLmN1cnJlbnQpIHtcbiAgICAgICAgICBzZW50aW5lbEVuZC5jdXJyZW50LmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IGNvbnRhaW4gPSAoKSA9PiB7XG4gICAgICBjb25zdCByb290RWxlbWVudCA9IHJvb3RSZWYuY3VycmVudDtcblxuICAgICAgLy8gQ2xlYW51cCBmdW5jdGlvbnMgYXJlIGV4ZWN1dGVkIGxhemlseSBpbiBSZWFjdCAxNy5cbiAgICAgIC8vIENvbnRhaW4gY2FuIGJlIGNhbGxlZCBiZXR3ZWVuIHRoZSBjb21wb25lbnQgYmVpbmcgdW5tb3VudGVkIGFuZCBpdHMgY2xlYW51cCBmdW5jdGlvbiBiZWluZyBydW4uXG4gICAgICBpZiAocm9vdEVsZW1lbnQgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKCFkb2MuaGFzRm9jdXMoKSB8fCAhaXNFbmFibGVkKCkgfHwgaWdub3JlTmV4dEVuZm9yY2VGb2N1cy5jdXJyZW50KSB7XG4gICAgICAgIGlnbm9yZU5leHRFbmZvcmNlRm9jdXMuY3VycmVudCA9IGZhbHNlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBmb2N1cyBpcyBhbHJlYWR5IGluc2lkZVxuICAgICAgaWYgKHJvb3RFbGVtZW50LmNvbnRhaW5zKGRvYy5hY3RpdmVFbGVtZW50KSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBkaXNhYmxlRW5mb3JjZUZvY3VzIGlzIHNldCBhbmQgdGhlIGZvY3VzIGlzIG91dHNpZGUgb2YgdGhlIGZvY3VzIHRyYXAgKGFuZCBzZW50aW5lbCBub2RlcylcbiAgICAgIGlmIChkaXNhYmxlRW5mb3JjZUZvY3VzICYmIGRvYy5hY3RpdmVFbGVtZW50ICE9PSBzZW50aW5lbFN0YXJ0LmN1cnJlbnQgJiYgZG9jLmFjdGl2ZUVsZW1lbnQgIT09IHNlbnRpbmVsRW5kLmN1cnJlbnQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBpZiB0aGUgZm9jdXMgZXZlbnQgaXMgbm90IGNvbWluZyBmcm9tIGluc2lkZSB0aGUgY2hpbGRyZW4ncyByZWFjdCB0cmVlLCByZXNldCB0aGUgcmVmc1xuICAgICAgaWYgKGRvYy5hY3RpdmVFbGVtZW50ICE9PSByZWFjdEZvY3VzRXZlbnRUYXJnZXQuY3VycmVudCkge1xuICAgICAgICByZWFjdEZvY3VzRXZlbnRUYXJnZXQuY3VycmVudCA9IG51bGw7XG4gICAgICB9IGVsc2UgaWYgKHJlYWN0Rm9jdXNFdmVudFRhcmdldC5jdXJyZW50ICE9PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICghYWN0aXZhdGVkLmN1cnJlbnQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgbGV0IHRhYmJhYmxlID0gW107XG4gICAgICBpZiAoZG9jLmFjdGl2ZUVsZW1lbnQgPT09IHNlbnRpbmVsU3RhcnQuY3VycmVudCB8fCBkb2MuYWN0aXZlRWxlbWVudCA9PT0gc2VudGluZWxFbmQuY3VycmVudCkge1xuICAgICAgICB0YWJiYWJsZSA9IGdldFRhYmJhYmxlKHJvb3RSZWYuY3VycmVudCk7XG4gICAgICB9XG5cbiAgICAgIC8vIG9uZSBvZiB0aGUgc2VudGluZWwgbm9kZXMgd2FzIGZvY3VzZWQsIHNvIG1vdmUgdGhlIGZvY3VzXG4gICAgICAvLyB0byB0aGUgZmlyc3QvbGFzdCB0YWJiYWJsZSBlbGVtZW50IGluc2lkZSB0aGUgZm9jdXMgdHJhcFxuICAgICAgaWYgKHRhYmJhYmxlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdmFyIF9sYXN0S2V5ZG93biRjdXJyZW50LCBfbGFzdEtleWRvd24kY3VycmVudDI7XG4gICAgICAgIGNvbnN0IGlzU2hpZnRUYWIgPSBCb29sZWFuKCgoX2xhc3RLZXlkb3duJGN1cnJlbnQgPSBsYXN0S2V5ZG93bi5jdXJyZW50KSA9PSBudWxsID8gdm9pZCAwIDogX2xhc3RLZXlkb3duJGN1cnJlbnQuc2hpZnRLZXkpICYmICgoX2xhc3RLZXlkb3duJGN1cnJlbnQyID0gbGFzdEtleWRvd24uY3VycmVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9sYXN0S2V5ZG93biRjdXJyZW50Mi5rZXkpID09PSAnVGFiJyk7XG4gICAgICAgIGNvbnN0IGZvY3VzTmV4dCA9IHRhYmJhYmxlWzBdO1xuICAgICAgICBjb25zdCBmb2N1c1ByZXZpb3VzID0gdGFiYmFibGVbdGFiYmFibGUubGVuZ3RoIC0gMV07XG4gICAgICAgIGlmICh0eXBlb2YgZm9jdXNOZXh0ICE9PSAnc3RyaW5nJyAmJiB0eXBlb2YgZm9jdXNQcmV2aW91cyAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBpZiAoaXNTaGlmdFRhYikge1xuICAgICAgICAgICAgZm9jdXNQcmV2aW91cy5mb2N1cygpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb2N1c05leHQuZm9jdXMoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gbm8gdGFiYmFibGUgZWxlbWVudHMgaW4gdGhlIHRyYXAgZm9jdXMgb3IgdGhlIGZvY3VzIHdhcyBvdXRzaWRlIG9mIHRoZSBmb2N1cyB0cmFwXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByb290RWxlbWVudC5mb2N1cygpO1xuICAgICAgfVxuICAgIH07XG4gICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzaW4nLCBjb250YWluKTtcbiAgICBkb2MuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGxvb3BGb2N1cywgdHJ1ZSk7XG5cbiAgICAvLyBXaXRoIEVkZ2UsIFNhZmFyaSBhbmQgRmlyZWZveCwgbm8gZm9jdXMgcmVsYXRlZCBldmVudHMgYXJlIGZpcmVkIHdoZW4gdGhlIGZvY3VzZWQgYXJlYSBzdG9wcyBiZWluZyBhIGZvY3VzZWQgYXJlYS5cbiAgICAvLyBmb3IgZXhhbXBsZSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD01NTk1NjEuXG4gICAgLy8gSW5zdGVhZCwgd2UgY2FuIGxvb2sgaWYgdGhlIGFjdGl2ZSBlbGVtZW50IHdhcyByZXN0b3JlZCBvbiB0aGUgQk9EWSBlbGVtZW50LlxuICAgIC8vXG4gICAgLy8gVGhlIHdoYXR3ZyBzcGVjIGRlZmluZXMgaG93IHRoZSBicm93c2VyIHNob3VsZCBiZWhhdmUgYnV0IGRvZXMgbm90IGV4cGxpY2l0bHkgbWVudGlvbiBhbnkgZXZlbnRzOlxuICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2ludGVyYWN0aW9uLmh0bWwjZm9jdXMtZml4dXAtcnVsZS5cbiAgICBjb25zdCBpbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgIGlmIChkb2MuYWN0aXZlRWxlbWVudCAmJiBkb2MuYWN0aXZlRWxlbWVudC50YWdOYW1lID09PSAnQk9EWScpIHtcbiAgICAgICAgY29udGFpbigpO1xuICAgICAgfVxuICAgIH0sIDUwKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbCk7XG4gICAgICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcignZm9jdXNpbicsIGNvbnRhaW4pO1xuICAgICAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBsb29wRm9jdXMsIHRydWUpO1xuICAgIH07XG4gIH0sIFtkaXNhYmxlQXV0b0ZvY3VzLCBkaXNhYmxlRW5mb3JjZUZvY3VzLCBkaXNhYmxlUmVzdG9yZUZvY3VzLCBpc0VuYWJsZWQsIG9wZW4sIGdldFRhYmJhYmxlXSk7XG4gIGNvbnN0IG9uRm9jdXMgPSBldmVudCA9PiB7XG4gICAgaWYgKG5vZGVUb1Jlc3RvcmUuY3VycmVudCA9PT0gbnVsbCkge1xuICAgICAgbm9kZVRvUmVzdG9yZS5jdXJyZW50ID0gZXZlbnQucmVsYXRlZFRhcmdldDtcbiAgICB9XG4gICAgYWN0aXZhdGVkLmN1cnJlbnQgPSB0cnVlO1xuICAgIHJlYWN0Rm9jdXNFdmVudFRhcmdldC5jdXJyZW50ID0gZXZlbnQudGFyZ2V0O1xuICAgIGNvbnN0IGNoaWxkcmVuUHJvcHNIYW5kbGVyID0gY2hpbGRyZW4ucHJvcHMub25Gb2N1cztcbiAgICBpZiAoY2hpbGRyZW5Qcm9wc0hhbmRsZXIpIHtcbiAgICAgIGNoaWxkcmVuUHJvcHNIYW5kbGVyKGV2ZW50KTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGhhbmRsZUZvY3VzU2VudGluZWwgPSBldmVudCA9PiB7XG4gICAgaWYgKG5vZGVUb1Jlc3RvcmUuY3VycmVudCA9PT0gbnVsbCkge1xuICAgICAgbm9kZVRvUmVzdG9yZS5jdXJyZW50ID0gZXZlbnQucmVsYXRlZFRhcmdldDtcbiAgICB9XG4gICAgYWN0aXZhdGVkLmN1cnJlbnQgPSB0cnVlO1xuICB9O1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3hzKFJlYWN0LkZyYWdtZW50LCB7XG4gICAgY2hpbGRyZW46IFsvKiNfX1BVUkVfXyovX2pzeChcImRpdlwiLCB7XG4gICAgICB0YWJJbmRleDogb3BlbiA/IDAgOiAtMSxcbiAgICAgIG9uRm9jdXM6IGhhbmRsZUZvY3VzU2VudGluZWwsXG4gICAgICByZWY6IHNlbnRpbmVsU3RhcnQsXG4gICAgICBcImRhdGEtdGVzdGlkXCI6IFwic2VudGluZWxTdGFydFwiXG4gICAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGRyZW4sIHtcbiAgICAgIHJlZjogaGFuZGxlUmVmLFxuICAgICAgb25Gb2N1c1xuICAgIH0pLCAvKiNfX1BVUkVfXyovX2pzeChcImRpdlwiLCB7XG4gICAgICB0YWJJbmRleDogb3BlbiA/IDAgOiAtMSxcbiAgICAgIG9uRm9jdXM6IGhhbmRsZUZvY3VzU2VudGluZWwsXG4gICAgICByZWY6IHNlbnRpbmVsRW5kLFxuICAgICAgXCJkYXRhLXRlc3RpZFwiOiBcInNlbnRpbmVsRW5kXCJcbiAgICB9KV1cbiAgfSk7XG59XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBGb2N1c1RyYXAucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBUeXBlU2NyaXB0IHR5cGVzIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4g4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogQSBzaW5nbGUgY2hpbGQgY29udGVudCBlbGVtZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IGVsZW1lbnRBY2NlcHRpbmdSZWYsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBmb2N1cyB0cmFwIHdpbGwgbm90IGF1dG9tYXRpY2FsbHkgc2hpZnQgZm9jdXMgdG8gaXRzZWxmIHdoZW4gaXQgb3BlbnMsIGFuZFxuICAgKiByZXBsYWNlIGl0IHRvIHRoZSBsYXN0IGZvY3VzZWQgZWxlbWVudCB3aGVuIGl0IGNsb3Nlcy5cbiAgICogVGhpcyBhbHNvIHdvcmtzIGNvcnJlY3RseSB3aXRoIGFueSBmb2N1cyB0cmFwIGNoaWxkcmVuIHRoYXQgaGF2ZSB0aGUgYGRpc2FibGVBdXRvRm9jdXNgIHByb3AuXG4gICAqXG4gICAqIEdlbmVyYWxseSB0aGlzIHNob3VsZCBuZXZlciBiZSBzZXQgdG8gYHRydWVgIGFzIGl0IG1ha2VzIHRoZSBmb2N1cyB0cmFwIGxlc3NcbiAgICogYWNjZXNzaWJsZSB0byBhc3Npc3RpdmUgdGVjaG5vbG9naWVzLCBsaWtlIHNjcmVlbiByZWFkZXJzLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZUF1dG9Gb2N1czogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBmb2N1cyB0cmFwIHdpbGwgbm90IHByZXZlbnQgZm9jdXMgZnJvbSBsZWF2aW5nIHRoZSBmb2N1cyB0cmFwIHdoaWxlIG9wZW4uXG4gICAqXG4gICAqIEdlbmVyYWxseSB0aGlzIHNob3VsZCBuZXZlciBiZSBzZXQgdG8gYHRydWVgIGFzIGl0IG1ha2VzIHRoZSBmb2N1cyB0cmFwIGxlc3NcbiAgICogYWNjZXNzaWJsZSB0byBhc3Npc3RpdmUgdGVjaG5vbG9naWVzLCBsaWtlIHNjcmVlbiByZWFkZXJzLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZUVuZm9yY2VGb2N1czogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBmb2N1cyB0cmFwIHdpbGwgbm90IHJlc3RvcmUgZm9jdXMgdG8gcHJldmlvdXNseSBmb2N1c2VkIGVsZW1lbnQgb25jZVxuICAgKiBmb2N1cyB0cmFwIGlzIGhpZGRlbiBvciB1bm1vdW50ZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlUmVzdG9yZUZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFJldHVybnMgYW4gYXJyYXkgb2Ygb3JkZXJlZCB0YWJiYWJsZSBub2RlcyAoaS5lLiBpbiB0YWIgb3JkZXIpIHdpdGhpbiB0aGUgcm9vdC5cbiAgICogRm9yIGluc3RhbmNlLCB5b3UgY2FuIHByb3ZpZGUgdGhlIFwidGFiYmFibGVcIiBucG0gZGVwZW5kZW5jeS5cbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcm9vdFxuICAgKi9cbiAgZ2V0VGFiYmFibGU6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogVGhpcyBwcm9wIGV4dGVuZHMgdGhlIGBvcGVuYCBwcm9wLlxuICAgKiBJdCBhbGxvd3MgdG8gdG9nZ2xlIHRoZSBvcGVuIHN0YXRlIHdpdGhvdXQgaGF2aW5nIHRvIHdhaXQgZm9yIGEgcmVyZW5kZXIgd2hlbiBjaGFuZ2luZyB0aGUgYG9wZW5gIHByb3AuXG4gICAqIFRoaXMgcHJvcCBzaG91bGQgYmUgbWVtb2l6ZWQuXG4gICAqIEl0IGNhbiBiZSB1c2VkIHRvIHN1cHBvcnQgbXVsdGlwbGUgZm9jdXMgdHJhcCBtb3VudGVkIGF0IHRoZSBzYW1lIHRpbWUuXG4gICAqIEBkZWZhdWx0IGZ1bmN0aW9uIGRlZmF1bHRJc0VuYWJsZWQoKTogYm9vbGVhbiB7XG4gICAqICAgcmV0dXJuIHRydWU7XG4gICAqIH1cbiAgICovXG4gIGlzRW5hYmxlZDogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGZvY3VzIGlzIGxvY2tlZC5cbiAgICovXG4gIG9wZW46IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWRcbn0gOiB2b2lkIDA7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgRm9jdXNUcmFwWydwcm9wVHlwZXMnICsgJyddID0gZXhhY3RQcm9wKEZvY3VzVHJhcC5wcm9wVHlwZXMpO1xufVxuZXhwb3J0IHsgRm9jdXNUcmFwIH07IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgKiBhcyBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGV4YWN0UHJvcCwgSFRNTEVsZW1lbnRUeXBlLCB1bnN0YWJsZV91c2VFbmhhbmNlZEVmZmVjdCBhcyB1c2VFbmhhbmNlZEVmZmVjdCwgdW5zdGFibGVfdXNlRm9ya1JlZiBhcyB1c2VGb3JrUmVmLCB1bnN0YWJsZV9zZXRSZWYgYXMgc2V0UmVmIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuZnVuY3Rpb24gZ2V0Q29udGFpbmVyKGNvbnRhaW5lcikge1xuICByZXR1cm4gdHlwZW9mIGNvbnRhaW5lciA9PT0gJ2Z1bmN0aW9uJyA/IGNvbnRhaW5lcigpIDogY29udGFpbmVyO1xufVxuXG4vKipcbiAqIFBvcnRhbHMgcHJvdmlkZSBhIGZpcnN0LWNsYXNzIHdheSB0byByZW5kZXIgY2hpbGRyZW4gaW50byBhIERPTSBub2RlXG4gKiB0aGF0IGV4aXN0cyBvdXRzaWRlIHRoZSBET00gaGllcmFyY2h5IG9mIHRoZSBwYXJlbnQgY29tcG9uZW50LlxuICpcbiAqIERlbW9zOlxuICpcbiAqIC0gW1BvcnRhbF0oaHR0cHM6Ly9tdWkuY29tL2Jhc2UtdWkvcmVhY3QtcG9ydGFsLylcbiAqXG4gKiBBUEk6XG4gKlxuICogLSBbUG9ydGFsIEFQSV0oaHR0cHM6Ly9tdWkuY29tL2Jhc2UtdWkvcmVhY3QtcG9ydGFsL2NvbXBvbmVudHMtYXBpLyNwb3J0YWwpXG4gKi9cbmNvbnN0IFBvcnRhbCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFBvcnRhbChwcm9wcywgZm9yd2FyZGVkUmVmKSB7XG4gIGNvbnN0IHtcbiAgICBjaGlsZHJlbixcbiAgICBjb250YWluZXIsXG4gICAgZGlzYWJsZVBvcnRhbCA9IGZhbHNlXG4gIH0gPSBwcm9wcztcbiAgY29uc3QgW21vdW50Tm9kZSwgc2V0TW91bnROb2RlXSA9IFJlYWN0LnVzZVN0YXRlKG51bGwpO1xuICAvLyBAdHMtZXhwZWN0LWVycm9yIFRPRE8gdXBzdHJlYW0gZml4XG4gIGNvbnN0IGhhbmRsZVJlZiA9IHVzZUZvcmtSZWYoIC8qI19fUFVSRV9fKi9SZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZHJlbikgPyBjaGlsZHJlbi5yZWYgOiBudWxsLCBmb3J3YXJkZWRSZWYpO1xuICB1c2VFbmhhbmNlZEVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFkaXNhYmxlUG9ydGFsKSB7XG4gICAgICBzZXRNb3VudE5vZGUoZ2V0Q29udGFpbmVyKGNvbnRhaW5lcikgfHwgZG9jdW1lbnQuYm9keSk7XG4gICAgfVxuICB9LCBbY29udGFpbmVyLCBkaXNhYmxlUG9ydGFsXSk7XG4gIHVzZUVuaGFuY2VkRWZmZWN0KCgpID0+IHtcbiAgICBpZiAobW91bnROb2RlICYmICFkaXNhYmxlUG9ydGFsKSB7XG4gICAgICBzZXRSZWYoZm9yd2FyZGVkUmVmLCBtb3VudE5vZGUpO1xuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgc2V0UmVmKGZvcndhcmRlZFJlZiwgbnVsbCk7XG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9LCBbZm9yd2FyZGVkUmVmLCBtb3VudE5vZGUsIGRpc2FibGVQb3J0YWxdKTtcbiAgaWYgKGRpc2FibGVQb3J0YWwpIHtcbiAgICBpZiAoIC8qI19fUFVSRV9fKi9SZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZHJlbikpIHtcbiAgICAgIGNvbnN0IG5ld1Byb3BzID0ge1xuICAgICAgICByZWY6IGhhbmRsZVJlZlxuICAgICAgfTtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkcmVuLCBuZXdQcm9wcyk7XG4gICAgfVxuICAgIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChSZWFjdC5GcmFnbWVudCwge1xuICAgICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFJlYWN0LkZyYWdtZW50LCB7XG4gICAgY2hpbGRyZW46IG1vdW50Tm9kZSA/IC8qI19fUFVSRV9fKi9SZWFjdERPTS5jcmVhdGVQb3J0YWwoY2hpbGRyZW4sIG1vdW50Tm9kZSkgOiBtb3VudE5vZGVcbiAgfSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFBvcnRhbC5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIFR5cGVTY3JpcHQgdHlwZXMgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBUaGUgY2hpbGRyZW4gdG8gcmVuZGVyIGludG8gdGhlIGBjb250YWluZXJgLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogQW4gSFRNTCBlbGVtZW50IG9yIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBvbmUuXG4gICAqIFRoZSBgY29udGFpbmVyYCB3aWxsIGhhdmUgdGhlIHBvcnRhbCBjaGlsZHJlbiBhcHBlbmRlZCB0byBpdC5cbiAgICpcbiAgICogWW91IGNhbiBhbHNvIHByb3ZpZGUgYSBjYWxsYmFjaywgd2hpY2ggaXMgY2FsbGVkIGluIGEgUmVhY3QgbGF5b3V0IGVmZmVjdC5cbiAgICogVGhpcyBsZXRzIHlvdSBzZXQgdGhlIGNvbnRhaW5lciBmcm9tIGEgcmVmLCBhbmQgYWxzbyBtYWtlcyBzZXJ2ZXItc2lkZSByZW5kZXJpbmcgcG9zc2libGUuXG4gICAqXG4gICAqIEJ5IGRlZmF1bHQsIGl0IHVzZXMgdGhlIGJvZHkgb2YgdGhlIHRvcC1sZXZlbCBkb2N1bWVudCBvYmplY3QsXG4gICAqIHNvIGl0J3Mgc2ltcGx5IGBkb2N1bWVudC5ib2R5YCBtb3N0IG9mIHRoZSB0aW1lLlxuICAgKi9cbiAgY29udGFpbmVyOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW0hUTUxFbGVtZW50VHlwZSwgUHJvcFR5cGVzLmZ1bmNdKSxcbiAgLyoqXG4gICAqIFRoZSBgY2hpbGRyZW5gIHdpbGwgYmUgdW5kZXIgdGhlIERPTSBoaWVyYXJjaHkgb2YgdGhlIHBhcmVudCBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlUG9ydGFsOiBQcm9wVHlwZXMuYm9vbFxufSA6IHZvaWQgMDtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBQb3J0YWxbJ3Byb3BUeXBlcycgKyAnJ10gPSBleGFjdFByb3AoUG9ydGFsLnByb3BUeXBlcyk7XG59XG5leHBvcnQgeyBQb3J0YWwgfTsiLCJpbXBvcnQgeyB1bnN0YWJsZV9vd25lcldpbmRvdyBhcyBvd25lcldpbmRvdywgdW5zdGFibGVfb3duZXJEb2N1bWVudCBhcyBvd25lckRvY3VtZW50LCB1bnN0YWJsZV9nZXRTY3JvbGxiYXJTaXplIGFzIGdldFNjcm9sbGJhclNpemUgfSBmcm9tICdAbXVpL3V0aWxzJztcbi8vIElzIGEgdmVydGljYWwgc2Nyb2xsYmFyIGRpc3BsYXllZD9cbmZ1bmN0aW9uIGlzT3ZlcmZsb3dpbmcoY29udGFpbmVyKSB7XG4gIGNvbnN0IGRvYyA9IG93bmVyRG9jdW1lbnQoY29udGFpbmVyKTtcbiAgaWYgKGRvYy5ib2R5ID09PSBjb250YWluZXIpIHtcbiAgICByZXR1cm4gb3duZXJXaW5kb3coY29udGFpbmVyKS5pbm5lcldpZHRoID4gZG9jLmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aDtcbiAgfVxuICByZXR1cm4gY29udGFpbmVyLnNjcm9sbEhlaWdodCA+IGNvbnRhaW5lci5jbGllbnRIZWlnaHQ7XG59XG5leHBvcnQgZnVuY3Rpb24gYXJpYUhpZGRlbihlbGVtZW50LCBzaG93KSB7XG4gIGlmIChzaG93KSB7XG4gICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcbiAgfSBlbHNlIHtcbiAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nKTtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0UGFkZGluZ1JpZ2h0KGVsZW1lbnQpIHtcbiAgcmV0dXJuIHBhcnNlSW50KG93bmVyV2luZG93KGVsZW1lbnQpLmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkucGFkZGluZ1JpZ2h0LCAxMCkgfHwgMDtcbn1cbmZ1bmN0aW9uIGlzQXJpYUhpZGRlbkZvcmJpZGRlbk9uRWxlbWVudChlbGVtZW50KSB7XG4gIC8vIFRoZSBmb3JiaWRkZW4gSFRNTCB0YWdzIGFyZSB0aGUgb25lcyBmcm9tIEFSSUEgc3BlY2lmaWNhdGlvbiB0aGF0XG4gIC8vIGNhbiBiZSBjaGlsZHJlbiBvZiBib2R5IGFuZCBjYW4ndCBoYXZlIGFyaWEtaGlkZGVuIGF0dHJpYnV0ZS5cbiAgLy8gY2YuIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9odG1sLWFyaWEvI2RvY2NvbmZvcm1hbmNlXG4gIGNvbnN0IGZvcmJpZGRlblRhZ05hbWVzID0gWydURU1QTEFURScsICdTQ1JJUFQnLCAnU1RZTEUnLCAnTElOSycsICdNQVAnLCAnTUVUQScsICdOT1NDUklQVCcsICdQSUNUVVJFJywgJ0NPTCcsICdDT0xHUk9VUCcsICdQQVJBTScsICdTTE9UJywgJ1NPVVJDRScsICdUUkFDSyddO1xuICBjb25zdCBpc0ZvcmJpZGRlblRhZ05hbWUgPSBmb3JiaWRkZW5UYWdOYW1lcy5pbmRleE9mKGVsZW1lbnQudGFnTmFtZSkgIT09IC0xO1xuICBjb25zdCBpc0lucHV0SGlkZGVuID0gZWxlbWVudC50YWdOYW1lID09PSAnSU5QVVQnICYmIGVsZW1lbnQuZ2V0QXR0cmlidXRlKCd0eXBlJykgPT09ICdoaWRkZW4nO1xuICByZXR1cm4gaXNGb3JiaWRkZW5UYWdOYW1lIHx8IGlzSW5wdXRIaWRkZW47XG59XG5mdW5jdGlvbiBhcmlhSGlkZGVuU2libGluZ3MoY29udGFpbmVyLCBtb3VudEVsZW1lbnQsIGN1cnJlbnRFbGVtZW50LCBlbGVtZW50c1RvRXhjbHVkZSwgc2hvdykge1xuICBjb25zdCBibGFja2xpc3QgPSBbbW91bnRFbGVtZW50LCBjdXJyZW50RWxlbWVudCwgLi4uZWxlbWVudHNUb0V4Y2x1ZGVdO1xuICBbXS5mb3JFYWNoLmNhbGwoY29udGFpbmVyLmNoaWxkcmVuLCBlbGVtZW50ID0+IHtcbiAgICBjb25zdCBpc05vdEV4Y2x1ZGVkRWxlbWVudCA9IGJsYWNrbGlzdC5pbmRleE9mKGVsZW1lbnQpID09PSAtMTtcbiAgICBjb25zdCBpc05vdEZvcmJpZGRlbkVsZW1lbnQgPSAhaXNBcmlhSGlkZGVuRm9yYmlkZGVuT25FbGVtZW50KGVsZW1lbnQpO1xuICAgIGlmIChpc05vdEV4Y2x1ZGVkRWxlbWVudCAmJiBpc05vdEZvcmJpZGRlbkVsZW1lbnQpIHtcbiAgICAgIGFyaWFIaWRkZW4oZWxlbWVudCwgc2hvdyk7XG4gICAgfVxuICB9KTtcbn1cbmZ1bmN0aW9uIGZpbmRJbmRleE9mKGl0ZW1zLCBjYWxsYmFjaykge1xuICBsZXQgaWR4ID0gLTE7XG4gIGl0ZW1zLnNvbWUoKGl0ZW0sIGluZGV4KSA9PiB7XG4gICAgaWYgKGNhbGxiYWNrKGl0ZW0pKSB7XG4gICAgICBpZHggPSBpbmRleDtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0pO1xuICByZXR1cm4gaWR4O1xufVxuZnVuY3Rpb24gaGFuZGxlQ29udGFpbmVyKGNvbnRhaW5lckluZm8sIHByb3BzKSB7XG4gIGNvbnN0IHJlc3RvcmVTdHlsZSA9IFtdO1xuICBjb25zdCBjb250YWluZXIgPSBjb250YWluZXJJbmZvLmNvbnRhaW5lcjtcbiAgaWYgKCFwcm9wcy5kaXNhYmxlU2Nyb2xsTG9jaykge1xuICAgIGlmIChpc092ZXJmbG93aW5nKGNvbnRhaW5lcikpIHtcbiAgICAgIC8vIENvbXB1dGUgdGhlIHNpemUgYmVmb3JlIGFwcGx5aW5nIG92ZXJmbG93IGhpZGRlbiB0byBhdm9pZCBhbnkgc2Nyb2xsIGp1bXBzLlxuICAgICAgY29uc3Qgc2Nyb2xsYmFyU2l6ZSA9IGdldFNjcm9sbGJhclNpemUob3duZXJEb2N1bWVudChjb250YWluZXIpKTtcbiAgICAgIHJlc3RvcmVTdHlsZS5wdXNoKHtcbiAgICAgICAgdmFsdWU6IGNvbnRhaW5lci5zdHlsZS5wYWRkaW5nUmlnaHQsXG4gICAgICAgIHByb3BlcnR5OiAncGFkZGluZy1yaWdodCcsXG4gICAgICAgIGVsOiBjb250YWluZXJcbiAgICAgIH0pO1xuICAgICAgLy8gVXNlIGNvbXB1dGVkIHN0eWxlLCBoZXJlIHRvIGdldCB0aGUgcmVhbCBwYWRkaW5nIHRvIGFkZCBvdXIgc2Nyb2xsYmFyIHdpZHRoLlxuICAgICAgY29udGFpbmVyLnN0eWxlLnBhZGRpbmdSaWdodCA9IGAke2dldFBhZGRpbmdSaWdodChjb250YWluZXIpICsgc2Nyb2xsYmFyU2l6ZX1weGA7XG5cbiAgICAgIC8vIC5tdWktZml4ZWQgaXMgYSBnbG9iYWwgaGVscGVyLlxuICAgICAgY29uc3QgZml4ZWRFbGVtZW50cyA9IG93bmVyRG9jdW1lbnQoY29udGFpbmVyKS5xdWVyeVNlbGVjdG9yQWxsKCcubXVpLWZpeGVkJyk7XG4gICAgICBbXS5mb3JFYWNoLmNhbGwoZml4ZWRFbGVtZW50cywgZWxlbWVudCA9PiB7XG4gICAgICAgIHJlc3RvcmVTdHlsZS5wdXNoKHtcbiAgICAgICAgICB2YWx1ZTogZWxlbWVudC5zdHlsZS5wYWRkaW5nUmlnaHQsXG4gICAgICAgICAgcHJvcGVydHk6ICdwYWRkaW5nLXJpZ2h0JyxcbiAgICAgICAgICBlbDogZWxlbWVudFxuICAgICAgICB9KTtcbiAgICAgICAgZWxlbWVudC5zdHlsZS5wYWRkaW5nUmlnaHQgPSBgJHtnZXRQYWRkaW5nUmlnaHQoZWxlbWVudCkgKyBzY3JvbGxiYXJTaXplfXB4YDtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBsZXQgc2Nyb2xsQ29udGFpbmVyO1xuICAgIGlmIChjb250YWluZXIucGFyZW50Tm9kZSBpbnN0YW5jZW9mIERvY3VtZW50RnJhZ21lbnQpIHtcbiAgICAgIHNjcm9sbENvbnRhaW5lciA9IG93bmVyRG9jdW1lbnQoY29udGFpbmVyKS5ib2R5O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTdXBwb3J0IGh0bWwgb3ZlcmZsb3cteTogYXV0byBmb3Igc2Nyb2xsIHN0YWJpbGl0eSBiZXR3ZWVuIHBhZ2VzXG4gICAgICAvLyBodHRwczovL2Nzcy10cmlja3MuY29tL3NuaXBwZXRzL2Nzcy9mb3JjZS12ZXJ0aWNhbC1zY3JvbGxiYXIvXG4gICAgICBjb25zdCBwYXJlbnQgPSBjb250YWluZXIucGFyZW50RWxlbWVudDtcbiAgICAgIGNvbnN0IGNvbnRhaW5lcldpbmRvdyA9IG93bmVyV2luZG93KGNvbnRhaW5lcik7XG4gICAgICBzY3JvbGxDb250YWluZXIgPSAocGFyZW50ID09IG51bGwgPyB2b2lkIDAgOiBwYXJlbnQubm9kZU5hbWUpID09PSAnSFRNTCcgJiYgY29udGFpbmVyV2luZG93LmdldENvbXB1dGVkU3R5bGUocGFyZW50KS5vdmVyZmxvd1kgPT09ICdzY3JvbGwnID8gcGFyZW50IDogY29udGFpbmVyO1xuICAgIH1cblxuICAgIC8vIEJsb2NrIHRoZSBzY3JvbGwgZXZlbiBpZiBubyBzY3JvbGxiYXIgaXMgdmlzaWJsZSB0byBhY2NvdW50IGZvciBtb2JpbGUga2V5Ym9hcmRcbiAgICAvLyBzY3JlZW5zaXplIHNocmluay5cbiAgICByZXN0b3JlU3R5bGUucHVzaCh7XG4gICAgICB2YWx1ZTogc2Nyb2xsQ29udGFpbmVyLnN0eWxlLm92ZXJmbG93LFxuICAgICAgcHJvcGVydHk6ICdvdmVyZmxvdycsXG4gICAgICBlbDogc2Nyb2xsQ29udGFpbmVyXG4gICAgfSwge1xuICAgICAgdmFsdWU6IHNjcm9sbENvbnRhaW5lci5zdHlsZS5vdmVyZmxvd1gsXG4gICAgICBwcm9wZXJ0eTogJ292ZXJmbG93LXgnLFxuICAgICAgZWw6IHNjcm9sbENvbnRhaW5lclxuICAgIH0sIHtcbiAgICAgIHZhbHVlOiBzY3JvbGxDb250YWluZXIuc3R5bGUub3ZlcmZsb3dZLFxuICAgICAgcHJvcGVydHk6ICdvdmVyZmxvdy15JyxcbiAgICAgIGVsOiBzY3JvbGxDb250YWluZXJcbiAgICB9KTtcbiAgICBzY3JvbGxDb250YWluZXIuc3R5bGUub3ZlcmZsb3cgPSAnaGlkZGVuJztcbiAgfVxuICBjb25zdCByZXN0b3JlID0gKCkgPT4ge1xuICAgIHJlc3RvcmVTdHlsZS5mb3JFYWNoKCh7XG4gICAgICB2YWx1ZSxcbiAgICAgIGVsLFxuICAgICAgcHJvcGVydHlcbiAgICB9KSA9PiB7XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgZWwuc3R5bGUuc2V0UHJvcGVydHkocHJvcGVydHksIHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsLnN0eWxlLnJlbW92ZVByb3BlcnR5KHByb3BlcnR5KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcbiAgcmV0dXJuIHJlc3RvcmU7XG59XG5mdW5jdGlvbiBnZXRIaWRkZW5TaWJsaW5ncyhjb250YWluZXIpIHtcbiAgY29uc3QgaGlkZGVuU2libGluZ3MgPSBbXTtcbiAgW10uZm9yRWFjaC5jYWxsKGNvbnRhaW5lci5jaGlsZHJlbiwgZWxlbWVudCA9PiB7XG4gICAgaWYgKGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicpID09PSAndHJ1ZScpIHtcbiAgICAgIGhpZGRlblNpYmxpbmdzLnB1c2goZWxlbWVudCk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGhpZGRlblNpYmxpbmdzO1xufVxuLyoqXG4gKiBAaWdub3JlIC0gZG8gbm90IGRvY3VtZW50LlxuICpcbiAqIFByb3BlciBzdGF0ZSBtYW5hZ2VtZW50IGZvciBjb250YWluZXJzIGFuZCB0aGUgbW9kYWxzIGluIHRob3NlIGNvbnRhaW5lcnMuXG4gKiBTaW1wbGlmaWVkLCBidXQgaW5zcGlyZWQgYnkgcmVhY3Qtb3ZlcmxheSdzIE1vZGFsTWFuYWdlciBjbGFzcy5cbiAqIFVzZWQgYnkgdGhlIE1vZGFsIHRvIGVuc3VyZSBwcm9wZXIgc3R5bGluZyBvZiBjb250YWluZXJzLlxuICovXG5leHBvcnQgY2xhc3MgTW9kYWxNYW5hZ2VyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5jb250YWluZXJzID0gdm9pZCAwO1xuICAgIHRoaXMubW9kYWxzID0gdm9pZCAwO1xuICAgIHRoaXMubW9kYWxzID0gW107XG4gICAgdGhpcy5jb250YWluZXJzID0gW107XG4gIH1cbiAgYWRkKG1vZGFsLCBjb250YWluZXIpIHtcbiAgICBsZXQgbW9kYWxJbmRleCA9IHRoaXMubW9kYWxzLmluZGV4T2YobW9kYWwpO1xuICAgIGlmIChtb2RhbEluZGV4ICE9PSAtMSkge1xuICAgICAgcmV0dXJuIG1vZGFsSW5kZXg7XG4gICAgfVxuICAgIG1vZGFsSW5kZXggPSB0aGlzLm1vZGFscy5sZW5ndGg7XG4gICAgdGhpcy5tb2RhbHMucHVzaChtb2RhbCk7XG5cbiAgICAvLyBJZiB0aGUgbW9kYWwgd2UgYXJlIGFkZGluZyBpcyBhbHJlYWR5IGluIHRoZSBET00uXG4gICAgaWYgKG1vZGFsLm1vZGFsUmVmKSB7XG4gICAgICBhcmlhSGlkZGVuKG1vZGFsLm1vZGFsUmVmLCBmYWxzZSk7XG4gICAgfVxuICAgIGNvbnN0IGhpZGRlblNpYmxpbmdzID0gZ2V0SGlkZGVuU2libGluZ3MoY29udGFpbmVyKTtcbiAgICBhcmlhSGlkZGVuU2libGluZ3MoY29udGFpbmVyLCBtb2RhbC5tb3VudCwgbW9kYWwubW9kYWxSZWYsIGhpZGRlblNpYmxpbmdzLCB0cnVlKTtcbiAgICBjb25zdCBjb250YWluZXJJbmRleCA9IGZpbmRJbmRleE9mKHRoaXMuY29udGFpbmVycywgaXRlbSA9PiBpdGVtLmNvbnRhaW5lciA9PT0gY29udGFpbmVyKTtcbiAgICBpZiAoY29udGFpbmVySW5kZXggIT09IC0xKSB7XG4gICAgICB0aGlzLmNvbnRhaW5lcnNbY29udGFpbmVySW5kZXhdLm1vZGFscy5wdXNoKG1vZGFsKTtcbiAgICAgIHJldHVybiBtb2RhbEluZGV4O1xuICAgIH1cbiAgICB0aGlzLmNvbnRhaW5lcnMucHVzaCh7XG4gICAgICBtb2RhbHM6IFttb2RhbF0sXG4gICAgICBjb250YWluZXIsXG4gICAgICByZXN0b3JlOiBudWxsLFxuICAgICAgaGlkZGVuU2libGluZ3NcbiAgICB9KTtcbiAgICByZXR1cm4gbW9kYWxJbmRleDtcbiAgfVxuICBtb3VudChtb2RhbCwgcHJvcHMpIHtcbiAgICBjb25zdCBjb250YWluZXJJbmRleCA9IGZpbmRJbmRleE9mKHRoaXMuY29udGFpbmVycywgaXRlbSA9PiBpdGVtLm1vZGFscy5pbmRleE9mKG1vZGFsKSAhPT0gLTEpO1xuICAgIGNvbnN0IGNvbnRhaW5lckluZm8gPSB0aGlzLmNvbnRhaW5lcnNbY29udGFpbmVySW5kZXhdO1xuICAgIGlmICghY29udGFpbmVySW5mby5yZXN0b3JlKSB7XG4gICAgICBjb250YWluZXJJbmZvLnJlc3RvcmUgPSBoYW5kbGVDb250YWluZXIoY29udGFpbmVySW5mbywgcHJvcHMpO1xuICAgIH1cbiAgfVxuICByZW1vdmUobW9kYWwsIGFyaWFIaWRkZW5TdGF0ZSA9IHRydWUpIHtcbiAgICBjb25zdCBtb2RhbEluZGV4ID0gdGhpcy5tb2RhbHMuaW5kZXhPZihtb2RhbCk7XG4gICAgaWYgKG1vZGFsSW5kZXggPT09IC0xKSB7XG4gICAgICByZXR1cm4gbW9kYWxJbmRleDtcbiAgICB9XG4gICAgY29uc3QgY29udGFpbmVySW5kZXggPSBmaW5kSW5kZXhPZih0aGlzLmNvbnRhaW5lcnMsIGl0ZW0gPT4gaXRlbS5tb2RhbHMuaW5kZXhPZihtb2RhbCkgIT09IC0xKTtcbiAgICBjb25zdCBjb250YWluZXJJbmZvID0gdGhpcy5jb250YWluZXJzW2NvbnRhaW5lckluZGV4XTtcbiAgICBjb250YWluZXJJbmZvLm1vZGFscy5zcGxpY2UoY29udGFpbmVySW5mby5tb2RhbHMuaW5kZXhPZihtb2RhbCksIDEpO1xuICAgIHRoaXMubW9kYWxzLnNwbGljZShtb2RhbEluZGV4LCAxKTtcblxuICAgIC8vIElmIHRoYXQgd2FzIHRoZSBsYXN0IG1vZGFsIGluIGEgY29udGFpbmVyLCBjbGVhbiB1cCB0aGUgY29udGFpbmVyLlxuICAgIGlmIChjb250YWluZXJJbmZvLm1vZGFscy5sZW5ndGggPT09IDApIHtcbiAgICAgIC8vIFRoZSBtb2RhbCBtaWdodCBiZSBjbG9zZWQgYmVmb3JlIGl0IGhhZCB0aGUgY2hhbmNlIHRvIGJlIG1vdW50ZWQgaW4gdGhlIERPTS5cbiAgICAgIGlmIChjb250YWluZXJJbmZvLnJlc3RvcmUpIHtcbiAgICAgICAgY29udGFpbmVySW5mby5yZXN0b3JlKCk7XG4gICAgICB9XG4gICAgICBpZiAobW9kYWwubW9kYWxSZWYpIHtcbiAgICAgICAgLy8gSW4gY2FzZSB0aGUgbW9kYWwgd2Fzbid0IGluIHRoZSBET00geWV0LlxuICAgICAgICBhcmlhSGlkZGVuKG1vZGFsLm1vZGFsUmVmLCBhcmlhSGlkZGVuU3RhdGUpO1xuICAgICAgfVxuICAgICAgYXJpYUhpZGRlblNpYmxpbmdzKGNvbnRhaW5lckluZm8uY29udGFpbmVyLCBtb2RhbC5tb3VudCwgbW9kYWwubW9kYWxSZWYsIGNvbnRhaW5lckluZm8uaGlkZGVuU2libGluZ3MsIGZhbHNlKTtcbiAgICAgIHRoaXMuY29udGFpbmVycy5zcGxpY2UoY29udGFpbmVySW5kZXgsIDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBPdGhlcndpc2UgbWFrZSBzdXJlIHRoZSBuZXh0IHRvcCBtb2RhbCBpcyB2aXNpYmxlIHRvIGEgc2NyZWVuIHJlYWRlci5cbiAgICAgIGNvbnN0IG5leHRUb3AgPSBjb250YWluZXJJbmZvLm1vZGFsc1tjb250YWluZXJJbmZvLm1vZGFscy5sZW5ndGggLSAxXTtcbiAgICAgIC8vIGFzIHNvb24gYXMgYSBtb2RhbCBpcyBhZGRpbmcgaXRzIG1vZGFsUmVmIGlzIHVuZGVmaW5lZC4gaXQgY2FuJ3Qgc2V0XG4gICAgICAvLyBhcmlhLWhpZGRlbiBiZWNhdXNlIHRoZSBkb20gZWxlbWVudCBkb2Vzbid0IGV4aXN0IGVpdGhlclxuICAgICAgLy8gd2hlbiBtb2RhbCB3YXMgdW5tb3VudGVkIGJlZm9yZSBtb2RhbFJlZiBnZXRzIG51bGxcbiAgICAgIGlmIChuZXh0VG9wLm1vZGFsUmVmKSB7XG4gICAgICAgIGFyaWFIaWRkZW4obmV4dFRvcC5tb2RhbFJlZiwgZmFsc2UpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbW9kYWxJbmRleDtcbiAgfVxuICBpc1RvcE1vZGFsKG1vZGFsKSB7XG4gICAgcmV0dXJuIHRoaXMubW9kYWxzLmxlbmd0aCA+IDAgJiYgdGhpcy5tb2RhbHNbdGhpcy5tb2RhbHMubGVuZ3RoIC0gMV0gPT09IG1vZGFsO1xuICB9XG59IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVuc3RhYmxlX293bmVyRG9jdW1lbnQgYXMgb3duZXJEb2N1bWVudCwgdW5zdGFibGVfdXNlRm9ya1JlZiBhcyB1c2VGb3JrUmVmLCB1bnN0YWJsZV91c2VFdmVudENhbGxiYWNrIGFzIHVzZUV2ZW50Q2FsbGJhY2ssIHVuc3RhYmxlX2NyZWF0ZUNoYWluZWRGdW5jdGlvbiBhcyBjcmVhdGVDaGFpbmVkRnVuY3Rpb24gfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCB7IGV4dHJhY3RFdmVudEhhbmRsZXJzIH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IHsgTW9kYWxNYW5hZ2VyLCBhcmlhSGlkZGVuIH0gZnJvbSAnLi9Nb2RhbE1hbmFnZXInO1xuZnVuY3Rpb24gZ2V0Q29udGFpbmVyKGNvbnRhaW5lcikge1xuICByZXR1cm4gdHlwZW9mIGNvbnRhaW5lciA9PT0gJ2Z1bmN0aW9uJyA/IGNvbnRhaW5lcigpIDogY29udGFpbmVyO1xufVxuZnVuY3Rpb24gZ2V0SGFzVHJhbnNpdGlvbihjaGlsZHJlbikge1xuICByZXR1cm4gY2hpbGRyZW4gPyBjaGlsZHJlbi5wcm9wcy5oYXNPd25Qcm9wZXJ0eSgnaW4nKSA6IGZhbHNlO1xufVxuXG4vLyBBIG1vZGFsIG1hbmFnZXIgdXNlZCB0byB0cmFjayBhbmQgbWFuYWdlIHRoZSBzdGF0ZSBvZiBvcGVuIE1vZGFscy5cbi8vIE1vZGFscyBkb24ndCBvcGVuIG9uIHRoZSBzZXJ2ZXIgc28gdGhpcyB3b24ndCBjb25mbGljdCB3aXRoIGNvbmN1cnJlbnQgcmVxdWVzdHMuXG5jb25zdCBkZWZhdWx0TWFuYWdlciA9IG5ldyBNb2RhbE1hbmFnZXIoKTtcbi8qKlxuICpcbiAqIERlbW9zOlxuICpcbiAqIC0gW01vZGFsXShodHRwczovL211aS5jb20vYmFzZS11aS9yZWFjdC1tb2RhbC8jaG9vaylcbiAqXG4gKiBBUEk6XG4gKlxuICogLSBbdXNlTW9kYWwgQVBJXShodHRwczovL211aS5jb20vYmFzZS11aS9yZWFjdC1tb2RhbC9ob29rcy1hcGkvI3VzZS1tb2RhbClcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZU1vZGFsKHBhcmFtZXRlcnMpIHtcbiAgY29uc3Qge1xuICAgIGNvbnRhaW5lcixcbiAgICBkaXNhYmxlRXNjYXBlS2V5RG93biA9IGZhbHNlLFxuICAgIGRpc2FibGVTY3JvbGxMb2NrID0gZmFsc2UsXG4gICAgLy8gQHRzLWlnbm9yZSBpbnRlcm5hbCBsb2dpYyAtIEJhc2UgVUkgc3VwcG9ydHMgdGhlIG1hbmFnZXIgYXMgYSBwcm9wIHRvb1xuICAgIG1hbmFnZXIgPSBkZWZhdWx0TWFuYWdlcixcbiAgICBjbG9zZUFmdGVyVHJhbnNpdGlvbiA9IGZhbHNlLFxuICAgIG9uVHJhbnNpdGlvbkVudGVyLFxuICAgIG9uVHJhbnNpdGlvbkV4aXRlZCxcbiAgICBjaGlsZHJlbixcbiAgICBvbkNsb3NlLFxuICAgIG9wZW4sXG4gICAgcm9vdFJlZlxuICB9ID0gcGFyYW1ldGVycztcblxuICAvLyBAdHMtaWdub3JlIGludGVybmFsIGxvZ2ljXG4gIGNvbnN0IG1vZGFsID0gUmVhY3QudXNlUmVmKHt9KTtcbiAgY29uc3QgbW91bnROb2RlUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCBtb2RhbFJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3QgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihtb2RhbFJlZiwgcm9vdFJlZik7XG4gIGNvbnN0IFtleGl0ZWQsIHNldEV4aXRlZF0gPSBSZWFjdC51c2VTdGF0ZSghb3Blbik7XG4gIGNvbnN0IGhhc1RyYW5zaXRpb24gPSBnZXRIYXNUcmFuc2l0aW9uKGNoaWxkcmVuKTtcbiAgbGV0IGFyaWFIaWRkZW5Qcm9wID0gdHJ1ZTtcbiAgaWYgKHBhcmFtZXRlcnNbJ2FyaWEtaGlkZGVuJ10gPT09ICdmYWxzZScgfHwgcGFyYW1ldGVyc1snYXJpYS1oaWRkZW4nXSA9PT0gZmFsc2UpIHtcbiAgICBhcmlhSGlkZGVuUHJvcCA9IGZhbHNlO1xuICB9XG4gIGNvbnN0IGdldERvYyA9ICgpID0+IG93bmVyRG9jdW1lbnQobW91bnROb2RlUmVmLmN1cnJlbnQpO1xuICBjb25zdCBnZXRNb2RhbCA9ICgpID0+IHtcbiAgICBtb2RhbC5jdXJyZW50Lm1vZGFsUmVmID0gbW9kYWxSZWYuY3VycmVudDtcbiAgICBtb2RhbC5jdXJyZW50Lm1vdW50ID0gbW91bnROb2RlUmVmLmN1cnJlbnQ7XG4gICAgcmV0dXJuIG1vZGFsLmN1cnJlbnQ7XG4gIH07XG4gIGNvbnN0IGhhbmRsZU1vdW50ZWQgPSAoKSA9PiB7XG4gICAgbWFuYWdlci5tb3VudChnZXRNb2RhbCgpLCB7XG4gICAgICBkaXNhYmxlU2Nyb2xsTG9ja1xuICAgIH0pO1xuXG4gICAgLy8gRml4IGEgYnVnIG9uIENocm9tZSB3aGVyZSB0aGUgc2Nyb2xsIGlzbid0IGluaXRpYWxseSAwLlxuICAgIGlmIChtb2RhbFJlZi5jdXJyZW50KSB7XG4gICAgICBtb2RhbFJlZi5jdXJyZW50LnNjcm9sbFRvcCA9IDA7XG4gICAgfVxuICB9O1xuICBjb25zdCBoYW5kbGVPcGVuID0gdXNlRXZlbnRDYWxsYmFjaygoKSA9PiB7XG4gICAgY29uc3QgcmVzb2x2ZWRDb250YWluZXIgPSBnZXRDb250YWluZXIoY29udGFpbmVyKSB8fCBnZXREb2MoKS5ib2R5O1xuICAgIG1hbmFnZXIuYWRkKGdldE1vZGFsKCksIHJlc29sdmVkQ29udGFpbmVyKTtcblxuICAgIC8vIFRoZSBlbGVtZW50IHdhcyBhbHJlYWR5IG1vdW50ZWQuXG4gICAgaWYgKG1vZGFsUmVmLmN1cnJlbnQpIHtcbiAgICAgIGhhbmRsZU1vdW50ZWQoKTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBpc1RvcE1vZGFsID0gUmVhY3QudXNlQ2FsbGJhY2soKCkgPT4gbWFuYWdlci5pc1RvcE1vZGFsKGdldE1vZGFsKCkpLCBbbWFuYWdlcl0pO1xuICBjb25zdCBoYW5kbGVQb3J0YWxSZWYgPSB1c2VFdmVudENhbGxiYWNrKG5vZGUgPT4ge1xuICAgIG1vdW50Tm9kZVJlZi5jdXJyZW50ID0gbm9kZTtcbiAgICBpZiAoIW5vZGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKG9wZW4gJiYgaXNUb3BNb2RhbCgpKSB7XG4gICAgICBoYW5kbGVNb3VudGVkKCk7XG4gICAgfSBlbHNlIGlmIChtb2RhbFJlZi5jdXJyZW50KSB7XG4gICAgICBhcmlhSGlkZGVuKG1vZGFsUmVmLmN1cnJlbnQsIGFyaWFIaWRkZW5Qcm9wKTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBoYW5kbGVDbG9zZSA9IFJlYWN0LnVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBtYW5hZ2VyLnJlbW92ZShnZXRNb2RhbCgpLCBhcmlhSGlkZGVuUHJvcCk7XG4gIH0sIFthcmlhSGlkZGVuUHJvcCwgbWFuYWdlcl0pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBoYW5kbGVDbG9zZSgpO1xuICAgIH07XG4gIH0sIFtoYW5kbGVDbG9zZV0pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChvcGVuKSB7XG4gICAgICBoYW5kbGVPcGVuKCk7XG4gICAgfSBlbHNlIGlmICghaGFzVHJhbnNpdGlvbiB8fCAhY2xvc2VBZnRlclRyYW5zaXRpb24pIHtcbiAgICAgIGhhbmRsZUNsb3NlKCk7XG4gICAgfVxuICB9LCBbb3BlbiwgaGFuZGxlQ2xvc2UsIGhhc1RyYW5zaXRpb24sIGNsb3NlQWZ0ZXJUcmFuc2l0aW9uLCBoYW5kbGVPcGVuXSk7XG4gIGNvbnN0IGNyZWF0ZUhhbmRsZUtleURvd24gPSBvdGhlckhhbmRsZXJzID0+IGV2ZW50ID0+IHtcbiAgICB2YXIgX290aGVySGFuZGxlcnMkb25LZXlEO1xuICAgIChfb3RoZXJIYW5kbGVycyRvbktleUQgPSBvdGhlckhhbmRsZXJzLm9uS2V5RG93bikgPT0gbnVsbCB8fCBfb3RoZXJIYW5kbGVycyRvbktleUQuY2FsbChvdGhlckhhbmRsZXJzLCBldmVudCk7XG5cbiAgICAvLyBUaGUgaGFuZGxlciBkb2Vzbid0IHRha2UgZXZlbnQuZGVmYXVsdFByZXZlbnRlZCBpbnRvIGFjY291bnQ6XG4gICAgLy9cbiAgICAvLyBldmVudC5wcmV2ZW50RGVmYXVsdCgpIGlzIG1lYW50IHRvIHN0b3AgZGVmYXVsdCBiZWhhdmlvcnMgbGlrZVxuICAgIC8vIGNsaWNraW5nIGEgY2hlY2tib3ggdG8gY2hlY2sgaXQsIGhpdHRpbmcgYSBidXR0b24gdG8gc3VibWl0IGEgZm9ybSxcbiAgICAvLyBhbmQgaGl0dGluZyBsZWZ0IGFycm93IHRvIG1vdmUgdGhlIGN1cnNvciBpbiBhIHRleHQgaW5wdXQgZXRjLlxuICAgIC8vIE9ubHkgc3BlY2lhbCBIVE1MIGVsZW1lbnRzIGhhdmUgdGhlc2UgZGVmYXVsdCBiZWhhdmlvcnMuXG4gICAgaWYgKGV2ZW50LmtleSAhPT0gJ0VzY2FwZScgfHwgZXZlbnQud2hpY2ggPT09IDIyOSB8fFxuICAgIC8vIFdhaXQgdW50aWwgSU1FIGlzIHNldHRsZWQuXG4gICAgIWlzVG9wTW9kYWwoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIWRpc2FibGVFc2NhcGVLZXlEb3duKSB7XG4gICAgICAvLyBTd2FsbG93IHRoZSBldmVudCwgaW4gY2FzZSBzb21lb25lIGlzIGxpc3RlbmluZyBmb3IgdGhlIGVzY2FwZSBrZXkgb24gdGhlIGJvZHkuXG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGlmIChvbkNsb3NlKSB7XG4gICAgICAgIG9uQ2xvc2UoZXZlbnQsICdlc2NhcGVLZXlEb3duJyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBjb25zdCBjcmVhdGVIYW5kbGVCYWNrZHJvcENsaWNrID0gb3RoZXJIYW5kbGVycyA9PiBldmVudCA9PiB7XG4gICAgdmFyIF9vdGhlckhhbmRsZXJzJG9uQ2xpYztcbiAgICAoX290aGVySGFuZGxlcnMkb25DbGljID0gb3RoZXJIYW5kbGVycy5vbkNsaWNrKSA9PSBudWxsIHx8IF9vdGhlckhhbmRsZXJzJG9uQ2xpYy5jYWxsKG90aGVySGFuZGxlcnMsIGV2ZW50KTtcbiAgICBpZiAoZXZlbnQudGFyZ2V0ICE9PSBldmVudC5jdXJyZW50VGFyZ2V0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChvbkNsb3NlKSB7XG4gICAgICBvbkNsb3NlKGV2ZW50LCAnYmFja2Ryb3BDbGljaycpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgZ2V0Um9vdFByb3BzID0gKG90aGVySGFuZGxlcnMgPSB7fSkgPT4ge1xuICAgIGNvbnN0IHByb3BzRXZlbnRIYW5kbGVycyA9IGV4dHJhY3RFdmVudEhhbmRsZXJzKHBhcmFtZXRlcnMpO1xuXG4gICAgLy8gVGhlIGN1c3RvbSBldmVudCBoYW5kbGVycyBzaG91bGRuJ3QgYmUgc3ByZWFkIG9uIHRoZSByb290IGVsZW1lbnRcbiAgICBkZWxldGUgcHJvcHNFdmVudEhhbmRsZXJzLm9uVHJhbnNpdGlvbkVudGVyO1xuICAgIGRlbGV0ZSBwcm9wc0V2ZW50SGFuZGxlcnMub25UcmFuc2l0aW9uRXhpdGVkO1xuICAgIGNvbnN0IGV4dGVybmFsRXZlbnRIYW5kbGVycyA9IF9leHRlbmRzKHt9LCBwcm9wc0V2ZW50SGFuZGxlcnMsIG90aGVySGFuZGxlcnMpO1xuICAgIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgICByb2xlOiAncHJlc2VudGF0aW9uJ1xuICAgIH0sIGV4dGVybmFsRXZlbnRIYW5kbGVycywge1xuICAgICAgb25LZXlEb3duOiBjcmVhdGVIYW5kbGVLZXlEb3duKGV4dGVybmFsRXZlbnRIYW5kbGVycyksXG4gICAgICByZWY6IGhhbmRsZVJlZlxuICAgIH0pO1xuICB9O1xuICBjb25zdCBnZXRCYWNrZHJvcFByb3BzID0gKG90aGVySGFuZGxlcnMgPSB7fSkgPT4ge1xuICAgIGNvbnN0IGV4dGVybmFsRXZlbnRIYW5kbGVycyA9IG90aGVySGFuZGxlcnM7XG4gICAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAgICdhcmlhLWhpZGRlbic6IHRydWVcbiAgICB9LCBleHRlcm5hbEV2ZW50SGFuZGxlcnMsIHtcbiAgICAgIG9uQ2xpY2s6IGNyZWF0ZUhhbmRsZUJhY2tkcm9wQ2xpY2soZXh0ZXJuYWxFdmVudEhhbmRsZXJzKSxcbiAgICAgIG9wZW5cbiAgICB9KTtcbiAgfTtcbiAgY29uc3QgZ2V0VHJhbnNpdGlvblByb3BzID0gKCkgPT4ge1xuICAgIGNvbnN0IGhhbmRsZUVudGVyID0gKCkgPT4ge1xuICAgICAgc2V0RXhpdGVkKGZhbHNlKTtcbiAgICAgIGlmIChvblRyYW5zaXRpb25FbnRlcikge1xuICAgICAgICBvblRyYW5zaXRpb25FbnRlcigpO1xuICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgaGFuZGxlRXhpdGVkID0gKCkgPT4ge1xuICAgICAgc2V0RXhpdGVkKHRydWUpO1xuICAgICAgaWYgKG9uVHJhbnNpdGlvbkV4aXRlZCkge1xuICAgICAgICBvblRyYW5zaXRpb25FeGl0ZWQoKTtcbiAgICAgIH1cbiAgICAgIGlmIChjbG9zZUFmdGVyVHJhbnNpdGlvbikge1xuICAgICAgICBoYW5kbGVDbG9zZSgpO1xuICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgIG9uRW50ZXI6IGNyZWF0ZUNoYWluZWRGdW5jdGlvbihoYW5kbGVFbnRlciwgY2hpbGRyZW4gPT0gbnVsbCA/IHZvaWQgMCA6IGNoaWxkcmVuLnByb3BzLm9uRW50ZXIpLFxuICAgICAgb25FeGl0ZWQ6IGNyZWF0ZUNoYWluZWRGdW5jdGlvbihoYW5kbGVFeGl0ZWQsIGNoaWxkcmVuID09IG51bGwgPyB2b2lkIDAgOiBjaGlsZHJlbi5wcm9wcy5vbkV4aXRlZClcbiAgICB9O1xuICB9O1xuICByZXR1cm4ge1xuICAgIGdldFJvb3RQcm9wcyxcbiAgICBnZXRCYWNrZHJvcFByb3BzLFxuICAgIGdldFRyYW5zaXRpb25Qcm9wcyxcbiAgICByb290UmVmOiBoYW5kbGVSZWYsXG4gICAgcG9ydGFsUmVmOiBoYW5kbGVQb3J0YWxSZWYsXG4gICAgaXNUb3BNb2RhbCxcbiAgICBleGl0ZWQsXG4gICAgaGFzVHJhbnNpdGlvblxuICB9O1xufSIsImV4cG9ydCB2YXIgdG9wID0gJ3RvcCc7XG5leHBvcnQgdmFyIGJvdHRvbSA9ICdib3R0b20nO1xuZXhwb3J0IHZhciByaWdodCA9ICdyaWdodCc7XG5leHBvcnQgdmFyIGxlZnQgPSAnbGVmdCc7XG5leHBvcnQgdmFyIGF1dG8gPSAnYXV0byc7XG5leHBvcnQgdmFyIGJhc2VQbGFjZW1lbnRzID0gW3RvcCwgYm90dG9tLCByaWdodCwgbGVmdF07XG5leHBvcnQgdmFyIHN0YXJ0ID0gJ3N0YXJ0JztcbmV4cG9ydCB2YXIgZW5kID0gJ2VuZCc7XG5leHBvcnQgdmFyIGNsaXBwaW5nUGFyZW50cyA9ICdjbGlwcGluZ1BhcmVudHMnO1xuZXhwb3J0IHZhciB2aWV3cG9ydCA9ICd2aWV3cG9ydCc7XG5leHBvcnQgdmFyIHBvcHBlciA9ICdwb3BwZXInO1xuZXhwb3J0IHZhciByZWZlcmVuY2UgPSAncmVmZXJlbmNlJztcbmV4cG9ydCB2YXIgdmFyaWF0aW9uUGxhY2VtZW50cyA9IC8qI19fUFVSRV9fKi9iYXNlUGxhY2VtZW50cy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcGxhY2VtZW50KSB7XG4gIHJldHVybiBhY2MuY29uY2F0KFtwbGFjZW1lbnQgKyBcIi1cIiArIHN0YXJ0LCBwbGFjZW1lbnQgKyBcIi1cIiArIGVuZF0pO1xufSwgW10pO1xuZXhwb3J0IHZhciBwbGFjZW1lbnRzID0gLyojX19QVVJFX18qL1tdLmNvbmNhdChiYXNlUGxhY2VtZW50cywgW2F1dG9dKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcGxhY2VtZW50KSB7XG4gIHJldHVybiBhY2MuY29uY2F0KFtwbGFjZW1lbnQsIHBsYWNlbWVudCArIFwiLVwiICsgc3RhcnQsIHBsYWNlbWVudCArIFwiLVwiICsgZW5kXSk7XG59LCBbXSk7IC8vIG1vZGlmaWVycyB0aGF0IG5lZWQgdG8gcmVhZCB0aGUgRE9NXG5cbmV4cG9ydCB2YXIgYmVmb3JlUmVhZCA9ICdiZWZvcmVSZWFkJztcbmV4cG9ydCB2YXIgcmVhZCA9ICdyZWFkJztcbmV4cG9ydCB2YXIgYWZ0ZXJSZWFkID0gJ2FmdGVyUmVhZCc7IC8vIHB1cmUtbG9naWMgbW9kaWZpZXJzXG5cbmV4cG9ydCB2YXIgYmVmb3JlTWFpbiA9ICdiZWZvcmVNYWluJztcbmV4cG9ydCB2YXIgbWFpbiA9ICdtYWluJztcbmV4cG9ydCB2YXIgYWZ0ZXJNYWluID0gJ2FmdGVyTWFpbic7IC8vIG1vZGlmaWVyIHdpdGggdGhlIHB1cnBvc2UgdG8gd3JpdGUgdG8gdGhlIERPTSAob3Igd3JpdGUgaW50byBhIGZyYW1ld29yayBzdGF0ZSlcblxuZXhwb3J0IHZhciBiZWZvcmVXcml0ZSA9ICdiZWZvcmVXcml0ZSc7XG5leHBvcnQgdmFyIHdyaXRlID0gJ3dyaXRlJztcbmV4cG9ydCB2YXIgYWZ0ZXJXcml0ZSA9ICdhZnRlcldyaXRlJztcbmV4cG9ydCB2YXIgbW9kaWZpZXJQaGFzZXMgPSBbYmVmb3JlUmVhZCwgcmVhZCwgYWZ0ZXJSZWFkLCBiZWZvcmVNYWluLCBtYWluLCBhZnRlck1haW4sIGJlZm9yZVdyaXRlLCB3cml0ZSwgYWZ0ZXJXcml0ZV07IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Tm9kZU5hbWUoZWxlbWVudCkge1xuICByZXR1cm4gZWxlbWVudCA/IChlbGVtZW50Lm5vZGVOYW1lIHx8ICcnKS50b0xvd2VyQ2FzZSgpIDogbnVsbDtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRXaW5kb3cobm9kZSkge1xuICBpZiAobm9kZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHdpbmRvdztcbiAgfVxuXG4gIGlmIChub2RlLnRvU3RyaW5nKCkgIT09ICdbb2JqZWN0IFdpbmRvd10nKSB7XG4gICAgdmFyIG93bmVyRG9jdW1lbnQgPSBub2RlLm93bmVyRG9jdW1lbnQ7XG4gICAgcmV0dXJuIG93bmVyRG9jdW1lbnQgPyBvd25lckRvY3VtZW50LmRlZmF1bHRWaWV3IHx8IHdpbmRvdyA6IHdpbmRvdztcbiAgfVxuXG4gIHJldHVybiBub2RlO1xufSIsImltcG9ydCBnZXRXaW5kb3cgZnJvbSBcIi4vZ2V0V2luZG93LmpzXCI7XG5cbmZ1bmN0aW9uIGlzRWxlbWVudChub2RlKSB7XG4gIHZhciBPd25FbGVtZW50ID0gZ2V0V2luZG93KG5vZGUpLkVsZW1lbnQ7XG4gIHJldHVybiBub2RlIGluc3RhbmNlb2YgT3duRWxlbWVudCB8fCBub2RlIGluc3RhbmNlb2YgRWxlbWVudDtcbn1cblxuZnVuY3Rpb24gaXNIVE1MRWxlbWVudChub2RlKSB7XG4gIHZhciBPd25FbGVtZW50ID0gZ2V0V2luZG93KG5vZGUpLkhUTUxFbGVtZW50O1xuICByZXR1cm4gbm9kZSBpbnN0YW5jZW9mIE93bkVsZW1lbnQgfHwgbm9kZSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50O1xufVxuXG5mdW5jdGlvbiBpc1NoYWRvd1Jvb3Qobm9kZSkge1xuICAvLyBJRSAxMSBoYXMgbm8gU2hhZG93Um9vdFxuICBpZiAodHlwZW9mIFNoYWRvd1Jvb3QgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIE93bkVsZW1lbnQgPSBnZXRXaW5kb3cobm9kZSkuU2hhZG93Um9vdDtcbiAgcmV0dXJuIG5vZGUgaW5zdGFuY2VvZiBPd25FbGVtZW50IHx8IG5vZGUgaW5zdGFuY2VvZiBTaGFkb3dSb290O1xufVxuXG5leHBvcnQgeyBpc0VsZW1lbnQsIGlzSFRNTEVsZW1lbnQsIGlzU2hhZG93Um9vdCB9OyIsImltcG9ydCBnZXROb2RlTmFtZSBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldE5vZGVOYW1lLmpzXCI7XG5pbXBvcnQgeyBpc0hUTUxFbGVtZW50IH0gZnJvbSBcIi4uL2RvbS11dGlscy9pbnN0YW5jZU9mLmpzXCI7IC8vIFRoaXMgbW9kaWZpZXIgdGFrZXMgdGhlIHN0eWxlcyBwcmVwYXJlZCBieSB0aGUgYGNvbXB1dGVTdHlsZXNgIG1vZGlmaWVyXG4vLyBhbmQgYXBwbGllcyB0aGVtIHRvIHRoZSBIVE1MRWxlbWVudHMgc3VjaCBhcyBwb3BwZXIgYW5kIGFycm93XG5cbmZ1bmN0aW9uIGFwcGx5U3R5bGVzKF9yZWYpIHtcbiAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZTtcbiAgT2JqZWN0LmtleXMoc3RhdGUuZWxlbWVudHMpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB2YXIgc3R5bGUgPSBzdGF0ZS5zdHlsZXNbbmFtZV0gfHwge307XG4gICAgdmFyIGF0dHJpYnV0ZXMgPSBzdGF0ZS5hdHRyaWJ1dGVzW25hbWVdIHx8IHt9O1xuICAgIHZhciBlbGVtZW50ID0gc3RhdGUuZWxlbWVudHNbbmFtZV07IC8vIGFycm93IGlzIG9wdGlvbmFsICsgdmlydHVhbCBlbGVtZW50c1xuXG4gICAgaWYgKCFpc0hUTUxFbGVtZW50KGVsZW1lbnQpIHx8ICFnZXROb2RlTmFtZShlbGVtZW50KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gRmxvdyBkb2Vzbid0IHN1cHBvcnQgdG8gZXh0ZW5kIHRoaXMgcHJvcGVydHksIGJ1dCBpdCdzIHRoZSBtb3N0XG4gICAgLy8gZWZmZWN0aXZlIHdheSB0byBhcHBseSBzdHlsZXMgdG8gYW4gSFRNTEVsZW1lbnRcbiAgICAvLyAkRmxvd0ZpeE1lW2Nhbm5vdC13cml0ZV1cblxuXG4gICAgT2JqZWN0LmFzc2lnbihlbGVtZW50LnN0eWxlLCBzdHlsZSk7XG4gICAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgdmFyIHZhbHVlID0gYXR0cmlidXRlc1tuYW1lXTtcblxuICAgICAgaWYgKHZhbHVlID09PSBmYWxzZSkge1xuICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlID09PSB0cnVlID8gJycgOiB2YWx1ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBlZmZlY3QoX3JlZjIpIHtcbiAgdmFyIHN0YXRlID0gX3JlZjIuc3RhdGU7XG4gIHZhciBpbml0aWFsU3R5bGVzID0ge1xuICAgIHBvcHBlcjoge1xuICAgICAgcG9zaXRpb246IHN0YXRlLm9wdGlvbnMuc3RyYXRlZ3ksXG4gICAgICBsZWZ0OiAnMCcsXG4gICAgICB0b3A6ICcwJyxcbiAgICAgIG1hcmdpbjogJzAnXG4gICAgfSxcbiAgICBhcnJvdzoge1xuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZSdcbiAgICB9LFxuICAgIHJlZmVyZW5jZToge31cbiAgfTtcbiAgT2JqZWN0LmFzc2lnbihzdGF0ZS5lbGVtZW50cy5wb3BwZXIuc3R5bGUsIGluaXRpYWxTdHlsZXMucG9wcGVyKTtcbiAgc3RhdGUuc3R5bGVzID0gaW5pdGlhbFN0eWxlcztcblxuICBpZiAoc3RhdGUuZWxlbWVudHMuYXJyb3cpIHtcbiAgICBPYmplY3QuYXNzaWduKHN0YXRlLmVsZW1lbnRzLmFycm93LnN0eWxlLCBpbml0aWFsU3R5bGVzLmFycm93KTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgT2JqZWN0LmtleXMoc3RhdGUuZWxlbWVudHMpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIHZhciBlbGVtZW50ID0gc3RhdGUuZWxlbWVudHNbbmFtZV07XG4gICAgICB2YXIgYXR0cmlidXRlcyA9IHN0YXRlLmF0dHJpYnV0ZXNbbmFtZV0gfHwge307XG4gICAgICB2YXIgc3R5bGVQcm9wZXJ0aWVzID0gT2JqZWN0LmtleXMoc3RhdGUuc3R5bGVzLmhhc093blByb3BlcnR5KG5hbWUpID8gc3RhdGUuc3R5bGVzW25hbWVdIDogaW5pdGlhbFN0eWxlc1tuYW1lXSk7IC8vIFNldCBhbGwgdmFsdWVzIHRvIGFuIGVtcHR5IHN0cmluZyB0byB1bnNldCB0aGVtXG5cbiAgICAgIHZhciBzdHlsZSA9IHN0eWxlUHJvcGVydGllcy5yZWR1Y2UoZnVuY3Rpb24gKHN0eWxlLCBwcm9wZXJ0eSkge1xuICAgICAgICBzdHlsZVtwcm9wZXJ0eV0gPSAnJztcbiAgICAgICAgcmV0dXJuIHN0eWxlO1xuICAgICAgfSwge30pOyAvLyBhcnJvdyBpcyBvcHRpb25hbCArIHZpcnR1YWwgZWxlbWVudHNcblxuICAgICAgaWYgKCFpc0hUTUxFbGVtZW50KGVsZW1lbnQpIHx8ICFnZXROb2RlTmFtZShlbGVtZW50KSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIE9iamVjdC5hc3NpZ24oZWxlbWVudC5zdHlsZSwgc3R5bGUpO1xuICAgICAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAoYXR0cmlidXRlKSB7XG4gICAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ2FwcGx5U3R5bGVzJyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICd3cml0ZScsXG4gIGZuOiBhcHBseVN0eWxlcyxcbiAgZWZmZWN0OiBlZmZlY3QsXG4gIHJlcXVpcmVzOiBbJ2NvbXB1dGVTdHlsZXMnXVxufTsiLCJpbXBvcnQgeyBhdXRvIH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCkge1xuICByZXR1cm4gcGxhY2VtZW50LnNwbGl0KCctJylbMF07XG59IiwiZXhwb3J0IHZhciBtYXggPSBNYXRoLm1heDtcbmV4cG9ydCB2YXIgbWluID0gTWF0aC5taW47XG5leHBvcnQgdmFyIHJvdW5kID0gTWF0aC5yb3VuZDsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVQVN0cmluZygpIHtcbiAgdmFyIHVhRGF0YSA9IG5hdmlnYXRvci51c2VyQWdlbnREYXRhO1xuXG4gIGlmICh1YURhdGEgIT0gbnVsbCAmJiB1YURhdGEuYnJhbmRzICYmIEFycmF5LmlzQXJyYXkodWFEYXRhLmJyYW5kcykpIHtcbiAgICByZXR1cm4gdWFEYXRhLmJyYW5kcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHJldHVybiBpdGVtLmJyYW5kICsgXCIvXCIgKyBpdGVtLnZlcnNpb247XG4gICAgfSkuam9pbignICcpO1xuICB9XG5cbiAgcmV0dXJuIG5hdmlnYXRvci51c2VyQWdlbnQ7XG59IiwiaW1wb3J0IGdldFVBU3RyaW5nIGZyb20gXCIuLi91dGlscy91c2VyQWdlbnQuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzTGF5b3V0Vmlld3BvcnQoKSB7XG4gIHJldHVybiAhL14oKD8hY2hyb21lfGFuZHJvaWQpLikqc2FmYXJpL2kudGVzdChnZXRVQVN0cmluZygpKTtcbn0iLCJpbXBvcnQgeyBpc0VsZW1lbnQsIGlzSFRNTEVsZW1lbnQgfSBmcm9tIFwiLi9pbnN0YW5jZU9mLmpzXCI7XG5pbXBvcnQgeyByb3VuZCB9IGZyb20gXCIuLi91dGlscy9tYXRoLmpzXCI7XG5pbXBvcnQgZ2V0V2luZG93IGZyb20gXCIuL2dldFdpbmRvdy5qc1wiO1xuaW1wb3J0IGlzTGF5b3V0Vmlld3BvcnQgZnJvbSBcIi4vaXNMYXlvdXRWaWV3cG9ydC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnQsIGluY2x1ZGVTY2FsZSwgaXNGaXhlZFN0cmF0ZWd5KSB7XG4gIGlmIChpbmNsdWRlU2NhbGUgPT09IHZvaWQgMCkge1xuICAgIGluY2x1ZGVTY2FsZSA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKGlzRml4ZWRTdHJhdGVneSA9PT0gdm9pZCAwKSB7XG4gICAgaXNGaXhlZFN0cmF0ZWd5ID0gZmFsc2U7XG4gIH1cblxuICB2YXIgY2xpZW50UmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIHZhciBzY2FsZVggPSAxO1xuICB2YXIgc2NhbGVZID0gMTtcblxuICBpZiAoaW5jbHVkZVNjYWxlICYmIGlzSFRNTEVsZW1lbnQoZWxlbWVudCkpIHtcbiAgICBzY2FsZVggPSBlbGVtZW50Lm9mZnNldFdpZHRoID4gMCA/IHJvdW5kKGNsaWVudFJlY3Qud2lkdGgpIC8gZWxlbWVudC5vZmZzZXRXaWR0aCB8fCAxIDogMTtcbiAgICBzY2FsZVkgPSBlbGVtZW50Lm9mZnNldEhlaWdodCA+IDAgPyByb3VuZChjbGllbnRSZWN0LmhlaWdodCkgLyBlbGVtZW50Lm9mZnNldEhlaWdodCB8fCAxIDogMTtcbiAgfVxuXG4gIHZhciBfcmVmID0gaXNFbGVtZW50KGVsZW1lbnQpID8gZ2V0V2luZG93KGVsZW1lbnQpIDogd2luZG93LFxuICAgICAgdmlzdWFsVmlld3BvcnQgPSBfcmVmLnZpc3VhbFZpZXdwb3J0O1xuXG4gIHZhciBhZGRWaXN1YWxPZmZzZXRzID0gIWlzTGF5b3V0Vmlld3BvcnQoKSAmJiBpc0ZpeGVkU3RyYXRlZ3k7XG4gIHZhciB4ID0gKGNsaWVudFJlY3QubGVmdCArIChhZGRWaXN1YWxPZmZzZXRzICYmIHZpc3VhbFZpZXdwb3J0ID8gdmlzdWFsVmlld3BvcnQub2Zmc2V0TGVmdCA6IDApKSAvIHNjYWxlWDtcbiAgdmFyIHkgPSAoY2xpZW50UmVjdC50b3AgKyAoYWRkVmlzdWFsT2Zmc2V0cyAmJiB2aXN1YWxWaWV3cG9ydCA/IHZpc3VhbFZpZXdwb3J0Lm9mZnNldFRvcCA6IDApKSAvIHNjYWxlWTtcbiAgdmFyIHdpZHRoID0gY2xpZW50UmVjdC53aWR0aCAvIHNjYWxlWDtcbiAgdmFyIGhlaWdodCA9IGNsaWVudFJlY3QuaGVpZ2h0IC8gc2NhbGVZO1xuICByZXR1cm4ge1xuICAgIHdpZHRoOiB3aWR0aCxcbiAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICB0b3A6IHksXG4gICAgcmlnaHQ6IHggKyB3aWR0aCxcbiAgICBib3R0b206IHkgKyBoZWlnaHQsXG4gICAgbGVmdDogeCxcbiAgICB4OiB4LFxuICAgIHk6IHlcbiAgfTtcbn0iLCJpbXBvcnQgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGZyb20gXCIuL2dldEJvdW5kaW5nQ2xpZW50UmVjdC5qc1wiOyAvLyBSZXR1cm5zIHRoZSBsYXlvdXQgcmVjdCBvZiBhbiBlbGVtZW50IHJlbGF0aXZlIHRvIGl0cyBvZmZzZXRQYXJlbnQuIExheW91dFxuLy8gbWVhbnMgaXQgZG9lc24ndCB0YWtlIGludG8gYWNjb3VudCB0cmFuc2Zvcm1zLlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRMYXlvdXRSZWN0KGVsZW1lbnQpIHtcbiAgdmFyIGNsaWVudFJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QoZWxlbWVudCk7IC8vIFVzZSB0aGUgY2xpZW50UmVjdCBzaXplcyBpZiBpdCdzIG5vdCBiZWVuIHRyYW5zZm9ybWVkLlxuICAvLyBGaXhlcyBodHRwczovL2dpdGh1Yi5jb20vcG9wcGVyanMvcG9wcGVyLWNvcmUvaXNzdWVzLzEyMjNcblxuICB2YXIgd2lkdGggPSBlbGVtZW50Lm9mZnNldFdpZHRoO1xuICB2YXIgaGVpZ2h0ID0gZWxlbWVudC5vZmZzZXRIZWlnaHQ7XG5cbiAgaWYgKE1hdGguYWJzKGNsaWVudFJlY3Qud2lkdGggLSB3aWR0aCkgPD0gMSkge1xuICAgIHdpZHRoID0gY2xpZW50UmVjdC53aWR0aDtcbiAgfVxuXG4gIGlmIChNYXRoLmFicyhjbGllbnRSZWN0LmhlaWdodCAtIGhlaWdodCkgPD0gMSkge1xuICAgIGhlaWdodCA9IGNsaWVudFJlY3QuaGVpZ2h0O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB4OiBlbGVtZW50Lm9mZnNldExlZnQsXG4gICAgeTogZWxlbWVudC5vZmZzZXRUb3AsXG4gICAgd2lkdGg6IHdpZHRoLFxuICAgIGhlaWdodDogaGVpZ2h0XG4gIH07XG59IiwiaW1wb3J0IHsgaXNTaGFkb3dSb290IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29udGFpbnMocGFyZW50LCBjaGlsZCkge1xuICB2YXIgcm9vdE5vZGUgPSBjaGlsZC5nZXRSb290Tm9kZSAmJiBjaGlsZC5nZXRSb290Tm9kZSgpOyAvLyBGaXJzdCwgYXR0ZW1wdCB3aXRoIGZhc3RlciBuYXRpdmUgbWV0aG9kXG5cbiAgaWYgKHBhcmVudC5jb250YWlucyhjaGlsZCkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSAvLyB0aGVuIGZhbGxiYWNrIHRvIGN1c3RvbSBpbXBsZW1lbnRhdGlvbiB3aXRoIFNoYWRvdyBET00gc3VwcG9ydFxuICBlbHNlIGlmIChyb290Tm9kZSAmJiBpc1NoYWRvd1Jvb3Qocm9vdE5vZGUpKSB7XG4gICAgICB2YXIgbmV4dCA9IGNoaWxkO1xuXG4gICAgICBkbyB7XG4gICAgICAgIGlmIChuZXh0ICYmIHBhcmVudC5pc1NhbWVOb2RlKG5leHQpKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddOiBuZWVkIGEgYmV0dGVyIHdheSB0byBoYW5kbGUgdGhpcy4uLlxuXG5cbiAgICAgICAgbmV4dCA9IG5leHQucGFyZW50Tm9kZSB8fCBuZXh0Lmhvc3Q7XG4gICAgICB9IHdoaWxlIChuZXh0KTtcbiAgICB9IC8vIEdpdmUgdXAsIHRoZSByZXN1bHQgaXMgZmFsc2VcblxuXG4gIHJldHVybiBmYWxzZTtcbn0iLCJpbXBvcnQgZ2V0V2luZG93IGZyb20gXCIuL2dldFdpbmRvdy5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KSB7XG4gIHJldHVybiBnZXRXaW5kb3coZWxlbWVudCkuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcbn0iLCJpbXBvcnQgZ2V0Tm9kZU5hbWUgZnJvbSBcIi4vZ2V0Tm9kZU5hbWUuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzVGFibGVFbGVtZW50KGVsZW1lbnQpIHtcbiAgcmV0dXJuIFsndGFibGUnLCAndGQnLCAndGgnXS5pbmRleE9mKGdldE5vZGVOYW1lKGVsZW1lbnQpKSA+PSAwO1xufSIsImltcG9ydCB7IGlzRWxlbWVudCB9IGZyb20gXCIuL2luc3RhbmNlT2YuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KSB7XG4gIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXJldHVybl06IGFzc3VtZSBib2R5IGlzIGFsd2F5cyBhdmFpbGFibGVcbiAgcmV0dXJuICgoaXNFbGVtZW50KGVsZW1lbnQpID8gZWxlbWVudC5vd25lckRvY3VtZW50IDogLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG4gIGVsZW1lbnQuZG9jdW1lbnQpIHx8IHdpbmRvdy5kb2N1bWVudCkuZG9jdW1lbnRFbGVtZW50O1xufSIsImltcG9ydCBnZXROb2RlTmFtZSBmcm9tIFwiLi9nZXROb2RlTmFtZS5qc1wiO1xuaW1wb3J0IGdldERvY3VtZW50RWxlbWVudCBmcm9tIFwiLi9nZXREb2N1bWVudEVsZW1lbnQuanNcIjtcbmltcG9ydCB7IGlzU2hhZG93Um9vdCB9IGZyb20gXCIuL2luc3RhbmNlT2YuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFBhcmVudE5vZGUoZWxlbWVudCkge1xuICBpZiAoZ2V0Tm9kZU5hbWUoZWxlbWVudCkgPT09ICdodG1sJykge1xuICAgIHJldHVybiBlbGVtZW50O1xuICB9XG5cbiAgcmV0dXJuICgvLyB0aGlzIGlzIGEgcXVpY2tlciAoYnV0IGxlc3MgdHlwZSBzYWZlKSB3YXkgdG8gc2F2ZSBxdWl0ZSBzb21lIGJ5dGVzIGZyb20gdGhlIGJ1bmRsZVxuICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXJldHVybl1cbiAgICAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cbiAgICBlbGVtZW50LmFzc2lnbmVkU2xvdCB8fCAvLyBzdGVwIGludG8gdGhlIHNoYWRvdyBET00gb2YgdGhlIHBhcmVudCBvZiBhIHNsb3R0ZWQgbm9kZVxuICAgIGVsZW1lbnQucGFyZW50Tm9kZSB8fCAoIC8vIERPTSBFbGVtZW50IGRldGVjdGVkXG4gICAgaXNTaGFkb3dSb290KGVsZW1lbnQpID8gZWxlbWVudC5ob3N0IDogbnVsbCkgfHwgLy8gU2hhZG93Um9vdCBkZXRlY3RlZFxuICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLWNhbGxdOiBIVE1MRWxlbWVudCBpcyBhIE5vZGVcbiAgICBnZXREb2N1bWVudEVsZW1lbnQoZWxlbWVudCkgLy8gZmFsbGJhY2tcblxuICApO1xufSIsImltcG9ydCBnZXRXaW5kb3cgZnJvbSBcIi4vZ2V0V2luZG93LmpzXCI7XG5pbXBvcnQgZ2V0Tm9kZU5hbWUgZnJvbSBcIi4vZ2V0Tm9kZU5hbWUuanNcIjtcbmltcG9ydCBnZXRDb21wdXRlZFN0eWxlIGZyb20gXCIuL2dldENvbXB1dGVkU3R5bGUuanNcIjtcbmltcG9ydCB7IGlzSFRNTEVsZW1lbnQsIGlzU2hhZG93Um9vdCB9IGZyb20gXCIuL2luc3RhbmNlT2YuanNcIjtcbmltcG9ydCBpc1RhYmxlRWxlbWVudCBmcm9tIFwiLi9pc1RhYmxlRWxlbWVudC5qc1wiO1xuaW1wb3J0IGdldFBhcmVudE5vZGUgZnJvbSBcIi4vZ2V0UGFyZW50Tm9kZS5qc1wiO1xuaW1wb3J0IGdldFVBU3RyaW5nIGZyb20gXCIuLi91dGlscy91c2VyQWdlbnQuanNcIjtcblxuZnVuY3Rpb24gZ2V0VHJ1ZU9mZnNldFBhcmVudChlbGVtZW50KSB7XG4gIGlmICghaXNIVE1MRWxlbWVudChlbGVtZW50KSB8fCAvLyBodHRwczovL2dpdGh1Yi5jb20vcG9wcGVyanMvcG9wcGVyLWNvcmUvaXNzdWVzLzgzN1xuICBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpLnBvc2l0aW9uID09PSAnZml4ZWQnKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gZWxlbWVudC5vZmZzZXRQYXJlbnQ7XG59IC8vIGAub2Zmc2V0UGFyZW50YCByZXBvcnRzIGBudWxsYCBmb3IgZml4ZWQgZWxlbWVudHMsIHdoaWxlIGFic29sdXRlIGVsZW1lbnRzXG4vLyByZXR1cm4gdGhlIGNvbnRhaW5pbmcgYmxvY2tcblxuXG5mdW5jdGlvbiBnZXRDb250YWluaW5nQmxvY2soZWxlbWVudCkge1xuICB2YXIgaXNGaXJlZm94ID0gL2ZpcmVmb3gvaS50ZXN0KGdldFVBU3RyaW5nKCkpO1xuICB2YXIgaXNJRSA9IC9UcmlkZW50L2kudGVzdChnZXRVQVN0cmluZygpKTtcblxuICBpZiAoaXNJRSAmJiBpc0hUTUxFbGVtZW50KGVsZW1lbnQpKSB7XG4gICAgLy8gSW4gSUUgOSwgMTAgYW5kIDExIGZpeGVkIGVsZW1lbnRzIGNvbnRhaW5pbmcgYmxvY2sgaXMgYWx3YXlzIGVzdGFibGlzaGVkIGJ5IHRoZSB2aWV3cG9ydFxuICAgIHZhciBlbGVtZW50Q3NzID0gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcblxuICAgIGlmIChlbGVtZW50Q3NzLnBvc2l0aW9uID09PSAnZml4ZWQnKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICB2YXIgY3VycmVudE5vZGUgPSBnZXRQYXJlbnROb2RlKGVsZW1lbnQpO1xuXG4gIGlmIChpc1NoYWRvd1Jvb3QoY3VycmVudE5vZGUpKSB7XG4gICAgY3VycmVudE5vZGUgPSBjdXJyZW50Tm9kZS5ob3N0O1xuICB9XG5cbiAgd2hpbGUgKGlzSFRNTEVsZW1lbnQoY3VycmVudE5vZGUpICYmIFsnaHRtbCcsICdib2R5J10uaW5kZXhPZihnZXROb2RlTmFtZShjdXJyZW50Tm9kZSkpIDwgMCkge1xuICAgIHZhciBjc3MgPSBnZXRDb21wdXRlZFN0eWxlKGN1cnJlbnROb2RlKTsgLy8gVGhpcyBpcyBub24tZXhoYXVzdGl2ZSBidXQgY292ZXJzIHRoZSBtb3N0IGNvbW1vbiBDU1MgcHJvcGVydGllcyB0aGF0XG4gICAgLy8gY3JlYXRlIGEgY29udGFpbmluZyBibG9jay5cbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvQ29udGFpbmluZ19ibG9jayNpZGVudGlmeWluZ190aGVfY29udGFpbmluZ19ibG9ja1xuXG4gICAgaWYgKGNzcy50cmFuc2Zvcm0gIT09ICdub25lJyB8fCBjc3MucGVyc3BlY3RpdmUgIT09ICdub25lJyB8fCBjc3MuY29udGFpbiA9PT0gJ3BhaW50JyB8fCBbJ3RyYW5zZm9ybScsICdwZXJzcGVjdGl2ZSddLmluZGV4T2YoY3NzLndpbGxDaGFuZ2UpICE9PSAtMSB8fCBpc0ZpcmVmb3ggJiYgY3NzLndpbGxDaGFuZ2UgPT09ICdmaWx0ZXInIHx8IGlzRmlyZWZveCAmJiBjc3MuZmlsdGVyICYmIGNzcy5maWx0ZXIgIT09ICdub25lJykge1xuICAgICAgcmV0dXJuIGN1cnJlbnROb2RlO1xuICAgIH0gZWxzZSB7XG4gICAgICBjdXJyZW50Tm9kZSA9IGN1cnJlbnROb2RlLnBhcmVudE5vZGU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59IC8vIEdldHMgdGhlIGNsb3Nlc3QgYW5jZXN0b3IgcG9zaXRpb25lZCBlbGVtZW50LiBIYW5kbGVzIHNvbWUgZWRnZSBjYXNlcyxcbi8vIHN1Y2ggYXMgdGFibGUgYW5jZXN0b3JzIGFuZCBjcm9zcyBicm93c2VyIGJ1Z3MuXG5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0T2Zmc2V0UGFyZW50KGVsZW1lbnQpIHtcbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdyhlbGVtZW50KTtcbiAgdmFyIG9mZnNldFBhcmVudCA9IGdldFRydWVPZmZzZXRQYXJlbnQoZWxlbWVudCk7XG5cbiAgd2hpbGUgKG9mZnNldFBhcmVudCAmJiBpc1RhYmxlRWxlbWVudChvZmZzZXRQYXJlbnQpICYmIGdldENvbXB1dGVkU3R5bGUob2Zmc2V0UGFyZW50KS5wb3NpdGlvbiA9PT0gJ3N0YXRpYycpIHtcbiAgICBvZmZzZXRQYXJlbnQgPSBnZXRUcnVlT2Zmc2V0UGFyZW50KG9mZnNldFBhcmVudCk7XG4gIH1cblxuICBpZiAob2Zmc2V0UGFyZW50ICYmIChnZXROb2RlTmFtZShvZmZzZXRQYXJlbnQpID09PSAnaHRtbCcgfHwgZ2V0Tm9kZU5hbWUob2Zmc2V0UGFyZW50KSA9PT0gJ2JvZHknICYmIGdldENvbXB1dGVkU3R5bGUob2Zmc2V0UGFyZW50KS5wb3NpdGlvbiA9PT0gJ3N0YXRpYycpKSB7XG4gICAgcmV0dXJuIHdpbmRvdztcbiAgfVxuXG4gIHJldHVybiBvZmZzZXRQYXJlbnQgfHwgZ2V0Q29udGFpbmluZ0Jsb2NrKGVsZW1lbnQpIHx8IHdpbmRvdztcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQocGxhY2VtZW50KSB7XG4gIHJldHVybiBbJ3RvcCcsICdib3R0b20nXS5pbmRleE9mKHBsYWNlbWVudCkgPj0gMCA/ICd4JyA6ICd5Jztcbn0iLCJpbXBvcnQgeyBtYXggYXMgbWF0aE1heCwgbWluIGFzIG1hdGhNaW4gfSBmcm9tIFwiLi9tYXRoLmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gd2l0aGluKG1pbiwgdmFsdWUsIG1heCkge1xuICByZXR1cm4gbWF0aE1heChtaW4sIG1hdGhNaW4odmFsdWUsIG1heCkpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdpdGhpbk1heENsYW1wKG1pbiwgdmFsdWUsIG1heCkge1xuICB2YXIgdiA9IHdpdGhpbihtaW4sIHZhbHVlLCBtYXgpO1xuICByZXR1cm4gdiA+IG1heCA/IG1heCA6IHY7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0RnJlc2hTaWRlT2JqZWN0KCkge1xuICByZXR1cm4ge1xuICAgIHRvcDogMCxcbiAgICByaWdodDogMCxcbiAgICBib3R0b206IDAsXG4gICAgbGVmdDogMFxuICB9O1xufSIsImltcG9ydCBnZXRGcmVzaFNpZGVPYmplY3QgZnJvbSBcIi4vZ2V0RnJlc2hTaWRlT2JqZWN0LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtZXJnZVBhZGRpbmdPYmplY3QocGFkZGluZ09iamVjdCkge1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgZ2V0RnJlc2hTaWRlT2JqZWN0KCksIHBhZGRpbmdPYmplY3QpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGV4cGFuZFRvSGFzaE1hcCh2YWx1ZSwga2V5cykge1xuICByZXR1cm4ga2V5cy5yZWR1Y2UoZnVuY3Rpb24gKGhhc2hNYXAsIGtleSkge1xuICAgIGhhc2hNYXBba2V5XSA9IHZhbHVlO1xuICAgIHJldHVybiBoYXNoTWFwO1xuICB9LCB7fSk7XG59IiwiaW1wb3J0IGdldEJhc2VQbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2dldEJhc2VQbGFjZW1lbnQuanNcIjtcbmltcG9ydCBnZXRMYXlvdXRSZWN0IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0TGF5b3V0UmVjdC5qc1wiO1xuaW1wb3J0IGNvbnRhaW5zIGZyb20gXCIuLi9kb20tdXRpbHMvY29udGFpbnMuanNcIjtcbmltcG9ydCBnZXRPZmZzZXRQYXJlbnQgZnJvbSBcIi4uL2RvbS11dGlscy9nZXRPZmZzZXRQYXJlbnQuanNcIjtcbmltcG9ydCBnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2dldE1haW5BeGlzRnJvbVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IHsgd2l0aGluIH0gZnJvbSBcIi4uL3V0aWxzL3dpdGhpbi5qc1wiO1xuaW1wb3J0IG1lcmdlUGFkZGluZ09iamVjdCBmcm9tIFwiLi4vdXRpbHMvbWVyZ2VQYWRkaW5nT2JqZWN0LmpzXCI7XG5pbXBvcnQgZXhwYW5kVG9IYXNoTWFwIGZyb20gXCIuLi91dGlscy9leHBhbmRUb0hhc2hNYXAuanNcIjtcbmltcG9ydCB7IGxlZnQsIHJpZ2h0LCBiYXNlUGxhY2VtZW50cywgdG9wLCBib3R0b20gfSBmcm9tIFwiLi4vZW51bXMuanNcIjsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG52YXIgdG9QYWRkaW5nT2JqZWN0ID0gZnVuY3Rpb24gdG9QYWRkaW5nT2JqZWN0KHBhZGRpbmcsIHN0YXRlKSB7XG4gIHBhZGRpbmcgPSB0eXBlb2YgcGFkZGluZyA9PT0gJ2Z1bmN0aW9uJyA/IHBhZGRpbmcoT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUucmVjdHMsIHtcbiAgICBwbGFjZW1lbnQ6IHN0YXRlLnBsYWNlbWVudFxuICB9KSkgOiBwYWRkaW5nO1xuICByZXR1cm4gbWVyZ2VQYWRkaW5nT2JqZWN0KHR5cGVvZiBwYWRkaW5nICE9PSAnbnVtYmVyJyA/IHBhZGRpbmcgOiBleHBhbmRUb0hhc2hNYXAocGFkZGluZywgYmFzZVBsYWNlbWVudHMpKTtcbn07XG5cbmZ1bmN0aW9uIGFycm93KF9yZWYpIHtcbiAgdmFyIF9zdGF0ZSRtb2RpZmllcnNEYXRhJDtcblxuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgbmFtZSA9IF9yZWYubmFtZSxcbiAgICAgIG9wdGlvbnMgPSBfcmVmLm9wdGlvbnM7XG4gIHZhciBhcnJvd0VsZW1lbnQgPSBzdGF0ZS5lbGVtZW50cy5hcnJvdztcbiAgdmFyIHBvcHBlck9mZnNldHMgPSBzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHM7XG4gIHZhciBiYXNlUGxhY2VtZW50ID0gZ2V0QmFzZVBsYWNlbWVudChzdGF0ZS5wbGFjZW1lbnQpO1xuICB2YXIgYXhpcyA9IGdldE1haW5BeGlzRnJvbVBsYWNlbWVudChiYXNlUGxhY2VtZW50KTtcbiAgdmFyIGlzVmVydGljYWwgPSBbbGVmdCwgcmlnaHRdLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgPj0gMDtcbiAgdmFyIGxlbiA9IGlzVmVydGljYWwgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG5cbiAgaWYgKCFhcnJvd0VsZW1lbnQgfHwgIXBvcHBlck9mZnNldHMpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgcGFkZGluZ09iamVjdCA9IHRvUGFkZGluZ09iamVjdChvcHRpb25zLnBhZGRpbmcsIHN0YXRlKTtcbiAgdmFyIGFycm93UmVjdCA9IGdldExheW91dFJlY3QoYXJyb3dFbGVtZW50KTtcbiAgdmFyIG1pblByb3AgPSBheGlzID09PSAneScgPyB0b3AgOiBsZWZ0O1xuICB2YXIgbWF4UHJvcCA9IGF4aXMgPT09ICd5JyA/IGJvdHRvbSA6IHJpZ2h0O1xuICB2YXIgZW5kRGlmZiA9IHN0YXRlLnJlY3RzLnJlZmVyZW5jZVtsZW5dICsgc3RhdGUucmVjdHMucmVmZXJlbmNlW2F4aXNdIC0gcG9wcGVyT2Zmc2V0c1theGlzXSAtIHN0YXRlLnJlY3RzLnBvcHBlcltsZW5dO1xuICB2YXIgc3RhcnREaWZmID0gcG9wcGVyT2Zmc2V0c1theGlzXSAtIHN0YXRlLnJlY3RzLnJlZmVyZW5jZVtheGlzXTtcbiAgdmFyIGFycm93T2Zmc2V0UGFyZW50ID0gZ2V0T2Zmc2V0UGFyZW50KGFycm93RWxlbWVudCk7XG4gIHZhciBjbGllbnRTaXplID0gYXJyb3dPZmZzZXRQYXJlbnQgPyBheGlzID09PSAneScgPyBhcnJvd09mZnNldFBhcmVudC5jbGllbnRIZWlnaHQgfHwgMCA6IGFycm93T2Zmc2V0UGFyZW50LmNsaWVudFdpZHRoIHx8IDAgOiAwO1xuICB2YXIgY2VudGVyVG9SZWZlcmVuY2UgPSBlbmREaWZmIC8gMiAtIHN0YXJ0RGlmZiAvIDI7IC8vIE1ha2Ugc3VyZSB0aGUgYXJyb3cgZG9lc24ndCBvdmVyZmxvdyB0aGUgcG9wcGVyIGlmIHRoZSBjZW50ZXIgcG9pbnQgaXNcbiAgLy8gb3V0c2lkZSBvZiB0aGUgcG9wcGVyIGJvdW5kc1xuXG4gIHZhciBtaW4gPSBwYWRkaW5nT2JqZWN0W21pblByb3BdO1xuICB2YXIgbWF4ID0gY2xpZW50U2l6ZSAtIGFycm93UmVjdFtsZW5dIC0gcGFkZGluZ09iamVjdFttYXhQcm9wXTtcbiAgdmFyIGNlbnRlciA9IGNsaWVudFNpemUgLyAyIC0gYXJyb3dSZWN0W2xlbl0gLyAyICsgY2VudGVyVG9SZWZlcmVuY2U7XG4gIHZhciBvZmZzZXQgPSB3aXRoaW4obWluLCBjZW50ZXIsIG1heCk7IC8vIFByZXZlbnRzIGJyZWFraW5nIHN5bnRheCBoaWdobGlnaHRpbmcuLi5cblxuICB2YXIgYXhpc1Byb3AgPSBheGlzO1xuICBzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdID0gKF9zdGF0ZSRtb2RpZmllcnNEYXRhJCA9IHt9LCBfc3RhdGUkbW9kaWZpZXJzRGF0YSRbYXhpc1Byb3BdID0gb2Zmc2V0LCBfc3RhdGUkbW9kaWZpZXJzRGF0YSQuY2VudGVyT2Zmc2V0ID0gb2Zmc2V0IC0gY2VudGVyLCBfc3RhdGUkbW9kaWZpZXJzRGF0YSQpO1xufVxuXG5mdW5jdGlvbiBlZmZlY3QoX3JlZjIpIHtcbiAgdmFyIHN0YXRlID0gX3JlZjIuc3RhdGUsXG4gICAgICBvcHRpb25zID0gX3JlZjIub3B0aW9ucztcbiAgdmFyIF9vcHRpb25zJGVsZW1lbnQgPSBvcHRpb25zLmVsZW1lbnQsXG4gICAgICBhcnJvd0VsZW1lbnQgPSBfb3B0aW9ucyRlbGVtZW50ID09PSB2b2lkIDAgPyAnW2RhdGEtcG9wcGVyLWFycm93XScgOiBfb3B0aW9ucyRlbGVtZW50O1xuXG4gIGlmIChhcnJvd0VsZW1lbnQgPT0gbnVsbCkge1xuICAgIHJldHVybjtcbiAgfSAvLyBDU1Mgc2VsZWN0b3JcblxuXG4gIGlmICh0eXBlb2YgYXJyb3dFbGVtZW50ID09PSAnc3RyaW5nJykge1xuICAgIGFycm93RWxlbWVudCA9IHN0YXRlLmVsZW1lbnRzLnBvcHBlci5xdWVyeVNlbGVjdG9yKGFycm93RWxlbWVudCk7XG5cbiAgICBpZiAoIWFycm93RWxlbWVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIGlmICghY29udGFpbnMoc3RhdGUuZWxlbWVudHMucG9wcGVyLCBhcnJvd0VsZW1lbnQpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgc3RhdGUuZWxlbWVudHMuYXJyb3cgPSBhcnJvd0VsZW1lbnQ7XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdhcnJvdycsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnbWFpbicsXG4gIGZuOiBhcnJvdyxcbiAgZWZmZWN0OiBlZmZlY3QsXG4gIHJlcXVpcmVzOiBbJ3BvcHBlck9mZnNldHMnXSxcbiAgcmVxdWlyZXNJZkV4aXN0czogWydwcmV2ZW50T3ZlcmZsb3cnXVxufTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRWYXJpYXRpb24ocGxhY2VtZW50KSB7XG4gIHJldHVybiBwbGFjZW1lbnQuc3BsaXQoJy0nKVsxXTtcbn0iLCJpbXBvcnQgeyB0b3AsIGxlZnQsIHJpZ2h0LCBib3R0b20sIGVuZCB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuaW1wb3J0IGdldE9mZnNldFBhcmVudCBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldE9mZnNldFBhcmVudC5qc1wiO1xuaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldFdpbmRvdy5qc1wiO1xuaW1wb3J0IGdldERvY3VtZW50RWxlbWVudCBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldERvY3VtZW50RWxlbWVudC5qc1wiO1xuaW1wb3J0IGdldENvbXB1dGVkU3R5bGUgZnJvbSBcIi4uL2RvbS11dGlscy9nZXRDb21wdXRlZFN0eWxlLmpzXCI7XG5pbXBvcnQgZ2V0QmFzZVBsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvZ2V0QmFzZVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IGdldFZhcmlhdGlvbiBmcm9tIFwiLi4vdXRpbHMvZ2V0VmFyaWF0aW9uLmpzXCI7XG5pbXBvcnQgeyByb3VuZCB9IGZyb20gXCIuLi91dGlscy9tYXRoLmpzXCI7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxudmFyIHVuc2V0U2lkZXMgPSB7XG4gIHRvcDogJ2F1dG8nLFxuICByaWdodDogJ2F1dG8nLFxuICBib3R0b206ICdhdXRvJyxcbiAgbGVmdDogJ2F1dG8nXG59OyAvLyBSb3VuZCB0aGUgb2Zmc2V0cyB0byB0aGUgbmVhcmVzdCBzdWl0YWJsZSBzdWJwaXhlbCBiYXNlZCBvbiB0aGUgRFBSLlxuLy8gWm9vbWluZyBjYW4gY2hhbmdlIHRoZSBEUFIsIGJ1dCBpdCBzZWVtcyB0byByZXBvcnQgYSB2YWx1ZSB0aGF0IHdpbGxcbi8vIGNsZWFubHkgZGl2aWRlIHRoZSB2YWx1ZXMgaW50byB0aGUgYXBwcm9wcmlhdGUgc3VicGl4ZWxzLlxuXG5mdW5jdGlvbiByb3VuZE9mZnNldHNCeURQUihfcmVmLCB3aW4pIHtcbiAgdmFyIHggPSBfcmVmLngsXG4gICAgICB5ID0gX3JlZi55O1xuICB2YXIgZHByID0gd2luLmRldmljZVBpeGVsUmF0aW8gfHwgMTtcbiAgcmV0dXJuIHtcbiAgICB4OiByb3VuZCh4ICogZHByKSAvIGRwciB8fCAwLFxuICAgIHk6IHJvdW5kKHkgKiBkcHIpIC8gZHByIHx8IDBcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1hcFRvU3R5bGVzKF9yZWYyKSB7XG4gIHZhciBfT2JqZWN0JGFzc2lnbjI7XG5cbiAgdmFyIHBvcHBlciA9IF9yZWYyLnBvcHBlcixcbiAgICAgIHBvcHBlclJlY3QgPSBfcmVmMi5wb3BwZXJSZWN0LFxuICAgICAgcGxhY2VtZW50ID0gX3JlZjIucGxhY2VtZW50LFxuICAgICAgdmFyaWF0aW9uID0gX3JlZjIudmFyaWF0aW9uLFxuICAgICAgb2Zmc2V0cyA9IF9yZWYyLm9mZnNldHMsXG4gICAgICBwb3NpdGlvbiA9IF9yZWYyLnBvc2l0aW9uLFxuICAgICAgZ3B1QWNjZWxlcmF0aW9uID0gX3JlZjIuZ3B1QWNjZWxlcmF0aW9uLFxuICAgICAgYWRhcHRpdmUgPSBfcmVmMi5hZGFwdGl2ZSxcbiAgICAgIHJvdW5kT2Zmc2V0cyA9IF9yZWYyLnJvdW5kT2Zmc2V0cyxcbiAgICAgIGlzRml4ZWQgPSBfcmVmMi5pc0ZpeGVkO1xuICB2YXIgX29mZnNldHMkeCA9IG9mZnNldHMueCxcbiAgICAgIHggPSBfb2Zmc2V0cyR4ID09PSB2b2lkIDAgPyAwIDogX29mZnNldHMkeCxcbiAgICAgIF9vZmZzZXRzJHkgPSBvZmZzZXRzLnksXG4gICAgICB5ID0gX29mZnNldHMkeSA9PT0gdm9pZCAwID8gMCA6IF9vZmZzZXRzJHk7XG5cbiAgdmFyIF9yZWYzID0gdHlwZW9mIHJvdW5kT2Zmc2V0cyA9PT0gJ2Z1bmN0aW9uJyA/IHJvdW5kT2Zmc2V0cyh7XG4gICAgeDogeCxcbiAgICB5OiB5XG4gIH0pIDoge1xuICAgIHg6IHgsXG4gICAgeTogeVxuICB9O1xuXG4gIHggPSBfcmVmMy54O1xuICB5ID0gX3JlZjMueTtcbiAgdmFyIGhhc1ggPSBvZmZzZXRzLmhhc093blByb3BlcnR5KCd4Jyk7XG4gIHZhciBoYXNZID0gb2Zmc2V0cy5oYXNPd25Qcm9wZXJ0eSgneScpO1xuICB2YXIgc2lkZVggPSBsZWZ0O1xuICB2YXIgc2lkZVkgPSB0b3A7XG4gIHZhciB3aW4gPSB3aW5kb3c7XG5cbiAgaWYgKGFkYXB0aXZlKSB7XG4gICAgdmFyIG9mZnNldFBhcmVudCA9IGdldE9mZnNldFBhcmVudChwb3BwZXIpO1xuICAgIHZhciBoZWlnaHRQcm9wID0gJ2NsaWVudEhlaWdodCc7XG4gICAgdmFyIHdpZHRoUHJvcCA9ICdjbGllbnRXaWR0aCc7XG5cbiAgICBpZiAob2Zmc2V0UGFyZW50ID09PSBnZXRXaW5kb3cocG9wcGVyKSkge1xuICAgICAgb2Zmc2V0UGFyZW50ID0gZ2V0RG9jdW1lbnRFbGVtZW50KHBvcHBlcik7XG5cbiAgICAgIGlmIChnZXRDb21wdXRlZFN0eWxlKG9mZnNldFBhcmVudCkucG9zaXRpb24gIT09ICdzdGF0aWMnICYmIHBvc2l0aW9uID09PSAnYWJzb2x1dGUnKSB7XG4gICAgICAgIGhlaWdodFByb3AgPSAnc2Nyb2xsSGVpZ2h0JztcbiAgICAgICAgd2lkdGhQcm9wID0gJ3Njcm9sbFdpZHRoJztcbiAgICAgIH1cbiAgICB9IC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLWNhc3RdOiBmb3JjZSB0eXBlIHJlZmluZW1lbnQsIHdlIGNvbXBhcmUgb2Zmc2V0UGFyZW50IHdpdGggd2luZG93IGFib3ZlLCBidXQgRmxvdyBkb2Vzbid0IGRldGVjdCBpdFxuXG5cbiAgICBvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQ7XG5cbiAgICBpZiAocGxhY2VtZW50ID09PSB0b3AgfHwgKHBsYWNlbWVudCA9PT0gbGVmdCB8fCBwbGFjZW1lbnQgPT09IHJpZ2h0KSAmJiB2YXJpYXRpb24gPT09IGVuZCkge1xuICAgICAgc2lkZVkgPSBib3R0b207XG4gICAgICB2YXIgb2Zmc2V0WSA9IGlzRml4ZWQgJiYgb2Zmc2V0UGFyZW50ID09PSB3aW4gJiYgd2luLnZpc3VhbFZpZXdwb3J0ID8gd2luLnZpc3VhbFZpZXdwb3J0LmhlaWdodCA6IC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuICAgICAgb2Zmc2V0UGFyZW50W2hlaWdodFByb3BdO1xuICAgICAgeSAtPSBvZmZzZXRZIC0gcG9wcGVyUmVjdC5oZWlnaHQ7XG4gICAgICB5ICo9IGdwdUFjY2VsZXJhdGlvbiA/IDEgOiAtMTtcbiAgICB9XG5cbiAgICBpZiAocGxhY2VtZW50ID09PSBsZWZ0IHx8IChwbGFjZW1lbnQgPT09IHRvcCB8fCBwbGFjZW1lbnQgPT09IGJvdHRvbSkgJiYgdmFyaWF0aW9uID09PSBlbmQpIHtcbiAgICAgIHNpZGVYID0gcmlnaHQ7XG4gICAgICB2YXIgb2Zmc2V0WCA9IGlzRml4ZWQgJiYgb2Zmc2V0UGFyZW50ID09PSB3aW4gJiYgd2luLnZpc3VhbFZpZXdwb3J0ID8gd2luLnZpc3VhbFZpZXdwb3J0LndpZHRoIDogLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG4gICAgICBvZmZzZXRQYXJlbnRbd2lkdGhQcm9wXTtcbiAgICAgIHggLT0gb2Zmc2V0WCAtIHBvcHBlclJlY3Qud2lkdGg7XG4gICAgICB4ICo9IGdwdUFjY2VsZXJhdGlvbiA/IDEgOiAtMTtcbiAgICB9XG4gIH1cblxuICB2YXIgY29tbW9uU3R5bGVzID0gT2JqZWN0LmFzc2lnbih7XG4gICAgcG9zaXRpb246IHBvc2l0aW9uXG4gIH0sIGFkYXB0aXZlICYmIHVuc2V0U2lkZXMpO1xuXG4gIHZhciBfcmVmNCA9IHJvdW5kT2Zmc2V0cyA9PT0gdHJ1ZSA/IHJvdW5kT2Zmc2V0c0J5RFBSKHtcbiAgICB4OiB4LFxuICAgIHk6IHlcbiAgfSwgZ2V0V2luZG93KHBvcHBlcikpIDoge1xuICAgIHg6IHgsXG4gICAgeTogeVxuICB9O1xuXG4gIHggPSBfcmVmNC54O1xuICB5ID0gX3JlZjQueTtcblxuICBpZiAoZ3B1QWNjZWxlcmF0aW9uKSB7XG4gICAgdmFyIF9PYmplY3QkYXNzaWduO1xuXG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGNvbW1vblN0eWxlcywgKF9PYmplY3QkYXNzaWduID0ge30sIF9PYmplY3QkYXNzaWduW3NpZGVZXSA9IGhhc1kgPyAnMCcgOiAnJywgX09iamVjdCRhc3NpZ25bc2lkZVhdID0gaGFzWCA/ICcwJyA6ICcnLCBfT2JqZWN0JGFzc2lnbi50cmFuc2Zvcm0gPSAod2luLmRldmljZVBpeGVsUmF0aW8gfHwgMSkgPD0gMSA/IFwidHJhbnNsYXRlKFwiICsgeCArIFwicHgsIFwiICsgeSArIFwicHgpXCIgOiBcInRyYW5zbGF0ZTNkKFwiICsgeCArIFwicHgsIFwiICsgeSArIFwicHgsIDApXCIsIF9PYmplY3QkYXNzaWduKSk7XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgY29tbW9uU3R5bGVzLCAoX09iamVjdCRhc3NpZ24yID0ge30sIF9PYmplY3QkYXNzaWduMltzaWRlWV0gPSBoYXNZID8geSArIFwicHhcIiA6ICcnLCBfT2JqZWN0JGFzc2lnbjJbc2lkZVhdID0gaGFzWCA/IHggKyBcInB4XCIgOiAnJywgX09iamVjdCRhc3NpZ24yLnRyYW5zZm9ybSA9ICcnLCBfT2JqZWN0JGFzc2lnbjIpKTtcbn1cblxuZnVuY3Rpb24gY29tcHV0ZVN0eWxlcyhfcmVmNSkge1xuICB2YXIgc3RhdGUgPSBfcmVmNS5zdGF0ZSxcbiAgICAgIG9wdGlvbnMgPSBfcmVmNS5vcHRpb25zO1xuICB2YXIgX29wdGlvbnMkZ3B1QWNjZWxlcmF0ID0gb3B0aW9ucy5ncHVBY2NlbGVyYXRpb24sXG4gICAgICBncHVBY2NlbGVyYXRpb24gPSBfb3B0aW9ucyRncHVBY2NlbGVyYXQgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRncHVBY2NlbGVyYXQsXG4gICAgICBfb3B0aW9ucyRhZGFwdGl2ZSA9IG9wdGlvbnMuYWRhcHRpdmUsXG4gICAgICBhZGFwdGl2ZSA9IF9vcHRpb25zJGFkYXB0aXZlID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkYWRhcHRpdmUsXG4gICAgICBfb3B0aW9ucyRyb3VuZE9mZnNldHMgPSBvcHRpb25zLnJvdW5kT2Zmc2V0cyxcbiAgICAgIHJvdW5kT2Zmc2V0cyA9IF9vcHRpb25zJHJvdW5kT2Zmc2V0cyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJHJvdW5kT2Zmc2V0cztcbiAgdmFyIGNvbW1vblN0eWxlcyA9IHtcbiAgICBwbGFjZW1lbnQ6IGdldEJhc2VQbGFjZW1lbnQoc3RhdGUucGxhY2VtZW50KSxcbiAgICB2YXJpYXRpb246IGdldFZhcmlhdGlvbihzdGF0ZS5wbGFjZW1lbnQpLFxuICAgIHBvcHBlcjogc3RhdGUuZWxlbWVudHMucG9wcGVyLFxuICAgIHBvcHBlclJlY3Q6IHN0YXRlLnJlY3RzLnBvcHBlcixcbiAgICBncHVBY2NlbGVyYXRpb246IGdwdUFjY2VsZXJhdGlvbixcbiAgICBpc0ZpeGVkOiBzdGF0ZS5vcHRpb25zLnN0cmF0ZWd5ID09PSAnZml4ZWQnXG4gIH07XG5cbiAgaWYgKHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cyAhPSBudWxsKSB7XG4gICAgc3RhdGUuc3R5bGVzLnBvcHBlciA9IE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLnN0eWxlcy5wb3BwZXIsIG1hcFRvU3R5bGVzKE9iamVjdC5hc3NpZ24oe30sIGNvbW1vblN0eWxlcywge1xuICAgICAgb2Zmc2V0czogc3RhdGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzLFxuICAgICAgcG9zaXRpb246IHN0YXRlLm9wdGlvbnMuc3RyYXRlZ3ksXG4gICAgICBhZGFwdGl2ZTogYWRhcHRpdmUsXG4gICAgICByb3VuZE9mZnNldHM6IHJvdW5kT2Zmc2V0c1xuICAgIH0pKSk7XG4gIH1cblxuICBpZiAoc3RhdGUubW9kaWZpZXJzRGF0YS5hcnJvdyAhPSBudWxsKSB7XG4gICAgc3RhdGUuc3R5bGVzLmFycm93ID0gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUuc3R5bGVzLmFycm93LCBtYXBUb1N0eWxlcyhPYmplY3QuYXNzaWduKHt9LCBjb21tb25TdHlsZXMsIHtcbiAgICAgIG9mZnNldHM6IHN0YXRlLm1vZGlmaWVyc0RhdGEuYXJyb3csXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIGFkYXB0aXZlOiBmYWxzZSxcbiAgICAgIHJvdW5kT2Zmc2V0czogcm91bmRPZmZzZXRzXG4gICAgfSkpKTtcbiAgfVxuXG4gIHN0YXRlLmF0dHJpYnV0ZXMucG9wcGVyID0gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUuYXR0cmlidXRlcy5wb3BwZXIsIHtcbiAgICAnZGF0YS1wb3BwZXItcGxhY2VtZW50Jzogc3RhdGUucGxhY2VtZW50XG4gIH0pO1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnY29tcHV0ZVN0eWxlcycsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnYmVmb3JlV3JpdGUnLFxuICBmbjogY29tcHV0ZVN0eWxlcyxcbiAgZGF0YToge31cbn07IiwiaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldFdpbmRvdy5qc1wiOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbnZhciBwYXNzaXZlID0ge1xuICBwYXNzaXZlOiB0cnVlXG59O1xuXG5mdW5jdGlvbiBlZmZlY3QoX3JlZikge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgaW5zdGFuY2UgPSBfcmVmLmluc3RhbmNlLFxuICAgICAgb3B0aW9ucyA9IF9yZWYub3B0aW9ucztcbiAgdmFyIF9vcHRpb25zJHNjcm9sbCA9IG9wdGlvbnMuc2Nyb2xsLFxuICAgICAgc2Nyb2xsID0gX29wdGlvbnMkc2Nyb2xsID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkc2Nyb2xsLFxuICAgICAgX29wdGlvbnMkcmVzaXplID0gb3B0aW9ucy5yZXNpemUsXG4gICAgICByZXNpemUgPSBfb3B0aW9ucyRyZXNpemUgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRyZXNpemU7XG4gIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coc3RhdGUuZWxlbWVudHMucG9wcGVyKTtcbiAgdmFyIHNjcm9sbFBhcmVudHMgPSBbXS5jb25jYXQoc3RhdGUuc2Nyb2xsUGFyZW50cy5yZWZlcmVuY2UsIHN0YXRlLnNjcm9sbFBhcmVudHMucG9wcGVyKTtcblxuICBpZiAoc2Nyb2xsKSB7XG4gICAgc2Nyb2xsUGFyZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChzY3JvbGxQYXJlbnQpIHtcbiAgICAgIHNjcm9sbFBhcmVudC5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBpbnN0YW5jZS51cGRhdGUsIHBhc3NpdmUpO1xuICAgIH0pO1xuICB9XG5cbiAgaWYgKHJlc2l6ZSkge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBpbnN0YW5jZS51cGRhdGUsIHBhc3NpdmUpO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoc2Nyb2xsKSB7XG4gICAgICBzY3JvbGxQYXJlbnRzLmZvckVhY2goZnVuY3Rpb24gKHNjcm9sbFBhcmVudCkge1xuICAgICAgICBzY3JvbGxQYXJlbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgaW5zdGFuY2UudXBkYXRlLCBwYXNzaXZlKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChyZXNpemUpIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBpbnN0YW5jZS51cGRhdGUsIHBhc3NpdmUpO1xuICAgIH1cbiAgfTtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ2V2ZW50TGlzdGVuZXJzJyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICd3cml0ZScsXG4gIGZuOiBmdW5jdGlvbiBmbigpIHt9LFxuICBlZmZlY3Q6IGVmZmVjdCxcbiAgZGF0YToge31cbn07IiwidmFyIGhhc2ggPSB7XG4gIGxlZnQ6ICdyaWdodCcsXG4gIHJpZ2h0OiAnbGVmdCcsXG4gIGJvdHRvbTogJ3RvcCcsXG4gIHRvcDogJ2JvdHRvbSdcbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIHBsYWNlbWVudC5yZXBsYWNlKC9sZWZ0fHJpZ2h0fGJvdHRvbXx0b3AvZywgZnVuY3Rpb24gKG1hdGNoZWQpIHtcbiAgICByZXR1cm4gaGFzaFttYXRjaGVkXTtcbiAgfSk7XG59IiwidmFyIGhhc2ggPSB7XG4gIHN0YXJ0OiAnZW5kJyxcbiAgZW5kOiAnc3RhcnQnXG59O1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0T3Bwb3NpdGVWYXJpYXRpb25QbGFjZW1lbnQocGxhY2VtZW50KSB7XG4gIHJldHVybiBwbGFjZW1lbnQucmVwbGFjZSgvc3RhcnR8ZW5kL2csIGZ1bmN0aW9uIChtYXRjaGVkKSB7XG4gICAgcmV0dXJuIGhhc2hbbWF0Y2hlZF07XG4gIH0pO1xufSIsImltcG9ydCBnZXRXaW5kb3cgZnJvbSBcIi4vZ2V0V2luZG93LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRXaW5kb3dTY3JvbGwobm9kZSkge1xuICB2YXIgd2luID0gZ2V0V2luZG93KG5vZGUpO1xuICB2YXIgc2Nyb2xsTGVmdCA9IHdpbi5wYWdlWE9mZnNldDtcbiAgdmFyIHNjcm9sbFRvcCA9IHdpbi5wYWdlWU9mZnNldDtcbiAgcmV0dXJuIHtcbiAgICBzY3JvbGxMZWZ0OiBzY3JvbGxMZWZ0LFxuICAgIHNjcm9sbFRvcDogc2Nyb2xsVG9wXG4gIH07XG59IiwiaW1wb3J0IGdldEJvdW5kaW5nQ2xpZW50UmVjdCBmcm9tIFwiLi9nZXRCb3VuZGluZ0NsaWVudFJlY3QuanNcIjtcbmltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSBcIi4vZ2V0RG9jdW1lbnRFbGVtZW50LmpzXCI7XG5pbXBvcnQgZ2V0V2luZG93U2Nyb2xsIGZyb20gXCIuL2dldFdpbmRvd1Njcm9sbC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0V2luZG93U2Nyb2xsQmFyWChlbGVtZW50KSB7XG4gIC8vIElmIDxodG1sPiBoYXMgYSBDU1Mgd2lkdGggZ3JlYXRlciB0aGFuIHRoZSB2aWV3cG9ydCwgdGhlbiB0aGlzIHdpbGwgYmVcbiAgLy8gaW5jb3JyZWN0IGZvciBSVEwuXG4gIC8vIFBvcHBlciAxIGlzIGJyb2tlbiBpbiB0aGlzIGNhc2UgYW5kIG5ldmVyIGhhZCBhIGJ1ZyByZXBvcnQgc28gbGV0J3MgYXNzdW1lXG4gIC8vIGl0J3Mgbm90IGFuIGlzc3VlLiBJIGRvbid0IHRoaW5rIGFueW9uZSBldmVyIHNwZWNpZmllcyB3aWR0aCBvbiA8aHRtbD5cbiAgLy8gYW55d2F5LlxuICAvLyBCcm93c2VycyB3aGVyZSB0aGUgbGVmdCBzY3JvbGxiYXIgZG9lc24ndCBjYXVzZSBhbiBpc3N1ZSByZXBvcnQgYDBgIGZvclxuICAvLyB0aGlzIChlLmcuIEVkZ2UgMjAxOSwgSUUxMSwgU2FmYXJpKVxuICByZXR1cm4gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KSkubGVmdCArIGdldFdpbmRvd1Njcm9sbChlbGVtZW50KS5zY3JvbGxMZWZ0O1xufSIsImltcG9ydCBnZXRXaW5kb3cgZnJvbSBcIi4vZ2V0V2luZG93LmpzXCI7XG5pbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gXCIuL2dldERvY3VtZW50RWxlbWVudC5qc1wiO1xuaW1wb3J0IGdldFdpbmRvd1Njcm9sbEJhclggZnJvbSBcIi4vZ2V0V2luZG93U2Nyb2xsQmFyWC5qc1wiO1xuaW1wb3J0IGlzTGF5b3V0Vmlld3BvcnQgZnJvbSBcIi4vaXNMYXlvdXRWaWV3cG9ydC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Vmlld3BvcnRSZWN0KGVsZW1lbnQsIHN0cmF0ZWd5KSB7XG4gIHZhciB3aW4gPSBnZXRXaW5kb3coZWxlbWVudCk7XG4gIHZhciBodG1sID0gZ2V0RG9jdW1lbnRFbGVtZW50KGVsZW1lbnQpO1xuICB2YXIgdmlzdWFsVmlld3BvcnQgPSB3aW4udmlzdWFsVmlld3BvcnQ7XG4gIHZhciB3aWR0aCA9IGh0bWwuY2xpZW50V2lkdGg7XG4gIHZhciBoZWlnaHQgPSBodG1sLmNsaWVudEhlaWdodDtcbiAgdmFyIHggPSAwO1xuICB2YXIgeSA9IDA7XG5cbiAgaWYgKHZpc3VhbFZpZXdwb3J0KSB7XG4gICAgd2lkdGggPSB2aXN1YWxWaWV3cG9ydC53aWR0aDtcbiAgICBoZWlnaHQgPSB2aXN1YWxWaWV3cG9ydC5oZWlnaHQ7XG4gICAgdmFyIGxheW91dFZpZXdwb3J0ID0gaXNMYXlvdXRWaWV3cG9ydCgpO1xuXG4gICAgaWYgKGxheW91dFZpZXdwb3J0IHx8ICFsYXlvdXRWaWV3cG9ydCAmJiBzdHJhdGVneSA9PT0gJ2ZpeGVkJykge1xuICAgICAgeCA9IHZpc3VhbFZpZXdwb3J0Lm9mZnNldExlZnQ7XG4gICAgICB5ID0gdmlzdWFsVmlld3BvcnQub2Zmc2V0VG9wO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgd2lkdGg6IHdpZHRoLFxuICAgIGhlaWdodDogaGVpZ2h0LFxuICAgIHg6IHggKyBnZXRXaW5kb3dTY3JvbGxCYXJYKGVsZW1lbnQpLFxuICAgIHk6IHlcbiAgfTtcbn0iLCJpbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gXCIuL2dldERvY3VtZW50RWxlbWVudC5qc1wiO1xuaW1wb3J0IGdldENvbXB1dGVkU3R5bGUgZnJvbSBcIi4vZ2V0Q29tcHV0ZWRTdHlsZS5qc1wiO1xuaW1wb3J0IGdldFdpbmRvd1Njcm9sbEJhclggZnJvbSBcIi4vZ2V0V2luZG93U2Nyb2xsQmFyWC5qc1wiO1xuaW1wb3J0IGdldFdpbmRvd1Njcm9sbCBmcm9tIFwiLi9nZXRXaW5kb3dTY3JvbGwuanNcIjtcbmltcG9ydCB7IG1heCB9IGZyb20gXCIuLi91dGlscy9tYXRoLmpzXCI7IC8vIEdldHMgdGhlIGVudGlyZSBzaXplIG9mIHRoZSBzY3JvbGxhYmxlIGRvY3VtZW50IGFyZWEsIGV2ZW4gZXh0ZW5kaW5nIG91dHNpZGVcbi8vIG9mIHRoZSBgPGh0bWw+YCBhbmQgYDxib2R5PmAgcmVjdCBib3VuZHMgaWYgaG9yaXpvbnRhbGx5IHNjcm9sbGFibGVcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0RG9jdW1lbnRSZWN0KGVsZW1lbnQpIHtcbiAgdmFyIF9lbGVtZW50JG93bmVyRG9jdW1lbjtcblxuICB2YXIgaHRtbCA9IGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KTtcbiAgdmFyIHdpblNjcm9sbCA9IGdldFdpbmRvd1Njcm9sbChlbGVtZW50KTtcbiAgdmFyIGJvZHkgPSAoX2VsZW1lbnQkb3duZXJEb2N1bWVuID0gZWxlbWVudC5vd25lckRvY3VtZW50KSA9PSBudWxsID8gdm9pZCAwIDogX2VsZW1lbnQkb3duZXJEb2N1bWVuLmJvZHk7XG4gIHZhciB3aWR0aCA9IG1heChodG1sLnNjcm9sbFdpZHRoLCBodG1sLmNsaWVudFdpZHRoLCBib2R5ID8gYm9keS5zY3JvbGxXaWR0aCA6IDAsIGJvZHkgPyBib2R5LmNsaWVudFdpZHRoIDogMCk7XG4gIHZhciBoZWlnaHQgPSBtYXgoaHRtbC5zY3JvbGxIZWlnaHQsIGh0bWwuY2xpZW50SGVpZ2h0LCBib2R5ID8gYm9keS5zY3JvbGxIZWlnaHQgOiAwLCBib2R5ID8gYm9keS5jbGllbnRIZWlnaHQgOiAwKTtcbiAgdmFyIHggPSAtd2luU2Nyb2xsLnNjcm9sbExlZnQgKyBnZXRXaW5kb3dTY3JvbGxCYXJYKGVsZW1lbnQpO1xuICB2YXIgeSA9IC13aW5TY3JvbGwuc2Nyb2xsVG9wO1xuXG4gIGlmIChnZXRDb21wdXRlZFN0eWxlKGJvZHkgfHwgaHRtbCkuZGlyZWN0aW9uID09PSAncnRsJykge1xuICAgIHggKz0gbWF4KGh0bWwuY2xpZW50V2lkdGgsIGJvZHkgPyBib2R5LmNsaWVudFdpZHRoIDogMCkgLSB3aWR0aDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgd2lkdGg6IHdpZHRoLFxuICAgIGhlaWdodDogaGVpZ2h0LFxuICAgIHg6IHgsXG4gICAgeTogeVxuICB9O1xufSIsImltcG9ydCBnZXRDb21wdXRlZFN0eWxlIGZyb20gXCIuL2dldENvbXB1dGVkU3R5bGUuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzU2Nyb2xsUGFyZW50KGVsZW1lbnQpIHtcbiAgLy8gRmlyZWZveCB3YW50cyB1cyB0byBjaGVjayBgLXhgIGFuZCBgLXlgIHZhcmlhdGlvbnMgYXMgd2VsbFxuICB2YXIgX2dldENvbXB1dGVkU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpLFxuICAgICAgb3ZlcmZsb3cgPSBfZ2V0Q29tcHV0ZWRTdHlsZS5vdmVyZmxvdyxcbiAgICAgIG92ZXJmbG93WCA9IF9nZXRDb21wdXRlZFN0eWxlLm92ZXJmbG93WCxcbiAgICAgIG92ZXJmbG93WSA9IF9nZXRDb21wdXRlZFN0eWxlLm92ZXJmbG93WTtcblxuICByZXR1cm4gL2F1dG98c2Nyb2xsfG92ZXJsYXl8aGlkZGVuLy50ZXN0KG92ZXJmbG93ICsgb3ZlcmZsb3dZICsgb3ZlcmZsb3dYKTtcbn0iLCJpbXBvcnQgZ2V0UGFyZW50Tm9kZSBmcm9tIFwiLi9nZXRQYXJlbnROb2RlLmpzXCI7XG5pbXBvcnQgaXNTY3JvbGxQYXJlbnQgZnJvbSBcIi4vaXNTY3JvbGxQYXJlbnQuanNcIjtcbmltcG9ydCBnZXROb2RlTmFtZSBmcm9tIFwiLi9nZXROb2RlTmFtZS5qc1wiO1xuaW1wb3J0IHsgaXNIVE1MRWxlbWVudCB9IGZyb20gXCIuL2luc3RhbmNlT2YuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFNjcm9sbFBhcmVudChub2RlKSB7XG4gIGlmIChbJ2h0bWwnLCAnYm9keScsICcjZG9jdW1lbnQnXS5pbmRleE9mKGdldE5vZGVOYW1lKG5vZGUpKSA+PSAwKSB7XG4gICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtcmV0dXJuXTogYXNzdW1lIGJvZHkgaXMgYWx3YXlzIGF2YWlsYWJsZVxuICAgIHJldHVybiBub2RlLm93bmVyRG9jdW1lbnQuYm9keTtcbiAgfVxuXG4gIGlmIChpc0hUTUxFbGVtZW50KG5vZGUpICYmIGlzU2Nyb2xsUGFyZW50KG5vZGUpKSB7XG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cblxuICByZXR1cm4gZ2V0U2Nyb2xsUGFyZW50KGdldFBhcmVudE5vZGUobm9kZSkpO1xufSIsImltcG9ydCBnZXRTY3JvbGxQYXJlbnQgZnJvbSBcIi4vZ2V0U2Nyb2xsUGFyZW50LmpzXCI7XG5pbXBvcnQgZ2V0UGFyZW50Tm9kZSBmcm9tIFwiLi9nZXRQYXJlbnROb2RlLmpzXCI7XG5pbXBvcnQgZ2V0V2luZG93IGZyb20gXCIuL2dldFdpbmRvdy5qc1wiO1xuaW1wb3J0IGlzU2Nyb2xsUGFyZW50IGZyb20gXCIuL2lzU2Nyb2xsUGFyZW50LmpzXCI7XG4vKlxuZ2l2ZW4gYSBET00gZWxlbWVudCwgcmV0dXJuIHRoZSBsaXN0IG9mIGFsbCBzY3JvbGwgcGFyZW50cywgdXAgdGhlIGxpc3Qgb2YgYW5jZXNvcnNcbnVudGlsIHdlIGdldCB0byB0aGUgdG9wIHdpbmRvdyBvYmplY3QuIFRoaXMgbGlzdCBpcyB3aGF0IHdlIGF0dGFjaCBzY3JvbGwgbGlzdGVuZXJzXG50bywgYmVjYXVzZSBpZiBhbnkgb2YgdGhlc2UgcGFyZW50IGVsZW1lbnRzIHNjcm9sbCwgd2UnbGwgbmVlZCB0byByZS1jYWxjdWxhdGUgdGhlXG5yZWZlcmVuY2UgZWxlbWVudCdzIHBvc2l0aW9uLlxuKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbGlzdFNjcm9sbFBhcmVudHMoZWxlbWVudCwgbGlzdCkge1xuICB2YXIgX2VsZW1lbnQkb3duZXJEb2N1bWVuO1xuXG4gIGlmIChsaXN0ID09PSB2b2lkIDApIHtcbiAgICBsaXN0ID0gW107XG4gIH1cblxuICB2YXIgc2Nyb2xsUGFyZW50ID0gZ2V0U2Nyb2xsUGFyZW50KGVsZW1lbnQpO1xuICB2YXIgaXNCb2R5ID0gc2Nyb2xsUGFyZW50ID09PSAoKF9lbGVtZW50JG93bmVyRG9jdW1lbiA9IGVsZW1lbnQub3duZXJEb2N1bWVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9lbGVtZW50JG93bmVyRG9jdW1lbi5ib2R5KTtcbiAgdmFyIHdpbiA9IGdldFdpbmRvdyhzY3JvbGxQYXJlbnQpO1xuICB2YXIgdGFyZ2V0ID0gaXNCb2R5ID8gW3dpbl0uY29uY2F0KHdpbi52aXN1YWxWaWV3cG9ydCB8fCBbXSwgaXNTY3JvbGxQYXJlbnQoc2Nyb2xsUGFyZW50KSA/IHNjcm9sbFBhcmVudCA6IFtdKSA6IHNjcm9sbFBhcmVudDtcbiAgdmFyIHVwZGF0ZWRMaXN0ID0gbGlzdC5jb25jYXQodGFyZ2V0KTtcbiAgcmV0dXJuIGlzQm9keSA/IHVwZGF0ZWRMaXN0IDogLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtY2FsbF06IGlzQm9keSB0ZWxscyB1cyB0YXJnZXQgd2lsbCBiZSBhbiBIVE1MRWxlbWVudCBoZXJlXG4gIHVwZGF0ZWRMaXN0LmNvbmNhdChsaXN0U2Nyb2xsUGFyZW50cyhnZXRQYXJlbnROb2RlKHRhcmdldCkpKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZWN0VG9DbGllbnRSZWN0KHJlY3QpIHtcbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHJlY3QsIHtcbiAgICBsZWZ0OiByZWN0LngsXG4gICAgdG9wOiByZWN0LnksXG4gICAgcmlnaHQ6IHJlY3QueCArIHJlY3Qud2lkdGgsXG4gICAgYm90dG9tOiByZWN0LnkgKyByZWN0LmhlaWdodFxuICB9KTtcbn0iLCJpbXBvcnQgeyB2aWV3cG9ydCB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuaW1wb3J0IGdldFZpZXdwb3J0UmVjdCBmcm9tIFwiLi9nZXRWaWV3cG9ydFJlY3QuanNcIjtcbmltcG9ydCBnZXREb2N1bWVudFJlY3QgZnJvbSBcIi4vZ2V0RG9jdW1lbnRSZWN0LmpzXCI7XG5pbXBvcnQgbGlzdFNjcm9sbFBhcmVudHMgZnJvbSBcIi4vbGlzdFNjcm9sbFBhcmVudHMuanNcIjtcbmltcG9ydCBnZXRPZmZzZXRQYXJlbnQgZnJvbSBcIi4vZ2V0T2Zmc2V0UGFyZW50LmpzXCI7XG5pbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gXCIuL2dldERvY3VtZW50RWxlbWVudC5qc1wiO1xuaW1wb3J0IGdldENvbXB1dGVkU3R5bGUgZnJvbSBcIi4vZ2V0Q29tcHV0ZWRTdHlsZS5qc1wiO1xuaW1wb3J0IHsgaXNFbGVtZW50LCBpc0hUTUxFbGVtZW50IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuaW1wb3J0IGdldEJvdW5kaW5nQ2xpZW50UmVjdCBmcm9tIFwiLi9nZXRCb3VuZGluZ0NsaWVudFJlY3QuanNcIjtcbmltcG9ydCBnZXRQYXJlbnROb2RlIGZyb20gXCIuL2dldFBhcmVudE5vZGUuanNcIjtcbmltcG9ydCBjb250YWlucyBmcm9tIFwiLi9jb250YWlucy5qc1wiO1xuaW1wb3J0IGdldE5vZGVOYW1lIGZyb20gXCIuL2dldE5vZGVOYW1lLmpzXCI7XG5pbXBvcnQgcmVjdFRvQ2xpZW50UmVjdCBmcm9tIFwiLi4vdXRpbHMvcmVjdFRvQ2xpZW50UmVjdC5qc1wiO1xuaW1wb3J0IHsgbWF4LCBtaW4gfSBmcm9tIFwiLi4vdXRpbHMvbWF0aC5qc1wiO1xuXG5mdW5jdGlvbiBnZXRJbm5lckJvdW5kaW5nQ2xpZW50UmVjdChlbGVtZW50LCBzdHJhdGVneSkge1xuICB2YXIgcmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChlbGVtZW50LCBmYWxzZSwgc3RyYXRlZ3kgPT09ICdmaXhlZCcpO1xuICByZWN0LnRvcCA9IHJlY3QudG9wICsgZWxlbWVudC5jbGllbnRUb3A7XG4gIHJlY3QubGVmdCA9IHJlY3QubGVmdCArIGVsZW1lbnQuY2xpZW50TGVmdDtcbiAgcmVjdC5ib3R0b20gPSByZWN0LnRvcCArIGVsZW1lbnQuY2xpZW50SGVpZ2h0O1xuICByZWN0LnJpZ2h0ID0gcmVjdC5sZWZ0ICsgZWxlbWVudC5jbGllbnRXaWR0aDtcbiAgcmVjdC53aWR0aCA9IGVsZW1lbnQuY2xpZW50V2lkdGg7XG4gIHJlY3QuaGVpZ2h0ID0gZWxlbWVudC5jbGllbnRIZWlnaHQ7XG4gIHJlY3QueCA9IHJlY3QubGVmdDtcbiAgcmVjdC55ID0gcmVjdC50b3A7XG4gIHJldHVybiByZWN0O1xufVxuXG5mdW5jdGlvbiBnZXRDbGllbnRSZWN0RnJvbU1peGVkVHlwZShlbGVtZW50LCBjbGlwcGluZ1BhcmVudCwgc3RyYXRlZ3kpIHtcbiAgcmV0dXJuIGNsaXBwaW5nUGFyZW50ID09PSB2aWV3cG9ydCA/IHJlY3RUb0NsaWVudFJlY3QoZ2V0Vmlld3BvcnRSZWN0KGVsZW1lbnQsIHN0cmF0ZWd5KSkgOiBpc0VsZW1lbnQoY2xpcHBpbmdQYXJlbnQpID8gZ2V0SW5uZXJCb3VuZGluZ0NsaWVudFJlY3QoY2xpcHBpbmdQYXJlbnQsIHN0cmF0ZWd5KSA6IHJlY3RUb0NsaWVudFJlY3QoZ2V0RG9jdW1lbnRSZWN0KGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KSkpO1xufSAvLyBBIFwiY2xpcHBpbmcgcGFyZW50XCIgaXMgYW4gb3ZlcmZsb3dhYmxlIGNvbnRhaW5lciB3aXRoIHRoZSBjaGFyYWN0ZXJpc3RpYyBvZlxuLy8gY2xpcHBpbmcgKG9yIGhpZGluZykgb3ZlcmZsb3dpbmcgZWxlbWVudHMgd2l0aCBhIHBvc2l0aW9uIGRpZmZlcmVudCBmcm9tXG4vLyBgaW5pdGlhbGBcblxuXG5mdW5jdGlvbiBnZXRDbGlwcGluZ1BhcmVudHMoZWxlbWVudCkge1xuICB2YXIgY2xpcHBpbmdQYXJlbnRzID0gbGlzdFNjcm9sbFBhcmVudHMoZ2V0UGFyZW50Tm9kZShlbGVtZW50KSk7XG4gIHZhciBjYW5Fc2NhcGVDbGlwcGluZyA9IFsnYWJzb2x1dGUnLCAnZml4ZWQnXS5pbmRleE9mKGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkucG9zaXRpb24pID49IDA7XG4gIHZhciBjbGlwcGVyRWxlbWVudCA9IGNhbkVzY2FwZUNsaXBwaW5nICYmIGlzSFRNTEVsZW1lbnQoZWxlbWVudCkgPyBnZXRPZmZzZXRQYXJlbnQoZWxlbWVudCkgOiBlbGVtZW50O1xuXG4gIGlmICghaXNFbGVtZW50KGNsaXBwZXJFbGVtZW50KSkge1xuICAgIHJldHVybiBbXTtcbiAgfSAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1yZXR1cm5dOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmxvdy9pc3N1ZXMvMTQxNFxuXG5cbiAgcmV0dXJuIGNsaXBwaW5nUGFyZW50cy5maWx0ZXIoZnVuY3Rpb24gKGNsaXBwaW5nUGFyZW50KSB7XG4gICAgcmV0dXJuIGlzRWxlbWVudChjbGlwcGluZ1BhcmVudCkgJiYgY29udGFpbnMoY2xpcHBpbmdQYXJlbnQsIGNsaXBwZXJFbGVtZW50KSAmJiBnZXROb2RlTmFtZShjbGlwcGluZ1BhcmVudCkgIT09ICdib2R5JztcbiAgfSk7XG59IC8vIEdldHMgdGhlIG1heGltdW0gYXJlYSB0aGF0IHRoZSBlbGVtZW50IGlzIHZpc2libGUgaW4gZHVlIHRvIGFueSBudW1iZXIgb2Zcbi8vIGNsaXBwaW5nIHBhcmVudHNcblxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRDbGlwcGluZ1JlY3QoZWxlbWVudCwgYm91bmRhcnksIHJvb3RCb3VuZGFyeSwgc3RyYXRlZ3kpIHtcbiAgdmFyIG1haW5DbGlwcGluZ1BhcmVudHMgPSBib3VuZGFyeSA9PT0gJ2NsaXBwaW5nUGFyZW50cycgPyBnZXRDbGlwcGluZ1BhcmVudHMoZWxlbWVudCkgOiBbXS5jb25jYXQoYm91bmRhcnkpO1xuICB2YXIgY2xpcHBpbmdQYXJlbnRzID0gW10uY29uY2F0KG1haW5DbGlwcGluZ1BhcmVudHMsIFtyb290Qm91bmRhcnldKTtcbiAgdmFyIGZpcnN0Q2xpcHBpbmdQYXJlbnQgPSBjbGlwcGluZ1BhcmVudHNbMF07XG4gIHZhciBjbGlwcGluZ1JlY3QgPSBjbGlwcGluZ1BhcmVudHMucmVkdWNlKGZ1bmN0aW9uIChhY2NSZWN0LCBjbGlwcGluZ1BhcmVudCkge1xuICAgIHZhciByZWN0ID0gZ2V0Q2xpZW50UmVjdEZyb21NaXhlZFR5cGUoZWxlbWVudCwgY2xpcHBpbmdQYXJlbnQsIHN0cmF0ZWd5KTtcbiAgICBhY2NSZWN0LnRvcCA9IG1heChyZWN0LnRvcCwgYWNjUmVjdC50b3ApO1xuICAgIGFjY1JlY3QucmlnaHQgPSBtaW4ocmVjdC5yaWdodCwgYWNjUmVjdC5yaWdodCk7XG4gICAgYWNjUmVjdC5ib3R0b20gPSBtaW4ocmVjdC5ib3R0b20sIGFjY1JlY3QuYm90dG9tKTtcbiAgICBhY2NSZWN0LmxlZnQgPSBtYXgocmVjdC5sZWZ0LCBhY2NSZWN0LmxlZnQpO1xuICAgIHJldHVybiBhY2NSZWN0O1xuICB9LCBnZXRDbGllbnRSZWN0RnJvbU1peGVkVHlwZShlbGVtZW50LCBmaXJzdENsaXBwaW5nUGFyZW50LCBzdHJhdGVneSkpO1xuICBjbGlwcGluZ1JlY3Qud2lkdGggPSBjbGlwcGluZ1JlY3QucmlnaHQgLSBjbGlwcGluZ1JlY3QubGVmdDtcbiAgY2xpcHBpbmdSZWN0LmhlaWdodCA9IGNsaXBwaW5nUmVjdC5ib3R0b20gLSBjbGlwcGluZ1JlY3QudG9wO1xuICBjbGlwcGluZ1JlY3QueCA9IGNsaXBwaW5nUmVjdC5sZWZ0O1xuICBjbGlwcGluZ1JlY3QueSA9IGNsaXBwaW5nUmVjdC50b3A7XG4gIHJldHVybiBjbGlwcGluZ1JlY3Q7XG59IiwiaW1wb3J0IGdldEJhc2VQbGFjZW1lbnQgZnJvbSBcIi4vZ2V0QmFzZVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IGdldFZhcmlhdGlvbiBmcm9tIFwiLi9nZXRWYXJpYXRpb24uanNcIjtcbmltcG9ydCBnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQgZnJvbSBcIi4vZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgeyB0b3AsIHJpZ2h0LCBib3R0b20sIGxlZnQsIHN0YXJ0LCBlbmQgfSBmcm9tIFwiLi4vZW51bXMuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbXB1dGVPZmZzZXRzKF9yZWYpIHtcbiAgdmFyIHJlZmVyZW5jZSA9IF9yZWYucmVmZXJlbmNlLFxuICAgICAgZWxlbWVudCA9IF9yZWYuZWxlbWVudCxcbiAgICAgIHBsYWNlbWVudCA9IF9yZWYucGxhY2VtZW50O1xuICB2YXIgYmFzZVBsYWNlbWVudCA9IHBsYWNlbWVudCA/IGdldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KSA6IG51bGw7XG4gIHZhciB2YXJpYXRpb24gPSBwbGFjZW1lbnQgPyBnZXRWYXJpYXRpb24ocGxhY2VtZW50KSA6IG51bGw7XG4gIHZhciBjb21tb25YID0gcmVmZXJlbmNlLnggKyByZWZlcmVuY2Uud2lkdGggLyAyIC0gZWxlbWVudC53aWR0aCAvIDI7XG4gIHZhciBjb21tb25ZID0gcmVmZXJlbmNlLnkgKyByZWZlcmVuY2UuaGVpZ2h0IC8gMiAtIGVsZW1lbnQuaGVpZ2h0IC8gMjtcbiAgdmFyIG9mZnNldHM7XG5cbiAgc3dpdGNoIChiYXNlUGxhY2VtZW50KSB7XG4gICAgY2FzZSB0b3A6XG4gICAgICBvZmZzZXRzID0ge1xuICAgICAgICB4OiBjb21tb25YLFxuICAgICAgICB5OiByZWZlcmVuY2UueSAtIGVsZW1lbnQuaGVpZ2h0XG4gICAgICB9O1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIGJvdHRvbTpcbiAgICAgIG9mZnNldHMgPSB7XG4gICAgICAgIHg6IGNvbW1vblgsXG4gICAgICAgIHk6IHJlZmVyZW5jZS55ICsgcmVmZXJlbmNlLmhlaWdodFxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSByaWdodDpcbiAgICAgIG9mZnNldHMgPSB7XG4gICAgICAgIHg6IHJlZmVyZW5jZS54ICsgcmVmZXJlbmNlLndpZHRoLFxuICAgICAgICB5OiBjb21tb25ZXG4gICAgICB9O1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIGxlZnQ6XG4gICAgICBvZmZzZXRzID0ge1xuICAgICAgICB4OiByZWZlcmVuY2UueCAtIGVsZW1lbnQud2lkdGgsXG4gICAgICAgIHk6IGNvbW1vbllcbiAgICAgIH07XG4gICAgICBicmVhaztcblxuICAgIGRlZmF1bHQ6XG4gICAgICBvZmZzZXRzID0ge1xuICAgICAgICB4OiByZWZlcmVuY2UueCxcbiAgICAgICAgeTogcmVmZXJlbmNlLnlcbiAgICAgIH07XG4gIH1cblxuICB2YXIgbWFpbkF4aXMgPSBiYXNlUGxhY2VtZW50ID8gZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50KGJhc2VQbGFjZW1lbnQpIDogbnVsbDtcblxuICBpZiAobWFpbkF4aXMgIT0gbnVsbCkge1xuICAgIHZhciBsZW4gPSBtYWluQXhpcyA9PT0gJ3knID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuXG4gICAgc3dpdGNoICh2YXJpYXRpb24pIHtcbiAgICAgIGNhc2Ugc3RhcnQ6XG4gICAgICAgIG9mZnNldHNbbWFpbkF4aXNdID0gb2Zmc2V0c1ttYWluQXhpc10gLSAocmVmZXJlbmNlW2xlbl0gLyAyIC0gZWxlbWVudFtsZW5dIC8gMik7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIGVuZDpcbiAgICAgICAgb2Zmc2V0c1ttYWluQXhpc10gPSBvZmZzZXRzW21haW5BeGlzXSArIChyZWZlcmVuY2VbbGVuXSAvIDIgLSBlbGVtZW50W2xlbl0gLyAyKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG9mZnNldHM7XG59IiwiaW1wb3J0IGdldENsaXBwaW5nUmVjdCBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldENsaXBwaW5nUmVjdC5qc1wiO1xuaW1wb3J0IGdldERvY3VtZW50RWxlbWVudCBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldERvY3VtZW50RWxlbWVudC5qc1wiO1xuaW1wb3J0IGdldEJvdW5kaW5nQ2xpZW50UmVjdCBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldEJvdW5kaW5nQ2xpZW50UmVjdC5qc1wiO1xuaW1wb3J0IGNvbXB1dGVPZmZzZXRzIGZyb20gXCIuL2NvbXB1dGVPZmZzZXRzLmpzXCI7XG5pbXBvcnQgcmVjdFRvQ2xpZW50UmVjdCBmcm9tIFwiLi9yZWN0VG9DbGllbnRSZWN0LmpzXCI7XG5pbXBvcnQgeyBjbGlwcGluZ1BhcmVudHMsIHJlZmVyZW5jZSwgcG9wcGVyLCBib3R0b20sIHRvcCwgcmlnaHQsIGJhc2VQbGFjZW1lbnRzLCB2aWV3cG9ydCB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuaW1wb3J0IHsgaXNFbGVtZW50IH0gZnJvbSBcIi4uL2RvbS11dGlscy9pbnN0YW5jZU9mLmpzXCI7XG5pbXBvcnQgbWVyZ2VQYWRkaW5nT2JqZWN0IGZyb20gXCIuL21lcmdlUGFkZGluZ09iamVjdC5qc1wiO1xuaW1wb3J0IGV4cGFuZFRvSGFzaE1hcCBmcm9tIFwiLi9leHBhbmRUb0hhc2hNYXAuanNcIjsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZXRlY3RPdmVyZmxvdyhzdGF0ZSwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgdmFyIF9vcHRpb25zID0gb3B0aW9ucyxcbiAgICAgIF9vcHRpb25zJHBsYWNlbWVudCA9IF9vcHRpb25zLnBsYWNlbWVudCxcbiAgICAgIHBsYWNlbWVudCA9IF9vcHRpb25zJHBsYWNlbWVudCA9PT0gdm9pZCAwID8gc3RhdGUucGxhY2VtZW50IDogX29wdGlvbnMkcGxhY2VtZW50LFxuICAgICAgX29wdGlvbnMkc3RyYXRlZ3kgPSBfb3B0aW9ucy5zdHJhdGVneSxcbiAgICAgIHN0cmF0ZWd5ID0gX29wdGlvbnMkc3RyYXRlZ3kgPT09IHZvaWQgMCA/IHN0YXRlLnN0cmF0ZWd5IDogX29wdGlvbnMkc3RyYXRlZ3ksXG4gICAgICBfb3B0aW9ucyRib3VuZGFyeSA9IF9vcHRpb25zLmJvdW5kYXJ5LFxuICAgICAgYm91bmRhcnkgPSBfb3B0aW9ucyRib3VuZGFyeSA9PT0gdm9pZCAwID8gY2xpcHBpbmdQYXJlbnRzIDogX29wdGlvbnMkYm91bmRhcnksXG4gICAgICBfb3B0aW9ucyRyb290Qm91bmRhcnkgPSBfb3B0aW9ucy5yb290Qm91bmRhcnksXG4gICAgICByb290Qm91bmRhcnkgPSBfb3B0aW9ucyRyb290Qm91bmRhcnkgPT09IHZvaWQgMCA/IHZpZXdwb3J0IDogX29wdGlvbnMkcm9vdEJvdW5kYXJ5LFxuICAgICAgX29wdGlvbnMkZWxlbWVudENvbnRlID0gX29wdGlvbnMuZWxlbWVudENvbnRleHQsXG4gICAgICBlbGVtZW50Q29udGV4dCA9IF9vcHRpb25zJGVsZW1lbnRDb250ZSA9PT0gdm9pZCAwID8gcG9wcGVyIDogX29wdGlvbnMkZWxlbWVudENvbnRlLFxuICAgICAgX29wdGlvbnMkYWx0Qm91bmRhcnkgPSBfb3B0aW9ucy5hbHRCb3VuZGFyeSxcbiAgICAgIGFsdEJvdW5kYXJ5ID0gX29wdGlvbnMkYWx0Qm91bmRhcnkgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkYWx0Qm91bmRhcnksXG4gICAgICBfb3B0aW9ucyRwYWRkaW5nID0gX29wdGlvbnMucGFkZGluZyxcbiAgICAgIHBhZGRpbmcgPSBfb3B0aW9ucyRwYWRkaW5nID09PSB2b2lkIDAgPyAwIDogX29wdGlvbnMkcGFkZGluZztcbiAgdmFyIHBhZGRpbmdPYmplY3QgPSBtZXJnZVBhZGRpbmdPYmplY3QodHlwZW9mIHBhZGRpbmcgIT09ICdudW1iZXInID8gcGFkZGluZyA6IGV4cGFuZFRvSGFzaE1hcChwYWRkaW5nLCBiYXNlUGxhY2VtZW50cykpO1xuICB2YXIgYWx0Q29udGV4dCA9IGVsZW1lbnRDb250ZXh0ID09PSBwb3BwZXIgPyByZWZlcmVuY2UgOiBwb3BwZXI7XG4gIHZhciBwb3BwZXJSZWN0ID0gc3RhdGUucmVjdHMucG9wcGVyO1xuICB2YXIgZWxlbWVudCA9IHN0YXRlLmVsZW1lbnRzW2FsdEJvdW5kYXJ5ID8gYWx0Q29udGV4dCA6IGVsZW1lbnRDb250ZXh0XTtcbiAgdmFyIGNsaXBwaW5nQ2xpZW50UmVjdCA9IGdldENsaXBwaW5nUmVjdChpc0VsZW1lbnQoZWxlbWVudCkgPyBlbGVtZW50IDogZWxlbWVudC5jb250ZXh0RWxlbWVudCB8fCBnZXREb2N1bWVudEVsZW1lbnQoc3RhdGUuZWxlbWVudHMucG9wcGVyKSwgYm91bmRhcnksIHJvb3RCb3VuZGFyeSwgc3RyYXRlZ3kpO1xuICB2YXIgcmVmZXJlbmNlQ2xpZW50UmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChzdGF0ZS5lbGVtZW50cy5yZWZlcmVuY2UpO1xuICB2YXIgcG9wcGVyT2Zmc2V0cyA9IGNvbXB1dGVPZmZzZXRzKHtcbiAgICByZWZlcmVuY2U6IHJlZmVyZW5jZUNsaWVudFJlY3QsXG4gICAgZWxlbWVudDogcG9wcGVyUmVjdCxcbiAgICBzdHJhdGVneTogJ2Fic29sdXRlJyxcbiAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudFxuICB9KTtcbiAgdmFyIHBvcHBlckNsaWVudFJlY3QgPSByZWN0VG9DbGllbnRSZWN0KE9iamVjdC5hc3NpZ24oe30sIHBvcHBlclJlY3QsIHBvcHBlck9mZnNldHMpKTtcbiAgdmFyIGVsZW1lbnRDbGllbnRSZWN0ID0gZWxlbWVudENvbnRleHQgPT09IHBvcHBlciA/IHBvcHBlckNsaWVudFJlY3QgOiByZWZlcmVuY2VDbGllbnRSZWN0OyAvLyBwb3NpdGl2ZSA9IG92ZXJmbG93aW5nIHRoZSBjbGlwcGluZyByZWN0XG4gIC8vIDAgb3IgbmVnYXRpdmUgPSB3aXRoaW4gdGhlIGNsaXBwaW5nIHJlY3RcblxuICB2YXIgb3ZlcmZsb3dPZmZzZXRzID0ge1xuICAgIHRvcDogY2xpcHBpbmdDbGllbnRSZWN0LnRvcCAtIGVsZW1lbnRDbGllbnRSZWN0LnRvcCArIHBhZGRpbmdPYmplY3QudG9wLFxuICAgIGJvdHRvbTogZWxlbWVudENsaWVudFJlY3QuYm90dG9tIC0gY2xpcHBpbmdDbGllbnRSZWN0LmJvdHRvbSArIHBhZGRpbmdPYmplY3QuYm90dG9tLFxuICAgIGxlZnQ6IGNsaXBwaW5nQ2xpZW50UmVjdC5sZWZ0IC0gZWxlbWVudENsaWVudFJlY3QubGVmdCArIHBhZGRpbmdPYmplY3QubGVmdCxcbiAgICByaWdodDogZWxlbWVudENsaWVudFJlY3QucmlnaHQgLSBjbGlwcGluZ0NsaWVudFJlY3QucmlnaHQgKyBwYWRkaW5nT2JqZWN0LnJpZ2h0XG4gIH07XG4gIHZhciBvZmZzZXREYXRhID0gc3RhdGUubW9kaWZpZXJzRGF0YS5vZmZzZXQ7IC8vIE9mZnNldHMgY2FuIGJlIGFwcGxpZWQgb25seSB0byB0aGUgcG9wcGVyIGVsZW1lbnRcblxuICBpZiAoZWxlbWVudENvbnRleHQgPT09IHBvcHBlciAmJiBvZmZzZXREYXRhKSB7XG4gICAgdmFyIG9mZnNldCA9IG9mZnNldERhdGFbcGxhY2VtZW50XTtcbiAgICBPYmplY3Qua2V5cyhvdmVyZmxvd09mZnNldHMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgdmFyIG11bHRpcGx5ID0gW3JpZ2h0LCBib3R0b21dLmluZGV4T2Yoa2V5KSA+PSAwID8gMSA6IC0xO1xuICAgICAgdmFyIGF4aXMgPSBbdG9wLCBib3R0b21dLmluZGV4T2Yoa2V5KSA+PSAwID8gJ3knIDogJ3gnO1xuICAgICAgb3ZlcmZsb3dPZmZzZXRzW2tleV0gKz0gb2Zmc2V0W2F4aXNdICogbXVsdGlwbHk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gb3ZlcmZsb3dPZmZzZXRzO1xufSIsImltcG9ydCBnZXRWYXJpYXRpb24gZnJvbSBcIi4vZ2V0VmFyaWF0aW9uLmpzXCI7XG5pbXBvcnQgeyB2YXJpYXRpb25QbGFjZW1lbnRzLCBiYXNlUGxhY2VtZW50cywgcGxhY2VtZW50cyBhcyBhbGxQbGFjZW1lbnRzIH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5pbXBvcnQgZGV0ZWN0T3ZlcmZsb3cgZnJvbSBcIi4vZGV0ZWN0T3ZlcmZsb3cuanNcIjtcbmltcG9ydCBnZXRCYXNlUGxhY2VtZW50IGZyb20gXCIuL2dldEJhc2VQbGFjZW1lbnQuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbXB1dGVBdXRvUGxhY2VtZW50KHN0YXRlLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgcGxhY2VtZW50ID0gX29wdGlvbnMucGxhY2VtZW50LFxuICAgICAgYm91bmRhcnkgPSBfb3B0aW9ucy5ib3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeSA9IF9vcHRpb25zLnJvb3RCb3VuZGFyeSxcbiAgICAgIHBhZGRpbmcgPSBfb3B0aW9ucy5wYWRkaW5nLFxuICAgICAgZmxpcFZhcmlhdGlvbnMgPSBfb3B0aW9ucy5mbGlwVmFyaWF0aW9ucyxcbiAgICAgIF9vcHRpb25zJGFsbG93ZWRBdXRvUCA9IF9vcHRpb25zLmFsbG93ZWRBdXRvUGxhY2VtZW50cyxcbiAgICAgIGFsbG93ZWRBdXRvUGxhY2VtZW50cyA9IF9vcHRpb25zJGFsbG93ZWRBdXRvUCA9PT0gdm9pZCAwID8gYWxsUGxhY2VtZW50cyA6IF9vcHRpb25zJGFsbG93ZWRBdXRvUDtcbiAgdmFyIHZhcmlhdGlvbiA9IGdldFZhcmlhdGlvbihwbGFjZW1lbnQpO1xuICB2YXIgcGxhY2VtZW50cyA9IHZhcmlhdGlvbiA/IGZsaXBWYXJpYXRpb25zID8gdmFyaWF0aW9uUGxhY2VtZW50cyA6IHZhcmlhdGlvblBsYWNlbWVudHMuZmlsdGVyKGZ1bmN0aW9uIChwbGFjZW1lbnQpIHtcbiAgICByZXR1cm4gZ2V0VmFyaWF0aW9uKHBsYWNlbWVudCkgPT09IHZhcmlhdGlvbjtcbiAgfSkgOiBiYXNlUGxhY2VtZW50cztcbiAgdmFyIGFsbG93ZWRQbGFjZW1lbnRzID0gcGxhY2VtZW50cy5maWx0ZXIoZnVuY3Rpb24gKHBsYWNlbWVudCkge1xuICAgIHJldHVybiBhbGxvd2VkQXV0b1BsYWNlbWVudHMuaW5kZXhPZihwbGFjZW1lbnQpID49IDA7XG4gIH0pO1xuXG4gIGlmIChhbGxvd2VkUGxhY2VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICBhbGxvd2VkUGxhY2VtZW50cyA9IHBsYWNlbWVudHM7XG4gIH0gLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtdHlwZV06IEZsb3cgc2VlbXMgdG8gaGF2ZSBwcm9ibGVtcyB3aXRoIHR3byBhcnJheSB1bmlvbnMuLi5cblxuXG4gIHZhciBvdmVyZmxvd3MgPSBhbGxvd2VkUGxhY2VtZW50cy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcGxhY2VtZW50KSB7XG4gICAgYWNjW3BsYWNlbWVudF0gPSBkZXRlY3RPdmVyZmxvdyhzdGF0ZSwge1xuICAgICAgcGxhY2VtZW50OiBwbGFjZW1lbnQsXG4gICAgICBib3VuZGFyeTogYm91bmRhcnksXG4gICAgICByb290Qm91bmRhcnk6IHJvb3RCb3VuZGFyeSxcbiAgICAgIHBhZGRpbmc6IHBhZGRpbmdcbiAgICB9KVtnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCldO1xuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG92ZXJmbG93cykuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBvdmVyZmxvd3NbYV0gLSBvdmVyZmxvd3NbYl07XG4gIH0pO1xufSIsImltcG9ydCBnZXRPcHBvc2l0ZVBsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvZ2V0T3Bwb3NpdGVQbGFjZW1lbnQuanNcIjtcbmltcG9ydCBnZXRCYXNlUGxhY2VtZW50IGZyb20gXCIuLi91dGlscy9nZXRCYXNlUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgZ2V0T3Bwb3NpdGVWYXJpYXRpb25QbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2dldE9wcG9zaXRlVmFyaWF0aW9uUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgZGV0ZWN0T3ZlcmZsb3cgZnJvbSBcIi4uL3V0aWxzL2RldGVjdE92ZXJmbG93LmpzXCI7XG5pbXBvcnQgY29tcHV0ZUF1dG9QbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2NvbXB1dGVBdXRvUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgeyBib3R0b20sIHRvcCwgc3RhcnQsIHJpZ2h0LCBsZWZ0LCBhdXRvIH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5pbXBvcnQgZ2V0VmFyaWF0aW9uIGZyb20gXCIuLi91dGlscy9nZXRWYXJpYXRpb24uanNcIjsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5mdW5jdGlvbiBnZXRFeHBhbmRlZEZhbGxiYWNrUGxhY2VtZW50cyhwbGFjZW1lbnQpIHtcbiAgaWYgKGdldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KSA9PT0gYXV0bykge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIHZhciBvcHBvc2l0ZVBsYWNlbWVudCA9IGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCk7XG4gIHJldHVybiBbZ2V0T3Bwb3NpdGVWYXJpYXRpb25QbGFjZW1lbnQocGxhY2VtZW50KSwgb3Bwb3NpdGVQbGFjZW1lbnQsIGdldE9wcG9zaXRlVmFyaWF0aW9uUGxhY2VtZW50KG9wcG9zaXRlUGxhY2VtZW50KV07XG59XG5cbmZ1bmN0aW9uIGZsaXAoX3JlZikge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgb3B0aW9ucyA9IF9yZWYub3B0aW9ucyxcbiAgICAgIG5hbWUgPSBfcmVmLm5hbWU7XG5cbiAgaWYgKHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0uX3NraXApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgX29wdGlvbnMkbWFpbkF4aXMgPSBvcHRpb25zLm1haW5BeGlzLFxuICAgICAgY2hlY2tNYWluQXhpcyA9IF9vcHRpb25zJG1haW5BeGlzID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkbWFpbkF4aXMsXG4gICAgICBfb3B0aW9ucyRhbHRBeGlzID0gb3B0aW9ucy5hbHRBeGlzLFxuICAgICAgY2hlY2tBbHRBeGlzID0gX29wdGlvbnMkYWx0QXhpcyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJGFsdEF4aXMsXG4gICAgICBzcGVjaWZpZWRGYWxsYmFja1BsYWNlbWVudHMgPSBvcHRpb25zLmZhbGxiYWNrUGxhY2VtZW50cyxcbiAgICAgIHBhZGRpbmcgPSBvcHRpb25zLnBhZGRpbmcsXG4gICAgICBib3VuZGFyeSA9IG9wdGlvbnMuYm91bmRhcnksXG4gICAgICByb290Qm91bmRhcnkgPSBvcHRpb25zLnJvb3RCb3VuZGFyeSxcbiAgICAgIGFsdEJvdW5kYXJ5ID0gb3B0aW9ucy5hbHRCb3VuZGFyeSxcbiAgICAgIF9vcHRpb25zJGZsaXBWYXJpYXRpbyA9IG9wdGlvbnMuZmxpcFZhcmlhdGlvbnMsXG4gICAgICBmbGlwVmFyaWF0aW9ucyA9IF9vcHRpb25zJGZsaXBWYXJpYXRpbyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJGZsaXBWYXJpYXRpbyxcbiAgICAgIGFsbG93ZWRBdXRvUGxhY2VtZW50cyA9IG9wdGlvbnMuYWxsb3dlZEF1dG9QbGFjZW1lbnRzO1xuICB2YXIgcHJlZmVycmVkUGxhY2VtZW50ID0gc3RhdGUub3B0aW9ucy5wbGFjZW1lbnQ7XG4gIHZhciBiYXNlUGxhY2VtZW50ID0gZ2V0QmFzZVBsYWNlbWVudChwcmVmZXJyZWRQbGFjZW1lbnQpO1xuICB2YXIgaXNCYXNlUGxhY2VtZW50ID0gYmFzZVBsYWNlbWVudCA9PT0gcHJlZmVycmVkUGxhY2VtZW50O1xuICB2YXIgZmFsbGJhY2tQbGFjZW1lbnRzID0gc3BlY2lmaWVkRmFsbGJhY2tQbGFjZW1lbnRzIHx8IChpc0Jhc2VQbGFjZW1lbnQgfHwgIWZsaXBWYXJpYXRpb25zID8gW2dldE9wcG9zaXRlUGxhY2VtZW50KHByZWZlcnJlZFBsYWNlbWVudCldIDogZ2V0RXhwYW5kZWRGYWxsYmFja1BsYWNlbWVudHMocHJlZmVycmVkUGxhY2VtZW50KSk7XG4gIHZhciBwbGFjZW1lbnRzID0gW3ByZWZlcnJlZFBsYWNlbWVudF0uY29uY2F0KGZhbGxiYWNrUGxhY2VtZW50cykucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHBsYWNlbWVudCkge1xuICAgIHJldHVybiBhY2MuY29uY2F0KGdldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KSA9PT0gYXV0byA/IGNvbXB1dGVBdXRvUGxhY2VtZW50KHN0YXRlLCB7XG4gICAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudCxcbiAgICAgIGJvdW5kYXJ5OiBib3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeTogcm9vdEJvdW5kYXJ5LFxuICAgICAgcGFkZGluZzogcGFkZGluZyxcbiAgICAgIGZsaXBWYXJpYXRpb25zOiBmbGlwVmFyaWF0aW9ucyxcbiAgICAgIGFsbG93ZWRBdXRvUGxhY2VtZW50czogYWxsb3dlZEF1dG9QbGFjZW1lbnRzXG4gICAgfSkgOiBwbGFjZW1lbnQpO1xuICB9LCBbXSk7XG4gIHZhciByZWZlcmVuY2VSZWN0ID0gc3RhdGUucmVjdHMucmVmZXJlbmNlO1xuICB2YXIgcG9wcGVyUmVjdCA9IHN0YXRlLnJlY3RzLnBvcHBlcjtcbiAgdmFyIGNoZWNrc01hcCA9IG5ldyBNYXAoKTtcbiAgdmFyIG1ha2VGYWxsYmFja0NoZWNrcyA9IHRydWU7XG4gIHZhciBmaXJzdEZpdHRpbmdQbGFjZW1lbnQgPSBwbGFjZW1lbnRzWzBdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGxhY2VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBwbGFjZW1lbnQgPSBwbGFjZW1lbnRzW2ldO1xuXG4gICAgdmFyIF9iYXNlUGxhY2VtZW50ID0gZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuXG4gICAgdmFyIGlzU3RhcnRWYXJpYXRpb24gPSBnZXRWYXJpYXRpb24ocGxhY2VtZW50KSA9PT0gc3RhcnQ7XG4gICAgdmFyIGlzVmVydGljYWwgPSBbdG9wLCBib3R0b21dLmluZGV4T2YoX2Jhc2VQbGFjZW1lbnQpID49IDA7XG4gICAgdmFyIGxlbiA9IGlzVmVydGljYWwgPyAnd2lkdGgnIDogJ2hlaWdodCc7XG4gICAgdmFyIG92ZXJmbG93ID0gZGV0ZWN0T3ZlcmZsb3coc3RhdGUsIHtcbiAgICAgIHBsYWNlbWVudDogcGxhY2VtZW50LFxuICAgICAgYm91bmRhcnk6IGJvdW5kYXJ5LFxuICAgICAgcm9vdEJvdW5kYXJ5OiByb290Qm91bmRhcnksXG4gICAgICBhbHRCb3VuZGFyeTogYWx0Qm91bmRhcnksXG4gICAgICBwYWRkaW5nOiBwYWRkaW5nXG4gICAgfSk7XG4gICAgdmFyIG1haW5WYXJpYXRpb25TaWRlID0gaXNWZXJ0aWNhbCA/IGlzU3RhcnRWYXJpYXRpb24gPyByaWdodCA6IGxlZnQgOiBpc1N0YXJ0VmFyaWF0aW9uID8gYm90dG9tIDogdG9wO1xuXG4gICAgaWYgKHJlZmVyZW5jZVJlY3RbbGVuXSA+IHBvcHBlclJlY3RbbGVuXSkge1xuICAgICAgbWFpblZhcmlhdGlvblNpZGUgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChtYWluVmFyaWF0aW9uU2lkZSk7XG4gICAgfVxuXG4gICAgdmFyIGFsdFZhcmlhdGlvblNpZGUgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChtYWluVmFyaWF0aW9uU2lkZSk7XG4gICAgdmFyIGNoZWNrcyA9IFtdO1xuXG4gICAgaWYgKGNoZWNrTWFpbkF4aXMpIHtcbiAgICAgIGNoZWNrcy5wdXNoKG92ZXJmbG93W19iYXNlUGxhY2VtZW50XSA8PSAwKTtcbiAgICB9XG5cbiAgICBpZiAoY2hlY2tBbHRBeGlzKSB7XG4gICAgICBjaGVja3MucHVzaChvdmVyZmxvd1ttYWluVmFyaWF0aW9uU2lkZV0gPD0gMCwgb3ZlcmZsb3dbYWx0VmFyaWF0aW9uU2lkZV0gPD0gMCk7XG4gICAgfVxuXG4gICAgaWYgKGNoZWNrcy5ldmVyeShmdW5jdGlvbiAoY2hlY2spIHtcbiAgICAgIHJldHVybiBjaGVjaztcbiAgICB9KSkge1xuICAgICAgZmlyc3RGaXR0aW5nUGxhY2VtZW50ID0gcGxhY2VtZW50O1xuICAgICAgbWFrZUZhbGxiYWNrQ2hlY2tzID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBjaGVja3NNYXAuc2V0KHBsYWNlbWVudCwgY2hlY2tzKTtcbiAgfVxuXG4gIGlmIChtYWtlRmFsbGJhY2tDaGVja3MpIHtcbiAgICAvLyBgMmAgbWF5IGJlIGRlc2lyZWQgaW4gc29tZSBjYXNlcyDigJMgcmVzZWFyY2ggbGF0ZXJcbiAgICB2YXIgbnVtYmVyT2ZDaGVja3MgPSBmbGlwVmFyaWF0aW9ucyA/IDMgOiAxO1xuXG4gICAgdmFyIF9sb29wID0gZnVuY3Rpb24gX2xvb3AoX2kpIHtcbiAgICAgIHZhciBmaXR0aW5nUGxhY2VtZW50ID0gcGxhY2VtZW50cy5maW5kKGZ1bmN0aW9uIChwbGFjZW1lbnQpIHtcbiAgICAgICAgdmFyIGNoZWNrcyA9IGNoZWNrc01hcC5nZXQocGxhY2VtZW50KTtcblxuICAgICAgICBpZiAoY2hlY2tzKSB7XG4gICAgICAgICAgcmV0dXJuIGNoZWNrcy5zbGljZSgwLCBfaSkuZXZlcnkoZnVuY3Rpb24gKGNoZWNrKSB7XG4gICAgICAgICAgICByZXR1cm4gY2hlY2s7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBpZiAoZml0dGluZ1BsYWNlbWVudCkge1xuICAgICAgICBmaXJzdEZpdHRpbmdQbGFjZW1lbnQgPSBmaXR0aW5nUGxhY2VtZW50O1xuICAgICAgICByZXR1cm4gXCJicmVha1wiO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBmb3IgKHZhciBfaSA9IG51bWJlck9mQ2hlY2tzOyBfaSA+IDA7IF9pLS0pIHtcbiAgICAgIHZhciBfcmV0ID0gX2xvb3AoX2kpO1xuXG4gICAgICBpZiAoX3JldCA9PT0gXCJicmVha1wiKSBicmVhaztcbiAgICB9XG4gIH1cblxuICBpZiAoc3RhdGUucGxhY2VtZW50ICE9PSBmaXJzdEZpdHRpbmdQbGFjZW1lbnQpIHtcbiAgICBzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdLl9za2lwID0gdHJ1ZTtcbiAgICBzdGF0ZS5wbGFjZW1lbnQgPSBmaXJzdEZpdHRpbmdQbGFjZW1lbnQ7XG4gICAgc3RhdGUucmVzZXQgPSB0cnVlO1xuICB9XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdmbGlwJyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICdtYWluJyxcbiAgZm46IGZsaXAsXG4gIHJlcXVpcmVzSWZFeGlzdHM6IFsnb2Zmc2V0J10sXG4gIGRhdGE6IHtcbiAgICBfc2tpcDogZmFsc2VcbiAgfVxufTsiLCJpbXBvcnQgeyB0b3AsIGJvdHRvbSwgbGVmdCwgcmlnaHQgfSBmcm9tIFwiLi4vZW51bXMuanNcIjtcbmltcG9ydCBkZXRlY3RPdmVyZmxvdyBmcm9tIFwiLi4vdXRpbHMvZGV0ZWN0T3ZlcmZsb3cuanNcIjtcblxuZnVuY3Rpb24gZ2V0U2lkZU9mZnNldHMob3ZlcmZsb3csIHJlY3QsIHByZXZlbnRlZE9mZnNldHMpIHtcbiAgaWYgKHByZXZlbnRlZE9mZnNldHMgPT09IHZvaWQgMCkge1xuICAgIHByZXZlbnRlZE9mZnNldHMgPSB7XG4gICAgICB4OiAwLFxuICAgICAgeTogMFxuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHRvcDogb3ZlcmZsb3cudG9wIC0gcmVjdC5oZWlnaHQgLSBwcmV2ZW50ZWRPZmZzZXRzLnksXG4gICAgcmlnaHQ6IG92ZXJmbG93LnJpZ2h0IC0gcmVjdC53aWR0aCArIHByZXZlbnRlZE9mZnNldHMueCxcbiAgICBib3R0b206IG92ZXJmbG93LmJvdHRvbSAtIHJlY3QuaGVpZ2h0ICsgcHJldmVudGVkT2Zmc2V0cy55LFxuICAgIGxlZnQ6IG92ZXJmbG93LmxlZnQgLSByZWN0LndpZHRoIC0gcHJldmVudGVkT2Zmc2V0cy54XG4gIH07XG59XG5cbmZ1bmN0aW9uIGlzQW55U2lkZUZ1bGx5Q2xpcHBlZChvdmVyZmxvdykge1xuICByZXR1cm4gW3RvcCwgcmlnaHQsIGJvdHRvbSwgbGVmdF0uc29tZShmdW5jdGlvbiAoc2lkZSkge1xuICAgIHJldHVybiBvdmVyZmxvd1tzaWRlXSA+PSAwO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gaGlkZShfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBuYW1lID0gX3JlZi5uYW1lO1xuICB2YXIgcmVmZXJlbmNlUmVjdCA9IHN0YXRlLnJlY3RzLnJlZmVyZW5jZTtcbiAgdmFyIHBvcHBlclJlY3QgPSBzdGF0ZS5yZWN0cy5wb3BwZXI7XG4gIHZhciBwcmV2ZW50ZWRPZmZzZXRzID0gc3RhdGUubW9kaWZpZXJzRGF0YS5wcmV2ZW50T3ZlcmZsb3c7XG4gIHZhciByZWZlcmVuY2VPdmVyZmxvdyA9IGRldGVjdE92ZXJmbG93KHN0YXRlLCB7XG4gICAgZWxlbWVudENvbnRleHQ6ICdyZWZlcmVuY2UnXG4gIH0pO1xuICB2YXIgcG9wcGVyQWx0T3ZlcmZsb3cgPSBkZXRlY3RPdmVyZmxvdyhzdGF0ZSwge1xuICAgIGFsdEJvdW5kYXJ5OiB0cnVlXG4gIH0pO1xuICB2YXIgcmVmZXJlbmNlQ2xpcHBpbmdPZmZzZXRzID0gZ2V0U2lkZU9mZnNldHMocmVmZXJlbmNlT3ZlcmZsb3csIHJlZmVyZW5jZVJlY3QpO1xuICB2YXIgcG9wcGVyRXNjYXBlT2Zmc2V0cyA9IGdldFNpZGVPZmZzZXRzKHBvcHBlckFsdE92ZXJmbG93LCBwb3BwZXJSZWN0LCBwcmV2ZW50ZWRPZmZzZXRzKTtcbiAgdmFyIGlzUmVmZXJlbmNlSGlkZGVuID0gaXNBbnlTaWRlRnVsbHlDbGlwcGVkKHJlZmVyZW5jZUNsaXBwaW5nT2Zmc2V0cyk7XG4gIHZhciBoYXNQb3BwZXJFc2NhcGVkID0gaXNBbnlTaWRlRnVsbHlDbGlwcGVkKHBvcHBlckVzY2FwZU9mZnNldHMpO1xuICBzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdID0ge1xuICAgIHJlZmVyZW5jZUNsaXBwaW5nT2Zmc2V0czogcmVmZXJlbmNlQ2xpcHBpbmdPZmZzZXRzLFxuICAgIHBvcHBlckVzY2FwZU9mZnNldHM6IHBvcHBlckVzY2FwZU9mZnNldHMsXG4gICAgaXNSZWZlcmVuY2VIaWRkZW46IGlzUmVmZXJlbmNlSGlkZGVuLFxuICAgIGhhc1BvcHBlckVzY2FwZWQ6IGhhc1BvcHBlckVzY2FwZWRcbiAgfTtcbiAgc3RhdGUuYXR0cmlidXRlcy5wb3BwZXIgPSBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZS5hdHRyaWJ1dGVzLnBvcHBlciwge1xuICAgICdkYXRhLXBvcHBlci1yZWZlcmVuY2UtaGlkZGVuJzogaXNSZWZlcmVuY2VIaWRkZW4sXG4gICAgJ2RhdGEtcG9wcGVyLWVzY2FwZWQnOiBoYXNQb3BwZXJFc2NhcGVkXG4gIH0pO1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnaGlkZScsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnbWFpbicsXG4gIHJlcXVpcmVzSWZFeGlzdHM6IFsncHJldmVudE92ZXJmbG93J10sXG4gIGZuOiBoaWRlXG59OyIsImltcG9ydCBnZXRCYXNlUGxhY2VtZW50IGZyb20gXCIuLi91dGlscy9nZXRCYXNlUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgeyB0b3AsIGxlZnQsIHJpZ2h0LCBwbGFjZW1lbnRzIH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuZXhwb3J0IGZ1bmN0aW9uIGRpc3RhbmNlQW5kU2tpZGRpbmdUb1hZKHBsYWNlbWVudCwgcmVjdHMsIG9mZnNldCkge1xuICB2YXIgYmFzZVBsYWNlbWVudCA9IGdldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KTtcbiAgdmFyIGludmVydERpc3RhbmNlID0gW2xlZnQsIHRvcF0uaW5kZXhPZihiYXNlUGxhY2VtZW50KSA+PSAwID8gLTEgOiAxO1xuXG4gIHZhciBfcmVmID0gdHlwZW9mIG9mZnNldCA9PT0gJ2Z1bmN0aW9uJyA/IG9mZnNldChPYmplY3QuYXNzaWduKHt9LCByZWN0cywge1xuICAgIHBsYWNlbWVudDogcGxhY2VtZW50XG4gIH0pKSA6IG9mZnNldCxcbiAgICAgIHNraWRkaW5nID0gX3JlZlswXSxcbiAgICAgIGRpc3RhbmNlID0gX3JlZlsxXTtcblxuICBza2lkZGluZyA9IHNraWRkaW5nIHx8IDA7XG4gIGRpc3RhbmNlID0gKGRpc3RhbmNlIHx8IDApICogaW52ZXJ0RGlzdGFuY2U7XG4gIHJldHVybiBbbGVmdCwgcmlnaHRdLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgPj0gMCA/IHtcbiAgICB4OiBkaXN0YW5jZSxcbiAgICB5OiBza2lkZGluZ1xuICB9IDoge1xuICAgIHg6IHNraWRkaW5nLFxuICAgIHk6IGRpc3RhbmNlXG4gIH07XG59XG5cbmZ1bmN0aW9uIG9mZnNldChfcmVmMikge1xuICB2YXIgc3RhdGUgPSBfcmVmMi5zdGF0ZSxcbiAgICAgIG9wdGlvbnMgPSBfcmVmMi5vcHRpb25zLFxuICAgICAgbmFtZSA9IF9yZWYyLm5hbWU7XG4gIHZhciBfb3B0aW9ucyRvZmZzZXQgPSBvcHRpb25zLm9mZnNldCxcbiAgICAgIG9mZnNldCA9IF9vcHRpb25zJG9mZnNldCA9PT0gdm9pZCAwID8gWzAsIDBdIDogX29wdGlvbnMkb2Zmc2V0O1xuICB2YXIgZGF0YSA9IHBsYWNlbWVudHMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHBsYWNlbWVudCkge1xuICAgIGFjY1twbGFjZW1lbnRdID0gZGlzdGFuY2VBbmRTa2lkZGluZ1RvWFkocGxhY2VtZW50LCBzdGF0ZS5yZWN0cywgb2Zmc2V0KTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG4gIHZhciBfZGF0YSRzdGF0ZSRwbGFjZW1lbnQgPSBkYXRhW3N0YXRlLnBsYWNlbWVudF0sXG4gICAgICB4ID0gX2RhdGEkc3RhdGUkcGxhY2VtZW50LngsXG4gICAgICB5ID0gX2RhdGEkc3RhdGUkcGxhY2VtZW50Lnk7XG5cbiAgaWYgKHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cyAhPSBudWxsKSB7XG4gICAgc3RhdGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzLnggKz0geDtcbiAgICBzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMueSArPSB5O1xuICB9XG5cbiAgc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lXSA9IGRhdGE7XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdvZmZzZXQnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ21haW4nLFxuICByZXF1aXJlczogWydwb3BwZXJPZmZzZXRzJ10sXG4gIGZuOiBvZmZzZXRcbn07IiwiaW1wb3J0IGNvbXB1dGVPZmZzZXRzIGZyb20gXCIuLi91dGlscy9jb21wdXRlT2Zmc2V0cy5qc1wiO1xuXG5mdW5jdGlvbiBwb3BwZXJPZmZzZXRzKF9yZWYpIHtcbiAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZSxcbiAgICAgIG5hbWUgPSBfcmVmLm5hbWU7XG4gIC8vIE9mZnNldHMgYXJlIHRoZSBhY3R1YWwgcG9zaXRpb24gdGhlIHBvcHBlciBuZWVkcyB0byBoYXZlIHRvIGJlXG4gIC8vIHByb3Blcmx5IHBvc2l0aW9uZWQgbmVhciBpdHMgcmVmZXJlbmNlIGVsZW1lbnRcbiAgLy8gVGhpcyBpcyB0aGUgbW9zdCBiYXNpYyBwbGFjZW1lbnQsIGFuZCB3aWxsIGJlIGFkanVzdGVkIGJ5XG4gIC8vIHRoZSBtb2RpZmllcnMgaW4gdGhlIG5leHQgc3RlcFxuICBzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdID0gY29tcHV0ZU9mZnNldHMoe1xuICAgIHJlZmVyZW5jZTogc3RhdGUucmVjdHMucmVmZXJlbmNlLFxuICAgIGVsZW1lbnQ6IHN0YXRlLnJlY3RzLnBvcHBlcixcbiAgICBzdHJhdGVneTogJ2Fic29sdXRlJyxcbiAgICBwbGFjZW1lbnQ6IHN0YXRlLnBsYWNlbWVudFxuICB9KTtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ3BvcHBlck9mZnNldHMnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ3JlYWQnLFxuICBmbjogcG9wcGVyT2Zmc2V0cyxcbiAgZGF0YToge31cbn07IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0QWx0QXhpcyhheGlzKSB7XG4gIHJldHVybiBheGlzID09PSAneCcgPyAneScgOiAneCc7XG59IiwiaW1wb3J0IHsgdG9wLCBsZWZ0LCByaWdodCwgYm90dG9tLCBzdGFydCB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuaW1wb3J0IGdldEJhc2VQbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2dldEJhc2VQbGFjZW1lbnQuanNcIjtcbmltcG9ydCBnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2dldE1haW5BeGlzRnJvbVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IGdldEFsdEF4aXMgZnJvbSBcIi4uL3V0aWxzL2dldEFsdEF4aXMuanNcIjtcbmltcG9ydCB7IHdpdGhpbiwgd2l0aGluTWF4Q2xhbXAgfSBmcm9tIFwiLi4vdXRpbHMvd2l0aGluLmpzXCI7XG5pbXBvcnQgZ2V0TGF5b3V0UmVjdCBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldExheW91dFJlY3QuanNcIjtcbmltcG9ydCBnZXRPZmZzZXRQYXJlbnQgZnJvbSBcIi4uL2RvbS11dGlscy9nZXRPZmZzZXRQYXJlbnQuanNcIjtcbmltcG9ydCBkZXRlY3RPdmVyZmxvdyBmcm9tIFwiLi4vdXRpbHMvZGV0ZWN0T3ZlcmZsb3cuanNcIjtcbmltcG9ydCBnZXRWYXJpYXRpb24gZnJvbSBcIi4uL3V0aWxzL2dldFZhcmlhdGlvbi5qc1wiO1xuaW1wb3J0IGdldEZyZXNoU2lkZU9iamVjdCBmcm9tIFwiLi4vdXRpbHMvZ2V0RnJlc2hTaWRlT2JqZWN0LmpzXCI7XG5pbXBvcnQgeyBtaW4gYXMgbWF0aE1pbiwgbWF4IGFzIG1hdGhNYXggfSBmcm9tIFwiLi4vdXRpbHMvbWF0aC5qc1wiO1xuXG5mdW5jdGlvbiBwcmV2ZW50T3ZlcmZsb3coX3JlZikge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgb3B0aW9ucyA9IF9yZWYub3B0aW9ucyxcbiAgICAgIG5hbWUgPSBfcmVmLm5hbWU7XG4gIHZhciBfb3B0aW9ucyRtYWluQXhpcyA9IG9wdGlvbnMubWFpbkF4aXMsXG4gICAgICBjaGVja01haW5BeGlzID0gX29wdGlvbnMkbWFpbkF4aXMgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRtYWluQXhpcyxcbiAgICAgIF9vcHRpb25zJGFsdEF4aXMgPSBvcHRpb25zLmFsdEF4aXMsXG4gICAgICBjaGVja0FsdEF4aXMgPSBfb3B0aW9ucyRhbHRBeGlzID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJGFsdEF4aXMsXG4gICAgICBib3VuZGFyeSA9IG9wdGlvbnMuYm91bmRhcnksXG4gICAgICByb290Qm91bmRhcnkgPSBvcHRpb25zLnJvb3RCb3VuZGFyeSxcbiAgICAgIGFsdEJvdW5kYXJ5ID0gb3B0aW9ucy5hbHRCb3VuZGFyeSxcbiAgICAgIHBhZGRpbmcgPSBvcHRpb25zLnBhZGRpbmcsXG4gICAgICBfb3B0aW9ucyR0ZXRoZXIgPSBvcHRpb25zLnRldGhlcixcbiAgICAgIHRldGhlciA9IF9vcHRpb25zJHRldGhlciA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJHRldGhlcixcbiAgICAgIF9vcHRpb25zJHRldGhlck9mZnNldCA9IG9wdGlvbnMudGV0aGVyT2Zmc2V0LFxuICAgICAgdGV0aGVyT2Zmc2V0ID0gX29wdGlvbnMkdGV0aGVyT2Zmc2V0ID09PSB2b2lkIDAgPyAwIDogX29wdGlvbnMkdGV0aGVyT2Zmc2V0O1xuICB2YXIgb3ZlcmZsb3cgPSBkZXRlY3RPdmVyZmxvdyhzdGF0ZSwge1xuICAgIGJvdW5kYXJ5OiBib3VuZGFyeSxcbiAgICByb290Qm91bmRhcnk6IHJvb3RCb3VuZGFyeSxcbiAgICBwYWRkaW5nOiBwYWRkaW5nLFxuICAgIGFsdEJvdW5kYXJ5OiBhbHRCb3VuZGFyeVxuICB9KTtcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBnZXRCYXNlUGxhY2VtZW50KHN0YXRlLnBsYWNlbWVudCk7XG4gIHZhciB2YXJpYXRpb24gPSBnZXRWYXJpYXRpb24oc3RhdGUucGxhY2VtZW50KTtcbiAgdmFyIGlzQmFzZVBsYWNlbWVudCA9ICF2YXJpYXRpb247XG4gIHZhciBtYWluQXhpcyA9IGdldE1haW5BeGlzRnJvbVBsYWNlbWVudChiYXNlUGxhY2VtZW50KTtcbiAgdmFyIGFsdEF4aXMgPSBnZXRBbHRBeGlzKG1haW5BeGlzKTtcbiAgdmFyIHBvcHBlck9mZnNldHMgPSBzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHM7XG4gIHZhciByZWZlcmVuY2VSZWN0ID0gc3RhdGUucmVjdHMucmVmZXJlbmNlO1xuICB2YXIgcG9wcGVyUmVjdCA9IHN0YXRlLnJlY3RzLnBvcHBlcjtcbiAgdmFyIHRldGhlck9mZnNldFZhbHVlID0gdHlwZW9mIHRldGhlck9mZnNldCA9PT0gJ2Z1bmN0aW9uJyA/IHRldGhlck9mZnNldChPYmplY3QuYXNzaWduKHt9LCBzdGF0ZS5yZWN0cywge1xuICAgIHBsYWNlbWVudDogc3RhdGUucGxhY2VtZW50XG4gIH0pKSA6IHRldGhlck9mZnNldDtcbiAgdmFyIG5vcm1hbGl6ZWRUZXRoZXJPZmZzZXRWYWx1ZSA9IHR5cGVvZiB0ZXRoZXJPZmZzZXRWYWx1ZSA9PT0gJ251bWJlcicgPyB7XG4gICAgbWFpbkF4aXM6IHRldGhlck9mZnNldFZhbHVlLFxuICAgIGFsdEF4aXM6IHRldGhlck9mZnNldFZhbHVlXG4gIH0gOiBPYmplY3QuYXNzaWduKHtcbiAgICBtYWluQXhpczogMCxcbiAgICBhbHRBeGlzOiAwXG4gIH0sIHRldGhlck9mZnNldFZhbHVlKTtcbiAgdmFyIG9mZnNldE1vZGlmaWVyU3RhdGUgPSBzdGF0ZS5tb2RpZmllcnNEYXRhLm9mZnNldCA/IHN0YXRlLm1vZGlmaWVyc0RhdGEub2Zmc2V0W3N0YXRlLnBsYWNlbWVudF0gOiBudWxsO1xuICB2YXIgZGF0YSA9IHtcbiAgICB4OiAwLFxuICAgIHk6IDBcbiAgfTtcblxuICBpZiAoIXBvcHBlck9mZnNldHMpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoY2hlY2tNYWluQXhpcykge1xuICAgIHZhciBfb2Zmc2V0TW9kaWZpZXJTdGF0ZSQ7XG5cbiAgICB2YXIgbWFpblNpZGUgPSBtYWluQXhpcyA9PT0gJ3knID8gdG9wIDogbGVmdDtcbiAgICB2YXIgYWx0U2lkZSA9IG1haW5BeGlzID09PSAneScgPyBib3R0b20gOiByaWdodDtcbiAgICB2YXIgbGVuID0gbWFpbkF4aXMgPT09ICd5JyA/ICdoZWlnaHQnIDogJ3dpZHRoJztcbiAgICB2YXIgb2Zmc2V0ID0gcG9wcGVyT2Zmc2V0c1ttYWluQXhpc107XG4gICAgdmFyIG1pbiA9IG9mZnNldCArIG92ZXJmbG93W21haW5TaWRlXTtcbiAgICB2YXIgbWF4ID0gb2Zmc2V0IC0gb3ZlcmZsb3dbYWx0U2lkZV07XG4gICAgdmFyIGFkZGl0aXZlID0gdGV0aGVyID8gLXBvcHBlclJlY3RbbGVuXSAvIDIgOiAwO1xuICAgIHZhciBtaW5MZW4gPSB2YXJpYXRpb24gPT09IHN0YXJ0ID8gcmVmZXJlbmNlUmVjdFtsZW5dIDogcG9wcGVyUmVjdFtsZW5dO1xuICAgIHZhciBtYXhMZW4gPSB2YXJpYXRpb24gPT09IHN0YXJ0ID8gLXBvcHBlclJlY3RbbGVuXSA6IC1yZWZlcmVuY2VSZWN0W2xlbl07IC8vIFdlIG5lZWQgdG8gaW5jbHVkZSB0aGUgYXJyb3cgaW4gdGhlIGNhbGN1bGF0aW9uIHNvIHRoZSBhcnJvdyBkb2Vzbid0IGdvXG4gICAgLy8gb3V0c2lkZSB0aGUgcmVmZXJlbmNlIGJvdW5kc1xuXG4gICAgdmFyIGFycm93RWxlbWVudCA9IHN0YXRlLmVsZW1lbnRzLmFycm93O1xuICAgIHZhciBhcnJvd1JlY3QgPSB0ZXRoZXIgJiYgYXJyb3dFbGVtZW50ID8gZ2V0TGF5b3V0UmVjdChhcnJvd0VsZW1lbnQpIDoge1xuICAgICAgd2lkdGg6IDAsXG4gICAgICBoZWlnaHQ6IDBcbiAgICB9O1xuICAgIHZhciBhcnJvd1BhZGRpbmdPYmplY3QgPSBzdGF0ZS5tb2RpZmllcnNEYXRhWydhcnJvdyNwZXJzaXN0ZW50J10gPyBzdGF0ZS5tb2RpZmllcnNEYXRhWydhcnJvdyNwZXJzaXN0ZW50J10ucGFkZGluZyA6IGdldEZyZXNoU2lkZU9iamVjdCgpO1xuICAgIHZhciBhcnJvd1BhZGRpbmdNaW4gPSBhcnJvd1BhZGRpbmdPYmplY3RbbWFpblNpZGVdO1xuICAgIHZhciBhcnJvd1BhZGRpbmdNYXggPSBhcnJvd1BhZGRpbmdPYmplY3RbYWx0U2lkZV07IC8vIElmIHRoZSByZWZlcmVuY2UgbGVuZ3RoIGlzIHNtYWxsZXIgdGhhbiB0aGUgYXJyb3cgbGVuZ3RoLCB3ZSBkb24ndCB3YW50XG4gICAgLy8gdG8gaW5jbHVkZSBpdHMgZnVsbCBzaXplIGluIHRoZSBjYWxjdWxhdGlvbi4gSWYgdGhlIHJlZmVyZW5jZSBpcyBzbWFsbFxuICAgIC8vIGFuZCBuZWFyIHRoZSBlZGdlIG9mIGEgYm91bmRhcnksIHRoZSBwb3BwZXIgY2FuIG92ZXJmbG93IGV2ZW4gaWYgdGhlXG4gICAgLy8gcmVmZXJlbmNlIGlzIG5vdCBvdmVyZmxvd2luZyBhcyB3ZWxsIChlLmcuIHZpcnR1YWwgZWxlbWVudHMgd2l0aCBub1xuICAgIC8vIHdpZHRoIG9yIGhlaWdodClcblxuICAgIHZhciBhcnJvd0xlbiA9IHdpdGhpbigwLCByZWZlcmVuY2VSZWN0W2xlbl0sIGFycm93UmVjdFtsZW5dKTtcbiAgICB2YXIgbWluT2Zmc2V0ID0gaXNCYXNlUGxhY2VtZW50ID8gcmVmZXJlbmNlUmVjdFtsZW5dIC8gMiAtIGFkZGl0aXZlIC0gYXJyb3dMZW4gLSBhcnJvd1BhZGRpbmdNaW4gLSBub3JtYWxpemVkVGV0aGVyT2Zmc2V0VmFsdWUubWFpbkF4aXMgOiBtaW5MZW4gLSBhcnJvd0xlbiAtIGFycm93UGFkZGluZ01pbiAtIG5vcm1hbGl6ZWRUZXRoZXJPZmZzZXRWYWx1ZS5tYWluQXhpcztcbiAgICB2YXIgbWF4T2Zmc2V0ID0gaXNCYXNlUGxhY2VtZW50ID8gLXJlZmVyZW5jZVJlY3RbbGVuXSAvIDIgKyBhZGRpdGl2ZSArIGFycm93TGVuICsgYXJyb3dQYWRkaW5nTWF4ICsgbm9ybWFsaXplZFRldGhlck9mZnNldFZhbHVlLm1haW5BeGlzIDogbWF4TGVuICsgYXJyb3dMZW4gKyBhcnJvd1BhZGRpbmdNYXggKyBub3JtYWxpemVkVGV0aGVyT2Zmc2V0VmFsdWUubWFpbkF4aXM7XG4gICAgdmFyIGFycm93T2Zmc2V0UGFyZW50ID0gc3RhdGUuZWxlbWVudHMuYXJyb3cgJiYgZ2V0T2Zmc2V0UGFyZW50KHN0YXRlLmVsZW1lbnRzLmFycm93KTtcbiAgICB2YXIgY2xpZW50T2Zmc2V0ID0gYXJyb3dPZmZzZXRQYXJlbnQgPyBtYWluQXhpcyA9PT0gJ3knID8gYXJyb3dPZmZzZXRQYXJlbnQuY2xpZW50VG9wIHx8IDAgOiBhcnJvd09mZnNldFBhcmVudC5jbGllbnRMZWZ0IHx8IDAgOiAwO1xuICAgIHZhciBvZmZzZXRNb2RpZmllclZhbHVlID0gKF9vZmZzZXRNb2RpZmllclN0YXRlJCA9IG9mZnNldE1vZGlmaWVyU3RhdGUgPT0gbnVsbCA/IHZvaWQgMCA6IG9mZnNldE1vZGlmaWVyU3RhdGVbbWFpbkF4aXNdKSAhPSBudWxsID8gX29mZnNldE1vZGlmaWVyU3RhdGUkIDogMDtcbiAgICB2YXIgdGV0aGVyTWluID0gb2Zmc2V0ICsgbWluT2Zmc2V0IC0gb2Zmc2V0TW9kaWZpZXJWYWx1ZSAtIGNsaWVudE9mZnNldDtcbiAgICB2YXIgdGV0aGVyTWF4ID0gb2Zmc2V0ICsgbWF4T2Zmc2V0IC0gb2Zmc2V0TW9kaWZpZXJWYWx1ZTtcbiAgICB2YXIgcHJldmVudGVkT2Zmc2V0ID0gd2l0aGluKHRldGhlciA/IG1hdGhNaW4obWluLCB0ZXRoZXJNaW4pIDogbWluLCBvZmZzZXQsIHRldGhlciA/IG1hdGhNYXgobWF4LCB0ZXRoZXJNYXgpIDogbWF4KTtcbiAgICBwb3BwZXJPZmZzZXRzW21haW5BeGlzXSA9IHByZXZlbnRlZE9mZnNldDtcbiAgICBkYXRhW21haW5BeGlzXSA9IHByZXZlbnRlZE9mZnNldCAtIG9mZnNldDtcbiAgfVxuXG4gIGlmIChjaGVja0FsdEF4aXMpIHtcbiAgICB2YXIgX29mZnNldE1vZGlmaWVyU3RhdGUkMjtcblxuICAgIHZhciBfbWFpblNpZGUgPSBtYWluQXhpcyA9PT0gJ3gnID8gdG9wIDogbGVmdDtcblxuICAgIHZhciBfYWx0U2lkZSA9IG1haW5BeGlzID09PSAneCcgPyBib3R0b20gOiByaWdodDtcblxuICAgIHZhciBfb2Zmc2V0ID0gcG9wcGVyT2Zmc2V0c1thbHRBeGlzXTtcblxuICAgIHZhciBfbGVuID0gYWx0QXhpcyA9PT0gJ3knID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuXG4gICAgdmFyIF9taW4gPSBfb2Zmc2V0ICsgb3ZlcmZsb3dbX21haW5TaWRlXTtcblxuICAgIHZhciBfbWF4ID0gX29mZnNldCAtIG92ZXJmbG93W19hbHRTaWRlXTtcblxuICAgIHZhciBpc09yaWdpblNpZGUgPSBbdG9wLCBsZWZ0XS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpICE9PSAtMTtcblxuICAgIHZhciBfb2Zmc2V0TW9kaWZpZXJWYWx1ZSA9IChfb2Zmc2V0TW9kaWZpZXJTdGF0ZSQyID0gb2Zmc2V0TW9kaWZpZXJTdGF0ZSA9PSBudWxsID8gdm9pZCAwIDogb2Zmc2V0TW9kaWZpZXJTdGF0ZVthbHRBeGlzXSkgIT0gbnVsbCA/IF9vZmZzZXRNb2RpZmllclN0YXRlJDIgOiAwO1xuXG4gICAgdmFyIF90ZXRoZXJNaW4gPSBpc09yaWdpblNpZGUgPyBfbWluIDogX29mZnNldCAtIHJlZmVyZW5jZVJlY3RbX2xlbl0gLSBwb3BwZXJSZWN0W19sZW5dIC0gX29mZnNldE1vZGlmaWVyVmFsdWUgKyBub3JtYWxpemVkVGV0aGVyT2Zmc2V0VmFsdWUuYWx0QXhpcztcblxuICAgIHZhciBfdGV0aGVyTWF4ID0gaXNPcmlnaW5TaWRlID8gX29mZnNldCArIHJlZmVyZW5jZVJlY3RbX2xlbl0gKyBwb3BwZXJSZWN0W19sZW5dIC0gX29mZnNldE1vZGlmaWVyVmFsdWUgLSBub3JtYWxpemVkVGV0aGVyT2Zmc2V0VmFsdWUuYWx0QXhpcyA6IF9tYXg7XG5cbiAgICB2YXIgX3ByZXZlbnRlZE9mZnNldCA9IHRldGhlciAmJiBpc09yaWdpblNpZGUgPyB3aXRoaW5NYXhDbGFtcChfdGV0aGVyTWluLCBfb2Zmc2V0LCBfdGV0aGVyTWF4KSA6IHdpdGhpbih0ZXRoZXIgPyBfdGV0aGVyTWluIDogX21pbiwgX29mZnNldCwgdGV0aGVyID8gX3RldGhlck1heCA6IF9tYXgpO1xuXG4gICAgcG9wcGVyT2Zmc2V0c1thbHRBeGlzXSA9IF9wcmV2ZW50ZWRPZmZzZXQ7XG4gICAgZGF0YVthbHRBeGlzXSA9IF9wcmV2ZW50ZWRPZmZzZXQgLSBfb2Zmc2V0O1xuICB9XG5cbiAgc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lXSA9IGRhdGE7XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdwcmV2ZW50T3ZlcmZsb3cnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ21haW4nLFxuICBmbjogcHJldmVudE92ZXJmbG93LFxuICByZXF1aXJlc0lmRXhpc3RzOiBbJ29mZnNldCddXG59OyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEhUTUxFbGVtZW50U2Nyb2xsKGVsZW1lbnQpIHtcbiAgcmV0dXJuIHtcbiAgICBzY3JvbGxMZWZ0OiBlbGVtZW50LnNjcm9sbExlZnQsXG4gICAgc2Nyb2xsVG9wOiBlbGVtZW50LnNjcm9sbFRvcFxuICB9O1xufSIsImltcG9ydCBnZXRXaW5kb3dTY3JvbGwgZnJvbSBcIi4vZ2V0V2luZG93U2Nyb2xsLmpzXCI7XG5pbXBvcnQgZ2V0V2luZG93IGZyb20gXCIuL2dldFdpbmRvdy5qc1wiO1xuaW1wb3J0IHsgaXNIVE1MRWxlbWVudCB9IGZyb20gXCIuL2luc3RhbmNlT2YuanNcIjtcbmltcG9ydCBnZXRIVE1MRWxlbWVudFNjcm9sbCBmcm9tIFwiLi9nZXRIVE1MRWxlbWVudFNjcm9sbC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Tm9kZVNjcm9sbChub2RlKSB7XG4gIGlmIChub2RlID09PSBnZXRXaW5kb3cobm9kZSkgfHwgIWlzSFRNTEVsZW1lbnQobm9kZSkpIHtcbiAgICByZXR1cm4gZ2V0V2luZG93U2Nyb2xsKG5vZGUpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBnZXRIVE1MRWxlbWVudFNjcm9sbChub2RlKTtcbiAgfVxufSIsImltcG9ydCBnZXRCb3VuZGluZ0NsaWVudFJlY3QgZnJvbSBcIi4vZ2V0Qm91bmRpbmdDbGllbnRSZWN0LmpzXCI7XG5pbXBvcnQgZ2V0Tm9kZVNjcm9sbCBmcm9tIFwiLi9nZXROb2RlU2Nyb2xsLmpzXCI7XG5pbXBvcnQgZ2V0Tm9kZU5hbWUgZnJvbSBcIi4vZ2V0Tm9kZU5hbWUuanNcIjtcbmltcG9ydCB7IGlzSFRNTEVsZW1lbnQgfSBmcm9tIFwiLi9pbnN0YW5jZU9mLmpzXCI7XG5pbXBvcnQgZ2V0V2luZG93U2Nyb2xsQmFyWCBmcm9tIFwiLi9nZXRXaW5kb3dTY3JvbGxCYXJYLmpzXCI7XG5pbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gXCIuL2dldERvY3VtZW50RWxlbWVudC5qc1wiO1xuaW1wb3J0IGlzU2Nyb2xsUGFyZW50IGZyb20gXCIuL2lzU2Nyb2xsUGFyZW50LmpzXCI7XG5pbXBvcnQgeyByb3VuZCB9IGZyb20gXCIuLi91dGlscy9tYXRoLmpzXCI7XG5cbmZ1bmN0aW9uIGlzRWxlbWVudFNjYWxlZChlbGVtZW50KSB7XG4gIHZhciByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgdmFyIHNjYWxlWCA9IHJvdW5kKHJlY3Qud2lkdGgpIC8gZWxlbWVudC5vZmZzZXRXaWR0aCB8fCAxO1xuICB2YXIgc2NhbGVZID0gcm91bmQocmVjdC5oZWlnaHQpIC8gZWxlbWVudC5vZmZzZXRIZWlnaHQgfHwgMTtcbiAgcmV0dXJuIHNjYWxlWCAhPT0gMSB8fCBzY2FsZVkgIT09IDE7XG59IC8vIFJldHVybnMgdGhlIGNvbXBvc2l0ZSByZWN0IG9mIGFuIGVsZW1lbnQgcmVsYXRpdmUgdG8gaXRzIG9mZnNldFBhcmVudC5cbi8vIENvbXBvc2l0ZSBtZWFucyBpdCB0YWtlcyBpbnRvIGFjY291bnQgdHJhbnNmb3JtcyBhcyB3ZWxsIGFzIGxheW91dC5cblxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRDb21wb3NpdGVSZWN0KGVsZW1lbnRPclZpcnR1YWxFbGVtZW50LCBvZmZzZXRQYXJlbnQsIGlzRml4ZWQpIHtcbiAgaWYgKGlzRml4ZWQgPT09IHZvaWQgMCkge1xuICAgIGlzRml4ZWQgPSBmYWxzZTtcbiAgfVxuXG4gIHZhciBpc09mZnNldFBhcmVudEFuRWxlbWVudCA9IGlzSFRNTEVsZW1lbnQob2Zmc2V0UGFyZW50KTtcbiAgdmFyIG9mZnNldFBhcmVudElzU2NhbGVkID0gaXNIVE1MRWxlbWVudChvZmZzZXRQYXJlbnQpICYmIGlzRWxlbWVudFNjYWxlZChvZmZzZXRQYXJlbnQpO1xuICB2YXIgZG9jdW1lbnRFbGVtZW50ID0gZ2V0RG9jdW1lbnRFbGVtZW50KG9mZnNldFBhcmVudCk7XG4gIHZhciByZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnRPclZpcnR1YWxFbGVtZW50LCBvZmZzZXRQYXJlbnRJc1NjYWxlZCwgaXNGaXhlZCk7XG4gIHZhciBzY3JvbGwgPSB7XG4gICAgc2Nyb2xsTGVmdDogMCxcbiAgICBzY3JvbGxUb3A6IDBcbiAgfTtcbiAgdmFyIG9mZnNldHMgPSB7XG4gICAgeDogMCxcbiAgICB5OiAwXG4gIH07XG5cbiAgaWYgKGlzT2Zmc2V0UGFyZW50QW5FbGVtZW50IHx8ICFpc09mZnNldFBhcmVudEFuRWxlbWVudCAmJiAhaXNGaXhlZCkge1xuICAgIGlmIChnZXROb2RlTmFtZShvZmZzZXRQYXJlbnQpICE9PSAnYm9keScgfHwgLy8gaHR0cHM6Ly9naXRodWIuY29tL3BvcHBlcmpzL3BvcHBlci1jb3JlL2lzc3Vlcy8xMDc4XG4gICAgaXNTY3JvbGxQYXJlbnQoZG9jdW1lbnRFbGVtZW50KSkge1xuICAgICAgc2Nyb2xsID0gZ2V0Tm9kZVNjcm9sbChvZmZzZXRQYXJlbnQpO1xuICAgIH1cblxuICAgIGlmIChpc0hUTUxFbGVtZW50KG9mZnNldFBhcmVudCkpIHtcbiAgICAgIG9mZnNldHMgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3Qob2Zmc2V0UGFyZW50LCB0cnVlKTtcbiAgICAgIG9mZnNldHMueCArPSBvZmZzZXRQYXJlbnQuY2xpZW50TGVmdDtcbiAgICAgIG9mZnNldHMueSArPSBvZmZzZXRQYXJlbnQuY2xpZW50VG9wO1xuICAgIH0gZWxzZSBpZiAoZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgICBvZmZzZXRzLnggPSBnZXRXaW5kb3dTY3JvbGxCYXJYKGRvY3VtZW50RWxlbWVudCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB4OiByZWN0LmxlZnQgKyBzY3JvbGwuc2Nyb2xsTGVmdCAtIG9mZnNldHMueCxcbiAgICB5OiByZWN0LnRvcCArIHNjcm9sbC5zY3JvbGxUb3AgLSBvZmZzZXRzLnksXG4gICAgd2lkdGg6IHJlY3Qud2lkdGgsXG4gICAgaGVpZ2h0OiByZWN0LmhlaWdodFxuICB9O1xufSIsImltcG9ydCB7IG1vZGlmaWVyUGhhc2VzIH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7IC8vIHNvdXJjZTogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNDk4NzUyNTVcblxuZnVuY3Rpb24gb3JkZXIobW9kaWZpZXJzKSB7XG4gIHZhciBtYXAgPSBuZXcgTWFwKCk7XG4gIHZhciB2aXNpdGVkID0gbmV3IFNldCgpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIG1vZGlmaWVycy5mb3JFYWNoKGZ1bmN0aW9uIChtb2RpZmllcikge1xuICAgIG1hcC5zZXQobW9kaWZpZXIubmFtZSwgbW9kaWZpZXIpO1xuICB9KTsgLy8gT24gdmlzaXRpbmcgb2JqZWN0LCBjaGVjayBmb3IgaXRzIGRlcGVuZGVuY2llcyBhbmQgdmlzaXQgdGhlbSByZWN1cnNpdmVseVxuXG4gIGZ1bmN0aW9uIHNvcnQobW9kaWZpZXIpIHtcbiAgICB2aXNpdGVkLmFkZChtb2RpZmllci5uYW1lKTtcbiAgICB2YXIgcmVxdWlyZXMgPSBbXS5jb25jYXQobW9kaWZpZXIucmVxdWlyZXMgfHwgW10sIG1vZGlmaWVyLnJlcXVpcmVzSWZFeGlzdHMgfHwgW10pO1xuICAgIHJlcXVpcmVzLmZvckVhY2goZnVuY3Rpb24gKGRlcCkge1xuICAgICAgaWYgKCF2aXNpdGVkLmhhcyhkZXApKSB7XG4gICAgICAgIHZhciBkZXBNb2RpZmllciA9IG1hcC5nZXQoZGVwKTtcblxuICAgICAgICBpZiAoZGVwTW9kaWZpZXIpIHtcbiAgICAgICAgICBzb3J0KGRlcE1vZGlmaWVyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJlc3VsdC5wdXNoKG1vZGlmaWVyKTtcbiAgfVxuXG4gIG1vZGlmaWVycy5mb3JFYWNoKGZ1bmN0aW9uIChtb2RpZmllcikge1xuICAgIGlmICghdmlzaXRlZC5oYXMobW9kaWZpZXIubmFtZSkpIHtcbiAgICAgIC8vIGNoZWNrIGZvciB2aXNpdGVkIG9iamVjdFxuICAgICAgc29ydChtb2RpZmllcik7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb3JkZXJNb2RpZmllcnMobW9kaWZpZXJzKSB7XG4gIC8vIG9yZGVyIGJhc2VkIG9uIGRlcGVuZGVuY2llc1xuICB2YXIgb3JkZXJlZE1vZGlmaWVycyA9IG9yZGVyKG1vZGlmaWVycyk7IC8vIG9yZGVyIGJhc2VkIG9uIHBoYXNlXG5cbiAgcmV0dXJuIG1vZGlmaWVyUGhhc2VzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBwaGFzZSkge1xuICAgIHJldHVybiBhY2MuY29uY2F0KG9yZGVyZWRNb2RpZmllcnMuZmlsdGVyKGZ1bmN0aW9uIChtb2RpZmllcikge1xuICAgICAgcmV0dXJuIG1vZGlmaWVyLnBoYXNlID09PSBwaGFzZTtcbiAgICB9KSk7XG4gIH0sIFtdKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWJvdW5jZShmbikge1xuICB2YXIgcGVuZGluZztcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXBlbmRpbmcpIHtcbiAgICAgIHBlbmRpbmcgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBwZW5kaW5nID0gdW5kZWZpbmVkO1xuICAgICAgICAgIHJlc29sdmUoZm4oKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBlbmRpbmc7XG4gIH07XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWVyZ2VCeU5hbWUobW9kaWZpZXJzKSB7XG4gIHZhciBtZXJnZWQgPSBtb2RpZmllcnMucmVkdWNlKGZ1bmN0aW9uIChtZXJnZWQsIGN1cnJlbnQpIHtcbiAgICB2YXIgZXhpc3RpbmcgPSBtZXJnZWRbY3VycmVudC5uYW1lXTtcbiAgICBtZXJnZWRbY3VycmVudC5uYW1lXSA9IGV4aXN0aW5nID8gT2JqZWN0LmFzc2lnbih7fSwgZXhpc3RpbmcsIGN1cnJlbnQsIHtcbiAgICAgIG9wdGlvbnM6IE9iamVjdC5hc3NpZ24oe30sIGV4aXN0aW5nLm9wdGlvbnMsIGN1cnJlbnQub3B0aW9ucyksXG4gICAgICBkYXRhOiBPYmplY3QuYXNzaWduKHt9LCBleGlzdGluZy5kYXRhLCBjdXJyZW50LmRhdGEpXG4gICAgfSkgOiBjdXJyZW50O1xuICAgIHJldHVybiBtZXJnZWQ7XG4gIH0sIHt9KTsgLy8gSUUxMSBkb2VzIG5vdCBzdXBwb3J0IE9iamVjdC52YWx1ZXNcblxuICByZXR1cm4gT2JqZWN0LmtleXMobWVyZ2VkKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBtZXJnZWRba2V5XTtcbiAgfSk7XG59IiwiaW1wb3J0IGdldENvbXBvc2l0ZVJlY3QgZnJvbSBcIi4vZG9tLXV0aWxzL2dldENvbXBvc2l0ZVJlY3QuanNcIjtcbmltcG9ydCBnZXRMYXlvdXRSZWN0IGZyb20gXCIuL2RvbS11dGlscy9nZXRMYXlvdXRSZWN0LmpzXCI7XG5pbXBvcnQgbGlzdFNjcm9sbFBhcmVudHMgZnJvbSBcIi4vZG9tLXV0aWxzL2xpc3RTY3JvbGxQYXJlbnRzLmpzXCI7XG5pbXBvcnQgZ2V0T2Zmc2V0UGFyZW50IGZyb20gXCIuL2RvbS11dGlscy9nZXRPZmZzZXRQYXJlbnQuanNcIjtcbmltcG9ydCBvcmRlck1vZGlmaWVycyBmcm9tIFwiLi91dGlscy9vcmRlck1vZGlmaWVycy5qc1wiO1xuaW1wb3J0IGRlYm91bmNlIGZyb20gXCIuL3V0aWxzL2RlYm91bmNlLmpzXCI7XG5pbXBvcnQgbWVyZ2VCeU5hbWUgZnJvbSBcIi4vdXRpbHMvbWVyZ2VCeU5hbWUuanNcIjtcbmltcG9ydCBkZXRlY3RPdmVyZmxvdyBmcm9tIFwiLi91dGlscy9kZXRlY3RPdmVyZmxvdy5qc1wiO1xuaW1wb3J0IHsgaXNFbGVtZW50IH0gZnJvbSBcIi4vZG9tLXV0aWxzL2luc3RhbmNlT2YuanNcIjtcbnZhciBERUZBVUxUX09QVElPTlMgPSB7XG4gIHBsYWNlbWVudDogJ2JvdHRvbScsXG4gIG1vZGlmaWVyczogW10sXG4gIHN0cmF0ZWd5OiAnYWJzb2x1dGUnXG59O1xuXG5mdW5jdGlvbiBhcmVWYWxpZEVsZW1lbnRzKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuICFhcmdzLnNvbWUoZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gIShlbGVtZW50ICYmIHR5cGVvZiBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCA9PT0gJ2Z1bmN0aW9uJyk7XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcG9wcGVyR2VuZXJhdG9yKGdlbmVyYXRvck9wdGlvbnMpIHtcbiAgaWYgKGdlbmVyYXRvck9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIGdlbmVyYXRvck9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIHZhciBfZ2VuZXJhdG9yT3B0aW9ucyA9IGdlbmVyYXRvck9wdGlvbnMsXG4gICAgICBfZ2VuZXJhdG9yT3B0aW9ucyRkZWYgPSBfZ2VuZXJhdG9yT3B0aW9ucy5kZWZhdWx0TW9kaWZpZXJzLFxuICAgICAgZGVmYXVsdE1vZGlmaWVycyA9IF9nZW5lcmF0b3JPcHRpb25zJGRlZiA9PT0gdm9pZCAwID8gW10gOiBfZ2VuZXJhdG9yT3B0aW9ucyRkZWYsXG4gICAgICBfZ2VuZXJhdG9yT3B0aW9ucyRkZWYyID0gX2dlbmVyYXRvck9wdGlvbnMuZGVmYXVsdE9wdGlvbnMsXG4gICAgICBkZWZhdWx0T3B0aW9ucyA9IF9nZW5lcmF0b3JPcHRpb25zJGRlZjIgPT09IHZvaWQgMCA/IERFRkFVTFRfT1BUSU9OUyA6IF9nZW5lcmF0b3JPcHRpb25zJGRlZjI7XG4gIHJldHVybiBmdW5jdGlvbiBjcmVhdGVQb3BwZXIocmVmZXJlbmNlLCBwb3BwZXIsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0gZGVmYXVsdE9wdGlvbnM7XG4gICAgfVxuXG4gICAgdmFyIHN0YXRlID0ge1xuICAgICAgcGxhY2VtZW50OiAnYm90dG9tJyxcbiAgICAgIG9yZGVyZWRNb2RpZmllcnM6IFtdLFxuICAgICAgb3B0aW9uczogT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9PUFRJT05TLCBkZWZhdWx0T3B0aW9ucyksXG4gICAgICBtb2RpZmllcnNEYXRhOiB7fSxcbiAgICAgIGVsZW1lbnRzOiB7XG4gICAgICAgIHJlZmVyZW5jZTogcmVmZXJlbmNlLFxuICAgICAgICBwb3BwZXI6IHBvcHBlclxuICAgICAgfSxcbiAgICAgIGF0dHJpYnV0ZXM6IHt9LFxuICAgICAgc3R5bGVzOiB7fVxuICAgIH07XG4gICAgdmFyIGVmZmVjdENsZWFudXBGbnMgPSBbXTtcbiAgICB2YXIgaXNEZXN0cm95ZWQgPSBmYWxzZTtcbiAgICB2YXIgaW5zdGFuY2UgPSB7XG4gICAgICBzdGF0ZTogc3RhdGUsXG4gICAgICBzZXRPcHRpb25zOiBmdW5jdGlvbiBzZXRPcHRpb25zKHNldE9wdGlvbnNBY3Rpb24pIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygc2V0T3B0aW9uc0FjdGlvbiA9PT0gJ2Z1bmN0aW9uJyA/IHNldE9wdGlvbnNBY3Rpb24oc3RhdGUub3B0aW9ucykgOiBzZXRPcHRpb25zQWN0aW9uO1xuICAgICAgICBjbGVhbnVwTW9kaWZpZXJFZmZlY3RzKCk7XG4gICAgICAgIHN0YXRlLm9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0T3B0aW9ucywgc3RhdGUub3B0aW9ucywgb3B0aW9ucyk7XG4gICAgICAgIHN0YXRlLnNjcm9sbFBhcmVudHMgPSB7XG4gICAgICAgICAgcmVmZXJlbmNlOiBpc0VsZW1lbnQocmVmZXJlbmNlKSA/IGxpc3RTY3JvbGxQYXJlbnRzKHJlZmVyZW5jZSkgOiByZWZlcmVuY2UuY29udGV4dEVsZW1lbnQgPyBsaXN0U2Nyb2xsUGFyZW50cyhyZWZlcmVuY2UuY29udGV4dEVsZW1lbnQpIDogW10sXG4gICAgICAgICAgcG9wcGVyOiBsaXN0U2Nyb2xsUGFyZW50cyhwb3BwZXIpXG4gICAgICAgIH07IC8vIE9yZGVycyB0aGUgbW9kaWZpZXJzIGJhc2VkIG9uIHRoZWlyIGRlcGVuZGVuY2llcyBhbmQgYHBoYXNlYFxuICAgICAgICAvLyBwcm9wZXJ0aWVzXG5cbiAgICAgICAgdmFyIG9yZGVyZWRNb2RpZmllcnMgPSBvcmRlck1vZGlmaWVycyhtZXJnZUJ5TmFtZShbXS5jb25jYXQoZGVmYXVsdE1vZGlmaWVycywgc3RhdGUub3B0aW9ucy5tb2RpZmllcnMpKSk7IC8vIFN0cmlwIG91dCBkaXNhYmxlZCBtb2RpZmllcnNcblxuICAgICAgICBzdGF0ZS5vcmRlcmVkTW9kaWZpZXJzID0gb3JkZXJlZE1vZGlmaWVycy5maWx0ZXIoZnVuY3Rpb24gKG0pIHtcbiAgICAgICAgICByZXR1cm4gbS5lbmFibGVkO1xuICAgICAgICB9KTtcbiAgICAgICAgcnVuTW9kaWZpZXJFZmZlY3RzKCk7XG4gICAgICAgIHJldHVybiBpbnN0YW5jZS51cGRhdGUoKTtcbiAgICAgIH0sXG4gICAgICAvLyBTeW5jIHVwZGF0ZSDigJMgaXQgd2lsbCBhbHdheXMgYmUgZXhlY3V0ZWQsIGV2ZW4gaWYgbm90IG5lY2Vzc2FyeS4gVGhpc1xuICAgICAgLy8gaXMgdXNlZnVsIGZvciBsb3cgZnJlcXVlbmN5IHVwZGF0ZXMgd2hlcmUgc3luYyBiZWhhdmlvciBzaW1wbGlmaWVzIHRoZVxuICAgICAgLy8gbG9naWMuXG4gICAgICAvLyBGb3IgaGlnaCBmcmVxdWVuY3kgdXBkYXRlcyAoZS5nLiBgcmVzaXplYCBhbmQgYHNjcm9sbGAgZXZlbnRzKSwgYWx3YXlzXG4gICAgICAvLyBwcmVmZXIgdGhlIGFzeW5jIFBvcHBlciN1cGRhdGUgbWV0aG9kXG4gICAgICBmb3JjZVVwZGF0ZTogZnVuY3Rpb24gZm9yY2VVcGRhdGUoKSB7XG4gICAgICAgIGlmIChpc0Rlc3Ryb3llZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBfc3RhdGUkZWxlbWVudHMgPSBzdGF0ZS5lbGVtZW50cyxcbiAgICAgICAgICAgIHJlZmVyZW5jZSA9IF9zdGF0ZSRlbGVtZW50cy5yZWZlcmVuY2UsXG4gICAgICAgICAgICBwb3BwZXIgPSBfc3RhdGUkZWxlbWVudHMucG9wcGVyOyAvLyBEb24ndCBwcm9jZWVkIGlmIGByZWZlcmVuY2VgIG9yIGBwb3BwZXJgIGFyZSBub3QgdmFsaWQgZWxlbWVudHNcbiAgICAgICAgLy8gYW55bW9yZVxuXG4gICAgICAgIGlmICghYXJlVmFsaWRFbGVtZW50cyhyZWZlcmVuY2UsIHBvcHBlcikpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gLy8gU3RvcmUgdGhlIHJlZmVyZW5jZSBhbmQgcG9wcGVyIHJlY3RzIHRvIGJlIHJlYWQgYnkgbW9kaWZpZXJzXG5cblxuICAgICAgICBzdGF0ZS5yZWN0cyA9IHtcbiAgICAgICAgICByZWZlcmVuY2U6IGdldENvbXBvc2l0ZVJlY3QocmVmZXJlbmNlLCBnZXRPZmZzZXRQYXJlbnQocG9wcGVyKSwgc3RhdGUub3B0aW9ucy5zdHJhdGVneSA9PT0gJ2ZpeGVkJyksXG4gICAgICAgICAgcG9wcGVyOiBnZXRMYXlvdXRSZWN0KHBvcHBlcilcbiAgICAgICAgfTsgLy8gTW9kaWZpZXJzIGhhdmUgdGhlIGFiaWxpdHkgdG8gcmVzZXQgdGhlIGN1cnJlbnQgdXBkYXRlIGN5Y2xlLiBUaGVcbiAgICAgICAgLy8gbW9zdCBjb21tb24gdXNlIGNhc2UgZm9yIHRoaXMgaXMgdGhlIGBmbGlwYCBtb2RpZmllciBjaGFuZ2luZyB0aGVcbiAgICAgICAgLy8gcGxhY2VtZW50LCB3aGljaCB0aGVuIG5lZWRzIHRvIHJlLXJ1biBhbGwgdGhlIG1vZGlmaWVycywgYmVjYXVzZSB0aGVcbiAgICAgICAgLy8gbG9naWMgd2FzIHByZXZpb3VzbHkgcmFuIGZvciB0aGUgcHJldmlvdXMgcGxhY2VtZW50IGFuZCBpcyB0aGVyZWZvcmVcbiAgICAgICAgLy8gc3RhbGUvaW5jb3JyZWN0XG5cbiAgICAgICAgc3RhdGUucmVzZXQgPSBmYWxzZTtcbiAgICAgICAgc3RhdGUucGxhY2VtZW50ID0gc3RhdGUub3B0aW9ucy5wbGFjZW1lbnQ7IC8vIE9uIGVhY2ggdXBkYXRlIGN5Y2xlLCB0aGUgYG1vZGlmaWVyc0RhdGFgIHByb3BlcnR5IGZvciBlYWNoIG1vZGlmaWVyXG4gICAgICAgIC8vIGlzIGZpbGxlZCB3aXRoIHRoZSBpbml0aWFsIGRhdGEgc3BlY2lmaWVkIGJ5IHRoZSBtb2RpZmllci4gVGhpcyBtZWFuc1xuICAgICAgICAvLyBpdCBkb2Vzbid0IHBlcnNpc3QgYW5kIGlzIGZyZXNoIG9uIGVhY2ggdXBkYXRlLlxuICAgICAgICAvLyBUbyBlbnN1cmUgcGVyc2lzdGVudCBkYXRhLCB1c2UgYCR7bmFtZX0jcGVyc2lzdGVudGBcblxuICAgICAgICBzdGF0ZS5vcmRlcmVkTW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgICAgICAgcmV0dXJuIHN0YXRlLm1vZGlmaWVyc0RhdGFbbW9kaWZpZXIubmFtZV0gPSBPYmplY3QuYXNzaWduKHt9LCBtb2RpZmllci5kYXRhKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHN0YXRlLm9yZGVyZWRNb2RpZmllcnMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgaWYgKHN0YXRlLnJlc2V0ID09PSB0cnVlKSB7XG4gICAgICAgICAgICBzdGF0ZS5yZXNldCA9IGZhbHNlO1xuICAgICAgICAgICAgaW5kZXggPSAtMTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBfc3RhdGUkb3JkZXJlZE1vZGlmaWUgPSBzdGF0ZS5vcmRlcmVkTW9kaWZpZXJzW2luZGV4XSxcbiAgICAgICAgICAgICAgZm4gPSBfc3RhdGUkb3JkZXJlZE1vZGlmaWUuZm4sXG4gICAgICAgICAgICAgIF9zdGF0ZSRvcmRlcmVkTW9kaWZpZTIgPSBfc3RhdGUkb3JkZXJlZE1vZGlmaWUub3B0aW9ucyxcbiAgICAgICAgICAgICAgX29wdGlvbnMgPSBfc3RhdGUkb3JkZXJlZE1vZGlmaWUyID09PSB2b2lkIDAgPyB7fSA6IF9zdGF0ZSRvcmRlcmVkTW9kaWZpZTIsXG4gICAgICAgICAgICAgIG5hbWUgPSBfc3RhdGUkb3JkZXJlZE1vZGlmaWUubmFtZTtcblxuICAgICAgICAgIGlmICh0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHN0YXRlID0gZm4oe1xuICAgICAgICAgICAgICBzdGF0ZTogc3RhdGUsXG4gICAgICAgICAgICAgIG9wdGlvbnM6IF9vcHRpb25zLFxuICAgICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgICBpbnN0YW5jZTogaW5zdGFuY2VcbiAgICAgICAgICAgIH0pIHx8IHN0YXRlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8vIEFzeW5jIGFuZCBvcHRpbWlzdGljYWxseSBvcHRpbWl6ZWQgdXBkYXRlIOKAkyBpdCB3aWxsIG5vdCBiZSBleGVjdXRlZCBpZlxuICAgICAgLy8gbm90IG5lY2Vzc2FyeSAoZGVib3VuY2VkIHRvIHJ1biBhdCBtb3N0IG9uY2UtcGVyLXRpY2spXG4gICAgICB1cGRhdGU6IGRlYm91bmNlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgICAgaW5zdGFuY2UuZm9yY2VVcGRhdGUoKTtcbiAgICAgICAgICByZXNvbHZlKHN0YXRlKTtcbiAgICAgICAgfSk7XG4gICAgICB9KSxcbiAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICAgIGNsZWFudXBNb2RpZmllckVmZmVjdHMoKTtcbiAgICAgICAgaXNEZXN0cm95ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAoIWFyZVZhbGlkRWxlbWVudHMocmVmZXJlbmNlLCBwb3BwZXIpKSB7XG4gICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgfVxuXG4gICAgaW5zdGFuY2Uuc2V0T3B0aW9ucyhvcHRpb25zKS50aGVuKGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgaWYgKCFpc0Rlc3Ryb3llZCAmJiBvcHRpb25zLm9uRmlyc3RVcGRhdGUpIHtcbiAgICAgICAgb3B0aW9ucy5vbkZpcnN0VXBkYXRlKHN0YXRlKTtcbiAgICAgIH1cbiAgICB9KTsgLy8gTW9kaWZpZXJzIGhhdmUgdGhlIGFiaWxpdHkgdG8gZXhlY3V0ZSBhcmJpdHJhcnkgY29kZSBiZWZvcmUgdGhlIGZpcnN0XG4gICAgLy8gdXBkYXRlIGN5Y2xlIHJ1bnMuIFRoZXkgd2lsbCBiZSBleGVjdXRlZCBpbiB0aGUgc2FtZSBvcmRlciBhcyB0aGUgdXBkYXRlXG4gICAgLy8gY3ljbGUuIFRoaXMgaXMgdXNlZnVsIHdoZW4gYSBtb2RpZmllciBhZGRzIHNvbWUgcGVyc2lzdGVudCBkYXRhIHRoYXRcbiAgICAvLyBvdGhlciBtb2RpZmllcnMgbmVlZCB0byB1c2UsIGJ1dCB0aGUgbW9kaWZpZXIgaXMgcnVuIGFmdGVyIHRoZSBkZXBlbmRlbnRcbiAgICAvLyBvbmUuXG5cbiAgICBmdW5jdGlvbiBydW5Nb2RpZmllckVmZmVjdHMoKSB7XG4gICAgICBzdGF0ZS5vcmRlcmVkTW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgICAgdmFyIG5hbWUgPSBfcmVmLm5hbWUsXG4gICAgICAgICAgICBfcmVmJG9wdGlvbnMgPSBfcmVmLm9wdGlvbnMsXG4gICAgICAgICAgICBvcHRpb25zID0gX3JlZiRvcHRpb25zID09PSB2b2lkIDAgPyB7fSA6IF9yZWYkb3B0aW9ucyxcbiAgICAgICAgICAgIGVmZmVjdCA9IF9yZWYuZWZmZWN0O1xuXG4gICAgICAgIGlmICh0eXBlb2YgZWZmZWN0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdmFyIGNsZWFudXBGbiA9IGVmZmVjdCh7XG4gICAgICAgICAgICBzdGF0ZTogc3RhdGUsXG4gICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgaW5zdGFuY2U6IGluc3RhbmNlLFxuICAgICAgICAgICAgb3B0aW9uczogb3B0aW9uc1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgdmFyIG5vb3BGbiA9IGZ1bmN0aW9uIG5vb3BGbigpIHt9O1xuXG4gICAgICAgICAgZWZmZWN0Q2xlYW51cEZucy5wdXNoKGNsZWFudXBGbiB8fCBub29wRm4pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbGVhbnVwTW9kaWZpZXJFZmZlY3RzKCkge1xuICAgICAgZWZmZWN0Q2xlYW51cEZucy5mb3JFYWNoKGZ1bmN0aW9uIChmbikge1xuICAgICAgICByZXR1cm4gZm4oKTtcbiAgICAgIH0pO1xuICAgICAgZWZmZWN0Q2xlYW51cEZucyA9IFtdO1xuICAgIH1cblxuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfTtcbn1cbmV4cG9ydCB2YXIgY3JlYXRlUG9wcGVyID0gLyojX19QVVJFX18qL3BvcHBlckdlbmVyYXRvcigpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbmV4cG9ydCB7IGRldGVjdE92ZXJmbG93IH07IiwiaW1wb3J0IHsgcG9wcGVyR2VuZXJhdG9yLCBkZXRlY3RPdmVyZmxvdyB9IGZyb20gXCIuL2NyZWF0ZVBvcHBlci5qc1wiO1xuaW1wb3J0IGV2ZW50TGlzdGVuZXJzIGZyb20gXCIuL21vZGlmaWVycy9ldmVudExpc3RlbmVycy5qc1wiO1xuaW1wb3J0IHBvcHBlck9mZnNldHMgZnJvbSBcIi4vbW9kaWZpZXJzL3BvcHBlck9mZnNldHMuanNcIjtcbmltcG9ydCBjb21wdXRlU3R5bGVzIGZyb20gXCIuL21vZGlmaWVycy9jb21wdXRlU3R5bGVzLmpzXCI7XG5pbXBvcnQgYXBwbHlTdHlsZXMgZnJvbSBcIi4vbW9kaWZpZXJzL2FwcGx5U3R5bGVzLmpzXCI7XG5pbXBvcnQgb2Zmc2V0IGZyb20gXCIuL21vZGlmaWVycy9vZmZzZXQuanNcIjtcbmltcG9ydCBmbGlwIGZyb20gXCIuL21vZGlmaWVycy9mbGlwLmpzXCI7XG5pbXBvcnQgcHJldmVudE92ZXJmbG93IGZyb20gXCIuL21vZGlmaWVycy9wcmV2ZW50T3ZlcmZsb3cuanNcIjtcbmltcG9ydCBhcnJvdyBmcm9tIFwiLi9tb2RpZmllcnMvYXJyb3cuanNcIjtcbmltcG9ydCBoaWRlIGZyb20gXCIuL21vZGlmaWVycy9oaWRlLmpzXCI7XG52YXIgZGVmYXVsdE1vZGlmaWVycyA9IFtldmVudExpc3RlbmVycywgcG9wcGVyT2Zmc2V0cywgY29tcHV0ZVN0eWxlcywgYXBwbHlTdHlsZXMsIG9mZnNldCwgZmxpcCwgcHJldmVudE92ZXJmbG93LCBhcnJvdywgaGlkZV07XG52YXIgY3JlYXRlUG9wcGVyID0gLyojX19QVVJFX18qL3BvcHBlckdlbmVyYXRvcih7XG4gIGRlZmF1bHRNb2RpZmllcnM6IGRlZmF1bHRNb2RpZmllcnNcbn0pOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbmV4cG9ydCB7IGNyZWF0ZVBvcHBlciwgcG9wcGVyR2VuZXJhdG9yLCBkZWZhdWx0TW9kaWZpZXJzLCBkZXRlY3RPdmVyZmxvdyB9OyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbmV4cG9ydCB7IGNyZWF0ZVBvcHBlciBhcyBjcmVhdGVQb3BwZXJMaXRlIH0gZnJvbSBcIi4vcG9wcGVyLWxpdGUuanNcIjsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5leHBvcnQgKiBmcm9tIFwiLi9tb2RpZmllcnMvaW5kZXguanNcIjsiLCJpbXBvcnQgeyBnZW5lcmF0ZVV0aWxpdHlDbGFzcyB9IGZyb20gJy4uL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmltcG9ydCB7IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgfSBmcm9tICcuLi9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmNvbnN0IENPTVBPTkVOVF9OQU1FID0gJ1BvcHBlcic7XG5leHBvcnQgZnVuY3Rpb24gZ2V0UG9wcGVyVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKENPTVBPTkVOVF9OQU1FLCBzbG90KTtcbn1cbmV4cG9ydCBjb25zdCBwb3BwZXJDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyhDT01QT05FTlRfTkFNRSwgWydyb290J10pOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImFuY2hvckVsXCIsIFwiY2hpbGRyZW5cIiwgXCJkaXJlY3Rpb25cIiwgXCJkaXNhYmxlUG9ydGFsXCIsIFwibW9kaWZpZXJzXCIsIFwib3BlblwiLCBcInBsYWNlbWVudFwiLCBcInBvcHBlck9wdGlvbnNcIiwgXCJwb3BwZXJSZWZcIiwgXCJzbG90UHJvcHNcIiwgXCJzbG90c1wiLCBcIlRyYW5zaXRpb25Qcm9wc1wiLCBcIm93bmVyU3RhdGVcIl0sXG4gIF9leGNsdWRlZDIgPSBbXCJhbmNob3JFbFwiLCBcImNoaWxkcmVuXCIsIFwiY29udGFpbmVyXCIsIFwiZGlyZWN0aW9uXCIsIFwiZGlzYWJsZVBvcnRhbFwiLCBcImtlZXBNb3VudGVkXCIsIFwibW9kaWZpZXJzXCIsIFwib3BlblwiLCBcInBsYWNlbWVudFwiLCBcInBvcHBlck9wdGlvbnNcIiwgXCJwb3BwZXJSZWZcIiwgXCJzdHlsZVwiLCBcInRyYW5zaXRpb25cIiwgXCJzbG90UHJvcHNcIiwgXCJzbG90c1wiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNoYWluUHJvcFR5cGVzLCBIVE1MRWxlbWVudFR5cGUsIHJlZlR5cGUsIHVuc3RhYmxlX293bmVyRG9jdW1lbnQgYXMgb3duZXJEb2N1bWVudCwgdW5zdGFibGVfdXNlRW5oYW5jZWRFZmZlY3QgYXMgdXNlRW5oYW5jZWRFZmZlY3QsIHVuc3RhYmxlX3VzZUZvcmtSZWYgYXMgdXNlRm9ya1JlZiB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IHsgY3JlYXRlUG9wcGVyIH0gZnJvbSAnQHBvcHBlcmpzL2NvcmUnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IHVuc3RhYmxlX2NvbXBvc2VDbGFzc2VzIGFzIGNvbXBvc2VDbGFzc2VzIH0gZnJvbSAnLi4vY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IHsgUG9ydGFsIH0gZnJvbSAnLi4vUG9ydGFsJztcbmltcG9ydCB7IGdldFBvcHBlclV0aWxpdHlDbGFzcyB9IGZyb20gJy4vcG9wcGVyQ2xhc3Nlcyc7XG5pbXBvcnQgeyB1c2VTbG90UHJvcHMgfSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgeyB1c2VDbGFzc05hbWVzT3ZlcnJpZGUgfSBmcm9tICcuLi91dGlscy9DbGFzc05hbWVDb25maWd1cmF0b3InO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmZ1bmN0aW9uIGZsaXBQbGFjZW1lbnQocGxhY2VtZW50LCBkaXJlY3Rpb24pIHtcbiAgaWYgKGRpcmVjdGlvbiA9PT0gJ2x0cicpIHtcbiAgICByZXR1cm4gcGxhY2VtZW50O1xuICB9XG4gIHN3aXRjaCAocGxhY2VtZW50KSB7XG4gICAgY2FzZSAnYm90dG9tLWVuZCc6XG4gICAgICByZXR1cm4gJ2JvdHRvbS1zdGFydCc7XG4gICAgY2FzZSAnYm90dG9tLXN0YXJ0JzpcbiAgICAgIHJldHVybiAnYm90dG9tLWVuZCc7XG4gICAgY2FzZSAndG9wLWVuZCc6XG4gICAgICByZXR1cm4gJ3RvcC1zdGFydCc7XG4gICAgY2FzZSAndG9wLXN0YXJ0JzpcbiAgICAgIHJldHVybiAndG9wLWVuZCc7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBwbGFjZW1lbnQ7XG4gIH1cbn1cbmZ1bmN0aW9uIHJlc29sdmVBbmNob3JFbChhbmNob3JFbCkge1xuICByZXR1cm4gdHlwZW9mIGFuY2hvckVsID09PSAnZnVuY3Rpb24nID8gYW5jaG9yRWwoKSA6IGFuY2hvckVsO1xufVxuZnVuY3Rpb24gaXNIVE1MRWxlbWVudChlbGVtZW50KSB7XG4gIHJldHVybiBlbGVtZW50Lm5vZGVUeXBlICE9PSB1bmRlZmluZWQ7XG59XG5mdW5jdGlvbiBpc1ZpcnR1YWxFbGVtZW50KGVsZW1lbnQpIHtcbiAgcmV0dXJuICFpc0hUTUxFbGVtZW50KGVsZW1lbnQpO1xufVxuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSAoKSA9PiB7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgdXNlQ2xhc3NOYW1lc092ZXJyaWRlKGdldFBvcHBlclV0aWxpdHlDbGFzcykpO1xufTtcbmNvbnN0IGRlZmF1bHRQb3BwZXJPcHRpb25zID0ge307XG5jb25zdCBQb3BwZXJUb29sdGlwID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gUG9wcGVyVG9vbHRpcChwcm9wcywgZm9yd2FyZGVkUmVmKSB7XG4gIHZhciBfc2xvdHMkcm9vdDtcbiAgY29uc3Qge1xuICAgICAgYW5jaG9yRWwsXG4gICAgICBjaGlsZHJlbixcbiAgICAgIGRpcmVjdGlvbixcbiAgICAgIGRpc2FibGVQb3J0YWwsXG4gICAgICBtb2RpZmllcnMsXG4gICAgICBvcGVuLFxuICAgICAgcGxhY2VtZW50OiBpbml0aWFsUGxhY2VtZW50LFxuICAgICAgcG9wcGVyT3B0aW9ucyxcbiAgICAgIHBvcHBlclJlZjogcG9wcGVyUmVmUHJvcCxcbiAgICAgIHNsb3RQcm9wcyA9IHt9LFxuICAgICAgc2xvdHMgPSB7fSxcbiAgICAgIFRyYW5zaXRpb25Qcm9wc1xuICAgICAgLy8gQHRzLWlnbm9yZSBpbnRlcm5hbCBsb2dpY1xuICAgICAgLy8gcHJldmVudCBmcm9tIHNwcmVhZGluZyB0byBET00sIGl0IGNhbiBjb21lIGZyb20gdGhlIHBhcmVudCBjb21wb25lbnQgZS5nLiBTZWxlY3QuXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IHRvb2x0aXBSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIGNvbnN0IG93blJlZiA9IHVzZUZvcmtSZWYodG9vbHRpcFJlZiwgZm9yd2FyZGVkUmVmKTtcbiAgY29uc3QgcG9wcGVyUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCBoYW5kbGVQb3BwZXJSZWYgPSB1c2VGb3JrUmVmKHBvcHBlclJlZiwgcG9wcGVyUmVmUHJvcCk7XG4gIGNvbnN0IGhhbmRsZVBvcHBlclJlZlJlZiA9IFJlYWN0LnVzZVJlZihoYW5kbGVQb3BwZXJSZWYpO1xuICB1c2VFbmhhbmNlZEVmZmVjdCgoKSA9PiB7XG4gICAgaGFuZGxlUG9wcGVyUmVmUmVmLmN1cnJlbnQgPSBoYW5kbGVQb3BwZXJSZWY7XG4gIH0sIFtoYW5kbGVQb3BwZXJSZWZdKTtcbiAgUmVhY3QudXNlSW1wZXJhdGl2ZUhhbmRsZShwb3BwZXJSZWZQcm9wLCAoKSA9PiBwb3BwZXJSZWYuY3VycmVudCwgW10pO1xuICBjb25zdCBydGxQbGFjZW1lbnQgPSBmbGlwUGxhY2VtZW50KGluaXRpYWxQbGFjZW1lbnQsIGRpcmVjdGlvbik7XG4gIC8qKlxuICAgKiBwbGFjZW1lbnQgaW5pdGlhbGl6ZWQgZnJvbSBwcm9wIGJ1dCBjYW4gY2hhbmdlIGR1cmluZyBsaWZldGltZSBpZiBtb2RpZmllcnMuZmxpcC5cbiAgICogbW9kaWZpZXJzLmZsaXAgaXMgZXNzZW50aWFsbHkgYSBmbGlwIGZvciBjb250cm9sbGVkL3VuY29udHJvbGxlZCBiZWhhdmlvclxuICAgKi9cbiAgY29uc3QgW3BsYWNlbWVudCwgc2V0UGxhY2VtZW50XSA9IFJlYWN0LnVzZVN0YXRlKHJ0bFBsYWNlbWVudCk7XG4gIGNvbnN0IFtyZXNvbHZlZEFuY2hvckVsZW1lbnQsIHNldFJlc29sdmVkQW5jaG9yRWxlbWVudF0gPSBSZWFjdC51c2VTdGF0ZShyZXNvbHZlQW5jaG9yRWwoYW5jaG9yRWwpKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAocG9wcGVyUmVmLmN1cnJlbnQpIHtcbiAgICAgIHBvcHBlclJlZi5jdXJyZW50LmZvcmNlVXBkYXRlKCk7XG4gICAgfVxuICB9KTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoYW5jaG9yRWwpIHtcbiAgICAgIHNldFJlc29sdmVkQW5jaG9yRWxlbWVudChyZXNvbHZlQW5jaG9yRWwoYW5jaG9yRWwpKTtcbiAgICB9XG4gIH0sIFthbmNob3JFbF0pO1xuICB1c2VFbmhhbmNlZEVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFyZXNvbHZlZEFuY2hvckVsZW1lbnQgfHwgIW9wZW4pIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGNvbnN0IGhhbmRsZVBvcHBlclVwZGF0ZSA9IGRhdGEgPT4ge1xuICAgICAgc2V0UGxhY2VtZW50KGRhdGEucGxhY2VtZW50KTtcbiAgICB9O1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAocmVzb2x2ZWRBbmNob3JFbGVtZW50ICYmIGlzSFRNTEVsZW1lbnQocmVzb2x2ZWRBbmNob3JFbGVtZW50KSAmJiByZXNvbHZlZEFuY2hvckVsZW1lbnQubm9kZVR5cGUgPT09IDEpIHtcbiAgICAgICAgY29uc3QgYm94ID0gcmVzb2x2ZWRBbmNob3JFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICd0ZXN0JyAmJiBib3gudG9wID09PSAwICYmIGJveC5sZWZ0ID09PSAwICYmIGJveC5yaWdodCA9PT0gMCAmJiBib3guYm90dG9tID09PSAwKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKFsnTVVJOiBUaGUgYGFuY2hvckVsYCBwcm9wIHByb3ZpZGVkIHRvIHRoZSBjb21wb25lbnQgaXMgaW52YWxpZC4nLCAnVGhlIGFuY2hvciBlbGVtZW50IHNob3VsZCBiZSBwYXJ0IG9mIHRoZSBkb2N1bWVudCBsYXlvdXQuJywgXCJNYWtlIHN1cmUgdGhlIGVsZW1lbnQgaXMgcHJlc2VudCBpbiB0aGUgZG9jdW1lbnQgb3IgdGhhdCBpdCdzIG5vdCBkaXNwbGF5IG5vbmUuXCJdLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBsZXQgcG9wcGVyTW9kaWZpZXJzID0gW3tcbiAgICAgIG5hbWU6ICdwcmV2ZW50T3ZlcmZsb3cnLFxuICAgICAgb3B0aW9uczoge1xuICAgICAgICBhbHRCb3VuZGFyeTogZGlzYWJsZVBvcnRhbFxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIG5hbWU6ICdmbGlwJyxcbiAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgYWx0Qm91bmRhcnk6IGRpc2FibGVQb3J0YWxcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBuYW1lOiAnb25VcGRhdGUnLFxuICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgIHBoYXNlOiAnYWZ0ZXJXcml0ZScsXG4gICAgICBmbjogKHtcbiAgICAgICAgc3RhdGVcbiAgICAgIH0pID0+IHtcbiAgICAgICAgaGFuZGxlUG9wcGVyVXBkYXRlKHN0YXRlKTtcbiAgICAgIH1cbiAgICB9XTtcbiAgICBpZiAobW9kaWZpZXJzICE9IG51bGwpIHtcbiAgICAgIHBvcHBlck1vZGlmaWVycyA9IHBvcHBlck1vZGlmaWVycy5jb25jYXQobW9kaWZpZXJzKTtcbiAgICB9XG4gICAgaWYgKHBvcHBlck9wdGlvbnMgJiYgcG9wcGVyT3B0aW9ucy5tb2RpZmllcnMgIT0gbnVsbCkge1xuICAgICAgcG9wcGVyTW9kaWZpZXJzID0gcG9wcGVyTW9kaWZpZXJzLmNvbmNhdChwb3BwZXJPcHRpb25zLm1vZGlmaWVycyk7XG4gICAgfVxuICAgIGNvbnN0IHBvcHBlciA9IGNyZWF0ZVBvcHBlcihyZXNvbHZlZEFuY2hvckVsZW1lbnQsIHRvb2x0aXBSZWYuY3VycmVudCwgX2V4dGVuZHMoe1xuICAgICAgcGxhY2VtZW50OiBydGxQbGFjZW1lbnRcbiAgICB9LCBwb3BwZXJPcHRpb25zLCB7XG4gICAgICBtb2RpZmllcnM6IHBvcHBlck1vZGlmaWVyc1xuICAgIH0pKTtcbiAgICBoYW5kbGVQb3BwZXJSZWZSZWYuY3VycmVudChwb3BwZXIpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBwb3BwZXIuZGVzdHJveSgpO1xuICAgICAgaGFuZGxlUG9wcGVyUmVmUmVmLmN1cnJlbnQobnVsbCk7XG4gICAgfTtcbiAgfSwgW3Jlc29sdmVkQW5jaG9yRWxlbWVudCwgZGlzYWJsZVBvcnRhbCwgbW9kaWZpZXJzLCBvcGVuLCBwb3BwZXJPcHRpb25zLCBydGxQbGFjZW1lbnRdKTtcbiAgY29uc3QgY2hpbGRQcm9wcyA9IHtcbiAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudFxuICB9O1xuICBpZiAoVHJhbnNpdGlvblByb3BzICE9PSBudWxsKSB7XG4gICAgY2hpbGRQcm9wcy5UcmFuc2l0aW9uUHJvcHMgPSBUcmFuc2l0aW9uUHJvcHM7XG4gIH1cbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKCk7XG4gIGNvbnN0IFJvb3QgPSAoX3Nsb3RzJHJvb3QgPSBzbG90cy5yb290KSAhPSBudWxsID8gX3Nsb3RzJHJvb3QgOiAnZGl2JztcbiAgY29uc3Qgcm9vdFByb3BzID0gdXNlU2xvdFByb3BzKHtcbiAgICBlbGVtZW50VHlwZTogUm9vdCxcbiAgICBleHRlcm5hbFNsb3RQcm9wczogc2xvdFByb3BzLnJvb3QsXG4gICAgZXh0ZXJuYWxGb3J3YXJkZWRQcm9wczogb3RoZXIsXG4gICAgYWRkaXRpb25hbFByb3BzOiB7XG4gICAgICByb2xlOiAndG9vbHRpcCcsXG4gICAgICByZWY6IG93blJlZlxuICAgIH0sXG4gICAgb3duZXJTdGF0ZTogcHJvcHMsXG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLnJvb3RcbiAgfSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChSb290LCBfZXh0ZW5kcyh7fSwgcm9vdFByb3BzLCB7XG4gICAgY2hpbGRyZW46IHR5cGVvZiBjaGlsZHJlbiA9PT0gJ2Z1bmN0aW9uJyA/IGNoaWxkcmVuKGNoaWxkUHJvcHMpIDogY2hpbGRyZW5cbiAgfSkpO1xufSk7XG5cbi8qKlxuICogUG9wcGVycyByZWx5IG9uIHRoZSAzcmQgcGFydHkgbGlicmFyeSBbUG9wcGVyLmpzXShodHRwczovL3BvcHBlci5qcy5vcmcvZG9jcy92Mi8pIGZvciBwb3NpdGlvbmluZy5cbiAqXG4gKiBEZW1vczpcbiAqXG4gKiAtIFtQb3BwZXJdKGh0dHBzOi8vbXVpLmNvbS9iYXNlLXVpL3JlYWN0LXBvcHBlci8pXG4gKlxuICogQVBJOlxuICpcbiAqIC0gW1BvcHBlciBBUEldKGh0dHBzOi8vbXVpLmNvbS9iYXNlLXVpL3JlYWN0LXBvcHBlci9jb21wb25lbnRzLWFwaS8jcG9wcGVyKVxuICovXG5jb25zdCBQb3BwZXIgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBQb3BwZXIocHJvcHMsIGZvcndhcmRlZFJlZikge1xuICBjb25zdCB7XG4gICAgICBhbmNob3JFbCxcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgY29udGFpbmVyOiBjb250YWluZXJQcm9wLFxuICAgICAgZGlyZWN0aW9uID0gJ2x0cicsXG4gICAgICBkaXNhYmxlUG9ydGFsID0gZmFsc2UsXG4gICAgICBrZWVwTW91bnRlZCA9IGZhbHNlLFxuICAgICAgbW9kaWZpZXJzLFxuICAgICAgb3BlbixcbiAgICAgIHBsYWNlbWVudCA9ICdib3R0b20nLFxuICAgICAgcG9wcGVyT3B0aW9ucyA9IGRlZmF1bHRQb3BwZXJPcHRpb25zLFxuICAgICAgcG9wcGVyUmVmLFxuICAgICAgc3R5bGUsXG4gICAgICB0cmFuc2l0aW9uID0gZmFsc2UsXG4gICAgICBzbG90UHJvcHMgPSB7fSxcbiAgICAgIHNsb3RzID0ge31cbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkMik7XG4gIGNvbnN0IFtleGl0ZWQsIHNldEV4aXRlZF0gPSBSZWFjdC51c2VTdGF0ZSh0cnVlKTtcbiAgY29uc3QgaGFuZGxlRW50ZXIgPSAoKSA9PiB7XG4gICAgc2V0RXhpdGVkKGZhbHNlKTtcbiAgfTtcbiAgY29uc3QgaGFuZGxlRXhpdGVkID0gKCkgPT4ge1xuICAgIHNldEV4aXRlZCh0cnVlKTtcbiAgfTtcbiAgaWYgKCFrZWVwTW91bnRlZCAmJiAhb3BlbiAmJiAoIXRyYW5zaXRpb24gfHwgZXhpdGVkKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLy8gSWYgdGhlIGNvbnRhaW5lciBwcm9wIGlzIHByb3ZpZGVkLCB1c2UgdGhhdFxuICAvLyBJZiB0aGUgYW5jaG9yRWwgcHJvcCBpcyBwcm92aWRlZCwgdXNlIGl0cyBwYXJlbnQgYm9keSBlbGVtZW50IGFzIHRoZSBjb250YWluZXJcbiAgLy8gSWYgbmVpdGhlciBhcmUgcHJvdmlkZWQgbGV0IHRoZSBNb2RhbCB0YWtlIGNhcmUgb2YgY2hvb3NpbmcgdGhlIGNvbnRhaW5lclxuICBsZXQgY29udGFpbmVyO1xuICBpZiAoY29udGFpbmVyUHJvcCkge1xuICAgIGNvbnRhaW5lciA9IGNvbnRhaW5lclByb3A7XG4gIH0gZWxzZSBpZiAoYW5jaG9yRWwpIHtcbiAgICBjb25zdCByZXNvbHZlZEFuY2hvckVsID0gcmVzb2x2ZUFuY2hvckVsKGFuY2hvckVsKTtcbiAgICBjb250YWluZXIgPSByZXNvbHZlZEFuY2hvckVsICYmIGlzSFRNTEVsZW1lbnQocmVzb2x2ZWRBbmNob3JFbCkgPyBvd25lckRvY3VtZW50KHJlc29sdmVkQW5jaG9yRWwpLmJvZHkgOiBvd25lckRvY3VtZW50KG51bGwpLmJvZHk7XG4gIH1cbiAgY29uc3QgZGlzcGxheSA9ICFvcGVuICYmIGtlZXBNb3VudGVkICYmICghdHJhbnNpdGlvbiB8fCBleGl0ZWQpID8gJ25vbmUnIDogdW5kZWZpbmVkO1xuICBjb25zdCB0cmFuc2l0aW9uUHJvcHMgPSB0cmFuc2l0aW9uID8ge1xuICAgIGluOiBvcGVuLFxuICAgIG9uRW50ZXI6IGhhbmRsZUVudGVyLFxuICAgIG9uRXhpdGVkOiBoYW5kbGVFeGl0ZWRcbiAgfSA6IHVuZGVmaW5lZDtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFBvcnRhbCwge1xuICAgIGRpc2FibGVQb3J0YWw6IGRpc2FibGVQb3J0YWwsXG4gICAgY29udGFpbmVyOiBjb250YWluZXIsXG4gICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9fanN4KFBvcHBlclRvb2x0aXAsIF9leHRlbmRzKHtcbiAgICAgIGFuY2hvckVsOiBhbmNob3JFbCxcbiAgICAgIGRpcmVjdGlvbjogZGlyZWN0aW9uLFxuICAgICAgZGlzYWJsZVBvcnRhbDogZGlzYWJsZVBvcnRhbCxcbiAgICAgIG1vZGlmaWVyczogbW9kaWZpZXJzLFxuICAgICAgcmVmOiBmb3J3YXJkZWRSZWYsXG4gICAgICBvcGVuOiB0cmFuc2l0aW9uID8gIWV4aXRlZCA6IG9wZW4sXG4gICAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudCxcbiAgICAgIHBvcHBlck9wdGlvbnM6IHBvcHBlck9wdGlvbnMsXG4gICAgICBwb3BwZXJSZWY6IHBvcHBlclJlZixcbiAgICAgIHNsb3RQcm9wczogc2xvdFByb3BzLFxuICAgICAgc2xvdHM6IHNsb3RzXG4gICAgfSwgb3RoZXIsIHtcbiAgICAgIHN0eWxlOiBfZXh0ZW5kcyh7XG4gICAgICAgIC8vIFByZXZlbnRzIHNjcm9sbCBpc3N1ZSwgd2FpdGluZyBmb3IgUG9wcGVyLmpzIHRvIGFkZCB0aGlzIHN0eWxlIG9uY2UgaW5pdGlhdGVkLlxuICAgICAgICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgICAgICAgLy8gRml4IFBvcHBlci5qcyBkaXNwbGF5IGlzc3VlXG4gICAgICAgIHRvcDogMCxcbiAgICAgICAgbGVmdDogMCxcbiAgICAgICAgZGlzcGxheVxuICAgICAgfSwgc3R5bGUpLFxuICAgICAgVHJhbnNpdGlvblByb3BzOiB0cmFuc2l0aW9uUHJvcHMsXG4gICAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgICB9KSlcbiAgfSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFBvcHBlci5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIFR5cGVTY3JpcHQgdHlwZXMgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBBbiBIVE1MIGVsZW1lbnQsIFt2aXJ0dWFsRWxlbWVudF0oaHR0cHM6Ly9wb3BwZXIuanMub3JnL2RvY3MvdjIvdmlydHVhbC1lbGVtZW50cy8pLFxuICAgKiBvciBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBlaXRoZXIuXG4gICAqIEl0J3MgdXNlZCB0byBzZXQgdGhlIHBvc2l0aW9uIG9mIHRoZSBwb3BwZXIuXG4gICAqIFRoZSByZXR1cm4gdmFsdWUgd2lsbCBwYXNzZWQgYXMgdGhlIHJlZmVyZW5jZSBvYmplY3Qgb2YgdGhlIFBvcHBlciBpbnN0YW5jZS5cbiAgICovXG4gIGFuY2hvckVsOiBjaGFpblByb3BUeXBlcyhQcm9wVHlwZXMub25lT2ZUeXBlKFtIVE1MRWxlbWVudFR5cGUsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5mdW5jXSksIHByb3BzID0+IHtcbiAgICBpZiAocHJvcHMub3Blbikge1xuICAgICAgY29uc3QgcmVzb2x2ZWRBbmNob3JFbCA9IHJlc29sdmVBbmNob3JFbChwcm9wcy5hbmNob3JFbCk7XG4gICAgICBpZiAocmVzb2x2ZWRBbmNob3JFbCAmJiBpc0hUTUxFbGVtZW50KHJlc29sdmVkQW5jaG9yRWwpICYmIHJlc29sdmVkQW5jaG9yRWwubm9kZVR5cGUgPT09IDEpIHtcbiAgICAgICAgY29uc3QgYm94ID0gcmVzb2x2ZWRBbmNob3JFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAndGVzdCcgJiYgYm94LnRvcCA9PT0gMCAmJiBib3gubGVmdCA9PT0gMCAmJiBib3gucmlnaHQgPT09IDAgJiYgYm94LmJvdHRvbSA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoWydNVUk6IFRoZSBgYW5jaG9yRWxgIHByb3AgcHJvdmlkZWQgdG8gdGhlIGNvbXBvbmVudCBpcyBpbnZhbGlkLicsICdUaGUgYW5jaG9yIGVsZW1lbnQgc2hvdWxkIGJlIHBhcnQgb2YgdGhlIGRvY3VtZW50IGxheW91dC4nLCBcIk1ha2Ugc3VyZSB0aGUgZWxlbWVudCBpcyBwcmVzZW50IGluIHRoZSBkb2N1bWVudCBvciB0aGF0IGl0J3Mgbm90IGRpc3BsYXkgbm9uZS5cIl0uam9pbignXFxuJykpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKCFyZXNvbHZlZEFuY2hvckVsIHx8IHR5cGVvZiByZXNvbHZlZEFuY2hvckVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCAhPT0gJ2Z1bmN0aW9uJyB8fCBpc1ZpcnR1YWxFbGVtZW50KHJlc29sdmVkQW5jaG9yRWwpICYmIHJlc29sdmVkQW5jaG9yRWwuY29udGV4dEVsZW1lbnQgIT0gbnVsbCAmJiByZXNvbHZlZEFuY2hvckVsLmNvbnRleHRFbGVtZW50Lm5vZGVUeXBlICE9PSAxKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoWydNVUk6IFRoZSBgYW5jaG9yRWxgIHByb3AgcHJvdmlkZWQgdG8gdGhlIGNvbXBvbmVudCBpcyBpbnZhbGlkLicsICdJdCBzaG91bGQgYmUgYW4gSFRNTCBlbGVtZW50IGluc3RhbmNlIG9yIGEgdmlydHVhbEVsZW1lbnQgJywgJyhodHRwczovL3BvcHBlci5qcy5vcmcvZG9jcy92Mi92aXJ0dWFsLWVsZW1lbnRzLykuJ10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfSksXG4gIC8qKlxuICAgKiBQb3BwZXIgcmVuZGVyIGZ1bmN0aW9uIG9yIG5vZGUuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMubm9kZSwgUHJvcFR5cGVzLmZ1bmNdKSxcbiAgLyoqXG4gICAqIEFuIEhUTUwgZWxlbWVudCBvciBmdW5jdGlvbiB0aGF0IHJldHVybnMgb25lLlxuICAgKiBUaGUgYGNvbnRhaW5lcmAgd2lsbCBoYXZlIHRoZSBwb3J0YWwgY2hpbGRyZW4gYXBwZW5kZWQgdG8gaXQuXG4gICAqXG4gICAqIFlvdSBjYW4gYWxzbyBwcm92aWRlIGEgY2FsbGJhY2ssIHdoaWNoIGlzIGNhbGxlZCBpbiBhIFJlYWN0IGxheW91dCBlZmZlY3QuXG4gICAqIFRoaXMgbGV0cyB5b3Ugc2V0IHRoZSBjb250YWluZXIgZnJvbSBhIHJlZiwgYW5kIGFsc28gbWFrZXMgc2VydmVyLXNpZGUgcmVuZGVyaW5nIHBvc3NpYmxlLlxuICAgKlxuICAgKiBCeSBkZWZhdWx0LCBpdCB1c2VzIHRoZSBib2R5IG9mIHRoZSB0b3AtbGV2ZWwgZG9jdW1lbnQgb2JqZWN0LFxuICAgKiBzbyBpdCdzIHNpbXBseSBgZG9jdW1lbnQuYm9keWAgbW9zdCBvZiB0aGUgdGltZS5cbiAgICovXG4gIGNvbnRhaW5lcjogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtIVE1MRWxlbWVudFR5cGUsIFByb3BUeXBlcy5mdW5jXSksXG4gIC8qKlxuICAgKiBEaXJlY3Rpb24gb2YgdGhlIHRleHQuXG4gICAqIEBkZWZhdWx0ICdsdHInXG4gICAqL1xuICBkaXJlY3Rpb246IFByb3BUeXBlcy5vbmVPZihbJ2x0cicsICdydGwnXSksXG4gIC8qKlxuICAgKiBUaGUgYGNoaWxkcmVuYCB3aWxsIGJlIHVuZGVyIHRoZSBET00gaGllcmFyY2h5IG9mIHRoZSBwYXJlbnQgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZVBvcnRhbDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBBbHdheXMga2VlcCB0aGUgY2hpbGRyZW4gaW4gdGhlIERPTS5cbiAgICogVGhpcyBwcm9wIGNhbiBiZSB1c2VmdWwgaW4gU0VPIHNpdHVhdGlvbiBvclxuICAgKiB3aGVuIHlvdSB3YW50IHRvIG1heGltaXplIHRoZSByZXNwb25zaXZlbmVzcyBvZiB0aGUgUG9wcGVyLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAga2VlcE1vdW50ZWQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogUG9wcGVyLmpzIGlzIGJhc2VkIG9uIGEgXCJwbHVnaW4tbGlrZVwiIGFyY2hpdGVjdHVyZSxcbiAgICogbW9zdCBvZiBpdHMgZmVhdHVyZXMgYXJlIGZ1bGx5IGVuY2Fwc3VsYXRlZCBcIm1vZGlmaWVyc1wiLlxuICAgKlxuICAgKiBBIG1vZGlmaWVyIGlzIGEgZnVuY3Rpb24gdGhhdCBpcyBjYWxsZWQgZWFjaCB0aW1lIFBvcHBlci5qcyBuZWVkcyB0b1xuICAgKiBjb21wdXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgcG9wcGVyLlxuICAgKiBGb3IgdGhpcyByZWFzb24sIG1vZGlmaWVycyBzaG91bGQgYmUgdmVyeSBwZXJmb3JtYW50IHRvIGF2b2lkIGJvdHRsZW5lY2tzLlxuICAgKiBUbyBsZWFybiBob3cgdG8gY3JlYXRlIGEgbW9kaWZpZXIsIFtyZWFkIHRoZSBtb2RpZmllcnMgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9wb3BwZXIuanMub3JnL2RvY3MvdjIvbW9kaWZpZXJzLykuXG4gICAqL1xuICBtb2RpZmllcnM6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zaGFwZSh7XG4gICAgZGF0YTogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBlZmZlY3Q6IFByb3BUeXBlcy5mdW5jLFxuICAgIGVuYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAgIGZuOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBuYW1lOiBQcm9wVHlwZXMuYW55LFxuICAgIG9wdGlvbnM6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgcGhhc2U6IFByb3BUeXBlcy5vbmVPZihbJ2FmdGVyTWFpbicsICdhZnRlclJlYWQnLCAnYWZ0ZXJXcml0ZScsICdiZWZvcmVNYWluJywgJ2JlZm9yZVJlYWQnLCAnYmVmb3JlV3JpdGUnLCAnbWFpbicsICdyZWFkJywgJ3dyaXRlJ10pLFxuICAgIHJlcXVpcmVzOiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuc3RyaW5nKSxcbiAgICByZXF1aXJlc0lmRXhpc3RzOiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuc3RyaW5nKVxuICB9KSksXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgc2hvd24uXG4gICAqL1xuICBvcGVuOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogUG9wcGVyIHBsYWNlbWVudC5cbiAgICogQGRlZmF1bHQgJ2JvdHRvbSdcbiAgICovXG4gIHBsYWNlbWVudDogUHJvcFR5cGVzLm9uZU9mKFsnYXV0by1lbmQnLCAnYXV0by1zdGFydCcsICdhdXRvJywgJ2JvdHRvbS1lbmQnLCAnYm90dG9tLXN0YXJ0JywgJ2JvdHRvbScsICdsZWZ0LWVuZCcsICdsZWZ0LXN0YXJ0JywgJ2xlZnQnLCAncmlnaHQtZW5kJywgJ3JpZ2h0LXN0YXJ0JywgJ3JpZ2h0JywgJ3RvcC1lbmQnLCAndG9wLXN0YXJ0JywgJ3RvcCddKSxcbiAgLyoqXG4gICAqIE9wdGlvbnMgcHJvdmlkZWQgdG8gdGhlIFtgUG9wcGVyLmpzYF0oaHR0cHM6Ly9wb3BwZXIuanMub3JnL2RvY3MvdjIvY29uc3RydWN0b3JzLyNvcHRpb25zKSBpbnN0YW5jZS5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIHBvcHBlck9wdGlvbnM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgbW9kaWZpZXJzOiBQcm9wVHlwZXMuYXJyYXksXG4gICAgb25GaXJzdFVwZGF0ZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgcGxhY2VtZW50OiBQcm9wVHlwZXMub25lT2YoWydhdXRvLWVuZCcsICdhdXRvLXN0YXJ0JywgJ2F1dG8nLCAnYm90dG9tLWVuZCcsICdib3R0b20tc3RhcnQnLCAnYm90dG9tJywgJ2xlZnQtZW5kJywgJ2xlZnQtc3RhcnQnLCAnbGVmdCcsICdyaWdodC1lbmQnLCAncmlnaHQtc3RhcnQnLCAncmlnaHQnLCAndG9wLWVuZCcsICd0b3Atc3RhcnQnLCAndG9wJ10pLFxuICAgIHN0cmF0ZWd5OiBQcm9wVHlwZXMub25lT2YoWydhYnNvbHV0ZScsICdmaXhlZCddKVxuICB9KSxcbiAgLyoqXG4gICAqIEEgcmVmIHRoYXQgcG9pbnRzIHRvIHRoZSB1c2VkIHBvcHBlciBpbnN0YW5jZS5cbiAgICovXG4gIHBvcHBlclJlZjogcmVmVHlwZSxcbiAgLyoqXG4gICAqIFRoZSBwcm9wcyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlIHRoZSBQb3BwZXIuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBzbG90UHJvcHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgcm9vdDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnRzIHVzZWQgZm9yIGVhY2ggc2xvdCBpbnNpZGUgdGhlIFBvcHBlci5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIHNsb3RzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIHJvb3Q6IFByb3BUeXBlcy5lbGVtZW50VHlwZVxuICB9KSxcbiAgLyoqXG4gICAqIEhlbHAgc3VwcG9ydGluZyBhIHJlYWN0LXRyYW5zaXRpb24tZ3JvdXAvVHJhbnNpdGlvbiBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICB0cmFuc2l0aW9uOiBQcm9wVHlwZXMuYm9vbFxufSA6IHZvaWQgMDtcbmV4cG9ydCB7IFBvcHBlciB9OyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcIm9uQ2hhbmdlXCIsIFwibWF4Um93c1wiLCBcIm1pblJvd3NcIiwgXCJzdHlsZVwiLCBcInZhbHVlXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IHVuc3RhYmxlX2RlYm91bmNlIGFzIGRlYm91bmNlLCB1bnN0YWJsZV91c2VGb3JrUmVmIGFzIHVzZUZvcmtSZWYsIHVuc3RhYmxlX3VzZUVuaGFuY2VkRWZmZWN0IGFzIHVzZUVuaGFuY2VkRWZmZWN0LCB1bnN0YWJsZV9vd25lcldpbmRvdyBhcyBvd25lcldpbmRvdyB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmZ1bmN0aW9uIGdldFN0eWxlVmFsdWUodmFsdWUpIHtcbiAgcmV0dXJuIHBhcnNlSW50KHZhbHVlLCAxMCkgfHwgMDtcbn1cbmNvbnN0IHN0eWxlcyA9IHtcbiAgc2hhZG93OiB7XG4gICAgLy8gVmlzaWJpbGl0eSBuZWVkZWQgdG8gaGlkZSB0aGUgZXh0cmEgdGV4dCBhcmVhIG9uIGlQYWRzXG4gICAgdmlzaWJpbGl0eTogJ2hpZGRlbicsXG4gICAgLy8gUmVtb3ZlIGZyb20gdGhlIGNvbnRlbnQgZmxvd1xuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIC8vIElnbm9yZSB0aGUgc2Nyb2xsYmFyIHdpZHRoXG4gICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgIGhlaWdodDogMCxcbiAgICB0b3A6IDAsXG4gICAgbGVmdDogMCxcbiAgICAvLyBDcmVhdGUgYSBuZXcgbGF5ZXIsIGluY3JlYXNlIHRoZSBpc29sYXRpb24gb2YgdGhlIGNvbXB1dGVkIHZhbHVlc1xuICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVooMCknXG4gIH1cbn07XG5mdW5jdGlvbiBpc0VtcHR5KG9iaikge1xuICByZXR1cm4gb2JqID09PSB1bmRlZmluZWQgfHwgb2JqID09PSBudWxsIHx8IE9iamVjdC5rZXlzKG9iaikubGVuZ3RoID09PSAwIHx8IG9iai5vdXRlckhlaWdodFN0eWxlID09PSAwICYmICFvYmoub3ZlcmZsb3dpbmc7XG59XG5cbi8qKlxuICpcbiAqIERlbW9zOlxuICpcbiAqIC0gW1RleHRhcmVhIEF1dG9zaXplXShodHRwczovL211aS5jb20vYmFzZS11aS9yZWFjdC10ZXh0YXJlYS1hdXRvc2l6ZS8pXG4gKiAtIFtUZXh0YXJlYSBBdXRvc2l6ZV0oaHR0cHM6Ly9tdWkuY29tL21hdGVyaWFsLXVpL3JlYWN0LXRleHRhcmVhLWF1dG9zaXplLylcbiAqXG4gKiBBUEk6XG4gKlxuICogLSBbVGV4dGFyZWFBdXRvc2l6ZSBBUEldKGh0dHBzOi8vbXVpLmNvbS9iYXNlLXVpL3JlYWN0LXRleHRhcmVhLWF1dG9zaXplL2NvbXBvbmVudHMtYXBpLyN0ZXh0YXJlYS1hdXRvc2l6ZSlcbiAqL1xuY29uc3QgVGV4dGFyZWFBdXRvc2l6ZSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFRleHRhcmVhQXV0b3NpemUocHJvcHMsIGZvcndhcmRlZFJlZikge1xuICBjb25zdCB7XG4gICAgICBvbkNoYW5nZSxcbiAgICAgIG1heFJvd3MsXG4gICAgICBtaW5Sb3dzID0gMSxcbiAgICAgIHN0eWxlLFxuICAgICAgdmFsdWVcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3Qge1xuICAgIGN1cnJlbnQ6IGlzQ29udHJvbGxlZFxuICB9ID0gUmVhY3QudXNlUmVmKHZhbHVlICE9IG51bGwpO1xuICBjb25zdCBpbnB1dFJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3QgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihmb3J3YXJkZWRSZWYsIGlucHV0UmVmKTtcbiAgY29uc3Qgc2hhZG93UmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCBjYWxjdWxhdGVUZXh0YXJlYVN0eWxlcyA9IFJlYWN0LnVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBjb25zdCBpbnB1dCA9IGlucHV0UmVmLmN1cnJlbnQ7XG4gICAgY29uc3QgY29udGFpbmVyV2luZG93ID0gb3duZXJXaW5kb3coaW5wdXQpO1xuICAgIGNvbnN0IGNvbXB1dGVkU3R5bGUgPSBjb250YWluZXJXaW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShpbnB1dCk7XG5cbiAgICAvLyBJZiBpbnB1dCdzIHdpZHRoIGlzIHNocnVuayBhbmQgaXQncyBub3QgdmlzaWJsZSwgZG9uJ3Qgc3luYyBoZWlnaHQuXG4gICAgaWYgKGNvbXB1dGVkU3R5bGUud2lkdGggPT09ICcwcHgnKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBvdXRlckhlaWdodFN0eWxlOiAwLFxuICAgICAgICBvdmVyZmxvd2luZzogZmFsc2VcbiAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IGlucHV0U2hhbGxvdyA9IHNoYWRvd1JlZi5jdXJyZW50O1xuICAgIGlucHV0U2hhbGxvdy5zdHlsZS53aWR0aCA9IGNvbXB1dGVkU3R5bGUud2lkdGg7XG4gICAgaW5wdXRTaGFsbG93LnZhbHVlID0gaW5wdXQudmFsdWUgfHwgcHJvcHMucGxhY2Vob2xkZXIgfHwgJ3gnO1xuICAgIGlmIChpbnB1dFNoYWxsb3cudmFsdWUuc2xpY2UoLTEpID09PSAnXFxuJykge1xuICAgICAgLy8gQ2VydGFpbiBmb250cyB3aGljaCBvdmVyZmxvdyB0aGUgbGluZSBoZWlnaHQgd2lsbCBjYXVzZSB0aGUgdGV4dGFyZWFcbiAgICAgIC8vIHRvIHJlcG9ydCBhIGRpZmZlcmVudCBzY3JvbGxIZWlnaHQgZGVwZW5kaW5nIG9uIHdoZXRoZXIgdGhlIGxhc3QgbGluZVxuICAgICAgLy8gaXMgZW1wdHkuIE1ha2UgaXQgbm9uLWVtcHR5IHRvIGF2b2lkIHRoaXMgaXNzdWUuXG4gICAgICBpbnB1dFNoYWxsb3cudmFsdWUgKz0gJyAnO1xuICAgIH1cbiAgICBjb25zdCBib3hTaXppbmcgPSBjb21wdXRlZFN0eWxlLmJveFNpemluZztcbiAgICBjb25zdCBwYWRkaW5nID0gZ2V0U3R5bGVWYWx1ZShjb21wdXRlZFN0eWxlLnBhZGRpbmdCb3R0b20pICsgZ2V0U3R5bGVWYWx1ZShjb21wdXRlZFN0eWxlLnBhZGRpbmdUb3ApO1xuICAgIGNvbnN0IGJvcmRlciA9IGdldFN0eWxlVmFsdWUoY29tcHV0ZWRTdHlsZS5ib3JkZXJCb3R0b21XaWR0aCkgKyBnZXRTdHlsZVZhbHVlKGNvbXB1dGVkU3R5bGUuYm9yZGVyVG9wV2lkdGgpO1xuXG4gICAgLy8gVGhlIGhlaWdodCBvZiB0aGUgaW5uZXIgY29udGVudFxuICAgIGNvbnN0IGlubmVySGVpZ2h0ID0gaW5wdXRTaGFsbG93LnNjcm9sbEhlaWdodDtcblxuICAgIC8vIE1lYXN1cmUgaGVpZ2h0IG9mIGEgdGV4dGFyZWEgd2l0aCBhIHNpbmdsZSByb3dcbiAgICBpbnB1dFNoYWxsb3cudmFsdWUgPSAneCc7XG4gICAgY29uc3Qgc2luZ2xlUm93SGVpZ2h0ID0gaW5wdXRTaGFsbG93LnNjcm9sbEhlaWdodDtcblxuICAgIC8vIFRoZSBoZWlnaHQgb2YgdGhlIG91dGVyIGNvbnRlbnRcbiAgICBsZXQgb3V0ZXJIZWlnaHQgPSBpbm5lckhlaWdodDtcbiAgICBpZiAobWluUm93cykge1xuICAgICAgb3V0ZXJIZWlnaHQgPSBNYXRoLm1heChOdW1iZXIobWluUm93cykgKiBzaW5nbGVSb3dIZWlnaHQsIG91dGVySGVpZ2h0KTtcbiAgICB9XG4gICAgaWYgKG1heFJvd3MpIHtcbiAgICAgIG91dGVySGVpZ2h0ID0gTWF0aC5taW4oTnVtYmVyKG1heFJvd3MpICogc2luZ2xlUm93SGVpZ2h0LCBvdXRlckhlaWdodCk7XG4gICAgfVxuICAgIG91dGVySGVpZ2h0ID0gTWF0aC5tYXgob3V0ZXJIZWlnaHQsIHNpbmdsZVJvd0hlaWdodCk7XG5cbiAgICAvLyBUYWtlIHRoZSBib3ggc2l6aW5nIGludG8gYWNjb3VudCBmb3IgYXBwbHlpbmcgdGhpcyB2YWx1ZSBhcyBhIHN0eWxlLlxuICAgIGNvbnN0IG91dGVySGVpZ2h0U3R5bGUgPSBvdXRlckhlaWdodCArIChib3hTaXppbmcgPT09ICdib3JkZXItYm94JyA/IHBhZGRpbmcgKyBib3JkZXIgOiAwKTtcbiAgICBjb25zdCBvdmVyZmxvd2luZyA9IE1hdGguYWJzKG91dGVySGVpZ2h0IC0gaW5uZXJIZWlnaHQpIDw9IDE7XG4gICAgcmV0dXJuIHtcbiAgICAgIG91dGVySGVpZ2h0U3R5bGUsXG4gICAgICBvdmVyZmxvd2luZ1xuICAgIH07XG4gIH0sIFttYXhSb3dzLCBtaW5Sb3dzLCBwcm9wcy5wbGFjZWhvbGRlcl0pO1xuICBjb25zdCBzeW5jSGVpZ2h0ID0gUmVhY3QudXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGNvbnN0IHRleHRhcmVhU3R5bGVzID0gY2FsY3VsYXRlVGV4dGFyZWFTdHlsZXMoKTtcbiAgICBpZiAoaXNFbXB0eSh0ZXh0YXJlYVN0eWxlcykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgaW5wdXQgPSBpbnB1dFJlZi5jdXJyZW50O1xuICAgIGlucHV0LnN0eWxlLmhlaWdodCA9IGAke3RleHRhcmVhU3R5bGVzLm91dGVySGVpZ2h0U3R5bGV9cHhgO1xuICAgIGlucHV0LnN0eWxlLm92ZXJmbG93ID0gdGV4dGFyZWFTdHlsZXMub3ZlcmZsb3dpbmcgPyAnaGlkZGVuJyA6ICcnO1xuICB9LCBbY2FsY3VsYXRlVGV4dGFyZWFTdHlsZXNdKTtcbiAgdXNlRW5oYW5jZWRFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IGhhbmRsZVJlc2l6ZSA9ICgpID0+IHtcbiAgICAgIHN5bmNIZWlnaHQoKTtcbiAgICB9O1xuICAgIC8vIFdvcmthcm91bmQgYSBcIlJlc2l6ZU9ic2VydmVyIGxvb3AgY29tcGxldGVkIHdpdGggdW5kZWxpdmVyZWQgbm90aWZpY2F0aW9uc1wiIGVycm9yXG4gICAgLy8gaW4gdGVzdC5cbiAgICAvLyBOb3RlIHRoYXQgd2UgbWlnaHQgbmVlZCB0byB1c2UgdGhpcyBsb2dpYyBpbiBwcm9kdWN0aW9uIHBlciBodHRwczovL2dpdGh1Yi5jb20vV0lDRy9yZXNpemUtb2JzZXJ2ZXIvaXNzdWVzLzM4XG4gICAgLy8gQWxzbyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL211aS9tdWkteC9pc3N1ZXMvODczM1xuICAgIGxldCByQUY7XG4gICAgY29uc3QgckFGSGFuZGxlUmVzaXplID0gKCkgPT4ge1xuICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUockFGKTtcbiAgICAgIHJBRiA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgIGhhbmRsZVJlc2l6ZSgpO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICBjb25zdCBkZWJvdW5jZUhhbmRsZVJlc2l6ZSA9IGRlYm91bmNlKGhhbmRsZVJlc2l6ZSk7XG4gICAgY29uc3QgaW5wdXQgPSBpbnB1dFJlZi5jdXJyZW50O1xuICAgIGNvbnN0IGNvbnRhaW5lcldpbmRvdyA9IG93bmVyV2luZG93KGlucHV0KTtcbiAgICBjb250YWluZXJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgZGVib3VuY2VIYW5kbGVSZXNpemUpO1xuICAgIGxldCByZXNpemVPYnNlcnZlcjtcbiAgICBpZiAodHlwZW9mIFJlc2l6ZU9ic2VydmVyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcmVzaXplT2JzZXJ2ZXIgPSBuZXcgUmVzaXplT2JzZXJ2ZXIocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICd0ZXN0JyA/IHJBRkhhbmRsZVJlc2l6ZSA6IGhhbmRsZVJlc2l6ZSk7XG4gICAgICByZXNpemVPYnNlcnZlci5vYnNlcnZlKGlucHV0KTtcbiAgICB9XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGRlYm91bmNlSGFuZGxlUmVzaXplLmNsZWFyKCk7XG4gICAgICBjYW5jZWxBbmltYXRpb25GcmFtZShyQUYpO1xuICAgICAgY29udGFpbmVyV2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGRlYm91bmNlSGFuZGxlUmVzaXplKTtcbiAgICAgIGlmIChyZXNpemVPYnNlcnZlcikge1xuICAgICAgICByZXNpemVPYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSwgW2NhbGN1bGF0ZVRleHRhcmVhU3R5bGVzLCBzeW5jSGVpZ2h0XSk7XG4gIHVzZUVuaGFuY2VkRWZmZWN0KCgpID0+IHtcbiAgICBzeW5jSGVpZ2h0KCk7XG4gIH0pO1xuICBjb25zdCBoYW5kbGVDaGFuZ2UgPSBldmVudCA9PiB7XG4gICAgaWYgKCFpc0NvbnRyb2xsZWQpIHtcbiAgICAgIHN5bmNIZWlnaHQoKTtcbiAgICB9XG4gICAgaWYgKG9uQ2hhbmdlKSB7XG4gICAgICBvbkNoYW5nZShldmVudCk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3hzKFJlYWN0LkZyYWdtZW50LCB7XG4gICAgY2hpbGRyZW46IFsvKiNfX1BVUkVfXyovX2pzeChcInRleHRhcmVhXCIsIF9leHRlbmRzKHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIG9uQ2hhbmdlOiBoYW5kbGVDaGFuZ2UsXG4gICAgICByZWY6IGhhbmRsZVJlZlxuICAgICAgLy8gQXBwbHkgdGhlIHJvd3MgcHJvcCB0byBnZXQgYSBcImNvcnJlY3RcIiBmaXJzdCBTU1IgcGFpbnRcbiAgICAgICxcbiAgICAgIHJvd3M6IG1pblJvd3MsXG4gICAgICBzdHlsZTogc3R5bGVcbiAgICB9LCBvdGhlcikpLCAvKiNfX1BVUkVfXyovX2pzeChcInRleHRhcmVhXCIsIHtcbiAgICAgIFwiYXJpYS1oaWRkZW5cIjogdHJ1ZSxcbiAgICAgIGNsYXNzTmFtZTogcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgcmVhZE9ubHk6IHRydWUsXG4gICAgICByZWY6IHNoYWRvd1JlZixcbiAgICAgIHRhYkluZGV4OiAtMSxcbiAgICAgIHN0eWxlOiBfZXh0ZW5kcyh7fSwgc3R5bGVzLnNoYWRvdywgc3R5bGUsIHtcbiAgICAgICAgcGFkZGluZ1RvcDogMCxcbiAgICAgICAgcGFkZGluZ0JvdHRvbTogMFxuICAgICAgfSlcbiAgICB9KV1cbiAgfSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFRleHRhcmVhQXV0b3NpemUucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBUeXBlU2NyaXB0IHR5cGVzIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4g4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogTWF4aW11bSBudW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5LlxuICAgKi9cbiAgbWF4Um93czogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogTWluaW11bSBudW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5LlxuICAgKiBAZGVmYXVsdCAxXG4gICAqL1xuICBtaW5Sb3dzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBwbGFjZWhvbGRlcjogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zdHJpbmcpLCBQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgeyBUZXh0YXJlYUF1dG9zaXplIH07IiwiXCJ1c2Ugc3RyaWN0XCI7XG4ndXNlIGNsaWVudCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgUmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xudmFyIF9zdHlsZWRFbmdpbmUgPSByZXF1aXJlKFwiQG11aS9zdHlsZWQtZW5naW5lXCIpO1xuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKGUpIHsgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgV2Vha01hcCkgcmV0dXJuIG51bGw7IHZhciByID0gbmV3IFdlYWtNYXAoKSwgdCA9IG5ldyBXZWFrTWFwKCk7IHJldHVybiAoX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGUgPyB0IDogcjsgfSkoZSk7IH1cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKGUsIHIpIHsgaWYgKCFyICYmIGUgJiYgZS5fX2VzTW9kdWxlKSByZXR1cm4gZTsgaWYgKG51bGwgPT09IGUgfHwgXCJvYmplY3RcIiAhPSB0eXBlb2YgZSAmJiBcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGUpIHJldHVybiB7IGRlZmF1bHQ6IGUgfTsgdmFyIHQgPSBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUocik7IGlmICh0ICYmIHQuaGFzKGUpKSByZXR1cm4gdC5nZXQoZSk7IHZhciBuID0geyBfX3Byb3RvX186IG51bGwgfSwgYSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciB1IGluIGUpIGlmIChcImRlZmF1bHRcIiAhPT0gdSAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSwgdSkpIHsgdmFyIGkgPSBhID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLCB1KSA6IG51bGw7IGkgJiYgKGkuZ2V0IHx8IGkuc2V0KSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLCB1LCBpKSA6IG5bdV0gPSBlW3VdOyB9IHJldHVybiBuLmRlZmF1bHQgPSBlLCB0ICYmIHQuc2V0KGUsIG4pLCBuOyB9XG5mdW5jdGlvbiBpc09iamVjdEVtcHR5KG9iaikge1xuICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5sZW5ndGggPT09IDA7XG59XG5mdW5jdGlvbiB1c2VUaGVtZShkZWZhdWx0VGhlbWUgPSBudWxsKSB7XG4gIGNvbnN0IGNvbnRleHRUaGVtZSA9IFJlYWN0LnVzZUNvbnRleHQoX3N0eWxlZEVuZ2luZS5UaGVtZUNvbnRleHQpO1xuICByZXR1cm4gIWNvbnRleHRUaGVtZSB8fCBpc09iamVjdEVtcHR5KGNvbnRleHRUaGVtZSkgPyBkZWZhdWx0VGhlbWUgOiBjb250ZXh0VGhlbWU7XG59XG52YXIgX2RlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQgPSB1c2VUaGVtZTsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJhbmNob3JFbFwiLCBcImNvbXBvbmVudFwiLCBcImNvbXBvbmVudHNcIiwgXCJjb21wb25lbnRzUHJvcHNcIiwgXCJjb250YWluZXJcIiwgXCJkaXNhYmxlUG9ydGFsXCIsIFwia2VlcE1vdW50ZWRcIiwgXCJtb2RpZmllcnNcIiwgXCJvcGVuXCIsIFwicGxhY2VtZW50XCIsIFwicG9wcGVyT3B0aW9uc1wiLCBcInBvcHBlclJlZlwiLCBcInRyYW5zaXRpb25cIiwgXCJzbG90c1wiLCBcInNsb3RQcm9wc1wiXTtcbmltcG9ydCB7IFBvcHBlciBhcyBCYXNlUG9wcGVyIH0gZnJvbSAnQG11aS9iYXNlL1BvcHBlcic7XG5pbXBvcnQgdXNlVGhlbWUgZnJvbSAnQG11aS9zeXN0ZW0vdXNlVGhlbWVXaXRob3V0RGVmYXVsdCc7XG5pbXBvcnQgcmVmVHlwZSBmcm9tICdAbXVpL3V0aWxzL3JlZlR5cGUnO1xuaW1wb3J0IEhUTUxFbGVtZW50VHlwZSBmcm9tICdAbXVpL3V0aWxzL0hUTUxFbGVtZW50VHlwZSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgc3R5bGVkLCB1c2VUaGVtZVByb3BzIH0gZnJvbSAnLi4vc3R5bGVzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCBQb3BwZXJSb290ID0gc3R5bGVkKEJhc2VQb3BwZXIsIHtcbiAgbmFtZTogJ011aVBvcHBlcicsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMucm9vdFxufSkoe30pO1xuXG4vKipcbiAqXG4gKiBEZW1vczpcbiAqXG4gKiAtIFtBdXRvY29tcGxldGVdKGh0dHBzOi8vbXVpLmNvbS9tYXRlcmlhbC11aS9yZWFjdC1hdXRvY29tcGxldGUvKVxuICogLSBbTWVudV0oaHR0cHM6Ly9tdWkuY29tL21hdGVyaWFsLXVpL3JlYWN0LW1lbnUvKVxuICogLSBbUG9wcGVyXShodHRwczovL211aS5jb20vbWF0ZXJpYWwtdWkvcmVhY3QtcG9wcGVyLylcbiAqXG4gKiBBUEk6XG4gKlxuICogLSBbUG9wcGVyIEFQSV0oaHR0cHM6Ly9tdWkuY29tL21hdGVyaWFsLXVpL2FwaS9wb3BwZXIvKVxuICovXG5jb25zdCBQb3BwZXIgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBQb3BwZXIoaW5Qcm9wcywgcmVmKSB7XG4gIHZhciBfc2xvdHMkcm9vdDtcbiAgY29uc3QgdGhlbWUgPSB1c2VUaGVtZSgpO1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlQb3BwZXInXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBhbmNob3JFbCxcbiAgICAgIGNvbXBvbmVudCxcbiAgICAgIGNvbXBvbmVudHMsXG4gICAgICBjb21wb25lbnRzUHJvcHMsXG4gICAgICBjb250YWluZXIsXG4gICAgICBkaXNhYmxlUG9ydGFsLFxuICAgICAga2VlcE1vdW50ZWQsXG4gICAgICBtb2RpZmllcnMsXG4gICAgICBvcGVuLFxuICAgICAgcGxhY2VtZW50LFxuICAgICAgcG9wcGVyT3B0aW9ucyxcbiAgICAgIHBvcHBlclJlZixcbiAgICAgIHRyYW5zaXRpb24sXG4gICAgICBzbG90cyxcbiAgICAgIHNsb3RQcm9wc1xuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBSb290Q29tcG9uZW50ID0gKF9zbG90cyRyb290ID0gc2xvdHMgPT0gbnVsbCA/IHZvaWQgMCA6IHNsb3RzLnJvb3QpICE9IG51bGwgPyBfc2xvdHMkcm9vdCA6IGNvbXBvbmVudHMgPT0gbnVsbCA/IHZvaWQgMCA6IGNvbXBvbmVudHMuUm9vdDtcbiAgY29uc3Qgb3RoZXJQcm9wcyA9IF9leHRlbmRzKHtcbiAgICBhbmNob3JFbCxcbiAgICBjb250YWluZXIsXG4gICAgZGlzYWJsZVBvcnRhbCxcbiAgICBrZWVwTW91bnRlZCxcbiAgICBtb2RpZmllcnMsXG4gICAgb3BlbixcbiAgICBwbGFjZW1lbnQsXG4gICAgcG9wcGVyT3B0aW9ucyxcbiAgICBwb3BwZXJSZWYsXG4gICAgdHJhbnNpdGlvblxuICB9LCBvdGhlcik7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChQb3BwZXJSb290LCBfZXh0ZW5kcyh7XG4gICAgYXM6IGNvbXBvbmVudCxcbiAgICBkaXJlY3Rpb246IHRoZW1lID09IG51bGwgPyB2b2lkIDAgOiB0aGVtZS5kaXJlY3Rpb24sXG4gICAgc2xvdHM6IHtcbiAgICAgIHJvb3Q6IFJvb3RDb21wb25lbnRcbiAgICB9LFxuICAgIHNsb3RQcm9wczogc2xvdFByb3BzICE9IG51bGwgPyBzbG90UHJvcHMgOiBjb21wb25lbnRzUHJvcHNcbiAgfSwgb3RoZXJQcm9wcywge1xuICAgIHJlZjogcmVmXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gUG9wcGVyLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgVHlwZVNjcmlwdCB0eXBlcyBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIEFuIEhUTUwgZWxlbWVudCwgW3ZpcnR1YWxFbGVtZW50XShodHRwczovL3BvcHBlci5qcy5vcmcvZG9jcy92Mi92aXJ0dWFsLWVsZW1lbnRzLyksXG4gICAqIG9yIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGVpdGhlci5cbiAgICogSXQncyB1c2VkIHRvIHNldCB0aGUgcG9zaXRpb24gb2YgdGhlIHBvcHBlci5cbiAgICogVGhlIHJldHVybiB2YWx1ZSB3aWxsIHBhc3NlZCBhcyB0aGUgcmVmZXJlbmNlIG9iamVjdCBvZiB0aGUgUG9wcGVyIGluc3RhbmNlLlxuICAgKi9cbiAgYW5jaG9yRWw6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbSFRNTEVsZW1lbnRUeXBlLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuZnVuY10pLFxuICAvKipcbiAgICogUG9wcGVyIHJlbmRlciBmdW5jdGlvbiBvciBub2RlLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm5vZGUsIFByb3BUeXBlcy5mdW5jXSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnRzIHVzZWQgZm9yIGVhY2ggc2xvdCBpbnNpZGUgdGhlIFBvcHBlci5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIGNvbXBvbmVudHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgUm9vdDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlXG4gIH0pLFxuICAvKipcbiAgICogVGhlIHByb3BzIHVzZWQgZm9yIGVhY2ggc2xvdCBpbnNpZGUgdGhlIFBvcHBlci5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIGNvbXBvbmVudHNQcm9wczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICByb290OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG4gIH0pLFxuICAvKipcbiAgICogQW4gSFRNTCBlbGVtZW50IG9yIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBvbmUuXG4gICAqIFRoZSBgY29udGFpbmVyYCB3aWxsIGhhdmUgdGhlIHBvcnRhbCBjaGlsZHJlbiBhcHBlbmRlZCB0byBpdC5cbiAgICpcbiAgICogWW91IGNhbiBhbHNvIHByb3ZpZGUgYSBjYWxsYmFjaywgd2hpY2ggaXMgY2FsbGVkIGluIGEgUmVhY3QgbGF5b3V0IGVmZmVjdC5cbiAgICogVGhpcyBsZXRzIHlvdSBzZXQgdGhlIGNvbnRhaW5lciBmcm9tIGEgcmVmLCBhbmQgYWxzbyBtYWtlcyBzZXJ2ZXItc2lkZSByZW5kZXJpbmcgcG9zc2libGUuXG4gICAqXG4gICAqIEJ5IGRlZmF1bHQsIGl0IHVzZXMgdGhlIGJvZHkgb2YgdGhlIHRvcC1sZXZlbCBkb2N1bWVudCBvYmplY3QsXG4gICAqIHNvIGl0J3Mgc2ltcGx5IGBkb2N1bWVudC5ib2R5YCBtb3N0IG9mIHRoZSB0aW1lLlxuICAgKi9cbiAgY29udGFpbmVyOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW0hUTUxFbGVtZW50VHlwZSwgUHJvcFR5cGVzLmZ1bmNdKSxcbiAgLyoqXG4gICAqIFRoZSBgY2hpbGRyZW5gIHdpbGwgYmUgdW5kZXIgdGhlIERPTSBoaWVyYXJjaHkgb2YgdGhlIHBhcmVudCBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlUG9ydGFsOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIEFsd2F5cyBrZWVwIHRoZSBjaGlsZHJlbiBpbiB0aGUgRE9NLlxuICAgKiBUaGlzIHByb3AgY2FuIGJlIHVzZWZ1bCBpbiBTRU8gc2l0dWF0aW9uIG9yXG4gICAqIHdoZW4geW91IHdhbnQgdG8gbWF4aW1pemUgdGhlIHJlc3BvbnNpdmVuZXNzIG9mIHRoZSBQb3BwZXIuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBrZWVwTW91bnRlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBQb3BwZXIuanMgaXMgYmFzZWQgb24gYSBcInBsdWdpbi1saWtlXCIgYXJjaGl0ZWN0dXJlLFxuICAgKiBtb3N0IG9mIGl0cyBmZWF0dXJlcyBhcmUgZnVsbHkgZW5jYXBzdWxhdGVkIFwibW9kaWZpZXJzXCIuXG4gICAqXG4gICAqIEEgbW9kaWZpZXIgaXMgYSBmdW5jdGlvbiB0aGF0IGlzIGNhbGxlZCBlYWNoIHRpbWUgUG9wcGVyLmpzIG5lZWRzIHRvXG4gICAqIGNvbXB1dGUgdGhlIHBvc2l0aW9uIG9mIHRoZSBwb3BwZXIuXG4gICAqIEZvciB0aGlzIHJlYXNvbiwgbW9kaWZpZXJzIHNob3VsZCBiZSB2ZXJ5IHBlcmZvcm1hbnQgdG8gYXZvaWQgYm90dGxlbmVja3MuXG4gICAqIFRvIGxlYXJuIGhvdyB0byBjcmVhdGUgYSBtb2RpZmllciwgW3JlYWQgdGhlIG1vZGlmaWVycyBkb2N1bWVudGF0aW9uXShodHRwczovL3BvcHBlci5qcy5vcmcvZG9jcy92Mi9tb2RpZmllcnMvKS5cbiAgICovXG4gIG1vZGlmaWVyczogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBkYXRhOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGVmZmVjdDogUHJvcFR5cGVzLmZ1bmMsXG4gICAgZW5hYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gICAgZm46IFByb3BUeXBlcy5mdW5jLFxuICAgIG5hbWU6IFByb3BUeXBlcy5hbnksXG4gICAgb3B0aW9uczogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBwaGFzZTogUHJvcFR5cGVzLm9uZU9mKFsnYWZ0ZXJNYWluJywgJ2FmdGVyUmVhZCcsICdhZnRlcldyaXRlJywgJ2JlZm9yZU1haW4nLCAnYmVmb3JlUmVhZCcsICdiZWZvcmVXcml0ZScsICdtYWluJywgJ3JlYWQnLCAnd3JpdGUnXSksXG4gICAgcmVxdWlyZXM6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zdHJpbmcpLFxuICAgIHJlcXVpcmVzSWZFeGlzdHM6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zdHJpbmcpXG4gIH0pKSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpcyBzaG93bi5cbiAgICovXG4gIG9wZW46IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gIC8qKlxuICAgKiBQb3BwZXIgcGxhY2VtZW50LlxuICAgKiBAZGVmYXVsdCAnYm90dG9tJ1xuICAgKi9cbiAgcGxhY2VtZW50OiBQcm9wVHlwZXMub25lT2YoWydhdXRvLWVuZCcsICdhdXRvLXN0YXJ0JywgJ2F1dG8nLCAnYm90dG9tLWVuZCcsICdib3R0b20tc3RhcnQnLCAnYm90dG9tJywgJ2xlZnQtZW5kJywgJ2xlZnQtc3RhcnQnLCAnbGVmdCcsICdyaWdodC1lbmQnLCAncmlnaHQtc3RhcnQnLCAncmlnaHQnLCAndG9wLWVuZCcsICd0b3Atc3RhcnQnLCAndG9wJ10pLFxuICAvKipcbiAgICogT3B0aW9ucyBwcm92aWRlZCB0byB0aGUgW2BQb3BwZXIuanNgXShodHRwczovL3BvcHBlci5qcy5vcmcvZG9jcy92Mi9jb25zdHJ1Y3RvcnMvI29wdGlvbnMpIGluc3RhbmNlLlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgcG9wcGVyT3B0aW9uczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBtb2RpZmllcnM6IFByb3BUeXBlcy5hcnJheSxcbiAgICBvbkZpcnN0VXBkYXRlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBwbGFjZW1lbnQ6IFByb3BUeXBlcy5vbmVPZihbJ2F1dG8tZW5kJywgJ2F1dG8tc3RhcnQnLCAnYXV0bycsICdib3R0b20tZW5kJywgJ2JvdHRvbS1zdGFydCcsICdib3R0b20nLCAnbGVmdC1lbmQnLCAnbGVmdC1zdGFydCcsICdsZWZ0JywgJ3JpZ2h0LWVuZCcsICdyaWdodC1zdGFydCcsICdyaWdodCcsICd0b3AtZW5kJywgJ3RvcC1zdGFydCcsICd0b3AnXSksXG4gICAgc3RyYXRlZ3k6IFByb3BUeXBlcy5vbmVPZihbJ2Fic29sdXRlJywgJ2ZpeGVkJ10pXG4gIH0pLFxuICAvKipcbiAgICogQSByZWYgdGhhdCBwb2ludHMgdG8gdGhlIHVzZWQgcG9wcGVyIGluc3RhbmNlLlxuICAgKi9cbiAgcG9wcGVyUmVmOiByZWZUeXBlLFxuICAvKipcbiAgICogVGhlIHByb3BzIHVzZWQgZm9yIGVhY2ggc2xvdCBpbnNpZGUgdGhlIFBvcHBlci5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIHNsb3RQcm9wczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICByb290OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG4gIH0pLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudHMgdXNlZCBmb3IgZWFjaCBzbG90IGluc2lkZSB0aGUgUG9wcGVyLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgc2xvdHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgcm9vdDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlXG4gIH0pLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogSGVscCBzdXBwb3J0aW5nIGEgcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9UcmFuc2l0aW9uIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHRyYW5zaXRpb246IFByb3BUeXBlcy5ib29sXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgUG9wcGVyOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1Db250cm9sU3RhdGUoe1xuICBwcm9wcyxcbiAgc3RhdGVzLFxuICBtdWlGb3JtQ29udHJvbFxufSkge1xuICByZXR1cm4gc3RhdGVzLnJlZHVjZSgoYWNjLCBzdGF0ZSkgPT4ge1xuICAgIGFjY1tzdGF0ZV0gPSBwcm9wc1tzdGF0ZV07XG4gICAgaWYgKG11aUZvcm1Db250cm9sKSB7XG4gICAgICBpZiAodHlwZW9mIHByb3BzW3N0YXRlXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgYWNjW3N0YXRlXSA9IG11aUZvcm1Db250cm9sW3N0YXRlXTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xufSIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0Jztcbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuY29uc3QgRm9ybUNvbnRyb2xDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQodW5kZWZpbmVkKTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIEZvcm1Db250cm9sQ29udGV4dC5kaXNwbGF5TmFtZSA9ICdGb3JtQ29udHJvbENvbnRleHQnO1xufVxuZXhwb3J0IGRlZmF1bHQgRm9ybUNvbnRyb2xDb250ZXh0OyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IEZvcm1Db250cm9sQ29udGV4dCBmcm9tICcuL0Zvcm1Db250cm9sQ29udGV4dCc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VGb3JtQ29udHJvbCgpIHtcbiAgcmV0dXJuIFJlYWN0LnVzZUNvbnRleHQoRm9ybUNvbnRyb2xDb250ZXh0KTtcbn0iLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IEdsb2JhbFN0eWxlcyBhcyBTeXN0ZW1HbG9iYWxTdHlsZXMgfSBmcm9tICdAbXVpL3N5c3RlbSc7XG5pbXBvcnQgZGVmYXVsdFRoZW1lIGZyb20gJy4uL3N0eWxlcy9kZWZhdWx0VGhlbWUnO1xuaW1wb3J0IFRIRU1FX0lEIGZyb20gJy4uL3N0eWxlcy9pZGVudGlmaWVyJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5mdW5jdGlvbiBHbG9iYWxTdHlsZXMocHJvcHMpIHtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFN5c3RlbUdsb2JhbFN0eWxlcywgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgZGVmYXVsdFRoZW1lOiBkZWZhdWx0VGhlbWUsXG4gICAgdGhlbWVJZDogVEhFTUVfSURcbiAgfSkpO1xufVxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gR2xvYmFsU3R5bGVzLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIFRoZSBzdHlsZXMgeW91IHdhbnQgdG8gYXBwbHkgZ2xvYmFsbHkuXG4gICAqL1xuICBzdHlsZXM6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5LCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmJvb2xdKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IEdsb2JhbFN0eWxlczsiLCIvLyBTdXBwb3J0cyBkZXRlcm1pbmF0aW9uIG9mIGlzQ29udHJvbGxlZCgpLlxuLy8gQ29udHJvbGxlZCBpbnB1dCBhY2NlcHRzIGl0cyBjdXJyZW50IHZhbHVlIGFzIGEgcHJvcC5cbi8vXG4vLyBAc2VlIGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvZm9ybXMuaHRtbCNjb250cm9sbGVkLWNvbXBvbmVudHNcbi8vIEBwYXJhbSB2YWx1ZVxuLy8gQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgc3RyaW5nIChpbmNsdWRpbmcgJycpIG9yIG51bWJlciAoaW5jbHVkaW5nIHplcm8pXG5leHBvcnQgZnVuY3Rpb24gaGFzVmFsdWUodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgIShBcnJheS5pc0FycmF5KHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGggPT09IDApO1xufVxuXG4vLyBEZXRlcm1pbmUgaWYgZmllbGQgaXMgZW1wdHkgb3IgZmlsbGVkLlxuLy8gUmVzcG9uc2UgZGV0ZXJtaW5lcyBpZiBsYWJlbCBpcyBwcmVzZW50ZWQgYWJvdmUgZmllbGQgb3IgYXMgcGxhY2Vob2xkZXIuXG4vL1xuLy8gQHBhcmFtIG9ialxuLy8gQHBhcmFtIFNTUlxuLy8gQHJldHVybnMge2Jvb2xlYW59IEZhbHNlIHdoZW4gbm90IHByZXNlbnQgb3IgZW1wdHkgc3RyaW5nLlxuLy8gICAgICAgICAgICAgICAgICAgIFRydWUgd2hlbiBhbnkgbnVtYmVyIG9yIHN0cmluZyB3aXRoIGxlbmd0aC5cbmV4cG9ydCBmdW5jdGlvbiBpc0ZpbGxlZChvYmosIFNTUiA9IGZhbHNlKSB7XG4gIHJldHVybiBvYmogJiYgKGhhc1ZhbHVlKG9iai52YWx1ZSkgJiYgb2JqLnZhbHVlICE9PSAnJyB8fCBTU1IgJiYgaGFzVmFsdWUob2JqLmRlZmF1bHRWYWx1ZSkgJiYgb2JqLmRlZmF1bHRWYWx1ZSAhPT0gJycpO1xufVxuXG4vLyBEZXRlcm1pbmUgaWYgYW4gSW5wdXQgaXMgYWRvcm5lZCBvbiBzdGFydC5cbi8vIEl0J3MgY29ycmVzcG9uZGluZyB0byB0aGUgbGVmdCB3aXRoIExUUi5cbi8vXG4vLyBAcGFyYW0gb2JqXG4vLyBAcmV0dXJucyB7Ym9vbGVhbn0gRmFsc2Ugd2hlbiBubyBhZG9ybm1lbnRzLlxuLy8gICAgICAgICAgICAgICAgICAgIFRydWUgd2hlbiBhZG9ybmVkIGF0IHRoZSBzdGFydC5cbmV4cG9ydCBmdW5jdGlvbiBpc0Fkb3JuZWRTdGFydChvYmopIHtcbiAgcmV0dXJuIG9iai5zdGFydEFkb3JubWVudDtcbn0iLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldElucHV0QmFzZVV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpSW5wdXRCYXNlJywgc2xvdCk7XG59XG5jb25zdCBpbnB1dEJhc2VDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpSW5wdXRCYXNlJywgWydyb290JywgJ2Zvcm1Db250cm9sJywgJ2ZvY3VzZWQnLCAnZGlzYWJsZWQnLCAnYWRvcm5lZFN0YXJ0JywgJ2Fkb3JuZWRFbmQnLCAnZXJyb3InLCAnc2l6ZVNtYWxsJywgJ211bHRpbGluZScsICdjb2xvclNlY29uZGFyeScsICdmdWxsV2lkdGgnLCAnaGlkZGVuTGFiZWwnLCAncmVhZE9ubHknLCAnaW5wdXQnLCAnaW5wdXRTaXplU21hbGwnLCAnaW5wdXRNdWx0aWxpbmUnLCAnaW5wdXRUeXBlU2VhcmNoJywgJ2lucHV0QWRvcm5lZFN0YXJ0JywgJ2lucHV0QWRvcm5lZEVuZCcsICdpbnB1dEhpZGRlbkxhYmVsJ10pO1xuZXhwb3J0IGRlZmF1bHQgaW5wdXRCYXNlQ2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX2Zvcm1hdE11aUVycm9yTWVzc2FnZSBmcm9tIFwiQG11aS91dGlscy9mb3JtYXRNdWlFcnJvck1lc3NhZ2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImFyaWEtZGVzY3JpYmVkYnlcIiwgXCJhdXRvQ29tcGxldGVcIiwgXCJhdXRvRm9jdXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImNvbXBvbmVudHNcIiwgXCJjb21wb25lbnRzUHJvcHNcIiwgXCJkZWZhdWx0VmFsdWVcIiwgXCJkaXNhYmxlZFwiLCBcImRpc2FibGVJbmplY3RpbmdHbG9iYWxTdHlsZXNcIiwgXCJlbmRBZG9ybm1lbnRcIiwgXCJlcnJvclwiLCBcImZ1bGxXaWR0aFwiLCBcImlkXCIsIFwiaW5wdXRDb21wb25lbnRcIiwgXCJpbnB1dFByb3BzXCIsIFwiaW5wdXRSZWZcIiwgXCJtYXJnaW5cIiwgXCJtYXhSb3dzXCIsIFwibWluUm93c1wiLCBcIm11bHRpbGluZVwiLCBcIm5hbWVcIiwgXCJvbkJsdXJcIiwgXCJvbkNoYW5nZVwiLCBcIm9uQ2xpY2tcIiwgXCJvbkZvY3VzXCIsIFwib25LZXlEb3duXCIsIFwib25LZXlVcFwiLCBcInBsYWNlaG9sZGVyXCIsIFwicmVhZE9ubHlcIiwgXCJyZW5kZXJTdWZmaXhcIiwgXCJyb3dzXCIsIFwic2l6ZVwiLCBcInNsb3RQcm9wc1wiLCBcInNsb3RzXCIsIFwic3RhcnRBZG9ybm1lbnRcIiwgXCJ0eXBlXCIsIFwidmFsdWVcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgZWxlbWVudFR5cGVBY2NlcHRpbmdSZWYgZnJvbSAnQG11aS91dGlscy9lbGVtZW50VHlwZUFjY2VwdGluZ1JlZic7XG5pbXBvcnQgcmVmVHlwZSBmcm9tICdAbXVpL3V0aWxzL3JlZlR5cGUnO1xuaW1wb3J0IHsgVGV4dGFyZWFBdXRvc2l6ZSB9IGZyb20gJ0BtdWkvYmFzZSc7XG5pbXBvcnQgeyBpc0hvc3RDb21wb25lbnQgfSBmcm9tICdAbXVpL2Jhc2UvdXRpbHMnO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IGZvcm1Db250cm9sU3RhdGUgZnJvbSAnLi4vRm9ybUNvbnRyb2wvZm9ybUNvbnRyb2xTdGF0ZSc7XG5pbXBvcnQgRm9ybUNvbnRyb2xDb250ZXh0IGZyb20gJy4uL0Zvcm1Db250cm9sL0Zvcm1Db250cm9sQ29udGV4dCc7XG5pbXBvcnQgdXNlRm9ybUNvbnRyb2wgZnJvbSAnLi4vRm9ybUNvbnRyb2wvdXNlRm9ybUNvbnRyb2wnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IHVzZUZvcmtSZWYgZnJvbSAnLi4vdXRpbHMvdXNlRm9ya1JlZic7XG5pbXBvcnQgdXNlRW5oYW5jZWRFZmZlY3QgZnJvbSAnLi4vdXRpbHMvdXNlRW5oYW5jZWRFZmZlY3QnO1xuaW1wb3J0IEdsb2JhbFN0eWxlcyBmcm9tICcuLi9HbG9iYWxTdHlsZXMnO1xuaW1wb3J0IHsgaXNGaWxsZWQgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCBpbnB1dEJhc2VDbGFzc2VzLCB7IGdldElucHV0QmFzZVV0aWxpdHlDbGFzcyB9IGZyb20gJy4vaW5wdXRCYXNlQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuZXhwb3J0IGNvbnN0IHJvb3RPdmVycmlkZXNSZXNvbHZlciA9IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBvd25lclN0YXRlXG4gIH0gPSBwcm9wcztcbiAgcmV0dXJuIFtzdHlsZXMucm9vdCwgb3duZXJTdGF0ZS5mb3JtQ29udHJvbCAmJiBzdHlsZXMuZm9ybUNvbnRyb2wsIG93bmVyU3RhdGUuc3RhcnRBZG9ybm1lbnQgJiYgc3R5bGVzLmFkb3JuZWRTdGFydCwgb3duZXJTdGF0ZS5lbmRBZG9ybm1lbnQgJiYgc3R5bGVzLmFkb3JuZWRFbmQsIG93bmVyU3RhdGUuZXJyb3IgJiYgc3R5bGVzLmVycm9yLCBvd25lclN0YXRlLnNpemUgPT09ICdzbWFsbCcgJiYgc3R5bGVzLnNpemVTbWFsbCwgb3duZXJTdGF0ZS5tdWx0aWxpbmUgJiYgc3R5bGVzLm11bHRpbGluZSwgb3duZXJTdGF0ZS5jb2xvciAmJiBzdHlsZXNbYGNvbG9yJHtjYXBpdGFsaXplKG93bmVyU3RhdGUuY29sb3IpfWBdLCBvd25lclN0YXRlLmZ1bGxXaWR0aCAmJiBzdHlsZXMuZnVsbFdpZHRoLCBvd25lclN0YXRlLmhpZGRlbkxhYmVsICYmIHN0eWxlcy5oaWRkZW5MYWJlbF07XG59O1xuZXhwb3J0IGNvbnN0IGlucHV0T3ZlcnJpZGVzUmVzb2x2ZXIgPSAocHJvcHMsIHN0eWxlcykgPT4ge1xuICBjb25zdCB7XG4gICAgb3duZXJTdGF0ZVxuICB9ID0gcHJvcHM7XG4gIHJldHVybiBbc3R5bGVzLmlucHV0LCBvd25lclN0YXRlLnNpemUgPT09ICdzbWFsbCcgJiYgc3R5bGVzLmlucHV0U2l6ZVNtYWxsLCBvd25lclN0YXRlLm11bHRpbGluZSAmJiBzdHlsZXMuaW5wdXRNdWx0aWxpbmUsIG93bmVyU3RhdGUudHlwZSA9PT0gJ3NlYXJjaCcgJiYgc3R5bGVzLmlucHV0VHlwZVNlYXJjaCwgb3duZXJTdGF0ZS5zdGFydEFkb3JubWVudCAmJiBzdHlsZXMuaW5wdXRBZG9ybmVkU3RhcnQsIG93bmVyU3RhdGUuZW5kQWRvcm5tZW50ICYmIHN0eWxlcy5pbnB1dEFkb3JuZWRFbmQsIG93bmVyU3RhdGUuaGlkZGVuTGFiZWwgJiYgc3R5bGVzLmlucHV0SGlkZGVuTGFiZWxdO1xufTtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIGNvbG9yLFxuICAgIGRpc2FibGVkLFxuICAgIGVycm9yLFxuICAgIGVuZEFkb3JubWVudCxcbiAgICBmb2N1c2VkLFxuICAgIGZvcm1Db250cm9sLFxuICAgIGZ1bGxXaWR0aCxcbiAgICBoaWRkZW5MYWJlbCxcbiAgICBtdWx0aWxpbmUsXG4gICAgcmVhZE9ubHksXG4gICAgc2l6ZSxcbiAgICBzdGFydEFkb3JubWVudCxcbiAgICB0eXBlXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCBgY29sb3Ike2NhcGl0YWxpemUoY29sb3IpfWAsIGRpc2FibGVkICYmICdkaXNhYmxlZCcsIGVycm9yICYmICdlcnJvcicsIGZ1bGxXaWR0aCAmJiAnZnVsbFdpZHRoJywgZm9jdXNlZCAmJiAnZm9jdXNlZCcsIGZvcm1Db250cm9sICYmICdmb3JtQ29udHJvbCcsIHNpemUgJiYgc2l6ZSAhPT0gJ21lZGl1bScgJiYgYHNpemUke2NhcGl0YWxpemUoc2l6ZSl9YCwgbXVsdGlsaW5lICYmICdtdWx0aWxpbmUnLCBzdGFydEFkb3JubWVudCAmJiAnYWRvcm5lZFN0YXJ0JywgZW5kQWRvcm5tZW50ICYmICdhZG9ybmVkRW5kJywgaGlkZGVuTGFiZWwgJiYgJ2hpZGRlbkxhYmVsJywgcmVhZE9ubHkgJiYgJ3JlYWRPbmx5J10sXG4gICAgaW5wdXQ6IFsnaW5wdXQnLCBkaXNhYmxlZCAmJiAnZGlzYWJsZWQnLCB0eXBlID09PSAnc2VhcmNoJyAmJiAnaW5wdXRUeXBlU2VhcmNoJywgbXVsdGlsaW5lICYmICdpbnB1dE11bHRpbGluZScsIHNpemUgPT09ICdzbWFsbCcgJiYgJ2lucHV0U2l6ZVNtYWxsJywgaGlkZGVuTGFiZWwgJiYgJ2lucHV0SGlkZGVuTGFiZWwnLCBzdGFydEFkb3JubWVudCAmJiAnaW5wdXRBZG9ybmVkU3RhcnQnLCBlbmRBZG9ybm1lbnQgJiYgJ2lucHV0QWRvcm5lZEVuZCcsIHJlYWRPbmx5ICYmICdyZWFkT25seSddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0SW5wdXRCYXNlVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5leHBvcnQgY29uc3QgSW5wdXRCYXNlUm9vdCA9IHN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnTXVpSW5wdXRCYXNlJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogcm9vdE92ZXJyaWRlc1Jlc29sdmVyXG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe30sIHRoZW1lLnR5cG9ncmFwaHkuYm9keTEsIHtcbiAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLnRleHQucHJpbWFyeSxcbiAgbGluZUhlaWdodDogJzEuNDM3NWVtJyxcbiAgLy8gMjNweFxuICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgLy8gUHJldmVudCBwYWRkaW5nIGlzc3VlIHdpdGggZnVsbFdpZHRoLlxuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgY3Vyc29yOiAndGV4dCcsXG4gIGRpc3BsYXk6ICdpbmxpbmUtZmxleCcsXG4gIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICBbYCYuJHtpbnB1dEJhc2VDbGFzc2VzLmRpc2FibGVkfWBdOiB7XG4gICAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLnRleHQuZGlzYWJsZWQsXG4gICAgY3Vyc29yOiAnZGVmYXVsdCdcbiAgfVxufSwgb3duZXJTdGF0ZS5tdWx0aWxpbmUgJiYgX2V4dGVuZHMoe1xuICBwYWRkaW5nOiAnNHB4IDAgNXB4J1xufSwgb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnICYmIHtcbiAgcGFkZGluZ1RvcDogMVxufSksIG93bmVyU3RhdGUuZnVsbFdpZHRoICYmIHtcbiAgd2lkdGg6ICcxMDAlJ1xufSkpO1xuZXhwb3J0IGNvbnN0IElucHV0QmFzZUNvbXBvbmVudCA9IHN0eWxlZCgnaW5wdXQnLCB7XG4gIG5hbWU6ICdNdWlJbnB1dEJhc2UnLFxuICBzbG90OiAnSW5wdXQnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogaW5wdXRPdmVycmlkZXNSZXNvbHZlclxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IHtcbiAgY29uc3QgbGlnaHQgPSB0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdsaWdodCc7XG4gIGNvbnN0IHBsYWNlaG9sZGVyID0gX2V4dGVuZHMoe1xuICAgIGNvbG9yOiAnY3VycmVudENvbG9yJ1xuICB9LCB0aGVtZS52YXJzID8ge1xuICAgIG9wYWNpdHk6IHRoZW1lLnZhcnMub3BhY2l0eS5pbnB1dFBsYWNlaG9sZGVyXG4gIH0gOiB7XG4gICAgb3BhY2l0eTogbGlnaHQgPyAwLjQyIDogMC41XG4gIH0sIHtcbiAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ29wYWNpdHknLCB7XG4gICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlclxuICAgIH0pXG4gIH0pO1xuICBjb25zdCBwbGFjZWhvbGRlckhpZGRlbiA9IHtcbiAgICBvcGFjaXR5OiAnMCAhaW1wb3J0YW50J1xuICB9O1xuICBjb25zdCBwbGFjZWhvbGRlclZpc2libGUgPSB0aGVtZS52YXJzID8ge1xuICAgIG9wYWNpdHk6IHRoZW1lLnZhcnMub3BhY2l0eS5pbnB1dFBsYWNlaG9sZGVyXG4gIH0gOiB7XG4gICAgb3BhY2l0eTogbGlnaHQgPyAwLjQyIDogMC41XG4gIH07XG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgZm9udDogJ2luaGVyaXQnLFxuICAgIGxldHRlclNwYWNpbmc6ICdpbmhlcml0JyxcbiAgICBjb2xvcjogJ2N1cnJlbnRDb2xvcicsXG4gICAgcGFkZGluZzogJzRweCAwIDVweCcsXG4gICAgYm9yZGVyOiAwLFxuICAgIGJveFNpemluZzogJ2NvbnRlbnQtYm94JyxcbiAgICBiYWNrZ3JvdW5kOiAnbm9uZScsXG4gICAgaGVpZ2h0OiAnMS40Mzc1ZW0nLFxuICAgIC8vIFJlc2V0IDIzcHh0aGUgbmF0aXZlIGlucHV0IGxpbmUtaGVpZ2h0XG4gICAgbWFyZ2luOiAwLFxuICAgIC8vIFJlc2V0IGZvciBTYWZhcmlcbiAgICBXZWJraXRUYXBIaWdobGlnaHRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgIC8vIE1ha2UgdGhlIGZsZXggaXRlbSBzaHJpbmsgd2l0aCBGaXJlZm94XG4gICAgbWluV2lkdGg6IDAsXG4gICAgd2lkdGg6ICcxMDAlJyxcbiAgICAvLyBGaXggSUUxMSB3aWR0aCBpc3N1ZVxuICAgIGFuaW1hdGlvbk5hbWU6ICdtdWktYXV0by1maWxsLWNhbmNlbCcsXG4gICAgYW5pbWF0aW9uRHVyYXRpb246ICcxMG1zJyxcbiAgICAnJjo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVyLFxuICAgICcmOjotbW96LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXIsXG4gICAgLy8gRmlyZWZveCAxOStcbiAgICAnJjotbXMtaW5wdXQtcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlcixcbiAgICAvLyBJRTExXG4gICAgJyY6Oi1tcy1pbnB1dC1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVyLFxuICAgIC8vIEVkZ2VcbiAgICAnJjpmb2N1cyc6IHtcbiAgICAgIG91dGxpbmU6IDBcbiAgICB9LFxuICAgIC8vIFJlc2V0IEZpcmVmb3ggaW52YWxpZCByZXF1aXJlZCBpbnB1dCBzdHlsZVxuICAgICcmOmludmFsaWQnOiB7XG4gICAgICBib3hTaGFkb3c6ICdub25lJ1xuICAgIH0sXG4gICAgJyY6Oi13ZWJraXQtc2VhcmNoLWRlY29yYXRpb24nOiB7XG4gICAgICAvLyBSZW1vdmUgdGhlIHBhZGRpbmcgd2hlbiB0eXBlPXNlYXJjaC5cbiAgICAgIFdlYmtpdEFwcGVhcmFuY2U6ICdub25lJ1xuICAgIH0sXG4gICAgLy8gU2hvdyBhbmQgaGlkZSB0aGUgcGxhY2Vob2xkZXIgbG9naWNcbiAgICBbYGxhYmVsW2RhdGEtc2hyaW5rPWZhbHNlXSArIC4ke2lucHV0QmFzZUNsYXNzZXMuZm9ybUNvbnRyb2x9ICZgXToge1xuICAgICAgJyY6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlckhpZGRlbixcbiAgICAgICcmOjotbW96LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJIaWRkZW4sXG4gICAgICAvLyBGaXJlZm94IDE5K1xuICAgICAgJyY6LW1zLWlucHV0LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJIaWRkZW4sXG4gICAgICAvLyBJRTExXG4gICAgICAnJjo6LW1zLWlucHV0LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJIaWRkZW4sXG4gICAgICAvLyBFZGdlXG4gICAgICAnJjpmb2N1czo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVyVmlzaWJsZSxcbiAgICAgICcmOmZvY3VzOjotbW96LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJWaXNpYmxlLFxuICAgICAgLy8gRmlyZWZveCAxOStcbiAgICAgICcmOmZvY3VzOi1tcy1pbnB1dC1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVyVmlzaWJsZSxcbiAgICAgIC8vIElFMTFcbiAgICAgICcmOmZvY3VzOjotbXMtaW5wdXQtcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlclZpc2libGUgLy8gRWRnZVxuICAgIH0sXG4gICAgW2AmLiR7aW5wdXRCYXNlQ2xhc3Nlcy5kaXNhYmxlZH1gXToge1xuICAgICAgb3BhY2l0eTogMSxcbiAgICAgIC8vIFJlc2V0IGlPUyBvcGFjaXR5XG4gICAgICBXZWJraXRUZXh0RmlsbENvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS50ZXh0LmRpc2FibGVkIC8vIEZpeCBvcGFjaXR5IFNhZmFyaSBidWdcbiAgICB9LFxuICAgICcmOi13ZWJraXQtYXV0b2ZpbGwnOiB7XG4gICAgICBhbmltYXRpb25EdXJhdGlvbjogJzUwMDBzJyxcbiAgICAgIGFuaW1hdGlvbk5hbWU6ICdtdWktYXV0by1maWxsJ1xuICAgIH1cbiAgfSwgb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnICYmIHtcbiAgICBwYWRkaW5nVG9wOiAxXG4gIH0sIG93bmVyU3RhdGUubXVsdGlsaW5lICYmIHtcbiAgICBoZWlnaHQ6ICdhdXRvJyxcbiAgICByZXNpemU6ICdub25lJyxcbiAgICBwYWRkaW5nOiAwLFxuICAgIHBhZGRpbmdUb3A6IDBcbiAgfSwgb3duZXJTdGF0ZS50eXBlID09PSAnc2VhcmNoJyAmJiB7XG4gICAgLy8gSW1wcm92ZSB0eXBlIHNlYXJjaCBzdHlsZS5cbiAgICBNb3pBcHBlYXJhbmNlOiAndGV4dGZpZWxkJ1xuICB9KTtcbn0pO1xuY29uc3QgaW5wdXRHbG9iYWxTdHlsZXMgPSAvKiNfX1BVUkVfXyovX2pzeChHbG9iYWxTdHlsZXMsIHtcbiAgc3R5bGVzOiB7XG4gICAgJ0BrZXlmcmFtZXMgbXVpLWF1dG8tZmlsbCc6IHtcbiAgICAgIGZyb206IHtcbiAgICAgICAgZGlzcGxheTogJ2Jsb2NrJ1xuICAgICAgfVxuICAgIH0sXG4gICAgJ0BrZXlmcmFtZXMgbXVpLWF1dG8tZmlsbC1jYW5jZWwnOiB7XG4gICAgICBmcm9tOiB7XG4gICAgICAgIGRpc3BsYXk6ICdibG9jaydcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pO1xuXG4vKipcbiAqIGBJbnB1dEJhc2VgIGNvbnRhaW5zIGFzIGZldyBzdHlsZXMgYXMgcG9zc2libGUuXG4gKiBJdCBhaW1zIHRvIGJlIGEgc2ltcGxlIGJ1aWxkaW5nIGJsb2NrIGZvciBjcmVhdGluZyBhbiBpbnB1dC5cbiAqIEl0IGNvbnRhaW5zIGEgbG9hZCBvZiBzdHlsZSByZXNldCBhbmQgc29tZSBzdGF0ZSBsb2dpYy5cbiAqL1xuY29uc3QgSW5wdXRCYXNlID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gSW5wdXRCYXNlKGluUHJvcHMsIHJlZikge1xuICB2YXIgX3Nsb3RQcm9wcyRpbnB1dDtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpSW5wdXRCYXNlJ1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgJ2FyaWEtZGVzY3JpYmVkYnknOiBhcmlhRGVzY3JpYmVkYnksXG4gICAgICBhdXRvQ29tcGxldGUsXG4gICAgICBhdXRvRm9jdXMsXG4gICAgICBjbGFzc05hbWUsXG4gICAgICBjb21wb25lbnRzID0ge30sXG4gICAgICBjb21wb25lbnRzUHJvcHMgPSB7fSxcbiAgICAgIGRlZmF1bHRWYWx1ZSxcbiAgICAgIGRpc2FibGVkLFxuICAgICAgZGlzYWJsZUluamVjdGluZ0dsb2JhbFN0eWxlcyxcbiAgICAgIGVuZEFkb3JubWVudCxcbiAgICAgIGZ1bGxXaWR0aCA9IGZhbHNlLFxuICAgICAgaWQsXG4gICAgICBpbnB1dENvbXBvbmVudCA9ICdpbnB1dCcsXG4gICAgICBpbnB1dFByb3BzOiBpbnB1dFByb3BzUHJvcCA9IHt9LFxuICAgICAgaW5wdXRSZWY6IGlucHV0UmVmUHJvcCxcbiAgICAgIG1heFJvd3MsXG4gICAgICBtaW5Sb3dzLFxuICAgICAgbXVsdGlsaW5lID0gZmFsc2UsXG4gICAgICBuYW1lLFxuICAgICAgb25CbHVyLFxuICAgICAgb25DaGFuZ2UsXG4gICAgICBvbkNsaWNrLFxuICAgICAgb25Gb2N1cyxcbiAgICAgIG9uS2V5RG93bixcbiAgICAgIG9uS2V5VXAsXG4gICAgICBwbGFjZWhvbGRlcixcbiAgICAgIHJlYWRPbmx5LFxuICAgICAgcmVuZGVyU3VmZml4LFxuICAgICAgcm93cyxcbiAgICAgIHNsb3RQcm9wcyA9IHt9LFxuICAgICAgc2xvdHMgPSB7fSxcbiAgICAgIHN0YXJ0QWRvcm5tZW50LFxuICAgICAgdHlwZSA9ICd0ZXh0JyxcbiAgICAgIHZhbHVlOiB2YWx1ZVByb3BcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3QgdmFsdWUgPSBpbnB1dFByb3BzUHJvcC52YWx1ZSAhPSBudWxsID8gaW5wdXRQcm9wc1Byb3AudmFsdWUgOiB2YWx1ZVByb3A7XG4gIGNvbnN0IHtcbiAgICBjdXJyZW50OiBpc0NvbnRyb2xsZWRcbiAgfSA9IFJlYWN0LnVzZVJlZih2YWx1ZSAhPSBudWxsKTtcbiAgY29uc3QgaW5wdXRSZWYgPSBSZWFjdC51c2VSZWYoKTtcbiAgY29uc3QgaGFuZGxlSW5wdXRSZWZXYXJuaW5nID0gUmVhY3QudXNlQ2FsbGJhY2soaW5zdGFuY2UgPT4ge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoaW5zdGFuY2UgJiYgaW5zdGFuY2Uubm9kZU5hbWUgIT09ICdJTlBVVCcgJiYgIWluc3RhbmNlLmZvY3VzKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoWydNVUk6IFlvdSBoYXZlIHByb3ZpZGVkIGEgYGlucHV0Q29tcG9uZW50YCB0byB0aGUgaW5wdXQgY29tcG9uZW50JywgJ3RoYXQgZG9lcyBub3QgY29ycmVjdGx5IGhhbmRsZSB0aGUgYHJlZmAgcHJvcC4nLCAnTWFrZSBzdXJlIHRoZSBgcmVmYCBwcm9wIGlzIGNhbGxlZCB3aXRoIGEgSFRNTElucHV0RWxlbWVudC4nXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgfVxuICB9LCBbXSk7XG4gIGNvbnN0IGhhbmRsZUlucHV0UmVmID0gdXNlRm9ya1JlZihpbnB1dFJlZiwgaW5wdXRSZWZQcm9wLCBpbnB1dFByb3BzUHJvcC5yZWYsIGhhbmRsZUlucHV0UmVmV2FybmluZyk7XG4gIGNvbnN0IFtmb2N1c2VkLCBzZXRGb2N1c2VkXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgbXVpRm9ybUNvbnRyb2wgPSB1c2VGb3JtQ29udHJvbCgpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICBpZiAobXVpRm9ybUNvbnRyb2wpIHtcbiAgICAgICAgcmV0dXJuIG11aUZvcm1Db250cm9sLnJlZ2lzdGVyRWZmZWN0KCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH0sIFttdWlGb3JtQ29udHJvbF0pO1xuICB9XG4gIGNvbnN0IGZjcyA9IGZvcm1Db250cm9sU3RhdGUoe1xuICAgIHByb3BzLFxuICAgIG11aUZvcm1Db250cm9sLFxuICAgIHN0YXRlczogWydjb2xvcicsICdkaXNhYmxlZCcsICdlcnJvcicsICdoaWRkZW5MYWJlbCcsICdzaXplJywgJ3JlcXVpcmVkJywgJ2ZpbGxlZCddXG4gIH0pO1xuICBmY3MuZm9jdXNlZCA9IG11aUZvcm1Db250cm9sID8gbXVpRm9ybUNvbnRyb2wuZm9jdXNlZCA6IGZvY3VzZWQ7XG5cbiAgLy8gVGhlIGJsdXIgd29uJ3QgZmlyZSB3aGVuIHRoZSBkaXNhYmxlZCBzdGF0ZSBpcyBzZXQgb24gYSBmb2N1c2VkIGlucHV0LlxuICAvLyBXZSBuZWVkIHRvIGJvb2sga2VlcCB0aGUgZm9jdXNlZCBzdGF0ZSBtYW51YWxseS5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIW11aUZvcm1Db250cm9sICYmIGRpc2FibGVkICYmIGZvY3VzZWQpIHtcbiAgICAgIHNldEZvY3VzZWQoZmFsc2UpO1xuICAgICAgaWYgKG9uQmx1cikge1xuICAgICAgICBvbkJsdXIoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIFttdWlGb3JtQ29udHJvbCwgZGlzYWJsZWQsIGZvY3VzZWQsIG9uQmx1cl0pO1xuICBjb25zdCBvbkZpbGxlZCA9IG11aUZvcm1Db250cm9sICYmIG11aUZvcm1Db250cm9sLm9uRmlsbGVkO1xuICBjb25zdCBvbkVtcHR5ID0gbXVpRm9ybUNvbnRyb2wgJiYgbXVpRm9ybUNvbnRyb2wub25FbXB0eTtcbiAgY29uc3QgY2hlY2tEaXJ0eSA9IFJlYWN0LnVzZUNhbGxiYWNrKG9iaiA9PiB7XG4gICAgaWYgKGlzRmlsbGVkKG9iaikpIHtcbiAgICAgIGlmIChvbkZpbGxlZCkge1xuICAgICAgICBvbkZpbGxlZCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAob25FbXB0eSkge1xuICAgICAgb25FbXB0eSgpO1xuICAgIH1cbiAgfSwgW29uRmlsbGVkLCBvbkVtcHR5XSk7XG4gIHVzZUVuaGFuY2VkRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoaXNDb250cm9sbGVkKSB7XG4gICAgICBjaGVja0RpcnR5KHtcbiAgICAgICAgdmFsdWVcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgW3ZhbHVlLCBjaGVja0RpcnR5LCBpc0NvbnRyb2xsZWRdKTtcbiAgY29uc3QgaGFuZGxlRm9jdXMgPSBldmVudCA9PiB7XG4gICAgLy8gRml4IGEgYnVnIHdpdGggSUUxMSB3aGVyZSB0aGUgZm9jdXMvYmx1ciBldmVudHMgYXJlIHRyaWdnZXJlZFxuICAgIC8vIHdoaWxlIHRoZSBjb21wb25lbnQgaXMgZGlzYWJsZWQuXG4gICAgaWYgKGZjcy5kaXNhYmxlZCkge1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChvbkZvY3VzKSB7XG4gICAgICBvbkZvY3VzKGV2ZW50KTtcbiAgICB9XG4gICAgaWYgKGlucHV0UHJvcHNQcm9wLm9uRm9jdXMpIHtcbiAgICAgIGlucHV0UHJvcHNQcm9wLm9uRm9jdXMoZXZlbnQpO1xuICAgIH1cbiAgICBpZiAobXVpRm9ybUNvbnRyb2wgJiYgbXVpRm9ybUNvbnRyb2wub25Gb2N1cykge1xuICAgICAgbXVpRm9ybUNvbnRyb2wub25Gb2N1cyhldmVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldEZvY3VzZWQodHJ1ZSk7XG4gICAgfVxuICB9O1xuICBjb25zdCBoYW5kbGVCbHVyID0gZXZlbnQgPT4ge1xuICAgIGlmIChvbkJsdXIpIHtcbiAgICAgIG9uQmx1cihldmVudCk7XG4gICAgfVxuICAgIGlmIChpbnB1dFByb3BzUHJvcC5vbkJsdXIpIHtcbiAgICAgIGlucHV0UHJvcHNQcm9wLm9uQmx1cihldmVudCk7XG4gICAgfVxuICAgIGlmIChtdWlGb3JtQ29udHJvbCAmJiBtdWlGb3JtQ29udHJvbC5vbkJsdXIpIHtcbiAgICAgIG11aUZvcm1Db250cm9sLm9uQmx1cihldmVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldEZvY3VzZWQoZmFsc2UpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgaGFuZGxlQ2hhbmdlID0gKGV2ZW50LCAuLi5hcmdzKSA9PiB7XG4gICAgaWYgKCFpc0NvbnRyb2xsZWQpIHtcbiAgICAgIGNvbnN0IGVsZW1lbnQgPSBldmVudC50YXJnZXQgfHwgaW5wdXRSZWYuY3VycmVudDtcbiAgICAgIGlmIChlbGVtZW50ID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGBNVUk6IEV4cGVjdGVkIHZhbGlkIGlucHV0IHRhcmdldC4gRGlkIHlvdSB1c2UgYSBjdXN0b20gXFxgaW5wdXRDb21wb25lbnRcXGAgYW5kIGZvcmdldCB0byBmb3J3YXJkIHJlZnM/IFNlZSBodHRwczovL211aS5jb20vci9pbnB1dC1jb21wb25lbnQtcmVmLWludGVyZmFjZSBmb3IgbW9yZSBpbmZvLmAgOiBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlKDEpKTtcbiAgICAgIH1cbiAgICAgIGNoZWNrRGlydHkoe1xuICAgICAgICB2YWx1ZTogZWxlbWVudC52YWx1ZVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFByb3BzUHJvcC5vbkNoYW5nZSkge1xuICAgICAgaW5wdXRQcm9wc1Byb3Aub25DaGFuZ2UoZXZlbnQsIC4uLmFyZ3MpO1xuICAgIH1cblxuICAgIC8vIFBlcmZvcm0gaW4gdGhlIHdpbGxVcGRhdGVcbiAgICBpZiAob25DaGFuZ2UpIHtcbiAgICAgIG9uQ2hhbmdlKGV2ZW50LCAuLi5hcmdzKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gQ2hlY2sgdGhlIGlucHV0IHN0YXRlIG9uIG1vdW50LCBpbiBjYXNlIGl0IHdhcyBmaWxsZWQgYnkgdGhlIHVzZXJcbiAgLy8gb3IgYXV0byBmaWxsZWQgYnkgdGhlIGJyb3dzZXIgYmVmb3JlIHRoZSBoeWRyYXRpb24gKGZvciBTU1IpLlxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNoZWNrRGlydHkoaW5wdXRSZWYuY3VycmVudCk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICB9LCBbXSk7XG4gIGNvbnN0IGhhbmRsZUNsaWNrID0gZXZlbnQgPT4ge1xuICAgIGlmIChpbnB1dFJlZi5jdXJyZW50ICYmIGV2ZW50LmN1cnJlbnRUYXJnZXQgPT09IGV2ZW50LnRhcmdldCkge1xuICAgICAgaW5wdXRSZWYuY3VycmVudC5mb2N1cygpO1xuICAgIH1cbiAgICBpZiAob25DbGljaykge1xuICAgICAgb25DbGljayhldmVudCk7XG4gICAgfVxuICB9O1xuICBsZXQgSW5wdXRDb21wb25lbnQgPSBpbnB1dENvbXBvbmVudDtcbiAgbGV0IGlucHV0UHJvcHMgPSBpbnB1dFByb3BzUHJvcDtcbiAgaWYgKG11bHRpbGluZSAmJiBJbnB1dENvbXBvbmVudCA9PT0gJ2lucHV0Jykge1xuICAgIGlmIChyb3dzKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAobWluUm93cyB8fCBtYXhSb3dzKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKCdNVUk6IFlvdSBjYW4gbm90IHVzZSB0aGUgYG1pblJvd3NgIG9yIGBtYXhSb3dzYCBwcm9wcyB3aGVuIHRoZSBpbnB1dCBgcm93c2AgcHJvcCBpcyBzZXQuJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlucHV0UHJvcHMgPSBfZXh0ZW5kcyh7XG4gICAgICAgIHR5cGU6IHVuZGVmaW5lZCxcbiAgICAgICAgbWluUm93czogcm93cyxcbiAgICAgICAgbWF4Um93czogcm93c1xuICAgICAgfSwgaW5wdXRQcm9wcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlucHV0UHJvcHMgPSBfZXh0ZW5kcyh7XG4gICAgICAgIHR5cGU6IHVuZGVmaW5lZCxcbiAgICAgICAgbWF4Um93cyxcbiAgICAgICAgbWluUm93c1xuICAgICAgfSwgaW5wdXRQcm9wcyk7XG4gICAgfVxuICAgIElucHV0Q29tcG9uZW50ID0gVGV4dGFyZWFBdXRvc2l6ZTtcbiAgfVxuICBjb25zdCBoYW5kbGVBdXRvRmlsbCA9IGV2ZW50ID0+IHtcbiAgICAvLyBQcm92aWRlIGEgZmFrZSB2YWx1ZSBhcyBDaHJvbWUgbWlnaHQgbm90IGxldCB5b3UgYWNjZXNzIGl0IGZvciBzZWN1cml0eSByZWFzb25zLlxuICAgIGNoZWNrRGlydHkoZXZlbnQuYW5pbWF0aW9uTmFtZSA9PT0gJ211aS1hdXRvLWZpbGwtY2FuY2VsJyA/IGlucHV0UmVmLmN1cnJlbnQgOiB7XG4gICAgICB2YWx1ZTogJ3gnXG4gICAgfSk7XG4gIH07XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKG11aUZvcm1Db250cm9sKSB7XG4gICAgICBtdWlGb3JtQ29udHJvbC5zZXRBZG9ybmVkU3RhcnQoQm9vbGVhbihzdGFydEFkb3JubWVudCkpO1xuICAgIH1cbiAgfSwgW211aUZvcm1Db250cm9sLCBzdGFydEFkb3JubWVudF0pO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY29sb3I6IGZjcy5jb2xvciB8fCAncHJpbWFyeScsXG4gICAgZGlzYWJsZWQ6IGZjcy5kaXNhYmxlZCxcbiAgICBlbmRBZG9ybm1lbnQsXG4gICAgZXJyb3I6IGZjcy5lcnJvcixcbiAgICBmb2N1c2VkOiBmY3MuZm9jdXNlZCxcbiAgICBmb3JtQ29udHJvbDogbXVpRm9ybUNvbnRyb2wsXG4gICAgZnVsbFdpZHRoLFxuICAgIGhpZGRlbkxhYmVsOiBmY3MuaGlkZGVuTGFiZWwsXG4gICAgbXVsdGlsaW5lLFxuICAgIHNpemU6IGZjcy5zaXplLFxuICAgIHN0YXJ0QWRvcm5tZW50LFxuICAgIHR5cGVcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgY29uc3QgUm9vdCA9IHNsb3RzLnJvb3QgfHwgY29tcG9uZW50cy5Sb290IHx8IElucHV0QmFzZVJvb3Q7XG4gIGNvbnN0IHJvb3RQcm9wcyA9IHNsb3RQcm9wcy5yb290IHx8IGNvbXBvbmVudHNQcm9wcy5yb290IHx8IHt9O1xuICBjb25zdCBJbnB1dCA9IHNsb3RzLmlucHV0IHx8IGNvbXBvbmVudHMuSW5wdXQgfHwgSW5wdXRCYXNlQ29tcG9uZW50O1xuICBpbnB1dFByb3BzID0gX2V4dGVuZHMoe30sIGlucHV0UHJvcHMsIChfc2xvdFByb3BzJGlucHV0ID0gc2xvdFByb3BzLmlucHV0KSAhPSBudWxsID8gX3Nsb3RQcm9wcyRpbnB1dCA6IGNvbXBvbmVudHNQcm9wcy5pbnB1dCk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeHMoUmVhY3QuRnJhZ21lbnQsIHtcbiAgICBjaGlsZHJlbjogWyFkaXNhYmxlSW5qZWN0aW5nR2xvYmFsU3R5bGVzICYmIGlucHV0R2xvYmFsU3R5bGVzLCAvKiNfX1BVUkVfXyovX2pzeHMoUm9vdCwgX2V4dGVuZHMoe30sIHJvb3RQcm9wcywgIWlzSG9zdENvbXBvbmVudChSb290KSAmJiB7XG4gICAgICBvd25lclN0YXRlOiBfZXh0ZW5kcyh7fSwgb3duZXJTdGF0ZSwgcm9vdFByb3BzLm93bmVyU3RhdGUpXG4gICAgfSwge1xuICAgICAgcmVmOiByZWYsXG4gICAgICBvbkNsaWNrOiBoYW5kbGVDbGlja1xuICAgIH0sIG90aGVyLCB7XG4gICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCByb290UHJvcHMuY2xhc3NOYW1lLCBjbGFzc05hbWUsIHJlYWRPbmx5ICYmICdNdWlJbnB1dEJhc2UtcmVhZE9ubHknKSxcbiAgICAgIGNoaWxkcmVuOiBbc3RhcnRBZG9ybm1lbnQsIC8qI19fUFVSRV9fKi9fanN4KEZvcm1Db250cm9sQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogbnVsbCxcbiAgICAgICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9fanN4KElucHV0LCBfZXh0ZW5kcyh7XG4gICAgICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgICAgICBcImFyaWEtaW52YWxpZFwiOiBmY3MuZXJyb3IsXG4gICAgICAgICAgXCJhcmlhLWRlc2NyaWJlZGJ5XCI6IGFyaWFEZXNjcmliZWRieSxcbiAgICAgICAgICBhdXRvQ29tcGxldGU6IGF1dG9Db21wbGV0ZSxcbiAgICAgICAgICBhdXRvRm9jdXM6IGF1dG9Gb2N1cyxcbiAgICAgICAgICBkZWZhdWx0VmFsdWU6IGRlZmF1bHRWYWx1ZSxcbiAgICAgICAgICBkaXNhYmxlZDogZmNzLmRpc2FibGVkLFxuICAgICAgICAgIGlkOiBpZCxcbiAgICAgICAgICBvbkFuaW1hdGlvblN0YXJ0OiBoYW5kbGVBdXRvRmlsbCxcbiAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgIHBsYWNlaG9sZGVyOiBwbGFjZWhvbGRlcixcbiAgICAgICAgICByZWFkT25seTogcmVhZE9ubHksXG4gICAgICAgICAgcmVxdWlyZWQ6IGZjcy5yZXF1aXJlZCxcbiAgICAgICAgICByb3dzOiByb3dzLFxuICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICBvbktleURvd246IG9uS2V5RG93bixcbiAgICAgICAgICBvbktleVVwOiBvbktleVVwLFxuICAgICAgICAgIHR5cGU6IHR5cGVcbiAgICAgICAgfSwgaW5wdXRQcm9wcywgIWlzSG9zdENvbXBvbmVudChJbnB1dCkgJiYge1xuICAgICAgICAgIGFzOiBJbnB1dENvbXBvbmVudCxcbiAgICAgICAgICBvd25lclN0YXRlOiBfZXh0ZW5kcyh7fSwgb3duZXJTdGF0ZSwgaW5wdXRQcm9wcy5vd25lclN0YXRlKVxuICAgICAgICB9LCB7XG4gICAgICAgICAgcmVmOiBoYW5kbGVJbnB1dFJlZixcbiAgICAgICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5pbnB1dCwgaW5wdXRQcm9wcy5jbGFzc05hbWUsIHJlYWRPbmx5ICYmICdNdWlJbnB1dEJhc2UtcmVhZE9ubHknKSxcbiAgICAgICAgICBvbkJsdXI6IGhhbmRsZUJsdXIsXG4gICAgICAgICAgb25DaGFuZ2U6IGhhbmRsZUNoYW5nZSxcbiAgICAgICAgICBvbkZvY3VzOiBoYW5kbGVGb2N1c1xuICAgICAgICB9KSlcbiAgICAgIH0pLCBlbmRBZG9ybm1lbnQsIHJlbmRlclN1ZmZpeCA/IHJlbmRlclN1ZmZpeChfZXh0ZW5kcyh7fSwgZmNzLCB7XG4gICAgICAgIHN0YXJ0QWRvcm5tZW50XG4gICAgICB9KSkgOiBudWxsXVxuICAgIH0pKV1cbiAgfSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IElucHV0QmFzZS5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICAnYXJpYS1kZXNjcmliZWRieSc6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGlzIHByb3AgaGVscHMgdXNlcnMgdG8gZmlsbCBmb3JtcyBmYXN0ZXIsIGVzcGVjaWFsbHkgb24gbW9iaWxlIGRldmljZXMuXG4gICAqIFRoZSBuYW1lIGNhbiBiZSBjb25mdXNpbmcsIGFzIGl0J3MgbW9yZSBsaWtlIGFuIGF1dG9maWxsLlxuICAgKiBZb3UgY2FuIGxlYXJuIG1vcmUgYWJvdXQgaXQgW2ZvbGxvd2luZyB0aGUgc3BlY2lmaWNhdGlvbl0oaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybS1jb250cm9sLWluZnJhc3RydWN0dXJlLmh0bWwjYXV0b2ZpbGwpLlxuICAgKi9cbiAgYXV0b0NvbXBsZXRlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCBlbGVtZW50IGlzIGZvY3VzZWQgZHVyaW5nIHRoZSBmaXJzdCBtb3VudC5cbiAgICovXG4gIGF1dG9Gb2N1czogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIEl0IHN1cHBvcnRzIGJvdGggZGVmYXVsdCBhbmQgY3VzdG9tIHRoZW1lIGNvbG9ycywgd2hpY2ggY2FuIGJlIGFkZGVkIGFzIHNob3duIGluIHRoZVxuICAgKiBbcGFsZXR0ZSBjdXN0b21pemF0aW9uIGd1aWRlXShodHRwczovL211aS5jb20vbWF0ZXJpYWwtdWkvY3VzdG9taXphdGlvbi9wYWxldHRlLyNjdXN0b20tY29sb3JzKS5cbiAgICogVGhlIHByb3AgZGVmYXVsdHMgdG8gdGhlIHZhbHVlIChgJ3ByaW1hcnknYCkgaW5oZXJpdGVkIGZyb20gdGhlIHBhcmVudCBGb3JtQ29udHJvbCBjb21wb25lbnQuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydwcmltYXJ5JywgJ3NlY29uZGFyeScsICdlcnJvcicsICdpbmZvJywgJ3N1Y2Nlc3MnLCAnd2FybmluZyddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudHMgdXNlZCBmb3IgZWFjaCBzbG90IGluc2lkZS5cbiAgICpcbiAgICogVGhpcyBwcm9wIGlzIGFuIGFsaWFzIGZvciB0aGUgYHNsb3RzYCBwcm9wLlxuICAgKiBJdCdzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGUgYHNsb3RzYCBwcm9wIGluc3RlYWQuXG4gICAqXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBjb21wb25lbnRzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIElucHV0OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgUm9vdDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlXG4gIH0pLFxuICAvKipcbiAgICogVGhlIGV4dHJhIHByb3BzIGZvciB0aGUgc2xvdCBjb21wb25lbnRzLlxuICAgKiBZb3UgY2FuIG92ZXJyaWRlIHRoZSBleGlzdGluZyBwcm9wcyBvciBhZGQgbmV3IG9uZXMuXG4gICAqXG4gICAqIFRoaXMgcHJvcCBpcyBhbiBhbGlhcyBmb3IgdGhlIGBzbG90UHJvcHNgIHByb3AuXG4gICAqIEl0J3MgcmVjb21tZW5kZWQgdG8gdXNlIHRoZSBgc2xvdFByb3BzYCBwcm9wIGluc3RlYWQsIGFzIGBjb21wb25lbnRzUHJvcHNgIHdpbGwgYmUgZGVwcmVjYXRlZCBpbiB0aGUgZnV0dXJlLlxuICAgKlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgY29tcG9uZW50c1Byb3BzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGlucHV0OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHJvb3Q6IFByb3BUeXBlcy5vYmplY3RcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZS4gVXNlIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBub3QgY29udHJvbGxlZC5cbiAgICovXG4gIGRlZmF1bHRWYWx1ZTogUHJvcFR5cGVzLmFueSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpcyBkaXNhYmxlZC5cbiAgICogVGhlIHByb3AgZGVmYXVsdHMgdG8gdGhlIHZhbHVlIChgZmFsc2VgKSBpbmhlcml0ZWQgZnJvbSB0aGUgcGFyZW50IEZvcm1Db250cm9sIGNvbXBvbmVudC5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgR2xvYmFsU3R5bGVzIGZvciB0aGUgYXV0by1maWxsIGtleWZyYW1lcyB3aWxsIG5vdCBiZSBpbmplY3RlZC9yZW1vdmVkIG9uIG1vdW50L3VubW91bnQuIE1ha2Ugc3VyZSB0byBpbmplY3QgdGhlbSBhdCB0aGUgdG9wIG9mIHlvdXIgYXBwbGljYXRpb24uXG4gICAqIFRoaXMgb3B0aW9uIGlzIGludGVuZGVkIHRvIGhlbHAgd2l0aCBib29zdGluZyB0aGUgaW5pdGlhbCByZW5kZXJpbmcgcGVyZm9ybWFuY2UgaWYgeW91IGFyZSBsb2FkaW5nIGEgYmlnIGFtb3VudCBvZiBJbnB1dCBjb21wb25lbnRzIGF0IG9uY2UuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlSW5qZWN0aW5nR2xvYmFsU3R5bGVzOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIEVuZCBgSW5wdXRBZG9ybm1lbnRgIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIGVuZEFkb3JubWVudDogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIHdpbGwgaW5kaWNhdGUgYW4gZXJyb3IuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSAoYGZhbHNlYCkgaW5oZXJpdGVkIGZyb20gdGhlIHBhcmVudCBGb3JtQ29udHJvbCBjb21wb25lbnQuXG4gICAqL1xuICBlcnJvcjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIHdpbGwgdGFrZSB1cCB0aGUgZnVsbCB3aWR0aCBvZiBpdHMgY29udGFpbmVyLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZnVsbFdpZHRoOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBpZCBvZiB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgaWQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0ICdpbnB1dCdcbiAgICovXG4gIGlucHV0Q29tcG9uZW50OiBlbGVtZW50VHlwZUFjY2VwdGluZ1JlZixcbiAgLyoqXG4gICAqIFtBdHRyaWJ1dGVzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvaW5wdXQjQXR0cmlidXRlcykgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgaW5wdXRQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIFBhc3MgYSByZWYgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UmVmOiByZWZUeXBlLFxuICAvKipcbiAgICogSWYgYGRlbnNlYCwgd2lsbCBhZGp1c3QgdmVydGljYWwgc3BhY2luZy4gVGhpcyBpcyBub3JtYWxseSBvYnRhaW5lZCB2aWEgY29udGV4dCBmcm9tXG4gICAqIEZvcm1Db250cm9sLlxuICAgKiBUaGUgcHJvcCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgKGAnbm9uZSdgKSBpbmhlcml0ZWQgZnJvbSB0aGUgcGFyZW50IEZvcm1Db250cm9sIGNvbXBvbmVudC5cbiAgICovXG4gIG1hcmdpbjogUHJvcFR5cGVzLm9uZU9mKFsnZGVuc2UnLCAnbm9uZSddKSxcbiAgLyoqXG4gICAqIE1heGltdW0gbnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheSB3aGVuIG11bHRpbGluZSBvcHRpb24gaXMgc2V0IHRvIHRydWUuXG4gICAqL1xuICBtYXhSb3dzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBNaW5pbXVtIG51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgbWluUm93czogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogSWYgYHRydWVgLCBhIFtUZXh0YXJlYUF1dG9zaXplXSgvbWF0ZXJpYWwtdWkvcmVhY3QtdGV4dGFyZWEtYXV0b3NpemUvKSBlbGVtZW50IGlzIHJlbmRlcmVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgbXVsdGlsaW5lOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIE5hbWUgYXR0cmlidXRlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgYGlucHV0YCBpcyBibHVycmVkLlxuICAgKlxuICAgKiBOb3RpY2UgdGhhdCB0aGUgZmlyc3QgYXJndW1lbnQgKGV2ZW50KSBtaWdodCBiZSB1bmRlZmluZWQuXG4gICAqL1xuICBvbkJsdXI6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgdmFsdWUgaXMgY2hhbmdlZC5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdC5DaGFuZ2VFdmVudDxIVE1MVGV4dEFyZWFFbGVtZW50IHwgSFRNTElucHV0RWxlbWVudD59IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBZb3UgY2FuIHB1bGwgb3V0IHRoZSBuZXcgdmFsdWUgYnkgYWNjZXNzaW5nIGBldmVudC50YXJnZXQudmFsdWVgIChzdHJpbmcpLlxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkZvY3VzOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGBpbnB1dGAgZG9lc24ndCBzYXRpc2Z5IGl0cyBjb25zdHJhaW50cy5cbiAgICovXG4gIG9uSW52YWxpZDogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbktleURvd246IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25LZXlVcDogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBUaGUgc2hvcnQgaGludCBkaXNwbGF5ZWQgaW4gdGhlIGBpbnB1dGAgYmVmb3JlIHRoZSB1c2VyIGVudGVycyBhIHZhbHVlLlxuICAgKi9cbiAgcGxhY2Vob2xkZXI6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBJdCBwcmV2ZW50cyB0aGUgdXNlciBmcm9tIGNoYW5naW5nIHRoZSB2YWx1ZSBvZiB0aGUgZmllbGRcbiAgICogKG5vdCBmcm9tIGludGVyYWN0aW5nIHdpdGggdGhlIGZpZWxkKS5cbiAgICovXG4gIHJlYWRPbmx5OiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHJlbmRlclN1ZmZpeDogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIGVsZW1lbnQgaXMgcmVxdWlyZWQuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSAoYGZhbHNlYCkgaW5oZXJpdGVkIGZyb20gdGhlIHBhcmVudCBGb3JtQ29udHJvbCBjb21wb25lbnQuXG4gICAqL1xuICByZXF1aXJlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBOdW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIHJvd3M6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIFRoZSBzaXplIG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBzaXplOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ21lZGl1bScsICdzbWFsbCddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIGV4dHJhIHByb3BzIGZvciB0aGUgc2xvdCBjb21wb25lbnRzLlxuICAgKiBZb3UgY2FuIG92ZXJyaWRlIHRoZSBleGlzdGluZyBwcm9wcyBvciBhZGQgbmV3IG9uZXMuXG4gICAqXG4gICAqIFRoaXMgcHJvcCBpcyBhbiBhbGlhcyBmb3IgdGhlIGBjb21wb25lbnRzUHJvcHNgIHByb3AsIHdoaWNoIHdpbGwgYmUgZGVwcmVjYXRlZCBpbiB0aGUgZnV0dXJlLlxuICAgKlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgc2xvdFByb3BzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGlucHV0OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHJvb3Q6IFByb3BUeXBlcy5vYmplY3RcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50cyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlLlxuICAgKlxuICAgKiBUaGlzIHByb3AgaXMgYW4gYWxpYXMgZm9yIHRoZSBgY29tcG9uZW50c2AgcHJvcCwgd2hpY2ggd2lsbCBiZSBkZXByZWNhdGVkIGluIHRoZSBmdXR1cmUuXG4gICAqXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBzbG90czogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBpbnB1dDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIHJvb3Q6IFByb3BUeXBlcy5lbGVtZW50VHlwZVxuICB9KSxcbiAgLyoqXG4gICAqIFN0YXJ0IGBJbnB1dEFkb3JubWVudGAgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgc3RhcnRBZG9ybm1lbnQ6IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogVHlwZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LiBJdCBzaG91bGQgYmUgW2EgdmFsaWQgSFRNTDUgaW5wdXQgdHlwZV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2lucHV0I0Zvcm1fJTNDaW5wdXQlM0VfdHlwZXMpLlxuICAgKiBAZGVmYXVsdCAndGV4dCdcbiAgICovXG4gIHR5cGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudCwgcmVxdWlyZWQgZm9yIGEgY29udHJvbGxlZCBjb21wb25lbnQuXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLmFueVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IElucHV0QmFzZTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5pbXBvcnQgeyBpbnB1dEJhc2VDbGFzc2VzIH0gZnJvbSAnLi4vSW5wdXRCYXNlJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRJbnB1dFV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpSW5wdXQnLCBzbG90KTtcbn1cbmNvbnN0IGlucHV0Q2xhc3NlcyA9IF9leHRlbmRzKHt9LCBpbnB1dEJhc2VDbGFzc2VzLCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlJbnB1dCcsIFsncm9vdCcsICd1bmRlcmxpbmUnLCAnaW5wdXQnXSkpO1xuZXhwb3J0IGRlZmF1bHQgaW5wdXRDbGFzc2VzOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmltcG9ydCB7IGlucHV0QmFzZUNsYXNzZXMgfSBmcm9tICcuLi9JbnB1dEJhc2UnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldE91dGxpbmVkSW5wdXRVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aU91dGxpbmVkSW5wdXQnLCBzbG90KTtcbn1cbmNvbnN0IG91dGxpbmVkSW5wdXRDbGFzc2VzID0gX2V4dGVuZHMoe30sIGlucHV0QmFzZUNsYXNzZXMsIGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aU91dGxpbmVkSW5wdXQnLCBbJ3Jvb3QnLCAnbm90Y2hlZE91dGxpbmUnLCAnaW5wdXQnXSkpO1xuZXhwb3J0IGRlZmF1bHQgb3V0bGluZWRJbnB1dENsYXNzZXM7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuaW1wb3J0IHsgaW5wdXRCYXNlQ2xhc3NlcyB9IGZyb20gJy4uL0lucHV0QmFzZSc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0RmlsbGVkSW5wdXRVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUZpbGxlZElucHV0Jywgc2xvdCk7XG59XG5jb25zdCBmaWxsZWRJbnB1dENsYXNzZXMgPSBfZXh0ZW5kcyh7fSwgaW5wdXRCYXNlQ2xhc3NlcywgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpRmlsbGVkSW5wdXQnLCBbJ3Jvb3QnLCAndW5kZXJsaW5lJywgJ2lucHV0J10pKTtcbmV4cG9ydCBkZWZhdWx0IGZpbGxlZElucHV0Q2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjcmVhdGVTdmdJY29uIGZyb20gJy4uLy4uL3V0aWxzL2NyZWF0ZVN2Z0ljb24nO1xuXG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVTdmdJY29uKCAvKiNfX1BVUkVfXyovX2pzeChcInBhdGhcIiwge1xuICBkOiBcIk03IDEwbDUgNSA1LTV6XCJcbn0pLCAnQXJyb3dEcm9wRG93bicpOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImFkZEVuZExpc3RlbmVyXCIsIFwiYXBwZWFyXCIsIFwiY2hpbGRyZW5cIiwgXCJlYXNpbmdcIiwgXCJpblwiLCBcIm9uRW50ZXJcIiwgXCJvbkVudGVyZWRcIiwgXCJvbkVudGVyaW5nXCIsIFwib25FeGl0XCIsIFwib25FeGl0ZWRcIiwgXCJvbkV4aXRpbmdcIiwgXCJzdHlsZVwiLCBcInRpbWVvdXRcIiwgXCJUcmFuc2l0aW9uQ29tcG9uZW50XCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IFRyYW5zaXRpb24gfSBmcm9tICdyZWFjdC10cmFuc2l0aW9uLWdyb3VwJztcbmltcG9ydCBlbGVtZW50QWNjZXB0aW5nUmVmIGZyb20gJ0BtdWkvdXRpbHMvZWxlbWVudEFjY2VwdGluZ1JlZic7XG5pbXBvcnQgdXNlVGhlbWUgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lJztcbmltcG9ydCB7IHJlZmxvdywgZ2V0VHJhbnNpdGlvblByb3BzIH0gZnJvbSAnLi4vdHJhbnNpdGlvbnMvdXRpbHMnO1xuaW1wb3J0IHVzZUZvcmtSZWYgZnJvbSAnLi4vdXRpbHMvdXNlRm9ya1JlZic7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3Qgc3R5bGVzID0ge1xuICBlbnRlcmluZzoge1xuICAgIG9wYWNpdHk6IDFcbiAgfSxcbiAgZW50ZXJlZDoge1xuICAgIG9wYWNpdHk6IDFcbiAgfVxufTtcblxuLyoqXG4gKiBUaGUgRmFkZSB0cmFuc2l0aW9uIGlzIHVzZWQgYnkgdGhlIFtNb2RhbF0oL21hdGVyaWFsLXVpL3JlYWN0LW1vZGFsLykgY29tcG9uZW50LlxuICogSXQgdXNlcyBbcmVhY3QtdHJhbnNpdGlvbi1ncm91cF0oaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cCkgaW50ZXJuYWxseS5cbiAqL1xuY29uc3QgRmFkZSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEZhZGUocHJvcHMsIHJlZikge1xuICBjb25zdCB0aGVtZSA9IHVzZVRoZW1lKCk7XG4gIGNvbnN0IGRlZmF1bHRUaW1lb3V0ID0ge1xuICAgIGVudGVyOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5lbnRlcmluZ1NjcmVlbixcbiAgICBleGl0OiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5sZWF2aW5nU2NyZWVuXG4gIH07XG4gIGNvbnN0IHtcbiAgICAgIGFkZEVuZExpc3RlbmVyLFxuICAgICAgYXBwZWFyID0gdHJ1ZSxcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgZWFzaW5nLFxuICAgICAgaW46IGluUHJvcCxcbiAgICAgIG9uRW50ZXIsXG4gICAgICBvbkVudGVyZWQsXG4gICAgICBvbkVudGVyaW5nLFxuICAgICAgb25FeGl0LFxuICAgICAgb25FeGl0ZWQsXG4gICAgICBvbkV4aXRpbmcsXG4gICAgICBzdHlsZSxcbiAgICAgIHRpbWVvdXQgPSBkZWZhdWx0VGltZW91dCxcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9wcm9wLXR5cGVzXG4gICAgICBUcmFuc2l0aW9uQ29tcG9uZW50ID0gVHJhbnNpdGlvblxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBlbmFibGVTdHJpY3RNb2RlQ29tcGF0ID0gdHJ1ZTtcbiAgY29uc3Qgbm9kZVJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3QgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihub2RlUmVmLCBjaGlsZHJlbi5yZWYsIHJlZik7XG4gIGNvbnN0IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2sgPSBjYWxsYmFjayA9PiBtYXliZUlzQXBwZWFyaW5nID0+IHtcbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIGNvbnN0IG5vZGUgPSBub2RlUmVmLmN1cnJlbnQ7XG5cbiAgICAgIC8vIG9uRW50ZXJYeHggYW5kIG9uRXhpdFh4eCBjYWxsYmFja3MgaGF2ZSBhIGRpZmZlcmVudCBhcmd1bWVudHMubGVuZ3RoIHZhbHVlLlxuICAgICAgaWYgKG1heWJlSXNBcHBlYXJpbmcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjYWxsYmFjayhub2RlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhbGxiYWNrKG5vZGUsIG1heWJlSXNBcHBlYXJpbmcpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgY29uc3QgaGFuZGxlRW50ZXJpbmcgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKG9uRW50ZXJpbmcpO1xuICBjb25zdCBoYW5kbGVFbnRlciA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2soKG5vZGUsIGlzQXBwZWFyaW5nKSA9PiB7XG4gICAgcmVmbG93KG5vZGUpOyAvLyBTbyB0aGUgYW5pbWF0aW9uIGFsd2F5cyBzdGFydCBmcm9tIHRoZSBzdGFydC5cblxuICAgIGNvbnN0IHRyYW5zaXRpb25Qcm9wcyA9IGdldFRyYW5zaXRpb25Qcm9wcyh7XG4gICAgICBzdHlsZSxcbiAgICAgIHRpbWVvdXQsXG4gICAgICBlYXNpbmdcbiAgICB9LCB7XG4gICAgICBtb2RlOiAnZW50ZXInXG4gICAgfSk7XG4gICAgbm9kZS5zdHlsZS53ZWJraXRUcmFuc2l0aW9uID0gdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdvcGFjaXR5JywgdHJhbnNpdGlvblByb3BzKTtcbiAgICBub2RlLnN0eWxlLnRyYW5zaXRpb24gPSB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ29wYWNpdHknLCB0cmFuc2l0aW9uUHJvcHMpO1xuICAgIGlmIChvbkVudGVyKSB7XG4gICAgICBvbkVudGVyKG5vZGUsIGlzQXBwZWFyaW5nKTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBoYW5kbGVFbnRlcmVkID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhvbkVudGVyZWQpO1xuICBjb25zdCBoYW5kbGVFeGl0aW5nID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhvbkV4aXRpbmcpO1xuICBjb25zdCBoYW5kbGVFeGl0ID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhub2RlID0+IHtcbiAgICBjb25zdCB0cmFuc2l0aW9uUHJvcHMgPSBnZXRUcmFuc2l0aW9uUHJvcHMoe1xuICAgICAgc3R5bGUsXG4gICAgICB0aW1lb3V0LFxuICAgICAgZWFzaW5nXG4gICAgfSwge1xuICAgICAgbW9kZTogJ2V4aXQnXG4gICAgfSk7XG4gICAgbm9kZS5zdHlsZS53ZWJraXRUcmFuc2l0aW9uID0gdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdvcGFjaXR5JywgdHJhbnNpdGlvblByb3BzKTtcbiAgICBub2RlLnN0eWxlLnRyYW5zaXRpb24gPSB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ29wYWNpdHknLCB0cmFuc2l0aW9uUHJvcHMpO1xuICAgIGlmIChvbkV4aXQpIHtcbiAgICAgIG9uRXhpdChub2RlKTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBoYW5kbGVFeGl0ZWQgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKG9uRXhpdGVkKTtcbiAgY29uc3QgaGFuZGxlQWRkRW5kTGlzdGVuZXIgPSBuZXh0ID0+IHtcbiAgICBpZiAoYWRkRW5kTGlzdGVuZXIpIHtcbiAgICAgIC8vIE9sZCBjYWxsIHNpZ25hdHVyZSBiZWZvcmUgYHJlYWN0LXRyYW5zaXRpb24tZ3JvdXBgIGltcGxlbWVudGVkIGBub2RlUmVmYFxuICAgICAgYWRkRW5kTGlzdGVuZXIobm9kZVJlZi5jdXJyZW50LCBuZXh0KTtcbiAgICB9XG4gIH07XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChUcmFuc2l0aW9uQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgYXBwZWFyOiBhcHBlYXIsXG4gICAgaW46IGluUHJvcCxcbiAgICBub2RlUmVmOiBlbmFibGVTdHJpY3RNb2RlQ29tcGF0ID8gbm9kZVJlZiA6IHVuZGVmaW5lZCxcbiAgICBvbkVudGVyOiBoYW5kbGVFbnRlcixcbiAgICBvbkVudGVyZWQ6IGhhbmRsZUVudGVyZWQsXG4gICAgb25FbnRlcmluZzogaGFuZGxlRW50ZXJpbmcsXG4gICAgb25FeGl0OiBoYW5kbGVFeGl0LFxuICAgIG9uRXhpdGVkOiBoYW5kbGVFeGl0ZWQsXG4gICAgb25FeGl0aW5nOiBoYW5kbGVFeGl0aW5nLFxuICAgIGFkZEVuZExpc3RlbmVyOiBoYW5kbGVBZGRFbmRMaXN0ZW5lcixcbiAgICB0aW1lb3V0OiB0aW1lb3V0XG4gIH0sIG90aGVyLCB7XG4gICAgY2hpbGRyZW46IChzdGF0ZSwgY2hpbGRQcm9wcykgPT4ge1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGRyZW4sIF9leHRlbmRzKHtcbiAgICAgICAgc3R5bGU6IF9leHRlbmRzKHtcbiAgICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICAgIHZpc2liaWxpdHk6IHN0YXRlID09PSAnZXhpdGVkJyAmJiAhaW5Qcm9wID8gJ2hpZGRlbicgOiB1bmRlZmluZWRcbiAgICAgICAgfSwgc3R5bGVzW3N0YXRlXSwgc3R5bGUsIGNoaWxkcmVuLnByb3BzLnN0eWxlKSxcbiAgICAgICAgcmVmOiBoYW5kbGVSZWZcbiAgICAgIH0sIGNoaWxkUHJvcHMpKTtcbiAgICB9XG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gRmFkZS5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBBZGQgYSBjdXN0b20gdHJhbnNpdGlvbiBlbmQgdHJpZ2dlci4gQ2FsbGVkIHdpdGggdGhlIHRyYW5zaXRpb25pbmcgRE9NXG4gICAqIG5vZGUgYW5kIGEgZG9uZSBjYWxsYmFjay4gQWxsb3dzIGZvciBtb3JlIGZpbmUgZ3JhaW5lZCB0cmFuc2l0aW9uIGVuZFxuICAgKiBsb2dpYy4gTm90ZTogVGltZW91dHMgYXJlIHN0aWxsIHVzZWQgYXMgYSBmYWxsYmFjayBpZiBwcm92aWRlZC5cbiAgICovXG4gIGFkZEVuZExpc3RlbmVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIFBlcmZvcm0gdGhlIGVudGVyIHRyYW5zaXRpb24gd2hlbiBpdCBmaXJzdCBtb3VudHMgaWYgYGluYCBpcyBhbHNvIGB0cnVlYC5cbiAgICogU2V0IHRoaXMgdG8gYGZhbHNlYCB0byBkaXNhYmxlIHRoaXMgYmVoYXZpb3IuXG4gICAqIEBkZWZhdWx0IHRydWVcbiAgICovXG4gIGFwcGVhcjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBBIHNpbmdsZSBjaGlsZCBjb250ZW50IGVsZW1lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogZWxlbWVudEFjY2VwdGluZ1JlZi5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogVGhlIHRyYW5zaXRpb24gdGltaW5nIGZ1bmN0aW9uLlxuICAgKiBZb3UgbWF5IHNwZWNpZnkgYSBzaW5nbGUgZWFzaW5nIG9yIGEgb2JqZWN0IGNvbnRhaW5pbmcgZW50ZXIgYW5kIGV4aXQgdmFsdWVzLlxuICAgKi9cbiAgZWFzaW5nOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGVudGVyOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGV4aXQ6IFByb3BUeXBlcy5zdHJpbmdcbiAgfSksIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCB3aWxsIHRyYW5zaXRpb24gaW4uXG4gICAqL1xuICBpbjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkVudGVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRW50ZXJlZDogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkVudGVyaW5nOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRXhpdDogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkV4aXRlZDogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkV4aXRpbmc6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBUaGUgZHVyYXRpb24gZm9yIHRoZSB0cmFuc2l0aW9uLCBpbiBtaWxsaXNlY29uZHMuXG4gICAqIFlvdSBtYXkgc3BlY2lmeSBhIHNpbmdsZSB0aW1lb3V0IGZvciBhbGwgdHJhbnNpdGlvbnMsIG9yIGluZGl2aWR1YWxseSB3aXRoIGFuIG9iamVjdC5cbiAgICogQGRlZmF1bHQge1xuICAgKiAgIGVudGVyOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5lbnRlcmluZ1NjcmVlbixcbiAgICogICBleGl0OiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5sZWF2aW5nU2NyZWVuLFxuICAgKiB9XG4gICAqL1xuICB0aW1lb3V0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGFwcGVhcjogUHJvcFR5cGVzLm51bWJlcixcbiAgICBlbnRlcjogUHJvcFR5cGVzLm51bWJlcixcbiAgICBleGl0OiBQcm9wVHlwZXMubnVtYmVyXG4gIH0pXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBGYWRlOyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0QmFja2Ryb3BVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUJhY2tkcm9wJywgc2xvdCk7XG59XG5jb25zdCBiYWNrZHJvcENsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlCYWNrZHJvcCcsIFsncm9vdCcsICdpbnZpc2libGUnXSk7XG5leHBvcnQgZGVmYXVsdCBiYWNrZHJvcENsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJjb21wb25lbnRzXCIsIFwiY29tcG9uZW50c1Byb3BzXCIsIFwiaW52aXNpYmxlXCIsIFwib3BlblwiLCBcInNsb3RQcm9wc1wiLCBcInNsb3RzXCIsIFwiVHJhbnNpdGlvbkNvbXBvbmVudFwiLCBcInRyYW5zaXRpb25EdXJhdGlvblwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgRmFkZSBmcm9tICcuLi9GYWRlJztcbmltcG9ydCB7IGdldEJhY2tkcm9wVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9iYWNrZHJvcENsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIGludmlzaWJsZVxuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgaW52aXNpYmxlICYmICdpbnZpc2libGUnXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldEJhY2tkcm9wVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBCYWNrZHJvcFJvb3QgPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aUJhY2tkcm9wJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLnJvb3QsIG93bmVyU3RhdGUuaW52aXNpYmxlICYmIHN0eWxlcy5pbnZpc2libGVdO1xuICB9XG59KSgoe1xuICBvd25lclN0YXRlXG59KSA9PiBfZXh0ZW5kcyh7XG4gIHBvc2l0aW9uOiAnZml4ZWQnLFxuICBkaXNwbGF5OiAnZmxleCcsXG4gIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gIHJpZ2h0OiAwLFxuICBib3R0b206IDAsXG4gIHRvcDogMCxcbiAgbGVmdDogMCxcbiAgYmFja2dyb3VuZENvbG9yOiAncmdiYSgwLCAwLCAwLCAwLjUpJyxcbiAgV2Via2l0VGFwSGlnaGxpZ2h0Q29sb3I6ICd0cmFuc3BhcmVudCdcbn0sIG93bmVyU3RhdGUuaW52aXNpYmxlICYmIHtcbiAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG59KSk7XG5jb25zdCBCYWNrZHJvcCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEJhY2tkcm9wKGluUHJvcHMsIHJlZikge1xuICB2YXIgX3Nsb3RQcm9wcyRyb290LCBfcmVmLCBfc2xvdHMkcm9vdDtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpQmFja2Ryb3AnXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBjaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNvbXBvbmVudCA9ICdkaXYnLFxuICAgICAgY29tcG9uZW50cyA9IHt9LFxuICAgICAgY29tcG9uZW50c1Byb3BzID0ge30sXG4gICAgICBpbnZpc2libGUgPSBmYWxzZSxcbiAgICAgIG9wZW4sXG4gICAgICBzbG90UHJvcHMgPSB7fSxcbiAgICAgIHNsb3RzID0ge30sXG4gICAgICBUcmFuc2l0aW9uQ29tcG9uZW50ID0gRmFkZSxcbiAgICAgIHRyYW5zaXRpb25EdXJhdGlvblxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY29tcG9uZW50LFxuICAgIGludmlzaWJsZVxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICBjb25zdCByb290U2xvdFByb3BzID0gKF9zbG90UHJvcHMkcm9vdCA9IHNsb3RQcm9wcy5yb290KSAhPSBudWxsID8gX3Nsb3RQcm9wcyRyb290IDogY29tcG9uZW50c1Byb3BzLnJvb3Q7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChUcmFuc2l0aW9uQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgaW46IG9wZW4sXG4gICAgdGltZW91dDogdHJhbnNpdGlvbkR1cmF0aW9uXG4gIH0sIG90aGVyLCB7XG4gICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9fanN4KEJhY2tkcm9wUm9vdCwgX2V4dGVuZHMoe1xuICAgICAgXCJhcmlhLWhpZGRlblwiOiB0cnVlXG4gICAgfSwgcm9vdFNsb3RQcm9wcywge1xuICAgICAgYXM6IChfcmVmID0gKF9zbG90cyRyb290ID0gc2xvdHMucm9vdCkgIT0gbnVsbCA/IF9zbG90cyRyb290IDogY29tcG9uZW50cy5Sb290KSAhPSBudWxsID8gX3JlZiA6IGNvbXBvbmVudCxcbiAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSwgcm9vdFNsb3RQcm9wcyA9PSBudWxsID8gdm9pZCAwIDogcm9vdFNsb3RQcm9wcy5jbGFzc05hbWUpLFxuICAgICAgb3duZXJTdGF0ZTogX2V4dGVuZHMoe30sIG93bmVyU3RhdGUsIHJvb3RTbG90UHJvcHMgPT0gbnVsbCA/IHZvaWQgMCA6IHJvb3RTbG90UHJvcHMub3duZXJTdGF0ZSksXG4gICAgICBjbGFzc2VzOiBjbGFzc2VzLFxuICAgICAgcmVmOiByZWYsXG4gICAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgICB9KSlcbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBCYWNrZHJvcC5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudHMgdXNlZCBmb3IgZWFjaCBzbG90IGluc2lkZS5cbiAgICpcbiAgICogVGhpcyBwcm9wIGlzIGFuIGFsaWFzIGZvciB0aGUgYHNsb3RzYCBwcm9wLlxuICAgKiBJdCdzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGUgYHNsb3RzYCBwcm9wIGluc3RlYWQuXG4gICAqXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBjb21wb25lbnRzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIFJvb3Q6IFByb3BUeXBlcy5lbGVtZW50VHlwZVxuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBleHRyYSBwcm9wcyBmb3IgdGhlIHNsb3QgY29tcG9uZW50cy5cbiAgICogWW91IGNhbiBvdmVycmlkZSB0aGUgZXhpc3RpbmcgcHJvcHMgb3IgYWRkIG5ldyBvbmVzLlxuICAgKlxuICAgKiBUaGlzIHByb3AgaXMgYW4gYWxpYXMgZm9yIHRoZSBgc2xvdFByb3BzYCBwcm9wLlxuICAgKiBJdCdzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGUgYHNsb3RQcm9wc2AgcHJvcCBpbnN0ZWFkLCBhcyBgY29tcG9uZW50c1Byb3BzYCB3aWxsIGJlIGRlcHJlY2F0ZWQgaW4gdGhlIGZ1dHVyZS5cbiAgICpcbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIGNvbXBvbmVudHNQcm9wczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICByb290OiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYmFja2Ryb3AgaXMgaW52aXNpYmxlLlxuICAgKiBJdCBjYW4gYmUgdXNlZCB3aGVuIHJlbmRlcmluZyBhIHBvcG92ZXIgb3IgYSBjdXN0b20gc2VsZWN0IGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGludmlzaWJsZTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgc2hvd24uXG4gICAqL1xuICBvcGVuOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogVGhlIGV4dHJhIHByb3BzIGZvciB0aGUgc2xvdCBjb21wb25lbnRzLlxuICAgKiBZb3UgY2FuIG92ZXJyaWRlIHRoZSBleGlzdGluZyBwcm9wcyBvciBhZGQgbmV3IG9uZXMuXG4gICAqXG4gICAqIFRoaXMgcHJvcCBpcyBhbiBhbGlhcyBmb3IgdGhlIGBjb21wb25lbnRzUHJvcHNgIHByb3AsIHdoaWNoIHdpbGwgYmUgZGVwcmVjYXRlZCBpbiB0aGUgZnV0dXJlLlxuICAgKlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgc2xvdFByb3BzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIHJvb3Q6IFByb3BUeXBlcy5vYmplY3RcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50cyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlLlxuICAgKlxuICAgKiBUaGlzIHByb3AgaXMgYW4gYWxpYXMgZm9yIHRoZSBgY29tcG9uZW50c2AgcHJvcCwgd2hpY2ggd2lsbCBiZSBkZXByZWNhdGVkIGluIHRoZSBmdXR1cmUuXG4gICAqXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBzbG90czogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICByb290OiBQcm9wVHlwZXMuZWxlbWVudFR5cGVcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSB0cmFuc2l0aW9uLlxuICAgKiBbRm9sbG93IHRoaXMgZ3VpZGVdKC9tYXRlcmlhbC11aS90cmFuc2l0aW9ucy8jdHJhbnNpdGlvbmNvbXBvbmVudC1wcm9wKSB0byBsZWFybiBtb3JlIGFib3V0IHRoZSByZXF1aXJlbWVudHMgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCBGYWRlXG4gICAqL1xuICBUcmFuc2l0aW9uQ29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBUaGUgZHVyYXRpb24gZm9yIHRoZSB0cmFuc2l0aW9uLCBpbiBtaWxsaXNlY29uZHMuXG4gICAqIFlvdSBtYXkgc3BlY2lmeSBhIHNpbmdsZSB0aW1lb3V0IGZvciBhbGwgdHJhbnNpdGlvbnMsIG9yIGluZGl2aWR1YWxseSB3aXRoIGFuIG9iamVjdC5cbiAgICovXG4gIHRyYW5zaXRpb25EdXJhdGlvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBhcHBlYXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZW50ZXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZXhpdDogUHJvcFR5cGVzLm51bWJlclxuICB9KV0pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgQmFja2Ryb3A7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmNvbnN0IGJveENsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlCb3gnLCBbJ3Jvb3QnXSk7XG5leHBvcnQgZGVmYXVsdCBib3hDbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IHsgY3JlYXRlQm94IH0gZnJvbSAnQG11aS9zeXN0ZW0nO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IHVuc3RhYmxlX0NsYXNzTmFtZUdlbmVyYXRvciBhcyBDbGFzc05hbWVHZW5lcmF0b3IgfSBmcm9tICcuLi9jbGFzc05hbWUnO1xuaW1wb3J0IHsgY3JlYXRlVGhlbWUgfSBmcm9tICcuLi9zdHlsZXMnO1xuaW1wb3J0IFRIRU1FX0lEIGZyb20gJy4uL3N0eWxlcy9pZGVudGlmaWVyJztcbmltcG9ydCBib3hDbGFzc2VzIGZyb20gJy4vYm94Q2xhc3Nlcyc7XG5jb25zdCBkZWZhdWx0VGhlbWUgPSBjcmVhdGVUaGVtZSgpO1xuY29uc3QgQm94ID0gY3JlYXRlQm94KHtcbiAgdGhlbWVJZDogVEhFTUVfSUQsXG4gIGRlZmF1bHRUaGVtZSxcbiAgZGVmYXVsdENsYXNzTmFtZTogYm94Q2xhc3Nlcy5yb290LFxuICBnZW5lcmF0ZUNsYXNzTmFtZTogQ2xhc3NOYW1lR2VuZXJhdG9yLmdlbmVyYXRlXG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEJveC5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IEJveDsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldEJ1dHRvblV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpQnV0dG9uJywgc2xvdCk7XG59XG5jb25zdCBidXR0b25DbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpQnV0dG9uJywgWydyb290JywgJ3RleHQnLCAndGV4dEluaGVyaXQnLCAndGV4dFByaW1hcnknLCAndGV4dFNlY29uZGFyeScsICd0ZXh0U3VjY2VzcycsICd0ZXh0RXJyb3InLCAndGV4dEluZm8nLCAndGV4dFdhcm5pbmcnLCAnb3V0bGluZWQnLCAnb3V0bGluZWRJbmhlcml0JywgJ291dGxpbmVkUHJpbWFyeScsICdvdXRsaW5lZFNlY29uZGFyeScsICdvdXRsaW5lZFN1Y2Nlc3MnLCAnb3V0bGluZWRFcnJvcicsICdvdXRsaW5lZEluZm8nLCAnb3V0bGluZWRXYXJuaW5nJywgJ2NvbnRhaW5lZCcsICdjb250YWluZWRJbmhlcml0JywgJ2NvbnRhaW5lZFByaW1hcnknLCAnY29udGFpbmVkU2Vjb25kYXJ5JywgJ2NvbnRhaW5lZFN1Y2Nlc3MnLCAnY29udGFpbmVkRXJyb3InLCAnY29udGFpbmVkSW5mbycsICdjb250YWluZWRXYXJuaW5nJywgJ2Rpc2FibGVFbGV2YXRpb24nLCAnZm9jdXNWaXNpYmxlJywgJ2Rpc2FibGVkJywgJ2NvbG9ySW5oZXJpdCcsICdjb2xvclByaW1hcnknLCAnY29sb3JTZWNvbmRhcnknLCAnY29sb3JTdWNjZXNzJywgJ2NvbG9yRXJyb3InLCAnY29sb3JJbmZvJywgJ2NvbG9yV2FybmluZycsICd0ZXh0U2l6ZVNtYWxsJywgJ3RleHRTaXplTWVkaXVtJywgJ3RleHRTaXplTGFyZ2UnLCAnb3V0bGluZWRTaXplU21hbGwnLCAnb3V0bGluZWRTaXplTWVkaXVtJywgJ291dGxpbmVkU2l6ZUxhcmdlJywgJ2NvbnRhaW5lZFNpemVTbWFsbCcsICdjb250YWluZWRTaXplTWVkaXVtJywgJ2NvbnRhaW5lZFNpemVMYXJnZScsICdzaXplTWVkaXVtJywgJ3NpemVTbWFsbCcsICdzaXplTGFyZ2UnLCAnZnVsbFdpZHRoJywgJ3N0YXJ0SWNvbicsICdlbmRJY29uJywgJ2ljb24nLCAnaWNvblNpemVTbWFsbCcsICdpY29uU2l6ZU1lZGl1bScsICdpY29uU2l6ZUxhcmdlJ10pO1xuZXhwb3J0IGRlZmF1bHQgYnV0dG9uQ2xhc3NlczsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cbmNvbnN0IEJ1dHRvbkdyb3VwQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KHt9KTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIEJ1dHRvbkdyb3VwQ29udGV4dC5kaXNwbGF5TmFtZSA9ICdCdXR0b25Hcm91cENvbnRleHQnO1xufVxuZXhwb3J0IGRlZmF1bHQgQnV0dG9uR3JvdXBDb250ZXh0OyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0Jztcbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuY29uc3QgQnV0dG9uR3JvdXBCdXR0b25Db250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQodW5kZWZpbmVkKTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIEJ1dHRvbkdyb3VwQnV0dG9uQ29udGV4dC5kaXNwbGF5TmFtZSA9ICdCdXR0b25Hcm91cEJ1dHRvbkNvbnRleHQnO1xufVxuZXhwb3J0IGRlZmF1bHQgQnV0dG9uR3JvdXBCdXR0b25Db250ZXh0OyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNoaWxkcmVuXCIsIFwiY29sb3JcIiwgXCJjb21wb25lbnRcIiwgXCJjbGFzc05hbWVcIiwgXCJkaXNhYmxlZFwiLCBcImRpc2FibGVFbGV2YXRpb25cIiwgXCJkaXNhYmxlRm9jdXNSaXBwbGVcIiwgXCJlbmRJY29uXCIsIFwiZm9jdXNWaXNpYmxlQ2xhc3NOYW1lXCIsIFwiZnVsbFdpZHRoXCIsIFwic2l6ZVwiLCBcInN0YXJ0SWNvblwiLCBcInR5cGVcIiwgXCJ2YXJpYW50XCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHJlc29sdmVQcm9wcyBmcm9tICdAbXVpL3V0aWxzL3Jlc29sdmVQcm9wcyc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgeyBhbHBoYSB9IGZyb20gJ0BtdWkvc3lzdGVtL2NvbG9yTWFuaXB1bGF0b3InO1xuaW1wb3J0IHN0eWxlZCwgeyByb290U2hvdWxkRm9yd2FyZFByb3AgfSBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCBCdXR0b25CYXNlIGZyb20gJy4uL0J1dHRvbkJhc2UnO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5pbXBvcnQgYnV0dG9uQ2xhc3NlcywgeyBnZXRCdXR0b25VdGlsaXR5Q2xhc3MgfSBmcm9tICcuL2J1dHRvbkNsYXNzZXMnO1xuaW1wb3J0IEJ1dHRvbkdyb3VwQ29udGV4dCBmcm9tICcuLi9CdXR0b25Hcm91cC9CdXR0b25Hcm91cENvbnRleHQnO1xuaW1wb3J0IEJ1dHRvbkdyb3VwQnV0dG9uQ29udGV4dCBmcm9tICcuLi9CdXR0b25Hcm91cC9CdXR0b25Hcm91cEJ1dHRvbkNvbnRleHQnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjb2xvcixcbiAgICBkaXNhYmxlRWxldmF0aW9uLFxuICAgIGZ1bGxXaWR0aCxcbiAgICBzaXplLFxuICAgIHZhcmlhbnQsXG4gICAgY2xhc3Nlc1xuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgdmFyaWFudCwgYCR7dmFyaWFudH0ke2NhcGl0YWxpemUoY29sb3IpfWAsIGBzaXplJHtjYXBpdGFsaXplKHNpemUpfWAsIGAke3ZhcmlhbnR9U2l6ZSR7Y2FwaXRhbGl6ZShzaXplKX1gLCBgY29sb3Ike2NhcGl0YWxpemUoY29sb3IpfWAsIGRpc2FibGVFbGV2YXRpb24gJiYgJ2Rpc2FibGVFbGV2YXRpb24nLCBmdWxsV2lkdGggJiYgJ2Z1bGxXaWR0aCddLFxuICAgIGxhYmVsOiBbJ2xhYmVsJ10sXG4gICAgc3RhcnRJY29uOiBbJ2ljb24nLCAnc3RhcnRJY29uJywgYGljb25TaXplJHtjYXBpdGFsaXplKHNpemUpfWBdLFxuICAgIGVuZEljb246IFsnaWNvbicsICdlbmRJY29uJywgYGljb25TaXplJHtjYXBpdGFsaXplKHNpemUpfWBdXG4gIH07XG4gIGNvbnN0IGNvbXBvc2VkQ2xhc3NlcyA9IGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRCdXR0b25VdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xuICByZXR1cm4gX2V4dGVuZHMoe30sIGNsYXNzZXMsIGNvbXBvc2VkQ2xhc3Nlcyk7XG59O1xuY29uc3QgY29tbW9uSWNvblN0eWxlcyA9IG93bmVyU3RhdGUgPT4gX2V4dGVuZHMoe30sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiB7XG4gICcmID4gKjpudGgtb2YtdHlwZSgxKSc6IHtcbiAgICBmb250U2l6ZTogMThcbiAgfVxufSwgb3duZXJTdGF0ZS5zaXplID09PSAnbWVkaXVtJyAmJiB7XG4gICcmID4gKjpudGgtb2YtdHlwZSgxKSc6IHtcbiAgICBmb250U2l6ZTogMjBcbiAgfVxufSwgb3duZXJTdGF0ZS5zaXplID09PSAnbGFyZ2UnICYmIHtcbiAgJyYgPiAqOm50aC1vZi10eXBlKDEpJzoge1xuICAgIGZvbnRTaXplOiAyMlxuICB9XG59KTtcbmNvbnN0IEJ1dHRvblJvb3QgPSBzdHlsZWQoQnV0dG9uQmFzZSwge1xuICBzaG91bGRGb3J3YXJkUHJvcDogcHJvcCA9PiByb290U2hvdWxkRm9yd2FyZFByb3AocHJvcCkgfHwgcHJvcCA9PT0gJ2NsYXNzZXMnLFxuICBuYW1lOiAnTXVpQnV0dG9uJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLnJvb3QsIHN0eWxlc1tvd25lclN0YXRlLnZhcmlhbnRdLCBzdHlsZXNbYCR7b3duZXJTdGF0ZS52YXJpYW50fSR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLmNvbG9yKX1gXSwgc3R5bGVzW2BzaXplJHtjYXBpdGFsaXplKG93bmVyU3RhdGUuc2l6ZSl9YF0sIHN0eWxlc1tgJHtvd25lclN0YXRlLnZhcmlhbnR9U2l6ZSR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLnNpemUpfWBdLCBvd25lclN0YXRlLmNvbG9yID09PSAnaW5oZXJpdCcgJiYgc3R5bGVzLmNvbG9ySW5oZXJpdCwgb3duZXJTdGF0ZS5kaXNhYmxlRWxldmF0aW9uICYmIHN0eWxlcy5kaXNhYmxlRWxldmF0aW9uLCBvd25lclN0YXRlLmZ1bGxXaWR0aCAmJiBzdHlsZXMuZnVsbFdpZHRoXTtcbiAgfVxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IHtcbiAgdmFyIF90aGVtZSRwYWxldHRlJGdldENvbiwgX3RoZW1lJHBhbGV0dGU7XG4gIGNvbnN0IGluaGVyaXRDb250YWluZWRCYWNrZ3JvdW5kQ29sb3IgPSB0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdsaWdodCcgPyB0aGVtZS5wYWxldHRlLmdyZXlbMzAwXSA6IHRoZW1lLnBhbGV0dGUuZ3JleVs4MDBdO1xuICBjb25zdCBpbmhlcml0Q29udGFpbmVkSG92ZXJCYWNrZ3JvdW5kQ29sb3IgPSB0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdsaWdodCcgPyB0aGVtZS5wYWxldHRlLmdyZXkuQTEwMCA6IHRoZW1lLnBhbGV0dGUuZ3JleVs3MDBdO1xuICByZXR1cm4gX2V4dGVuZHMoe30sIHRoZW1lLnR5cG9ncmFwaHkuYnV0dG9uLCB7XG4gICAgbWluV2lkdGg6IDY0LFxuICAgIHBhZGRpbmc6ICc2cHggMTZweCcsXG4gICAgYm9yZGVyUmFkaXVzOiAodGhlbWUudmFycyB8fCB0aGVtZSkuc2hhcGUuYm9yZGVyUmFkaXVzLFxuICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZShbJ2JhY2tncm91bmQtY29sb3InLCAnYm94LXNoYWRvdycsICdib3JkZXItY29sb3InLCAnY29sb3InXSwge1xuICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0XG4gICAgfSksXG4gICAgJyY6aG92ZXInOiBfZXh0ZW5kcyh7XG4gICAgICB0ZXh0RGVjb3JhdGlvbjogJ25vbmUnLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS52YXJzID8gYHJnYmEoJHt0aGVtZS52YXJzLnBhbGV0dGUudGV4dC5wcmltYXJ5Q2hhbm5lbH0gLyAke3RoZW1lLnZhcnMucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5fSlgIDogYWxwaGEodGhlbWUucGFsZXR0ZS50ZXh0LnByaW1hcnksIHRoZW1lLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eSksXG4gICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCdcbiAgICAgIH1cbiAgICB9LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICd0ZXh0JyAmJiBvd25lclN0YXRlLmNvbG9yICE9PSAnaW5oZXJpdCcgJiYge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS52YXJzID8gYHJnYmEoJHt0aGVtZS52YXJzLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpbkNoYW5uZWx9IC8gJHt0aGVtZS52YXJzLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eX0pYCA6IGFscGhhKHRoZW1lLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpbiwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5KSxcbiAgICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xuICAgICAgfVxuICAgIH0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ291dGxpbmVkJyAmJiBvd25lclN0YXRlLmNvbG9yICE9PSAnaW5oZXJpdCcgJiYge1xuICAgICAgYm9yZGVyOiBgMXB4IHNvbGlkICR7KHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpbn1gLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS52YXJzID8gYHJnYmEoJHt0aGVtZS52YXJzLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpbkNoYW5uZWx9IC8gJHt0aGVtZS52YXJzLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eX0pYCA6IGFscGhhKHRoZW1lLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpbiwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5KSxcbiAgICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xuICAgICAgfVxuICAgIH0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2NvbnRhaW5lZCcgJiYge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS52YXJzID8gdGhlbWUudmFycy5wYWxldHRlLkJ1dHRvbi5pbmhlcml0Q29udGFpbmVkSG92ZXJCZyA6IGluaGVyaXRDb250YWluZWRIb3ZlckJhY2tncm91bmRDb2xvcixcbiAgICAgIGJveFNoYWRvdzogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnNoYWRvd3NbNF0sXG4gICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICBib3hTaGFkb3c6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5zaGFkb3dzWzJdLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmdyZXlbMzAwXVxuICAgICAgfVxuICAgIH0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2NvbnRhaW5lZCcgJiYgb3duZXJTdGF0ZS5jb2xvciAhPT0gJ2luaGVyaXQnICYmIHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0uZGFyayxcbiAgICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpblxuICAgICAgfVxuICAgIH0pLFxuICAgICcmOmFjdGl2ZSc6IF9leHRlbmRzKHt9LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdjb250YWluZWQnICYmIHtcbiAgICAgIGJveFNoYWRvdzogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnNoYWRvd3NbOF1cbiAgICB9KSxcbiAgICBbYCYuJHtidXR0b25DbGFzc2VzLmZvY3VzVmlzaWJsZX1gXTogX2V4dGVuZHMoe30sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2NvbnRhaW5lZCcgJiYge1xuICAgICAgYm94U2hhZG93OiAodGhlbWUudmFycyB8fCB0aGVtZSkuc2hhZG93c1s2XVxuICAgIH0pLFxuICAgIFtgJi4ke2J1dHRvbkNsYXNzZXMuZGlzYWJsZWR9YF06IF9leHRlbmRzKHtcbiAgICAgIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWRcbiAgICB9LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdvdXRsaW5lZCcgJiYge1xuICAgICAgYm9yZGVyOiBgMXB4IHNvbGlkICR7KHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkQmFja2dyb3VuZH1gXG4gICAgfSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnY29udGFpbmVkJyAmJiB7XG4gICAgICBjb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkLFxuICAgICAgYm94U2hhZG93OiAodGhlbWUudmFycyB8fCB0aGVtZSkuc2hhZG93c1swXSxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkQmFja2dyb3VuZFxuICAgIH0pXG4gIH0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ3RleHQnICYmIHtcbiAgICBwYWRkaW5nOiAnNnB4IDhweCdcbiAgfSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAndGV4dCcgJiYgb3duZXJTdGF0ZS5jb2xvciAhPT0gJ2luaGVyaXQnICYmIHtcbiAgICBjb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpblxuICB9LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdvdXRsaW5lZCcgJiYge1xuICAgIHBhZGRpbmc6ICc1cHggMTVweCcsXG4gICAgYm9yZGVyOiAnMXB4IHNvbGlkIGN1cnJlbnRDb2xvcidcbiAgfSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnb3V0bGluZWQnICYmIG93bmVyU3RhdGUuY29sb3IgIT09ICdpbmhlcml0JyAmJiB7XG4gICAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLm1haW4sXG4gICAgYm9yZGVyOiB0aGVtZS52YXJzID8gYDFweCBzb2xpZCByZ2JhKCR7dGhlbWUudmFycy5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLm1haW5DaGFubmVsfSAvIDAuNSlgIDogYDFweCBzb2xpZCAke2FscGhhKHRoZW1lLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpbiwgMC41KX1gXG4gIH0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2NvbnRhaW5lZCcgJiYge1xuICAgIGNvbG9yOiB0aGVtZS52YXJzID9cbiAgICAvLyB0aGlzIGlzIHNhZmUgYmVjYXVzZSBncmV5IGRvZXMgbm90IGNoYW5nZSBiZXR3ZWVuIGRlZmF1bHQgbGlnaHQvZGFyayBtb2RlXG4gICAgdGhlbWUudmFycy5wYWxldHRlLnRleHQucHJpbWFyeSA6IChfdGhlbWUkcGFsZXR0ZSRnZXRDb24gPSAoX3RoZW1lJHBhbGV0dGUgPSB0aGVtZS5wYWxldHRlKS5nZXRDb250cmFzdFRleHQpID09IG51bGwgPyB2b2lkIDAgOiBfdGhlbWUkcGFsZXR0ZSRnZXRDb24uY2FsbChfdGhlbWUkcGFsZXR0ZSwgdGhlbWUucGFsZXR0ZS5ncmV5WzMwMF0pLFxuICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUudmFycyA/IHRoZW1lLnZhcnMucGFsZXR0ZS5CdXR0b24uaW5oZXJpdENvbnRhaW5lZEJnIDogaW5oZXJpdENvbnRhaW5lZEJhY2tncm91bmRDb2xvcixcbiAgICBib3hTaGFkb3c6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5zaGFkb3dzWzJdXG4gIH0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2NvbnRhaW5lZCcgJiYgb3duZXJTdGF0ZS5jb2xvciAhPT0gJ2luaGVyaXQnICYmIHtcbiAgICBjb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0uY29udHJhc3RUZXh0LFxuICAgIGJhY2tncm91bmRDb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpblxuICB9LCBvd25lclN0YXRlLmNvbG9yID09PSAnaW5oZXJpdCcgJiYge1xuICAgIGNvbG9yOiAnaW5oZXJpdCcsXG4gICAgYm9yZGVyQ29sb3I6ICdjdXJyZW50Q29sb3InXG4gIH0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiBvd25lclN0YXRlLnZhcmlhbnQgPT09ICd0ZXh0JyAmJiB7XG4gICAgcGFkZGluZzogJzRweCA1cHgnLFxuICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTMpXG4gIH0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ2xhcmdlJyAmJiBvd25lclN0YXRlLnZhcmlhbnQgPT09ICd0ZXh0JyAmJiB7XG4gICAgcGFkZGluZzogJzhweCAxMXB4JyxcbiAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDE1KVxuICB9LCBvd25lclN0YXRlLnNpemUgPT09ICdzbWFsbCcgJiYgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnb3V0bGluZWQnICYmIHtcbiAgICBwYWRkaW5nOiAnM3B4IDlweCcsXG4gICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgxMylcbiAgfSwgb3duZXJTdGF0ZS5zaXplID09PSAnbGFyZ2UnICYmIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ291dGxpbmVkJyAmJiB7XG4gICAgcGFkZGluZzogJzdweCAyMXB4JyxcbiAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDE1KVxuICB9LCBvd25lclN0YXRlLnNpemUgPT09ICdzbWFsbCcgJiYgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnY29udGFpbmVkJyAmJiB7XG4gICAgcGFkZGluZzogJzRweCAxMHB4JyxcbiAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDEzKVxuICB9LCBvd25lclN0YXRlLnNpemUgPT09ICdsYXJnZScgJiYgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnY29udGFpbmVkJyAmJiB7XG4gICAgcGFkZGluZzogJzhweCAyMnB4JyxcbiAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDE1KVxuICB9LCBvd25lclN0YXRlLmZ1bGxXaWR0aCAmJiB7XG4gICAgd2lkdGg6ICcxMDAlJ1xuICB9KTtcbn0sICh7XG4gIG93bmVyU3RhdGVcbn0pID0+IG93bmVyU3RhdGUuZGlzYWJsZUVsZXZhdGlvbiAmJiB7XG4gIGJveFNoYWRvdzogJ25vbmUnLFxuICAnJjpob3Zlcic6IHtcbiAgICBib3hTaGFkb3c6ICdub25lJ1xuICB9LFxuICBbYCYuJHtidXR0b25DbGFzc2VzLmZvY3VzVmlzaWJsZX1gXToge1xuICAgIGJveFNoYWRvdzogJ25vbmUnXG4gIH0sXG4gICcmOmFjdGl2ZSc6IHtcbiAgICBib3hTaGFkb3c6ICdub25lJ1xuICB9LFxuICBbYCYuJHtidXR0b25DbGFzc2VzLmRpc2FibGVkfWBdOiB7XG4gICAgYm94U2hhZG93OiAnbm9uZSdcbiAgfVxufSk7XG5jb25zdCBCdXR0b25TdGFydEljb24gPSBzdHlsZWQoJ3NwYW4nLCB7XG4gIG5hbWU6ICdNdWlCdXR0b24nLFxuICBzbG90OiAnU3RhcnRJY29uJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5zdGFydEljb24sIHN0eWxlc1tgaWNvblNpemUke2NhcGl0YWxpemUob3duZXJTdGF0ZS5zaXplKX1gXV07XG4gIH1cbn0pKCh7XG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHtcbiAgZGlzcGxheTogJ2luaGVyaXQnLFxuICBtYXJnaW5SaWdodDogOCxcbiAgbWFyZ2luTGVmdDogLTRcbn0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiB7XG4gIG1hcmdpbkxlZnQ6IC0yXG59LCBjb21tb25JY29uU3R5bGVzKG93bmVyU3RhdGUpKSk7XG5jb25zdCBCdXR0b25FbmRJY29uID0gc3R5bGVkKCdzcGFuJywge1xuICBuYW1lOiAnTXVpQnV0dG9uJyxcbiAgc2xvdDogJ0VuZEljb24nLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLmVuZEljb24sIHN0eWxlc1tgaWNvblNpemUke2NhcGl0YWxpemUob3duZXJTdGF0ZS5zaXplKX1gXV07XG4gIH1cbn0pKCh7XG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHtcbiAgZGlzcGxheTogJ2luaGVyaXQnLFxuICBtYXJnaW5SaWdodDogLTQsXG4gIG1hcmdpbkxlZnQ6IDhcbn0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiB7XG4gIG1hcmdpblJpZ2h0OiAtMlxufSwgY29tbW9uSWNvblN0eWxlcyhvd25lclN0YXRlKSkpO1xuY29uc3QgQnV0dG9uID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQnV0dG9uKGluUHJvcHMsIHJlZikge1xuICAvLyBwcm9wcyBwcmlvcml0eTogYGluUHJvcHNgID4gYGNvbnRleHRQcm9wc2AgPiBgdGhlbWVEZWZhdWx0UHJvcHNgXG4gIGNvbnN0IGNvbnRleHRQcm9wcyA9IFJlYWN0LnVzZUNvbnRleHQoQnV0dG9uR3JvdXBDb250ZXh0KTtcbiAgY29uc3QgYnV0dG9uR3JvdXBCdXR0b25Db250ZXh0UG9zaXRpb25DbGFzc05hbWUgPSBSZWFjdC51c2VDb250ZXh0KEJ1dHRvbkdyb3VwQnV0dG9uQ29udGV4dCk7XG4gIGNvbnN0IHJlc29sdmVkUHJvcHMgPSByZXNvbHZlUHJvcHMoY29udGV4dFByb3BzLCBpblByb3BzKTtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogcmVzb2x2ZWRQcm9wcyxcbiAgICBuYW1lOiAnTXVpQnV0dG9uJ1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgY2hpbGRyZW4sXG4gICAgICBjb2xvciA9ICdwcmltYXJ5JyxcbiAgICAgIGNvbXBvbmVudCA9ICdidXR0b24nLFxuICAgICAgY2xhc3NOYW1lLFxuICAgICAgZGlzYWJsZWQgPSBmYWxzZSxcbiAgICAgIGRpc2FibGVFbGV2YXRpb24gPSBmYWxzZSxcbiAgICAgIGRpc2FibGVGb2N1c1JpcHBsZSA9IGZhbHNlLFxuICAgICAgZW5kSWNvbjogZW5kSWNvblByb3AsXG4gICAgICBmb2N1c1Zpc2libGVDbGFzc05hbWUsXG4gICAgICBmdWxsV2lkdGggPSBmYWxzZSxcbiAgICAgIHNpemUgPSAnbWVkaXVtJyxcbiAgICAgIHN0YXJ0SWNvbjogc3RhcnRJY29uUHJvcCxcbiAgICAgIHR5cGUsXG4gICAgICB2YXJpYW50ID0gJ3RleHQnXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjb2xvcixcbiAgICBjb21wb25lbnQsXG4gICAgZGlzYWJsZWQsXG4gICAgZGlzYWJsZUVsZXZhdGlvbixcbiAgICBkaXNhYmxlRm9jdXNSaXBwbGUsXG4gICAgZnVsbFdpZHRoLFxuICAgIHNpemUsXG4gICAgdHlwZSxcbiAgICB2YXJpYW50XG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIGNvbnN0IHN0YXJ0SWNvbiA9IHN0YXJ0SWNvblByb3AgJiYgLyojX19QVVJFX18qL19qc3goQnV0dG9uU3RhcnRJY29uLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLnN0YXJ0SWNvbixcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgIGNoaWxkcmVuOiBzdGFydEljb25Qcm9wXG4gIH0pO1xuICBjb25zdCBlbmRJY29uID0gZW5kSWNvblByb3AgJiYgLyojX19QVVJFX18qL19qc3goQnV0dG9uRW5kSWNvbiwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5lbmRJY29uLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgY2hpbGRyZW46IGVuZEljb25Qcm9wXG4gIH0pO1xuICBjb25zdCBwb3NpdGlvbkNsYXNzTmFtZSA9IGJ1dHRvbkdyb3VwQnV0dG9uQ29udGV4dFBvc2l0aW9uQ2xhc3NOYW1lIHx8ICcnO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3hzKEJ1dHRvblJvb3QsIF9leHRlbmRzKHtcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgIGNsYXNzTmFtZTogY2xzeChjb250ZXh0UHJvcHMuY2xhc3NOYW1lLCBjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSwgcG9zaXRpb25DbGFzc05hbWUpLFxuICAgIGNvbXBvbmVudDogY29tcG9uZW50LFxuICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICBmb2N1c1JpcHBsZTogIWRpc2FibGVGb2N1c1JpcHBsZSxcbiAgICBmb2N1c1Zpc2libGVDbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5mb2N1c1Zpc2libGUsIGZvY3VzVmlzaWJsZUNsYXNzTmFtZSksXG4gICAgcmVmOiByZWYsXG4gICAgdHlwZTogdHlwZVxuICB9LCBvdGhlciwge1xuICAgIGNsYXNzZXM6IGNsYXNzZXMsXG4gICAgY2hpbGRyZW46IFtzdGFydEljb24sIGNoaWxkcmVuLCBlbmRJY29uXVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEJ1dHRvbi5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LlxuICAgKiBJdCBzdXBwb3J0cyBib3RoIGRlZmF1bHQgYW5kIGN1c3RvbSB0aGVtZSBjb2xvcnMsIHdoaWNoIGNhbiBiZSBhZGRlZCBhcyBzaG93biBpbiB0aGVcbiAgICogW3BhbGV0dGUgY3VzdG9taXphdGlvbiBndWlkZV0oaHR0cHM6Ly9tdWkuY29tL21hdGVyaWFsLXVpL2N1c3RvbWl6YXRpb24vcGFsZXR0ZS8jY3VzdG9tLWNvbG9ycykuXG4gICAqIEBkZWZhdWx0ICdwcmltYXJ5J1xuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnaW5oZXJpdCcsICdwcmltYXJ5JywgJ3NlY29uZGFyeScsICdzdWNjZXNzJywgJ2Vycm9yJywgJ2luZm8nLCAnd2FybmluZyddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgZGlzYWJsZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIG5vIGVsZXZhdGlvbiBpcyB1c2VkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZUVsZXZhdGlvbjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSAga2V5Ym9hcmQgZm9jdXMgcmlwcGxlIGlzIGRpc2FibGVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZUZvY3VzUmlwcGxlOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHJpcHBsZSBlZmZlY3QgaXMgZGlzYWJsZWQuXG4gICAqXG4gICAqIOKaoO+4jyBXaXRob3V0IGEgcmlwcGxlIHRoZXJlIGlzIG5vIHN0eWxpbmcgZm9yIDpmb2N1cy12aXNpYmxlIGJ5IGRlZmF1bHQuIEJlIHN1cmVcbiAgICogdG8gaGlnaGxpZ2h0IHRoZSBlbGVtZW50IGJ5IGFwcGx5aW5nIHNlcGFyYXRlIHN0eWxlcyB3aXRoIHRoZSBgLk11aS1mb2N1c1Zpc2libGVgIGNsYXNzLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZVJpcHBsZTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBFbGVtZW50IHBsYWNlZCBhZnRlciB0aGUgY2hpbGRyZW4uXG4gICAqL1xuICBlbmRJY29uOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGZvY3VzVmlzaWJsZUNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGJ1dHRvbiB3aWxsIHRha2UgdXAgdGhlIGZ1bGwgd2lkdGggb2YgaXRzIGNvbnRhaW5lci5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGZ1bGxXaWR0aDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgVVJMIHRvIGxpbmsgdG8gd2hlbiB0aGUgYnV0dG9uIGlzIGNsaWNrZWQuXG4gICAqIElmIGRlZmluZWQsIGFuIGBhYCBlbGVtZW50IHdpbGwgYmUgdXNlZCBhcyB0aGUgcm9vdCBub2RlLlxuICAgKi9cbiAgaHJlZjogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBzaXplIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIGBzbWFsbGAgaXMgZXF1aXZhbGVudCB0byB0aGUgZGVuc2UgYnV0dG9uIHN0eWxpbmcuXG4gICAqIEBkZWZhdWx0ICdtZWRpdW0nXG4gICAqL1xuICBzaXplOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ3NtYWxsJywgJ21lZGl1bScsICdsYXJnZSddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogRWxlbWVudCBwbGFjZWQgYmVmb3JlIHRoZSBjaGlsZHJlbi5cbiAgICovXG4gIHN0YXJ0SWNvbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICB0eXBlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydidXR0b24nLCAncmVzZXQnLCAnc3VibWl0J10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqIEBkZWZhdWx0ICd0ZXh0J1xuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydjb250YWluZWQnLCAnb3V0bGluZWQnLCAndGV4dCddKSwgUHJvcFR5cGVzLnN0cmluZ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgQnV0dG9uOyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2FyZFV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpQ2FyZCcsIHNsb3QpO1xufVxuY29uc3QgY2FyZENsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlDYXJkJywgWydyb290J10pO1xuZXhwb3J0IGRlZmF1bHQgY2FyZENsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2xhc3NOYW1lXCIsIFwicmFpc2VkXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IGNoYWluUHJvcFR5cGVzIGZyb20gJ0BtdWkvdXRpbHMvY2hhaW5Qcm9wVHlwZXMnO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCBQYXBlciBmcm9tICcuLi9QYXBlcic7XG5pbXBvcnQgeyBnZXRDYXJkVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9jYXJkQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXNcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0Q2FyZFV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuY29uc3QgQ2FyZFJvb3QgPSBzdHlsZWQoUGFwZXIsIHtcbiAgbmFtZTogJ011aUNhcmQnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLnJvb3Rcbn0pKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBvdmVyZmxvdzogJ2hpZGRlbidcbiAgfTtcbn0pO1xuY29uc3QgQ2FyZCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIENhcmQoaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aUNhcmQnXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBjbGFzc05hbWUsXG4gICAgICByYWlzZWQgPSBmYWxzZVxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgcmFpc2VkXG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChDYXJkUm9vdCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgZWxldmF0aW9uOiByYWlzZWQgPyA4IDogdW5kZWZpbmVkLFxuICAgIHJlZjogcmVmLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGVcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQ2FyZC5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNhcmQgd2lsbCB1c2UgcmFpc2VkIHN0eWxpbmcuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICByYWlzZWQ6IGNoYWluUHJvcFR5cGVzKFByb3BUeXBlcy5ib29sLCBwcm9wcyA9PiB7XG4gICAgaWYgKHByb3BzLnJhaXNlZCAmJiBwcm9wcy52YXJpYW50ID09PSAnb3V0bGluZWQnKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKCdNVUk6IENvbWJpbmluZyBgcmFpc2VkPXt0cnVlfWAgd2l0aCBgdmFyaWFudD1cIm91dGxpbmVkXCJgIGhhcyBubyBlZmZlY3QuJyk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IENhcmQ7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRDYXJkQWN0aW9uc1V0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpQ2FyZEFjdGlvbnMnLCBzbG90KTtcbn1cbmNvbnN0IGNhcmRBY3Rpb25zQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUNhcmRBY3Rpb25zJywgWydyb290JywgJ3NwYWNpbmcnXSk7XG5leHBvcnQgZGVmYXVsdCBjYXJkQWN0aW9uc0NsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiZGlzYWJsZVNwYWNpbmdcIiwgXCJjbGFzc05hbWVcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHVzZVRoZW1lUHJvcHMgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lUHJvcHMnO1xuaW1wb3J0IHsgZ2V0Q2FyZEFjdGlvbnNVdGlsaXR5Q2xhc3MgfSBmcm9tICcuL2NhcmRBY3Rpb25zQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXMsXG4gICAgZGlzYWJsZVNwYWNpbmdcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsICFkaXNhYmxlU3BhY2luZyAmJiAnc3BhY2luZyddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0Q2FyZEFjdGlvbnNVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcbmNvbnN0IENhcmRBY3Rpb25zUm9vdCA9IHN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnTXVpQ2FyZEFjdGlvbnMnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgIW93bmVyU3RhdGUuZGlzYWJsZVNwYWNpbmcgJiYgc3R5bGVzLnNwYWNpbmddO1xuICB9XG59KSgoe1xuICBvd25lclN0YXRlXG59KSA9PiBfZXh0ZW5kcyh7XG4gIGRpc3BsYXk6ICdmbGV4JyxcbiAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gIHBhZGRpbmc6IDhcbn0sICFvd25lclN0YXRlLmRpc2FibGVTcGFjaW5nICYmIHtcbiAgJyYgPiA6bm90KHN0eWxlKSB+IDpub3Qoc3R5bGUpJzoge1xuICAgIG1hcmdpbkxlZnQ6IDhcbiAgfVxufSkpO1xuY29uc3QgQ2FyZEFjdGlvbnMgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBDYXJkQWN0aW9ucyhpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpQ2FyZEFjdGlvbnMnXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBkaXNhYmxlU3BhY2luZyA9IGZhbHNlLFxuICAgICAgY2xhc3NOYW1lXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBkaXNhYmxlU3BhY2luZ1xuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goQ2FyZEFjdGlvbnNSb290LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IENhcmRBY3Rpb25zLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYWN0aW9ucyBkbyBub3QgaGF2ZSBhZGRpdGlvbmFsIG1hcmdpbi5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVTcGFjaW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IENhcmRBY3Rpb25zOyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2FyZENvbnRlbnRVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUNhcmRDb250ZW50Jywgc2xvdCk7XG59XG5jb25zdCBjYXJkQ29udGVudENsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlDYXJkQ29udGVudCcsIFsncm9vdCddKTtcbmV4cG9ydCBkZWZhdWx0IGNhcmRDb250ZW50Q2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHVzZVRoZW1lUHJvcHMgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lUHJvcHMnO1xuaW1wb3J0IHsgZ2V0Q2FyZENvbnRlbnRVdGlsaXR5Q2xhc3MgfSBmcm9tICcuL2NhcmRDb250ZW50Q2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXNcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0Q2FyZENvbnRlbnRVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcbmNvbnN0IENhcmRDb250ZW50Um9vdCA9IHN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnTXVpQ2FyZENvbnRlbnQnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLnJvb3Rcbn0pKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBwYWRkaW5nOiAxNixcbiAgICAnJjpsYXN0LWNoaWxkJzoge1xuICAgICAgcGFkZGluZ0JvdHRvbTogMjRcbiAgICB9XG4gIH07XG59KTtcbmNvbnN0IENhcmRDb250ZW50ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQ2FyZENvbnRlbnQoaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aUNhcmRDb250ZW50J1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgY2xhc3NOYW1lLFxuICAgICAgY29tcG9uZW50ID0gJ2RpdidcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGNvbXBvbmVudFxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goQ2FyZENvbnRlbnRSb290LCBfZXh0ZW5kcyh7XG4gICAgYXM6IGNvbXBvbmVudCxcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQ2FyZENvbnRlbnQucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IENhcmRDb250ZW50OyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2FyZEhlYWRlclV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpQ2FyZEhlYWRlcicsIHNsb3QpO1xufVxuY29uc3QgY2FyZEhlYWRlckNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlDYXJkSGVhZGVyJywgWydyb290JywgJ2F2YXRhcicsICdhY3Rpb24nLCAnY29udGVudCcsICd0aXRsZScsICdzdWJoZWFkZXInXSk7XG5leHBvcnQgZGVmYXVsdCBjYXJkSGVhZGVyQ2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJhY3Rpb25cIiwgXCJhdmF0YXJcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJkaXNhYmxlVHlwb2dyYXBoeVwiLCBcInN1YmhlYWRlclwiLCBcInN1YmhlYWRlclR5cG9ncmFwaHlQcm9wc1wiLCBcInRpdGxlXCIsIFwidGl0bGVUeXBvZ3JhcGh5UHJvcHNcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgVHlwb2dyYXBoeSBmcm9tICcuLi9UeXBvZ3JhcGh5JztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgY2FyZEhlYWRlckNsYXNzZXMsIHsgZ2V0Q2FyZEhlYWRlclV0aWxpdHlDbGFzcyB9IGZyb20gJy4vY2FyZEhlYWRlckNsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnXSxcbiAgICBhdmF0YXI6IFsnYXZhdGFyJ10sXG4gICAgYWN0aW9uOiBbJ2FjdGlvbiddLFxuICAgIGNvbnRlbnQ6IFsnY29udGVudCddLFxuICAgIHRpdGxlOiBbJ3RpdGxlJ10sXG4gICAgc3ViaGVhZGVyOiBbJ3N1YmhlYWRlciddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0Q2FyZEhlYWRlclV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuY29uc3QgQ2FyZEhlYWRlclJvb3QgPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aUNhcmRIZWFkZXInLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gX2V4dGVuZHMoe1xuICAgIFtgJiAuJHtjYXJkSGVhZGVyQ2xhc3Nlcy50aXRsZX1gXTogc3R5bGVzLnRpdGxlLFxuICAgIFtgJiAuJHtjYXJkSGVhZGVyQ2xhc3Nlcy5zdWJoZWFkZXJ9YF06IHN0eWxlcy5zdWJoZWFkZXJcbiAgfSwgc3R5bGVzLnJvb3QpXG59KSh7XG4gIGRpc3BsYXk6ICdmbGV4JyxcbiAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gIHBhZGRpbmc6IDE2XG59KTtcbmNvbnN0IENhcmRIZWFkZXJBdmF0YXIgPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aUNhcmRIZWFkZXInLFxuICBzbG90OiAnQXZhdGFyJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMuYXZhdGFyXG59KSh7XG4gIGRpc3BsYXk6ICdmbGV4JyxcbiAgZmxleDogJzAgMCBhdXRvJyxcbiAgbWFyZ2luUmlnaHQ6IDE2XG59KTtcbmNvbnN0IENhcmRIZWFkZXJBY3Rpb24gPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aUNhcmRIZWFkZXInLFxuICBzbG90OiAnQWN0aW9uJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMuYWN0aW9uXG59KSh7XG4gIGZsZXg6ICcwIDAgYXV0bycsXG4gIGFsaWduU2VsZjogJ2ZsZXgtc3RhcnQnLFxuICBtYXJnaW5Ub3A6IC00LFxuICBtYXJnaW5SaWdodDogLTgsXG4gIG1hcmdpbkJvdHRvbTogLTRcbn0pO1xuY29uc3QgQ2FyZEhlYWRlckNvbnRlbnQgPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aUNhcmRIZWFkZXInLFxuICBzbG90OiAnQ29udGVudCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLmNvbnRlbnRcbn0pKHtcbiAgZmxleDogJzEgMSBhdXRvJ1xufSk7XG5jb25zdCBDYXJkSGVhZGVyID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQ2FyZEhlYWRlcihpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpQ2FyZEhlYWRlcidcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGFjdGlvbixcbiAgICAgIGF2YXRhcixcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNvbXBvbmVudCA9ICdkaXYnLFxuICAgICAgZGlzYWJsZVR5cG9ncmFwaHkgPSBmYWxzZSxcbiAgICAgIHN1YmhlYWRlcjogc3ViaGVhZGVyUHJvcCxcbiAgICAgIHN1YmhlYWRlclR5cG9ncmFwaHlQcm9wcyxcbiAgICAgIHRpdGxlOiB0aXRsZVByb3AsXG4gICAgICB0aXRsZVR5cG9ncmFwaHlQcm9wc1xuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY29tcG9uZW50LFxuICAgIGRpc2FibGVUeXBvZ3JhcGh5XG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIGxldCB0aXRsZSA9IHRpdGxlUHJvcDtcbiAgaWYgKHRpdGxlICE9IG51bGwgJiYgdGl0bGUudHlwZSAhPT0gVHlwb2dyYXBoeSAmJiAhZGlzYWJsZVR5cG9ncmFwaHkpIHtcbiAgICB0aXRsZSA9IC8qI19fUFVSRV9fKi9fanN4KFR5cG9ncmFwaHksIF9leHRlbmRzKHtcbiAgICAgIHZhcmlhbnQ6IGF2YXRhciA/ICdib2R5MicgOiAnaDUnLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLnRpdGxlLFxuICAgICAgY29tcG9uZW50OiBcInNwYW5cIixcbiAgICAgIGRpc3BsYXk6IFwiYmxvY2tcIlxuICAgIH0sIHRpdGxlVHlwb2dyYXBoeVByb3BzLCB7XG4gICAgICBjaGlsZHJlbjogdGl0bGVcbiAgICB9KSk7XG4gIH1cbiAgbGV0IHN1YmhlYWRlciA9IHN1YmhlYWRlclByb3A7XG4gIGlmIChzdWJoZWFkZXIgIT0gbnVsbCAmJiBzdWJoZWFkZXIudHlwZSAhPT0gVHlwb2dyYXBoeSAmJiAhZGlzYWJsZVR5cG9ncmFwaHkpIHtcbiAgICBzdWJoZWFkZXIgPSAvKiNfX1BVUkVfXyovX2pzeChUeXBvZ3JhcGh5LCBfZXh0ZW5kcyh7XG4gICAgICB2YXJpYW50OiBhdmF0YXIgPyAnYm9keTInIDogJ2JvZHkxJyxcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5zdWJoZWFkZXIsXG4gICAgICBjb2xvcjogXCJ0ZXh0LnNlY29uZGFyeVwiLFxuICAgICAgY29tcG9uZW50OiBcInNwYW5cIixcbiAgICAgIGRpc3BsYXk6IFwiYmxvY2tcIlxuICAgIH0sIHN1YmhlYWRlclR5cG9ncmFwaHlQcm9wcywge1xuICAgICAgY2hpbGRyZW46IHN1YmhlYWRlclxuICAgIH0pKTtcbiAgfVxuICByZXR1cm4gLyojX19QVVJFX18qL19qc3hzKENhcmRIZWFkZXJSb290LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICBhczogY29tcG9uZW50LFxuICAgIHJlZjogcmVmLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGVcbiAgfSwgb3RoZXIsIHtcbiAgICBjaGlsZHJlbjogW2F2YXRhciAmJiAvKiNfX1BVUkVfXyovX2pzeChDYXJkSGVhZGVyQXZhdGFyLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMuYXZhdGFyLFxuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgIGNoaWxkcmVuOiBhdmF0YXJcbiAgICB9KSwgLyojX19QVVJFX18qL19qc3hzKENhcmRIZWFkZXJDb250ZW50LCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMuY29udGVudCxcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgICBjaGlsZHJlbjogW3RpdGxlLCBzdWJoZWFkZXJdXG4gICAgfSksIGFjdGlvbiAmJiAvKiNfX1BVUkVfXyovX2pzeChDYXJkSGVhZGVyQWN0aW9uLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMuYWN0aW9uLFxuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgIGNoaWxkcmVuOiBhY3Rpb25cbiAgICB9KV1cbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBDYXJkSGVhZGVyLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIFRoZSBhY3Rpb24gdG8gZGlzcGxheSBpbiB0aGUgY2FyZCBoZWFkZXIuXG4gICAqL1xuICBhY3Rpb246IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogVGhlIEF2YXRhciBlbGVtZW50IHRvIGRpc3BsYXkuXG4gICAqL1xuICBhdmF0YXI6IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogSWYgYHRydWVgLCBgc3ViaGVhZGVyYCBhbmQgYHRpdGxlYCB3b24ndCBiZSB3cmFwcGVkIGJ5IGEgVHlwb2dyYXBoeSBjb21wb25lbnQuXG4gICAqIFRoaXMgY2FuIGJlIHVzZWZ1bCB0byByZW5kZXIgYW4gYWx0ZXJuYXRpdmUgVHlwb2dyYXBoeSB2YXJpYW50IGJ5IHdyYXBwaW5nXG4gICAqIHRoZSBgdGl0bGVgIHRleHQsIGFuZCBvcHRpb25hbCBgc3ViaGVhZGVyYCB0ZXh0XG4gICAqIHdpdGggdGhlIFR5cG9ncmFwaHkgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZVR5cG9ncmFwaHk6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIHN1YmhlYWRlcjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBUaGVzZSBwcm9wcyB3aWxsIGJlIGZvcndhcmRlZCB0byB0aGUgc3ViaGVhZGVyXG4gICAqIChhcyBsb25nIGFzIGRpc2FibGVUeXBvZ3JhcGh5IGlzIG5vdCBgdHJ1ZWApLlxuICAgKi9cbiAgc3ViaGVhZGVyVHlwb2dyYXBoeVByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIHRpdGxlOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIFRoZXNlIHByb3BzIHdpbGwgYmUgZm9yd2FyZGVkIHRvIHRoZSB0aXRsZVxuICAgKiAoYXMgbG9uZyBhcyBkaXNhYmxlVHlwb2dyYXBoeSBpcyBub3QgYHRydWVgKS5cbiAgICovXG4gIHRpdGxlVHlwb2dyYXBoeVByb3BzOiBQcm9wVHlwZXMub2JqZWN0XG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgQ2FyZEhlYWRlcjsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldENpcmN1bGFyUHJvZ3Jlc3NVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUNpcmN1bGFyUHJvZ3Jlc3MnLCBzbG90KTtcbn1cbmNvbnN0IGNpcmN1bGFyUHJvZ3Jlc3NDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpQ2lyY3VsYXJQcm9ncmVzcycsIFsncm9vdCcsICdkZXRlcm1pbmF0ZScsICdpbmRldGVybWluYXRlJywgJ2NvbG9yUHJpbWFyeScsICdjb2xvclNlY29uZGFyeScsICdzdmcnLCAnY2lyY2xlJywgJ2NpcmNsZURldGVybWluYXRlJywgJ2NpcmNsZUluZGV0ZXJtaW5hdGUnLCAnY2lyY2xlRGlzYWJsZVNocmluayddKTtcbmV4cG9ydCBkZWZhdWx0IGNpcmN1bGFyUHJvZ3Jlc3NDbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNsYXNzTmFtZVwiLCBcImNvbG9yXCIsIFwiZGlzYWJsZVNocmlua1wiLCBcInNpemVcIiwgXCJzdHlsZVwiLCBcInRoaWNrbmVzc1wiLCBcInZhbHVlXCIsIFwidmFyaWFudFwiXTtcbmxldCBfID0gdCA9PiB0LFxuICBfdCxcbiAgX3QyLFxuICBfdDMsXG4gIF90NDtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBjaGFpblByb3BUeXBlcyBmcm9tICdAbXVpL3V0aWxzL2NoYWluUHJvcFR5cGVzJztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCB7IGtleWZyYW1lcywgY3NzIH0gZnJvbSAnQG11aS9zeXN0ZW0nO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHsgZ2V0Q2lyY3VsYXJQcm9ncmVzc1V0aWxpdHlDbGFzcyB9IGZyb20gJy4vY2lyY3VsYXJQcm9ncmVzc0NsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IFNJWkUgPSA0NDtcbmNvbnN0IGNpcmN1bGFyUm90YXRlS2V5ZnJhbWUgPSBrZXlmcmFtZXMoX3QgfHwgKF90ID0gX2BcbiAgMCUge1xuICAgIHRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xuICB9XG5cbiAgMTAwJSB7XG4gICAgdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKTtcbiAgfVxuYCkpO1xuY29uc3QgY2lyY3VsYXJEYXNoS2V5ZnJhbWUgPSBrZXlmcmFtZXMoX3QyIHx8IChfdDIgPSBfYFxuICAwJSB7XG4gICAgc3Ryb2tlLWRhc2hhcnJheTogMXB4LCAyMDBweDtcbiAgICBzdHJva2UtZGFzaG9mZnNldDogMDtcbiAgfVxuXG4gIDUwJSB7XG4gICAgc3Ryb2tlLWRhc2hhcnJheTogMTAwcHgsIDIwMHB4O1xuICAgIHN0cm9rZS1kYXNob2Zmc2V0OiAtMTVweDtcbiAgfVxuXG4gIDEwMCUge1xuICAgIHN0cm9rZS1kYXNoYXJyYXk6IDEwMHB4LCAyMDBweDtcbiAgICBzdHJva2UtZGFzaG9mZnNldDogLTEyNXB4O1xuICB9XG5gKSk7XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3NlcyxcbiAgICB2YXJpYW50LFxuICAgIGNvbG9yLFxuICAgIGRpc2FibGVTaHJpbmtcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIHZhcmlhbnQsIGBjb2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YF0sXG4gICAgc3ZnOiBbJ3N2ZyddLFxuICAgIGNpcmNsZTogWydjaXJjbGUnLCBgY2lyY2xlJHtjYXBpdGFsaXplKHZhcmlhbnQpfWAsIGRpc2FibGVTaHJpbmsgJiYgJ2NpcmNsZURpc2FibGVTaHJpbmsnXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldENpcmN1bGFyUHJvZ3Jlc3NVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcbmNvbnN0IENpcmN1bGFyUHJvZ3Jlc3NSb290ID0gc3R5bGVkKCdzcGFuJywge1xuICBuYW1lOiAnTXVpQ2lyY3VsYXJQcm9ncmVzcycsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5yb290LCBzdHlsZXNbb3duZXJTdGF0ZS52YXJpYW50XSwgc3R5bGVzW2Bjb2xvciR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLmNvbG9yKX1gXV07XG4gIH1cbn0pKCh7XG4gIG93bmVyU3RhdGUsXG4gIHRoZW1lXG59KSA9PiBfZXh0ZW5kcyh7XG4gIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snXG59LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdkZXRlcm1pbmF0ZScgJiYge1xuICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ3RyYW5zZm9ybScpXG59LCBvd25lclN0YXRlLmNvbG9yICE9PSAnaW5oZXJpdCcgJiYge1xuICBjb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpblxufSksICh7XG4gIG93bmVyU3RhdGVcbn0pID0+IG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2luZGV0ZXJtaW5hdGUnICYmIGNzcyhfdDMgfHwgKF90MyA9IF9gXG4gICAgICBhbmltYXRpb246ICR7MH0gMS40cyBsaW5lYXIgaW5maW5pdGU7XG4gICAgYCksIGNpcmN1bGFyUm90YXRlS2V5ZnJhbWUpKTtcbmNvbnN0IENpcmN1bGFyUHJvZ3Jlc3NTVkcgPSBzdHlsZWQoJ3N2ZycsIHtcbiAgbmFtZTogJ011aUNpcmN1bGFyUHJvZ3Jlc3MnLFxuICBzbG90OiAnU3ZnJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMuc3ZnXG59KSh7XG4gIGRpc3BsYXk6ICdibG9jaycgLy8gS2VlcHMgdGhlIHByb2dyZXNzIGNlbnRlcmVkXG59KTtcbmNvbnN0IENpcmN1bGFyUHJvZ3Jlc3NDaXJjbGUgPSBzdHlsZWQoJ2NpcmNsZScsIHtcbiAgbmFtZTogJ011aUNpcmN1bGFyUHJvZ3Jlc3MnLFxuICBzbG90OiAnQ2lyY2xlJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5jaXJjbGUsIHN0eWxlc1tgY2lyY2xlJHtjYXBpdGFsaXplKG93bmVyU3RhdGUudmFyaWFudCl9YF0sIG93bmVyU3RhdGUuZGlzYWJsZVNocmluayAmJiBzdHlsZXMuY2lyY2xlRGlzYWJsZVNocmlua107XG4gIH1cbn0pKCh7XG4gIG93bmVyU3RhdGUsXG4gIHRoZW1lXG59KSA9PiBfZXh0ZW5kcyh7XG4gIHN0cm9rZTogJ2N1cnJlbnRDb2xvcidcbn0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2RldGVybWluYXRlJyAmJiB7XG4gIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnc3Ryb2tlLWRhc2hvZmZzZXQnKVxufSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnaW5kZXRlcm1pbmF0ZScgJiYge1xuICAvLyBTb21lIGRlZmF1bHQgdmFsdWUgdGhhdCBsb29rcyBmaW5lIHdhaXRpbmcgZm9yIHRoZSBhbmltYXRpb24gdG8ga2lja3MgaW4uXG4gIHN0cm9rZURhc2hhcnJheTogJzgwcHgsIDIwMHB4JyxcbiAgc3Ryb2tlRGFzaG9mZnNldDogMCAvLyBBZGQgdGhlIHVuaXQgdG8gZml4IGEgRWRnZSAxNiBhbmQgYmVsb3cgYnVnLlxufSksICh7XG4gIG93bmVyU3RhdGVcbn0pID0+IG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2luZGV0ZXJtaW5hdGUnICYmICFvd25lclN0YXRlLmRpc2FibGVTaHJpbmsgJiYgY3NzKF90NCB8fCAoX3Q0ID0gX2BcbiAgICAgIGFuaW1hdGlvbjogJHswfSAxLjRzIGVhc2UtaW4tb3V0IGluZmluaXRlO1xuICAgIGApLCBjaXJjdWxhckRhc2hLZXlmcmFtZSkpO1xuXG4vKipcbiAqICMjIEFSSUFcbiAqXG4gKiBJZiB0aGUgcHJvZ3Jlc3MgYmFyIGlzIGRlc2NyaWJpbmcgdGhlIGxvYWRpbmcgcHJvZ3Jlc3Mgb2YgYSBwYXJ0aWN1bGFyIHJlZ2lvbiBvZiBhIHBhZ2UsXG4gKiB5b3Ugc2hvdWxkIHVzZSBgYXJpYS1kZXNjcmliZWRieWAgdG8gcG9pbnQgdG8gdGhlIHByb2dyZXNzIGJhciwgYW5kIHNldCB0aGUgYGFyaWEtYnVzeWBcbiAqIGF0dHJpYnV0ZSB0byBgdHJ1ZWAgb24gdGhhdCByZWdpb24gdW50aWwgaXQgaGFzIGZpbmlzaGVkIGxvYWRpbmcuXG4gKi9cbmNvbnN0IENpcmN1bGFyUHJvZ3Jlc3MgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBDaXJjdWxhclByb2dyZXNzKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlDaXJjdWxhclByb2dyZXNzJ1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgY2xhc3NOYW1lLFxuICAgICAgY29sb3IgPSAncHJpbWFyeScsXG4gICAgICBkaXNhYmxlU2hyaW5rID0gZmFsc2UsXG4gICAgICBzaXplID0gNDAsXG4gICAgICBzdHlsZSxcbiAgICAgIHRoaWNrbmVzcyA9IDMuNixcbiAgICAgIHZhbHVlID0gMCxcbiAgICAgIHZhcmlhbnQgPSAnaW5kZXRlcm1pbmF0ZSdcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGNvbG9yLFxuICAgIGRpc2FibGVTaHJpbmssXG4gICAgc2l6ZSxcbiAgICB0aGlja25lc3MsXG4gICAgdmFsdWUsXG4gICAgdmFyaWFudFxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICBjb25zdCBjaXJjbGVTdHlsZSA9IHt9O1xuICBjb25zdCByb290U3R5bGUgPSB7fTtcbiAgY29uc3Qgcm9vdFByb3BzID0ge307XG4gIGlmICh2YXJpYW50ID09PSAnZGV0ZXJtaW5hdGUnKSB7XG4gICAgY29uc3QgY2lyY3VtZmVyZW5jZSA9IDIgKiBNYXRoLlBJICogKChTSVpFIC0gdGhpY2tuZXNzKSAvIDIpO1xuICAgIGNpcmNsZVN0eWxlLnN0cm9rZURhc2hhcnJheSA9IGNpcmN1bWZlcmVuY2UudG9GaXhlZCgzKTtcbiAgICByb290UHJvcHNbJ2FyaWEtdmFsdWVub3cnXSA9IE1hdGgucm91bmQodmFsdWUpO1xuICAgIGNpcmNsZVN0eWxlLnN0cm9rZURhc2hvZmZzZXQgPSBgJHsoKDEwMCAtIHZhbHVlKSAvIDEwMCAqIGNpcmN1bWZlcmVuY2UpLnRvRml4ZWQoMyl9cHhgO1xuICAgIHJvb3RTdHlsZS50cmFuc2Zvcm0gPSAncm90YXRlKC05MGRlZyknO1xuICB9XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChDaXJjdWxhclByb2dyZXNzUm9vdCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgc3R5bGU6IF9leHRlbmRzKHtcbiAgICAgIHdpZHRoOiBzaXplLFxuICAgICAgaGVpZ2h0OiBzaXplXG4gICAgfSwgcm9vdFN0eWxlLCBzdHlsZSksXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICByZWY6IHJlZixcbiAgICByb2xlOiBcInByb2dyZXNzYmFyXCJcbiAgfSwgcm9vdFByb3BzLCBvdGhlciwge1xuICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeChDaXJjdWxhclByb2dyZXNzU1ZHLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMuc3ZnLFxuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgIHZpZXdCb3g6IGAke1NJWkUgLyAyfSAke1NJWkUgLyAyfSAke1NJWkV9ICR7U0laRX1gLFxuICAgICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9fanN4KENpcmN1bGFyUHJvZ3Jlc3NDaXJjbGUsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLmNpcmNsZSxcbiAgICAgICAgc3R5bGU6IGNpcmNsZVN0eWxlLFxuICAgICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgICBjeDogU0laRSxcbiAgICAgICAgY3k6IFNJWkUsXG4gICAgICAgIHI6IChTSVpFIC0gdGhpY2tuZXNzKSAvIDIsXG4gICAgICAgIGZpbGw6IFwibm9uZVwiLFxuICAgICAgICBzdHJva2VXaWR0aDogdGhpY2tuZXNzXG4gICAgICB9KVxuICAgIH0pXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQ2lyY3VsYXJQcm9ncmVzcy5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIEl0IHN1cHBvcnRzIGJvdGggZGVmYXVsdCBhbmQgY3VzdG9tIHRoZW1lIGNvbG9ycywgd2hpY2ggY2FuIGJlIGFkZGVkIGFzIHNob3duIGluIHRoZVxuICAgKiBbcGFsZXR0ZSBjdXN0b21pemF0aW9uIGd1aWRlXShodHRwczovL211aS5jb20vbWF0ZXJpYWwtdWkvY3VzdG9taXphdGlvbi9wYWxldHRlLyNjdXN0b20tY29sb3JzKS5cbiAgICogQGRlZmF1bHQgJ3ByaW1hcnknXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydpbmhlcml0JywgJ3ByaW1hcnknLCAnc2Vjb25kYXJ5JywgJ2Vycm9yJywgJ2luZm8nLCAnc3VjY2VzcycsICd3YXJuaW5nJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBzaHJpbmsgYW5pbWF0aW9uIGlzIGRpc2FibGVkLlxuICAgKiBUaGlzIG9ubHkgd29ya3MgaWYgdmFyaWFudCBpcyBgaW5kZXRlcm1pbmF0ZWAuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlU2hyaW5rOiBjaGFpblByb3BUeXBlcyhQcm9wVHlwZXMuYm9vbCwgcHJvcHMgPT4ge1xuICAgIGlmIChwcm9wcy5kaXNhYmxlU2hyaW5rICYmIHByb3BzLnZhcmlhbnQgJiYgcHJvcHMudmFyaWFudCAhPT0gJ2luZGV0ZXJtaW5hdGUnKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKCdNVUk6IFlvdSBoYXZlIHByb3ZpZGVkIHRoZSBgZGlzYWJsZVNocmlua2AgcHJvcCAnICsgJ3dpdGggYSB2YXJpYW50IG90aGVyIHRoYW4gYGluZGV0ZXJtaW5hdGVgLiBUaGlzIHdpbGwgaGF2ZSBubyBlZmZlY3QuJyk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBzaXplIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIElmIHVzaW5nIGEgbnVtYmVyLCB0aGUgcGl4ZWwgdW5pdCBpcyBhc3N1bWVkLlxuICAgKiBJZiB1c2luZyBhIHN0cmluZywgeW91IG5lZWQgdG8gcHJvdmlkZSB0aGUgQ1NTIHVuaXQsIGZvciBleGFtcGxlICczcmVtJy5cbiAgICogQGRlZmF1bHQgNDBcbiAgICovXG4gIHNpemU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogVGhlIHRoaWNrbmVzcyBvZiB0aGUgY2lyY2xlLlxuICAgKiBAZGVmYXVsdCAzLjZcbiAgICovXG4gIHRoaWNrbmVzczogUHJvcFR5cGVzLm51bWJlcixcbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSBvZiB0aGUgcHJvZ3Jlc3MgaW5kaWNhdG9yIGZvciB0aGUgZGV0ZXJtaW5hdGUgdmFyaWFudC5cbiAgICogVmFsdWUgYmV0d2VlbiAwIGFuZCAxMDAuXG4gICAqIEBkZWZhdWx0IDBcbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMubnVtYmVyLFxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKiBVc2UgaW5kZXRlcm1pbmF0ZSB3aGVuIHRoZXJlIGlzIG5vIHByb2dyZXNzIHZhbHVlLlxuICAgKiBAZGVmYXVsdCAnaW5kZXRlcm1pbmF0ZSdcbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ2RldGVybWluYXRlJywgJ2luZGV0ZXJtaW5hdGUnXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBDaXJjdWxhclByb2dyZXNzOyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0TW9kYWxVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aU1vZGFsJywgc2xvdCk7XG59XG5jb25zdCBtb2RhbENsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlNb2RhbCcsIFsncm9vdCcsICdoaWRkZW4nLCAnYmFja2Ryb3AnXSk7XG5leHBvcnQgZGVmYXVsdCBtb2RhbENsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiQmFja2Ryb3BDb21wb25lbnRcIiwgXCJCYWNrZHJvcFByb3BzXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNsb3NlQWZ0ZXJUcmFuc2l0aW9uXCIsIFwiY2hpbGRyZW5cIiwgXCJjb250YWluZXJcIiwgXCJjb21wb25lbnRcIiwgXCJjb21wb25lbnRzXCIsIFwiY29tcG9uZW50c1Byb3BzXCIsIFwiZGlzYWJsZUF1dG9Gb2N1c1wiLCBcImRpc2FibGVFbmZvcmNlRm9jdXNcIiwgXCJkaXNhYmxlRXNjYXBlS2V5RG93blwiLCBcImRpc2FibGVQb3J0YWxcIiwgXCJkaXNhYmxlUmVzdG9yZUZvY3VzXCIsIFwiZGlzYWJsZVNjcm9sbExvY2tcIiwgXCJoaWRlQmFja2Ryb3BcIiwgXCJrZWVwTW91bnRlZFwiLCBcIm9uQmFja2Ryb3BDbGlja1wiLCBcIm9uQ2xvc2VcIiwgXCJvblRyYW5zaXRpb25FbnRlclwiLCBcIm9uVHJhbnNpdGlvbkV4aXRlZFwiLCBcIm9wZW5cIiwgXCJzbG90UHJvcHNcIiwgXCJzbG90c1wiLCBcInRoZW1lXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IEhUTUxFbGVtZW50VHlwZSBmcm9tICdAbXVpL3V0aWxzL0hUTUxFbGVtZW50VHlwZSc7XG5pbXBvcnQgZWxlbWVudEFjY2VwdGluZ1JlZiBmcm9tICdAbXVpL3V0aWxzL2VsZW1lbnRBY2NlcHRpbmdSZWYnO1xuaW1wb3J0IHsgdXNlU2xvdFByb3BzIH0gZnJvbSAnQG11aS9iYXNlL3V0aWxzJztcbmltcG9ydCB7IHVuc3RhYmxlX3VzZU1vZGFsIGFzIHVzZU1vZGFsIH0gZnJvbSAnQG11aS9iYXNlL3Vuc3RhYmxlX3VzZU1vZGFsJztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCBGb2N1c1RyYXAgZnJvbSAnLi4vVW5zdGFibGVfVHJhcEZvY3VzJztcbmltcG9ydCBQb3J0YWwgZnJvbSAnLi4vUG9ydGFsJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgQmFja2Ryb3AgZnJvbSAnLi4vQmFja2Ryb3AnO1xuaW1wb3J0IHsgZ2V0TW9kYWxVdGlsaXR5Q2xhc3MgfSBmcm9tICcuL21vZGFsQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIG9wZW4sXG4gICAgZXhpdGVkLFxuICAgIGNsYXNzZXNcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsICFvcGVuICYmIGV4aXRlZCAmJiAnaGlkZGVuJ10sXG4gICAgYmFja2Ryb3A6IFsnYmFja2Ryb3AnXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldE1vZGFsVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBNb2RhbFJvb3QgPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aU1vZGFsJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLnJvb3QsICFvd25lclN0YXRlLm9wZW4gJiYgb3duZXJTdGF0ZS5leGl0ZWQgJiYgc3R5bGVzLmhpZGRlbl07XG4gIH1cbn0pKCh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiBfZXh0ZW5kcyh7XG4gIHBvc2l0aW9uOiAnZml4ZWQnLFxuICB6SW5kZXg6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS56SW5kZXgubW9kYWwsXG4gIHJpZ2h0OiAwLFxuICBib3R0b206IDAsXG4gIHRvcDogMCxcbiAgbGVmdDogMFxufSwgIW93bmVyU3RhdGUub3BlbiAmJiBvd25lclN0YXRlLmV4aXRlZCAmJiB7XG4gIHZpc2liaWxpdHk6ICdoaWRkZW4nXG59KSk7XG5jb25zdCBNb2RhbEJhY2tkcm9wID0gc3R5bGVkKEJhY2tkcm9wLCB7XG4gIG5hbWU6ICdNdWlNb2RhbCcsXG4gIHNsb3Q6ICdCYWNrZHJvcCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIHJldHVybiBzdHlsZXMuYmFja2Ryb3A7XG4gIH1cbn0pKHtcbiAgekluZGV4OiAtMVxufSk7XG5cbi8qKlxuICogTW9kYWwgaXMgYSBsb3dlci1sZXZlbCBjb25zdHJ1Y3QgdGhhdCBpcyBsZXZlcmFnZWQgYnkgdGhlIGZvbGxvd2luZyBjb21wb25lbnRzOlxuICpcbiAqIC0gW0RpYWxvZ10oL21hdGVyaWFsLXVpL2FwaS9kaWFsb2cvKVxuICogLSBbRHJhd2VyXSgvbWF0ZXJpYWwtdWkvYXBpL2RyYXdlci8pXG4gKiAtIFtNZW51XSgvbWF0ZXJpYWwtdWkvYXBpL21lbnUvKVxuICogLSBbUG9wb3Zlcl0oL21hdGVyaWFsLXVpL2FwaS9wb3BvdmVyLylcbiAqXG4gKiBJZiB5b3UgYXJlIGNyZWF0aW5nIGEgbW9kYWwgZGlhbG9nLCB5b3UgcHJvYmFibHkgd2FudCB0byB1c2UgdGhlIFtEaWFsb2ddKC9tYXRlcmlhbC11aS9hcGkvZGlhbG9nLykgY29tcG9uZW50XG4gKiByYXRoZXIgdGhhbiBkaXJlY3RseSB1c2luZyBNb2RhbC5cbiAqXG4gKiBUaGlzIGNvbXBvbmVudCBzaGFyZXMgbWFueSBjb25jZXB0cyB3aXRoIFtyZWFjdC1vdmVybGF5c10oaHR0cHM6Ly9yZWFjdC1ib290c3RyYXAuZ2l0aHViLmlvL3JlYWN0LW92ZXJsYXlzLyNtb2RhbHMpLlxuICovXG5jb25zdCBNb2RhbCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIE1vZGFsKGluUHJvcHMsIHJlZikge1xuICB2YXIgX3JlZiwgX3Nsb3RzJHJvb3QsIF9yZWYyLCBfc2xvdHMkYmFja2Ryb3AsIF9zbG90UHJvcHMkcm9vdCwgX3Nsb3RQcm9wcyRiYWNrZHJvcDtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBuYW1lOiAnTXVpTW9kYWwnLFxuICAgIHByb3BzOiBpblByb3BzXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBCYWNrZHJvcENvbXBvbmVudCA9IE1vZGFsQmFja2Ryb3AsXG4gICAgICBCYWNrZHJvcFByb3BzLFxuICAgICAgY2xhc3NOYW1lLFxuICAgICAgY2xvc2VBZnRlclRyYW5zaXRpb24gPSBmYWxzZSxcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgY29udGFpbmVyLFxuICAgICAgY29tcG9uZW50LFxuICAgICAgY29tcG9uZW50cyA9IHt9LFxuICAgICAgY29tcG9uZW50c1Byb3BzID0ge30sXG4gICAgICBkaXNhYmxlQXV0b0ZvY3VzID0gZmFsc2UsXG4gICAgICBkaXNhYmxlRW5mb3JjZUZvY3VzID0gZmFsc2UsXG4gICAgICBkaXNhYmxlRXNjYXBlS2V5RG93biA9IGZhbHNlLFxuICAgICAgZGlzYWJsZVBvcnRhbCA9IGZhbHNlLFxuICAgICAgZGlzYWJsZVJlc3RvcmVGb2N1cyA9IGZhbHNlLFxuICAgICAgZGlzYWJsZVNjcm9sbExvY2sgPSBmYWxzZSxcbiAgICAgIGhpZGVCYWNrZHJvcCA9IGZhbHNlLFxuICAgICAga2VlcE1vdW50ZWQgPSBmYWxzZSxcbiAgICAgIG9uQmFja2Ryb3BDbGljayxcbiAgICAgIG9wZW4sXG4gICAgICBzbG90UHJvcHMsXG4gICAgICBzbG90c1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L3Byb3AtdHlwZXNcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3QgcHJvcHNXaXRoRGVmYXVsdHMgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjbG9zZUFmdGVyVHJhbnNpdGlvbixcbiAgICBkaXNhYmxlQXV0b0ZvY3VzLFxuICAgIGRpc2FibGVFbmZvcmNlRm9jdXMsXG4gICAgZGlzYWJsZUVzY2FwZUtleURvd24sXG4gICAgZGlzYWJsZVBvcnRhbCxcbiAgICBkaXNhYmxlUmVzdG9yZUZvY3VzLFxuICAgIGRpc2FibGVTY3JvbGxMb2NrLFxuICAgIGhpZGVCYWNrZHJvcCxcbiAgICBrZWVwTW91bnRlZFxuICB9KTtcbiAgY29uc3Qge1xuICAgIGdldFJvb3RQcm9wcyxcbiAgICBnZXRCYWNrZHJvcFByb3BzLFxuICAgIGdldFRyYW5zaXRpb25Qcm9wcyxcbiAgICBwb3J0YWxSZWYsXG4gICAgaXNUb3BNb2RhbCxcbiAgICBleGl0ZWQsXG4gICAgaGFzVHJhbnNpdGlvblxuICB9ID0gdXNlTW9kYWwoX2V4dGVuZHMoe30sIHByb3BzV2l0aERlZmF1bHRzLCB7XG4gICAgcm9vdFJlZjogcmVmXG4gIH0pKTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wc1dpdGhEZWZhdWx0cywge1xuICAgIGV4aXRlZFxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICBjb25zdCBjaGlsZFByb3BzID0ge307XG4gIGlmIChjaGlsZHJlbi5wcm9wcy50YWJJbmRleCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgY2hpbGRQcm9wcy50YWJJbmRleCA9ICctMSc7XG4gIH1cblxuICAvLyBJdCdzIGEgVHJhbnNpdGlvbiBsaWtlIGNvbXBvbmVudFxuICBpZiAoaGFzVHJhbnNpdGlvbikge1xuICAgIGNvbnN0IHtcbiAgICAgIG9uRW50ZXIsXG4gICAgICBvbkV4aXRlZFxuICAgIH0gPSBnZXRUcmFuc2l0aW9uUHJvcHMoKTtcbiAgICBjaGlsZFByb3BzLm9uRW50ZXIgPSBvbkVudGVyO1xuICAgIGNoaWxkUHJvcHMub25FeGl0ZWQgPSBvbkV4aXRlZDtcbiAgfVxuICBjb25zdCBSb290U2xvdCA9IChfcmVmID0gKF9zbG90cyRyb290ID0gc2xvdHMgPT0gbnVsbCA/IHZvaWQgMCA6IHNsb3RzLnJvb3QpICE9IG51bGwgPyBfc2xvdHMkcm9vdCA6IGNvbXBvbmVudHMuUm9vdCkgIT0gbnVsbCA/IF9yZWYgOiBNb2RhbFJvb3Q7XG4gIGNvbnN0IEJhY2tkcm9wU2xvdCA9IChfcmVmMiA9IChfc2xvdHMkYmFja2Ryb3AgPSBzbG90cyA9PSBudWxsID8gdm9pZCAwIDogc2xvdHMuYmFja2Ryb3ApICE9IG51bGwgPyBfc2xvdHMkYmFja2Ryb3AgOiBjb21wb25lbnRzLkJhY2tkcm9wKSAhPSBudWxsID8gX3JlZjIgOiBCYWNrZHJvcENvbXBvbmVudDtcbiAgY29uc3Qgcm9vdFNsb3RQcm9wcyA9IChfc2xvdFByb3BzJHJvb3QgPSBzbG90UHJvcHMgPT0gbnVsbCA/IHZvaWQgMCA6IHNsb3RQcm9wcy5yb290KSAhPSBudWxsID8gX3Nsb3RQcm9wcyRyb290IDogY29tcG9uZW50c1Byb3BzLnJvb3Q7XG4gIGNvbnN0IGJhY2tkcm9wU2xvdFByb3BzID0gKF9zbG90UHJvcHMkYmFja2Ryb3AgPSBzbG90UHJvcHMgPT0gbnVsbCA/IHZvaWQgMCA6IHNsb3RQcm9wcy5iYWNrZHJvcCkgIT0gbnVsbCA/IF9zbG90UHJvcHMkYmFja2Ryb3AgOiBjb21wb25lbnRzUHJvcHMuYmFja2Ryb3A7XG4gIGNvbnN0IHJvb3RQcm9wcyA9IHVzZVNsb3RQcm9wcyh7XG4gICAgZWxlbWVudFR5cGU6IFJvb3RTbG90LFxuICAgIGV4dGVybmFsU2xvdFByb3BzOiByb290U2xvdFByb3BzLFxuICAgIGV4dGVybmFsRm9yd2FyZGVkUHJvcHM6IG90aGVyLFxuICAgIGdldFNsb3RQcm9wczogZ2V0Um9vdFByb3BzLFxuICAgIGFkZGl0aW9uYWxQcm9wczoge1xuICAgICAgcmVmLFxuICAgICAgYXM6IGNvbXBvbmVudFxuICAgIH0sXG4gICAgb3duZXJTdGF0ZSxcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3NOYW1lLCByb290U2xvdFByb3BzID09IG51bGwgPyB2b2lkIDAgOiByb290U2xvdFByb3BzLmNsYXNzTmFtZSwgY2xhc3NlcyA9PSBudWxsID8gdm9pZCAwIDogY2xhc3Nlcy5yb290LCAhb3duZXJTdGF0ZS5vcGVuICYmIG93bmVyU3RhdGUuZXhpdGVkICYmIChjbGFzc2VzID09IG51bGwgPyB2b2lkIDAgOiBjbGFzc2VzLmhpZGRlbikpXG4gIH0pO1xuICBjb25zdCBiYWNrZHJvcFByb3BzID0gdXNlU2xvdFByb3BzKHtcbiAgICBlbGVtZW50VHlwZTogQmFja2Ryb3BTbG90LFxuICAgIGV4dGVybmFsU2xvdFByb3BzOiBiYWNrZHJvcFNsb3RQcm9wcyxcbiAgICBhZGRpdGlvbmFsUHJvcHM6IEJhY2tkcm9wUHJvcHMsXG4gICAgZ2V0U2xvdFByb3BzOiBvdGhlckhhbmRsZXJzID0+IHtcbiAgICAgIHJldHVybiBnZXRCYWNrZHJvcFByb3BzKF9leHRlbmRzKHt9LCBvdGhlckhhbmRsZXJzLCB7XG4gICAgICAgIG9uQ2xpY2s6IGUgPT4ge1xuICAgICAgICAgIGlmIChvbkJhY2tkcm9wQ2xpY2spIHtcbiAgICAgICAgICAgIG9uQmFja2Ryb3BDbGljayhlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG90aGVySGFuZGxlcnMgIT0gbnVsbCAmJiBvdGhlckhhbmRsZXJzLm9uQ2xpY2spIHtcbiAgICAgICAgICAgIG90aGVySGFuZGxlcnMub25DbGljayhlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pKTtcbiAgICB9LFxuICAgIGNsYXNzTmFtZTogY2xzeChiYWNrZHJvcFNsb3RQcm9wcyA9PSBudWxsID8gdm9pZCAwIDogYmFja2Ryb3BTbG90UHJvcHMuY2xhc3NOYW1lLCBCYWNrZHJvcFByb3BzID09IG51bGwgPyB2b2lkIDAgOiBCYWNrZHJvcFByb3BzLmNsYXNzTmFtZSwgY2xhc3NlcyA9PSBudWxsID8gdm9pZCAwIDogY2xhc3Nlcy5iYWNrZHJvcCksXG4gICAgb3duZXJTdGF0ZVxuICB9KTtcbiAgaWYgKCFrZWVwTW91bnRlZCAmJiAhb3BlbiAmJiAoIWhhc1RyYW5zaXRpb24gfHwgZXhpdGVkKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChQb3J0YWwsIHtcbiAgICByZWY6IHBvcnRhbFJlZixcbiAgICBjb250YWluZXI6IGNvbnRhaW5lcixcbiAgICBkaXNhYmxlUG9ydGFsOiBkaXNhYmxlUG9ydGFsLFxuICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeHMoUm9vdFNsb3QsIF9leHRlbmRzKHt9LCByb290UHJvcHMsIHtcbiAgICAgIGNoaWxkcmVuOiBbIWhpZGVCYWNrZHJvcCAmJiBCYWNrZHJvcENvbXBvbmVudCA/IC8qI19fUFVSRV9fKi9fanN4KEJhY2tkcm9wU2xvdCwgX2V4dGVuZHMoe30sIGJhY2tkcm9wUHJvcHMpKSA6IG51bGwsIC8qI19fUFVSRV9fKi9fanN4KEZvY3VzVHJhcCwge1xuICAgICAgICBkaXNhYmxlRW5mb3JjZUZvY3VzOiBkaXNhYmxlRW5mb3JjZUZvY3VzLFxuICAgICAgICBkaXNhYmxlQXV0b0ZvY3VzOiBkaXNhYmxlQXV0b0ZvY3VzLFxuICAgICAgICBkaXNhYmxlUmVzdG9yZUZvY3VzOiBkaXNhYmxlUmVzdG9yZUZvY3VzLFxuICAgICAgICBpc0VuYWJsZWQ6IGlzVG9wTW9kYWwsXG4gICAgICAgIG9wZW46IG9wZW4sXG4gICAgICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkcmVuLCBjaGlsZFByb3BzKVxuICAgICAgfSldXG4gICAgfSkpXG4gIH0pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBNb2RhbC5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBBIGJhY2tkcm9wIGNvbXBvbmVudC4gVGhpcyBwcm9wIGVuYWJsZXMgY3VzdG9tIGJhY2tkcm9wIHJlbmRlcmluZy5cbiAgICogQGRlcHJlY2F0ZWQgVXNlIGBzbG90cy5iYWNrZHJvcGAgaW5zdGVhZC4gV2hpbGUgdGhpcyBwcm9wIGN1cnJlbnRseSB3b3JrcywgaXQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHZlcnNpb24uXG4gICAqIFVzZSB0aGUgYHNsb3RzLmJhY2tkcm9wYCBwcm9wIHRvIG1ha2UgeW91ciBhcHBsaWNhdGlvbiByZWFkeSBmb3IgdGhlIG5leHQgdmVyc2lvbiBvZiBNYXRlcmlhbCBVSS5cbiAgICogQGRlZmF1bHQgc3R5bGVkKEJhY2tkcm9wLCB7XG4gICAqICAgbmFtZTogJ011aU1vZGFsJyxcbiAgICogICBzbG90OiAnQmFja2Ryb3AnLFxuICAgKiAgIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgKiAgICAgcmV0dXJuIHN0eWxlcy5iYWNrZHJvcDtcbiAgICogICB9LFxuICAgKiB9KSh7XG4gICAqICAgekluZGV4OiAtMSxcbiAgICogfSlcbiAgICovXG4gIEJhY2tkcm9wQ29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBbYEJhY2tkcm9wYF0oL21hdGVyaWFsLXVpL2FwaS9iYWNrZHJvcC8pIGVsZW1lbnQuXG4gICAqIEBkZXByZWNhdGVkIFVzZSBgc2xvdFByb3BzLmJhY2tkcm9wYCBpbnN0ZWFkLlxuICAgKi9cbiAgQmFja2Ryb3BQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEEgc2luZ2xlIGNoaWxkIGNvbnRlbnQgZWxlbWVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBlbGVtZW50QWNjZXB0aW5nUmVmLmlzUmVxdWlyZWQsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogV2hlbiBzZXQgdG8gdHJ1ZSB0aGUgTW9kYWwgd2FpdHMgdW50aWwgYSBuZXN0ZWQgVHJhbnNpdGlvbiBpcyBjb21wbGV0ZWQgYmVmb3JlIGNsb3NpbmcuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBjbG9zZUFmdGVyVHJhbnNpdGlvbjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnRzIHVzZWQgZm9yIGVhY2ggc2xvdCBpbnNpZGUuXG4gICAqXG4gICAqIFRoaXMgcHJvcCBpcyBhbiBhbGlhcyBmb3IgdGhlIGBzbG90c2AgcHJvcC5cbiAgICogSXQncyByZWNvbW1lbmRlZCB0byB1c2UgdGhlIGBzbG90c2AgcHJvcCBpbnN0ZWFkLlxuICAgKlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgY29tcG9uZW50czogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBCYWNrZHJvcDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIFJvb3Q6IFByb3BUeXBlcy5lbGVtZW50VHlwZVxuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBleHRyYSBwcm9wcyBmb3IgdGhlIHNsb3QgY29tcG9uZW50cy5cbiAgICogWW91IGNhbiBvdmVycmlkZSB0aGUgZXhpc3RpbmcgcHJvcHMgb3IgYWRkIG5ldyBvbmVzLlxuICAgKlxuICAgKiBUaGlzIHByb3AgaXMgYW4gYWxpYXMgZm9yIHRoZSBgc2xvdFByb3BzYCBwcm9wLlxuICAgKiBJdCdzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGUgYHNsb3RQcm9wc2AgcHJvcCBpbnN0ZWFkLCBhcyBgY29tcG9uZW50c1Byb3BzYCB3aWxsIGJlIGRlcHJlY2F0ZWQgaW4gdGhlIGZ1dHVyZS5cbiAgICpcbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIGNvbXBvbmVudHNQcm9wczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBiYWNrZHJvcDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgICByb290OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG4gIH0pLFxuICAvKipcbiAgICogQW4gSFRNTCBlbGVtZW50IG9yIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBvbmUuXG4gICAqIFRoZSBgY29udGFpbmVyYCB3aWxsIGhhdmUgdGhlIHBvcnRhbCBjaGlsZHJlbiBhcHBlbmRlZCB0byBpdC5cbiAgICpcbiAgICogWW91IGNhbiBhbHNvIHByb3ZpZGUgYSBjYWxsYmFjaywgd2hpY2ggaXMgY2FsbGVkIGluIGEgUmVhY3QgbGF5b3V0IGVmZmVjdC5cbiAgICogVGhpcyBsZXRzIHlvdSBzZXQgdGhlIGNvbnRhaW5lciBmcm9tIGEgcmVmLCBhbmQgYWxzbyBtYWtlcyBzZXJ2ZXItc2lkZSByZW5kZXJpbmcgcG9zc2libGUuXG4gICAqXG4gICAqIEJ5IGRlZmF1bHQsIGl0IHVzZXMgdGhlIGJvZHkgb2YgdGhlIHRvcC1sZXZlbCBkb2N1bWVudCBvYmplY3QsXG4gICAqIHNvIGl0J3Mgc2ltcGx5IGBkb2N1bWVudC5ib2R5YCBtb3N0IG9mIHRoZSB0aW1lLlxuICAgKi9cbiAgY29udGFpbmVyOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW0hUTUxFbGVtZW50VHlwZSwgUHJvcFR5cGVzLmZ1bmNdKSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIG1vZGFsIHdpbGwgbm90IGF1dG9tYXRpY2FsbHkgc2hpZnQgZm9jdXMgdG8gaXRzZWxmIHdoZW4gaXQgb3BlbnMsIGFuZFxuICAgKiByZXBsYWNlIGl0IHRvIHRoZSBsYXN0IGZvY3VzZWQgZWxlbWVudCB3aGVuIGl0IGNsb3Nlcy5cbiAgICogVGhpcyBhbHNvIHdvcmtzIGNvcnJlY3RseSB3aXRoIGFueSBtb2RhbCBjaGlsZHJlbiB0aGF0IGhhdmUgdGhlIGBkaXNhYmxlQXV0b0ZvY3VzYCBwcm9wLlxuICAgKlxuICAgKiBHZW5lcmFsbHkgdGhpcyBzaG91bGQgbmV2ZXIgYmUgc2V0IHRvIGB0cnVlYCBhcyBpdCBtYWtlcyB0aGUgbW9kYWwgbGVzc1xuICAgKiBhY2Nlc3NpYmxlIHRvIGFzc2lzdGl2ZSB0ZWNobm9sb2dpZXMsIGxpa2Ugc2NyZWVuIHJlYWRlcnMuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlQXV0b0ZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIG1vZGFsIHdpbGwgbm90IHByZXZlbnQgZm9jdXMgZnJvbSBsZWF2aW5nIHRoZSBtb2RhbCB3aGlsZSBvcGVuLlxuICAgKlxuICAgKiBHZW5lcmFsbHkgdGhpcyBzaG91bGQgbmV2ZXIgYmUgc2V0IHRvIGB0cnVlYCBhcyBpdCBtYWtlcyB0aGUgbW9kYWwgbGVzc1xuICAgKiBhY2Nlc3NpYmxlIHRvIGFzc2lzdGl2ZSB0ZWNobm9sb2dpZXMsIGxpa2Ugc2NyZWVuIHJlYWRlcnMuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlRW5mb3JjZUZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgaGl0dGluZyBlc2NhcGUgd2lsbCBub3QgZmlyZSB0aGUgYG9uQ2xvc2VgIGNhbGxiYWNrLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZUVzY2FwZUtleURvd246IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIGBjaGlsZHJlbmAgd2lsbCBiZSB1bmRlciB0aGUgRE9NIGhpZXJhcmNoeSBvZiB0aGUgcGFyZW50IGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVQb3J0YWw6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbW9kYWwgd2lsbCBub3QgcmVzdG9yZSBmb2N1cyB0byBwcmV2aW91c2x5IGZvY3VzZWQgZWxlbWVudCBvbmNlXG4gICAqIG1vZGFsIGlzIGhpZGRlbiBvciB1bm1vdW50ZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlUmVzdG9yZUZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIERpc2FibGUgdGhlIHNjcm9sbCBsb2NrIGJlaGF2aW9yLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZVNjcm9sbExvY2s6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYmFja2Ryb3AgaXMgbm90IHJlbmRlcmVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgaGlkZUJhY2tkcm9wOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIEFsd2F5cyBrZWVwIHRoZSBjaGlsZHJlbiBpbiB0aGUgRE9NLlxuICAgKiBUaGlzIHByb3AgY2FuIGJlIHVzZWZ1bCBpbiBTRU8gc2l0dWF0aW9uIG9yXG4gICAqIHdoZW4geW91IHdhbnQgdG8gbWF4aW1pemUgdGhlIHJlc3BvbnNpdmVuZXNzIG9mIHRoZSBNb2RhbC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGtlZXBNb3VudGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGJhY2tkcm9wIGlzIGNsaWNrZWQuXG4gICAqIEBkZXByZWNhdGVkIFVzZSB0aGUgYG9uQ2xvc2VgIHByb3Agd2l0aCB0aGUgYHJlYXNvbmAgYXJndW1lbnQgdG8gaGFuZGxlIHRoZSBgYmFja2Ryb3BDbGlja2AgZXZlbnRzLlxuICAgKi9cbiAgb25CYWNrZHJvcENsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCByZXF1ZXN0cyB0byBiZSBjbG9zZWQuXG4gICAqIFRoZSBgcmVhc29uYCBwYXJhbWV0ZXIgY2FuIG9wdGlvbmFsbHkgYmUgdXNlZCB0byBjb250cm9sIHRoZSByZXNwb25zZSB0byBgb25DbG9zZWAuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlYXNvbiBDYW4gYmU6IGBcImVzY2FwZUtleURvd25cImAsIGBcImJhY2tkcm9wQ2xpY2tcImAuXG4gICAqL1xuICBvbkNsb3NlOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEEgZnVuY3Rpb24gY2FsbGVkIHdoZW4gYSB0cmFuc2l0aW9uIGVudGVycy5cbiAgICovXG4gIG9uVHJhbnNpdGlvbkVudGVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEEgZnVuY3Rpb24gY2FsbGVkIHdoZW4gYSB0cmFuc2l0aW9uIGhhcyBleGl0ZWQuXG4gICAqL1xuICBvblRyYW5zaXRpb25FeGl0ZWQ6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIHNob3duLlxuICAgKi9cbiAgb3BlbjogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgLyoqXG4gICAqIFRoZSBwcm9wcyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlIHRoZSBNb2RhbC5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIHNsb3RQcm9wczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBiYWNrZHJvcDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgICByb290OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG4gIH0pLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudHMgdXNlZCBmb3IgZWFjaCBzbG90IGluc2lkZSB0aGUgTW9kYWwuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBzbG90czogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBiYWNrZHJvcDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIHJvb3Q6IFByb3BUeXBlcy5lbGVtZW50VHlwZVxuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IE1vZGFsOyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0RGl2aWRlclV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpRGl2aWRlcicsIHNsb3QpO1xufVxuY29uc3QgZGl2aWRlckNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlEaXZpZGVyJywgWydyb290JywgJ2Fic29sdXRlJywgJ2Z1bGxXaWR0aCcsICdpbnNldCcsICdtaWRkbGUnLCAnZmxleEl0ZW0nLCAnbGlnaHQnLCAndmVydGljYWwnLCAnd2l0aENoaWxkcmVuJywgJ3dpdGhDaGlsZHJlblZlcnRpY2FsJywgJ3RleHRBbGlnblJpZ2h0JywgJ3RleHRBbGlnbkxlZnQnLCAnd3JhcHBlcicsICd3cmFwcGVyVmVydGljYWwnXSk7XG5leHBvcnQgZGVmYXVsdCBkaXZpZGVyQ2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJkaXNhYmxlVW5kZXJsaW5lXCIsIFwiY29tcG9uZW50c1wiLCBcImNvbXBvbmVudHNQcm9wc1wiLCBcImZ1bGxXaWR0aFwiLCBcImhpZGRlbkxhYmVsXCIsIFwiaW5wdXRDb21wb25lbnRcIiwgXCJtdWx0aWxpbmVcIiwgXCJzbG90UHJvcHNcIiwgXCJzbG90c1wiLCBcInR5cGVcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgZGVlcG1lcmdlIGZyb20gJ0BtdWkvdXRpbHMvZGVlcG1lcmdlJztcbmltcG9ydCByZWZUeXBlIGZyb20gJ0BtdWkvdXRpbHMvcmVmVHlwZSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IElucHV0QmFzZSBmcm9tICcuLi9JbnB1dEJhc2UnO1xuaW1wb3J0IHN0eWxlZCwgeyByb290U2hvdWxkRm9yd2FyZFByb3AgfSBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCBmaWxsZWRJbnB1dENsYXNzZXMsIHsgZ2V0RmlsbGVkSW5wdXRVdGlsaXR5Q2xhc3MgfSBmcm9tICcuL2ZpbGxlZElucHV0Q2xhc3Nlcyc7XG5pbXBvcnQgeyByb290T3ZlcnJpZGVzUmVzb2x2ZXIgYXMgaW5wdXRCYXNlUm9vdE92ZXJyaWRlc1Jlc29sdmVyLCBpbnB1dE92ZXJyaWRlc1Jlc29sdmVyIGFzIGlucHV0QmFzZUlucHV0T3ZlcnJpZGVzUmVzb2x2ZXIsIElucHV0QmFzZVJvb3QsIElucHV0QmFzZUNvbXBvbmVudCBhcyBJbnB1dEJhc2VJbnB1dCB9IGZyb20gJy4uL0lucHV0QmFzZS9JbnB1dEJhc2UnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIGRpc2FibGVVbmRlcmxpbmVcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsICFkaXNhYmxlVW5kZXJsaW5lICYmICd1bmRlcmxpbmUnXSxcbiAgICBpbnB1dDogWydpbnB1dCddXG4gIH07XG4gIGNvbnN0IGNvbXBvc2VkQ2xhc3NlcyA9IGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRGaWxsZWRJbnB1dFV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgY2xhc3NlcywgY29tcG9zZWRDbGFzc2VzKTtcbn07XG5jb25zdCBGaWxsZWRJbnB1dFJvb3QgPSBzdHlsZWQoSW5wdXRCYXNlUm9vdCwge1xuICBzaG91bGRGb3J3YXJkUHJvcDogcHJvcCA9PiByb290U2hvdWxkRm9yd2FyZFByb3AocHJvcCkgfHwgcHJvcCA9PT0gJ2NsYXNzZXMnLFxuICBuYW1lOiAnTXVpRmlsbGVkSW5wdXQnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFsuLi5pbnB1dEJhc2VSb290T3ZlcnJpZGVzUmVzb2x2ZXIocHJvcHMsIHN0eWxlcyksICFvd25lclN0YXRlLmRpc2FibGVVbmRlcmxpbmUgJiYgc3R5bGVzLnVuZGVybGluZV07XG4gIH1cbn0pKCh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiB7XG4gIHZhciBfcGFsZXR0ZTtcbiAgY29uc3QgbGlnaHQgPSB0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdsaWdodCc7XG4gIGNvbnN0IGJvdHRvbUxpbmVDb2xvciA9IGxpZ2h0ID8gJ3JnYmEoMCwgMCwgMCwgMC40MiknIDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC43KSc7XG4gIGNvbnN0IGJhY2tncm91bmRDb2xvciA9IGxpZ2h0ID8gJ3JnYmEoMCwgMCwgMCwgMC4wNiknIDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4wOSknO1xuICBjb25zdCBob3ZlckJhY2tncm91bmQgPSBsaWdodCA/ICdyZ2JhKDAsIDAsIDAsIDAuMDkpJyA6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTMpJztcbiAgY29uc3QgZGlzYWJsZWRCYWNrZ3JvdW5kID0gbGlnaHQgPyAncmdiYSgwLCAwLCAwLCAwLjEyKScgOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjEyKSc7XG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS52YXJzID8gdGhlbWUudmFycy5wYWxldHRlLkZpbGxlZElucHV0LmJnIDogYmFja2dyb3VuZENvbG9yLFxuICAgIGJvcmRlclRvcExlZnRSYWRpdXM6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5zaGFwZS5ib3JkZXJSYWRpdXMsXG4gICAgYm9yZGVyVG9wUmlnaHRSYWRpdXM6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5zaGFwZS5ib3JkZXJSYWRpdXMsXG4gICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdiYWNrZ3JvdW5kLWNvbG9yJywge1xuICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXIsXG4gICAgICBlYXNpbmc6IHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlT3V0XG4gICAgfSksXG4gICAgJyY6aG92ZXInOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnZhcnMgPyB0aGVtZS52YXJzLnBhbGV0dGUuRmlsbGVkSW5wdXQuaG92ZXJCZyA6IGhvdmVyQmFja2dyb3VuZCxcbiAgICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUudmFycyA/IHRoZW1lLnZhcnMucGFsZXR0ZS5GaWxsZWRJbnB1dC5iZyA6IGJhY2tncm91bmRDb2xvclxuICAgICAgfVxuICAgIH0sXG4gICAgW2AmLiR7ZmlsbGVkSW5wdXRDbGFzc2VzLmZvY3VzZWR9YF06IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUudmFycyA/IHRoZW1lLnZhcnMucGFsZXR0ZS5GaWxsZWRJbnB1dC5iZyA6IGJhY2tncm91bmRDb2xvclxuICAgIH0sXG4gICAgW2AmLiR7ZmlsbGVkSW5wdXRDbGFzc2VzLmRpc2FibGVkfWBdOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnZhcnMgPyB0aGVtZS52YXJzLnBhbGV0dGUuRmlsbGVkSW5wdXQuZGlzYWJsZWRCZyA6IGRpc2FibGVkQmFja2dyb3VuZFxuICAgIH1cbiAgfSwgIW93bmVyU3RhdGUuZGlzYWJsZVVuZGVybGluZSAmJiB7XG4gICAgJyY6OmFmdGVyJzoge1xuICAgICAgYm9yZGVyQm90dG9tOiBgMnB4IHNvbGlkICR7KF9wYWxldHRlID0gKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvciB8fCAncHJpbWFyeSddKSA9PSBudWxsID8gdm9pZCAwIDogX3BhbGV0dGUubWFpbn1gLFxuICAgICAgbGVmdDogMCxcbiAgICAgIGJvdHRvbTogMCxcbiAgICAgIC8vIERvaW5nIHRoZSBvdGhlciB3YXkgYXJvdW5kIGNyYXNoIG9uIElFMTEgXCInJ1wiIGh0dHBzOi8vZ2l0aHViLmNvbS9jc3NpbmpzL2pzcy9pc3N1ZXMvMjQyXG4gICAgICBjb250ZW50OiAnXCJcIicsXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgdHJhbnNmb3JtOiAnc2NhbGVYKDApJyxcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgndHJhbnNmb3JtJywge1xuICAgICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlcixcbiAgICAgICAgZWFzaW5nOiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZU91dFxuICAgICAgfSksXG4gICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScgLy8gVHJhbnNwYXJlbnQgdG8gdGhlIGhvdmVyIHN0eWxlLlxuICAgIH0sXG4gICAgW2AmLiR7ZmlsbGVkSW5wdXRDbGFzc2VzLmZvY3VzZWR9OmFmdGVyYF06IHtcbiAgICAgIC8vIHRyYW5zbGF0ZVgoMCkgaXMgYSB3b3JrYXJvdW5kIGZvciBTYWZhcmkgdHJhbnNmb3JtIHNjYWxlIGJ1Z1xuICAgICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tdWkvbWF0ZXJpYWwtdWkvaXNzdWVzLzMxNzY2XG4gICAgICB0cmFuc2Zvcm06ICdzY2FsZVgoMSkgdHJhbnNsYXRlWCgwKSdcbiAgICB9LFxuICAgIFtgJi4ke2ZpbGxlZElucHV0Q2xhc3Nlcy5lcnJvcn1gXToge1xuICAgICAgJyY6OmJlZm9yZSwgJjo6YWZ0ZXInOiB7XG4gICAgICAgIGJvcmRlckJvdHRvbUNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5lcnJvci5tYWluXG4gICAgICB9XG4gICAgfSxcbiAgICAnJjo6YmVmb3JlJzoge1xuICAgICAgYm9yZGVyQm90dG9tOiBgMXB4IHNvbGlkICR7dGhlbWUudmFycyA/IGByZ2JhKCR7dGhlbWUudmFycy5wYWxldHRlLmNvbW1vbi5vbkJhY2tncm91bmRDaGFubmVsfSAvICR7dGhlbWUudmFycy5vcGFjaXR5LmlucHV0VW5kZXJsaW5lfSlgIDogYm90dG9tTGluZUNvbG9yfWAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgYm90dG9tOiAwLFxuICAgICAgLy8gRG9pbmcgdGhlIG90aGVyIHdheSBhcm91bmQgY3Jhc2ggb24gSUUxMSBcIicnXCIgaHR0cHM6Ly9naXRodWIuY29tL2Nzc2luanMvanNzL2lzc3Vlcy8yNDJcbiAgICAgIGNvbnRlbnQ6ICdcIlxcXFwwMGEwXCInLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICByaWdodDogMCxcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnYm9yZGVyLWJvdHRvbS1jb2xvcicsIHtcbiAgICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXJcbiAgICAgIH0pLFxuICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnIC8vIFRyYW5zcGFyZW50IHRvIHRoZSBob3ZlciBzdHlsZS5cbiAgICB9LFxuICAgIFtgJjpob3Zlcjpub3QoLiR7ZmlsbGVkSW5wdXRDbGFzc2VzLmRpc2FibGVkfSwgLiR7ZmlsbGVkSW5wdXRDbGFzc2VzLmVycm9yfSk6YmVmb3JlYF06IHtcbiAgICAgIGJvcmRlckJvdHRvbTogYDFweCBzb2xpZCAkeyh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLnRleHQucHJpbWFyeX1gXG4gICAgfSxcbiAgICBbYCYuJHtmaWxsZWRJbnB1dENsYXNzZXMuZGlzYWJsZWR9OmJlZm9yZWBdOiB7XG4gICAgICBib3JkZXJCb3R0b21TdHlsZTogJ2RvdHRlZCdcbiAgICB9XG4gIH0sIG93bmVyU3RhdGUuc3RhcnRBZG9ybm1lbnQgJiYge1xuICAgIHBhZGRpbmdMZWZ0OiAxMlxuICB9LCBvd25lclN0YXRlLmVuZEFkb3JubWVudCAmJiB7XG4gICAgcGFkZGluZ1JpZ2h0OiAxMlxuICB9LCBvd25lclN0YXRlLm11bHRpbGluZSAmJiBfZXh0ZW5kcyh7XG4gICAgcGFkZGluZzogJzI1cHggMTJweCA4cHgnXG4gIH0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiB7XG4gICAgcGFkZGluZ1RvcDogMjEsXG4gICAgcGFkZGluZ0JvdHRvbTogNFxuICB9LCBvd25lclN0YXRlLmhpZGRlbkxhYmVsICYmIHtcbiAgICBwYWRkaW5nVG9wOiAxNixcbiAgICBwYWRkaW5nQm90dG9tOiAxN1xuICB9LCBvd25lclN0YXRlLmhpZGRlbkxhYmVsICYmIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiB7XG4gICAgcGFkZGluZ1RvcDogOCxcbiAgICBwYWRkaW5nQm90dG9tOiA5XG4gIH0pKTtcbn0pO1xuY29uc3QgRmlsbGVkSW5wdXRJbnB1dCA9IHN0eWxlZChJbnB1dEJhc2VJbnB1dCwge1xuICBuYW1lOiAnTXVpRmlsbGVkSW5wdXQnLFxuICBzbG90OiAnSW5wdXQnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogaW5wdXRCYXNlSW5wdXRPdmVycmlkZXNSZXNvbHZlclxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHtcbiAgcGFkZGluZ1RvcDogMjUsXG4gIHBhZGRpbmdSaWdodDogMTIsXG4gIHBhZGRpbmdCb3R0b206IDgsXG4gIHBhZGRpbmdMZWZ0OiAxMlxufSwgIXRoZW1lLnZhcnMgJiYge1xuICAnJjotd2Via2l0LWF1dG9maWxsJzoge1xuICAgIFdlYmtpdEJveFNoYWRvdzogdGhlbWUucGFsZXR0ZS5tb2RlID09PSAnbGlnaHQnID8gbnVsbCA6ICcwIDAgMCAxMDBweCAjMjY2Nzk4IGluc2V0JyxcbiAgICBXZWJraXRUZXh0RmlsbENvbG9yOiB0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdsaWdodCcgPyBudWxsIDogJyNmZmYnLFxuICAgIGNhcmV0Q29sb3I6IHRoZW1lLnBhbGV0dGUubW9kZSA9PT0gJ2xpZ2h0JyA/IG51bGwgOiAnI2ZmZicsXG4gICAgYm9yZGVyVG9wTGVmdFJhZGl1czogJ2luaGVyaXQnLFxuICAgIGJvcmRlclRvcFJpZ2h0UmFkaXVzOiAnaW5oZXJpdCdcbiAgfVxufSwgdGhlbWUudmFycyAmJiB7XG4gICcmOi13ZWJraXQtYXV0b2ZpbGwnOiB7XG4gICAgYm9yZGVyVG9wTGVmdFJhZGl1czogJ2luaGVyaXQnLFxuICAgIGJvcmRlclRvcFJpZ2h0UmFkaXVzOiAnaW5oZXJpdCdcbiAgfSxcbiAgW3RoZW1lLmdldENvbG9yU2NoZW1lU2VsZWN0b3IoJ2RhcmsnKV06IHtcbiAgICAnJjotd2Via2l0LWF1dG9maWxsJzoge1xuICAgICAgV2Via2l0Qm94U2hhZG93OiAnMCAwIDAgMTAwcHggIzI2Njc5OCBpbnNldCcsXG4gICAgICBXZWJraXRUZXh0RmlsbENvbG9yOiAnI2ZmZicsXG4gICAgICBjYXJldENvbG9yOiAnI2ZmZidcbiAgICB9XG4gIH1cbn0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiB7XG4gIHBhZGRpbmdUb3A6IDIxLFxuICBwYWRkaW5nQm90dG9tOiA0XG59LCBvd25lclN0YXRlLmhpZGRlbkxhYmVsICYmIHtcbiAgcGFkZGluZ1RvcDogMTYsXG4gIHBhZGRpbmdCb3R0b206IDE3XG59LCBvd25lclN0YXRlLnN0YXJ0QWRvcm5tZW50ICYmIHtcbiAgcGFkZGluZ0xlZnQ6IDBcbn0sIG93bmVyU3RhdGUuZW5kQWRvcm5tZW50ICYmIHtcbiAgcGFkZGluZ1JpZ2h0OiAwXG59LCBvd25lclN0YXRlLmhpZGRlbkxhYmVsICYmIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiB7XG4gIHBhZGRpbmdUb3A6IDgsXG4gIHBhZGRpbmdCb3R0b206IDlcbn0sIG93bmVyU3RhdGUubXVsdGlsaW5lICYmIHtcbiAgcGFkZGluZ1RvcDogMCxcbiAgcGFkZGluZ0JvdHRvbTogMCxcbiAgcGFkZGluZ0xlZnQ6IDAsXG4gIHBhZGRpbmdSaWdodDogMFxufSkpO1xuY29uc3QgRmlsbGVkSW5wdXQgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBGaWxsZWRJbnB1dChpblByb3BzLCByZWYpIHtcbiAgdmFyIF9yZWYsIF9zbG90cyRyb290LCBfcmVmMiwgX3Nsb3RzJGlucHV0O1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlGaWxsZWRJbnB1dCdcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGNvbXBvbmVudHMgPSB7fSxcbiAgICAgIGNvbXBvbmVudHNQcm9wczogY29tcG9uZW50c1Byb3BzUHJvcCxcbiAgICAgIGZ1bGxXaWR0aCA9IGZhbHNlLFxuICAgICAgLy8gZGVjbGFyZSBoZXJlIHRvIHByZXZlbnQgc3ByZWFkaW5nIHRvIERPTVxuICAgICAgaW5wdXRDb21wb25lbnQgPSAnaW5wdXQnLFxuICAgICAgbXVsdGlsaW5lID0gZmFsc2UsXG4gICAgICBzbG90UHJvcHMsXG4gICAgICBzbG90cyA9IHt9LFxuICAgICAgdHlwZSA9ICd0ZXh0J1xuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgZnVsbFdpZHRoLFxuICAgIGlucHV0Q29tcG9uZW50LFxuICAgIG11bHRpbGluZSxcbiAgICB0eXBlXG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMocHJvcHMpO1xuICBjb25zdCBmaWxsZWRJbnB1dENvbXBvbmVudHNQcm9wcyA9IHtcbiAgICByb290OiB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSxcbiAgICBpbnB1dDoge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH1cbiAgfTtcbiAgY29uc3QgY29tcG9uZW50c1Byb3BzID0gKHNsb3RQcm9wcyAhPSBudWxsID8gc2xvdFByb3BzIDogY29tcG9uZW50c1Byb3BzUHJvcCkgPyBkZWVwbWVyZ2UoZmlsbGVkSW5wdXRDb21wb25lbnRzUHJvcHMsIHNsb3RQcm9wcyAhPSBudWxsID8gc2xvdFByb3BzIDogY29tcG9uZW50c1Byb3BzUHJvcCkgOiBmaWxsZWRJbnB1dENvbXBvbmVudHNQcm9wcztcbiAgY29uc3QgUm9vdFNsb3QgPSAoX3JlZiA9IChfc2xvdHMkcm9vdCA9IHNsb3RzLnJvb3QpICE9IG51bGwgPyBfc2xvdHMkcm9vdCA6IGNvbXBvbmVudHMuUm9vdCkgIT0gbnVsbCA/IF9yZWYgOiBGaWxsZWRJbnB1dFJvb3Q7XG4gIGNvbnN0IElucHV0U2xvdCA9IChfcmVmMiA9IChfc2xvdHMkaW5wdXQgPSBzbG90cy5pbnB1dCkgIT0gbnVsbCA/IF9zbG90cyRpbnB1dCA6IGNvbXBvbmVudHMuSW5wdXQpICE9IG51bGwgPyBfcmVmMiA6IEZpbGxlZElucHV0SW5wdXQ7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChJbnB1dEJhc2UsIF9leHRlbmRzKHtcbiAgICBzbG90czoge1xuICAgICAgcm9vdDogUm9vdFNsb3QsXG4gICAgICBpbnB1dDogSW5wdXRTbG90XG4gICAgfSxcbiAgICBjb21wb25lbnRzUHJvcHM6IGNvbXBvbmVudHNQcm9wcyxcbiAgICBmdWxsV2lkdGg6IGZ1bGxXaWR0aCxcbiAgICBpbnB1dENvbXBvbmVudDogaW5wdXRDb21wb25lbnQsXG4gICAgbXVsdGlsaW5lOiBtdWx0aWxpbmUsXG4gICAgcmVmOiByZWYsXG4gICAgdHlwZTogdHlwZVxuICB9LCBvdGhlciwge1xuICAgIGNsYXNzZXM6IGNsYXNzZXNcbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBGaWxsZWRJbnB1dC5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBUaGlzIHByb3AgaGVscHMgdXNlcnMgdG8gZmlsbCBmb3JtcyBmYXN0ZXIsIGVzcGVjaWFsbHkgb24gbW9iaWxlIGRldmljZXMuXG4gICAqIFRoZSBuYW1lIGNhbiBiZSBjb25mdXNpbmcsIGFzIGl0J3MgbW9yZSBsaWtlIGFuIGF1dG9maWxsLlxuICAgKiBZb3UgY2FuIGxlYXJuIG1vcmUgYWJvdXQgaXQgW2ZvbGxvd2luZyB0aGUgc3BlY2lmaWNhdGlvbl0oaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybS1jb250cm9sLWluZnJhc3RydWN0dXJlLmh0bWwjYXV0b2ZpbGwpLlxuICAgKi9cbiAgYXV0b0NvbXBsZXRlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCBlbGVtZW50IGlzIGZvY3VzZWQgZHVyaW5nIHRoZSBmaXJzdCBtb3VudC5cbiAgICovXG4gIGF1dG9Gb2N1czogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIEl0IHN1cHBvcnRzIGJvdGggZGVmYXVsdCBhbmQgY3VzdG9tIHRoZW1lIGNvbG9ycywgd2hpY2ggY2FuIGJlIGFkZGVkIGFzIHNob3duIGluIHRoZVxuICAgKiBbcGFsZXR0ZSBjdXN0b21pemF0aW9uIGd1aWRlXShodHRwczovL211aS5jb20vbWF0ZXJpYWwtdWkvY3VzdG9taXphdGlvbi9wYWxldHRlLyNjdXN0b20tY29sb3JzKS5cbiAgICogVGhlIHByb3AgZGVmYXVsdHMgdG8gdGhlIHZhbHVlIChgJ3ByaW1hcnknYCkgaW5oZXJpdGVkIGZyb20gdGhlIHBhcmVudCBGb3JtQ29udHJvbCBjb21wb25lbnQuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydwcmltYXJ5JywgJ3NlY29uZGFyeSddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudHMgdXNlZCBmb3IgZWFjaCBzbG90IGluc2lkZS5cbiAgICpcbiAgICogVGhpcyBwcm9wIGlzIGFuIGFsaWFzIGZvciB0aGUgYHNsb3RzYCBwcm9wLlxuICAgKiBJdCdzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGUgYHNsb3RzYCBwcm9wIGluc3RlYWQuXG4gICAqXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBjb21wb25lbnRzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIElucHV0OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgUm9vdDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlXG4gIH0pLFxuICAvKipcbiAgICogVGhlIGV4dHJhIHByb3BzIGZvciB0aGUgc2xvdCBjb21wb25lbnRzLlxuICAgKiBZb3UgY2FuIG92ZXJyaWRlIHRoZSBleGlzdGluZyBwcm9wcyBvciBhZGQgbmV3IG9uZXMuXG4gICAqXG4gICAqIFRoaXMgcHJvcCBpcyBhbiBhbGlhcyBmb3IgdGhlIGBzbG90UHJvcHNgIHByb3AuXG4gICAqIEl0J3MgcmVjb21tZW5kZWQgdG8gdXNlIHRoZSBgc2xvdFByb3BzYCBwcm9wIGluc3RlYWQsIGFzIGBjb21wb25lbnRzUHJvcHNgIHdpbGwgYmUgZGVwcmVjYXRlZCBpbiB0aGUgZnV0dXJlLlxuICAgKlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgY29tcG9uZW50c1Byb3BzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGlucHV0OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHJvb3Q6IFByb3BUeXBlcy5vYmplY3RcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZS4gVXNlIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBub3QgY29udHJvbGxlZC5cbiAgICovXG4gIGRlZmF1bHRWYWx1ZTogUHJvcFR5cGVzLmFueSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpcyBkaXNhYmxlZC5cbiAgICogVGhlIHByb3AgZGVmYXVsdHMgdG8gdGhlIHZhbHVlIChgZmFsc2VgKSBpbmhlcml0ZWQgZnJvbSB0aGUgcGFyZW50IEZvcm1Db250cm9sIGNvbXBvbmVudC5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGlucHV0IHdpbGwgbm90IGhhdmUgYW4gdW5kZXJsaW5lLlxuICAgKi9cbiAgZGlzYWJsZVVuZGVybGluZTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBFbmQgYElucHV0QWRvcm5tZW50YCBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBlbmRBZG9ybm1lbnQ6IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCB3aWxsIGluZGljYXRlIGFuIGVycm9yLlxuICAgKiBUaGUgcHJvcCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgKGBmYWxzZWApIGluaGVyaXRlZCBmcm9tIHRoZSBwYXJlbnQgRm9ybUNvbnRyb2wgY29tcG9uZW50LlxuICAgKi9cbiAgZXJyb3I6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCB3aWxsIHRha2UgdXAgdGhlIGZ1bGwgd2lkdGggb2YgaXRzIGNvbnRhaW5lci5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGZ1bGxXaWR0aDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsYWJlbCBpcyBoaWRkZW4uXG4gICAqIFRoaXMgaXMgdXNlZCB0byBpbmNyZWFzZSBkZW5zaXR5IGZvciBhIGBGaWxsZWRJbnB1dGAuXG4gICAqIEJlIHN1cmUgdG8gYWRkIGBhcmlhLWxhYmVsYCB0byB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgaGlkZGVuTGFiZWw6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIGlkIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQgJ2lucHV0J1xuICAgKi9cbiAgaW5wdXRDb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgLyoqXG4gICAqIFtBdHRyaWJ1dGVzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvaW5wdXQjQXR0cmlidXRlcykgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgaW5wdXRQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIFBhc3MgYSByZWYgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UmVmOiByZWZUeXBlLFxuICAvKipcbiAgICogSWYgYGRlbnNlYCwgd2lsbCBhZGp1c3QgdmVydGljYWwgc3BhY2luZy4gVGhpcyBpcyBub3JtYWxseSBvYnRhaW5lZCB2aWEgY29udGV4dCBmcm9tXG4gICAqIEZvcm1Db250cm9sLlxuICAgKiBUaGUgcHJvcCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgKGAnbm9uZSdgKSBpbmhlcml0ZWQgZnJvbSB0aGUgcGFyZW50IEZvcm1Db250cm9sIGNvbXBvbmVudC5cbiAgICovXG4gIG1hcmdpbjogUHJvcFR5cGVzLm9uZU9mKFsnZGVuc2UnLCAnbm9uZSddKSxcbiAgLyoqXG4gICAqIE1heGltdW0gbnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheSB3aGVuIG11bHRpbGluZSBvcHRpb24gaXMgc2V0IHRvIHRydWUuXG4gICAqL1xuICBtYXhSb3dzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBNaW5pbXVtIG51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgbWluUm93czogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogSWYgYHRydWVgLCBhIFtUZXh0YXJlYUF1dG9zaXplXSgvbWF0ZXJpYWwtdWkvcmVhY3QtdGV4dGFyZWEtYXV0b3NpemUvKSBlbGVtZW50IGlzIHJlbmRlcmVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgbXVsdGlsaW5lOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIE5hbWUgYXR0cmlidXRlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgdmFsdWUgaXMgY2hhbmdlZC5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdC5DaGFuZ2VFdmVudDxIVE1MVGV4dEFyZWFFbGVtZW50IHwgSFRNTElucHV0RWxlbWVudD59IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBZb3UgY2FuIHB1bGwgb3V0IHRoZSBuZXcgdmFsdWUgYnkgYWNjZXNzaW5nIGBldmVudC50YXJnZXQudmFsdWVgIChzdHJpbmcpLlxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogVGhlIHNob3J0IGhpbnQgZGlzcGxheWVkIGluIHRoZSBgaW5wdXRgIGJlZm9yZSB0aGUgdXNlciBlbnRlcnMgYSB2YWx1ZS5cbiAgICovXG4gIHBsYWNlaG9sZGVyOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogSXQgcHJldmVudHMgdGhlIHVzZXIgZnJvbSBjaGFuZ2luZyB0aGUgdmFsdWUgb2YgdGhlIGZpZWxkXG4gICAqIChub3QgZnJvbSBpbnRlcmFjdGluZyB3aXRoIHRoZSBmaWVsZCkuXG4gICAqL1xuICByZWFkT25seTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIGVsZW1lbnQgaXMgcmVxdWlyZWQuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSAoYGZhbHNlYCkgaW5oZXJpdGVkIGZyb20gdGhlIHBhcmVudCBGb3JtQ29udHJvbCBjb21wb25lbnQuXG4gICAqL1xuICByZXF1aXJlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBOdW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIHJvd3M6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIFRoZSBleHRyYSBwcm9wcyBmb3IgdGhlIHNsb3QgY29tcG9uZW50cy5cbiAgICogWW91IGNhbiBvdmVycmlkZSB0aGUgZXhpc3RpbmcgcHJvcHMgb3IgYWRkIG5ldyBvbmVzLlxuICAgKlxuICAgKiBUaGlzIHByb3AgaXMgYW4gYWxpYXMgZm9yIHRoZSBgY29tcG9uZW50c1Byb3BzYCBwcm9wLCB3aGljaCB3aWxsIGJlIGRlcHJlY2F0ZWQgaW4gdGhlIGZ1dHVyZS5cbiAgICpcbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIHNsb3RQcm9wczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBpbnB1dDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICByb290OiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudHMgdXNlZCBmb3IgZWFjaCBzbG90IGluc2lkZS5cbiAgICpcbiAgICogVGhpcyBwcm9wIGlzIGFuIGFsaWFzIGZvciB0aGUgYGNvbXBvbmVudHNgIHByb3AsIHdoaWNoIHdpbGwgYmUgZGVwcmVjYXRlZCBpbiB0aGUgZnV0dXJlLlxuICAgKlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgc2xvdHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaW5wdXQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICByb290OiBQcm9wVHlwZXMuZWxlbWVudFR5cGVcbiAgfSksXG4gIC8qKlxuICAgKiBTdGFydCBgSW5wdXRBZG9ybm1lbnRgIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIHN0YXJ0QWRvcm5tZW50OiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgLyoqXG4gICAqIFR5cGUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC4gSXQgc2hvdWxkIGJlIFthIHZhbGlkIEhUTUw1IGlucHV0IHR5cGVdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCNGb3JtXyUzQ2lucHV0JTNFX3R5cGVzKS5cbiAgICogQGRlZmF1bHQgJ3RleHQnXG4gICAqL1xuICB0eXBlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIHZhbHVlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQsIHJlcXVpcmVkIGZvciBhIGNvbnRyb2xsZWQgY29tcG9uZW50LlxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5hbnlcbn0gOiB2b2lkIDA7XG5GaWxsZWRJbnB1dC5tdWlOYW1lID0gJ0lucHV0JztcbmV4cG9ydCBkZWZhdWx0IEZpbGxlZElucHV0OyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0Rm9ybUNvbnRyb2xVdGlsaXR5Q2xhc3NlcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpRm9ybUNvbnRyb2wnLCBzbG90KTtcbn1cbmNvbnN0IGZvcm1Db250cm9sQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUZvcm1Db250cm9sJywgWydyb290JywgJ21hcmdpbk5vbmUnLCAnbWFyZ2luTm9ybWFsJywgJ21hcmdpbkRlbnNlJywgJ2Z1bGxXaWR0aCcsICdkaXNhYmxlZCddKTtcbmV4cG9ydCBkZWZhdWx0IGZvcm1Db250cm9sQ2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbG9yXCIsIFwiY29tcG9uZW50XCIsIFwiZGlzYWJsZWRcIiwgXCJlcnJvclwiLCBcImZvY3VzZWRcIiwgXCJmdWxsV2lkdGhcIiwgXCJoaWRkZW5MYWJlbFwiLCBcIm1hcmdpblwiLCBcInJlcXVpcmVkXCIsIFwic2l6ZVwiLCBcInZhcmlhbnRcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHsgaXNGaWxsZWQsIGlzQWRvcm5lZFN0YXJ0IH0gZnJvbSAnLi4vSW5wdXRCYXNlL3V0aWxzJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IGlzTXVpRWxlbWVudCBmcm9tICcuLi91dGlscy9pc011aUVsZW1lbnQnO1xuaW1wb3J0IEZvcm1Db250cm9sQ29udGV4dCBmcm9tICcuL0Zvcm1Db250cm9sQ29udGV4dCc7XG5pbXBvcnQgeyBnZXRGb3JtQ29udHJvbFV0aWxpdHlDbGFzc2VzIH0gZnJvbSAnLi9mb3JtQ29udHJvbENsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIG1hcmdpbixcbiAgICBmdWxsV2lkdGhcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIG1hcmdpbiAhPT0gJ25vbmUnICYmIGBtYXJnaW4ke2NhcGl0YWxpemUobWFyZ2luKX1gLCBmdWxsV2lkdGggJiYgJ2Z1bGxXaWR0aCddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0Rm9ybUNvbnRyb2xVdGlsaXR5Q2xhc3NlcywgY2xhc3Nlcyk7XG59O1xuY29uc3QgRm9ybUNvbnRyb2xSb290ID0gc3R5bGVkKCdkaXYnLCB7XG4gIG5hbWU6ICdNdWlGb3JtQ29udHJvbCcsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6ICh7XG4gICAgb3duZXJTdGF0ZVxuICB9LCBzdHlsZXMpID0+IHtcbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIHN0eWxlcy5yb290LCBzdHlsZXNbYG1hcmdpbiR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLm1hcmdpbil9YF0sIG93bmVyU3RhdGUuZnVsbFdpZHRoICYmIHN0eWxlcy5mdWxsV2lkdGgpO1xuICB9XG59KSgoe1xuICBvd25lclN0YXRlXG59KSA9PiBfZXh0ZW5kcyh7XG4gIGRpc3BsYXk6ICdpbmxpbmUtZmxleCcsXG4gIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgLy8gUmVzZXQgZmllbGRzZXQgZGVmYXVsdCBzdHlsZS5cbiAgbWluV2lkdGg6IDAsXG4gIHBhZGRpbmc6IDAsXG4gIG1hcmdpbjogMCxcbiAgYm9yZGVyOiAwLFxuICB2ZXJ0aWNhbEFsaWduOiAndG9wJ1xufSwgb3duZXJTdGF0ZS5tYXJnaW4gPT09ICdub3JtYWwnICYmIHtcbiAgbWFyZ2luVG9wOiAxNixcbiAgbWFyZ2luQm90dG9tOiA4XG59LCBvd25lclN0YXRlLm1hcmdpbiA9PT0gJ2RlbnNlJyAmJiB7XG4gIG1hcmdpblRvcDogOCxcbiAgbWFyZ2luQm90dG9tOiA0XG59LCBvd25lclN0YXRlLmZ1bGxXaWR0aCAmJiB7XG4gIHdpZHRoOiAnMTAwJSdcbn0pKTtcblxuLyoqXG4gKiBQcm92aWRlcyBjb250ZXh0IHN1Y2ggYXMgZmlsbGVkL2ZvY3VzZWQvZXJyb3IvcmVxdWlyZWQgZm9yIGZvcm0gaW5wdXRzLlxuICogUmVseWluZyBvbiB0aGUgY29udGV4dCBwcm92aWRlcyBoaWdoIGZsZXhpYmlsaXR5IGFuZCBlbnN1cmVzIHRoYXQgdGhlIHN0YXRlIGFsd2F5cyBzdGF5c1xuICogY29uc2lzdGVudCBhY3Jvc3MgdGhlIGNoaWxkcmVuIG9mIHRoZSBgRm9ybUNvbnRyb2xgLlxuICogVGhpcyBjb250ZXh0IGlzIHVzZWQgYnkgdGhlIGZvbGxvd2luZyBjb21wb25lbnRzOlxuICpcbiAqICAtIEZvcm1MYWJlbFxuICogIC0gRm9ybUhlbHBlclRleHRcbiAqICAtIElucHV0XG4gKiAgLSBJbnB1dExhYmVsXG4gKlxuICogWW91IGNhbiBmaW5kIG9uZSBjb21wb3NpdGlvbiBleGFtcGxlIGJlbG93IGFuZCBtb3JlIGdvaW5nIHRvIFt0aGUgZGVtb3NdKC9tYXRlcmlhbC11aS9yZWFjdC10ZXh0LWZpZWxkLyNjb21wb25lbnRzKS5cbiAqXG4gKiBgYGBqc3hcbiAqIDxGb3JtQ29udHJvbD5cbiAqICAgPElucHV0TGFiZWwgaHRtbEZvcj1cIm15LWlucHV0XCI+RW1haWwgYWRkcmVzczwvSW5wdXRMYWJlbD5cbiAqICAgPElucHV0IGlkPVwibXktaW5wdXRcIiBhcmlhLWRlc2NyaWJlZGJ5PVwibXktaGVscGVyLXRleHRcIiAvPlxuICogICA8Rm9ybUhlbHBlclRleHQgaWQ9XCJteS1oZWxwZXItdGV4dFwiPldlJ2xsIG5ldmVyIHNoYXJlIHlvdXIgZW1haWwuPC9Gb3JtSGVscGVyVGV4dD5cbiAqIDwvRm9ybUNvbnRyb2w+XG4gKiBgYGBcbiAqXG4gKiDimqDvuI8gT25seSBvbmUgYElucHV0QmFzZWAgY2FuIGJlIHVzZWQgd2l0aGluIGEgRm9ybUNvbnRyb2wgYmVjYXVzZSBpdCBjcmVhdGVzIHZpc3VhbCBpbmNvbnNpc3RlbmNpZXMuXG4gKiBGb3IgaW5zdGFuY2UsIG9ubHkgb25lIGlucHV0IGNhbiBiZSBmb2N1c2VkIGF0IHRoZSBzYW1lIHRpbWUsIHRoZSBzdGF0ZSBzaG91bGRuJ3QgYmUgc2hhcmVkLlxuICovXG5jb25zdCBGb3JtQ29udHJvbCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEZvcm1Db250cm9sKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlGb3JtQ29udHJvbCdcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lLFxuICAgICAgY29sb3IgPSAncHJpbWFyeScsXG4gICAgICBjb21wb25lbnQgPSAnZGl2JyxcbiAgICAgIGRpc2FibGVkID0gZmFsc2UsXG4gICAgICBlcnJvciA9IGZhbHNlLFxuICAgICAgZm9jdXNlZDogdmlzdWFsbHlGb2N1c2VkLFxuICAgICAgZnVsbFdpZHRoID0gZmFsc2UsXG4gICAgICBoaWRkZW5MYWJlbCA9IGZhbHNlLFxuICAgICAgbWFyZ2luID0gJ25vbmUnLFxuICAgICAgcmVxdWlyZWQgPSBmYWxzZSxcbiAgICAgIHNpemUgPSAnbWVkaXVtJyxcbiAgICAgIHZhcmlhbnQgPSAnb3V0bGluZWQnXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjb2xvcixcbiAgICBjb21wb25lbnQsXG4gICAgZGlzYWJsZWQsXG4gICAgZXJyb3IsXG4gICAgZnVsbFdpZHRoLFxuICAgIGhpZGRlbkxhYmVsLFxuICAgIG1hcmdpbixcbiAgICByZXF1aXJlZCxcbiAgICBzaXplLFxuICAgIHZhcmlhbnRcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgY29uc3QgW2Fkb3JuZWRTdGFydCwgc2V0QWRvcm5lZFN0YXJ0XSA9IFJlYWN0LnVzZVN0YXRlKCgpID0+IHtcbiAgICAvLyBXZSBuZWVkIHRvIGl0ZXJhdGUgdGhyb3VnaCB0aGUgY2hpbGRyZW4gYW5kIGZpbmQgdGhlIElucHV0IGluIG9yZGVyXG4gICAgLy8gdG8gZnVsbHkgc3VwcG9ydCBzZXJ2ZXItc2lkZSByZW5kZXJpbmcuXG4gICAgbGV0IGluaXRpYWxBZG9ybmVkU3RhcnQgPSBmYWxzZTtcbiAgICBpZiAoY2hpbGRyZW4pIHtcbiAgICAgIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIGNoaWxkID0+IHtcbiAgICAgICAgaWYgKCFpc011aUVsZW1lbnQoY2hpbGQsIFsnSW5wdXQnLCAnU2VsZWN0J10pKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGlucHV0ID0gaXNNdWlFbGVtZW50KGNoaWxkLCBbJ1NlbGVjdCddKSA/IGNoaWxkLnByb3BzLmlucHV0IDogY2hpbGQ7XG4gICAgICAgIGlmIChpbnB1dCAmJiBpc0Fkb3JuZWRTdGFydChpbnB1dC5wcm9wcykpIHtcbiAgICAgICAgICBpbml0aWFsQWRvcm5lZFN0YXJ0ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBpbml0aWFsQWRvcm5lZFN0YXJ0O1xuICB9KTtcbiAgY29uc3QgW2ZpbGxlZCwgc2V0RmlsbGVkXSA9IFJlYWN0LnVzZVN0YXRlKCgpID0+IHtcbiAgICAvLyBXZSBuZWVkIHRvIGl0ZXJhdGUgdGhyb3VnaCB0aGUgY2hpbGRyZW4gYW5kIGZpbmQgdGhlIElucHV0IGluIG9yZGVyXG4gICAgLy8gdG8gZnVsbHkgc3VwcG9ydCBzZXJ2ZXItc2lkZSByZW5kZXJpbmcuXG4gICAgbGV0IGluaXRpYWxGaWxsZWQgPSBmYWxzZTtcbiAgICBpZiAoY2hpbGRyZW4pIHtcbiAgICAgIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIGNoaWxkID0+IHtcbiAgICAgICAgaWYgKCFpc011aUVsZW1lbnQoY2hpbGQsIFsnSW5wdXQnLCAnU2VsZWN0J10pKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0ZpbGxlZChjaGlsZC5wcm9wcywgdHJ1ZSkgfHwgaXNGaWxsZWQoY2hpbGQucHJvcHMuaW5wdXRQcm9wcywgdHJ1ZSkpIHtcbiAgICAgICAgICBpbml0aWFsRmlsbGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBpbml0aWFsRmlsbGVkO1xuICB9KTtcbiAgY29uc3QgW2ZvY3VzZWRTdGF0ZSwgc2V0Rm9jdXNlZF0gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XG4gIGlmIChkaXNhYmxlZCAmJiBmb2N1c2VkU3RhdGUpIHtcbiAgICBzZXRGb2N1c2VkKGZhbHNlKTtcbiAgfVxuICBjb25zdCBmb2N1c2VkID0gdmlzdWFsbHlGb2N1c2VkICE9PSB1bmRlZmluZWQgJiYgIWRpc2FibGVkID8gdmlzdWFsbHlGb2N1c2VkIDogZm9jdXNlZFN0YXRlO1xuICBsZXQgcmVnaXN0ZXJFZmZlY3Q7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgY29uc3QgcmVnaXN0ZXJlZElucHV0ID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcbiAgICByZWdpc3RlckVmZmVjdCA9ICgpID0+IHtcbiAgICAgIGlmIChyZWdpc3RlcmVkSW5wdXQuY3VycmVudCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFsnTVVJOiBUaGVyZSBhcmUgbXVsdGlwbGUgYElucHV0QmFzZWAgY29tcG9uZW50cyBpbnNpZGUgYSBGb3JtQ29udHJvbC4nLCAnVGhpcyBjcmVhdGVzIHZpc3VhbCBpbmNvbnNpc3RlbmNpZXMsIG9ubHkgdXNlIG9uZSBgSW5wdXRCYXNlYC4nXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgICByZWdpc3RlcmVkSW5wdXQuY3VycmVudCA9IHRydWU7XG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICByZWdpc3RlcmVkSW5wdXQuY3VycmVudCA9IGZhbHNlO1xuICAgICAgfTtcbiAgICB9O1xuICB9XG4gIGNvbnN0IGNoaWxkQ29udGV4dCA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBhZG9ybmVkU3RhcnQsXG4gICAgICBzZXRBZG9ybmVkU3RhcnQsXG4gICAgICBjb2xvcixcbiAgICAgIGRpc2FibGVkLFxuICAgICAgZXJyb3IsXG4gICAgICBmaWxsZWQsXG4gICAgICBmb2N1c2VkLFxuICAgICAgZnVsbFdpZHRoLFxuICAgICAgaGlkZGVuTGFiZWwsXG4gICAgICBzaXplLFxuICAgICAgb25CbHVyOiAoKSA9PiB7XG4gICAgICAgIHNldEZvY3VzZWQoZmFsc2UpO1xuICAgICAgfSxcbiAgICAgIG9uRW1wdHk6ICgpID0+IHtcbiAgICAgICAgc2V0RmlsbGVkKGZhbHNlKTtcbiAgICAgIH0sXG4gICAgICBvbkZpbGxlZDogKCkgPT4ge1xuICAgICAgICBzZXRGaWxsZWQodHJ1ZSk7XG4gICAgICB9LFxuICAgICAgb25Gb2N1czogKCkgPT4ge1xuICAgICAgICBzZXRGb2N1c2VkKHRydWUpO1xuICAgICAgfSxcbiAgICAgIHJlZ2lzdGVyRWZmZWN0LFxuICAgICAgcmVxdWlyZWQsXG4gICAgICB2YXJpYW50XG4gICAgfTtcbiAgfSwgW2Fkb3JuZWRTdGFydCwgY29sb3IsIGRpc2FibGVkLCBlcnJvciwgZmlsbGVkLCBmb2N1c2VkLCBmdWxsV2lkdGgsIGhpZGRlbkxhYmVsLCByZWdpc3RlckVmZmVjdCwgcmVxdWlyZWQsIHNpemUsIHZhcmlhbnRdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KEZvcm1Db250cm9sQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBjaGlsZENvbnRleHQsXG4gICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9fanN4KEZvcm1Db250cm9sUm9vdCwgX2V4dGVuZHMoe1xuICAgICAgYXM6IGNvbXBvbmVudCxcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgICAgcmVmOiByZWZcbiAgICB9LCBvdGhlciwge1xuICAgICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gICAgfSkpXG4gIH0pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBGb3JtQ29udHJvbC5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LlxuICAgKiBJdCBzdXBwb3J0cyBib3RoIGRlZmF1bHQgYW5kIGN1c3RvbSB0aGVtZSBjb2xvcnMsIHdoaWNoIGNhbiBiZSBhZGRlZCBhcyBzaG93biBpbiB0aGVcbiAgICogW3BhbGV0dGUgY3VzdG9taXphdGlvbiBndWlkZV0oaHR0cHM6Ly9tdWkuY29tL21hdGVyaWFsLXVpL2N1c3RvbWl6YXRpb24vcGFsZXR0ZS8jY3VzdG9tLWNvbG9ycykuXG4gICAqIEBkZWZhdWx0ICdwcmltYXJ5J1xuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsncHJpbWFyeScsICdzZWNvbmRhcnknLCAnZXJyb3InLCAnaW5mbycsICdzdWNjZXNzJywgJ3dhcm5pbmcnXSksIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGFiZWwsIGlucHV0IGFuZCBoZWxwZXIgdGV4dCBzaG91bGQgYmUgZGlzcGxheWVkIGluIGEgZGlzYWJsZWQgc3RhdGUuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsYWJlbCBpcyBkaXNwbGF5ZWQgaW4gYW4gZXJyb3Igc3RhdGUuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBlcnJvcjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgZGlzcGxheWVkIGluIGZvY3VzZWQgc3RhdGUuXG4gICAqL1xuICBmb2N1c2VkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCB3aWxsIHRha2UgdXAgdGhlIGZ1bGwgd2lkdGggb2YgaXRzIGNvbnRhaW5lci5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGZ1bGxXaWR0aDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsYWJlbCBpcyBoaWRkZW4uXG4gICAqIFRoaXMgaXMgdXNlZCB0byBpbmNyZWFzZSBkZW5zaXR5IGZvciBhIGBGaWxsZWRJbnB1dGAuXG4gICAqIEJlIHN1cmUgdG8gYWRkIGBhcmlhLWxhYmVsYCB0byB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgaGlkZGVuTGFiZWw6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYGRlbnNlYCBvciBgbm9ybWFsYCwgd2lsbCBhZGp1c3QgdmVydGljYWwgc3BhY2luZyBvZiB0aGlzIGFuZCBjb250YWluZWQgY29tcG9uZW50cy5cbiAgICogQGRlZmF1bHQgJ25vbmUnXG4gICAqL1xuICBtYXJnaW46IFByb3BUeXBlcy5vbmVPZihbJ2RlbnNlJywgJ25vbmUnLCAnbm9ybWFsJ10pLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGFiZWwgd2lsbCBpbmRpY2F0ZSB0aGF0IHRoZSBgaW5wdXRgIGlzIHJlcXVpcmVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgcmVxdWlyZWQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIHNpemUgb2YgdGhlIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQgJ21lZGl1bSdcbiAgICovXG4gIHNpemU6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnbWVkaXVtJywgJ3NtYWxsJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqIEBkZWZhdWx0ICdvdXRsaW5lZCdcbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ2ZpbGxlZCcsICdvdXRsaW5lZCcsICdzdGFuZGFyZCddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IEZvcm1Db250cm9sOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGNyZWF0ZVN0YWNrIH0gZnJvbSAnQG11aS9zeXN0ZW0nO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmNvbnN0IFN0YWNrID0gY3JlYXRlU3RhY2soe1xuICBjcmVhdGVTdHlsZWRDb21wb25lbnQ6IHN0eWxlZCgnZGl2Jywge1xuICAgIG5hbWU6ICdNdWlTdGFjaycsXG4gICAgc2xvdDogJ1Jvb3QnLFxuICAgIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLnJvb3RcbiAgfSksXG4gIHVzZVRoZW1lUHJvcHM6IGluUHJvcHMgPT4gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aVN0YWNrJ1xuICB9KVxufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTdGFjay5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBEZWZpbmVzIHRoZSBgZmxleC1kaXJlY3Rpb25gIHN0eWxlIHByb3BlcnR5LlxuICAgKiBJdCBpcyBhcHBsaWVkIGZvciBhbGwgc2NyZWVuIHNpemVzLlxuICAgKiBAZGVmYXVsdCAnY29sdW1uJ1xuICAgKi9cbiAgZGlyZWN0aW9uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydjb2x1bW4tcmV2ZXJzZScsICdjb2x1bW4nLCAncm93LXJldmVyc2UnLCAncm93J10pLCBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2YoWydjb2x1bW4tcmV2ZXJzZScsICdjb2x1bW4nLCAncm93LXJldmVyc2UnLCAncm93J10pKSwgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogQWRkIGFuIGVsZW1lbnQgYmV0d2VlbiBlYWNoIGNoaWxkLlxuICAgKi9cbiAgZGl2aWRlcjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBEZWZpbmVzIHRoZSBzcGFjZSBiZXR3ZWVuIGltbWVkaWF0ZSBjaGlsZHJlbi5cbiAgICogQGRlZmF1bHQgMFxuICAgKi9cbiAgc3BhY2luZzogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pKSwgUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wLCB3aGljaCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBDU1MgZmxleGJveCBgZ2FwYCBpcyB1c2VkIGluc3RlYWQgb2YgYXBwbHlpbmcgYG1hcmdpbmAgdG8gY2hpbGRyZW4uXG4gICAqXG4gICAqIFdoaWxlIENTUyBgZ2FwYCByZW1vdmVzIHRoZSBba25vd24gbGltaXRhdGlvbnNdKGh0dHBzOi8vbXVpLmNvbS9qb3ktdWkvcmVhY3Qtc3RhY2svI2xpbWl0YXRpb25zKSxcbiAgICogaXQgaXMgbm90IGZ1bGx5IHN1cHBvcnRlZCBpbiBzb21lIGJyb3dzZXJzLiBXZSByZWNvbW1lbmQgY2hlY2tpbmcgaHR0cHM6Ly9jYW5pdXNlLmNvbS8/c2VhcmNoPWZsZXglMjBnYXAgYmVmb3JlIHVzaW5nIHRoaXMgZmxhZy5cbiAgICpcbiAgICogVG8gZW5hYmxlIHRoaXMgZmxhZyBnbG9iYWxseSwgZm9sbG93IHRoZSBbdGhlbWUncyBkZWZhdWx0IHByb3BzXShodHRwczovL211aS5jb20vbWF0ZXJpYWwtdWkvY3VzdG9taXphdGlvbi90aGVtZS1jb21wb25lbnRzLyNkZWZhdWx0LXByb3BzKSBjb25maWd1cmF0aW9uLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgdXNlRmxleEdhcDogUHJvcFR5cGVzLmJvb2xcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBTdGFjazsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldEZvcm1IZWxwZXJUZXh0VXRpbGl0eUNsYXNzZXMoc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUZvcm1IZWxwZXJUZXh0Jywgc2xvdCk7XG59XG5jb25zdCBmb3JtSGVscGVyVGV4dENsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlGb3JtSGVscGVyVGV4dCcsIFsncm9vdCcsICdlcnJvcicsICdkaXNhYmxlZCcsICdzaXplU21hbGwnLCAnc2l6ZU1lZGl1bScsICdjb250YWluZWQnLCAnZm9jdXNlZCcsICdmaWxsZWQnLCAncmVxdWlyZWQnXSk7XG5leHBvcnQgZGVmYXVsdCBmb3JtSGVscGVyVGV4dENsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xudmFyIF9zcGFuO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJkaXNhYmxlZFwiLCBcImVycm9yXCIsIFwiZmlsbGVkXCIsIFwiZm9jdXNlZFwiLCBcIm1hcmdpblwiLCBcInJlcXVpcmVkXCIsIFwidmFyaWFudFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCBmb3JtQ29udHJvbFN0YXRlIGZyb20gJy4uL0Zvcm1Db250cm9sL2Zvcm1Db250cm9sU3RhdGUnO1xuaW1wb3J0IHVzZUZvcm1Db250cm9sIGZyb20gJy4uL0Zvcm1Db250cm9sL3VzZUZvcm1Db250cm9sJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCBmb3JtSGVscGVyVGV4dENsYXNzZXMsIHsgZ2V0Rm9ybUhlbHBlclRleHRVdGlsaXR5Q2xhc3NlcyB9IGZyb20gJy4vZm9ybUhlbHBlclRleHRDbGFzc2VzJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3NlcyxcbiAgICBjb250YWluZWQsXG4gICAgc2l6ZSxcbiAgICBkaXNhYmxlZCxcbiAgICBlcnJvcixcbiAgICBmaWxsZWQsXG4gICAgZm9jdXNlZCxcbiAgICByZXF1aXJlZFxuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgZGlzYWJsZWQgJiYgJ2Rpc2FibGVkJywgZXJyb3IgJiYgJ2Vycm9yJywgc2l6ZSAmJiBgc2l6ZSR7Y2FwaXRhbGl6ZShzaXplKX1gLCBjb250YWluZWQgJiYgJ2NvbnRhaW5lZCcsIGZvY3VzZWQgJiYgJ2ZvY3VzZWQnLCBmaWxsZWQgJiYgJ2ZpbGxlZCcsIHJlcXVpcmVkICYmICdyZXF1aXJlZCddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0Rm9ybUhlbHBlclRleHRVdGlsaXR5Q2xhc3NlcywgY2xhc3Nlcyk7XG59O1xuY29uc3QgRm9ybUhlbHBlclRleHRSb290ID0gc3R5bGVkKCdwJywge1xuICBuYW1lOiAnTXVpRm9ybUhlbHBlclRleHQnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgb3duZXJTdGF0ZS5zaXplICYmIHN0eWxlc1tgc2l6ZSR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLnNpemUpfWBdLCBvd25lclN0YXRlLmNvbnRhaW5lZCAmJiBzdHlsZXMuY29udGFpbmVkLCBvd25lclN0YXRlLmZpbGxlZCAmJiBzdHlsZXMuZmlsbGVkXTtcbiAgfVxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHtcbiAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLnRleHQuc2Vjb25kYXJ5XG59LCB0aGVtZS50eXBvZ3JhcGh5LmNhcHRpb24sIHtcbiAgdGV4dEFsaWduOiAnbGVmdCcsXG4gIG1hcmdpblRvcDogMyxcbiAgbWFyZ2luUmlnaHQ6IDAsXG4gIG1hcmdpbkJvdHRvbTogMCxcbiAgbWFyZ2luTGVmdDogMCxcbiAgW2AmLiR7Zm9ybUhlbHBlclRleHRDbGFzc2VzLmRpc2FibGVkfWBdOiB7XG4gICAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLnRleHQuZGlzYWJsZWRcbiAgfSxcbiAgW2AmLiR7Zm9ybUhlbHBlclRleHRDbGFzc2VzLmVycm9yfWBdOiB7XG4gICAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmVycm9yLm1haW5cbiAgfVxufSwgb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnICYmIHtcbiAgbWFyZ2luVG9wOiA0XG59LCBvd25lclN0YXRlLmNvbnRhaW5lZCAmJiB7XG4gIG1hcmdpbkxlZnQ6IDE0LFxuICBtYXJnaW5SaWdodDogMTRcbn0pKTtcbmNvbnN0IEZvcm1IZWxwZXJUZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gRm9ybUhlbHBlclRleHQoaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aUZvcm1IZWxwZXJUZXh0J1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUsXG4gICAgICBjb21wb25lbnQgPSAncCdcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3QgbXVpRm9ybUNvbnRyb2wgPSB1c2VGb3JtQ29udHJvbCgpO1xuICBjb25zdCBmY3MgPSBmb3JtQ29udHJvbFN0YXRlKHtcbiAgICBwcm9wcyxcbiAgICBtdWlGb3JtQ29udHJvbCxcbiAgICBzdGF0ZXM6IFsndmFyaWFudCcsICdzaXplJywgJ2Rpc2FibGVkJywgJ2Vycm9yJywgJ2ZpbGxlZCcsICdmb2N1c2VkJywgJ3JlcXVpcmVkJ11cbiAgfSk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjb21wb25lbnQsXG4gICAgY29udGFpbmVkOiBmY3MudmFyaWFudCA9PT0gJ2ZpbGxlZCcgfHwgZmNzLnZhcmlhbnQgPT09ICdvdXRsaW5lZCcsXG4gICAgdmFyaWFudDogZmNzLnZhcmlhbnQsXG4gICAgc2l6ZTogZmNzLnNpemUsXG4gICAgZGlzYWJsZWQ6IGZjcy5kaXNhYmxlZCxcbiAgICBlcnJvcjogZmNzLmVycm9yLFxuICAgIGZpbGxlZDogZmNzLmZpbGxlZCxcbiAgICBmb2N1c2VkOiBmY3MuZm9jdXNlZCxcbiAgICByZXF1aXJlZDogZmNzLnJlcXVpcmVkXG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChGb3JtSGVscGVyVGV4dFJvb3QsIF9leHRlbmRzKHtcbiAgICBhczogY29tcG9uZW50LFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciwge1xuICAgIGNoaWxkcmVuOiBjaGlsZHJlbiA9PT0gJyAnID8gLy8gbm90cmFuc2xhdGUgbmVlZGVkIHdoaWxlIEdvb2dsZSBUcmFuc2xhdGUgd2lsbCBub3QgZml4IHplcm8td2lkdGggc3BhY2UgaXNzdWVcbiAgICBfc3BhbiB8fCAoX3NwYW4gPSAvKiNfX1BVUkVfXyovX2pzeChcInNwYW5cIiwge1xuICAgICAgY2xhc3NOYW1lOiBcIm5vdHJhbnNsYXRlXCIsXG4gICAgICBjaGlsZHJlbjogXCJcXHUyMDBCXCJcbiAgICB9KSkgOiBjaGlsZHJlblxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEZvcm1IZWxwZXJUZXh0LnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqXG4gICAqIElmIGAnICdgIGlzIHByb3ZpZGVkLCB0aGUgY29tcG9uZW50IHJlc2VydmVzIG9uZSBsaW5lIGhlaWdodCBmb3IgZGlzcGxheWluZyBhIGZ1dHVyZSBtZXNzYWdlLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaGVscGVyIHRleHQgc2hvdWxkIGJlIGRpc3BsYXllZCBpbiBhIGRpc2FibGVkIHN0YXRlLlxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCBoZWxwZXIgdGV4dCBzaG91bGQgYmUgZGlzcGxheWVkIGluIGFuIGVycm9yIHN0YXRlLlxuICAgKi9cbiAgZXJyb3I6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaGVscGVyIHRleHQgc2hvdWxkIHVzZSBmaWxsZWQgY2xhc3NlcyBrZXkuXG4gICAqL1xuICBmaWxsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaGVscGVyIHRleHQgc2hvdWxkIHVzZSBmb2N1c2VkIGNsYXNzZXMga2V5LlxuICAgKi9cbiAgZm9jdXNlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgZGVuc2VgLCB3aWxsIGFkanVzdCB2ZXJ0aWNhbCBzcGFjaW5nLiBUaGlzIGlzIG5vcm1hbGx5IG9idGFpbmVkIHZpYSBjb250ZXh0IGZyb21cbiAgICogRm9ybUNvbnRyb2wuXG4gICAqL1xuICBtYXJnaW46IFByb3BUeXBlcy5vbmVPZihbJ2RlbnNlJ10pLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaGVscGVyIHRleHQgc2hvdWxkIHVzZSByZXF1aXJlZCBjbGFzc2VzIGtleS5cbiAgICovXG4gIHJlcXVpcmVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS5cbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnZmlsbGVkJywgJ291dGxpbmVkJywgJ3N0YW5kYXJkJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBGb3JtSGVscGVyVGV4dDsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldEZvcm1MYWJlbFV0aWxpdHlDbGFzc2VzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlGb3JtTGFiZWwnLCBzbG90KTtcbn1cbmNvbnN0IGZvcm1MYWJlbENsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlGb3JtTGFiZWwnLCBbJ3Jvb3QnLCAnY29sb3JTZWNvbmRhcnknLCAnZm9jdXNlZCcsICdkaXNhYmxlZCcsICdlcnJvcicsICdmaWxsZWQnLCAncmVxdWlyZWQnLCAnYXN0ZXJpc2snXSk7XG5leHBvcnQgZGVmYXVsdCBmb3JtTGFiZWxDbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29sb3JcIiwgXCJjb21wb25lbnRcIiwgXCJkaXNhYmxlZFwiLCBcImVycm9yXCIsIFwiZmlsbGVkXCIsIFwiZm9jdXNlZFwiLCBcInJlcXVpcmVkXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IGZvcm1Db250cm9sU3RhdGUgZnJvbSAnLi4vRm9ybUNvbnRyb2wvZm9ybUNvbnRyb2xTdGF0ZSc7XG5pbXBvcnQgdXNlRm9ybUNvbnRyb2wgZnJvbSAnLi4vRm9ybUNvbnRyb2wvdXNlRm9ybUNvbnRyb2wnO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IGZvcm1MYWJlbENsYXNzZXMsIHsgZ2V0Rm9ybUxhYmVsVXRpbGl0eUNsYXNzZXMgfSBmcm9tICcuL2Zvcm1MYWJlbENsYXNzZXMnO1xuaW1wb3J0IHsganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXMsXG4gICAgY29sb3IsXG4gICAgZm9jdXNlZCxcbiAgICBkaXNhYmxlZCxcbiAgICBlcnJvcixcbiAgICBmaWxsZWQsXG4gICAgcmVxdWlyZWRcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIGBjb2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YCwgZGlzYWJsZWQgJiYgJ2Rpc2FibGVkJywgZXJyb3IgJiYgJ2Vycm9yJywgZmlsbGVkICYmICdmaWxsZWQnLCBmb2N1c2VkICYmICdmb2N1c2VkJywgcmVxdWlyZWQgJiYgJ3JlcXVpcmVkJ10sXG4gICAgYXN0ZXJpc2s6IFsnYXN0ZXJpc2snLCBlcnJvciAmJiAnZXJyb3InXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldEZvcm1MYWJlbFV0aWxpdHlDbGFzc2VzLCBjbGFzc2VzKTtcbn07XG5leHBvcnQgY29uc3QgRm9ybUxhYmVsUm9vdCA9IHN0eWxlZCgnbGFiZWwnLCB7XG4gIG5hbWU6ICdNdWlGb3JtTGFiZWwnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAoe1xuICAgIG93bmVyU3RhdGVcbiAgfSwgc3R5bGVzKSA9PiB7XG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBzdHlsZXMucm9vdCwgb3duZXJTdGF0ZS5jb2xvciA9PT0gJ3NlY29uZGFyeScgJiYgc3R5bGVzLmNvbG9yU2Vjb25kYXJ5LCBvd25lclN0YXRlLmZpbGxlZCAmJiBzdHlsZXMuZmlsbGVkKTtcbiAgfVxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHtcbiAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLnRleHQuc2Vjb25kYXJ5XG59LCB0aGVtZS50eXBvZ3JhcGh5LmJvZHkxLCB7XG4gIGxpbmVIZWlnaHQ6ICcxLjQzNzVlbScsXG4gIHBhZGRpbmc6IDAsXG4gIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICBbYCYuJHtmb3JtTGFiZWxDbGFzc2VzLmZvY3VzZWR9YF06IHtcbiAgICBjb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpblxuICB9LFxuICBbYCYuJHtmb3JtTGFiZWxDbGFzc2VzLmRpc2FibGVkfWBdOiB7XG4gICAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLnRleHQuZGlzYWJsZWRcbiAgfSxcbiAgW2AmLiR7Zm9ybUxhYmVsQ2xhc3Nlcy5lcnJvcn1gXToge1xuICAgIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5lcnJvci5tYWluXG4gIH1cbn0pKTtcbmNvbnN0IEFzdGVyaXNrQ29tcG9uZW50ID0gc3R5bGVkKCdzcGFuJywge1xuICBuYW1lOiAnTXVpRm9ybUxhYmVsJyxcbiAgc2xvdDogJ0FzdGVyaXNrJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMuYXN0ZXJpc2tcbn0pKCh7XG4gIHRoZW1lXG59KSA9PiAoe1xuICBbYCYuJHtmb3JtTGFiZWxDbGFzc2VzLmVycm9yfWBdOiB7XG4gICAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmVycm9yLm1haW5cbiAgfVxufSkpO1xuY29uc3QgRm9ybUxhYmVsID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gRm9ybUxhYmVsKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlGb3JtTGFiZWwnXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBjaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNvbXBvbmVudCA9ICdsYWJlbCdcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3QgbXVpRm9ybUNvbnRyb2wgPSB1c2VGb3JtQ29udHJvbCgpO1xuICBjb25zdCBmY3MgPSBmb3JtQ29udHJvbFN0YXRlKHtcbiAgICBwcm9wcyxcbiAgICBtdWlGb3JtQ29udHJvbCxcbiAgICBzdGF0ZXM6IFsnY29sb3InLCAncmVxdWlyZWQnLCAnZm9jdXNlZCcsICdkaXNhYmxlZCcsICdlcnJvcicsICdmaWxsZWQnXVxuICB9KTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGNvbG9yOiBmY3MuY29sb3IgfHwgJ3ByaW1hcnknLFxuICAgIGNvbXBvbmVudCxcbiAgICBkaXNhYmxlZDogZmNzLmRpc2FibGVkLFxuICAgIGVycm9yOiBmY3MuZXJyb3IsXG4gICAgZmlsbGVkOiBmY3MuZmlsbGVkLFxuICAgIGZvY3VzZWQ6IGZjcy5mb2N1c2VkLFxuICAgIHJlcXVpcmVkOiBmY3MucmVxdWlyZWRcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4cyhGb3JtTGFiZWxSb290LCBfZXh0ZW5kcyh7XG4gICAgYXM6IGNvbXBvbmVudCxcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIsIHtcbiAgICBjaGlsZHJlbjogW2NoaWxkcmVuLCBmY3MucmVxdWlyZWQgJiYgLyojX19QVVJFX18qL19qc3hzKEFzdGVyaXNrQ29tcG9uZW50LCB7XG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgXCJhcmlhLWhpZGRlblwiOiB0cnVlLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLmFzdGVyaXNrLFxuICAgICAgY2hpbGRyZW46IFtcIlxcdTIwMDlcIiwgJyonXVxuICAgIH0pXVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEZvcm1MYWJlbC5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LlxuICAgKiBJdCBzdXBwb3J0cyBib3RoIGRlZmF1bHQgYW5kIGN1c3RvbSB0aGVtZSBjb2xvcnMsIHdoaWNoIGNhbiBiZSBhZGRlZCBhcyBzaG93biBpbiB0aGVcbiAgICogW3BhbGV0dGUgY3VzdG9taXphdGlvbiBndWlkZV0oaHR0cHM6Ly9tdWkuY29tL21hdGVyaWFsLXVpL2N1c3RvbWl6YXRpb24vcGFsZXR0ZS8jY3VzdG9tLWNvbG9ycykuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydlcnJvcicsICdpbmZvJywgJ3ByaW1hcnknLCAnc2Vjb25kYXJ5JywgJ3N1Y2Nlc3MnLCAnd2FybmluZyddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsYWJlbCBzaG91bGQgYmUgZGlzcGxheWVkIGluIGEgZGlzYWJsZWQgc3RhdGUuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsYWJlbCBpcyBkaXNwbGF5ZWQgaW4gYW4gZXJyb3Igc3RhdGUuXG4gICAqL1xuICBlcnJvcjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsYWJlbCBzaG91bGQgdXNlIGZpbGxlZCBjbGFzc2VzIGtleS5cbiAgICovXG4gIGZpbGxlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBpbnB1dCBvZiB0aGlzIGxhYmVsIGlzIGZvY3VzZWQgKHVzZWQgYnkgYEZvcm1Hcm91cGAgY29tcG9uZW50cykuXG4gICAqL1xuICBmb2N1c2VkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxhYmVsIHdpbGwgaW5kaWNhdGUgdGhhdCB0aGUgYGlucHV0YCBpcyByZXF1aXJlZC5cbiAgICovXG4gIHJlcXVpcmVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IEZvcm1MYWJlbDsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5jb25zdCBHcmlkQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KCk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBHcmlkQ29udGV4dC5kaXNwbGF5TmFtZSA9ICdHcmlkQ29udGV4dCc7XG59XG5leHBvcnQgZGVmYXVsdCBHcmlkQ29udGV4dDsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldEdyaWRVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUdyaWQnLCBzbG90KTtcbn1cbmNvbnN0IFNQQUNJTkdTID0gWzAsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwXTtcbmNvbnN0IERJUkVDVElPTlMgPSBbJ2NvbHVtbi1yZXZlcnNlJywgJ2NvbHVtbicsICdyb3ctcmV2ZXJzZScsICdyb3cnXTtcbmNvbnN0IFdSQVBTID0gWydub3dyYXAnLCAnd3JhcC1yZXZlcnNlJywgJ3dyYXAnXTtcbmNvbnN0IEdSSURfU0laRVMgPSBbJ2F1dG8nLCB0cnVlLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEsIDEyXTtcbmNvbnN0IGdyaWRDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpR3JpZCcsIFsncm9vdCcsICdjb250YWluZXInLCAnaXRlbScsICd6ZXJvTWluV2lkdGgnLFxuLy8gc3BhY2luZ3Ncbi4uLlNQQUNJTkdTLm1hcChzcGFjaW5nID0+IGBzcGFjaW5nLXhzLSR7c3BhY2luZ31gKSxcbi8vIGRpcmVjdGlvbiB2YWx1ZXNcbi4uLkRJUkVDVElPTlMubWFwKGRpcmVjdGlvbiA9PiBgZGlyZWN0aW9uLXhzLSR7ZGlyZWN0aW9ufWApLFxuLy8gd3JhcCB2YWx1ZXNcbi4uLldSQVBTLm1hcCh3cmFwID0+IGB3cmFwLXhzLSR7d3JhcH1gKSxcbi8vIGdyaWQgc2l6ZXMgZm9yIGFsbCBicmVha3BvaW50c1xuLi4uR1JJRF9TSVpFUy5tYXAoc2l6ZSA9PiBgZ3JpZC14cy0ke3NpemV9YCksIC4uLkdSSURfU0laRVMubWFwKHNpemUgPT4gYGdyaWQtc20tJHtzaXplfWApLCAuLi5HUklEX1NJWkVTLm1hcChzaXplID0+IGBncmlkLW1kLSR7c2l6ZX1gKSwgLi4uR1JJRF9TSVpFUy5tYXAoc2l6ZSA9PiBgZ3JpZC1sZy0ke3NpemV9YCksIC4uLkdSSURfU0laRVMubWFwKHNpemUgPT4gYGdyaWQteGwtJHtzaXplfWApXSk7XG5leHBvcnQgZGVmYXVsdCBncmlkQ2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbi8vIEEgZ3JpZCBjb21wb25lbnQgdXNpbmcgdGhlIGZvbGxvd2luZyBsaWJzIGFzIGluc3BpcmF0aW9uLlxuLy9cbi8vIEZvciB0aGUgaW1wbGVtZW50YXRpb246XG4vLyAtIGh0dHBzOi8vZ2V0Ym9vdHN0cmFwLmNvbS9kb2NzLzQuMy9sYXlvdXQvZ3JpZC9cbi8vIC0gaHR0cHM6Ly9naXRodWIuY29tL2tyaXN0b2Zlcmpvc2VwaC9mbGV4Ym94Z3JpZC9ibG9iL21hc3Rlci9zcmMvY3NzL2ZsZXhib3hncmlkLmNzc1xuLy8gLSBodHRwczovL2dpdGh1Yi5jb20vcm95bGVlMDcwNC9yZWFjdC1mbGV4Ym94LWdyaWRcbi8vIC0gaHR0cHM6Ly9tYXRlcmlhbC5hbmd1bGFyanMub3JnL2xhdGVzdC9sYXlvdXQvaW50cm9kdWN0aW9uXG4vL1xuLy8gRm9sbG93IHRoaXMgZmxleGJveCBHdWlkZSB0byBiZXR0ZXIgdW5kZXJzdGFuZCB0aGUgdW5kZXJseWluZyBtb2RlbDpcbi8vIC0gaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9zbmlwcGV0cy9jc3MvYS1ndWlkZS10by1mbGV4Ym94L1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNsYXNzTmFtZVwiLCBcImNvbHVtbnNcIiwgXCJjb2x1bW5TcGFjaW5nXCIsIFwiY29tcG9uZW50XCIsIFwiY29udGFpbmVyXCIsIFwiZGlyZWN0aW9uXCIsIFwiaXRlbVwiLCBcInJvd1NwYWNpbmdcIiwgXCJzcGFjaW5nXCIsIFwid3JhcFwiLCBcInplcm9NaW5XaWR0aFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IGhhbmRsZUJyZWFrcG9pbnRzLCB1bnN0YWJsZV9yZXNvbHZlQnJlYWtwb2ludFZhbHVlcyBhcyByZXNvbHZlQnJlYWtwb2ludFZhbHVlcyB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmltcG9ydCB7IGV4dGVuZFN4UHJvcCB9IGZyb20gJ0BtdWkvc3lzdGVtL3N0eWxlRnVuY3Rpb25TeCc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgcmVxdWlyZVByb3BGYWN0b3J5IGZyb20gJy4uL3V0aWxzL3JlcXVpcmVQcm9wRmFjdG9yeSc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHVzZVRoZW1lUHJvcHMgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lUHJvcHMnO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZSc7XG5pbXBvcnQgR3JpZENvbnRleHQgZnJvbSAnLi9HcmlkQ29udGV4dCc7XG5pbXBvcnQgZ3JpZENsYXNzZXMsIHsgZ2V0R3JpZFV0aWxpdHlDbGFzcyB9IGZyb20gJy4vZ3JpZENsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmZ1bmN0aW9uIGdldE9mZnNldCh2YWwpIHtcbiAgY29uc3QgcGFyc2UgPSBwYXJzZUZsb2F0KHZhbCk7XG4gIHJldHVybiBgJHtwYXJzZX0ke1N0cmluZyh2YWwpLnJlcGxhY2UoU3RyaW5nKHBhcnNlKSwgJycpIHx8ICdweCd9YDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZUdyaWQoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkge1xuICBsZXQgc2l6ZTtcbiAgcmV0dXJuIHRoZW1lLmJyZWFrcG9pbnRzLmtleXMucmVkdWNlKChnbG9iYWxTdHlsZXMsIGJyZWFrcG9pbnQpID0+IHtcbiAgICAvLyBVc2Ugc2lkZSBlZmZlY3Qgb3ZlciBpbW11dGFiaWxpdHkgZm9yIGJldHRlciBwZXJmb3JtYW5jZS5cbiAgICBsZXQgc3R5bGVzID0ge307XG4gICAgaWYgKG93bmVyU3RhdGVbYnJlYWtwb2ludF0pIHtcbiAgICAgIHNpemUgPSBvd25lclN0YXRlW2JyZWFrcG9pbnRdO1xuICAgIH1cbiAgICBpZiAoIXNpemUpIHtcbiAgICAgIHJldHVybiBnbG9iYWxTdHlsZXM7XG4gICAgfVxuICAgIGlmIChzaXplID09PSB0cnVlKSB7XG4gICAgICAvLyBGb3IgdGhlIGF1dG8gbGF5b3V0aW5nXG4gICAgICBzdHlsZXMgPSB7XG4gICAgICAgIGZsZXhCYXNpczogMCxcbiAgICAgICAgZmxleEdyb3c6IDEsXG4gICAgICAgIG1heFdpZHRoOiAnMTAwJSdcbiAgICAgIH07XG4gICAgfSBlbHNlIGlmIChzaXplID09PSAnYXV0bycpIHtcbiAgICAgIHN0eWxlcyA9IHtcbiAgICAgICAgZmxleEJhc2lzOiAnYXV0bycsXG4gICAgICAgIGZsZXhHcm93OiAwLFxuICAgICAgICBmbGV4U2hyaW5rOiAwLFxuICAgICAgICBtYXhXaWR0aDogJ25vbmUnLFxuICAgICAgICB3aWR0aDogJ2F1dG8nXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBjb2x1bW5zQnJlYWtwb2ludFZhbHVlcyA9IHJlc29sdmVCcmVha3BvaW50VmFsdWVzKHtcbiAgICAgICAgdmFsdWVzOiBvd25lclN0YXRlLmNvbHVtbnMsXG4gICAgICAgIGJyZWFrcG9pbnRzOiB0aGVtZS5icmVha3BvaW50cy52YWx1ZXNcbiAgICAgIH0pO1xuICAgICAgY29uc3QgY29sdW1uVmFsdWUgPSB0eXBlb2YgY29sdW1uc0JyZWFrcG9pbnRWYWx1ZXMgPT09ICdvYmplY3QnID8gY29sdW1uc0JyZWFrcG9pbnRWYWx1ZXNbYnJlYWtwb2ludF0gOiBjb2x1bW5zQnJlYWtwb2ludFZhbHVlcztcbiAgICAgIGlmIChjb2x1bW5WYWx1ZSA9PT0gdW5kZWZpbmVkIHx8IGNvbHVtblZhbHVlID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBnbG9iYWxTdHlsZXM7XG4gICAgICB9XG4gICAgICAvLyBLZWVwIDcgc2lnbmlmaWNhbnQgbnVtYmVycy5cbiAgICAgIGNvbnN0IHdpZHRoID0gYCR7TWF0aC5yb3VuZChzaXplIC8gY29sdW1uVmFsdWUgKiAxMGU3KSAvIDEwZTV9JWA7XG4gICAgICBsZXQgbW9yZSA9IHt9O1xuICAgICAgaWYgKG93bmVyU3RhdGUuY29udGFpbmVyICYmIG93bmVyU3RhdGUuaXRlbSAmJiBvd25lclN0YXRlLmNvbHVtblNwYWNpbmcgIT09IDApIHtcbiAgICAgICAgY29uc3QgdGhlbWVTcGFjaW5nID0gdGhlbWUuc3BhY2luZyhvd25lclN0YXRlLmNvbHVtblNwYWNpbmcpO1xuICAgICAgICBpZiAodGhlbWVTcGFjaW5nICE9PSAnMHB4Jykge1xuICAgICAgICAgIGNvbnN0IGZ1bGxXaWR0aCA9IGBjYWxjKCR7d2lkdGh9ICsgJHtnZXRPZmZzZXQodGhlbWVTcGFjaW5nKX0pYDtcbiAgICAgICAgICBtb3JlID0ge1xuICAgICAgICAgICAgZmxleEJhc2lzOiBmdWxsV2lkdGgsXG4gICAgICAgICAgICBtYXhXaWR0aDogZnVsbFdpZHRoXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBDbG9zZSB0byB0aGUgYm9vdHN0cmFwIGltcGxlbWVudGF0aW9uOlxuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvOGZjY2FhMjQzOWU5N2VjNzJhNGI3ZGM0MmNjYzFmNjQ5NzkwYWRiMC9zY3NzL21peGlucy9fZ3JpZC5zY3NzI0w0MVxuICAgICAgc3R5bGVzID0gX2V4dGVuZHMoe1xuICAgICAgICBmbGV4QmFzaXM6IHdpZHRoLFxuICAgICAgICBmbGV4R3JvdzogMCxcbiAgICAgICAgbWF4V2lkdGg6IHdpZHRoXG4gICAgICB9LCBtb3JlKTtcbiAgICB9XG5cbiAgICAvLyBObyBuZWVkIGZvciBhIG1lZGlhIHF1ZXJ5IGZvciB0aGUgZmlyc3Qgc2l6ZS5cbiAgICBpZiAodGhlbWUuYnJlYWtwb2ludHMudmFsdWVzW2JyZWFrcG9pbnRdID09PSAwKSB7XG4gICAgICBPYmplY3QuYXNzaWduKGdsb2JhbFN0eWxlcywgc3R5bGVzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2xvYmFsU3R5bGVzW3RoZW1lLmJyZWFrcG9pbnRzLnVwKGJyZWFrcG9pbnQpXSA9IHN0eWxlcztcbiAgICB9XG4gICAgcmV0dXJuIGdsb2JhbFN0eWxlcztcbiAgfSwge30pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlRGlyZWN0aW9uKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pIHtcbiAgY29uc3QgZGlyZWN0aW9uVmFsdWVzID0gcmVzb2x2ZUJyZWFrcG9pbnRWYWx1ZXMoe1xuICAgIHZhbHVlczogb3duZXJTdGF0ZS5kaXJlY3Rpb24sXG4gICAgYnJlYWtwb2ludHM6IHRoZW1lLmJyZWFrcG9pbnRzLnZhbHVlc1xuICB9KTtcbiAgcmV0dXJuIGhhbmRsZUJyZWFrcG9pbnRzKHtcbiAgICB0aGVtZVxuICB9LCBkaXJlY3Rpb25WYWx1ZXMsIHByb3BWYWx1ZSA9PiB7XG4gICAgY29uc3Qgb3V0cHV0ID0ge1xuICAgICAgZmxleERpcmVjdGlvbjogcHJvcFZhbHVlXG4gICAgfTtcbiAgICBpZiAocHJvcFZhbHVlLmluZGV4T2YoJ2NvbHVtbicpID09PSAwKSB7XG4gICAgICBvdXRwdXRbYCYgPiAuJHtncmlkQ2xhc3Nlcy5pdGVtfWBdID0ge1xuICAgICAgICBtYXhXaWR0aDogJ25vbmUnXG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0O1xuICB9KTtcbn1cblxuLyoqXG4gKiBFeHRyYWN0cyB6ZXJvIHZhbHVlIGJyZWFrcG9pbnQga2V5cyBiZWZvcmUgYSBub24temVybyB2YWx1ZSBicmVha3BvaW50IGtleS5cbiAqIEBleGFtcGxlIHsgeHM6IDAsIHNtOiAwLCBtZDogMiwgbGc6IDAsIHhsOiAwIH0gb3IgWzAsIDAsIDIsIDAsIDBdXG4gKiBAcmV0dXJucyBbeHMsIHNtXVxuICovXG5mdW5jdGlvbiBleHRyYWN0WmVyb1ZhbHVlQnJlYWtwb2ludEtleXMoe1xuICBicmVha3BvaW50cyxcbiAgdmFsdWVzXG59KSB7XG4gIGxldCBub25aZXJvS2V5ID0gJyc7XG4gIE9iamVjdC5rZXlzKHZhbHVlcykuZm9yRWFjaChrZXkgPT4ge1xuICAgIGlmIChub25aZXJvS2V5ICE9PSAnJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodmFsdWVzW2tleV0gIT09IDApIHtcbiAgICAgIG5vblplcm9LZXkgPSBrZXk7XG4gICAgfVxuICB9KTtcbiAgY29uc3Qgc29ydGVkQnJlYWtwb2ludEtleXNCeVZhbHVlID0gT2JqZWN0LmtleXMoYnJlYWtwb2ludHMpLnNvcnQoKGEsIGIpID0+IHtcbiAgICByZXR1cm4gYnJlYWtwb2ludHNbYV0gLSBicmVha3BvaW50c1tiXTtcbiAgfSk7XG4gIHJldHVybiBzb3J0ZWRCcmVha3BvaW50S2V5c0J5VmFsdWUuc2xpY2UoMCwgc29ydGVkQnJlYWtwb2ludEtleXNCeVZhbHVlLmluZGV4T2Yobm9uWmVyb0tleSkpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlUm93R2FwKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pIHtcbiAgY29uc3Qge1xuICAgIGNvbnRhaW5lcixcbiAgICByb3dTcGFjaW5nXG4gIH0gPSBvd25lclN0YXRlO1xuICBsZXQgc3R5bGVzID0ge307XG4gIGlmIChjb250YWluZXIgJiYgcm93U3BhY2luZyAhPT0gMCkge1xuICAgIGNvbnN0IHJvd1NwYWNpbmdWYWx1ZXMgPSByZXNvbHZlQnJlYWtwb2ludFZhbHVlcyh7XG4gICAgICB2YWx1ZXM6IHJvd1NwYWNpbmcsXG4gICAgICBicmVha3BvaW50czogdGhlbWUuYnJlYWtwb2ludHMudmFsdWVzXG4gICAgfSk7XG4gICAgbGV0IHplcm9WYWx1ZUJyZWFrcG9pbnRLZXlzO1xuICAgIGlmICh0eXBlb2Ygcm93U3BhY2luZ1ZhbHVlcyA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHplcm9WYWx1ZUJyZWFrcG9pbnRLZXlzID0gZXh0cmFjdFplcm9WYWx1ZUJyZWFrcG9pbnRLZXlzKHtcbiAgICAgICAgYnJlYWtwb2ludHM6IHRoZW1lLmJyZWFrcG9pbnRzLnZhbHVlcyxcbiAgICAgICAgdmFsdWVzOiByb3dTcGFjaW5nVmFsdWVzXG4gICAgICB9KTtcbiAgICB9XG4gICAgc3R5bGVzID0gaGFuZGxlQnJlYWtwb2ludHMoe1xuICAgICAgdGhlbWVcbiAgICB9LCByb3dTcGFjaW5nVmFsdWVzLCAocHJvcFZhbHVlLCBicmVha3BvaW50KSA9PiB7XG4gICAgICB2YXIgX3plcm9WYWx1ZUJyZWFrcG9pbnRLO1xuICAgICAgY29uc3QgdGhlbWVTcGFjaW5nID0gdGhlbWUuc3BhY2luZyhwcm9wVmFsdWUpO1xuICAgICAgaWYgKHRoZW1lU3BhY2luZyAhPT0gJzBweCcpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBtYXJnaW5Ub3A6IGAtJHtnZXRPZmZzZXQodGhlbWVTcGFjaW5nKX1gLFxuICAgICAgICAgIFtgJiA+IC4ke2dyaWRDbGFzc2VzLml0ZW19YF06IHtcbiAgICAgICAgICAgIHBhZGRpbmdUb3A6IGdldE9mZnNldCh0aGVtZVNwYWNpbmcpXG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgaWYgKChfemVyb1ZhbHVlQnJlYWtwb2ludEsgPSB6ZXJvVmFsdWVCcmVha3BvaW50S2V5cykgIT0gbnVsbCAmJiBfemVyb1ZhbHVlQnJlYWtwb2ludEsuaW5jbHVkZXMoYnJlYWtwb2ludCkpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbWFyZ2luVG9wOiAwLFxuICAgICAgICBbYCYgPiAuJHtncmlkQ2xhc3Nlcy5pdGVtfWBdOiB7XG4gICAgICAgICAgcGFkZGluZ1RvcDogMFxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG4gIHJldHVybiBzdHlsZXM7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVDb2x1bW5HYXAoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkge1xuICBjb25zdCB7XG4gICAgY29udGFpbmVyLFxuICAgIGNvbHVtblNwYWNpbmdcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGxldCBzdHlsZXMgPSB7fTtcbiAgaWYgKGNvbnRhaW5lciAmJiBjb2x1bW5TcGFjaW5nICE9PSAwKSB7XG4gICAgY29uc3QgY29sdW1uU3BhY2luZ1ZhbHVlcyA9IHJlc29sdmVCcmVha3BvaW50VmFsdWVzKHtcbiAgICAgIHZhbHVlczogY29sdW1uU3BhY2luZyxcbiAgICAgIGJyZWFrcG9pbnRzOiB0aGVtZS5icmVha3BvaW50cy52YWx1ZXNcbiAgICB9KTtcbiAgICBsZXQgemVyb1ZhbHVlQnJlYWtwb2ludEtleXM7XG4gICAgaWYgKHR5cGVvZiBjb2x1bW5TcGFjaW5nVmFsdWVzID09PSAnb2JqZWN0Jykge1xuICAgICAgemVyb1ZhbHVlQnJlYWtwb2ludEtleXMgPSBleHRyYWN0WmVyb1ZhbHVlQnJlYWtwb2ludEtleXMoe1xuICAgICAgICBicmVha3BvaW50czogdGhlbWUuYnJlYWtwb2ludHMudmFsdWVzLFxuICAgICAgICB2YWx1ZXM6IGNvbHVtblNwYWNpbmdWYWx1ZXNcbiAgICAgIH0pO1xuICAgIH1cbiAgICBzdHlsZXMgPSBoYW5kbGVCcmVha3BvaW50cyh7XG4gICAgICB0aGVtZVxuICAgIH0sIGNvbHVtblNwYWNpbmdWYWx1ZXMsIChwcm9wVmFsdWUsIGJyZWFrcG9pbnQpID0+IHtcbiAgICAgIHZhciBfemVyb1ZhbHVlQnJlYWtwb2ludEsyO1xuICAgICAgY29uc3QgdGhlbWVTcGFjaW5nID0gdGhlbWUuc3BhY2luZyhwcm9wVmFsdWUpO1xuICAgICAgaWYgKHRoZW1lU3BhY2luZyAhPT0gJzBweCcpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB3aWR0aDogYGNhbGMoMTAwJSArICR7Z2V0T2Zmc2V0KHRoZW1lU3BhY2luZyl9KWAsXG4gICAgICAgICAgbWFyZ2luTGVmdDogYC0ke2dldE9mZnNldCh0aGVtZVNwYWNpbmcpfWAsXG4gICAgICAgICAgW2AmID4gLiR7Z3JpZENsYXNzZXMuaXRlbX1gXToge1xuICAgICAgICAgICAgcGFkZGluZ0xlZnQ6IGdldE9mZnNldCh0aGVtZVNwYWNpbmcpXG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgaWYgKChfemVyb1ZhbHVlQnJlYWtwb2ludEsyID0gemVyb1ZhbHVlQnJlYWtwb2ludEtleXMpICE9IG51bGwgJiYgX3plcm9WYWx1ZUJyZWFrcG9pbnRLMi5pbmNsdWRlcyhicmVha3BvaW50KSkge1xuICAgICAgICByZXR1cm4ge307XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICBtYXJnaW5MZWZ0OiAwLFxuICAgICAgICBbYCYgPiAuJHtncmlkQ2xhc3Nlcy5pdGVtfWBdOiB7XG4gICAgICAgICAgcGFkZGluZ0xlZnQ6IDBcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gc3R5bGVzO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVTcGFjaW5nU3R5bGVzKHNwYWNpbmcsIGJyZWFrcG9pbnRzLCBzdHlsZXMgPSB7fSkge1xuICAvLyB1bmRlZmluZWQvbnVsbCBvciBgc3BhY2luZ2AgPD0gMFxuICBpZiAoIXNwYWNpbmcgfHwgc3BhY2luZyA8PSAwKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIC8vIGluIGNhc2Ugb2Ygc3RyaW5nL251bWJlciBgc3BhY2luZ2BcbiAgaWYgKHR5cGVvZiBzcGFjaW5nID09PSAnc3RyaW5nJyAmJiAhTnVtYmVyLmlzTmFOKE51bWJlcihzcGFjaW5nKSkgfHwgdHlwZW9mIHNwYWNpbmcgPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIFtzdHlsZXNbYHNwYWNpbmcteHMtJHtTdHJpbmcoc3BhY2luZyl9YF1dO1xuICB9XG4gIC8vIGluIGNhc2Ugb2Ygb2JqZWN0IGBzcGFjaW5nYFxuICBjb25zdCBzcGFjaW5nU3R5bGVzID0gW107XG4gIGJyZWFrcG9pbnRzLmZvckVhY2goYnJlYWtwb2ludCA9PiB7XG4gICAgY29uc3QgdmFsdWUgPSBzcGFjaW5nW2JyZWFrcG9pbnRdO1xuICAgIGlmIChOdW1iZXIodmFsdWUpID4gMCkge1xuICAgICAgc3BhY2luZ1N0eWxlcy5wdXNoKHN0eWxlc1tgc3BhY2luZy0ke2JyZWFrcG9pbnR9LSR7U3RyaW5nKHZhbHVlKX1gXSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHNwYWNpbmdTdHlsZXM7XG59XG5cbi8vIERlZmF1bHQgQ1NTIHZhbHVlc1xuLy8gZmxleDogJzAgMSBhdXRvJyxcbi8vIGZsZXhEaXJlY3Rpb246ICdyb3cnLFxuLy8gYWxpZ25JdGVtczogJ2ZsZXgtc3RhcnQnLFxuLy8gZmxleFdyYXA6ICdub3dyYXAnLFxuLy8ganVzdGlmeUNvbnRlbnQ6ICdmbGV4LXN0YXJ0JyxcbmNvbnN0IEdyaWRSb290ID0gc3R5bGVkKCdkaXYnLCB7XG4gIG5hbWU6ICdNdWlHcmlkJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIGNvbnN0IHtcbiAgICAgIGNvbnRhaW5lcixcbiAgICAgIGRpcmVjdGlvbixcbiAgICAgIGl0ZW0sXG4gICAgICBzcGFjaW5nLFxuICAgICAgd3JhcCxcbiAgICAgIHplcm9NaW5XaWR0aCxcbiAgICAgIGJyZWFrcG9pbnRzXG4gICAgfSA9IG93bmVyU3RhdGU7XG4gICAgbGV0IHNwYWNpbmdTdHlsZXMgPSBbXTtcblxuICAgIC8vIGluIGNhc2Ugb2YgZ3JpZCBpdGVtXG4gICAgaWYgKGNvbnRhaW5lcikge1xuICAgICAgc3BhY2luZ1N0eWxlcyA9IHJlc29sdmVTcGFjaW5nU3R5bGVzKHNwYWNpbmcsIGJyZWFrcG9pbnRzLCBzdHlsZXMpO1xuICAgIH1cbiAgICBjb25zdCBicmVha3BvaW50c1N0eWxlcyA9IFtdO1xuICAgIGJyZWFrcG9pbnRzLmZvckVhY2goYnJlYWtwb2ludCA9PiB7XG4gICAgICBjb25zdCB2YWx1ZSA9IG93bmVyU3RhdGVbYnJlYWtwb2ludF07XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgYnJlYWtwb2ludHNTdHlsZXMucHVzaChzdHlsZXNbYGdyaWQtJHticmVha3BvaW50fS0ke1N0cmluZyh2YWx1ZSl9YF0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBbc3R5bGVzLnJvb3QsIGNvbnRhaW5lciAmJiBzdHlsZXMuY29udGFpbmVyLCBpdGVtICYmIHN0eWxlcy5pdGVtLCB6ZXJvTWluV2lkdGggJiYgc3R5bGVzLnplcm9NaW5XaWR0aCwgLi4uc3BhY2luZ1N0eWxlcywgZGlyZWN0aW9uICE9PSAncm93JyAmJiBzdHlsZXNbYGRpcmVjdGlvbi14cy0ke1N0cmluZyhkaXJlY3Rpb24pfWBdLCB3cmFwICE9PSAnd3JhcCcgJiYgc3R5bGVzW2B3cmFwLXhzLSR7U3RyaW5nKHdyYXApfWBdLCAuLi5icmVha3BvaW50c1N0eWxlc107XG4gIH1cbn0pKCh7XG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHtcbiAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCdcbn0sIG93bmVyU3RhdGUuY29udGFpbmVyICYmIHtcbiAgZGlzcGxheTogJ2ZsZXgnLFxuICBmbGV4V3JhcDogJ3dyYXAnLFxuICB3aWR0aDogJzEwMCUnXG59LCBvd25lclN0YXRlLml0ZW0gJiYge1xuICBtYXJnaW46IDAgLy8gRm9yIGluc3RhbmNlLCBpdCdzIHVzZWZ1bCB3aGVuIHVzZWQgd2l0aCBhIGBmaWd1cmVgIGVsZW1lbnQuXG59LCBvd25lclN0YXRlLnplcm9NaW5XaWR0aCAmJiB7XG4gIG1pbldpZHRoOiAwXG59LCBvd25lclN0YXRlLndyYXAgIT09ICd3cmFwJyAmJiB7XG4gIGZsZXhXcmFwOiBvd25lclN0YXRlLndyYXBcbn0pLCBnZW5lcmF0ZURpcmVjdGlvbiwgZ2VuZXJhdGVSb3dHYXAsIGdlbmVyYXRlQ29sdW1uR2FwLCBnZW5lcmF0ZUdyaWQpO1xuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVTcGFjaW5nQ2xhc3NlcyhzcGFjaW5nLCBicmVha3BvaW50cykge1xuICAvLyB1bmRlZmluZWQvbnVsbCBvciBgc3BhY2luZ2AgPD0gMFxuICBpZiAoIXNwYWNpbmcgfHwgc3BhY2luZyA8PSAwKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIC8vIGluIGNhc2Ugb2Ygc3RyaW5nL251bWJlciBgc3BhY2luZ2BcbiAgaWYgKHR5cGVvZiBzcGFjaW5nID09PSAnc3RyaW5nJyAmJiAhTnVtYmVyLmlzTmFOKE51bWJlcihzcGFjaW5nKSkgfHwgdHlwZW9mIHNwYWNpbmcgPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIFtgc3BhY2luZy14cy0ke1N0cmluZyhzcGFjaW5nKX1gXTtcbiAgfVxuICAvLyBpbiBjYXNlIG9mIG9iamVjdCBgc3BhY2luZ2BcbiAgY29uc3QgY2xhc3NlcyA9IFtdO1xuICBicmVha3BvaW50cy5mb3JFYWNoKGJyZWFrcG9pbnQgPT4ge1xuICAgIGNvbnN0IHZhbHVlID0gc3BhY2luZ1ticmVha3BvaW50XTtcbiAgICBpZiAoTnVtYmVyKHZhbHVlKSA+IDApIHtcbiAgICAgIGNvbnN0IGNsYXNzTmFtZSA9IGBzcGFjaW5nLSR7YnJlYWtwb2ludH0tJHtTdHJpbmcodmFsdWUpfWA7XG4gICAgICBjbGFzc2VzLnB1c2goY2xhc3NOYW1lKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gY2xhc3Nlcztcbn1cbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIGNvbnRhaW5lcixcbiAgICBkaXJlY3Rpb24sXG4gICAgaXRlbSxcbiAgICBzcGFjaW5nLFxuICAgIHdyYXAsXG4gICAgemVyb01pbldpZHRoLFxuICAgIGJyZWFrcG9pbnRzXG4gIH0gPSBvd25lclN0YXRlO1xuICBsZXQgc3BhY2luZ0NsYXNzZXMgPSBbXTtcblxuICAvLyBpbiBjYXNlIG9mIGdyaWQgaXRlbVxuICBpZiAoY29udGFpbmVyKSB7XG4gICAgc3BhY2luZ0NsYXNzZXMgPSByZXNvbHZlU3BhY2luZ0NsYXNzZXMoc3BhY2luZywgYnJlYWtwb2ludHMpO1xuICB9XG4gIGNvbnN0IGJyZWFrcG9pbnRzQ2xhc3NlcyA9IFtdO1xuICBicmVha3BvaW50cy5mb3JFYWNoKGJyZWFrcG9pbnQgPT4ge1xuICAgIGNvbnN0IHZhbHVlID0gb3duZXJTdGF0ZVticmVha3BvaW50XTtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIGJyZWFrcG9pbnRzQ2xhc3Nlcy5wdXNoKGBncmlkLSR7YnJlYWtwb2ludH0tJHtTdHJpbmcodmFsdWUpfWApO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIGNvbnRhaW5lciAmJiAnY29udGFpbmVyJywgaXRlbSAmJiAnaXRlbScsIHplcm9NaW5XaWR0aCAmJiAnemVyb01pbldpZHRoJywgLi4uc3BhY2luZ0NsYXNzZXMsIGRpcmVjdGlvbiAhPT0gJ3JvdycgJiYgYGRpcmVjdGlvbi14cy0ke1N0cmluZyhkaXJlY3Rpb24pfWAsIHdyYXAgIT09ICd3cmFwJyAmJiBgd3JhcC14cy0ke1N0cmluZyh3cmFwKX1gLCAuLi5icmVha3BvaW50c0NsYXNzZXNdXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0R3JpZFV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuY29uc3QgR3JpZCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEdyaWQoaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHRoZW1lUHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpR3JpZCdcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICBicmVha3BvaW50c1xuICB9ID0gdXNlVGhlbWUoKTtcbiAgY29uc3QgcHJvcHMgPSBleHRlbmRTeFByb3AodGhlbWVQcm9wcyk7XG4gIGNvbnN0IHtcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNvbHVtbnM6IGNvbHVtbnNQcm9wLFxuICAgICAgY29sdW1uU3BhY2luZzogY29sdW1uU3BhY2luZ1Byb3AsXG4gICAgICBjb21wb25lbnQgPSAnZGl2JyxcbiAgICAgIGNvbnRhaW5lciA9IGZhbHNlLFxuICAgICAgZGlyZWN0aW9uID0gJ3JvdycsXG4gICAgICBpdGVtID0gZmFsc2UsXG4gICAgICByb3dTcGFjaW5nOiByb3dTcGFjaW5nUHJvcCxcbiAgICAgIHNwYWNpbmcgPSAwLFxuICAgICAgd3JhcCA9ICd3cmFwJyxcbiAgICAgIHplcm9NaW5XaWR0aCA9IGZhbHNlXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IHJvd1NwYWNpbmcgPSByb3dTcGFjaW5nUHJvcCB8fCBzcGFjaW5nO1xuICBjb25zdCBjb2x1bW5TcGFjaW5nID0gY29sdW1uU3BhY2luZ1Byb3AgfHwgc3BhY2luZztcbiAgY29uc3QgY29sdW1uc0NvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KEdyaWRDb250ZXh0KTtcblxuICAvLyBjb2x1bW5zIHNldCB3aXRoIGRlZmF1bHQgYnJlYWtwb2ludCB1bml0IG9mIDEyXG4gIGNvbnN0IGNvbHVtbnMgPSBjb250YWluZXIgPyBjb2x1bW5zUHJvcCB8fCAxMiA6IGNvbHVtbnNDb250ZXh0O1xuICBjb25zdCBicmVha3BvaW50c1ZhbHVlcyA9IHt9O1xuICBjb25zdCBvdGhlckZpbHRlcmVkID0gX2V4dGVuZHMoe30sIG90aGVyKTtcbiAgYnJlYWtwb2ludHMua2V5cy5mb3JFYWNoKGJyZWFrcG9pbnQgPT4ge1xuICAgIGlmIChvdGhlclticmVha3BvaW50XSAhPSBudWxsKSB7XG4gICAgICBicmVha3BvaW50c1ZhbHVlc1ticmVha3BvaW50XSA9IG90aGVyW2JyZWFrcG9pbnRdO1xuICAgICAgZGVsZXRlIG90aGVyRmlsdGVyZWRbYnJlYWtwb2ludF07XG4gICAgfVxuICB9KTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGNvbHVtbnMsXG4gICAgY29udGFpbmVyLFxuICAgIGRpcmVjdGlvbixcbiAgICBpdGVtLFxuICAgIHJvd1NwYWNpbmcsXG4gICAgY29sdW1uU3BhY2luZyxcbiAgICB3cmFwLFxuICAgIHplcm9NaW5XaWR0aCxcbiAgICBzcGFjaW5nXG4gIH0sIGJyZWFrcG9pbnRzVmFsdWVzLCB7XG4gICAgYnJlYWtwb2ludHM6IGJyZWFrcG9pbnRzLmtleXNcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KEdyaWRDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGNvbHVtbnMsXG4gICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9fanN4KEdyaWRSb290LCBfZXh0ZW5kcyh7XG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICAgIGFzOiBjb21wb25lbnQsXG4gICAgICByZWY6IHJlZlxuICAgIH0sIG90aGVyRmlsdGVyZWQpKVxuICB9KTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gR3JpZC5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBudW1iZXIgb2YgY29sdW1ucy5cbiAgICogQGRlZmF1bHQgMTJcbiAgICovXG4gIGNvbHVtbnM6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5udW1iZXIpLCBQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIC8qKlxuICAgKiBEZWZpbmVzIHRoZSBob3Jpem9udGFsIHNwYWNlIGJldHdlZW4gdGhlIHR5cGUgYGl0ZW1gIGNvbXBvbmVudHMuXG4gICAqIEl0IG92ZXJyaWRlcyB0aGUgdmFsdWUgb2YgdGhlIGBzcGFjaW5nYCBwcm9wLlxuICAgKi9cbiAgY29sdW1uU3BhY2luZzogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pKSwgUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgd2lsbCBoYXZlIHRoZSBmbGV4ICpjb250YWluZXIqIGJlaGF2aW9yLlxuICAgKiBZb3Ugc2hvdWxkIGJlIHdyYXBwaW5nICppdGVtcyogd2l0aCBhICpjb250YWluZXIqLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgY29udGFpbmVyOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIGBmbGV4LWRpcmVjdGlvbmAgc3R5bGUgcHJvcGVydHkuXG4gICAqIEl0IGlzIGFwcGxpZWQgZm9yIGFsbCBzY3JlZW4gc2l6ZXMuXG4gICAqIEBkZWZhdWx0ICdyb3cnXG4gICAqL1xuICBkaXJlY3Rpb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2NvbHVtbi1yZXZlcnNlJywgJ2NvbHVtbicsICdyb3ctcmV2ZXJzZScsICdyb3cnXSksIFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZihbJ2NvbHVtbi1yZXZlcnNlJywgJ2NvbHVtbicsICdyb3ctcmV2ZXJzZScsICdyb3cnXSkpLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgd2lsbCBoYXZlIHRoZSBmbGV4ICppdGVtKiBiZWhhdmlvci5cbiAgICogWW91IHNob3VsZCBiZSB3cmFwcGluZyAqaXRlbXMqIHdpdGggYSAqY29udGFpbmVyKi5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGl0ZW06IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYSBudW1iZXIsIGl0IHNldHMgdGhlIG51bWJlciBvZiBjb2x1bW5zIHRoZSBncmlkIGl0ZW0gdXNlcy5cbiAgICogSXQgY2FuJ3QgYmUgZ3JlYXRlciB0aGFuIHRoZSB0b3RhbCBudW1iZXIgb2YgY29sdW1ucyBvZiB0aGUgY29udGFpbmVyICgxMiBieSBkZWZhdWx0KS5cbiAgICogSWYgJ2F1dG8nLCB0aGUgZ3JpZCBpdGVtJ3Mgd2lkdGggbWF0Y2hlcyBpdHMgY29udGVudC5cbiAgICogSWYgZmFsc2UsIHRoZSBwcm9wIGlzIGlnbm9yZWQuXG4gICAqIElmIHRydWUsIHRoZSBncmlkIGl0ZW0ncyB3aWR0aCBncm93cyB0byB1c2UgdGhlIHNwYWNlIGF2YWlsYWJsZSBpbiB0aGUgZ3JpZCBjb250YWluZXIuXG4gICAqIFRoZSB2YWx1ZSBpcyBhcHBsaWVkIGZvciB0aGUgYGxnYCBicmVha3BvaW50IGFuZCB3aWRlciBzY3JlZW5zIGlmIG5vdCBvdmVycmlkZGVuLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgbGc6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2F1dG8nXSksIFByb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5ib29sXSksXG4gIC8qKlxuICAgKiBJZiBhIG51bWJlciwgaXQgc2V0cyB0aGUgbnVtYmVyIG9mIGNvbHVtbnMgdGhlIGdyaWQgaXRlbSB1c2VzLlxuICAgKiBJdCBjYW4ndCBiZSBncmVhdGVyIHRoYW4gdGhlIHRvdGFsIG51bWJlciBvZiBjb2x1bW5zIG9mIHRoZSBjb250YWluZXIgKDEyIGJ5IGRlZmF1bHQpLlxuICAgKiBJZiAnYXV0bycsIHRoZSBncmlkIGl0ZW0ncyB3aWR0aCBtYXRjaGVzIGl0cyBjb250ZW50LlxuICAgKiBJZiBmYWxzZSwgdGhlIHByb3AgaXMgaWdub3JlZC5cbiAgICogSWYgdHJ1ZSwgdGhlIGdyaWQgaXRlbSdzIHdpZHRoIGdyb3dzIHRvIHVzZSB0aGUgc3BhY2UgYXZhaWxhYmxlIGluIHRoZSBncmlkIGNvbnRhaW5lci5cbiAgICogVGhlIHZhbHVlIGlzIGFwcGxpZWQgZm9yIHRoZSBgbWRgIGJyZWFrcG9pbnQgYW5kIHdpZGVyIHNjcmVlbnMgaWYgbm90IG92ZXJyaWRkZW4uXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBtZDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnYXV0byddKSwgUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLmJvb2xdKSxcbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIHZlcnRpY2FsIHNwYWNlIGJldHdlZW4gdGhlIHR5cGUgYGl0ZW1gIGNvbXBvbmVudHMuXG4gICAqIEl0IG92ZXJyaWRlcyB0aGUgdmFsdWUgb2YgdGhlIGBzcGFjaW5nYCBwcm9wLlxuICAgKi9cbiAgcm93U3BhY2luZzogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pKSwgUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogSWYgYSBudW1iZXIsIGl0IHNldHMgdGhlIG51bWJlciBvZiBjb2x1bW5zIHRoZSBncmlkIGl0ZW0gdXNlcy5cbiAgICogSXQgY2FuJ3QgYmUgZ3JlYXRlciB0aGFuIHRoZSB0b3RhbCBudW1iZXIgb2YgY29sdW1ucyBvZiB0aGUgY29udGFpbmVyICgxMiBieSBkZWZhdWx0KS5cbiAgICogSWYgJ2F1dG8nLCB0aGUgZ3JpZCBpdGVtJ3Mgd2lkdGggbWF0Y2hlcyBpdHMgY29udGVudC5cbiAgICogSWYgZmFsc2UsIHRoZSBwcm9wIGlzIGlnbm9yZWQuXG4gICAqIElmIHRydWUsIHRoZSBncmlkIGl0ZW0ncyB3aWR0aCBncm93cyB0byB1c2UgdGhlIHNwYWNlIGF2YWlsYWJsZSBpbiB0aGUgZ3JpZCBjb250YWluZXIuXG4gICAqIFRoZSB2YWx1ZSBpcyBhcHBsaWVkIGZvciB0aGUgYHNtYCBicmVha3BvaW50IGFuZCB3aWRlciBzY3JlZW5zIGlmIG5vdCBvdmVycmlkZGVuLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgc206IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2F1dG8nXSksIFByb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5ib29sXSksXG4gIC8qKlxuICAgKiBEZWZpbmVzIHRoZSBzcGFjZSBiZXR3ZWVuIHRoZSB0eXBlIGBpdGVtYCBjb21wb25lbnRzLlxuICAgKiBJdCBjYW4gb25seSBiZSB1c2VkIG9uIGEgdHlwZSBgY29udGFpbmVyYCBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0IDBcbiAgICovXG4gIHNwYWNpbmc6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSksIFByb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIGBmbGV4LXdyYXBgIHN0eWxlIHByb3BlcnR5LlxuICAgKiBJdCdzIGFwcGxpZWQgZm9yIGFsbCBzY3JlZW4gc2l6ZXMuXG4gICAqIEBkZWZhdWx0ICd3cmFwJ1xuICAgKi9cbiAgd3JhcDogUHJvcFR5cGVzLm9uZU9mKFsnbm93cmFwJywgJ3dyYXAtcmV2ZXJzZScsICd3cmFwJ10pLFxuICAvKipcbiAgICogSWYgYSBudW1iZXIsIGl0IHNldHMgdGhlIG51bWJlciBvZiBjb2x1bW5zIHRoZSBncmlkIGl0ZW0gdXNlcy5cbiAgICogSXQgY2FuJ3QgYmUgZ3JlYXRlciB0aGFuIHRoZSB0b3RhbCBudW1iZXIgb2YgY29sdW1ucyBvZiB0aGUgY29udGFpbmVyICgxMiBieSBkZWZhdWx0KS5cbiAgICogSWYgJ2F1dG8nLCB0aGUgZ3JpZCBpdGVtJ3Mgd2lkdGggbWF0Y2hlcyBpdHMgY29udGVudC5cbiAgICogSWYgZmFsc2UsIHRoZSBwcm9wIGlzIGlnbm9yZWQuXG4gICAqIElmIHRydWUsIHRoZSBncmlkIGl0ZW0ncyB3aWR0aCBncm93cyB0byB1c2UgdGhlIHNwYWNlIGF2YWlsYWJsZSBpbiB0aGUgZ3JpZCBjb250YWluZXIuXG4gICAqIFRoZSB2YWx1ZSBpcyBhcHBsaWVkIGZvciB0aGUgYHhsYCBicmVha3BvaW50IGFuZCB3aWRlciBzY3JlZW5zIGlmIG5vdCBvdmVycmlkZGVuLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgeGw6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2F1dG8nXSksIFByb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5ib29sXSksXG4gIC8qKlxuICAgKiBJZiBhIG51bWJlciwgaXQgc2V0cyB0aGUgbnVtYmVyIG9mIGNvbHVtbnMgdGhlIGdyaWQgaXRlbSB1c2VzLlxuICAgKiBJdCBjYW4ndCBiZSBncmVhdGVyIHRoYW4gdGhlIHRvdGFsIG51bWJlciBvZiBjb2x1bW5zIG9mIHRoZSBjb250YWluZXIgKDEyIGJ5IGRlZmF1bHQpLlxuICAgKiBJZiAnYXV0bycsIHRoZSBncmlkIGl0ZW0ncyB3aWR0aCBtYXRjaGVzIGl0cyBjb250ZW50LlxuICAgKiBJZiBmYWxzZSwgdGhlIHByb3AgaXMgaWdub3JlZC5cbiAgICogSWYgdHJ1ZSwgdGhlIGdyaWQgaXRlbSdzIHdpZHRoIGdyb3dzIHRvIHVzZSB0aGUgc3BhY2UgYXZhaWxhYmxlIGluIHRoZSBncmlkIGNvbnRhaW5lci5cbiAgICogVGhlIHZhbHVlIGlzIGFwcGxpZWQgZm9yIGFsbCB0aGUgc2NyZWVuIHNpemVzIHdpdGggdGhlIGxvd2VzdCBwcmlvcml0eS5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHhzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydhdXRvJ10pLCBQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuYm9vbF0pLFxuICAvKipcbiAgICogSWYgYHRydWVgLCBpdCBzZXRzIGBtaW4td2lkdGg6IDBgIG9uIHRoZSBpdGVtLlxuICAgKiBSZWZlciB0byB0aGUgbGltaXRhdGlvbnMgc2VjdGlvbiBvZiB0aGUgZG9jdW1lbnRhdGlvbiB0byBiZXR0ZXIgdW5kZXJzdGFuZCB0aGUgdXNlIGNhc2UuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICB6ZXJvTWluV2lkdGg6IFByb3BUeXBlcy5ib29sXG59IDogdm9pZCAwO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgY29uc3QgcmVxdWlyZVByb3AgPSByZXF1aXJlUHJvcEZhY3RvcnkoJ0dyaWQnLCBHcmlkKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZWxlc3MtY29uY2F0XG4gIEdyaWRbJ3Byb3BUeXBlcycgKyAnJ10gPSBfZXh0ZW5kcyh7fSwgR3JpZC5wcm9wVHlwZXMsIHtcbiAgICBkaXJlY3Rpb246IHJlcXVpcmVQcm9wKCdjb250YWluZXInKSxcbiAgICBsZzogcmVxdWlyZVByb3AoJ2l0ZW0nKSxcbiAgICBtZDogcmVxdWlyZVByb3AoJ2l0ZW0nKSxcbiAgICBzbTogcmVxdWlyZVByb3AoJ2l0ZW0nKSxcbiAgICBzcGFjaW5nOiByZXF1aXJlUHJvcCgnY29udGFpbmVyJyksXG4gICAgd3JhcDogcmVxdWlyZVByb3AoJ2NvbnRhaW5lcicpLFxuICAgIHhzOiByZXF1aXJlUHJvcCgnaXRlbScpLFxuICAgIHplcm9NaW5XaWR0aDogcmVxdWlyZVByb3AoJ2l0ZW0nKVxuICB9KTtcbn1cbmV4cG9ydCBkZWZhdWx0IEdyaWQ7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYWRkRW5kTGlzdGVuZXJcIiwgXCJhcHBlYXJcIiwgXCJjaGlsZHJlblwiLCBcImVhc2luZ1wiLCBcImluXCIsIFwib25FbnRlclwiLCBcIm9uRW50ZXJlZFwiLCBcIm9uRW50ZXJpbmdcIiwgXCJvbkV4aXRcIiwgXCJvbkV4aXRlZFwiLCBcIm9uRXhpdGluZ1wiLCBcInN0eWxlXCIsIFwidGltZW91dFwiLCBcIlRyYW5zaXRpb25Db21wb25lbnRcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHVzZVRpbWVvdXQgZnJvbSAnQG11aS91dGlscy91c2VUaW1lb3V0JztcbmltcG9ydCBlbGVtZW50QWNjZXB0aW5nUmVmIGZyb20gJ0BtdWkvdXRpbHMvZWxlbWVudEFjY2VwdGluZ1JlZic7XG5pbXBvcnQgeyBUcmFuc2l0aW9uIH0gZnJvbSAncmVhY3QtdHJhbnNpdGlvbi1ncm91cCc7XG5pbXBvcnQgdXNlVGhlbWUgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lJztcbmltcG9ydCB7IGdldFRyYW5zaXRpb25Qcm9wcywgcmVmbG93IH0gZnJvbSAnLi4vdHJhbnNpdGlvbnMvdXRpbHMnO1xuaW1wb3J0IHVzZUZvcmtSZWYgZnJvbSAnLi4vdXRpbHMvdXNlRm9ya1JlZic7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuZnVuY3Rpb24gZ2V0U2NhbGUodmFsdWUpIHtcbiAgcmV0dXJuIGBzY2FsZSgke3ZhbHVlfSwgJHt2YWx1ZSAqKiAyfSlgO1xufVxuY29uc3Qgc3R5bGVzID0ge1xuICBlbnRlcmluZzoge1xuICAgIG9wYWNpdHk6IDEsXG4gICAgdHJhbnNmb3JtOiBnZXRTY2FsZSgxKVxuICB9LFxuICBlbnRlcmVkOiB7XG4gICAgb3BhY2l0eTogMSxcbiAgICB0cmFuc2Zvcm06ICdub25lJ1xuICB9XG59O1xuXG4vKlxuIFRPRE8gdjY6IHJlbW92ZVxuIENvbmRpdGlvbmFsbHkgYXBwbHkgYSB3b3JrYXJvdW5kIGZvciB0aGUgQ1NTIHRyYW5zaXRpb24gYnVnIGluIFNhZmFyaSAxNS40IC8gV2ViS2l0IGJyb3dzZXJzLlxuICovXG5jb25zdCBpc1dlYktpdDE1NCA9IHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIC9eKCg/IWNocm9tZXxhbmRyb2lkKS4pKihzYWZhcml8bW9iaWxlKS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkgJiYgLyhvcyB8dmVyc2lvblxcLykxNSgufF8pNC9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG5cbi8qKlxuICogVGhlIEdyb3cgdHJhbnNpdGlvbiBpcyB1c2VkIGJ5IHRoZSBbVG9vbHRpcF0oL21hdGVyaWFsLXVpL3JlYWN0LXRvb2x0aXAvKSBhbmRcbiAqIFtQb3BvdmVyXSgvbWF0ZXJpYWwtdWkvcmVhY3QtcG9wb3Zlci8pIGNvbXBvbmVudHMuXG4gKiBJdCB1c2VzIFtyZWFjdC10cmFuc2l0aW9uLWdyb3VwXShodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwKSBpbnRlcm5hbGx5LlxuICovXG5jb25zdCBHcm93ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gR3Jvdyhwcm9wcywgcmVmKSB7XG4gIGNvbnN0IHtcbiAgICAgIGFkZEVuZExpc3RlbmVyLFxuICAgICAgYXBwZWFyID0gdHJ1ZSxcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgZWFzaW5nLFxuICAgICAgaW46IGluUHJvcCxcbiAgICAgIG9uRW50ZXIsXG4gICAgICBvbkVudGVyZWQsXG4gICAgICBvbkVudGVyaW5nLFxuICAgICAgb25FeGl0LFxuICAgICAgb25FeGl0ZWQsXG4gICAgICBvbkV4aXRpbmcsXG4gICAgICBzdHlsZSxcbiAgICAgIHRpbWVvdXQgPSAnYXV0bycsXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvcHJvcC10eXBlc1xuICAgICAgVHJhbnNpdGlvbkNvbXBvbmVudCA9IFRyYW5zaXRpb25cbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3QgdGltZXIgPSB1c2VUaW1lb3V0KCk7XG4gIGNvbnN0IGF1dG9UaW1lb3V0ID0gUmVhY3QudXNlUmVmKCk7XG4gIGNvbnN0IHRoZW1lID0gdXNlVGhlbWUoKTtcbiAgY29uc3Qgbm9kZVJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3QgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihub2RlUmVmLCBjaGlsZHJlbi5yZWYsIHJlZik7XG4gIGNvbnN0IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2sgPSBjYWxsYmFjayA9PiBtYXliZUlzQXBwZWFyaW5nID0+IHtcbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIGNvbnN0IG5vZGUgPSBub2RlUmVmLmN1cnJlbnQ7XG5cbiAgICAgIC8vIG9uRW50ZXJYeHggYW5kIG9uRXhpdFh4eCBjYWxsYmFja3MgaGF2ZSBhIGRpZmZlcmVudCBhcmd1bWVudHMubGVuZ3RoIHZhbHVlLlxuICAgICAgaWYgKG1heWJlSXNBcHBlYXJpbmcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjYWxsYmFjayhub2RlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhbGxiYWNrKG5vZGUsIG1heWJlSXNBcHBlYXJpbmcpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgY29uc3QgaGFuZGxlRW50ZXJpbmcgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKG9uRW50ZXJpbmcpO1xuICBjb25zdCBoYW5kbGVFbnRlciA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2soKG5vZGUsIGlzQXBwZWFyaW5nKSA9PiB7XG4gICAgcmVmbG93KG5vZGUpOyAvLyBTbyB0aGUgYW5pbWF0aW9uIGFsd2F5cyBzdGFydCBmcm9tIHRoZSBzdGFydC5cblxuICAgIGNvbnN0IHtcbiAgICAgIGR1cmF0aW9uOiB0cmFuc2l0aW9uRHVyYXRpb24sXG4gICAgICBkZWxheSxcbiAgICAgIGVhc2luZzogdHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uXG4gICAgfSA9IGdldFRyYW5zaXRpb25Qcm9wcyh7XG4gICAgICBzdHlsZSxcbiAgICAgIHRpbWVvdXQsXG4gICAgICBlYXNpbmdcbiAgICB9LCB7XG4gICAgICBtb2RlOiAnZW50ZXInXG4gICAgfSk7XG4gICAgbGV0IGR1cmF0aW9uO1xuICAgIGlmICh0aW1lb3V0ID09PSAnYXV0bycpIHtcbiAgICAgIGR1cmF0aW9uID0gdGhlbWUudHJhbnNpdGlvbnMuZ2V0QXV0b0hlaWdodER1cmF0aW9uKG5vZGUuY2xpZW50SGVpZ2h0KTtcbiAgICAgIGF1dG9UaW1lb3V0LmN1cnJlbnQgPSBkdXJhdGlvbjtcbiAgICB9IGVsc2Uge1xuICAgICAgZHVyYXRpb24gPSB0cmFuc2l0aW9uRHVyYXRpb247XG4gICAgfVxuICAgIG5vZGUuc3R5bGUudHJhbnNpdGlvbiA9IFt0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ29wYWNpdHknLCB7XG4gICAgICBkdXJhdGlvbixcbiAgICAgIGRlbGF5XG4gICAgfSksIHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgndHJhbnNmb3JtJywge1xuICAgICAgZHVyYXRpb246IGlzV2ViS2l0MTU0ID8gZHVyYXRpb24gOiBkdXJhdGlvbiAqIDAuNjY2LFxuICAgICAgZGVsYXksXG4gICAgICBlYXNpbmc6IHRyYW5zaXRpb25UaW1pbmdGdW5jdGlvblxuICAgIH0pXS5qb2luKCcsJyk7XG4gICAgaWYgKG9uRW50ZXIpIHtcbiAgICAgIG9uRW50ZXIobm9kZSwgaXNBcHBlYXJpbmcpO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGhhbmRsZUVudGVyZWQgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKG9uRW50ZXJlZCk7XG4gIGNvbnN0IGhhbmRsZUV4aXRpbmcgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKG9uRXhpdGluZyk7XG4gIGNvbnN0IGhhbmRsZUV4aXQgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKG5vZGUgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIGR1cmF0aW9uOiB0cmFuc2l0aW9uRHVyYXRpb24sXG4gICAgICBkZWxheSxcbiAgICAgIGVhc2luZzogdHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uXG4gICAgfSA9IGdldFRyYW5zaXRpb25Qcm9wcyh7XG4gICAgICBzdHlsZSxcbiAgICAgIHRpbWVvdXQsXG4gICAgICBlYXNpbmdcbiAgICB9LCB7XG4gICAgICBtb2RlOiAnZXhpdCdcbiAgICB9KTtcbiAgICBsZXQgZHVyYXRpb247XG4gICAgaWYgKHRpbWVvdXQgPT09ICdhdXRvJykge1xuICAgICAgZHVyYXRpb24gPSB0aGVtZS50cmFuc2l0aW9ucy5nZXRBdXRvSGVpZ2h0RHVyYXRpb24obm9kZS5jbGllbnRIZWlnaHQpO1xuICAgICAgYXV0b1RpbWVvdXQuY3VycmVudCA9IGR1cmF0aW9uO1xuICAgIH0gZWxzZSB7XG4gICAgICBkdXJhdGlvbiA9IHRyYW5zaXRpb25EdXJhdGlvbjtcbiAgICB9XG4gICAgbm9kZS5zdHlsZS50cmFuc2l0aW9uID0gW3RoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnb3BhY2l0eScsIHtcbiAgICAgIGR1cmF0aW9uLFxuICAgICAgZGVsYXlcbiAgICB9KSwgdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCd0cmFuc2Zvcm0nLCB7XG4gICAgICBkdXJhdGlvbjogaXNXZWJLaXQxNTQgPyBkdXJhdGlvbiA6IGR1cmF0aW9uICogMC42NjYsXG4gICAgICBkZWxheTogaXNXZWJLaXQxNTQgPyBkZWxheSA6IGRlbGF5IHx8IGR1cmF0aW9uICogMC4zMzMsXG4gICAgICBlYXNpbmc6IHRyYW5zaXRpb25UaW1pbmdGdW5jdGlvblxuICAgIH0pXS5qb2luKCcsJyk7XG4gICAgbm9kZS5zdHlsZS5vcGFjaXR5ID0gMDtcbiAgICBub2RlLnN0eWxlLnRyYW5zZm9ybSA9IGdldFNjYWxlKDAuNzUpO1xuICAgIGlmIChvbkV4aXQpIHtcbiAgICAgIG9uRXhpdChub2RlKTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBoYW5kbGVFeGl0ZWQgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKG9uRXhpdGVkKTtcbiAgY29uc3QgaGFuZGxlQWRkRW5kTGlzdGVuZXIgPSBuZXh0ID0+IHtcbiAgICBpZiAodGltZW91dCA9PT0gJ2F1dG8nKSB7XG4gICAgICB0aW1lci5zdGFydChhdXRvVGltZW91dC5jdXJyZW50IHx8IDAsIG5leHQpO1xuICAgIH1cbiAgICBpZiAoYWRkRW5kTGlzdGVuZXIpIHtcbiAgICAgIC8vIE9sZCBjYWxsIHNpZ25hdHVyZSBiZWZvcmUgYHJlYWN0LXRyYW5zaXRpb24tZ3JvdXBgIGltcGxlbWVudGVkIGBub2RlUmVmYFxuICAgICAgYWRkRW5kTGlzdGVuZXIobm9kZVJlZi5jdXJyZW50LCBuZXh0KTtcbiAgICB9XG4gIH07XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChUcmFuc2l0aW9uQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgYXBwZWFyOiBhcHBlYXIsXG4gICAgaW46IGluUHJvcCxcbiAgICBub2RlUmVmOiBub2RlUmVmLFxuICAgIG9uRW50ZXI6IGhhbmRsZUVudGVyLFxuICAgIG9uRW50ZXJlZDogaGFuZGxlRW50ZXJlZCxcbiAgICBvbkVudGVyaW5nOiBoYW5kbGVFbnRlcmluZyxcbiAgICBvbkV4aXQ6IGhhbmRsZUV4aXQsXG4gICAgb25FeGl0ZWQ6IGhhbmRsZUV4aXRlZCxcbiAgICBvbkV4aXRpbmc6IGhhbmRsZUV4aXRpbmcsXG4gICAgYWRkRW5kTGlzdGVuZXI6IGhhbmRsZUFkZEVuZExpc3RlbmVyLFxuICAgIHRpbWVvdXQ6IHRpbWVvdXQgPT09ICdhdXRvJyA/IG51bGwgOiB0aW1lb3V0XG4gIH0sIG90aGVyLCB7XG4gICAgY2hpbGRyZW46IChzdGF0ZSwgY2hpbGRQcm9wcykgPT4ge1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGRyZW4sIF9leHRlbmRzKHtcbiAgICAgICAgc3R5bGU6IF9leHRlbmRzKHtcbiAgICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICAgIHRyYW5zZm9ybTogZ2V0U2NhbGUoMC43NSksXG4gICAgICAgICAgdmlzaWJpbGl0eTogc3RhdGUgPT09ICdleGl0ZWQnICYmICFpblByb3AgPyAnaGlkZGVuJyA6IHVuZGVmaW5lZFxuICAgICAgICB9LCBzdHlsZXNbc3RhdGVdLCBzdHlsZSwgY2hpbGRyZW4ucHJvcHMuc3R5bGUpLFxuICAgICAgICByZWY6IGhhbmRsZVJlZlxuICAgICAgfSwgY2hpbGRQcm9wcykpO1xuICAgIH1cbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBHcm93LnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIEFkZCBhIGN1c3RvbSB0cmFuc2l0aW9uIGVuZCB0cmlnZ2VyLiBDYWxsZWQgd2l0aCB0aGUgdHJhbnNpdGlvbmluZyBET01cbiAgICogbm9kZSBhbmQgYSBkb25lIGNhbGxiYWNrLiBBbGxvd3MgZm9yIG1vcmUgZmluZSBncmFpbmVkIHRyYW5zaXRpb24gZW5kXG4gICAqIGxvZ2ljLiBOb3RlOiBUaW1lb3V0cyBhcmUgc3RpbGwgdXNlZCBhcyBhIGZhbGxiYWNrIGlmIHByb3ZpZGVkLlxuICAgKi9cbiAgYWRkRW5kTGlzdGVuZXI6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogUGVyZm9ybSB0aGUgZW50ZXIgdHJhbnNpdGlvbiB3aGVuIGl0IGZpcnN0IG1vdW50cyBpZiBgaW5gIGlzIGFsc28gYHRydWVgLlxuICAgKiBTZXQgdGhpcyB0byBgZmFsc2VgIHRvIGRpc2FibGUgdGhpcyBiZWhhdmlvci5cbiAgICogQGRlZmF1bHQgdHJ1ZVxuICAgKi9cbiAgYXBwZWFyOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIEEgc2luZ2xlIGNoaWxkIGNvbnRlbnQgZWxlbWVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBlbGVtZW50QWNjZXB0aW5nUmVmLmlzUmVxdWlyZWQsXG4gIC8qKlxuICAgKiBUaGUgdHJhbnNpdGlvbiB0aW1pbmcgZnVuY3Rpb24uXG4gICAqIFlvdSBtYXkgc3BlY2lmeSBhIHNpbmdsZSBlYXNpbmcgb3IgYSBvYmplY3QgY29udGFpbmluZyBlbnRlciBhbmQgZXhpdCB2YWx1ZXMuXG4gICAqL1xuICBlYXNpbmc6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zaGFwZSh7XG4gICAgZW50ZXI6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZXhpdDogUHJvcFR5cGVzLnN0cmluZ1xuICB9KSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IHdpbGwgdHJhbnNpdGlvbiBpbi5cbiAgICovXG4gIGluOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FbnRlcmVkOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRW50ZXJpbmc6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FeGl0OiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRXhpdGVkOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRXhpdGluZzogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIFRoZSBkdXJhdGlvbiBmb3IgdGhlIHRyYW5zaXRpb24sIGluIG1pbGxpc2Vjb25kcy5cbiAgICogWW91IG1heSBzcGVjaWZ5IGEgc2luZ2xlIHRpbWVvdXQgZm9yIGFsbCB0cmFuc2l0aW9ucywgb3IgaW5kaXZpZHVhbGx5IHdpdGggYW4gb2JqZWN0LlxuICAgKlxuICAgKiBTZXQgdG8gJ2F1dG8nIHRvIGF1dG9tYXRpY2FsbHkgY2FsY3VsYXRlIHRyYW5zaXRpb24gdGltZSBiYXNlZCBvbiBoZWlnaHQuXG4gICAqIEBkZWZhdWx0ICdhdXRvJ1xuICAgKi9cbiAgdGltZW91dDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnYXV0byddKSwgUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBhcHBlYXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZW50ZXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZXhpdDogUHJvcFR5cGVzLm51bWJlclxuICB9KV0pXG59IDogdm9pZCAwO1xuR3Jvdy5tdWlTdXBwb3J0QXV0byA9IHRydWU7XG5leHBvcnQgZGVmYXVsdCBHcm93OyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImRpc2FibGVVbmRlcmxpbmVcIiwgXCJjb21wb25lbnRzXCIsIFwiY29tcG9uZW50c1Byb3BzXCIsIFwiZnVsbFdpZHRoXCIsIFwiaW5wdXRDb21wb25lbnRcIiwgXCJtdWx0aWxpbmVcIiwgXCJzbG90UHJvcHNcIiwgXCJzbG90c1wiLCBcInR5cGVcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IGRlZXBtZXJnZSBmcm9tICdAbXVpL3V0aWxzL2RlZXBtZXJnZSc7XG5pbXBvcnQgcmVmVHlwZSBmcm9tICdAbXVpL3V0aWxzL3JlZlR5cGUnO1xuaW1wb3J0IElucHV0QmFzZSBmcm9tICcuLi9JbnB1dEJhc2UnO1xuaW1wb3J0IHN0eWxlZCwgeyByb290U2hvdWxkRm9yd2FyZFByb3AgfSBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCBpbnB1dENsYXNzZXMsIHsgZ2V0SW5wdXRVdGlsaXR5Q2xhc3MgfSBmcm9tICcuL2lucHV0Q2xhc3Nlcyc7XG5pbXBvcnQgeyByb290T3ZlcnJpZGVzUmVzb2x2ZXIgYXMgaW5wdXRCYXNlUm9vdE92ZXJyaWRlc1Jlc29sdmVyLCBpbnB1dE92ZXJyaWRlc1Jlc29sdmVyIGFzIGlucHV0QmFzZUlucHV0T3ZlcnJpZGVzUmVzb2x2ZXIsIElucHV0QmFzZVJvb3QsIElucHV0QmFzZUNvbXBvbmVudCBhcyBJbnB1dEJhc2VJbnB1dCB9IGZyb20gJy4uL0lucHV0QmFzZS9JbnB1dEJhc2UnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIGRpc2FibGVVbmRlcmxpbmVcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsICFkaXNhYmxlVW5kZXJsaW5lICYmICd1bmRlcmxpbmUnXSxcbiAgICBpbnB1dDogWydpbnB1dCddXG4gIH07XG4gIGNvbnN0IGNvbXBvc2VkQ2xhc3NlcyA9IGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRJbnB1dFV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgY2xhc3NlcywgY29tcG9zZWRDbGFzc2VzKTtcbn07XG5jb25zdCBJbnB1dFJvb3QgPSBzdHlsZWQoSW5wdXRCYXNlUm9vdCwge1xuICBzaG91bGRGb3J3YXJkUHJvcDogcHJvcCA9PiByb290U2hvdWxkRm9yd2FyZFByb3AocHJvcCkgfHwgcHJvcCA9PT0gJ2NsYXNzZXMnLFxuICBuYW1lOiAnTXVpSW5wdXQnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFsuLi5pbnB1dEJhc2VSb290T3ZlcnJpZGVzUmVzb2x2ZXIocHJvcHMsIHN0eWxlcyksICFvd25lclN0YXRlLmRpc2FibGVVbmRlcmxpbmUgJiYgc3R5bGVzLnVuZGVybGluZV07XG4gIH1cbn0pKCh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiB7XG4gIGNvbnN0IGxpZ2h0ID0gdGhlbWUucGFsZXR0ZS5tb2RlID09PSAnbGlnaHQnO1xuICBsZXQgYm90dG9tTGluZUNvbG9yID0gbGlnaHQgPyAncmdiYSgwLCAwLCAwLCAwLjQyKScgOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjcpJztcbiAgaWYgKHRoZW1lLnZhcnMpIHtcbiAgICBib3R0b21MaW5lQ29sb3IgPSBgcmdiYSgke3RoZW1lLnZhcnMucGFsZXR0ZS5jb21tb24ub25CYWNrZ3JvdW5kQ2hhbm5lbH0gLyAke3RoZW1lLnZhcnMub3BhY2l0eS5pbnB1dFVuZGVybGluZX0pYDtcbiAgfVxuICByZXR1cm4gX2V4dGVuZHMoe1xuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnXG4gIH0sIG93bmVyU3RhdGUuZm9ybUNvbnRyb2wgJiYge1xuICAgICdsYWJlbCArICYnOiB7XG4gICAgICBtYXJnaW5Ub3A6IDE2XG4gICAgfVxuICB9LCAhb3duZXJTdGF0ZS5kaXNhYmxlVW5kZXJsaW5lICYmIHtcbiAgICAnJjo6YWZ0ZXInOiB7XG4gICAgICBib3JkZXJCb3R0b206IGAycHggc29saWQgJHsodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5tYWlufWAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgYm90dG9tOiAwLFxuICAgICAgLy8gRG9pbmcgdGhlIG90aGVyIHdheSBhcm91bmQgY3Jhc2ggb24gSUUxMSBcIicnXCIgaHR0cHM6Ly9naXRodWIuY29tL2Nzc2luanMvanNzL2lzc3Vlcy8yNDJcbiAgICAgIGNvbnRlbnQ6ICdcIlwiJyxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICB0cmFuc2Zvcm06ICdzY2FsZVgoMCknLFxuICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCd0cmFuc2Zvcm0nLCB7XG4gICAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVyLFxuICAgICAgICBlYXNpbmc6IHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlT3V0XG4gICAgICB9KSxcbiAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyAvLyBUcmFuc3BhcmVudCB0byB0aGUgaG92ZXIgc3R5bGUuXG4gICAgfSxcbiAgICBbYCYuJHtpbnB1dENsYXNzZXMuZm9jdXNlZH06YWZ0ZXJgXToge1xuICAgICAgLy8gdHJhbnNsYXRlWCgwKSBpcyBhIHdvcmthcm91bmQgZm9yIFNhZmFyaSB0cmFuc2Zvcm0gc2NhbGUgYnVnXG4gICAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL211aS9tYXRlcmlhbC11aS9pc3N1ZXMvMzE3NjZcbiAgICAgIHRyYW5zZm9ybTogJ3NjYWxlWCgxKSB0cmFuc2xhdGVYKDApJ1xuICAgIH0sXG4gICAgW2AmLiR7aW5wdXRDbGFzc2VzLmVycm9yfWBdOiB7XG4gICAgICAnJjo6YmVmb3JlLCAmOjphZnRlcic6IHtcbiAgICAgICAgYm9yZGVyQm90dG9tQ29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmVycm9yLm1haW5cbiAgICAgIH1cbiAgICB9LFxuICAgICcmOjpiZWZvcmUnOiB7XG4gICAgICBib3JkZXJCb3R0b206IGAxcHggc29saWQgJHtib3R0b21MaW5lQ29sb3J9YCxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICBib3R0b206IDAsXG4gICAgICAvLyBEb2luZyB0aGUgb3RoZXIgd2F5IGFyb3VuZCBjcmFzaCBvbiBJRTExIFwiJydcIiBodHRwczovL2dpdGh1Yi5jb20vY3NzaW5qcy9qc3MvaXNzdWVzLzI0MlxuICAgICAgY29udGVudDogJ1wiXFxcXDAwYTBcIicsXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdib3JkZXItYm90dG9tLWNvbG9yJywge1xuICAgICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlclxuICAgICAgfSksXG4gICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScgLy8gVHJhbnNwYXJlbnQgdG8gdGhlIGhvdmVyIHN0eWxlLlxuICAgIH0sXG4gICAgW2AmOmhvdmVyOm5vdCguJHtpbnB1dENsYXNzZXMuZGlzYWJsZWR9LCAuJHtpbnB1dENsYXNzZXMuZXJyb3J9KTpiZWZvcmVgXToge1xuICAgICAgYm9yZGVyQm90dG9tOiBgMnB4IHNvbGlkICR7KHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUudGV4dC5wcmltYXJ5fWAsXG4gICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICBib3JkZXJCb3R0b206IGAxcHggc29saWQgJHtib3R0b21MaW5lQ29sb3J9YFxuICAgICAgfVxuICAgIH0sXG4gICAgW2AmLiR7aW5wdXRDbGFzc2VzLmRpc2FibGVkfTpiZWZvcmVgXToge1xuICAgICAgYm9yZGVyQm90dG9tU3R5bGU6ICdkb3R0ZWQnXG4gICAgfVxuICB9KTtcbn0pO1xuY29uc3QgSW5wdXRJbnB1dCA9IHN0eWxlZChJbnB1dEJhc2VJbnB1dCwge1xuICBuYW1lOiAnTXVpSW5wdXQnLFxuICBzbG90OiAnSW5wdXQnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogaW5wdXRCYXNlSW5wdXRPdmVycmlkZXNSZXNvbHZlclxufSkoe30pO1xuY29uc3QgSW5wdXQgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBJbnB1dChpblByb3BzLCByZWYpIHtcbiAgdmFyIF9yZWYsIF9zbG90cyRyb290LCBfcmVmMiwgX3Nsb3RzJGlucHV0O1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlJbnB1dCdcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGRpc2FibGVVbmRlcmxpbmUsXG4gICAgICBjb21wb25lbnRzID0ge30sXG4gICAgICBjb21wb25lbnRzUHJvcHM6IGNvbXBvbmVudHNQcm9wc1Byb3AsXG4gICAgICBmdWxsV2lkdGggPSBmYWxzZSxcbiAgICAgIGlucHV0Q29tcG9uZW50ID0gJ2lucHV0JyxcbiAgICAgIG11bHRpbGluZSA9IGZhbHNlLFxuICAgICAgc2xvdFByb3BzLFxuICAgICAgc2xvdHMgPSB7fSxcbiAgICAgIHR5cGUgPSAndGV4dCdcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKHByb3BzKTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IHtcbiAgICBkaXNhYmxlVW5kZXJsaW5lXG4gIH07XG4gIGNvbnN0IGlucHV0Q29tcG9uZW50c1Byb3BzID0ge1xuICAgIHJvb3Q6IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9XG4gIH07XG4gIGNvbnN0IGNvbXBvbmVudHNQcm9wcyA9IChzbG90UHJvcHMgIT0gbnVsbCA/IHNsb3RQcm9wcyA6IGNvbXBvbmVudHNQcm9wc1Byb3ApID8gZGVlcG1lcmdlKHNsb3RQcm9wcyAhPSBudWxsID8gc2xvdFByb3BzIDogY29tcG9uZW50c1Byb3BzUHJvcCwgaW5wdXRDb21wb25lbnRzUHJvcHMpIDogaW5wdXRDb21wb25lbnRzUHJvcHM7XG4gIGNvbnN0IFJvb3RTbG90ID0gKF9yZWYgPSAoX3Nsb3RzJHJvb3QgPSBzbG90cy5yb290KSAhPSBudWxsID8gX3Nsb3RzJHJvb3QgOiBjb21wb25lbnRzLlJvb3QpICE9IG51bGwgPyBfcmVmIDogSW5wdXRSb290O1xuICBjb25zdCBJbnB1dFNsb3QgPSAoX3JlZjIgPSAoX3Nsb3RzJGlucHV0ID0gc2xvdHMuaW5wdXQpICE9IG51bGwgPyBfc2xvdHMkaW5wdXQgOiBjb21wb25lbnRzLklucHV0KSAhPSBudWxsID8gX3JlZjIgOiBJbnB1dElucHV0O1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goSW5wdXRCYXNlLCBfZXh0ZW5kcyh7XG4gICAgc2xvdHM6IHtcbiAgICAgIHJvb3Q6IFJvb3RTbG90LFxuICAgICAgaW5wdXQ6IElucHV0U2xvdFxuICAgIH0sXG4gICAgc2xvdFByb3BzOiBjb21wb25lbnRzUHJvcHMsXG4gICAgZnVsbFdpZHRoOiBmdWxsV2lkdGgsXG4gICAgaW5wdXRDb21wb25lbnQ6IGlucHV0Q29tcG9uZW50LFxuICAgIG11bHRpbGluZTogbXVsdGlsaW5lLFxuICAgIHJlZjogcmVmLFxuICAgIHR5cGU6IHR5cGVcbiAgfSwgb3RoZXIsIHtcbiAgICBjbGFzc2VzOiBjbGFzc2VzXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gSW5wdXQucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogVGhpcyBwcm9wIGhlbHBzIHVzZXJzIHRvIGZpbGwgZm9ybXMgZmFzdGVyLCBlc3BlY2lhbGx5IG9uIG1vYmlsZSBkZXZpY2VzLlxuICAgKiBUaGUgbmFtZSBjYW4gYmUgY29uZnVzaW5nLCBhcyBpdCdzIG1vcmUgbGlrZSBhbiBhdXRvZmlsbC5cbiAgICogWW91IGNhbiBsZWFybiBtb3JlIGFib3V0IGl0IFtmb2xsb3dpbmcgdGhlIHNwZWNpZmljYXRpb25dKGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm0tY29udHJvbC1pbmZyYXN0cnVjdHVyZS5odG1sI2F1dG9maWxsKS5cbiAgICovXG4gIGF1dG9Db21wbGV0ZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgZWxlbWVudCBpcyBmb2N1c2VkIGR1cmluZyB0aGUgZmlyc3QgbW91bnQuXG4gICAqL1xuICBhdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LlxuICAgKiBJdCBzdXBwb3J0cyBib3RoIGRlZmF1bHQgYW5kIGN1c3RvbSB0aGVtZSBjb2xvcnMsIHdoaWNoIGNhbiBiZSBhZGRlZCBhcyBzaG93biBpbiB0aGVcbiAgICogW3BhbGV0dGUgY3VzdG9taXphdGlvbiBndWlkZV0oaHR0cHM6Ly9tdWkuY29tL21hdGVyaWFsLXVpL2N1c3RvbWl6YXRpb24vcGFsZXR0ZS8jY3VzdG9tLWNvbG9ycykuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSAoYCdwcmltYXJ5J2ApIGluaGVyaXRlZCBmcm9tIHRoZSBwYXJlbnQgRm9ybUNvbnRyb2wgY29tcG9uZW50LlxuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsncHJpbWFyeScsICdzZWNvbmRhcnknXSksIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnRzIHVzZWQgZm9yIGVhY2ggc2xvdCBpbnNpZGUuXG4gICAqXG4gICAqIFRoaXMgcHJvcCBpcyBhbiBhbGlhcyBmb3IgdGhlIGBzbG90c2AgcHJvcC5cbiAgICogSXQncyByZWNvbW1lbmRlZCB0byB1c2UgdGhlIGBzbG90c2AgcHJvcCBpbnN0ZWFkLlxuICAgKlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgY29tcG9uZW50czogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBJbnB1dDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIFJvb3Q6IFByb3BUeXBlcy5lbGVtZW50VHlwZVxuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBleHRyYSBwcm9wcyBmb3IgdGhlIHNsb3QgY29tcG9uZW50cy5cbiAgICogWW91IGNhbiBvdmVycmlkZSB0aGUgZXhpc3RpbmcgcHJvcHMgb3IgYWRkIG5ldyBvbmVzLlxuICAgKlxuICAgKiBUaGlzIHByb3AgaXMgYW4gYWxpYXMgZm9yIHRoZSBgc2xvdFByb3BzYCBwcm9wLlxuICAgKiBJdCdzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGUgYHNsb3RQcm9wc2AgcHJvcCBpbnN0ZWFkLCBhcyBgY29tcG9uZW50c1Byb3BzYCB3aWxsIGJlIGRlcHJlY2F0ZWQgaW4gdGhlIGZ1dHVyZS5cbiAgICpcbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIGNvbXBvbmVudHNQcm9wczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBpbnB1dDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICByb290OiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pLFxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgdmFsdWUuIFVzZSB3aGVuIHRoZSBjb21wb25lbnQgaXMgbm90IGNvbnRyb2xsZWQuXG4gICAqL1xuICBkZWZhdWx0VmFsdWU6IFByb3BUeXBlcy5hbnksXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgZGlzYWJsZWQuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSAoYGZhbHNlYCkgaW5oZXJpdGVkIGZyb20gdGhlIHBhcmVudCBGb3JtQ29udHJvbCBjb21wb25lbnQuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIHdpbGwgbm90IGhhdmUgYW4gdW5kZXJsaW5lLlxuICAgKi9cbiAgZGlzYWJsZVVuZGVybGluZTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBFbmQgYElucHV0QWRvcm5tZW50YCBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBlbmRBZG9ybm1lbnQ6IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCB3aWxsIGluZGljYXRlIGFuIGVycm9yLlxuICAgKiBUaGUgcHJvcCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgKGBmYWxzZWApIGluaGVyaXRlZCBmcm9tIHRoZSBwYXJlbnQgRm9ybUNvbnRyb2wgY29tcG9uZW50LlxuICAgKi9cbiAgZXJyb3I6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCB3aWxsIHRha2UgdXAgdGhlIGZ1bGwgd2lkdGggb2YgaXRzIGNvbnRhaW5lci5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGZ1bGxXaWR0aDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgaWQgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlkOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCAnaW5wdXQnXG4gICAqL1xuICBpbnB1dENvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogW0F0dHJpYnV0ZXNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCNBdHRyaWJ1dGVzKSBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBpbnB1dFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogUGFzcyBhIHJlZiB0byB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgaW5wdXRSZWY6IHJlZlR5cGUsXG4gIC8qKlxuICAgKiBJZiBgZGVuc2VgLCB3aWxsIGFkanVzdCB2ZXJ0aWNhbCBzcGFjaW5nLiBUaGlzIGlzIG5vcm1hbGx5IG9idGFpbmVkIHZpYSBjb250ZXh0IGZyb21cbiAgICogRm9ybUNvbnRyb2wuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSAoYCdub25lJ2ApIGluaGVyaXRlZCBmcm9tIHRoZSBwYXJlbnQgRm9ybUNvbnRyb2wgY29tcG9uZW50LlxuICAgKi9cbiAgbWFyZ2luOiBQcm9wVHlwZXMub25lT2YoWydkZW5zZScsICdub25lJ10pLFxuICAvKipcbiAgICogTWF4aW11bSBudW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIG1heFJvd3M6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIE1pbmltdW0gbnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheSB3aGVuIG11bHRpbGluZSBvcHRpb24gaXMgc2V0IHRvIHRydWUuXG4gICAqL1xuICBtaW5Sb3dzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGEgW1RleHRhcmVhQXV0b3NpemVdKC9tYXRlcmlhbC11aS9yZWFjdC10ZXh0YXJlYS1hdXRvc2l6ZS8pIGVsZW1lbnQgaXMgcmVuZGVyZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBtdWx0aWxpbmU6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogTmFtZSBhdHRyaWJ1dGUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSB2YWx1ZSBpcyBjaGFuZ2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0LkNoYW5nZUV2ZW50PEhUTUxUZXh0QXJlYUVsZW1lbnQgfCBIVE1MSW5wdXRFbGVtZW50Pn0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIFlvdSBjYW4gcHVsbCBvdXQgdGhlIG5ldyB2YWx1ZSBieSBhY2Nlc3NpbmcgYGV2ZW50LnRhcmdldC52YWx1ZWAgKHN0cmluZykuXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBUaGUgc2hvcnQgaGludCBkaXNwbGF5ZWQgaW4gdGhlIGBpbnB1dGAgYmVmb3JlIHRoZSB1c2VyIGVudGVycyBhIHZhbHVlLlxuICAgKi9cbiAgcGxhY2Vob2xkZXI6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBJdCBwcmV2ZW50cyB0aGUgdXNlciBmcm9tIGNoYW5naW5nIHRoZSB2YWx1ZSBvZiB0aGUgZmllbGRcbiAgICogKG5vdCBmcm9tIGludGVyYWN0aW5nIHdpdGggdGhlIGZpZWxkKS5cbiAgICovXG4gIHJlYWRPbmx5OiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgZWxlbWVudCBpcyByZXF1aXJlZC5cbiAgICogVGhlIHByb3AgZGVmYXVsdHMgdG8gdGhlIHZhbHVlIChgZmFsc2VgKSBpbmhlcml0ZWQgZnJvbSB0aGUgcGFyZW50IEZvcm1Db250cm9sIGNvbXBvbmVudC5cbiAgICovXG4gIHJlcXVpcmVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIE51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgcm93czogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIGV4dHJhIHByb3BzIGZvciB0aGUgc2xvdCBjb21wb25lbnRzLlxuICAgKiBZb3UgY2FuIG92ZXJyaWRlIHRoZSBleGlzdGluZyBwcm9wcyBvciBhZGQgbmV3IG9uZXMuXG4gICAqXG4gICAqIFRoaXMgcHJvcCBpcyBhbiBhbGlhcyBmb3IgdGhlIGBjb21wb25lbnRzUHJvcHNgIHByb3AsIHdoaWNoIHdpbGwgYmUgZGVwcmVjYXRlZCBpbiB0aGUgZnV0dXJlLlxuICAgKlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgc2xvdFByb3BzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGlucHV0OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHJvb3Q6IFByb3BUeXBlcy5vYmplY3RcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50cyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlLlxuICAgKlxuICAgKiBUaGlzIHByb3AgaXMgYW4gYWxpYXMgZm9yIHRoZSBgY29tcG9uZW50c2AgcHJvcCwgd2hpY2ggd2lsbCBiZSBkZXByZWNhdGVkIGluIHRoZSBmdXR1cmUuXG4gICAqXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBzbG90czogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBpbnB1dDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIHJvb3Q6IFByb3BUeXBlcy5lbGVtZW50VHlwZVxuICB9KSxcbiAgLyoqXG4gICAqIFN0YXJ0IGBJbnB1dEFkb3JubWVudGAgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgc3RhcnRBZG9ybm1lbnQ6IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogVHlwZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LiBJdCBzaG91bGQgYmUgW2EgdmFsaWQgSFRNTDUgaW5wdXQgdHlwZV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2lucHV0I0Zvcm1fJTNDaW5wdXQlM0VfdHlwZXMpLlxuICAgKiBAZGVmYXVsdCAndGV4dCdcbiAgICovXG4gIHR5cGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudCwgcmVxdWlyZWQgZm9yIGEgY29udHJvbGxlZCBjb21wb25lbnQuXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLmFueVxufSA6IHZvaWQgMDtcbklucHV0Lm11aU5hbWUgPSAnSW5wdXQnO1xuZXhwb3J0IGRlZmF1bHQgSW5wdXQ7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRJbnB1dEFkb3JubWVudFV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpSW5wdXRBZG9ybm1lbnQnLCBzbG90KTtcbn1cbmNvbnN0IGlucHV0QWRvcm5tZW50Q2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUlucHV0QWRvcm5tZW50JywgWydyb290JywgJ2ZpbGxlZCcsICdzdGFuZGFyZCcsICdvdXRsaW5lZCcsICdwb3NpdGlvblN0YXJ0JywgJ3Bvc2l0aW9uRW5kJywgJ2Rpc2FibGVQb2ludGVyRXZlbnRzJywgJ2hpZGRlbkxhYmVsJywgJ3NpemVTbWFsbCddKTtcbmV4cG9ydCBkZWZhdWx0IGlucHV0QWRvcm5tZW50Q2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG52YXIgX3NwYW47XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcImRpc2FibGVQb2ludGVyRXZlbnRzXCIsIFwiZGlzYWJsZVR5cG9ncmFwaHlcIiwgXCJwb3NpdGlvblwiLCBcInZhcmlhbnRcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCBUeXBvZ3JhcGh5IGZyb20gJy4uL1R5cG9ncmFwaHknO1xuaW1wb3J0IEZvcm1Db250cm9sQ29udGV4dCBmcm9tICcuLi9Gb3JtQ29udHJvbC9Gb3JtQ29udHJvbENvbnRleHQnO1xuaW1wb3J0IHVzZUZvcm1Db250cm9sIGZyb20gJy4uL0Zvcm1Db250cm9sL3VzZUZvcm1Db250cm9sJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgaW5wdXRBZG9ybm1lbnRDbGFzc2VzLCB7IGdldElucHV0QWRvcm5tZW50VXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9pbnB1dEFkb3JubWVudENsYXNzZXMnO1xuaW1wb3J0IHVzZVRoZW1lUHJvcHMgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lUHJvcHMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IG92ZXJyaWRlc1Jlc29sdmVyID0gKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgY29uc3Qge1xuICAgIG93bmVyU3RhdGVcbiAgfSA9IHByb3BzO1xuICByZXR1cm4gW3N0eWxlcy5yb290LCBzdHlsZXNbYHBvc2l0aW9uJHtjYXBpdGFsaXplKG93bmVyU3RhdGUucG9zaXRpb24pfWBdLCBvd25lclN0YXRlLmRpc2FibGVQb2ludGVyRXZlbnRzID09PSB0cnVlICYmIHN0eWxlcy5kaXNhYmxlUG9pbnRlckV2ZW50cywgc3R5bGVzW293bmVyU3RhdGUudmFyaWFudF1dO1xufTtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIGRpc2FibGVQb2ludGVyRXZlbnRzLFxuICAgIGhpZGRlbkxhYmVsLFxuICAgIHBvc2l0aW9uLFxuICAgIHNpemUsXG4gICAgdmFyaWFudFxuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgZGlzYWJsZVBvaW50ZXJFdmVudHMgJiYgJ2Rpc2FibGVQb2ludGVyRXZlbnRzJywgcG9zaXRpb24gJiYgYHBvc2l0aW9uJHtjYXBpdGFsaXplKHBvc2l0aW9uKX1gLCB2YXJpYW50LCBoaWRkZW5MYWJlbCAmJiAnaGlkZGVuTGFiZWwnLCBzaXplICYmIGBzaXplJHtjYXBpdGFsaXplKHNpemUpfWBdXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0SW5wdXRBZG9ybm1lbnRVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcbmNvbnN0IElucHV0QWRvcm5tZW50Um9vdCA9IHN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnTXVpSW5wdXRBZG9ybm1lbnQnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyXG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICBkaXNwbGF5OiAnZmxleCcsXG4gIGhlaWdodDogJzAuMDFlbScsXG4gIC8vIEZpeCBJRTExIGZsZXhib3ggYWxpZ25tZW50LiBUbyByZW1vdmUgYXQgc29tZSBwb2ludC5cbiAgbWF4SGVpZ2h0OiAnMmVtJyxcbiAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gIHdoaXRlU3BhY2U6ICdub3dyYXAnLFxuICBjb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuYWN0aW9uLmFjdGl2ZVxufSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnZmlsbGVkJyAmJiB7XG4gIC8vIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJmaWxsZWRcImAuXG4gIFtgJi4ke2lucHV0QWRvcm5tZW50Q2xhc3Nlcy5wb3NpdGlvblN0YXJ0fSY6bm90KC4ke2lucHV0QWRvcm5tZW50Q2xhc3Nlcy5oaWRkZW5MYWJlbH0pYF06IHtcbiAgICBtYXJnaW5Ub3A6IDE2XG4gIH1cbn0sIG93bmVyU3RhdGUucG9zaXRpb24gPT09ICdzdGFydCcgJiYge1xuICAvLyBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBwb3NpdGlvbj1cInN0YXJ0XCJgLlxuICBtYXJnaW5SaWdodDogOFxufSwgb3duZXJTdGF0ZS5wb3NpdGlvbiA9PT0gJ2VuZCcgJiYge1xuICAvLyBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBwb3NpdGlvbj1cImVuZFwiYC5cbiAgbWFyZ2luTGVmdDogOFxufSwgb3duZXJTdGF0ZS5kaXNhYmxlUG9pbnRlckV2ZW50cyA9PT0gdHJ1ZSAmJiB7XG4gIC8vIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc2FibGVQb2ludGVyRXZlbnRzPXt0cnVlfWAuXG4gIHBvaW50ZXJFdmVudHM6ICdub25lJ1xufSkpO1xuY29uc3QgSW5wdXRBZG9ybm1lbnQgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBJbnB1dEFkb3JubWVudChpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpSW5wdXRBZG9ybm1lbnQnXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBjaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNvbXBvbmVudCA9ICdkaXYnLFxuICAgICAgZGlzYWJsZVBvaW50ZXJFdmVudHMgPSBmYWxzZSxcbiAgICAgIGRpc2FibGVUeXBvZ3JhcGh5ID0gZmFsc2UsXG4gICAgICBwb3NpdGlvbixcbiAgICAgIHZhcmlhbnQ6IHZhcmlhbnRQcm9wXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IG11aUZvcm1Db250cm9sID0gdXNlRm9ybUNvbnRyb2woKSB8fCB7fTtcbiAgbGV0IHZhcmlhbnQgPSB2YXJpYW50UHJvcDtcbiAgaWYgKHZhcmlhbnRQcm9wICYmIG11aUZvcm1Db250cm9sLnZhcmlhbnQpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKHZhcmlhbnRQcm9wID09PSBtdWlGb3JtQ29udHJvbC52YXJpYW50KSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ01VSTogVGhlIGBJbnB1dEFkb3JubWVudGAgdmFyaWFudCBpbmZlcnMgdGhlIHZhcmlhbnQgcHJvcCAnICsgJ3lvdSBkbyBub3QgaGF2ZSB0byBwcm92aWRlIG9uZS4nKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKG11aUZvcm1Db250cm9sICYmICF2YXJpYW50KSB7XG4gICAgdmFyaWFudCA9IG11aUZvcm1Db250cm9sLnZhcmlhbnQ7XG4gIH1cbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGhpZGRlbkxhYmVsOiBtdWlGb3JtQ29udHJvbC5oaWRkZW5MYWJlbCxcbiAgICBzaXplOiBtdWlGb3JtQ29udHJvbC5zaXplLFxuICAgIGRpc2FibGVQb2ludGVyRXZlbnRzLFxuICAgIHBvc2l0aW9uLFxuICAgIHZhcmlhbnRcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KEZvcm1Db250cm9sQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBudWxsLFxuICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeChJbnB1dEFkb3JubWVudFJvb3QsIF9leHRlbmRzKHtcbiAgICAgIGFzOiBjb21wb25lbnQsXG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICAgIHJlZjogcmVmXG4gICAgfSwgb3RoZXIsIHtcbiAgICAgIGNoaWxkcmVuOiB0eXBlb2YgY2hpbGRyZW4gPT09ICdzdHJpbmcnICYmICFkaXNhYmxlVHlwb2dyYXBoeSA/IC8qI19fUFVSRV9fKi9fanN4KFR5cG9ncmFwaHksIHtcbiAgICAgICAgY29sb3I6IFwidGV4dC5zZWNvbmRhcnlcIixcbiAgICAgICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gICAgICB9KSA6IC8qI19fUFVSRV9fKi9fanN4cyhSZWFjdC5GcmFnbWVudCwge1xuICAgICAgICBjaGlsZHJlbjogW3Bvc2l0aW9uID09PSAnc3RhcnQnID8gKCAvKiBub3RyYW5zbGF0ZSBuZWVkZWQgd2hpbGUgR29vZ2xlIFRyYW5zbGF0ZSB3aWxsIG5vdCBmaXggemVyby13aWR0aCBzcGFjZSBpc3N1ZSAqL19zcGFuIHx8IChfc3BhbiA9IC8qI19fUFVSRV9fKi9fanN4KFwic3BhblwiLCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBcIm5vdHJhbnNsYXRlXCIsXG4gICAgICAgICAgY2hpbGRyZW46IFwiXFx1MjAwQlwiXG4gICAgICAgIH0pKSkgOiBudWxsLCBjaGlsZHJlbl1cbiAgICAgIH0pXG4gICAgfSkpXG4gIH0pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBJbnB1dEFkb3JubWVudC5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LCBub3JtYWxseSBhbiBgSWNvbkJ1dHRvbmAgb3Igc3RyaW5nLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogRGlzYWJsZSBwb2ludGVyIGV2ZW50cyBvbiB0aGUgcm9vdC5cbiAgICogVGhpcyBhbGxvd3MgZm9yIHRoZSBjb250ZW50IG9mIHRoZSBhZG9ybm1lbnQgdG8gZm9jdXMgdGhlIGBpbnB1dGAgb24gY2xpY2suXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlUG9pbnRlckV2ZW50czogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBjaGlsZHJlbiBpcyBhIHN0cmluZyB0aGVuIGRpc2FibGUgd3JhcHBpbmcgaW4gYSBUeXBvZ3JhcGh5IGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVUeXBvZ3JhcGh5OiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBwb3NpdGlvbiB0aGlzIGFkb3JubWVudCBzaG91bGQgYXBwZWFyIHJlbGF0aXZlIHRvIHRoZSBgSW5wdXRgLlxuICAgKi9cbiAgcG9zaXRpb246IFByb3BUeXBlcy5vbmVPZihbJ2VuZCcsICdzdGFydCddKS5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKiBOb3RlOiBJZiB5b3UgYXJlIHVzaW5nIHRoZSBgVGV4dEZpZWxkYCBjb21wb25lbnQgb3IgdGhlIGBGb3JtQ29udHJvbGAgY29tcG9uZW50XG4gICAqIHlvdSBkbyBub3QgaGF2ZSB0byBzZXQgdGhpcyBtYW51YWxseS5cbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ2ZpbGxlZCcsICdvdXRsaW5lZCcsICdzdGFuZGFyZCddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IElucHV0QWRvcm5tZW50OyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0SW5wdXRMYWJlbFV0aWxpdHlDbGFzc2VzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlJbnB1dExhYmVsJywgc2xvdCk7XG59XG5jb25zdCBpbnB1dExhYmVsQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUlucHV0TGFiZWwnLCBbJ3Jvb3QnLCAnZm9jdXNlZCcsICdkaXNhYmxlZCcsICdlcnJvcicsICdyZXF1aXJlZCcsICdhc3RlcmlzaycsICdmb3JtQ29udHJvbCcsICdzaXplU21hbGwnLCAnc2hyaW5rJywgJ2FuaW1hdGVkJywgJ3N0YW5kYXJkJywgJ2ZpbGxlZCcsICdvdXRsaW5lZCddKTtcbmV4cG9ydCBkZWZhdWx0IGlucHV0TGFiZWxDbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImRpc2FibGVBbmltYXRpb25cIiwgXCJtYXJnaW5cIiwgXCJzaHJpbmtcIiwgXCJ2YXJpYW50XCIsIFwiY2xhc3NOYW1lXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IGZvcm1Db250cm9sU3RhdGUgZnJvbSAnLi4vRm9ybUNvbnRyb2wvZm9ybUNvbnRyb2xTdGF0ZSc7XG5pbXBvcnQgdXNlRm9ybUNvbnRyb2wgZnJvbSAnLi4vRm9ybUNvbnRyb2wvdXNlRm9ybUNvbnRyb2wnO1xuaW1wb3J0IEZvcm1MYWJlbCwgeyBmb3JtTGFiZWxDbGFzc2VzIH0gZnJvbSAnLi4vRm9ybUxhYmVsJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IHN0eWxlZCwgeyByb290U2hvdWxkRm9yd2FyZFByb3AgfSBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB7IGdldElucHV0TGFiZWxVdGlsaXR5Q2xhc3NlcyB9IGZyb20gJy4vaW5wdXRMYWJlbENsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIGZvcm1Db250cm9sLFxuICAgIHNpemUsXG4gICAgc2hyaW5rLFxuICAgIGRpc2FibGVBbmltYXRpb24sXG4gICAgdmFyaWFudCxcbiAgICByZXF1aXJlZFxuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgZm9ybUNvbnRyb2wgJiYgJ2Zvcm1Db250cm9sJywgIWRpc2FibGVBbmltYXRpb24gJiYgJ2FuaW1hdGVkJywgc2hyaW5rICYmICdzaHJpbmsnLCBzaXplICYmIHNpemUgIT09ICdub3JtYWwnICYmIGBzaXplJHtjYXBpdGFsaXplKHNpemUpfWAsIHZhcmlhbnRdLFxuICAgIGFzdGVyaXNrOiBbcmVxdWlyZWQgJiYgJ2FzdGVyaXNrJ11cbiAgfTtcbiAgY29uc3QgY29tcG9zZWRDbGFzc2VzID0gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldElucHV0TGFiZWxVdGlsaXR5Q2xhc3NlcywgY2xhc3Nlcyk7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgY2xhc3NlcywgY29tcG9zZWRDbGFzc2VzKTtcbn07XG5jb25zdCBJbnB1dExhYmVsUm9vdCA9IHN0eWxlZChGb3JtTGFiZWwsIHtcbiAgc2hvdWxkRm9yd2FyZFByb3A6IHByb3AgPT4gcm9vdFNob3VsZEZvcndhcmRQcm9wKHByb3ApIHx8IHByb3AgPT09ICdjbGFzc2VzJyxcbiAgbmFtZTogJ011aUlucHV0TGFiZWwnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFt7XG4gICAgICBbYCYgLiR7Zm9ybUxhYmVsQ2xhc3Nlcy5hc3Rlcmlza31gXTogc3R5bGVzLmFzdGVyaXNrXG4gICAgfSwgc3R5bGVzLnJvb3QsIG93bmVyU3RhdGUuZm9ybUNvbnRyb2wgJiYgc3R5bGVzLmZvcm1Db250cm9sLCBvd25lclN0YXRlLnNpemUgPT09ICdzbWFsbCcgJiYgc3R5bGVzLnNpemVTbWFsbCwgb3duZXJTdGF0ZS5zaHJpbmsgJiYgc3R5bGVzLnNocmluaywgIW93bmVyU3RhdGUuZGlzYWJsZUFuaW1hdGlvbiAmJiBzdHlsZXMuYW5pbWF0ZWQsIG93bmVyU3RhdGUuZm9jdXNlZCAmJiBzdHlsZXMuZm9jdXNlZCwgc3R5bGVzW293bmVyU3RhdGUudmFyaWFudF1dO1xuICB9XG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICBkaXNwbGF5OiAnYmxvY2snLFxuICB0cmFuc2Zvcm1PcmlnaW46ICd0b3AgbGVmdCcsXG4gIHdoaXRlU3BhY2U6ICdub3dyYXAnLFxuICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gIHRleHRPdmVyZmxvdzogJ2VsbGlwc2lzJyxcbiAgbWF4V2lkdGg6ICcxMDAlJ1xufSwgb3duZXJTdGF0ZS5mb3JtQ29udHJvbCAmJiB7XG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICBsZWZ0OiAwLFxuICB0b3A6IDAsXG4gIC8vIHNsaWdodCBhbHRlcmF0aW9uIHRvIHNwZWMgc3BhY2luZyB0byBtYXRjaCB2aXN1YWwgc3BlYyByZXN1bHRcbiAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKDAsIDIwcHgpIHNjYWxlKDEpJ1xufSwgb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnICYmIHtcbiAgLy8gQ29tcGVuc2F0aW9uIGZvciB0aGUgYElucHV0LmlucHV0U2l6ZVNtYWxsYCBzdHlsZS5cbiAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKDAsIDE3cHgpIHNjYWxlKDEpJ1xufSwgb3duZXJTdGF0ZS5zaHJpbmsgJiYge1xuICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoMCwgLTEuNXB4KSBzY2FsZSgwLjc1KScsXG4gIHRyYW5zZm9ybU9yaWdpbjogJ3RvcCBsZWZ0JyxcbiAgbWF4V2lkdGg6ICcxMzMlJ1xufSwgIW93bmVyU3RhdGUuZGlzYWJsZUFuaW1hdGlvbiAmJiB7XG4gIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZShbJ2NvbG9yJywgJ3RyYW5zZm9ybScsICdtYXgtd2lkdGgnXSwge1xuICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVyLFxuICAgIGVhc2luZzogdGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VPdXRcbiAgfSlcbn0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2ZpbGxlZCcgJiYgX2V4dGVuZHMoe1xuICAvLyBDaHJvbWUncyBhdXRvZmlsbCBmZWF0dXJlIGdpdmVzIHRoZSBpbnB1dCBmaWVsZCBhIHllbGxvdyBiYWNrZ3JvdW5kLlxuICAvLyBTaW5jZSB0aGUgaW5wdXQgZmllbGQgaXMgYmVoaW5kIHRoZSBsYWJlbCBpbiB0aGUgSFRNTCB0cmVlLFxuICAvLyB0aGUgaW5wdXQgZmllbGQgaXMgZHJhd24gbGFzdCBhbmQgaGlkZXMgdGhlIGxhYmVsIHdpdGggYW4gb3BhcXVlIGJhY2tncm91bmQgY29sb3IuXG4gIC8vIHpJbmRleDogMSB3aWxsIHJhaXNlIHRoZSBsYWJlbCBhYm92ZSBvcGFxdWUgYmFja2dyb3VuZC1jb2xvcnMgb2YgaW5wdXQuXG4gIHpJbmRleDogMSxcbiAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoMTJweCwgMTZweCkgc2NhbGUoMSknLFxuICBtYXhXaWR0aDogJ2NhbGMoMTAwJSAtIDI0cHgpJ1xufSwgb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnICYmIHtcbiAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKDEycHgsIDEzcHgpIHNjYWxlKDEpJ1xufSwgb3duZXJTdGF0ZS5zaHJpbmsgJiYgX2V4dGVuZHMoe1xuICB1c2VyU2VsZWN0OiAnbm9uZScsXG4gIHBvaW50ZXJFdmVudHM6ICdhdXRvJyxcbiAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKDEycHgsIDdweCkgc2NhbGUoMC43NSknLFxuICBtYXhXaWR0aDogJ2NhbGMoMTMzJSAtIDI0cHgpJ1xufSwgb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnICYmIHtcbiAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKDEycHgsIDRweCkgc2NhbGUoMC43NSknXG59KSksIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ291dGxpbmVkJyAmJiBfZXh0ZW5kcyh7XG4gIC8vIHNlZSBjb21tZW50IGFib3ZlIG9uIGZpbGxlZC56SW5kZXhcbiAgekluZGV4OiAxLFxuICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgxNHB4LCAxNnB4KSBzY2FsZSgxKScsXG4gIG1heFdpZHRoOiAnY2FsYygxMDAlIC0gMjRweCknXG59LCBvd25lclN0YXRlLnNpemUgPT09ICdzbWFsbCcgJiYge1xuICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoMTRweCwgOXB4KSBzY2FsZSgxKSdcbn0sIG93bmVyU3RhdGUuc2hyaW5rICYmIHtcbiAgdXNlclNlbGVjdDogJ25vbmUnLFxuICBwb2ludGVyRXZlbnRzOiAnYXV0bycsXG4gIC8vIFRoZW9yZXRpY2FsbHksIHdlIHNob3VsZCBoYXZlICg4KzUpKjIvMC43NSA9IDM0cHhcbiAgLy8gYnV0IGl0IGZlZWxzIGEgYmV0dGVyIHdoZW4gaXQgYmxlZWRzIGEgYml0IG9uIHRoZSBsZWZ0LCBzbyAzMnB4LlxuICBtYXhXaWR0aDogJ2NhbGMoMTMzJSAtIDMycHgpJyxcbiAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKDE0cHgsIC05cHgpIHNjYWxlKDAuNzUpJ1xufSkpKTtcbmNvbnN0IElucHV0TGFiZWwgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBJbnB1dExhYmVsKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIG5hbWU6ICdNdWlJbnB1dExhYmVsJyxcbiAgICBwcm9wczogaW5Qcm9wc1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgZGlzYWJsZUFuaW1hdGlvbiA9IGZhbHNlLFxuICAgICAgc2hyaW5rOiBzaHJpbmtQcm9wLFxuICAgICAgY2xhc3NOYW1lXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IG11aUZvcm1Db250cm9sID0gdXNlRm9ybUNvbnRyb2woKTtcbiAgbGV0IHNocmluayA9IHNocmlua1Byb3A7XG4gIGlmICh0eXBlb2Ygc2hyaW5rID09PSAndW5kZWZpbmVkJyAmJiBtdWlGb3JtQ29udHJvbCkge1xuICAgIHNocmluayA9IG11aUZvcm1Db250cm9sLmZpbGxlZCB8fCBtdWlGb3JtQ29udHJvbC5mb2N1c2VkIHx8IG11aUZvcm1Db250cm9sLmFkb3JuZWRTdGFydDtcbiAgfVxuICBjb25zdCBmY3MgPSBmb3JtQ29udHJvbFN0YXRlKHtcbiAgICBwcm9wcyxcbiAgICBtdWlGb3JtQ29udHJvbCxcbiAgICBzdGF0ZXM6IFsnc2l6ZScsICd2YXJpYW50JywgJ3JlcXVpcmVkJywgJ2ZvY3VzZWQnXVxuICB9KTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGRpc2FibGVBbmltYXRpb24sXG4gICAgZm9ybUNvbnRyb2w6IG11aUZvcm1Db250cm9sLFxuICAgIHNocmluayxcbiAgICBzaXplOiBmY3Muc2l6ZSxcbiAgICB2YXJpYW50OiBmY3MudmFyaWFudCxcbiAgICByZXF1aXJlZDogZmNzLnJlcXVpcmVkLFxuICAgIGZvY3VzZWQ6IGZjcy5mb2N1c2VkXG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChJbnB1dExhYmVsUm9vdCwgX2V4dGVuZHMoe1xuICAgIFwiZGF0YS1zaHJpbmtcIjogc2hyaW5rLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgcmVmOiByZWYsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKVxuICB9LCBvdGhlciwge1xuICAgIGNsYXNzZXM6IGNsYXNzZXNcbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBJbnB1dExhYmVsLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIEl0IHN1cHBvcnRzIGJvdGggZGVmYXVsdCBhbmQgY3VzdG9tIHRoZW1lIGNvbG9ycywgd2hpY2ggY2FuIGJlIGFkZGVkIGFzIHNob3duIGluIHRoZVxuICAgKiBbcGFsZXR0ZSBjdXN0b21pemF0aW9uIGd1aWRlXShodHRwczovL211aS5jb20vbWF0ZXJpYWwtdWkvY3VzdG9taXphdGlvbi9wYWxldHRlLyNjdXN0b20tY29sb3JzKS5cbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2Vycm9yJywgJ2luZm8nLCAncHJpbWFyeScsICdzZWNvbmRhcnknLCAnc3VjY2VzcycsICd3YXJuaW5nJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSB0cmFuc2l0aW9uIGFuaW1hdGlvbiBpcyBkaXNhYmxlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVBbmltYXRpb246IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIGRpc2FibGVkLlxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGFiZWwgaXMgZGlzcGxheWVkIGluIGFuIGVycm9yIHN0YXRlLlxuICAgKi9cbiAgZXJyb3I6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCBvZiB0aGlzIGxhYmVsIGlzIGZvY3VzZWQuXG4gICAqL1xuICBmb2N1c2VkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGBkZW5zZWAsIHdpbGwgYWRqdXN0IHZlcnRpY2FsIHNwYWNpbmcuIFRoaXMgaXMgbm9ybWFsbHkgb2J0YWluZWQgdmlhIGNvbnRleHQgZnJvbVxuICAgKiBGb3JtQ29udHJvbC5cbiAgICovXG4gIG1hcmdpbjogUHJvcFR5cGVzLm9uZU9mKFsnZGVuc2UnXSksXG4gIC8qKlxuICAgKiBpZiBgdHJ1ZWAsIHRoZSBsYWJlbCB3aWxsIGluZGljYXRlIHRoYXQgdGhlIGBpbnB1dGAgaXMgcmVxdWlyZWQuXG4gICAqL1xuICByZXF1aXJlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsYWJlbCBpcyBzaHJ1bmsuXG4gICAqL1xuICBzaHJpbms6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIHNpemUgb2YgdGhlIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQgJ25vcm1hbCdcbiAgICovXG4gIHNpemU6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnbm9ybWFsJywgJ3NtYWxsJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMub25lT2YoWydmaWxsZWQnLCAnb3V0bGluZWQnLCAnc3RhbmRhcmQnXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBJbnB1dExhYmVsOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cbmNvbnN0IExpc3RDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQoe30pO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgTGlzdENvbnRleHQuZGlzcGxheU5hbWUgPSAnTGlzdENvbnRleHQnO1xufVxuZXhwb3J0IGRlZmF1bHQgTGlzdENvbnRleHQ7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRMaXN0VXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlMaXN0Jywgc2xvdCk7XG59XG5jb25zdCBsaXN0Q2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUxpc3QnLCBbJ3Jvb3QnLCAncGFkZGluZycsICdkZW5zZScsICdzdWJoZWFkZXInXSk7XG5leHBvcnQgZGVmYXVsdCBsaXN0Q2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcImRlbnNlXCIsIFwiZGlzYWJsZVBhZGRpbmdcIiwgXCJzdWJoZWFkZXJcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHVzZVRoZW1lUHJvcHMgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lUHJvcHMnO1xuaW1wb3J0IExpc3RDb250ZXh0IGZyb20gJy4vTGlzdENvbnRleHQnO1xuaW1wb3J0IHsgZ2V0TGlzdFV0aWxpdHlDbGFzcyB9IGZyb20gJy4vbGlzdENsYXNzZXMnO1xuaW1wb3J0IHsganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIGRpc2FibGVQYWRkaW5nLFxuICAgIGRlbnNlLFxuICAgIHN1YmhlYWRlclxuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgIWRpc2FibGVQYWRkaW5nICYmICdwYWRkaW5nJywgZGVuc2UgJiYgJ2RlbnNlJywgc3ViaGVhZGVyICYmICdzdWJoZWFkZXInXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldExpc3RVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcbmNvbnN0IExpc3RSb290ID0gc3R5bGVkKCd1bCcsIHtcbiAgbmFtZTogJ011aUxpc3QnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgIW93bmVyU3RhdGUuZGlzYWJsZVBhZGRpbmcgJiYgc3R5bGVzLnBhZGRpbmcsIG93bmVyU3RhdGUuZGVuc2UgJiYgc3R5bGVzLmRlbnNlLCBvd25lclN0YXRlLnN1YmhlYWRlciAmJiBzdHlsZXMuc3ViaGVhZGVyXTtcbiAgfVxufSkoKHtcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICBsaXN0U3R5bGU6ICdub25lJyxcbiAgbWFyZ2luOiAwLFxuICBwYWRkaW5nOiAwLFxuICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xufSwgIW93bmVyU3RhdGUuZGlzYWJsZVBhZGRpbmcgJiYge1xuICBwYWRkaW5nVG9wOiA4LFxuICBwYWRkaW5nQm90dG9tOiA4XG59LCBvd25lclN0YXRlLnN1YmhlYWRlciAmJiB7XG4gIHBhZGRpbmdUb3A6IDBcbn0pKTtcbmNvbnN0IExpc3QgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBMaXN0KGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlMaXN0J1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUsXG4gICAgICBjb21wb25lbnQgPSAndWwnLFxuICAgICAgZGVuc2UgPSBmYWxzZSxcbiAgICAgIGRpc2FibGVQYWRkaW5nID0gZmFsc2UsXG4gICAgICBzdWJoZWFkZXJcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3QgY29udGV4dCA9IFJlYWN0LnVzZU1lbW8oKCkgPT4gKHtcbiAgICBkZW5zZVxuICB9KSwgW2RlbnNlXSk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjb21wb25lbnQsXG4gICAgZGVuc2UsXG4gICAgZGlzYWJsZVBhZGRpbmdcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KExpc3RDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGNvbnRleHQsXG4gICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9fanN4cyhMaXN0Um9vdCwgX2V4dGVuZHMoe1xuICAgICAgYXM6IGNvbXBvbmVudCxcbiAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgICByZWY6IHJlZixcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGVcbiAgICB9LCBvdGhlciwge1xuICAgICAgY2hpbGRyZW46IFtzdWJoZWFkZXIsIGNoaWxkcmVuXVxuICAgIH0pKVxuICB9KTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gTGlzdC5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogSWYgYHRydWVgLCBjb21wYWN0IHZlcnRpY2FsIHBhZGRpbmcgZGVzaWduZWQgZm9yIGtleWJvYXJkIGFuZCBtb3VzZSBpbnB1dCBpcyB1c2VkIGZvclxuICAgKiB0aGUgbGlzdCBhbmQgbGlzdCBpdGVtcy5cbiAgICogVGhlIHByb3AgaXMgYXZhaWxhYmxlIHRvIGRlc2NlbmRhbnQgY29tcG9uZW50cyBhcyB0aGUgYGRlbnNlYCBjb250ZXh0LlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGVuc2U6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB2ZXJ0aWNhbCBwYWRkaW5nIGlzIHJlbW92ZWQgZnJvbSB0aGUgbGlzdC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVQYWRkaW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBzdWJoZWFkZXIsIG5vcm1hbGx5IGBMaXN0U3ViaGVhZGVyYC5cbiAgICovXG4gIHN1YmhlYWRlcjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBMaXN0OyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0TGlzdEl0ZW1JY29uVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlMaXN0SXRlbUljb24nLCBzbG90KTtcbn1cbmNvbnN0IGxpc3RJdGVtSWNvbkNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlMaXN0SXRlbUljb24nLCBbJ3Jvb3QnLCAnYWxpZ25JdGVtc0ZsZXhTdGFydCddKTtcbmV4cG9ydCBkZWZhdWx0IGxpc3RJdGVtSWNvbkNsYXNzZXM7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRMaXN0SXRlbVRleHRVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUxpc3RJdGVtVGV4dCcsIHNsb3QpO1xufVxuY29uc3QgbGlzdEl0ZW1UZXh0Q2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUxpc3RJdGVtVGV4dCcsIFsncm9vdCcsICdtdWx0aWxpbmUnLCAnZGVuc2UnLCAnaW5zZXQnLCAncHJpbWFyeScsICdzZWNvbmRhcnknXSk7XG5leHBvcnQgZGVmYXVsdCBsaXN0SXRlbVRleHRDbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImFjdGlvbnNcIiwgXCJhdXRvRm9jdXNcIiwgXCJhdXRvRm9jdXNJdGVtXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJkaXNhYmxlZEl0ZW1zRm9jdXNhYmxlXCIsIFwiZGlzYWJsZUxpc3RXcmFwXCIsIFwib25LZXlEb3duXCIsIFwidmFyaWFudFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGlzRnJhZ21lbnQgfSBmcm9tICdyZWFjdC1pcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IG93bmVyRG9jdW1lbnQgZnJvbSAnLi4vdXRpbHMvb3duZXJEb2N1bWVudCc7XG5pbXBvcnQgTGlzdCBmcm9tICcuLi9MaXN0JztcbmltcG9ydCBnZXRTY3JvbGxiYXJTaXplIGZyb20gJy4uL3V0aWxzL2dldFNjcm9sbGJhclNpemUnO1xuaW1wb3J0IHVzZUZvcmtSZWYgZnJvbSAnLi4vdXRpbHMvdXNlRm9ya1JlZic7XG5pbXBvcnQgdXNlRW5oYW5jZWRFZmZlY3QgZnJvbSAnLi4vdXRpbHMvdXNlRW5oYW5jZWRFZmZlY3QnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmZ1bmN0aW9uIG5leHRJdGVtKGxpc3QsIGl0ZW0sIGRpc2FibGVMaXN0V3JhcCkge1xuICBpZiAobGlzdCA9PT0gaXRlbSkge1xuICAgIHJldHVybiBsaXN0LmZpcnN0Q2hpbGQ7XG4gIH1cbiAgaWYgKGl0ZW0gJiYgaXRlbS5uZXh0RWxlbWVudFNpYmxpbmcpIHtcbiAgICByZXR1cm4gaXRlbS5uZXh0RWxlbWVudFNpYmxpbmc7XG4gIH1cbiAgcmV0dXJuIGRpc2FibGVMaXN0V3JhcCA/IG51bGwgOiBsaXN0LmZpcnN0Q2hpbGQ7XG59XG5mdW5jdGlvbiBwcmV2aW91c0l0ZW0obGlzdCwgaXRlbSwgZGlzYWJsZUxpc3RXcmFwKSB7XG4gIGlmIChsaXN0ID09PSBpdGVtKSB7XG4gICAgcmV0dXJuIGRpc2FibGVMaXN0V3JhcCA/IGxpc3QuZmlyc3RDaGlsZCA6IGxpc3QubGFzdENoaWxkO1xuICB9XG4gIGlmIChpdGVtICYmIGl0ZW0ucHJldmlvdXNFbGVtZW50U2libGluZykge1xuICAgIHJldHVybiBpdGVtLnByZXZpb3VzRWxlbWVudFNpYmxpbmc7XG4gIH1cbiAgcmV0dXJuIGRpc2FibGVMaXN0V3JhcCA/IG51bGwgOiBsaXN0Lmxhc3RDaGlsZDtcbn1cbmZ1bmN0aW9uIHRleHRDcml0ZXJpYU1hdGNoZXMobmV4dEZvY3VzLCB0ZXh0Q3JpdGVyaWEpIHtcbiAgaWYgKHRleHRDcml0ZXJpYSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgbGV0IHRleHQgPSBuZXh0Rm9jdXMuaW5uZXJUZXh0O1xuICBpZiAodGV4dCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLy8ganNkb20gZG9lc24ndCBzdXBwb3J0IGlubmVyVGV4dFxuICAgIHRleHQgPSBuZXh0Rm9jdXMudGV4dENvbnRlbnQ7XG4gIH1cbiAgdGV4dCA9IHRleHQudHJpbSgpLnRvTG93ZXJDYXNlKCk7XG4gIGlmICh0ZXh0Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAodGV4dENyaXRlcmlhLnJlcGVhdGluZykge1xuICAgIHJldHVybiB0ZXh0WzBdID09PSB0ZXh0Q3JpdGVyaWEua2V5c1swXTtcbiAgfVxuICByZXR1cm4gdGV4dC5pbmRleE9mKHRleHRDcml0ZXJpYS5rZXlzLmpvaW4oJycpKSA9PT0gMDtcbn1cbmZ1bmN0aW9uIG1vdmVGb2N1cyhsaXN0LCBjdXJyZW50Rm9jdXMsIGRpc2FibGVMaXN0V3JhcCwgZGlzYWJsZWRJdGVtc0ZvY3VzYWJsZSwgdHJhdmVyc2FsRnVuY3Rpb24sIHRleHRDcml0ZXJpYSkge1xuICBsZXQgd3JhcHBlZE9uY2UgPSBmYWxzZTtcbiAgbGV0IG5leHRGb2N1cyA9IHRyYXZlcnNhbEZ1bmN0aW9uKGxpc3QsIGN1cnJlbnRGb2N1cywgY3VycmVudEZvY3VzID8gZGlzYWJsZUxpc3RXcmFwIDogZmFsc2UpO1xuICB3aGlsZSAobmV4dEZvY3VzKSB7XG4gICAgLy8gUHJldmVudCBpbmZpbml0ZSBsb29wLlxuICAgIGlmIChuZXh0Rm9jdXMgPT09IGxpc3QuZmlyc3RDaGlsZCkge1xuICAgICAgaWYgKHdyYXBwZWRPbmNlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHdyYXBwZWRPbmNlID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBTYW1lIGxvZ2ljIGFzIHVzZUF1dG9jb21wbGV0ZS5qc1xuICAgIGNvbnN0IG5leHRGb2N1c0Rpc2FibGVkID0gZGlzYWJsZWRJdGVtc0ZvY3VzYWJsZSA/IGZhbHNlIDogbmV4dEZvY3VzLmRpc2FibGVkIHx8IG5leHRGb2N1cy5nZXRBdHRyaWJ1dGUoJ2FyaWEtZGlzYWJsZWQnKSA9PT0gJ3RydWUnO1xuICAgIGlmICghbmV4dEZvY3VzLmhhc0F0dHJpYnV0ZSgndGFiaW5kZXgnKSB8fCAhdGV4dENyaXRlcmlhTWF0Y2hlcyhuZXh0Rm9jdXMsIHRleHRDcml0ZXJpYSkgfHwgbmV4dEZvY3VzRGlzYWJsZWQpIHtcbiAgICAgIC8vIE1vdmUgdG8gdGhlIG5leHQgZWxlbWVudC5cbiAgICAgIG5leHRGb2N1cyA9IHRyYXZlcnNhbEZ1bmN0aW9uKGxpc3QsIG5leHRGb2N1cywgZGlzYWJsZUxpc3RXcmFwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV4dEZvY3VzLmZvY3VzKCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIEEgcGVybWFuZW50bHkgZGlzcGxheWVkIG1lbnUgZm9sbG93aW5nIGh0dHBzOi8vd3d3LnczLm9yZy9XQUkvQVJJQS9hcGcvcGF0dGVybnMvbWVudS1idXR0b24vLlxuICogSXQncyBleHBvc2VkIHRvIGhlbHAgY3VzdG9taXphdGlvbiBvZiB0aGUgW2BNZW51YF0oL21hdGVyaWFsLXVpL2FwaS9tZW51LykgY29tcG9uZW50IGlmIHlvdVxuICogdXNlIGl0IHNlcGFyYXRlbHkgeW91IG5lZWQgdG8gbW92ZSBmb2N1cyBpbnRvIHRoZSBjb21wb25lbnQgbWFudWFsbHkuIE9uY2VcbiAqIHRoZSBmb2N1cyBpcyBwbGFjZWQgaW5zaWRlIHRoZSBjb21wb25lbnQgaXQgaXMgZnVsbHkga2V5Ym9hcmQgYWNjZXNzaWJsZS5cbiAqL1xuY29uc3QgTWVudUxpc3QgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBNZW51TGlzdChwcm9wcywgcmVmKSB7XG4gIGNvbnN0IHtcbiAgICAgIC8vIHByaXZhdGVcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9wcm9wLXR5cGVzXG4gICAgICBhY3Rpb25zLFxuICAgICAgYXV0b0ZvY3VzID0gZmFsc2UsXG4gICAgICBhdXRvRm9jdXNJdGVtID0gZmFsc2UsXG4gICAgICBjaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGRpc2FibGVkSXRlbXNGb2N1c2FibGUgPSBmYWxzZSxcbiAgICAgIGRpc2FibGVMaXN0V3JhcCA9IGZhbHNlLFxuICAgICAgb25LZXlEb3duLFxuICAgICAgdmFyaWFudCA9ICdzZWxlY3RlZE1lbnUnXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IGxpc3RSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIGNvbnN0IHRleHRDcml0ZXJpYVJlZiA9IFJlYWN0LnVzZVJlZih7XG4gICAga2V5czogW10sXG4gICAgcmVwZWF0aW5nOiB0cnVlLFxuICAgIHByZXZpb3VzS2V5TWF0Y2hlZDogdHJ1ZSxcbiAgICBsYXN0VGltZTogbnVsbFxuICB9KTtcbiAgdXNlRW5oYW5jZWRFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChhdXRvRm9jdXMpIHtcbiAgICAgIGxpc3RSZWYuY3VycmVudC5mb2N1cygpO1xuICAgIH1cbiAgfSwgW2F1dG9Gb2N1c10pO1xuICBSZWFjdC51c2VJbXBlcmF0aXZlSGFuZGxlKGFjdGlvbnMsICgpID0+ICh7XG4gICAgYWRqdXN0U3R5bGVGb3JTY3JvbGxiYXI6IChjb250YWluZXJFbGVtZW50LCB7XG4gICAgICBkaXJlY3Rpb25cbiAgICB9KSA9PiB7XG4gICAgICAvLyBMZXQncyBpZ25vcmUgdGhhdCBwaWVjZSBvZiBsb2dpYyBpZiB1c2VycyBhcmUgYWxyZWFkeSBvdmVycmlkaW5nIHRoZSB3aWR0aFxuICAgICAgLy8gb2YgdGhlIG1lbnUuXG4gICAgICBjb25zdCBub0V4cGxpY2l0V2lkdGggPSAhbGlzdFJlZi5jdXJyZW50LnN0eWxlLndpZHRoO1xuICAgICAgaWYgKGNvbnRhaW5lckVsZW1lbnQuY2xpZW50SGVpZ2h0IDwgbGlzdFJlZi5jdXJyZW50LmNsaWVudEhlaWdodCAmJiBub0V4cGxpY2l0V2lkdGgpIHtcbiAgICAgICAgY29uc3Qgc2Nyb2xsYmFyU2l6ZSA9IGAke2dldFNjcm9sbGJhclNpemUob3duZXJEb2N1bWVudChjb250YWluZXJFbGVtZW50KSl9cHhgO1xuICAgICAgICBsaXN0UmVmLmN1cnJlbnQuc3R5bGVbZGlyZWN0aW9uID09PSAncnRsJyA/ICdwYWRkaW5nTGVmdCcgOiAncGFkZGluZ1JpZ2h0J10gPSBzY3JvbGxiYXJTaXplO1xuICAgICAgICBsaXN0UmVmLmN1cnJlbnQuc3R5bGUud2lkdGggPSBgY2FsYygxMDAlICsgJHtzY3JvbGxiYXJTaXplfSlgO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGxpc3RSZWYuY3VycmVudDtcbiAgICB9XG4gIH0pLCBbXSk7XG4gIGNvbnN0IGhhbmRsZUtleURvd24gPSBldmVudCA9PiB7XG4gICAgY29uc3QgbGlzdCA9IGxpc3RSZWYuY3VycmVudDtcbiAgICBjb25zdCBrZXkgPSBldmVudC5rZXk7XG4gICAgLyoqXG4gICAgICogQHR5cGUge0VsZW1lbnR9IC0gd2lsbCBhbHdheXMgYmUgZGVmaW5lZCBzaW5jZSB3ZSBhcmUgaW4gYSBrZXlkb3duIGhhbmRsZXJcbiAgICAgKiBhdHRhY2hlZCB0byBhbiBlbGVtZW50LiBBIGtleWRvd24gZXZlbnQgaXMgZWl0aGVyIGRpc3BhdGNoZWQgdG8gdGhlIGFjdGl2ZUVsZW1lbnRcbiAgICAgKiBvciBkb2N1bWVudC5ib2R5IG9yIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC4gT25seSB0aGUgZmlyc3QgY2FzZSB3aWxsXG4gICAgICogdHJpZ2dlciB0aGlzIHNwZWNpZmljIGhhbmRsZXIuXG4gICAgICovXG4gICAgY29uc3QgY3VycmVudEZvY3VzID0gb3duZXJEb2N1bWVudChsaXN0KS5hY3RpdmVFbGVtZW50O1xuICAgIGlmIChrZXkgPT09ICdBcnJvd0Rvd24nKSB7XG4gICAgICAvLyBQcmV2ZW50IHNjcm9sbCBvZiB0aGUgcGFnZVxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIG1vdmVGb2N1cyhsaXN0LCBjdXJyZW50Rm9jdXMsIGRpc2FibGVMaXN0V3JhcCwgZGlzYWJsZWRJdGVtc0ZvY3VzYWJsZSwgbmV4dEl0ZW0pO1xuICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnQXJyb3dVcCcpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBtb3ZlRm9jdXMobGlzdCwgY3VycmVudEZvY3VzLCBkaXNhYmxlTGlzdFdyYXAsIGRpc2FibGVkSXRlbXNGb2N1c2FibGUsIHByZXZpb3VzSXRlbSk7XG4gICAgfSBlbHNlIGlmIChrZXkgPT09ICdIb21lJykge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIG1vdmVGb2N1cyhsaXN0LCBudWxsLCBkaXNhYmxlTGlzdFdyYXAsIGRpc2FibGVkSXRlbXNGb2N1c2FibGUsIG5leHRJdGVtKTtcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ0VuZCcpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBtb3ZlRm9jdXMobGlzdCwgbnVsbCwgZGlzYWJsZUxpc3RXcmFwLCBkaXNhYmxlZEl0ZW1zRm9jdXNhYmxlLCBwcmV2aW91c0l0ZW0pO1xuICAgIH0gZWxzZSBpZiAoa2V5Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgY29uc3QgY3JpdGVyaWEgPSB0ZXh0Q3JpdGVyaWFSZWYuY3VycmVudDtcbiAgICAgIGNvbnN0IGxvd2VyS2V5ID0ga2V5LnRvTG93ZXJDYXNlKCk7XG4gICAgICBjb25zdCBjdXJyVGltZSA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgaWYgKGNyaXRlcmlhLmtleXMubGVuZ3RoID4gMCkge1xuICAgICAgICAvLyBSZXNldFxuICAgICAgICBpZiAoY3VyclRpbWUgLSBjcml0ZXJpYS5sYXN0VGltZSA+IDUwMCkge1xuICAgICAgICAgIGNyaXRlcmlhLmtleXMgPSBbXTtcbiAgICAgICAgICBjcml0ZXJpYS5yZXBlYXRpbmcgPSB0cnVlO1xuICAgICAgICAgIGNyaXRlcmlhLnByZXZpb3VzS2V5TWF0Y2hlZCA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAoY3JpdGVyaWEucmVwZWF0aW5nICYmIGxvd2VyS2V5ICE9PSBjcml0ZXJpYS5rZXlzWzBdKSB7XG4gICAgICAgICAgY3JpdGVyaWEucmVwZWF0aW5nID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNyaXRlcmlhLmxhc3RUaW1lID0gY3VyclRpbWU7XG4gICAgICBjcml0ZXJpYS5rZXlzLnB1c2gobG93ZXJLZXkpO1xuICAgICAgY29uc3Qga2VlcEZvY3VzT25DdXJyZW50ID0gY3VycmVudEZvY3VzICYmICFjcml0ZXJpYS5yZXBlYXRpbmcgJiYgdGV4dENyaXRlcmlhTWF0Y2hlcyhjdXJyZW50Rm9jdXMsIGNyaXRlcmlhKTtcbiAgICAgIGlmIChjcml0ZXJpYS5wcmV2aW91c0tleU1hdGNoZWQgJiYgKGtlZXBGb2N1c09uQ3VycmVudCB8fCBtb3ZlRm9jdXMobGlzdCwgY3VycmVudEZvY3VzLCBmYWxzZSwgZGlzYWJsZWRJdGVtc0ZvY3VzYWJsZSwgbmV4dEl0ZW0sIGNyaXRlcmlhKSkpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNyaXRlcmlhLnByZXZpb3VzS2V5TWF0Y2hlZCA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAob25LZXlEb3duKSB7XG4gICAgICBvbktleURvd24oZXZlbnQpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihsaXN0UmVmLCByZWYpO1xuXG4gIC8qKlxuICAgKiB0aGUgaW5kZXggb2YgdGhlIGl0ZW0gc2hvdWxkIHJlY2VpdmUgZm9jdXNcbiAgICogaW4gYSBgdmFyaWFudD1cInNlbGVjdGVkTWVudVwiYCBpdCdzIHRoZSBmaXJzdCBgc2VsZWN0ZWRgIGl0ZW1cbiAgICogb3RoZXJ3aXNlIGl0J3MgdGhlIHZlcnkgZmlyc3QgaXRlbS5cbiAgICovXG4gIGxldCBhY3RpdmVJdGVtSW5kZXggPSAtMTtcbiAgLy8gc2luY2Ugd2UgaW5qZWN0IGZvY3VzIHJlbGF0ZWQgcHJvcHMgaW50byBjaGlsZHJlbiB3ZSBoYXZlIHRvIGRvIGEgbG9va2FoZWFkXG4gIC8vIHRvIGNoZWNrIGlmIHRoZXJlIGlzIGEgYHNlbGVjdGVkYCBpdGVtLiBXZSdyZSBsb29raW5nIGZvciB0aGUgbGFzdCBgc2VsZWN0ZWRgXG4gIC8vIGl0ZW0gYW5kIHVzZSB0aGUgZmlyc3QgdmFsaWQgaXRlbSBhcyBhIGZhbGxiYWNrXG4gIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIChjaGlsZCwgaW5kZXgpID0+IHtcbiAgICBpZiAoISAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgICBpZiAoYWN0aXZlSXRlbUluZGV4ID09PSBpbmRleCkge1xuICAgICAgICBhY3RpdmVJdGVtSW5kZXggKz0gMTtcbiAgICAgICAgaWYgKGFjdGl2ZUl0ZW1JbmRleCA+PSBjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgICAvLyB0aGVyZSBhcmUgbm8gZm9jdXNhYmxlIGl0ZW1zIHdpdGhpbiB0aGUgbGlzdC5cbiAgICAgICAgICBhY3RpdmVJdGVtSW5kZXggPSAtMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKGlzRnJhZ21lbnQoY2hpbGQpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoW1wiTVVJOiBUaGUgTWVudSBjb21wb25lbnQgZG9lc24ndCBhY2NlcHQgYSBGcmFnbWVudCBhcyBhIGNoaWxkLlwiLCAnQ29uc2lkZXIgcHJvdmlkaW5nIGFuIGFycmF5IGluc3RlYWQuJ10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIWNoaWxkLnByb3BzLmRpc2FibGVkKSB7XG4gICAgICBpZiAodmFyaWFudCA9PT0gJ3NlbGVjdGVkTWVudScgJiYgY2hpbGQucHJvcHMuc2VsZWN0ZWQpIHtcbiAgICAgICAgYWN0aXZlSXRlbUluZGV4ID0gaW5kZXg7XG4gICAgICB9IGVsc2UgaWYgKGFjdGl2ZUl0ZW1JbmRleCA9PT0gLTEpIHtcbiAgICAgICAgYWN0aXZlSXRlbUluZGV4ID0gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChhY3RpdmVJdGVtSW5kZXggPT09IGluZGV4ICYmIChjaGlsZC5wcm9wcy5kaXNhYmxlZCB8fCBjaGlsZC5wcm9wcy5tdWlTa2lwTGlzdEhpZ2hsaWdodCB8fCBjaGlsZC50eXBlLm11aVNraXBMaXN0SGlnaGxpZ2h0KSkge1xuICAgICAgYWN0aXZlSXRlbUluZGV4ICs9IDE7XG4gICAgICBpZiAoYWN0aXZlSXRlbUluZGV4ID49IGNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICAvLyB0aGVyZSBhcmUgbm8gZm9jdXNhYmxlIGl0ZW1zIHdpdGhpbiB0aGUgbGlzdC5cbiAgICAgICAgYWN0aXZlSXRlbUluZGV4ID0gLTE7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgY29uc3QgaXRlbXMgPSBSZWFjdC5DaGlsZHJlbi5tYXAoY2hpbGRyZW4sIChjaGlsZCwgaW5kZXgpID0+IHtcbiAgICBpZiAoaW5kZXggPT09IGFjdGl2ZUl0ZW1JbmRleCkge1xuICAgICAgY29uc3QgbmV3Q2hpbGRQcm9wcyA9IHt9O1xuICAgICAgaWYgKGF1dG9Gb2N1c0l0ZW0pIHtcbiAgICAgICAgbmV3Q2hpbGRQcm9wcy5hdXRvRm9jdXMgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGNoaWxkLnByb3BzLnRhYkluZGV4ID09PSB1bmRlZmluZWQgJiYgdmFyaWFudCA9PT0gJ3NlbGVjdGVkTWVudScpIHtcbiAgICAgICAgbmV3Q2hpbGRQcm9wcy50YWJJbmRleCA9IDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChjaGlsZCwgbmV3Q2hpbGRQcm9wcyk7XG4gICAgfVxuICAgIHJldHVybiBjaGlsZDtcbiAgfSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChMaXN0LCBfZXh0ZW5kcyh7XG4gICAgcm9sZTogXCJtZW51XCIsXG4gICAgcmVmOiBoYW5kbGVSZWYsXG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgb25LZXlEb3duOiBoYW5kbGVLZXlEb3duLFxuICAgIHRhYkluZGV4OiBhdXRvRm9jdXMgPyAwIDogLTFcbiAgfSwgb3RoZXIsIHtcbiAgICBjaGlsZHJlbjogaXRlbXNcbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBNZW51TGlzdC5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHdpbGwgZm9jdXMgdGhlIGBbcm9sZT1cIm1lbnVcIl1gIGNvbnRhaW5lciBhbmQgbW92ZSBpbnRvIHRhYiBvcmRlci5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGF1dG9Gb2N1czogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHdpbGwgZm9jdXMgdGhlIGZpcnN0IG1lbnVpdGVtIGlmIGB2YXJpYW50PVwibWVudVwiYCBvciBzZWxlY3RlZCBpdGVtXG4gICAqIGlmIGB2YXJpYW50PVwic2VsZWN0ZWRNZW51XCJgLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgYXV0b0ZvY3VzSXRlbTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBNZW51TGlzdCBjb250ZW50cywgbm9ybWFsbHkgYE1lbnVJdGVtYHMuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHdpbGwgYWxsb3cgZm9jdXMgb24gZGlzYWJsZWQgaXRlbXMuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlZEl0ZW1zRm9jdXNhYmxlOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIG1lbnUgaXRlbXMgd2lsbCBub3Qgd3JhcCBmb2N1cy5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVMaXN0V3JhcDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbktleURvd246IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLiBVc2UgYG1lbnVgIHRvIHByZXZlbnQgc2VsZWN0ZWQgaXRlbXMgZnJvbSBpbXBhY3RpbmcgdGhlIGluaXRpYWwgZm9jdXNcbiAgICogYW5kIHRoZSB2ZXJ0aWNhbCBhbGlnbm1lbnQgcmVsYXRpdmUgdG8gdGhlIGFuY2hvciBlbGVtZW50LlxuICAgKiBAZGVmYXVsdCAnc2VsZWN0ZWRNZW51J1xuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnbWVudScsICdzZWxlY3RlZE1lbnUnXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBNZW51TGlzdDsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFBvcG92ZXJVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aVBvcG92ZXInLCBzbG90KTtcbn1cbmNvbnN0IHBvcG92ZXJDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpUG9wb3ZlcicsIFsncm9vdCcsICdwYXBlciddKTtcbmV4cG9ydCBkZWZhdWx0IHBvcG92ZXJDbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcIm9uRW50ZXJpbmdcIl0sXG4gIF9leGNsdWRlZDIgPSBbXCJhY3Rpb25cIiwgXCJhbmNob3JFbFwiLCBcImFuY2hvck9yaWdpblwiLCBcImFuY2hvclBvc2l0aW9uXCIsIFwiYW5jaG9yUmVmZXJlbmNlXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb250YWluZXJcIiwgXCJlbGV2YXRpb25cIiwgXCJtYXJnaW5UaHJlc2hvbGRcIiwgXCJvcGVuXCIsIFwiUGFwZXJQcm9wc1wiLCBcInNsb3RzXCIsIFwic2xvdFByb3BzXCIsIFwidHJhbnNmb3JtT3JpZ2luXCIsIFwiVHJhbnNpdGlvbkNvbXBvbmVudFwiLCBcInRyYW5zaXRpb25EdXJhdGlvblwiLCBcIlRyYW5zaXRpb25Qcm9wc1wiLCBcImRpc2FibGVTY3JvbGxMb2NrXCJdLFxuICBfZXhjbHVkZWQzID0gW1wic2xvdFByb3BzXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgdXNlU2xvdFByb3BzLCBpc0hvc3RDb21wb25lbnQgfSBmcm9tICdAbXVpL2Jhc2UvdXRpbHMnO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IEhUTUxFbGVtZW50VHlwZSBmcm9tICdAbXVpL3V0aWxzL0hUTUxFbGVtZW50VHlwZSc7XG5pbXBvcnQgcmVmVHlwZSBmcm9tICdAbXVpL3V0aWxzL3JlZlR5cGUnO1xuaW1wb3J0IGVsZW1lbnRUeXBlQWNjZXB0aW5nUmVmIGZyb20gJ0BtdWkvdXRpbHMvZWxlbWVudFR5cGVBY2NlcHRpbmdSZWYnO1xuaW1wb3J0IGludGVnZXJQcm9wVHlwZSBmcm9tICdAbXVpL3V0aWxzL2ludGVnZXJQcm9wVHlwZSc7XG5pbXBvcnQgY2hhaW5Qcm9wVHlwZXMgZnJvbSAnQG11aS91dGlscy9jaGFpblByb3BUeXBlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHVzZVRoZW1lUHJvcHMgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lUHJvcHMnO1xuaW1wb3J0IGRlYm91bmNlIGZyb20gJy4uL3V0aWxzL2RlYm91bmNlJztcbmltcG9ydCBvd25lckRvY3VtZW50IGZyb20gJy4uL3V0aWxzL293bmVyRG9jdW1lbnQnO1xuaW1wb3J0IG93bmVyV2luZG93IGZyb20gJy4uL3V0aWxzL293bmVyV2luZG93JztcbmltcG9ydCB1c2VGb3JrUmVmIGZyb20gJy4uL3V0aWxzL3VzZUZvcmtSZWYnO1xuaW1wb3J0IEdyb3cgZnJvbSAnLi4vR3Jvdyc7XG5pbXBvcnQgTW9kYWwgZnJvbSAnLi4vTW9kYWwnO1xuaW1wb3J0IFBhcGVyQmFzZSBmcm9tICcuLi9QYXBlcic7XG5pbXBvcnQgeyBnZXRQb3BvdmVyVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9wb3BvdmVyQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuZXhwb3J0IGZ1bmN0aW9uIGdldE9mZnNldFRvcChyZWN0LCB2ZXJ0aWNhbCkge1xuICBsZXQgb2Zmc2V0ID0gMDtcbiAgaWYgKHR5cGVvZiB2ZXJ0aWNhbCA9PT0gJ251bWJlcicpIHtcbiAgICBvZmZzZXQgPSB2ZXJ0aWNhbDtcbiAgfSBlbHNlIGlmICh2ZXJ0aWNhbCA9PT0gJ2NlbnRlcicpIHtcbiAgICBvZmZzZXQgPSByZWN0LmhlaWdodCAvIDI7XG4gIH0gZWxzZSBpZiAodmVydGljYWwgPT09ICdib3R0b20nKSB7XG4gICAgb2Zmc2V0ID0gcmVjdC5oZWlnaHQ7XG4gIH1cbiAgcmV0dXJuIG9mZnNldDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRPZmZzZXRMZWZ0KHJlY3QsIGhvcml6b250YWwpIHtcbiAgbGV0IG9mZnNldCA9IDA7XG4gIGlmICh0eXBlb2YgaG9yaXpvbnRhbCA9PT0gJ251bWJlcicpIHtcbiAgICBvZmZzZXQgPSBob3Jpem9udGFsO1xuICB9IGVsc2UgaWYgKGhvcml6b250YWwgPT09ICdjZW50ZXInKSB7XG4gICAgb2Zmc2V0ID0gcmVjdC53aWR0aCAvIDI7XG4gIH0gZWxzZSBpZiAoaG9yaXpvbnRhbCA9PT0gJ3JpZ2h0Jykge1xuICAgIG9mZnNldCA9IHJlY3Qud2lkdGg7XG4gIH1cbiAgcmV0dXJuIG9mZnNldDtcbn1cbmZ1bmN0aW9uIGdldFRyYW5zZm9ybU9yaWdpblZhbHVlKHRyYW5zZm9ybU9yaWdpbikge1xuICByZXR1cm4gW3RyYW5zZm9ybU9yaWdpbi5ob3Jpem9udGFsLCB0cmFuc2Zvcm1PcmlnaW4udmVydGljYWxdLm1hcChuID0+IHR5cGVvZiBuID09PSAnbnVtYmVyJyA/IGAke259cHhgIDogbikuam9pbignICcpO1xufVxuZnVuY3Rpb24gcmVzb2x2ZUFuY2hvckVsKGFuY2hvckVsKSB7XG4gIHJldHVybiB0eXBlb2YgYW5jaG9yRWwgPT09ICdmdW5jdGlvbicgPyBhbmNob3JFbCgpIDogYW5jaG9yRWw7XG59XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3Nlc1xuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290J10sXG4gICAgcGFwZXI6IFsncGFwZXInXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldFBvcG92ZXJVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcbmV4cG9ydCBjb25zdCBQb3BvdmVyUm9vdCA9IHN0eWxlZChNb2RhbCwge1xuICBuYW1lOiAnTXVpUG9wb3ZlcicsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMucm9vdFxufSkoe30pO1xuZXhwb3J0IGNvbnN0IFBvcG92ZXJQYXBlciA9IHN0eWxlZChQYXBlckJhc2UsIHtcbiAgbmFtZTogJ011aVBvcG92ZXInLFxuICBzbG90OiAnUGFwZXInLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5wYXBlclxufSkoe1xuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgb3ZlcmZsb3dZOiAnYXV0bycsXG4gIG92ZXJmbG93WDogJ2hpZGRlbicsXG4gIC8vIFNvIHdlIHNlZSB0aGUgcG9wb3ZlciB3aGVuIGl0J3MgZW1wdHkuXG4gIC8vIEl0J3MgbW9zdCBsaWtlbHkgb24gaXNzdWUgb24gdXNlcmxhbmQuXG4gIG1pbldpZHRoOiAxNixcbiAgbWluSGVpZ2h0OiAxNixcbiAgbWF4V2lkdGg6ICdjYWxjKDEwMCUgLSAzMnB4KScsXG4gIG1heEhlaWdodDogJ2NhbGMoMTAwJSAtIDMycHgpJyxcbiAgLy8gV2UgZGlzYWJsZSB0aGUgZm9jdXMgcmluZyBmb3IgbW91c2UsIHRvdWNoIGFuZCBrZXlib2FyZCB1c2Vycy5cbiAgb3V0bGluZTogMFxufSk7XG5jb25zdCBQb3BvdmVyID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gUG9wb3ZlcihpblByb3BzLCByZWYpIHtcbiAgdmFyIF9zbG90UHJvcHMkcGFwZXIsIF9zbG90cyRyb290LCBfc2xvdHMkcGFwZXI7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aVBvcG92ZXInXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBhY3Rpb24sXG4gICAgICBhbmNob3JFbCxcbiAgICAgIGFuY2hvck9yaWdpbiA9IHtcbiAgICAgICAgdmVydGljYWw6ICd0b3AnLFxuICAgICAgICBob3Jpem9udGFsOiAnbGVmdCdcbiAgICAgIH0sXG4gICAgICBhbmNob3JQb3NpdGlvbixcbiAgICAgIGFuY2hvclJlZmVyZW5jZSA9ICdhbmNob3JFbCcsXG4gICAgICBjaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNvbnRhaW5lcjogY29udGFpbmVyUHJvcCxcbiAgICAgIGVsZXZhdGlvbiA9IDgsXG4gICAgICBtYXJnaW5UaHJlc2hvbGQgPSAxNixcbiAgICAgIG9wZW4sXG4gICAgICBQYXBlclByb3BzOiBQYXBlclByb3BzUHJvcCA9IHt9LFxuICAgICAgc2xvdHMsXG4gICAgICBzbG90UHJvcHMsXG4gICAgICB0cmFuc2Zvcm1PcmlnaW4gPSB7XG4gICAgICAgIHZlcnRpY2FsOiAndG9wJyxcbiAgICAgICAgaG9yaXpvbnRhbDogJ2xlZnQnXG4gICAgICB9LFxuICAgICAgVHJhbnNpdGlvbkNvbXBvbmVudCA9IEdyb3csXG4gICAgICB0cmFuc2l0aW9uRHVyYXRpb246IHRyYW5zaXRpb25EdXJhdGlvblByb3AgPSAnYXV0bycsXG4gICAgICBUcmFuc2l0aW9uUHJvcHM6IHtcbiAgICAgICAgb25FbnRlcmluZ1xuICAgICAgfSA9IHt9LFxuICAgICAgZGlzYWJsZVNjcm9sbExvY2sgPSBmYWxzZVxuICAgIH0gPSBwcm9wcyxcbiAgICBUcmFuc2l0aW9uUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcy5UcmFuc2l0aW9uUHJvcHMsIF9leGNsdWRlZCksXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkMik7XG4gIGNvbnN0IGV4dGVybmFsUGFwZXJTbG90UHJvcHMgPSAoX3Nsb3RQcm9wcyRwYXBlciA9IHNsb3RQcm9wcyA9PSBudWxsID8gdm9pZCAwIDogc2xvdFByb3BzLnBhcGVyKSAhPSBudWxsID8gX3Nsb3RQcm9wcyRwYXBlciA6IFBhcGVyUHJvcHNQcm9wO1xuICBjb25zdCBwYXBlclJlZiA9IFJlYWN0LnVzZVJlZigpO1xuICBjb25zdCBoYW5kbGVQYXBlclJlZiA9IHVzZUZvcmtSZWYocGFwZXJSZWYsIGV4dGVybmFsUGFwZXJTbG90UHJvcHMucmVmKTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGFuY2hvck9yaWdpbixcbiAgICBhbmNob3JSZWZlcmVuY2UsXG4gICAgZWxldmF0aW9uLFxuICAgIG1hcmdpblRocmVzaG9sZCxcbiAgICBleHRlcm5hbFBhcGVyU2xvdFByb3BzLFxuICAgIHRyYW5zZm9ybU9yaWdpbixcbiAgICBUcmFuc2l0aW9uQ29tcG9uZW50LFxuICAgIHRyYW5zaXRpb25EdXJhdGlvbjogdHJhbnNpdGlvbkR1cmF0aW9uUHJvcCxcbiAgICBUcmFuc2l0aW9uUHJvcHNcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcblxuICAvLyBSZXR1cm5zIHRoZSB0b3AvbGVmdCBvZmZzZXQgb2YgdGhlIHBvc2l0aW9uXG4gIC8vIHRvIGF0dGFjaCB0byBvbiB0aGUgYW5jaG9yIGVsZW1lbnQgKG9yIGJvZHkgaWYgbm9uZSBpcyBwcm92aWRlZClcbiAgY29uc3QgZ2V0QW5jaG9yT2Zmc2V0ID0gUmVhY3QudXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGlmIChhbmNob3JSZWZlcmVuY2UgPT09ICdhbmNob3JQb3NpdGlvbicpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmICghYW5jaG9yUG9zaXRpb24pIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdNVUk6IFlvdSBuZWVkIHRvIHByb3ZpZGUgYSBgYW5jaG9yUG9zaXRpb25gIHByb3Agd2hlbiB1c2luZyAnICsgJzxQb3BvdmVyIGFuY2hvclJlZmVyZW5jZT1cImFuY2hvclBvc2l0aW9uXCIgLz4uJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhbmNob3JQb3NpdGlvbjtcbiAgICB9XG4gICAgY29uc3QgcmVzb2x2ZWRBbmNob3JFbCA9IHJlc29sdmVBbmNob3JFbChhbmNob3JFbCk7XG5cbiAgICAvLyBJZiBhbiBhbmNob3IgZWxlbWVudCB3YXNuJ3QgcHJvdmlkZWQsIGp1c3QgdXNlIHRoZSBwYXJlbnQgYm9keSBlbGVtZW50IG9mIHRoaXMgUG9wb3ZlclxuICAgIGNvbnN0IGFuY2hvckVsZW1lbnQgPSByZXNvbHZlZEFuY2hvckVsICYmIHJlc29sdmVkQW5jaG9yRWwubm9kZVR5cGUgPT09IDEgPyByZXNvbHZlZEFuY2hvckVsIDogb3duZXJEb2N1bWVudChwYXBlclJlZi5jdXJyZW50KS5ib2R5O1xuICAgIGNvbnN0IGFuY2hvclJlY3QgPSBhbmNob3JFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjb25zdCBib3ggPSBhbmNob3JFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAndGVzdCcgJiYgYm94LnRvcCA9PT0gMCAmJiBib3gubGVmdCA9PT0gMCAmJiBib3gucmlnaHQgPT09IDAgJiYgYm94LmJvdHRvbSA9PT0gMCkge1xuICAgICAgICBjb25zb2xlLndhcm4oWydNVUk6IFRoZSBgYW5jaG9yRWxgIHByb3AgcHJvdmlkZWQgdG8gdGhlIGNvbXBvbmVudCBpcyBpbnZhbGlkLicsICdUaGUgYW5jaG9yIGVsZW1lbnQgc2hvdWxkIGJlIHBhcnQgb2YgdGhlIGRvY3VtZW50IGxheW91dC4nLCBcIk1ha2Ugc3VyZSB0aGUgZWxlbWVudCBpcyBwcmVzZW50IGluIHRoZSBkb2N1bWVudCBvciB0aGF0IGl0J3Mgbm90IGRpc3BsYXkgbm9uZS5cIl0uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgdG9wOiBhbmNob3JSZWN0LnRvcCArIGdldE9mZnNldFRvcChhbmNob3JSZWN0LCBhbmNob3JPcmlnaW4udmVydGljYWwpLFxuICAgICAgbGVmdDogYW5jaG9yUmVjdC5sZWZ0ICsgZ2V0T2Zmc2V0TGVmdChhbmNob3JSZWN0LCBhbmNob3JPcmlnaW4uaG9yaXpvbnRhbClcbiAgICB9O1xuICB9LCBbYW5jaG9yRWwsIGFuY2hvck9yaWdpbi5ob3Jpem9udGFsLCBhbmNob3JPcmlnaW4udmVydGljYWwsIGFuY2hvclBvc2l0aW9uLCBhbmNob3JSZWZlcmVuY2VdKTtcblxuICAvLyBSZXR1cm5zIHRoZSBiYXNlIHRyYW5zZm9ybSBvcmlnaW4gdXNpbmcgdGhlIGVsZW1lbnRcbiAgY29uc3QgZ2V0VHJhbnNmb3JtT3JpZ2luID0gUmVhY3QudXNlQ2FsbGJhY2soZWxlbVJlY3QgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB2ZXJ0aWNhbDogZ2V0T2Zmc2V0VG9wKGVsZW1SZWN0LCB0cmFuc2Zvcm1PcmlnaW4udmVydGljYWwpLFxuICAgICAgaG9yaXpvbnRhbDogZ2V0T2Zmc2V0TGVmdChlbGVtUmVjdCwgdHJhbnNmb3JtT3JpZ2luLmhvcml6b250YWwpXG4gICAgfTtcbiAgfSwgW3RyYW5zZm9ybU9yaWdpbi5ob3Jpem9udGFsLCB0cmFuc2Zvcm1PcmlnaW4udmVydGljYWxdKTtcbiAgY29uc3QgZ2V0UG9zaXRpb25pbmdTdHlsZSA9IFJlYWN0LnVzZUNhbGxiYWNrKGVsZW1lbnQgPT4ge1xuICAgIGNvbnN0IGVsZW1SZWN0ID0ge1xuICAgICAgd2lkdGg6IGVsZW1lbnQub2Zmc2V0V2lkdGgsXG4gICAgICBoZWlnaHQ6IGVsZW1lbnQub2Zmc2V0SGVpZ2h0XG4gICAgfTtcblxuICAgIC8vIEdldCB0aGUgdHJhbnNmb3JtIG9yaWdpbiBwb2ludCBvbiB0aGUgZWxlbWVudCBpdHNlbGZcbiAgICBjb25zdCBlbGVtVHJhbnNmb3JtT3JpZ2luID0gZ2V0VHJhbnNmb3JtT3JpZ2luKGVsZW1SZWN0KTtcbiAgICBpZiAoYW5jaG9yUmVmZXJlbmNlID09PSAnbm9uZScpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHRvcDogbnVsbCxcbiAgICAgICAgbGVmdDogbnVsbCxcbiAgICAgICAgdHJhbnNmb3JtT3JpZ2luOiBnZXRUcmFuc2Zvcm1PcmlnaW5WYWx1ZShlbGVtVHJhbnNmb3JtT3JpZ2luKVxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBHZXQgdGhlIG9mZnNldCBvZiB0aGUgYW5jaG9yaW5nIGVsZW1lbnRcbiAgICBjb25zdCBhbmNob3JPZmZzZXQgPSBnZXRBbmNob3JPZmZzZXQoKTtcblxuICAgIC8vIENhbGN1bGF0ZSBlbGVtZW50IHBvc2l0aW9uaW5nXG4gICAgbGV0IHRvcCA9IGFuY2hvck9mZnNldC50b3AgLSBlbGVtVHJhbnNmb3JtT3JpZ2luLnZlcnRpY2FsO1xuICAgIGxldCBsZWZ0ID0gYW5jaG9yT2Zmc2V0LmxlZnQgLSBlbGVtVHJhbnNmb3JtT3JpZ2luLmhvcml6b250YWw7XG4gICAgY29uc3QgYm90dG9tID0gdG9wICsgZWxlbVJlY3QuaGVpZ2h0O1xuICAgIGNvbnN0IHJpZ2h0ID0gbGVmdCArIGVsZW1SZWN0LndpZHRoO1xuXG4gICAgLy8gVXNlIHRoZSBwYXJlbnQgd2luZG93IG9mIHRoZSBhbmNob3JFbCBpZiBwcm92aWRlZFxuICAgIGNvbnN0IGNvbnRhaW5lcldpbmRvdyA9IG93bmVyV2luZG93KHJlc29sdmVBbmNob3JFbChhbmNob3JFbCkpO1xuXG4gICAgLy8gV2luZG93IHRocmVzaG9sZHMgdGFraW5nIHJlcXVpcmVkIG1hcmdpbiBpbnRvIGFjY291bnRcbiAgICBjb25zdCBoZWlnaHRUaHJlc2hvbGQgPSBjb250YWluZXJXaW5kb3cuaW5uZXJIZWlnaHQgLSBtYXJnaW5UaHJlc2hvbGQ7XG4gICAgY29uc3Qgd2lkdGhUaHJlc2hvbGQgPSBjb250YWluZXJXaW5kb3cuaW5uZXJXaWR0aCAtIG1hcmdpblRocmVzaG9sZDtcblxuICAgIC8vIENoZWNrIGlmIHRoZSB2ZXJ0aWNhbCBheGlzIG5lZWRzIHNoaWZ0aW5nXG4gICAgaWYgKG1hcmdpblRocmVzaG9sZCAhPT0gbnVsbCAmJiB0b3AgPCBtYXJnaW5UaHJlc2hvbGQpIHtcbiAgICAgIGNvbnN0IGRpZmYgPSB0b3AgLSBtYXJnaW5UaHJlc2hvbGQ7XG4gICAgICB0b3AgLT0gZGlmZjtcbiAgICAgIGVsZW1UcmFuc2Zvcm1PcmlnaW4udmVydGljYWwgKz0gZGlmZjtcbiAgICB9IGVsc2UgaWYgKG1hcmdpblRocmVzaG9sZCAhPT0gbnVsbCAmJiBib3R0b20gPiBoZWlnaHRUaHJlc2hvbGQpIHtcbiAgICAgIGNvbnN0IGRpZmYgPSBib3R0b20gLSBoZWlnaHRUaHJlc2hvbGQ7XG4gICAgICB0b3AgLT0gZGlmZjtcbiAgICAgIGVsZW1UcmFuc2Zvcm1PcmlnaW4udmVydGljYWwgKz0gZGlmZjtcbiAgICB9XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChlbGVtUmVjdC5oZWlnaHQgPiBoZWlnaHRUaHJlc2hvbGQgJiYgZWxlbVJlY3QuaGVpZ2h0ICYmIGhlaWdodFRocmVzaG9sZCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFsnTVVJOiBUaGUgcG9wb3ZlciBjb21wb25lbnQgaXMgdG9vIHRhbGwuJywgYFNvbWUgcGFydCBvZiBpdCBjYW4gbm90IGJlIHNlZW4gb24gdGhlIHNjcmVlbiAoJHtlbGVtUmVjdC5oZWlnaHQgLSBoZWlnaHRUaHJlc2hvbGR9cHgpLmAsICdQbGVhc2UgY29uc2lkZXIgYWRkaW5nIGEgYG1heC1oZWlnaHRgIHRvIGltcHJvdmUgdGhlIHVzZXItZXhwZXJpZW5jZS4nXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgaWYgdGhlIGhvcml6b250YWwgYXhpcyBuZWVkcyBzaGlmdGluZ1xuICAgIGlmIChtYXJnaW5UaHJlc2hvbGQgIT09IG51bGwgJiYgbGVmdCA8IG1hcmdpblRocmVzaG9sZCkge1xuICAgICAgY29uc3QgZGlmZiA9IGxlZnQgLSBtYXJnaW5UaHJlc2hvbGQ7XG4gICAgICBsZWZ0IC09IGRpZmY7XG4gICAgICBlbGVtVHJhbnNmb3JtT3JpZ2luLmhvcml6b250YWwgKz0gZGlmZjtcbiAgICB9IGVsc2UgaWYgKHJpZ2h0ID4gd2lkdGhUaHJlc2hvbGQpIHtcbiAgICAgIGNvbnN0IGRpZmYgPSByaWdodCAtIHdpZHRoVGhyZXNob2xkO1xuICAgICAgbGVmdCAtPSBkaWZmO1xuICAgICAgZWxlbVRyYW5zZm9ybU9yaWdpbi5ob3Jpem9udGFsICs9IGRpZmY7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICB0b3A6IGAke01hdGgucm91bmQodG9wKX1weGAsXG4gICAgICBsZWZ0OiBgJHtNYXRoLnJvdW5kKGxlZnQpfXB4YCxcbiAgICAgIHRyYW5zZm9ybU9yaWdpbjogZ2V0VHJhbnNmb3JtT3JpZ2luVmFsdWUoZWxlbVRyYW5zZm9ybU9yaWdpbilcbiAgICB9O1xuICB9LCBbYW5jaG9yRWwsIGFuY2hvclJlZmVyZW5jZSwgZ2V0QW5jaG9yT2Zmc2V0LCBnZXRUcmFuc2Zvcm1PcmlnaW4sIG1hcmdpblRocmVzaG9sZF0pO1xuICBjb25zdCBbaXNQb3NpdGlvbmVkLCBzZXRJc1Bvc2l0aW9uZWRdID0gUmVhY3QudXNlU3RhdGUob3Blbik7XG4gIGNvbnN0IHNldFBvc2l0aW9uaW5nU3R5bGVzID0gUmVhY3QudXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGNvbnN0IGVsZW1lbnQgPSBwYXBlclJlZi5jdXJyZW50O1xuICAgIGlmICghZWxlbWVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBwb3NpdGlvbmluZyA9IGdldFBvc2l0aW9uaW5nU3R5bGUoZWxlbWVudCk7XG4gICAgaWYgKHBvc2l0aW9uaW5nLnRvcCAhPT0gbnVsbCkge1xuICAgICAgZWxlbWVudC5zdHlsZS50b3AgPSBwb3NpdGlvbmluZy50b3A7XG4gICAgfVxuICAgIGlmIChwb3NpdGlvbmluZy5sZWZ0ICE9PSBudWxsKSB7XG4gICAgICBlbGVtZW50LnN0eWxlLmxlZnQgPSBwb3NpdGlvbmluZy5sZWZ0O1xuICAgIH1cbiAgICBlbGVtZW50LnN0eWxlLnRyYW5zZm9ybU9yaWdpbiA9IHBvc2l0aW9uaW5nLnRyYW5zZm9ybU9yaWdpbjtcbiAgICBzZXRJc1Bvc2l0aW9uZWQodHJ1ZSk7XG4gIH0sIFtnZXRQb3NpdGlvbmluZ1N0eWxlXSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGRpc2FibGVTY3JvbGxMb2NrKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgc2V0UG9zaXRpb25pbmdTdHlsZXMpO1xuICAgIH1cbiAgICByZXR1cm4gKCkgPT4gd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHNldFBvc2l0aW9uaW5nU3R5bGVzKTtcbiAgfSwgW2FuY2hvckVsLCBkaXNhYmxlU2Nyb2xsTG9jaywgc2V0UG9zaXRpb25pbmdTdHlsZXNdKTtcbiAgY29uc3QgaGFuZGxlRW50ZXJpbmcgPSAoZWxlbWVudCwgaXNBcHBlYXJpbmcpID0+IHtcbiAgICBpZiAob25FbnRlcmluZykge1xuICAgICAgb25FbnRlcmluZyhlbGVtZW50LCBpc0FwcGVhcmluZyk7XG4gICAgfVxuICAgIHNldFBvc2l0aW9uaW5nU3R5bGVzKCk7XG4gIH07XG4gIGNvbnN0IGhhbmRsZUV4aXRlZCA9ICgpID0+IHtcbiAgICBzZXRJc1Bvc2l0aW9uZWQoZmFsc2UpO1xuICB9O1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChvcGVuKSB7XG4gICAgICBzZXRQb3NpdGlvbmluZ1N0eWxlcygpO1xuICAgIH1cbiAgfSk7XG4gIFJlYWN0LnVzZUltcGVyYXRpdmVIYW5kbGUoYWN0aW9uLCAoKSA9PiBvcGVuID8ge1xuICAgIHVwZGF0ZVBvc2l0aW9uOiAoKSA9PiB7XG4gICAgICBzZXRQb3NpdGlvbmluZ1N0eWxlcygpO1xuICAgIH1cbiAgfSA6IG51bGwsIFtvcGVuLCBzZXRQb3NpdGlvbmluZ1N0eWxlc10pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghb3Blbikge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgY29uc3QgaGFuZGxlUmVzaXplID0gZGVib3VuY2UoKCkgPT4ge1xuICAgICAgc2V0UG9zaXRpb25pbmdTdHlsZXMoKTtcbiAgICB9KTtcbiAgICBjb25zdCBjb250YWluZXJXaW5kb3cgPSBvd25lcldpbmRvdyhhbmNob3JFbCk7XG4gICAgY29udGFpbmVyV2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGhhbmRsZVJlc2l6ZSk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGhhbmRsZVJlc2l6ZS5jbGVhcigpO1xuICAgICAgY29udGFpbmVyV2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGhhbmRsZVJlc2l6ZSk7XG4gICAgfTtcbiAgfSwgW2FuY2hvckVsLCBvcGVuLCBzZXRQb3NpdGlvbmluZ1N0eWxlc10pO1xuICBsZXQgdHJhbnNpdGlvbkR1cmF0aW9uID0gdHJhbnNpdGlvbkR1cmF0aW9uUHJvcDtcbiAgaWYgKHRyYW5zaXRpb25EdXJhdGlvblByb3AgPT09ICdhdXRvJyAmJiAhVHJhbnNpdGlvbkNvbXBvbmVudC5tdWlTdXBwb3J0QXV0bykge1xuICAgIHRyYW5zaXRpb25EdXJhdGlvbiA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIC8vIElmIHRoZSBjb250YWluZXIgcHJvcCBpcyBwcm92aWRlZCwgdXNlIHRoYXRcbiAgLy8gSWYgdGhlIGFuY2hvckVsIHByb3AgaXMgcHJvdmlkZWQsIHVzZSBpdHMgcGFyZW50IGJvZHkgZWxlbWVudCBhcyB0aGUgY29udGFpbmVyXG4gIC8vIElmIG5laXRoZXIgYXJlIHByb3ZpZGVkIGxldCB0aGUgTW9kYWwgdGFrZSBjYXJlIG9mIGNob29zaW5nIHRoZSBjb250YWluZXJcbiAgY29uc3QgY29udGFpbmVyID0gY29udGFpbmVyUHJvcCB8fCAoYW5jaG9yRWwgPyBvd25lckRvY3VtZW50KHJlc29sdmVBbmNob3JFbChhbmNob3JFbCkpLmJvZHkgOiB1bmRlZmluZWQpO1xuICBjb25zdCBSb290U2xvdCA9IChfc2xvdHMkcm9vdCA9IHNsb3RzID09IG51bGwgPyB2b2lkIDAgOiBzbG90cy5yb290KSAhPSBudWxsID8gX3Nsb3RzJHJvb3QgOiBQb3BvdmVyUm9vdDtcbiAgY29uc3QgUGFwZXJTbG90ID0gKF9zbG90cyRwYXBlciA9IHNsb3RzID09IG51bGwgPyB2b2lkIDAgOiBzbG90cy5wYXBlcikgIT0gbnVsbCA/IF9zbG90cyRwYXBlciA6IFBvcG92ZXJQYXBlcjtcbiAgY29uc3QgcGFwZXJQcm9wcyA9IHVzZVNsb3RQcm9wcyh7XG4gICAgZWxlbWVudFR5cGU6IFBhcGVyU2xvdCxcbiAgICBleHRlcm5hbFNsb3RQcm9wczogX2V4dGVuZHMoe30sIGV4dGVybmFsUGFwZXJTbG90UHJvcHMsIHtcbiAgICAgIHN0eWxlOiBpc1Bvc2l0aW9uZWQgPyBleHRlcm5hbFBhcGVyU2xvdFByb3BzLnN0eWxlIDogX2V4dGVuZHMoe30sIGV4dGVybmFsUGFwZXJTbG90UHJvcHMuc3R5bGUsIHtcbiAgICAgICAgb3BhY2l0eTogMFxuICAgICAgfSlcbiAgICB9KSxcbiAgICBhZGRpdGlvbmFsUHJvcHM6IHtcbiAgICAgIGVsZXZhdGlvbixcbiAgICAgIHJlZjogaGFuZGxlUGFwZXJSZWZcbiAgICB9LFxuICAgIG93bmVyU3RhdGUsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucGFwZXIsIGV4dGVybmFsUGFwZXJTbG90UHJvcHMgPT0gbnVsbCA/IHZvaWQgMCA6IGV4dGVybmFsUGFwZXJTbG90UHJvcHMuY2xhc3NOYW1lKVxuICB9KTtcbiAgY29uc3QgX3VzZVNsb3RQcm9wcyA9IHVzZVNsb3RQcm9wcyh7XG4gICAgICBlbGVtZW50VHlwZTogUm9vdFNsb3QsXG4gICAgICBleHRlcm5hbFNsb3RQcm9wczogKHNsb3RQcm9wcyA9PSBudWxsID8gdm9pZCAwIDogc2xvdFByb3BzLnJvb3QpIHx8IHt9LFxuICAgICAgZXh0ZXJuYWxGb3J3YXJkZWRQcm9wczogb3RoZXIsXG4gICAgICBhZGRpdGlvbmFsUHJvcHM6IHtcbiAgICAgICAgcmVmLFxuICAgICAgICBzbG90UHJvcHM6IHtcbiAgICAgICAgICBiYWNrZHJvcDoge1xuICAgICAgICAgICAgaW52aXNpYmxlOiB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjb250YWluZXIsXG4gICAgICAgIG9wZW5cbiAgICAgIH0sXG4gICAgICBvd25lclN0YXRlLFxuICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKVxuICAgIH0pLFxuICAgIHtcbiAgICAgIHNsb3RQcm9wczogcm9vdFNsb3RQcm9wc1Byb3BcbiAgICB9ID0gX3VzZVNsb3RQcm9wcyxcbiAgICByb290UHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdXNlU2xvdFByb3BzLCBfZXhjbHVkZWQzKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFJvb3RTbG90LCBfZXh0ZW5kcyh7fSwgcm9vdFByb3BzLCAhaXNIb3N0Q29tcG9uZW50KFJvb3RTbG90KSAmJiB7XG4gICAgc2xvdFByb3BzOiByb290U2xvdFByb3BzUHJvcCxcbiAgICBkaXNhYmxlU2Nyb2xsTG9ja1xuICB9LCB7XG4gICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9fanN4KFRyYW5zaXRpb25Db21wb25lbnQsIF9leHRlbmRzKHtcbiAgICAgIGFwcGVhcjogdHJ1ZSxcbiAgICAgIGluOiBvcGVuLFxuICAgICAgb25FbnRlcmluZzogaGFuZGxlRW50ZXJpbmcsXG4gICAgICBvbkV4aXRlZDogaGFuZGxlRXhpdGVkLFxuICAgICAgdGltZW91dDogdHJhbnNpdGlvbkR1cmF0aW9uXG4gICAgfSwgVHJhbnNpdGlvblByb3BzLCB7XG4gICAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goUGFwZXJTbG90LCBfZXh0ZW5kcyh7fSwgcGFwZXJQcm9wcywge1xuICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgICAgIH0pKVxuICAgIH0pKVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFBvcG92ZXIucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogQSByZWYgZm9yIGltcGVyYXRpdmUgYWN0aW9ucy5cbiAgICogSXQgY3VycmVudGx5IG9ubHkgc3VwcG9ydHMgdXBkYXRlUG9zaXRpb24oKSBhY3Rpb24uXG4gICAqL1xuICBhY3Rpb246IHJlZlR5cGUsXG4gIC8qKlxuICAgKiBBbiBIVE1MIGVsZW1lbnQsIFtQb3BvdmVyVmlydHVhbEVsZW1lbnRdKC9tYXRlcmlhbC11aS9yZWFjdC1wb3BvdmVyLyN2aXJ0dWFsLWVsZW1lbnQpLFxuICAgKiBvciBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBlaXRoZXIuXG4gICAqIEl0J3MgdXNlZCB0byBzZXQgdGhlIHBvc2l0aW9uIG9mIHRoZSBwb3BvdmVyLlxuICAgKi9cbiAgYW5jaG9yRWw6IGNoYWluUHJvcFR5cGVzKFByb3BUeXBlcy5vbmVPZlR5cGUoW0hUTUxFbGVtZW50VHlwZSwgUHJvcFR5cGVzLmZ1bmNdKSwgcHJvcHMgPT4ge1xuICAgIGlmIChwcm9wcy5vcGVuICYmICghcHJvcHMuYW5jaG9yUmVmZXJlbmNlIHx8IHByb3BzLmFuY2hvclJlZmVyZW5jZSA9PT0gJ2FuY2hvckVsJykpIHtcbiAgICAgIGNvbnN0IHJlc29sdmVkQW5jaG9yRWwgPSByZXNvbHZlQW5jaG9yRWwocHJvcHMuYW5jaG9yRWwpO1xuICAgICAgaWYgKHJlc29sdmVkQW5jaG9yRWwgJiYgcmVzb2x2ZWRBbmNob3JFbC5ub2RlVHlwZSA9PT0gMSkge1xuICAgICAgICBjb25zdCBib3ggPSByZXNvbHZlZEFuY2hvckVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICd0ZXN0JyAmJiBib3gudG9wID09PSAwICYmIGJveC5sZWZ0ID09PSAwICYmIGJveC5yaWdodCA9PT0gMCAmJiBib3guYm90dG9tID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihbJ01VSTogVGhlIGBhbmNob3JFbGAgcHJvcCBwcm92aWRlZCB0byB0aGUgY29tcG9uZW50IGlzIGludmFsaWQuJywgJ1RoZSBhbmNob3IgZWxlbWVudCBzaG91bGQgYmUgcGFydCBvZiB0aGUgZG9jdW1lbnQgbGF5b3V0LicsIFwiTWFrZSBzdXJlIHRoZSBlbGVtZW50IGlzIHByZXNlbnQgaW4gdGhlIGRvY3VtZW50IG9yIHRoYXQgaXQncyBub3QgZGlzcGxheSBub25lLlwiXS5qb2luKCdcXG4nKSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoWydNVUk6IFRoZSBgYW5jaG9yRWxgIHByb3AgcHJvdmlkZWQgdG8gdGhlIGNvbXBvbmVudCBpcyBpbnZhbGlkLicsIGBJdCBzaG91bGQgYmUgYW4gRWxlbWVudCBvciBQb3BvdmVyVmlydHVhbEVsZW1lbnQgaW5zdGFuY2UgYnV0IGl0J3MgXFxgJHtyZXNvbHZlZEFuY2hvckVsfVxcYCBpbnN0ZWFkLmBdLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH0pLFxuICAvKipcbiAgICogVGhpcyBpcyB0aGUgcG9pbnQgb24gdGhlIGFuY2hvciB3aGVyZSB0aGUgcG9wb3ZlcidzXG4gICAqIGBhbmNob3JFbGAgd2lsbCBhdHRhY2ggdG8uIFRoaXMgaXMgbm90IHVzZWQgd2hlbiB0aGVcbiAgICogYW5jaG9yUmVmZXJlbmNlIGlzICdhbmNob3JQb3NpdGlvbicuXG4gICAqXG4gICAqIE9wdGlvbnM6XG4gICAqIHZlcnRpY2FsOiBbdG9wLCBjZW50ZXIsIGJvdHRvbV07XG4gICAqIGhvcml6b250YWw6IFtsZWZ0LCBjZW50ZXIsIHJpZ2h0XS5cbiAgICogQGRlZmF1bHQge1xuICAgKiAgIHZlcnRpY2FsOiAndG9wJyxcbiAgICogICBob3Jpem9udGFsOiAnbGVmdCcsXG4gICAqIH1cbiAgICovXG4gIGFuY2hvck9yaWdpbjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBob3Jpem9udGFsOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydjZW50ZXInLCAnbGVmdCcsICdyaWdodCddKSwgUHJvcFR5cGVzLm51bWJlcl0pLmlzUmVxdWlyZWQsXG4gICAgdmVydGljYWw6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2JvdHRvbScsICdjZW50ZXInLCAndG9wJ10pLCBQcm9wVHlwZXMubnVtYmVyXSkuaXNSZXF1aXJlZFxuICB9KSxcbiAgLyoqXG4gICAqIFRoaXMgaXMgdGhlIHBvc2l0aW9uIHRoYXQgbWF5IGJlIHVzZWQgdG8gc2V0IHRoZSBwb3NpdGlvbiBvZiB0aGUgcG9wb3Zlci5cbiAgICogVGhlIGNvb3JkaW5hdGVzIGFyZSByZWxhdGl2ZSB0byB0aGUgYXBwbGljYXRpb24ncyBjbGllbnQgYXJlYS5cbiAgICovXG4gIGFuY2hvclBvc2l0aW9uOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGxlZnQ6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgICB0b3A6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZFxuICB9KSxcbiAgLyoqXG4gICAqIFRoaXMgZGV0ZXJtaW5lcyB3aGljaCBhbmNob3IgcHJvcCB0byByZWZlciB0byB3aGVuIHNldHRpbmdcbiAgICogdGhlIHBvc2l0aW9uIG9mIHRoZSBwb3BvdmVyLlxuICAgKiBAZGVmYXVsdCAnYW5jaG9yRWwnXG4gICAqL1xuICBhbmNob3JSZWZlcmVuY2U6IFByb3BUeXBlcy5vbmVPZihbJ2FuY2hvckVsJywgJ2FuY2hvclBvc2l0aW9uJywgJ25vbmUnXSksXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIEFuIEhUTUwgZWxlbWVudCwgY29tcG9uZW50IGluc3RhbmNlLCBvciBmdW5jdGlvbiB0aGF0IHJldHVybnMgZWl0aGVyLlxuICAgKiBUaGUgYGNvbnRhaW5lcmAgd2lsbCBwYXNzZWQgdG8gdGhlIE1vZGFsIGNvbXBvbmVudC5cbiAgICpcbiAgICogQnkgZGVmYXVsdCwgaXQgdXNlcyB0aGUgYm9keSBvZiB0aGUgYW5jaG9yRWwncyB0b3AtbGV2ZWwgZG9jdW1lbnQgb2JqZWN0LFxuICAgKiBzbyBpdCdzIHNpbXBseSBgZG9jdW1lbnQuYm9keWAgbW9zdCBvZiB0aGUgdGltZS5cbiAgICovXG4gIGNvbnRhaW5lcjogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtIVE1MRWxlbWVudFR5cGUsIFByb3BUeXBlcy5mdW5jXSksXG4gIC8qKlxuICAgKiBEaXNhYmxlIHRoZSBzY3JvbGwgbG9jayBiZWhhdmlvci5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVTY3JvbGxMb2NrOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBlbGV2YXRpb24gb2YgdGhlIHBvcG92ZXIuXG4gICAqIEBkZWZhdWx0IDhcbiAgICovXG4gIGVsZXZhdGlvbjogaW50ZWdlclByb3BUeXBlLFxuICAvKipcbiAgICogU3BlY2lmaWVzIGhvdyBjbG9zZSB0byB0aGUgZWRnZSBvZiB0aGUgd2luZG93IHRoZSBwb3BvdmVyIGNhbiBhcHBlYXIuXG4gICAqIElmIG51bGwsIHRoZSBwb3BvdmVyIHdpbGwgbm90IGJlIGNvbnN0cmFpbmVkIGJ5IHRoZSB3aW5kb3cuXG4gICAqIEBkZWZhdWx0IDE2XG4gICAqL1xuICBtYXJnaW5UaHJlc2hvbGQ6IFByb3BUeXBlcy5udW1iZXIsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgcmVxdWVzdHMgdG8gYmUgY2xvc2VkLlxuICAgKiBUaGUgYHJlYXNvbmAgcGFyYW1ldGVyIGNhbiBvcHRpb25hbGx5IGJlIHVzZWQgdG8gY29udHJvbCB0aGUgcmVzcG9uc2UgdG8gYG9uQ2xvc2VgLlxuICAgKi9cbiAgb25DbG9zZTogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgc2hvd24uXG4gICAqL1xuICBvcGVuOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgW2BQYXBlcmBdKC9tYXRlcmlhbC11aS9hcGkvcGFwZXIvKSBlbGVtZW50LlxuICAgKlxuICAgKiBUaGlzIHByb3AgaXMgYW4gYWxpYXMgZm9yIGBzbG90UHJvcHMucGFwZXJgIGFuZCB3aWxsIGJlIG92ZXJyaWRlbiBieSBpdCBpZiBib3RoIGFyZSB1c2VkLlxuICAgKiBAZGVwcmVjYXRlZCBVc2UgYHNsb3RQcm9wcy5wYXBlcmAgaW5zdGVhZC5cbiAgICpcbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIFBhcGVyUHJvcHM6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLnNoYXBlKHtcbiAgICBjb21wb25lbnQ6IGVsZW1lbnRUeXBlQWNjZXB0aW5nUmVmXG4gIH0pLFxuICAvKipcbiAgICogVGhlIGV4dHJhIHByb3BzIGZvciB0aGUgc2xvdCBjb21wb25lbnRzLlxuICAgKiBZb3UgY2FuIG92ZXJyaWRlIHRoZSBleGlzdGluZyBwcm9wcyBvciBhZGQgbmV3IG9uZXMuXG4gICAqXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBzbG90UHJvcHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgcGFwZXI6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gICAgcm9vdDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnRzIHVzZWQgZm9yIGVhY2ggc2xvdCBpbnNpZGUuXG4gICAqXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBzbG90czogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBwYXBlcjogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIHJvb3Q6IFByb3BUeXBlcy5lbGVtZW50VHlwZVxuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgLyoqXG4gICAqIFRoaXMgaXMgdGhlIHBvaW50IG9uIHRoZSBwb3BvdmVyIHdoaWNoXG4gICAqIHdpbGwgYXR0YWNoIHRvIHRoZSBhbmNob3IncyBvcmlnaW4uXG4gICAqXG4gICAqIE9wdGlvbnM6XG4gICAqIHZlcnRpY2FsOiBbdG9wLCBjZW50ZXIsIGJvdHRvbSwgeChweCldO1xuICAgKiBob3Jpem9udGFsOiBbbGVmdCwgY2VudGVyLCByaWdodCwgeChweCldLlxuICAgKiBAZGVmYXVsdCB7XG4gICAqICAgdmVydGljYWw6ICd0b3AnLFxuICAgKiAgIGhvcml6b250YWw6ICdsZWZ0JyxcbiAgICogfVxuICAgKi9cbiAgdHJhbnNmb3JtT3JpZ2luOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGhvcml6b250YWw6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2NlbnRlcicsICdsZWZ0JywgJ3JpZ2h0J10pLCBQcm9wVHlwZXMubnVtYmVyXSkuaXNSZXF1aXJlZCxcbiAgICB2ZXJ0aWNhbDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnYm90dG9tJywgJ2NlbnRlcicsICd0b3AnXSksIFByb3BUeXBlcy5udW1iZXJdKS5pc1JlcXVpcmVkXG4gIH0pLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgdHJhbnNpdGlvbi5cbiAgICogW0ZvbGxvdyB0aGlzIGd1aWRlXSgvbWF0ZXJpYWwtdWkvdHJhbnNpdGlvbnMvI3RyYW5zaXRpb25jb21wb25lbnQtcHJvcCkgdG8gbGVhcm4gbW9yZSBhYm91dCB0aGUgcmVxdWlyZW1lbnRzIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQgR3Jvd1xuICAgKi9cbiAgVHJhbnNpdGlvbkNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogU2V0IHRvICdhdXRvJyB0byBhdXRvbWF0aWNhbGx5IGNhbGN1bGF0ZSB0cmFuc2l0aW9uIHRpbWUgYmFzZWQgb24gaGVpZ2h0LlxuICAgKiBAZGVmYXVsdCAnYXV0bydcbiAgICovXG4gIHRyYW5zaXRpb25EdXJhdGlvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnYXV0byddKSwgUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBhcHBlYXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZW50ZXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZXhpdDogUHJvcFR5cGVzLm51bWJlclxuICB9KV0pLFxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgdHJhbnNpdGlvbiBlbGVtZW50LlxuICAgKiBCeSBkZWZhdWx0LCB0aGUgZWxlbWVudCBpcyBiYXNlZCBvbiB0aGlzIFtgVHJhbnNpdGlvbmBdKGh0dHBzOi8vcmVhY3Rjb21tdW5pdHkub3JnL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvdHJhbnNpdGlvbi8pIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIFRyYW5zaXRpb25Qcm9wczogUHJvcFR5cGVzLm9iamVjdFxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IFBvcG92ZXI7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRNZW51VXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlNZW51Jywgc2xvdCk7XG59XG5jb25zdCBtZW51Q2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aU1lbnUnLCBbJ3Jvb3QnLCAncGFwZXInLCAnbGlzdCddKTtcbmV4cG9ydCBkZWZhdWx0IG1lbnVDbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcIm9uRW50ZXJpbmdcIl0sXG4gIF9leGNsdWRlZDIgPSBbXCJhdXRvRm9jdXNcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImRpc2FibGVBdXRvRm9jdXNJdGVtXCIsIFwiTWVudUxpc3RQcm9wc1wiLCBcIm9uQ2xvc2VcIiwgXCJvcGVuXCIsIFwiUGFwZXJQcm9wc1wiLCBcIlBvcG92ZXJDbGFzc2VzXCIsIFwidHJhbnNpdGlvbkR1cmF0aW9uXCIsIFwiVHJhbnNpdGlvblByb3BzXCIsIFwidmFyaWFudFwiLCBcInNsb3RzXCIsIFwic2xvdFByb3BzXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgaXNGcmFnbWVudCB9IGZyb20gJ3JlYWN0LWlzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCB7IHVzZVNsb3RQcm9wcyB9IGZyb20gJ0BtdWkvYmFzZS91dGlscyc7XG5pbXBvcnQgSFRNTEVsZW1lbnRUeXBlIGZyb20gJ0BtdWkvdXRpbHMvSFRNTEVsZW1lbnRUeXBlJztcbmltcG9ydCB7IHVzZVJ0bCB9IGZyb20gJ0BtdWkvc3lzdGVtL1J0bFByb3ZpZGVyJztcbmltcG9ydCBNZW51TGlzdCBmcm9tICcuLi9NZW51TGlzdCc7XG5pbXBvcnQgUG9wb3ZlciwgeyBQb3BvdmVyUGFwZXIgfSBmcm9tICcuLi9Qb3BvdmVyJztcbmltcG9ydCBzdHlsZWQsIHsgcm9vdFNob3VsZEZvcndhcmRQcm9wIH0gZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgeyBnZXRNZW51VXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9tZW51Q2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgUlRMX09SSUdJTiA9IHtcbiAgdmVydGljYWw6ICd0b3AnLFxuICBob3Jpem9udGFsOiAncmlnaHQnXG59O1xuY29uc3QgTFRSX09SSUdJTiA9IHtcbiAgdmVydGljYWw6ICd0b3AnLFxuICBob3Jpem9udGFsOiAnbGVmdCdcbn07XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3Nlc1xuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290J10sXG4gICAgcGFwZXI6IFsncGFwZXInXSxcbiAgICBsaXN0OiBbJ2xpc3QnXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldE1lbnVVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcbmNvbnN0IE1lbnVSb290ID0gc3R5bGVkKFBvcG92ZXIsIHtcbiAgc2hvdWxkRm9yd2FyZFByb3A6IHByb3AgPT4gcm9vdFNob3VsZEZvcndhcmRQcm9wKHByb3ApIHx8IHByb3AgPT09ICdjbGFzc2VzJyxcbiAgbmFtZTogJ011aU1lbnUnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLnJvb3Rcbn0pKHt9KTtcbmV4cG9ydCBjb25zdCBNZW51UGFwZXIgPSBzdHlsZWQoUG9wb3ZlclBhcGVyLCB7XG4gIG5hbWU6ICdNdWlNZW51JyxcbiAgc2xvdDogJ1BhcGVyJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMucGFwZXJcbn0pKHtcbiAgLy8gc3BlY1o6IFRoZSBtYXhpbXVtIGhlaWdodCBvZiBhIHNpbXBsZSBtZW51IHNob3VsZCBiZSBvbmUgb3IgbW9yZSByb3dzIGxlc3MgdGhhbiB0aGUgdmlld1xuICAvLyBoZWlnaHQuIFRoaXMgZW5zdXJlcyBhIHRhcHBhYmxlIGFyZWEgb3V0c2lkZSBvZiB0aGUgc2ltcGxlIG1lbnUgd2l0aCB3aGljaCB0byBkaXNtaXNzXG4gIC8vIHRoZSBtZW51LlxuICBtYXhIZWlnaHQ6ICdjYWxjKDEwMCUgLSA5NnB4KScsXG4gIC8vIEFkZCBpT1MgbW9tZW50dW0gc2Nyb2xsaW5nIGZvciBpT1MgPCAxMy4wXG4gIFdlYmtpdE92ZXJmbG93U2Nyb2xsaW5nOiAndG91Y2gnXG59KTtcbmNvbnN0IE1lbnVNZW51TGlzdCA9IHN0eWxlZChNZW51TGlzdCwge1xuICBuYW1lOiAnTXVpTWVudScsXG4gIHNsb3Q6ICdMaXN0JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMubGlzdFxufSkoe1xuICAvLyBXZSBkaXNhYmxlIHRoZSBmb2N1cyByaW5nIGZvciBtb3VzZSwgdG91Y2ggYW5kIGtleWJvYXJkIHVzZXJzLlxuICBvdXRsaW5lOiAwXG59KTtcbmNvbnN0IE1lbnUgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBNZW51KGluUHJvcHMsIHJlZikge1xuICB2YXIgX3Nsb3RzJHBhcGVyLCBfc2xvdFByb3BzJHBhcGVyO1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlNZW51J1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgYXV0b0ZvY3VzID0gdHJ1ZSxcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lLFxuICAgICAgZGlzYWJsZUF1dG9Gb2N1c0l0ZW0gPSBmYWxzZSxcbiAgICAgIE1lbnVMaXN0UHJvcHMgPSB7fSxcbiAgICAgIG9uQ2xvc2UsXG4gICAgICBvcGVuLFxuICAgICAgUGFwZXJQcm9wcyA9IHt9LFxuICAgICAgUG9wb3ZlckNsYXNzZXMsXG4gICAgICB0cmFuc2l0aW9uRHVyYXRpb24gPSAnYXV0bycsXG4gICAgICBUcmFuc2l0aW9uUHJvcHM6IHtcbiAgICAgICAgb25FbnRlcmluZ1xuICAgICAgfSA9IHt9LFxuICAgICAgdmFyaWFudCA9ICdzZWxlY3RlZE1lbnUnLFxuICAgICAgc2xvdHMgPSB7fSxcbiAgICAgIHNsb3RQcm9wcyA9IHt9XG4gICAgfSA9IHByb3BzLFxuICAgIFRyYW5zaXRpb25Qcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLlRyYW5zaXRpb25Qcm9wcywgX2V4Y2x1ZGVkKSxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQyKTtcbiAgY29uc3QgaXNSdGwgPSB1c2VSdGwoKTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGF1dG9Gb2N1cyxcbiAgICBkaXNhYmxlQXV0b0ZvY3VzSXRlbSxcbiAgICBNZW51TGlzdFByb3BzLFxuICAgIG9uRW50ZXJpbmcsXG4gICAgUGFwZXJQcm9wcyxcbiAgICB0cmFuc2l0aW9uRHVyYXRpb24sXG4gICAgVHJhbnNpdGlvblByb3BzLFxuICAgIHZhcmlhbnRcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgY29uc3QgYXV0b0ZvY3VzSXRlbSA9IGF1dG9Gb2N1cyAmJiAhZGlzYWJsZUF1dG9Gb2N1c0l0ZW0gJiYgb3BlbjtcbiAgY29uc3QgbWVudUxpc3RBY3Rpb25zUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCBoYW5kbGVFbnRlcmluZyA9IChlbGVtZW50LCBpc0FwcGVhcmluZykgPT4ge1xuICAgIGlmIChtZW51TGlzdEFjdGlvbnNSZWYuY3VycmVudCkge1xuICAgICAgbWVudUxpc3RBY3Rpb25zUmVmLmN1cnJlbnQuYWRqdXN0U3R5bGVGb3JTY3JvbGxiYXIoZWxlbWVudCwge1xuICAgICAgICBkaXJlY3Rpb246IGlzUnRsID8gJ3J0bCcgOiAnbHRyJ1xuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChvbkVudGVyaW5nKSB7XG4gICAgICBvbkVudGVyaW5nKGVsZW1lbnQsIGlzQXBwZWFyaW5nKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGhhbmRsZUxpc3RLZXlEb3duID0gZXZlbnQgPT4ge1xuICAgIGlmIChldmVudC5rZXkgPT09ICdUYWInKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgaWYgKG9uQ2xvc2UpIHtcbiAgICAgICAgb25DbG9zZShldmVudCwgJ3RhYktleURvd24nKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIHRoZSBpbmRleCBvZiB0aGUgaXRlbSBzaG91bGQgcmVjZWl2ZSBmb2N1c1xuICAgKiBpbiBhIGB2YXJpYW50PVwic2VsZWN0ZWRNZW51XCJgIGl0J3MgdGhlIGZpcnN0IGBzZWxlY3RlZGAgaXRlbVxuICAgKiBvdGhlcndpc2UgaXQncyB0aGUgdmVyeSBmaXJzdCBpdGVtLlxuICAgKi9cbiAgbGV0IGFjdGl2ZUl0ZW1JbmRleCA9IC0xO1xuICAvLyBzaW5jZSB3ZSBpbmplY3QgZm9jdXMgcmVsYXRlZCBwcm9wcyBpbnRvIGNoaWxkcmVuIHdlIGhhdmUgdG8gZG8gYSBsb29rYWhlYWRcbiAgLy8gdG8gY2hlY2sgaWYgdGhlcmUgaXMgYSBgc2VsZWN0ZWRgIGl0ZW0uIFdlJ3JlIGxvb2tpbmcgZm9yIHRoZSBsYXN0IGBzZWxlY3RlZGBcbiAgLy8gaXRlbSBhbmQgdXNlIHRoZSBmaXJzdCB2YWxpZCBpdGVtIGFzIGEgZmFsbGJhY2tcbiAgUmVhY3QuQ2hpbGRyZW4ubWFwKGNoaWxkcmVuLCAoY2hpbGQsIGluZGV4KSA9PiB7XG4gICAgaWYgKCEgLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKGlzRnJhZ21lbnQoY2hpbGQpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoW1wiTVVJOiBUaGUgTWVudSBjb21wb25lbnQgZG9lc24ndCBhY2NlcHQgYSBGcmFnbWVudCBhcyBhIGNoaWxkLlwiLCAnQ29uc2lkZXIgcHJvdmlkaW5nIGFuIGFycmF5IGluc3RlYWQuJ10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIWNoaWxkLnByb3BzLmRpc2FibGVkKSB7XG4gICAgICBpZiAodmFyaWFudCA9PT0gJ3NlbGVjdGVkTWVudScgJiYgY2hpbGQucHJvcHMuc2VsZWN0ZWQpIHtcbiAgICAgICAgYWN0aXZlSXRlbUluZGV4ID0gaW5kZXg7XG4gICAgICB9IGVsc2UgaWYgKGFjdGl2ZUl0ZW1JbmRleCA9PT0gLTEpIHtcbiAgICAgICAgYWN0aXZlSXRlbUluZGV4ID0gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgY29uc3QgUGFwZXJTbG90ID0gKF9zbG90cyRwYXBlciA9IHNsb3RzLnBhcGVyKSAhPSBudWxsID8gX3Nsb3RzJHBhcGVyIDogTWVudVBhcGVyO1xuICBjb25zdCBwYXBlckV4dGVybmFsU2xvdFByb3BzID0gKF9zbG90UHJvcHMkcGFwZXIgPSBzbG90UHJvcHMucGFwZXIpICE9IG51bGwgPyBfc2xvdFByb3BzJHBhcGVyIDogUGFwZXJQcm9wcztcbiAgY29uc3Qgcm9vdFNsb3RQcm9wcyA9IHVzZVNsb3RQcm9wcyh7XG4gICAgZWxlbWVudFR5cGU6IHNsb3RzLnJvb3QsXG4gICAgZXh0ZXJuYWxTbG90UHJvcHM6IHNsb3RQcm9wcy5yb290LFxuICAgIG93bmVyU3RhdGUsXG4gICAgY2xhc3NOYW1lOiBbY2xhc3Nlcy5yb290LCBjbGFzc05hbWVdXG4gIH0pO1xuICBjb25zdCBwYXBlclNsb3RQcm9wcyA9IHVzZVNsb3RQcm9wcyh7XG4gICAgZWxlbWVudFR5cGU6IFBhcGVyU2xvdCxcbiAgICBleHRlcm5hbFNsb3RQcm9wczogcGFwZXJFeHRlcm5hbFNsb3RQcm9wcyxcbiAgICBvd25lclN0YXRlLFxuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5wYXBlclxuICB9KTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KE1lbnVSb290LCBfZXh0ZW5kcyh7XG4gICAgb25DbG9zZTogb25DbG9zZSxcbiAgICBhbmNob3JPcmlnaW46IHtcbiAgICAgIHZlcnRpY2FsOiAnYm90dG9tJyxcbiAgICAgIGhvcml6b250YWw6IGlzUnRsID8gJ3JpZ2h0JyA6ICdsZWZ0J1xuICAgIH0sXG4gICAgdHJhbnNmb3JtT3JpZ2luOiBpc1J0bCA/IFJUTF9PUklHSU4gOiBMVFJfT1JJR0lOLFxuICAgIHNsb3RzOiB7XG4gICAgICBwYXBlcjogUGFwZXJTbG90LFxuICAgICAgcm9vdDogc2xvdHMucm9vdFxuICAgIH0sXG4gICAgc2xvdFByb3BzOiB7XG4gICAgICByb290OiByb290U2xvdFByb3BzLFxuICAgICAgcGFwZXI6IHBhcGVyU2xvdFByb3BzXG4gICAgfSxcbiAgICBvcGVuOiBvcGVuLFxuICAgIHJlZjogcmVmLFxuICAgIHRyYW5zaXRpb25EdXJhdGlvbjogdHJhbnNpdGlvbkR1cmF0aW9uLFxuICAgIFRyYW5zaXRpb25Qcm9wczogX2V4dGVuZHMoe1xuICAgICAgb25FbnRlcmluZzogaGFuZGxlRW50ZXJpbmdcbiAgICB9LCBUcmFuc2l0aW9uUHJvcHMpLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGVcbiAgfSwgb3RoZXIsIHtcbiAgICBjbGFzc2VzOiBQb3BvdmVyQ2xhc3NlcyxcbiAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goTWVudU1lbnVMaXN0LCBfZXh0ZW5kcyh7XG4gICAgICBvbktleURvd246IGhhbmRsZUxpc3RLZXlEb3duLFxuICAgICAgYWN0aW9uczogbWVudUxpc3RBY3Rpb25zUmVmLFxuICAgICAgYXV0b0ZvY3VzOiBhdXRvRm9jdXMgJiYgKGFjdGl2ZUl0ZW1JbmRleCA9PT0gLTEgfHwgZGlzYWJsZUF1dG9Gb2N1c0l0ZW0pLFxuICAgICAgYXV0b0ZvY3VzSXRlbTogYXV0b0ZvY3VzSXRlbSxcbiAgICAgIHZhcmlhbnQ6IHZhcmlhbnRcbiAgICB9LCBNZW51TGlzdFByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5saXN0LCBNZW51TGlzdFByb3BzLmNsYXNzTmFtZSksXG4gICAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgICB9KSlcbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBNZW51LnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIEFuIEhUTUwgZWxlbWVudCwgb3IgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgb25lLlxuICAgKiBJdCdzIHVzZWQgdG8gc2V0IHRoZSBwb3NpdGlvbiBvZiB0aGUgbWVudS5cbiAgICovXG4gIGFuY2hvckVsOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW0hUTUxFbGVtZW50VHlwZSwgUHJvcFR5cGVzLmZ1bmNdKSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCAoRGVmYXVsdCkgd2lsbCBmb2N1cyB0aGUgYFtyb2xlPVwibWVudVwiXWAgaWYgbm8gZm9jdXNhYmxlIGNoaWxkIGlzIGZvdW5kLiBEaXNhYmxlZFxuICAgKiBjaGlsZHJlbiBhcmUgbm90IGZvY3VzYWJsZS4gSWYgeW91IHNldCB0aGlzIHByb3AgdG8gYGZhbHNlYCBmb2N1cyB3aWxsIGJlIHBsYWNlZFxuICAgKiBvbiB0aGUgcGFyZW50IG1vZGFsIGNvbnRhaW5lci4gVGhpcyBoYXMgc2V2ZXJlIGFjY2Vzc2liaWxpdHkgaW1wbGljYXRpb25zXG4gICAqIGFuZCBzaG91bGQgb25seSBiZSBjb25zaWRlcmVkIGlmIHlvdSBtYW5hZ2UgZm9jdXMgb3RoZXJ3aXNlLlxuICAgKiBAZGVmYXVsdCB0cnVlXG4gICAqL1xuICBhdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogTWVudSBjb250ZW50cywgbm9ybWFsbHkgYE1lbnVJdGVtYHMuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogV2hlbiBvcGVuaW5nIHRoZSBtZW51IHdpbGwgbm90IGZvY3VzIHRoZSBhY3RpdmUgaXRlbSBidXQgdGhlIGBbcm9sZT1cIm1lbnVcIl1gXG4gICAqIHVubGVzcyBgYXV0b0ZvY3VzYCBpcyBhbHNvIHNldCB0byBgZmFsc2VgLiBOb3QgdXNpbmcgdGhlIGRlZmF1bHQgbWVhbnMgbm90XG4gICAqIGZvbGxvd2luZyBXQUktQVJJQSBhdXRob3JpbmcgcHJhY3RpY2VzLiBQbGVhc2UgYmUgY29uc2lkZXJhdGUgYWJvdXQgcG9zc2libGVcbiAgICogYWNjZXNzaWJpbGl0eSBpbXBsaWNhdGlvbnMuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlQXV0b0ZvY3VzSXRlbTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBbYE1lbnVMaXN0YF0oL21hdGVyaWFsLXVpL2FwaS9tZW51LWxpc3QvKSBlbGVtZW50LlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgTWVudUxpc3RQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCByZXF1ZXN0cyB0byBiZSBjbG9zZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlYXNvbiBDYW4gYmU6IGBcImVzY2FwZUtleURvd25cImAsIGBcImJhY2tkcm9wQ2xpY2tcImAsIGBcInRhYktleURvd25cImAuXG4gICAqL1xuICBvbkNsb3NlOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpcyBzaG93bi5cbiAgICovXG4gIG9wZW46IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBQYXBlclByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogYGNsYXNzZXNgIHByb3AgYXBwbGllZCB0byB0aGUgW2BQb3BvdmVyYF0oL21hdGVyaWFsLXVpL2FwaS9wb3BvdmVyLykgZWxlbWVudC5cbiAgICovXG4gIFBvcG92ZXJDbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogVGhlIGV4dHJhIHByb3BzIGZvciB0aGUgc2xvdCBjb21wb25lbnRzLlxuICAgKiBZb3UgY2FuIG92ZXJyaWRlIHRoZSBleGlzdGluZyBwcm9wcyBvciBhZGQgbmV3IG9uZXMuXG4gICAqXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBzbG90UHJvcHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgcGFwZXI6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gICAgcm9vdDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnRzIHVzZWQgZm9yIGVhY2ggc2xvdCBpbnNpZGUuXG4gICAqXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBzbG90czogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBwYXBlcjogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIHJvb3Q6IFByb3BUeXBlcy5lbGVtZW50VHlwZVxuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgLyoqXG4gICAqIFRoZSBsZW5ndGggb2YgdGhlIHRyYW5zaXRpb24gaW4gYG1zYCwgb3IgJ2F1dG8nXG4gICAqIEBkZWZhdWx0ICdhdXRvJ1xuICAgKi9cbiAgdHJhbnNpdGlvbkR1cmF0aW9uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydhdXRvJ10pLCBQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGFwcGVhcjogUHJvcFR5cGVzLm51bWJlcixcbiAgICBlbnRlcjogUHJvcFR5cGVzLm51bWJlcixcbiAgICBleGl0OiBQcm9wVHlwZXMubnVtYmVyXG4gIH0pXSksXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSB0cmFuc2l0aW9uIGVsZW1lbnQuXG4gICAqIEJ5IGRlZmF1bHQsIHRoZSBlbGVtZW50IGlzIGJhc2VkIG9uIHRoaXMgW2BUcmFuc2l0aW9uYF0oaHR0cHM6Ly9yZWFjdGNvbW11bml0eS5vcmcvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC90cmFuc2l0aW9uLykgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgVHJhbnNpdGlvblByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLiBVc2UgYG1lbnVgIHRvIHByZXZlbnQgc2VsZWN0ZWQgaXRlbXMgZnJvbSBpbXBhY3RpbmcgdGhlIGluaXRpYWwgZm9jdXMuXG4gICAqIEBkZWZhdWx0ICdzZWxlY3RlZE1lbnUnXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMub25lT2YoWydtZW51JywgJ3NlbGVjdGVkTWVudSddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IE1lbnU7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRNZW51SXRlbVV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpTWVudUl0ZW0nLCBzbG90KTtcbn1cbmNvbnN0IG1lbnVJdGVtQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aU1lbnVJdGVtJywgWydyb290JywgJ2ZvY3VzVmlzaWJsZScsICdkZW5zZScsICdkaXNhYmxlZCcsICdkaXZpZGVyJywgJ2d1dHRlcnMnLCAnc2VsZWN0ZWQnXSk7XG5leHBvcnQgZGVmYXVsdCBtZW51SXRlbUNsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYXV0b0ZvY3VzXCIsIFwiY29tcG9uZW50XCIsIFwiZGVuc2VcIiwgXCJkaXZpZGVyXCIsIFwiZGlzYWJsZUd1dHRlcnNcIiwgXCJmb2N1c1Zpc2libGVDbGFzc05hbWVcIiwgXCJyb2xlXCIsIFwidGFiSW5kZXhcIiwgXCJjbGFzc05hbWVcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgeyBhbHBoYSB9IGZyb20gJ0BtdWkvc3lzdGVtL2NvbG9yTWFuaXB1bGF0b3InO1xuaW1wb3J0IHN0eWxlZCwgeyByb290U2hvdWxkRm9yd2FyZFByb3AgfSBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCBMaXN0Q29udGV4dCBmcm9tICcuLi9MaXN0L0xpc3RDb250ZXh0JztcbmltcG9ydCBCdXR0b25CYXNlIGZyb20gJy4uL0J1dHRvbkJhc2UnO1xuaW1wb3J0IHVzZUVuaGFuY2VkRWZmZWN0IGZyb20gJy4uL3V0aWxzL3VzZUVuaGFuY2VkRWZmZWN0JztcbmltcG9ydCB1c2VGb3JrUmVmIGZyb20gJy4uL3V0aWxzL3VzZUZvcmtSZWYnO1xuaW1wb3J0IHsgZGl2aWRlckNsYXNzZXMgfSBmcm9tICcuLi9EaXZpZGVyJztcbmltcG9ydCB7IGxpc3RJdGVtSWNvbkNsYXNzZXMgfSBmcm9tICcuLi9MaXN0SXRlbUljb24nO1xuaW1wb3J0IHsgbGlzdEl0ZW1UZXh0Q2xhc3NlcyB9IGZyb20gJy4uL0xpc3RJdGVtVGV4dCc7XG5pbXBvcnQgbWVudUl0ZW1DbGFzc2VzLCB7IGdldE1lbnVJdGVtVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9tZW51SXRlbUNsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBjb25zdCBvdmVycmlkZXNSZXNvbHZlciA9IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBvd25lclN0YXRlXG4gIH0gPSBwcm9wcztcbiAgcmV0dXJuIFtzdHlsZXMucm9vdCwgb3duZXJTdGF0ZS5kZW5zZSAmJiBzdHlsZXMuZGVuc2UsIG93bmVyU3RhdGUuZGl2aWRlciAmJiBzdHlsZXMuZGl2aWRlciwgIW93bmVyU3RhdGUuZGlzYWJsZUd1dHRlcnMgJiYgc3R5bGVzLmd1dHRlcnNdO1xufTtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBkaXNhYmxlZCxcbiAgICBkZW5zZSxcbiAgICBkaXZpZGVyLFxuICAgIGRpc2FibGVHdXR0ZXJzLFxuICAgIHNlbGVjdGVkLFxuICAgIGNsYXNzZXNcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIGRlbnNlICYmICdkZW5zZScsIGRpc2FibGVkICYmICdkaXNhYmxlZCcsICFkaXNhYmxlR3V0dGVycyAmJiAnZ3V0dGVycycsIGRpdmlkZXIgJiYgJ2RpdmlkZXInLCBzZWxlY3RlZCAmJiAnc2VsZWN0ZWQnXVxuICB9O1xuICBjb25zdCBjb21wb3NlZENsYXNzZXMgPSBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0TWVudUl0ZW1VdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xuICByZXR1cm4gX2V4dGVuZHMoe30sIGNsYXNzZXMsIGNvbXBvc2VkQ2xhc3Nlcyk7XG59O1xuY29uc3QgTWVudUl0ZW1Sb290ID0gc3R5bGVkKEJ1dHRvbkJhc2UsIHtcbiAgc2hvdWxkRm9yd2FyZFByb3A6IHByb3AgPT4gcm9vdFNob3VsZEZvcndhcmRQcm9wKHByb3ApIHx8IHByb3AgPT09ICdjbGFzc2VzJyxcbiAgbmFtZTogJ011aU1lbnVJdGVtJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlclxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHt9LCB0aGVtZS50eXBvZ3JhcGh5LmJvZHkxLCB7XG4gIGRpc3BsYXk6ICdmbGV4JyxcbiAganVzdGlmeUNvbnRlbnQ6ICdmbGV4LXN0YXJ0JyxcbiAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICB0ZXh0RGVjb3JhdGlvbjogJ25vbmUnLFxuICBtaW5IZWlnaHQ6IDQ4LFxuICBwYWRkaW5nVG9wOiA2LFxuICBwYWRkaW5nQm90dG9tOiA2LFxuICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgd2hpdGVTcGFjZTogJ25vd3JhcCdcbn0sICFvd25lclN0YXRlLmRpc2FibGVHdXR0ZXJzICYmIHtcbiAgcGFkZGluZ0xlZnQ6IDE2LFxuICBwYWRkaW5nUmlnaHQ6IDE2XG59LCBvd25lclN0YXRlLmRpdmlkZXIgJiYge1xuICBib3JkZXJCb3R0b206IGAxcHggc29saWQgJHsodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5kaXZpZGVyfWAsXG4gIGJhY2tncm91bmRDbGlwOiAncGFkZGluZy1ib3gnXG59LCB7XG4gICcmOmhvdmVyJzoge1xuICAgIHRleHREZWNvcmF0aW9uOiAnbm9uZScsXG4gICAgYmFja2dyb3VuZENvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5hY3Rpb24uaG92ZXIsXG4gICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCdcbiAgICB9XG4gIH0sXG4gIFtgJi4ke21lbnVJdGVtQ2xhc3Nlcy5zZWxlY3RlZH1gXToge1xuICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUudmFycyA/IGByZ2JhKCR7dGhlbWUudmFycy5wYWxldHRlLnByaW1hcnkubWFpbkNoYW5uZWx9IC8gJHt0aGVtZS52YXJzLnBhbGV0dGUuYWN0aW9uLnNlbGVjdGVkT3BhY2l0eX0pYCA6IGFscGhhKHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5zZWxlY3RlZE9wYWNpdHkpLFxuICAgIFtgJi4ke21lbnVJdGVtQ2xhc3Nlcy5mb2N1c1Zpc2libGV9YF06IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUudmFycyA/IGByZ2JhKCR7dGhlbWUudmFycy5wYWxldHRlLnByaW1hcnkubWFpbkNoYW5uZWx9IC8gY2FsYygke3RoZW1lLnZhcnMucGFsZXR0ZS5hY3Rpb24uc2VsZWN0ZWRPcGFjaXR5fSArICR7dGhlbWUudmFycy5wYWxldHRlLmFjdGlvbi5mb2N1c09wYWNpdHl9KSlgIDogYWxwaGEodGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sIHRoZW1lLnBhbGV0dGUuYWN0aW9uLnNlbGVjdGVkT3BhY2l0eSArIHRoZW1lLnBhbGV0dGUuYWN0aW9uLmZvY3VzT3BhY2l0eSlcbiAgICB9XG4gIH0sXG4gIFtgJi4ke21lbnVJdGVtQ2xhc3Nlcy5zZWxlY3RlZH06aG92ZXJgXToge1xuICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUudmFycyA/IGByZ2JhKCR7dGhlbWUudmFycy5wYWxldHRlLnByaW1hcnkubWFpbkNoYW5uZWx9IC8gY2FsYygke3RoZW1lLnZhcnMucGFsZXR0ZS5hY3Rpb24uc2VsZWN0ZWRPcGFjaXR5fSArICR7dGhlbWUudmFycy5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHl9KSlgIDogYWxwaGEodGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sIHRoZW1lLnBhbGV0dGUuYWN0aW9uLnNlbGVjdGVkT3BhY2l0eSArIHRoZW1lLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eSksXG4gICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnZhcnMgPyBgcmdiYSgke3RoZW1lLnZhcnMucGFsZXR0ZS5wcmltYXJ5Lm1haW5DaGFubmVsfSAvICR7dGhlbWUudmFycy5wYWxldHRlLmFjdGlvbi5zZWxlY3RlZE9wYWNpdHl9KWAgOiBhbHBoYSh0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbiwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uc2VsZWN0ZWRPcGFjaXR5KVxuICAgIH1cbiAgfSxcbiAgW2AmLiR7bWVudUl0ZW1DbGFzc2VzLmZvY3VzVmlzaWJsZX1gXToge1xuICAgIGJhY2tncm91bmRDb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuYWN0aW9uLmZvY3VzXG4gIH0sXG4gIFtgJi4ke21lbnVJdGVtQ2xhc3Nlcy5kaXNhYmxlZH1gXToge1xuICAgIG9wYWNpdHk6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZE9wYWNpdHlcbiAgfSxcbiAgW2AmICsgLiR7ZGl2aWRlckNsYXNzZXMucm9vdH1gXToge1xuICAgIG1hcmdpblRvcDogdGhlbWUuc3BhY2luZygxKSxcbiAgICBtYXJnaW5Cb3R0b206IHRoZW1lLnNwYWNpbmcoMSlcbiAgfSxcbiAgW2AmICsgLiR7ZGl2aWRlckNsYXNzZXMuaW5zZXR9YF06IHtcbiAgICBtYXJnaW5MZWZ0OiA1MlxuICB9LFxuICBbYCYgLiR7bGlzdEl0ZW1UZXh0Q2xhc3Nlcy5yb290fWBdOiB7XG4gICAgbWFyZ2luVG9wOiAwLFxuICAgIG1hcmdpbkJvdHRvbTogMFxuICB9LFxuICBbYCYgLiR7bGlzdEl0ZW1UZXh0Q2xhc3Nlcy5pbnNldH1gXToge1xuICAgIHBhZGRpbmdMZWZ0OiAzNlxuICB9LFxuICBbYCYgLiR7bGlzdEl0ZW1JY29uQ2xhc3Nlcy5yb290fWBdOiB7XG4gICAgbWluV2lkdGg6IDM2XG4gIH1cbn0sICFvd25lclN0YXRlLmRlbnNlICYmIHtcbiAgW3RoZW1lLmJyZWFrcG9pbnRzLnVwKCdzbScpXToge1xuICAgIG1pbkhlaWdodDogJ2F1dG8nXG4gIH1cbn0sIG93bmVyU3RhdGUuZGVuc2UgJiYgX2V4dGVuZHMoe1xuICBtaW5IZWlnaHQ6IDMyLFxuICAvLyBodHRwczovL20yLm1hdGVyaWFsLmlvL2NvbXBvbmVudHMvbWVudXMjc3BlY3MgPiBEZW5zZVxuICBwYWRkaW5nVG9wOiA0LFxuICBwYWRkaW5nQm90dG9tOiA0XG59LCB0aGVtZS50eXBvZ3JhcGh5LmJvZHkyLCB7XG4gIFtgJiAuJHtsaXN0SXRlbUljb25DbGFzc2VzLnJvb3R9IHN2Z2BdOiB7XG4gICAgZm9udFNpemU6ICcxLjI1cmVtJ1xuICB9XG59KSkpO1xuY29uc3QgTWVudUl0ZW0gPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBNZW51SXRlbShpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpTWVudUl0ZW0nXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBhdXRvRm9jdXMgPSBmYWxzZSxcbiAgICAgIGNvbXBvbmVudCA9ICdsaScsXG4gICAgICBkZW5zZSA9IGZhbHNlLFxuICAgICAgZGl2aWRlciA9IGZhbHNlLFxuICAgICAgZGlzYWJsZUd1dHRlcnMgPSBmYWxzZSxcbiAgICAgIGZvY3VzVmlzaWJsZUNsYXNzTmFtZSxcbiAgICAgIHJvbGUgPSAnbWVudWl0ZW0nLFxuICAgICAgdGFiSW5kZXg6IHRhYkluZGV4UHJvcCxcbiAgICAgIGNsYXNzTmFtZVxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBjb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChMaXN0Q29udGV4dCk7XG4gIGNvbnN0IGNoaWxkQ29udGV4dCA9IFJlYWN0LnVzZU1lbW8oKCkgPT4gKHtcbiAgICBkZW5zZTogZGVuc2UgfHwgY29udGV4dC5kZW5zZSB8fCBmYWxzZSxcbiAgICBkaXNhYmxlR3V0dGVyc1xuICB9KSwgW2NvbnRleHQuZGVuc2UsIGRlbnNlLCBkaXNhYmxlR3V0dGVyc10pO1xuICBjb25zdCBtZW51SXRlbVJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgdXNlRW5oYW5jZWRFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChhdXRvRm9jdXMpIHtcbiAgICAgIGlmIChtZW51SXRlbVJlZi5jdXJyZW50KSB7XG4gICAgICAgIG1lbnVJdGVtUmVmLmN1cnJlbnQuZm9jdXMoKTtcbiAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdNVUk6IFVuYWJsZSB0byBzZXQgZm9jdXMgdG8gYSBNZW51SXRlbSB3aG9zZSBjb21wb25lbnQgaGFzIG5vdCBiZWVuIHJlbmRlcmVkLicpO1xuICAgICAgfVxuICAgIH1cbiAgfSwgW2F1dG9Gb2N1c10pO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgZGVuc2U6IGNoaWxkQ29udGV4dC5kZW5zZSxcbiAgICBkaXZpZGVyLFxuICAgIGRpc2FibGVHdXR0ZXJzXG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMocHJvcHMpO1xuICBjb25zdCBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKG1lbnVJdGVtUmVmLCByZWYpO1xuICBsZXQgdGFiSW5kZXg7XG4gIGlmICghcHJvcHMuZGlzYWJsZWQpIHtcbiAgICB0YWJJbmRleCA9IHRhYkluZGV4UHJvcCAhPT0gdW5kZWZpbmVkID8gdGFiSW5kZXhQcm9wIDogLTE7XG4gIH1cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KExpc3RDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGNoaWxkQ29udGV4dCxcbiAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goTWVudUl0ZW1Sb290LCBfZXh0ZW5kcyh7XG4gICAgICByZWY6IGhhbmRsZVJlZixcbiAgICAgIHJvbGU6IHJvbGUsXG4gICAgICB0YWJJbmRleDogdGFiSW5kZXgsXG4gICAgICBjb21wb25lbnQ6IGNvbXBvbmVudCxcbiAgICAgIGZvY3VzVmlzaWJsZUNsYXNzTmFtZTogY2xzeChjbGFzc2VzLmZvY3VzVmlzaWJsZSwgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lKSxcbiAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSlcbiAgICB9LCBvdGhlciwge1xuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgIGNsYXNzZXM6IGNsYXNzZXNcbiAgICB9KSlcbiAgfSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IE1lbnVJdGVtLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxpc3QgaXRlbSBpcyBmb2N1c2VkIGR1cmluZyB0aGUgZmlyc3QgbW91bnQuXG4gICAqIEZvY3VzIHdpbGwgYWxzbyBiZSB0cmlnZ2VyZWQgaWYgdGhlIHZhbHVlIGNoYW5nZXMgZnJvbSBmYWxzZSB0byB0cnVlLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgYXV0b0ZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGNvbXBhY3QgdmVydGljYWwgcGFkZGluZyBkZXNpZ25lZCBmb3Iga2V5Ym9hcmQgYW5kIG1vdXNlIGlucHV0IGlzIHVzZWQuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSBpbmhlcml0ZWQgZnJvbSB0aGUgcGFyZW50IE1lbnUgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGVuc2U6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGVmdCBhbmQgcmlnaHQgcGFkZGluZyBpcyByZW1vdmVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZUd1dHRlcnM6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCBhIDFweCBsaWdodCBib3JkZXIgaXMgYWRkZWQgdG8gdGhlIGJvdHRvbSBvZiB0aGUgbWVudSBpdGVtLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGl2aWRlcjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGlzIHByb3AgY2FuIGhlbHAgaWRlbnRpZnkgd2hpY2ggZWxlbWVudCBoYXMga2V5Ym9hcmQgZm9jdXMuXG4gICAqIFRoZSBjbGFzcyBuYW1lIHdpbGwgYmUgYXBwbGllZCB3aGVuIHRoZSBlbGVtZW50IGdhaW5zIHRoZSBmb2N1cyB0aHJvdWdoIGtleWJvYXJkIGludGVyYWN0aW9uLlxuICAgKiBJdCdzIGEgcG9seWZpbGwgZm9yIHRoZSBbQ1NTIDpmb2N1cy12aXNpYmxlIHNlbGVjdG9yXShodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvc2VsZWN0b3JzLTQvI3RoZS1mb2N1cy12aXNpYmxlLXBzZXVkbykuXG4gICAqIFRoZSByYXRpb25hbGUgZm9yIHVzaW5nIHRoaXMgZmVhdHVyZSBbaXMgZXhwbGFpbmVkIGhlcmVdKGh0dHBzOi8vZ2l0aHViLmNvbS9XSUNHL2ZvY3VzLXZpc2libGUvYmxvYi9IRUFEL2V4cGxhaW5lci5tZCkuXG4gICAqIEEgW3BvbHlmaWxsIGNhbiBiZSB1c2VkXShodHRwczovL2dpdGh1Yi5jb20vV0lDRy9mb2N1cy12aXNpYmxlKSB0byBhcHBseSBhIGBmb2N1cy12aXNpYmxlYCBjbGFzcyB0byBvdGhlciBjb21wb25lbnRzXG4gICAqIGlmIG5lZWRlZC5cbiAgICovXG4gIGZvY3VzVmlzaWJsZUNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHJvbGU6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLnN0cmluZyxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpcyBzZWxlY3RlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHNlbGVjdGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgLyoqXG4gICAqIEBkZWZhdWx0IDBcbiAgICovXG4gIHRhYkluZGV4OiBQcm9wVHlwZXMubnVtYmVyXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgTWVudUl0ZW07IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXROYXRpdmVTZWxlY3RVdGlsaXR5Q2xhc3NlcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpTmF0aXZlU2VsZWN0Jywgc2xvdCk7XG59XG5jb25zdCBuYXRpdmVTZWxlY3RDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpTmF0aXZlU2VsZWN0JywgWydyb290JywgJ3NlbGVjdCcsICdtdWx0aXBsZScsICdmaWxsZWQnLCAnb3V0bGluZWQnLCAnc3RhbmRhcmQnLCAnZGlzYWJsZWQnLCAnaWNvbicsICdpY29uT3BlbicsICdpY29uRmlsbGVkJywgJ2ljb25PdXRsaW5lZCcsICdpY29uU3RhbmRhcmQnLCAnbmF0aXZlSW5wdXQnLCAnZXJyb3InXSk7XG5leHBvcnQgZGVmYXVsdCBuYXRpdmVTZWxlY3RDbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNsYXNzTmFtZVwiLCBcImRpc2FibGVkXCIsIFwiZXJyb3JcIiwgXCJJY29uQ29tcG9uZW50XCIsIFwiaW5wdXRSZWZcIiwgXCJ2YXJpYW50XCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHJlZlR5cGUgZnJvbSAnQG11aS91dGlscy9yZWZUeXBlJztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IG5hdGl2ZVNlbGVjdENsYXNzZXMsIHsgZ2V0TmF0aXZlU2VsZWN0VXRpbGl0eUNsYXNzZXMgfSBmcm9tICcuL25hdGl2ZVNlbGVjdENsYXNzZXMnO1xuaW1wb3J0IHN0eWxlZCwgeyByb290U2hvdWxkRm9yd2FyZFByb3AgfSBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3NlcyxcbiAgICB2YXJpYW50LFxuICAgIGRpc2FibGVkLFxuICAgIG11bHRpcGxlLFxuICAgIG9wZW4sXG4gICAgZXJyb3JcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHNlbGVjdDogWydzZWxlY3QnLCB2YXJpYW50LCBkaXNhYmxlZCAmJiAnZGlzYWJsZWQnLCBtdWx0aXBsZSAmJiAnbXVsdGlwbGUnLCBlcnJvciAmJiAnZXJyb3InXSxcbiAgICBpY29uOiBbJ2ljb24nLCBgaWNvbiR7Y2FwaXRhbGl6ZSh2YXJpYW50KX1gLCBvcGVuICYmICdpY29uT3BlbicsIGRpc2FibGVkICYmICdkaXNhYmxlZCddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0TmF0aXZlU2VsZWN0VXRpbGl0eUNsYXNzZXMsIGNsYXNzZXMpO1xufTtcbmV4cG9ydCBjb25zdCBuYXRpdmVTZWxlY3RTZWxlY3RTdHlsZXMgPSAoe1xuICBvd25lclN0YXRlLFxuICB0aGVtZVxufSkgPT4gX2V4dGVuZHMoe1xuICBNb3pBcHBlYXJhbmNlOiAnbm9uZScsXG4gIC8vIFJlc2V0XG4gIFdlYmtpdEFwcGVhcmFuY2U6ICdub25lJyxcbiAgLy8gUmVzZXRcbiAgLy8gV2hlbiBpbnRlcmFjdGluZyBxdWlja2x5LCB0aGUgdGV4dCBjYW4gZW5kIHVwIHNlbGVjdGVkLlxuICAvLyBOYXRpdmUgc2VsZWN0IGNhbid0IGJlIHNlbGVjdGVkIGVpdGhlci5cbiAgdXNlclNlbGVjdDogJ25vbmUnLFxuICBib3JkZXJSYWRpdXM6IDAsXG4gIC8vIFJlc2V0XG4gIGN1cnNvcjogJ3BvaW50ZXInLFxuICAnJjpmb2N1cyc6IF9leHRlbmRzKHt9LCB0aGVtZS52YXJzID8ge1xuICAgIGJhY2tncm91bmRDb2xvcjogYHJnYmEoJHt0aGVtZS52YXJzLnBhbGV0dGUuY29tbW9uLm9uQmFja2dyb3VuZENoYW5uZWx9IC8gMC4wNSlgXG4gIH0gOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdsaWdodCcgPyAncmdiYSgwLCAwLCAwLCAwLjA1KScgOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjA1KSdcbiAgfSwge1xuICAgIGJvcmRlclJhZGl1czogMCAvLyBSZXNldCBDaHJvbWUgc3R5bGVcbiAgfSksXG4gIC8vIFJlbW92ZSBJRTExIGFycm93XG4gICcmOjotbXMtZXhwYW5kJzoge1xuICAgIGRpc3BsYXk6ICdub25lJ1xuICB9LFxuICBbYCYuJHtuYXRpdmVTZWxlY3RDbGFzc2VzLmRpc2FibGVkfWBdOiB7XG4gICAgY3Vyc29yOiAnZGVmYXVsdCdcbiAgfSxcbiAgJyZbbXVsdGlwbGVdJzoge1xuICAgIGhlaWdodDogJ2F1dG8nXG4gIH0sXG4gICcmOm5vdChbbXVsdGlwbGVdKSBvcHRpb24sICY6bm90KFttdWx0aXBsZV0pIG9wdGdyb3VwJzoge1xuICAgIGJhY2tncm91bmRDb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuYmFja2dyb3VuZC5wYXBlclxuICB9LFxuICAvLyBCdW1wIHNwZWNpZmljaXR5IHRvIGFsbG93IGV4dGVuZGluZyBjdXN0b20gaW5wdXRzXG4gICcmJiYnOiB7XG4gICAgcGFkZGluZ1JpZ2h0OiAyNCxcbiAgICBtaW5XaWR0aDogMTYgLy8gU28gaXQgZG9lc24ndCBjb2xsYXBzZS5cbiAgfVxufSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnZmlsbGVkJyAmJiB7XG4gICcmJiYnOiB7XG4gICAgcGFkZGluZ1JpZ2h0OiAzMlxuICB9XG59LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdvdXRsaW5lZCcgJiYge1xuICBib3JkZXJSYWRpdXM6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5zaGFwZS5ib3JkZXJSYWRpdXMsXG4gICcmOmZvY3VzJzoge1xuICAgIGJvcmRlclJhZGl1czogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnNoYXBlLmJvcmRlclJhZGl1cyAvLyBSZXNldCB0aGUgcmVzZXQgZm9yIENocm9tZSBzdHlsZVxuICB9LFxuICAnJiYmJzoge1xuICAgIHBhZGRpbmdSaWdodDogMzJcbiAgfVxufSk7XG5jb25zdCBOYXRpdmVTZWxlY3RTZWxlY3QgPSBzdHlsZWQoJ3NlbGVjdCcsIHtcbiAgbmFtZTogJ011aU5hdGl2ZVNlbGVjdCcsXG4gIHNsb3Q6ICdTZWxlY3QnLFxuICBzaG91bGRGb3J3YXJkUHJvcDogcm9vdFNob3VsZEZvcndhcmRQcm9wLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLnNlbGVjdCwgc3R5bGVzW293bmVyU3RhdGUudmFyaWFudF0sIG93bmVyU3RhdGUuZXJyb3IgJiYgc3R5bGVzLmVycm9yLCB7XG4gICAgICBbYCYuJHtuYXRpdmVTZWxlY3RDbGFzc2VzLm11bHRpcGxlfWBdOiBzdHlsZXMubXVsdGlwbGVcbiAgICB9XTtcbiAgfVxufSkobmF0aXZlU2VsZWN0U2VsZWN0U3R5bGVzKTtcbmV4cG9ydCBjb25zdCBuYXRpdmVTZWxlY3RJY29uU3R5bGVzID0gKHtcbiAgb3duZXJTdGF0ZSxcbiAgdGhlbWVcbn0pID0+IF9leHRlbmRzKHtcbiAgLy8gV2UgdXNlIGEgcG9zaXRpb24gYWJzb2x1dGUgb3ZlciBhIGZsZXhib3ggaW4gb3JkZXIgdG8gZm9yd2FyZCB0aGUgcG9pbnRlciBldmVudHNcbiAgLy8gdG8gdGhlIGlucHV0IGFuZCB0byBzdXBwb3J0IHdyYXBwaW5nIHRhZ3MuLlxuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgcmlnaHQ6IDAsXG4gIHRvcDogJ2NhbGMoNTAlIC0gLjVlbSknLFxuICAvLyBDZW50ZXIgdmVydGljYWxseSwgaGVpZ2h0IGlzIDFlbVxuICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gIC8vIERvbid0IGJsb2NrIHBvaW50ZXIgZXZlbnRzIG9uIHRoZSBzZWxlY3QgdW5kZXIgdGhlIGljb24uXG4gIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5hY3Rpb24uYWN0aXZlLFxuICBbYCYuJHtuYXRpdmVTZWxlY3RDbGFzc2VzLmRpc2FibGVkfWBdOiB7XG4gICAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZFxuICB9XG59LCBvd25lclN0YXRlLm9wZW4gJiYge1xuICB0cmFuc2Zvcm06ICdyb3RhdGUoMTgwZGVnKSdcbn0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2ZpbGxlZCcgJiYge1xuICByaWdodDogN1xufSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnb3V0bGluZWQnICYmIHtcbiAgcmlnaHQ6IDdcbn0pO1xuY29uc3QgTmF0aXZlU2VsZWN0SWNvbiA9IHN0eWxlZCgnc3ZnJywge1xuICBuYW1lOiAnTXVpTmF0aXZlU2VsZWN0JyxcbiAgc2xvdDogJ0ljb24nLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLmljb24sIG93bmVyU3RhdGUudmFyaWFudCAmJiBzdHlsZXNbYGljb24ke2NhcGl0YWxpemUob3duZXJTdGF0ZS52YXJpYW50KX1gXSwgb3duZXJTdGF0ZS5vcGVuICYmIHN0eWxlcy5pY29uT3Blbl07XG4gIH1cbn0pKG5hdGl2ZVNlbGVjdEljb25TdHlsZXMpO1xuXG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cbmNvbnN0IE5hdGl2ZVNlbGVjdElucHV0ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gTmF0aXZlU2VsZWN0SW5wdXQocHJvcHMsIHJlZikge1xuICBjb25zdCB7XG4gICAgICBjbGFzc05hbWUsXG4gICAgICBkaXNhYmxlZCxcbiAgICAgIGVycm9yLFxuICAgICAgSWNvbkNvbXBvbmVudCxcbiAgICAgIGlucHV0UmVmLFxuICAgICAgdmFyaWFudCA9ICdzdGFuZGFyZCdcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGRpc2FibGVkLFxuICAgIHZhcmlhbnQsXG4gICAgZXJyb3JcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4cyhSZWFjdC5GcmFnbWVudCwge1xuICAgIGNoaWxkcmVuOiBbLyojX19QVVJFX18qL19qc3goTmF0aXZlU2VsZWN0U2VsZWN0LCBfZXh0ZW5kcyh7XG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMuc2VsZWN0LCBjbGFzc05hbWUpLFxuICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgICAgcmVmOiBpbnB1dFJlZiB8fCByZWZcbiAgICB9LCBvdGhlcikpLCBwcm9wcy5tdWx0aXBsZSA/IG51bGwgOiAvKiNfX1BVUkVfXyovX2pzeChOYXRpdmVTZWxlY3RJY29uLCB7XG4gICAgICBhczogSWNvbkNvbXBvbmVudCxcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMuaWNvblxuICAgIH0pXVxuICB9KTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gTmF0aXZlU2VsZWN0SW5wdXQucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVGhlIG9wdGlvbiBlbGVtZW50cyB0byBwb3B1bGF0ZSB0aGUgc2VsZWN0IHdpdGguXG4gICAqIENhbiBiZSBzb21lIGA8b3B0aW9uPmAgZWxlbWVudHMuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogVGhlIENTUyBjbGFzcyBuYW1lIG9mIHRoZSBzZWxlY3QgZWxlbWVudC5cbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHNlbGVjdCBpcyBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBzZWxlY3QgaW5wdXRgIHdpbGwgaW5kaWNhdGUgYW4gZXJyb3IuXG4gICAqL1xuICBlcnJvcjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgaWNvbiB0aGF0IGRpc3BsYXlzIHRoZSBhcnJvdy5cbiAgICovXG4gIEljb25Db21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZS5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogVXNlIHRoYXQgcHJvcCB0byBwYXNzIGEgcmVmIHRvIHRoZSBuYXRpdmUgc2VsZWN0IGVsZW1lbnQuXG4gICAqIEBkZXByZWNhdGVkXG4gICAqL1xuICBpbnB1dFJlZjogcmVmVHlwZSxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG11bHRpcGxlOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIE5hbWUgYXR0cmlidXRlIG9mIHRoZSBgc2VsZWN0YCBvciBoaWRkZW4gYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gYSBtZW51IGl0ZW0gaXMgc2VsZWN0ZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogWW91IGNhbiBwdWxsIG91dCB0aGUgbmV3IHZhbHVlIGJ5IGFjY2Vzc2luZyBgZXZlbnQudGFyZ2V0LnZhbHVlYCAoc3RyaW5nKS5cbiAgICovXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIFRoZSBpbnB1dCB2YWx1ZS5cbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMuYW55LFxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnc3RhbmRhcmQnLCAnb3V0bGluZWQnLCAnZmlsbGVkJ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgTmF0aXZlU2VsZWN0SW5wdXQ7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xudmFyIF9zcGFuO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwibGFiZWxcIiwgXCJub3RjaGVkXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBzdHlsZWQsIHsgcm9vdFNob3VsZEZvcndhcmRQcm9wIH0gZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgTm90Y2hlZE91dGxpbmVSb290ID0gc3R5bGVkKCdmaWVsZHNldCcsIHtcbiAgc2hvdWxkRm9yd2FyZFByb3A6IHJvb3RTaG91bGRGb3J3YXJkUHJvcFxufSkoe1xuICB0ZXh0QWxpZ246ICdsZWZ0JyxcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIGJvdHRvbTogMCxcbiAgcmlnaHQ6IDAsXG4gIHRvcDogLTUsXG4gIGxlZnQ6IDAsXG4gIG1hcmdpbjogMCxcbiAgcGFkZGluZzogJzAgOHB4JyxcbiAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICBib3JkZXJSYWRpdXM6ICdpbmhlcml0JyxcbiAgYm9yZGVyU3R5bGU6ICdzb2xpZCcsXG4gIGJvcmRlcldpZHRoOiAxLFxuICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gIG1pbldpZHRoOiAnMCUnXG59KTtcbmNvbnN0IE5vdGNoZWRPdXRsaW5lTGVnZW5kID0gc3R5bGVkKCdsZWdlbmQnLCB7XG4gIHNob3VsZEZvcndhcmRQcm9wOiByb290U2hvdWxkRm9yd2FyZFByb3Bcbn0pKCh7XG4gIG93bmVyU3RhdGUsXG4gIHRoZW1lXG59KSA9PiBfZXh0ZW5kcyh7XG4gIGZsb2F0OiAndW5zZXQnLFxuICAvLyBGaXggY29uZmxpY3Qgd2l0aCBib290c3RyYXBcbiAgd2lkdGg6ICdhdXRvJyxcbiAgLy8gRml4IGNvbmZsaWN0IHdpdGggYm9vdHN0cmFwXG4gIG92ZXJmbG93OiAnaGlkZGVuJ1xufSwgIW93bmVyU3RhdGUud2l0aExhYmVsICYmIHtcbiAgcGFkZGluZzogMCxcbiAgbGluZUhlaWdodDogJzExcHgnLFxuICAvLyBzeW5jIHdpdGggYGhlaWdodGAgaW4gYGxlZ2VuZGAgc3R5bGVzXG4gIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnd2lkdGgnLCB7XG4gICAgZHVyYXRpb246IDE1MCxcbiAgICBlYXNpbmc6IHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlT3V0XG4gIH0pXG59LCBvd25lclN0YXRlLndpdGhMYWJlbCAmJiBfZXh0ZW5kcyh7XG4gIGRpc3BsYXk6ICdibG9jaycsXG4gIC8vIEZpeCBjb25mbGljdCB3aXRoIG5vcm1hbGl6ZS5jc3MgYW5kIHNhbml0aXplLmNzc1xuICBwYWRkaW5nOiAwLFxuICBoZWlnaHQ6IDExLFxuICAvLyBzeW5jIHdpdGggYGxpbmVIZWlnaHRgIGluIGBsZWdlbmRgIHN0eWxlc1xuICBmb250U2l6ZTogJzAuNzVlbScsXG4gIHZpc2liaWxpdHk6ICdoaWRkZW4nLFxuICBtYXhXaWR0aDogMC4wMSxcbiAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdtYXgtd2lkdGgnLCB7XG4gICAgZHVyYXRpb246IDUwLFxuICAgIGVhc2luZzogdGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VPdXRcbiAgfSksXG4gIHdoaXRlU3BhY2U6ICdub3dyYXAnLFxuICAnJiA+IHNwYW4nOiB7XG4gICAgcGFkZGluZ0xlZnQ6IDUsXG4gICAgcGFkZGluZ1JpZ2h0OiA1LFxuICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgIG9wYWNpdHk6IDAsXG4gICAgdmlzaWJpbGl0eTogJ3Zpc2libGUnXG4gIH1cbn0sIG93bmVyU3RhdGUubm90Y2hlZCAmJiB7XG4gIG1heFdpZHRoOiAnMTAwJScsXG4gIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnbWF4LXdpZHRoJywge1xuICAgIGR1cmF0aW9uOiAxMDAsXG4gICAgZWFzaW5nOiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZU91dCxcbiAgICBkZWxheTogNTBcbiAgfSlcbn0pKSk7XG5cbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTm90Y2hlZE91dGxpbmUocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgICAgY2xhc3NOYW1lLFxuICAgICAgbGFiZWwsXG4gICAgICBub3RjaGVkXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IHdpdGhMYWJlbCA9IGxhYmVsICE9IG51bGwgJiYgbGFiZWwgIT09ICcnO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgbm90Y2hlZCxcbiAgICB3aXRoTGFiZWxcbiAgfSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChOb3RjaGVkT3V0bGluZVJvb3QsIF9leHRlbmRzKHtcbiAgICBcImFyaWEtaGlkZGVuXCI6IHRydWUsXG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZVxuICB9LCBvdGhlciwge1xuICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeChOb3RjaGVkT3V0bGluZUxlZ2VuZCwge1xuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgIGNoaWxkcmVuOiB3aXRoTGFiZWwgPyAvKiNfX1BVUkVfXyovX2pzeChcInNwYW5cIiwge1xuICAgICAgICBjaGlsZHJlbjogbGFiZWxcbiAgICAgIH0pIDogLy8gbm90cmFuc2xhdGUgbmVlZGVkIHdoaWxlIEdvb2dsZSBUcmFuc2xhdGUgd2lsbCBub3QgZml4IHplcm8td2lkdGggc3BhY2UgaXNzdWVcbiAgICAgIF9zcGFuIHx8IChfc3BhbiA9IC8qI19fUFVSRV9fKi9fanN4KFwic3BhblwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJub3RyYW5zbGF0ZVwiLFxuICAgICAgICBjaGlsZHJlbjogXCJcXHUyMDBCXCJcbiAgICAgIH0pKVxuICAgIH0pXG4gIH0pKTtcbn1cbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IE5vdGNoZWRPdXRsaW5lLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGxhYmVsLlxuICAgKi9cbiAgbGFiZWw6IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgb3V0bGluZSBpcyBub3RjaGVkIHRvIGFjY29tbW9kYXRlIHRoZSBsYWJlbC5cbiAgICovXG4gIG5vdGNoZWQ6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdFxufSA6IHZvaWQgMDsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjb21wb25lbnRzXCIsIFwiZnVsbFdpZHRoXCIsIFwiaW5wdXRDb21wb25lbnRcIiwgXCJsYWJlbFwiLCBcIm11bHRpbGluZVwiLCBcIm5vdGNoZWRcIiwgXCJzbG90c1wiLCBcInR5cGVcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHJlZlR5cGUgZnJvbSAnQG11aS91dGlscy9yZWZUeXBlJztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCBOb3RjaGVkT3V0bGluZSBmcm9tICcuL05vdGNoZWRPdXRsaW5lJztcbmltcG9ydCB1c2VGb3JtQ29udHJvbCBmcm9tICcuLi9Gb3JtQ29udHJvbC91c2VGb3JtQ29udHJvbCc7XG5pbXBvcnQgZm9ybUNvbnRyb2xTdGF0ZSBmcm9tICcuLi9Gb3JtQ29udHJvbC9mb3JtQ29udHJvbFN0YXRlJztcbmltcG9ydCBzdHlsZWQsIHsgcm9vdFNob3VsZEZvcndhcmRQcm9wIH0gZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgb3V0bGluZWRJbnB1dENsYXNzZXMsIHsgZ2V0T3V0bGluZWRJbnB1dFV0aWxpdHlDbGFzcyB9IGZyb20gJy4vb3V0bGluZWRJbnB1dENsYXNzZXMnO1xuaW1wb3J0IElucHV0QmFzZSwgeyByb290T3ZlcnJpZGVzUmVzb2x2ZXIgYXMgaW5wdXRCYXNlUm9vdE92ZXJyaWRlc1Jlc29sdmVyLCBpbnB1dE92ZXJyaWRlc1Jlc29sdmVyIGFzIGlucHV0QmFzZUlucHV0T3ZlcnJpZGVzUmVzb2x2ZXIsIElucHV0QmFzZVJvb3QsIElucHV0QmFzZUNvbXBvbmVudCBhcyBJbnB1dEJhc2VJbnB1dCB9IGZyb20gJy4uL0lucHV0QmFzZS9JbnB1dEJhc2UnO1xuaW1wb3J0IHVzZVRoZW1lUHJvcHMgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lUHJvcHMnO1xuaW1wb3J0IHsganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnXSxcbiAgICBub3RjaGVkT3V0bGluZTogWydub3RjaGVkT3V0bGluZSddLFxuICAgIGlucHV0OiBbJ2lucHV0J11cbiAgfTtcbiAgY29uc3QgY29tcG9zZWRDbGFzc2VzID0gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldE91dGxpbmVkSW5wdXRVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xuICByZXR1cm4gX2V4dGVuZHMoe30sIGNsYXNzZXMsIGNvbXBvc2VkQ2xhc3Nlcyk7XG59O1xuY29uc3QgT3V0bGluZWRJbnB1dFJvb3QgPSBzdHlsZWQoSW5wdXRCYXNlUm9vdCwge1xuICBzaG91bGRGb3J3YXJkUHJvcDogcHJvcCA9PiByb290U2hvdWxkRm9yd2FyZFByb3AocHJvcCkgfHwgcHJvcCA9PT0gJ2NsYXNzZXMnLFxuICBuYW1lOiAnTXVpT3V0bGluZWRJbnB1dCcsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IGlucHV0QmFzZVJvb3RPdmVycmlkZXNSZXNvbHZlclxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IHtcbiAgY29uc3QgYm9yZGVyQ29sb3IgPSB0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdsaWdodCcgPyAncmdiYSgwLCAwLCAwLCAwLjIzKScgOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIzKSc7XG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgYm9yZGVyUmFkaXVzOiAodGhlbWUudmFycyB8fCB0aGVtZSkuc2hhcGUuYm9yZGVyUmFkaXVzLFxuICAgIFtgJjpob3ZlciAuJHtvdXRsaW5lZElucHV0Q2xhc3Nlcy5ub3RjaGVkT3V0bGluZX1gXToge1xuICAgICAgYm9yZGVyQ29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLnRleHQucHJpbWFyeVxuICAgIH0sXG4gICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICBbYCY6aG92ZXIgLiR7b3V0bGluZWRJbnB1dENsYXNzZXMubm90Y2hlZE91dGxpbmV9YF06IHtcbiAgICAgICAgYm9yZGVyQ29sb3I6IHRoZW1lLnZhcnMgPyBgcmdiYSgke3RoZW1lLnZhcnMucGFsZXR0ZS5jb21tb24ub25CYWNrZ3JvdW5kQ2hhbm5lbH0gLyAwLjIzKWAgOiBib3JkZXJDb2xvclxuICAgICAgfVxuICAgIH0sXG4gICAgW2AmLiR7b3V0bGluZWRJbnB1dENsYXNzZXMuZm9jdXNlZH0gLiR7b3V0bGluZWRJbnB1dENsYXNzZXMubm90Y2hlZE91dGxpbmV9YF06IHtcbiAgICAgIGJvcmRlckNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5tYWluLFxuICAgICAgYm9yZGVyV2lkdGg6IDJcbiAgICB9LFxuICAgIFtgJi4ke291dGxpbmVkSW5wdXRDbGFzc2VzLmVycm9yfSAuJHtvdXRsaW5lZElucHV0Q2xhc3Nlcy5ub3RjaGVkT3V0bGluZX1gXToge1xuICAgICAgYm9yZGVyQ29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmVycm9yLm1haW5cbiAgICB9LFxuICAgIFtgJi4ke291dGxpbmVkSW5wdXRDbGFzc2VzLmRpc2FibGVkfSAuJHtvdXRsaW5lZElucHV0Q2xhc3Nlcy5ub3RjaGVkT3V0bGluZX1gXToge1xuICAgICAgYm9yZGVyQ29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZFxuICAgIH1cbiAgfSwgb3duZXJTdGF0ZS5zdGFydEFkb3JubWVudCAmJiB7XG4gICAgcGFkZGluZ0xlZnQ6IDE0XG4gIH0sIG93bmVyU3RhdGUuZW5kQWRvcm5tZW50ICYmIHtcbiAgICBwYWRkaW5nUmlnaHQ6IDE0XG4gIH0sIG93bmVyU3RhdGUubXVsdGlsaW5lICYmIF9leHRlbmRzKHtcbiAgICBwYWRkaW5nOiAnMTYuNXB4IDE0cHgnXG4gIH0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiB7XG4gICAgcGFkZGluZzogJzguNXB4IDE0cHgnXG4gIH0pKTtcbn0pO1xuY29uc3QgTm90Y2hlZE91dGxpbmVSb290ID0gc3R5bGVkKE5vdGNoZWRPdXRsaW5lLCB7XG4gIG5hbWU6ICdNdWlPdXRsaW5lZElucHV0JyxcbiAgc2xvdDogJ05vdGNoZWRPdXRsaW5lJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMubm90Y2hlZE91dGxpbmVcbn0pKCh7XG4gIHRoZW1lXG59KSA9PiB7XG4gIGNvbnN0IGJvcmRlckNvbG9yID0gdGhlbWUucGFsZXR0ZS5tb2RlID09PSAnbGlnaHQnID8gJ3JnYmEoMCwgMCwgMCwgMC4yMyknIDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4yMyknO1xuICByZXR1cm4ge1xuICAgIGJvcmRlckNvbG9yOiB0aGVtZS52YXJzID8gYHJnYmEoJHt0aGVtZS52YXJzLnBhbGV0dGUuY29tbW9uLm9uQmFja2dyb3VuZENoYW5uZWx9IC8gMC4yMylgIDogYm9yZGVyQ29sb3JcbiAgfTtcbn0pO1xuY29uc3QgT3V0bGluZWRJbnB1dElucHV0ID0gc3R5bGVkKElucHV0QmFzZUlucHV0LCB7XG4gIG5hbWU6ICdNdWlPdXRsaW5lZElucHV0JyxcbiAgc2xvdDogJ0lucHV0JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IGlucHV0QmFzZUlucHV0T3ZlcnJpZGVzUmVzb2x2ZXJcbn0pKCh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiBfZXh0ZW5kcyh7XG4gIHBhZGRpbmc6ICcxNi41cHggMTRweCdcbn0sICF0aGVtZS52YXJzICYmIHtcbiAgJyY6LXdlYmtpdC1hdXRvZmlsbCc6IHtcbiAgICBXZWJraXRCb3hTaGFkb3c6IHRoZW1lLnBhbGV0dGUubW9kZSA9PT0gJ2xpZ2h0JyA/IG51bGwgOiAnMCAwIDAgMTAwcHggIzI2Njc5OCBpbnNldCcsXG4gICAgV2Via2l0VGV4dEZpbGxDb2xvcjogdGhlbWUucGFsZXR0ZS5tb2RlID09PSAnbGlnaHQnID8gbnVsbCA6ICcjZmZmJyxcbiAgICBjYXJldENvbG9yOiB0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdsaWdodCcgPyBudWxsIDogJyNmZmYnLFxuICAgIGJvcmRlclJhZGl1czogJ2luaGVyaXQnXG4gIH1cbn0sIHRoZW1lLnZhcnMgJiYge1xuICAnJjotd2Via2l0LWF1dG9maWxsJzoge1xuICAgIGJvcmRlclJhZGl1czogJ2luaGVyaXQnXG4gIH0sXG4gIFt0aGVtZS5nZXRDb2xvclNjaGVtZVNlbGVjdG9yKCdkYXJrJyldOiB7XG4gICAgJyY6LXdlYmtpdC1hdXRvZmlsbCc6IHtcbiAgICAgIFdlYmtpdEJveFNoYWRvdzogJzAgMCAwIDEwMHB4ICMyNjY3OTggaW5zZXQnLFxuICAgICAgV2Via2l0VGV4dEZpbGxDb2xvcjogJyNmZmYnLFxuICAgICAgY2FyZXRDb2xvcjogJyNmZmYnXG4gICAgfVxuICB9XG59LCBvd25lclN0YXRlLnNpemUgPT09ICdzbWFsbCcgJiYge1xuICBwYWRkaW5nOiAnOC41cHggMTRweCdcbn0sIG93bmVyU3RhdGUubXVsdGlsaW5lICYmIHtcbiAgcGFkZGluZzogMFxufSwgb3duZXJTdGF0ZS5zdGFydEFkb3JubWVudCAmJiB7XG4gIHBhZGRpbmdMZWZ0OiAwXG59LCBvd25lclN0YXRlLmVuZEFkb3JubWVudCAmJiB7XG4gIHBhZGRpbmdSaWdodDogMFxufSkpO1xuY29uc3QgT3V0bGluZWRJbnB1dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIE91dGxpbmVkSW5wdXQoaW5Qcm9wcywgcmVmKSB7XG4gIHZhciBfcmVmLCBfc2xvdHMkcm9vdCwgX3JlZjIsIF9zbG90cyRpbnB1dCwgX1JlYWN0JEZyYWdtZW50O1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlPdXRsaW5lZElucHV0J1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgY29tcG9uZW50cyA9IHt9LFxuICAgICAgZnVsbFdpZHRoID0gZmFsc2UsXG4gICAgICBpbnB1dENvbXBvbmVudCA9ICdpbnB1dCcsXG4gICAgICBsYWJlbCxcbiAgICAgIG11bHRpbGluZSA9IGZhbHNlLFxuICAgICAgbm90Y2hlZCxcbiAgICAgIHNsb3RzID0ge30sXG4gICAgICB0eXBlID0gJ3RleHQnXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhwcm9wcyk7XG4gIGNvbnN0IG11aUZvcm1Db250cm9sID0gdXNlRm9ybUNvbnRyb2woKTtcbiAgY29uc3QgZmNzID0gZm9ybUNvbnRyb2xTdGF0ZSh7XG4gICAgcHJvcHMsXG4gICAgbXVpRm9ybUNvbnRyb2wsXG4gICAgc3RhdGVzOiBbJ2NvbG9yJywgJ2Rpc2FibGVkJywgJ2Vycm9yJywgJ2ZvY3VzZWQnLCAnaGlkZGVuTGFiZWwnLCAnc2l6ZScsICdyZXF1aXJlZCddXG4gIH0pO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY29sb3I6IGZjcy5jb2xvciB8fCAncHJpbWFyeScsXG4gICAgZGlzYWJsZWQ6IGZjcy5kaXNhYmxlZCxcbiAgICBlcnJvcjogZmNzLmVycm9yLFxuICAgIGZvY3VzZWQ6IGZjcy5mb2N1c2VkLFxuICAgIGZvcm1Db250cm9sOiBtdWlGb3JtQ29udHJvbCxcbiAgICBmdWxsV2lkdGgsXG4gICAgaGlkZGVuTGFiZWw6IGZjcy5oaWRkZW5MYWJlbCxcbiAgICBtdWx0aWxpbmUsXG4gICAgc2l6ZTogZmNzLnNpemUsXG4gICAgdHlwZVxuICB9KTtcbiAgY29uc3QgUm9vdFNsb3QgPSAoX3JlZiA9IChfc2xvdHMkcm9vdCA9IHNsb3RzLnJvb3QpICE9IG51bGwgPyBfc2xvdHMkcm9vdCA6IGNvbXBvbmVudHMuUm9vdCkgIT0gbnVsbCA/IF9yZWYgOiBPdXRsaW5lZElucHV0Um9vdDtcbiAgY29uc3QgSW5wdXRTbG90ID0gKF9yZWYyID0gKF9zbG90cyRpbnB1dCA9IHNsb3RzLmlucHV0KSAhPSBudWxsID8gX3Nsb3RzJGlucHV0IDogY29tcG9uZW50cy5JbnB1dCkgIT0gbnVsbCA/IF9yZWYyIDogT3V0bGluZWRJbnB1dElucHV0O1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goSW5wdXRCYXNlLCBfZXh0ZW5kcyh7XG4gICAgc2xvdHM6IHtcbiAgICAgIHJvb3Q6IFJvb3RTbG90LFxuICAgICAgaW5wdXQ6IElucHV0U2xvdFxuICAgIH0sXG4gICAgcmVuZGVyU3VmZml4OiBzdGF0ZSA9PiAvKiNfX1BVUkVfXyovX2pzeChOb3RjaGVkT3V0bGluZVJvb3QsIHtcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMubm90Y2hlZE91dGxpbmUsXG4gICAgICBsYWJlbDogbGFiZWwgIT0gbnVsbCAmJiBsYWJlbCAhPT0gJycgJiYgZmNzLnJlcXVpcmVkID8gX1JlYWN0JEZyYWdtZW50IHx8IChfUmVhY3QkRnJhZ21lbnQgPSAvKiNfX1BVUkVfXyovX2pzeHMoUmVhY3QuRnJhZ21lbnQsIHtcbiAgICAgICAgY2hpbGRyZW46IFtsYWJlbCwgXCJcXHUyMDA5XCIsICcqJ11cbiAgICAgIH0pKSA6IGxhYmVsLFxuICAgICAgbm90Y2hlZDogdHlwZW9mIG5vdGNoZWQgIT09ICd1bmRlZmluZWQnID8gbm90Y2hlZCA6IEJvb2xlYW4oc3RhdGUuc3RhcnRBZG9ybm1lbnQgfHwgc3RhdGUuZmlsbGVkIHx8IHN0YXRlLmZvY3VzZWQpXG4gICAgfSksXG4gICAgZnVsbFdpZHRoOiBmdWxsV2lkdGgsXG4gICAgaW5wdXRDb21wb25lbnQ6IGlucHV0Q29tcG9uZW50LFxuICAgIG11bHRpbGluZTogbXVsdGlsaW5lLFxuICAgIHJlZjogcmVmLFxuICAgIHR5cGU6IHR5cGVcbiAgfSwgb3RoZXIsIHtcbiAgICBjbGFzc2VzOiBfZXh0ZW5kcyh7fSwgY2xhc3Nlcywge1xuICAgICAgbm90Y2hlZE91dGxpbmU6IG51bGxcbiAgICB9KVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IE91dGxpbmVkSW5wdXQucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogVGhpcyBwcm9wIGhlbHBzIHVzZXJzIHRvIGZpbGwgZm9ybXMgZmFzdGVyLCBlc3BlY2lhbGx5IG9uIG1vYmlsZSBkZXZpY2VzLlxuICAgKiBUaGUgbmFtZSBjYW4gYmUgY29uZnVzaW5nLCBhcyBpdCdzIG1vcmUgbGlrZSBhbiBhdXRvZmlsbC5cbiAgICogWW91IGNhbiBsZWFybiBtb3JlIGFib3V0IGl0IFtmb2xsb3dpbmcgdGhlIHNwZWNpZmljYXRpb25dKGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm0tY29udHJvbC1pbmZyYXN0cnVjdHVyZS5odG1sI2F1dG9maWxsKS5cbiAgICovXG4gIGF1dG9Db21wbGV0ZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgZWxlbWVudCBpcyBmb2N1c2VkIGR1cmluZyB0aGUgZmlyc3QgbW91bnQuXG4gICAqL1xuICBhdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LlxuICAgKiBJdCBzdXBwb3J0cyBib3RoIGRlZmF1bHQgYW5kIGN1c3RvbSB0aGVtZSBjb2xvcnMsIHdoaWNoIGNhbiBiZSBhZGRlZCBhcyBzaG93biBpbiB0aGVcbiAgICogW3BhbGV0dGUgY3VzdG9taXphdGlvbiBndWlkZV0oaHR0cHM6Ly9tdWkuY29tL21hdGVyaWFsLXVpL2N1c3RvbWl6YXRpb24vcGFsZXR0ZS8jY3VzdG9tLWNvbG9ycykuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSAoYCdwcmltYXJ5J2ApIGluaGVyaXRlZCBmcm9tIHRoZSBwYXJlbnQgRm9ybUNvbnRyb2wgY29tcG9uZW50LlxuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsncHJpbWFyeScsICdzZWNvbmRhcnknXSksIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnRzIHVzZWQgZm9yIGVhY2ggc2xvdCBpbnNpZGUuXG4gICAqXG4gICAqIFRoaXMgcHJvcCBpcyBhbiBhbGlhcyBmb3IgdGhlIGBzbG90c2AgcHJvcC5cbiAgICogSXQncyByZWNvbW1lbmRlZCB0byB1c2UgdGhlIGBzbG90c2AgcHJvcCBpbnN0ZWFkLlxuICAgKlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgY29tcG9uZW50czogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBJbnB1dDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIFJvb3Q6IFByb3BUeXBlcy5lbGVtZW50VHlwZVxuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IHZhbHVlLiBVc2Ugd2hlbiB0aGUgY29tcG9uZW50IGlzIG5vdCBjb250cm9sbGVkLlxuICAgKi9cbiAgZGVmYXVsdFZhbHVlOiBQcm9wVHlwZXMuYW55LFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIGRpc2FibGVkLlxuICAgKiBUaGUgcHJvcCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgKGBmYWxzZWApIGluaGVyaXRlZCBmcm9tIHRoZSBwYXJlbnQgRm9ybUNvbnRyb2wgY29tcG9uZW50LlxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogRW5kIGBJbnB1dEFkb3JubWVudGAgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgZW5kQWRvcm5tZW50OiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgd2lsbCBpbmRpY2F0ZSBhbiBlcnJvci5cbiAgICogVGhlIHByb3AgZGVmYXVsdHMgdG8gdGhlIHZhbHVlIChgZmFsc2VgKSBpbmhlcml0ZWQgZnJvbSB0aGUgcGFyZW50IEZvcm1Db250cm9sIGNvbXBvbmVudC5cbiAgICovXG4gIGVycm9yOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgd2lsbCB0YWtlIHVwIHRoZSBmdWxsIHdpZHRoIG9mIGl0cyBjb250YWluZXIuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBmdWxsV2lkdGg6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIGlkIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQgJ2lucHV0J1xuICAgKi9cbiAgaW5wdXRDb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgLyoqXG4gICAqIFtBdHRyaWJ1dGVzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvaW5wdXQjQXR0cmlidXRlcykgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgaW5wdXRQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIFBhc3MgYSByZWYgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UmVmOiByZWZUeXBlLFxuICAvKipcbiAgICogVGhlIGxhYmVsIG9mIHRoZSBgaW5wdXRgLiBJdCBpcyBvbmx5IHVzZWQgZm9yIGxheW91dC4gVGhlIGFjdHVhbCBsYWJlbGxpbmdcbiAgICogaXMgaGFuZGxlZCBieSBgSW5wdXRMYWJlbGAuXG4gICAqL1xuICBsYWJlbDogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBJZiBgZGVuc2VgLCB3aWxsIGFkanVzdCB2ZXJ0aWNhbCBzcGFjaW5nLiBUaGlzIGlzIG5vcm1hbGx5IG9idGFpbmVkIHZpYSBjb250ZXh0IGZyb21cbiAgICogRm9ybUNvbnRyb2wuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSAoYCdub25lJ2ApIGluaGVyaXRlZCBmcm9tIHRoZSBwYXJlbnQgRm9ybUNvbnRyb2wgY29tcG9uZW50LlxuICAgKi9cbiAgbWFyZ2luOiBQcm9wVHlwZXMub25lT2YoWydkZW5zZScsICdub25lJ10pLFxuICAvKipcbiAgICogTWF4aW11bSBudW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIG1heFJvd3M6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIE1pbmltdW0gbnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheSB3aGVuIG11bHRpbGluZSBvcHRpb24gaXMgc2V0IHRvIHRydWUuXG4gICAqL1xuICBtaW5Sb3dzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGEgW1RleHRhcmVhQXV0b3NpemVdKC9tYXRlcmlhbC11aS9yZWFjdC10ZXh0YXJlYS1hdXRvc2l6ZS8pIGVsZW1lbnQgaXMgcmVuZGVyZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBtdWx0aWxpbmU6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogTmFtZSBhdHRyaWJ1dGUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBvdXRsaW5lIGlzIG5vdGNoZWQgdG8gYWNjb21tb2RhdGUgdGhlIGxhYmVsLlxuICAgKi9cbiAgbm90Y2hlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSB2YWx1ZSBpcyBjaGFuZ2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0LkNoYW5nZUV2ZW50PEhUTUxUZXh0QXJlYUVsZW1lbnQgfCBIVE1MSW5wdXRFbGVtZW50Pn0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIFlvdSBjYW4gcHVsbCBvdXQgdGhlIG5ldyB2YWx1ZSBieSBhY2Nlc3NpbmcgYGV2ZW50LnRhcmdldC52YWx1ZWAgKHN0cmluZykuXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBUaGUgc2hvcnQgaGludCBkaXNwbGF5ZWQgaW4gdGhlIGBpbnB1dGAgYmVmb3JlIHRoZSB1c2VyIGVudGVycyBhIHZhbHVlLlxuICAgKi9cbiAgcGxhY2Vob2xkZXI6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBJdCBwcmV2ZW50cyB0aGUgdXNlciBmcm9tIGNoYW5naW5nIHRoZSB2YWx1ZSBvZiB0aGUgZmllbGRcbiAgICogKG5vdCBmcm9tIGludGVyYWN0aW5nIHdpdGggdGhlIGZpZWxkKS5cbiAgICovXG4gIHJlYWRPbmx5OiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgZWxlbWVudCBpcyByZXF1aXJlZC5cbiAgICogVGhlIHByb3AgZGVmYXVsdHMgdG8gdGhlIHZhbHVlIChgZmFsc2VgKSBpbmhlcml0ZWQgZnJvbSB0aGUgcGFyZW50IEZvcm1Db250cm9sIGNvbXBvbmVudC5cbiAgICovXG4gIHJlcXVpcmVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIE51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgcm93czogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudHMgdXNlZCBmb3IgZWFjaCBzbG90IGluc2lkZS5cbiAgICpcbiAgICogVGhpcyBwcm9wIGlzIGFuIGFsaWFzIGZvciB0aGUgYGNvbXBvbmVudHNgIHByb3AsIHdoaWNoIHdpbGwgYmUgZGVwcmVjYXRlZCBpbiB0aGUgZnV0dXJlLlxuICAgKlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgc2xvdHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaW5wdXQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICByb290OiBQcm9wVHlwZXMuZWxlbWVudFR5cGVcbiAgfSksXG4gIC8qKlxuICAgKiBTdGFydCBgSW5wdXRBZG9ybm1lbnRgIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIHN0YXJ0QWRvcm5tZW50OiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgLyoqXG4gICAqIFR5cGUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC4gSXQgc2hvdWxkIGJlIFthIHZhbGlkIEhUTUw1IGlucHV0IHR5cGVdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCNGb3JtXyUzQ2lucHV0JTNFX3R5cGVzKS5cbiAgICogQGRlZmF1bHQgJ3RleHQnXG4gICAqL1xuICB0eXBlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIHZhbHVlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQsIHJlcXVpcmVkIGZvciBhIGNvbnRyb2xsZWQgY29tcG9uZW50LlxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5hbnlcbn0gOiB2b2lkIDA7XG5PdXRsaW5lZElucHV0Lm11aU5hbWUgPSAnSW5wdXQnO1xuZXhwb3J0IGRlZmF1bHQgT3V0bGluZWRJbnB1dDsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjcmVhdGVTdmdJY29uIGZyb20gJy4uLy4uL3V0aWxzL2NyZWF0ZVN2Z0ljb24nO1xuXG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVTdmdJY29uKCAvKiNfX1BVUkVfXyovX2pzeChcInBhdGhcIiwge1xuICBkOiBcIk0xOC40MSAxNi41OUwxMy44MiAxMmw0LjU5LTQuNTlMMTcgNmwtNiA2IDYgNnpNNiA2aDJ2MTJINnpcIlxufSksICdGaXJzdFBhZ2UnKTsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjcmVhdGVTdmdJY29uIGZyb20gJy4uLy4uL3V0aWxzL2NyZWF0ZVN2Z0ljb24nO1xuXG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVTdmdJY29uKCAvKiNfX1BVUkVfXyovX2pzeChcInBhdGhcIiwge1xuICBkOiBcIk01LjU5IDcuNDFMMTAuMTggMTJsLTQuNTkgNC41OUw3IDE4bDYtNi02LTZ6TTE2IDZoMnYxMmgtMnpcIlxufSksICdMYXN0UGFnZScpOyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0U2VsZWN0VXRpbGl0eUNsYXNzZXMoc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aVNlbGVjdCcsIHNsb3QpO1xufVxuY29uc3Qgc2VsZWN0Q2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aVNlbGVjdCcsIFsncm9vdCcsICdzZWxlY3QnLCAnbXVsdGlwbGUnLCAnZmlsbGVkJywgJ291dGxpbmVkJywgJ3N0YW5kYXJkJywgJ2Rpc2FibGVkJywgJ2ZvY3VzZWQnLCAnaWNvbicsICdpY29uT3BlbicsICdpY29uRmlsbGVkJywgJ2ljb25PdXRsaW5lZCcsICdpY29uU3RhbmRhcmQnLCAnbmF0aXZlSW5wdXQnLCAnZXJyb3InXSk7XG5leHBvcnQgZGVmYXVsdCBzZWxlY3RDbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlIGZyb20gXCJAbXVpL3V0aWxzL2Zvcm1hdE11aUVycm9yTWVzc2FnZVwiO1xudmFyIF9zcGFuO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYXJpYS1kZXNjcmliZWRieVwiLCBcImFyaWEtbGFiZWxcIiwgXCJhdXRvRm9jdXNcIiwgXCJhdXRvV2lkdGhcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImRlZmF1bHRPcGVuXCIsIFwiZGVmYXVsdFZhbHVlXCIsIFwiZGlzYWJsZWRcIiwgXCJkaXNwbGF5RW1wdHlcIiwgXCJlcnJvclwiLCBcIkljb25Db21wb25lbnRcIiwgXCJpbnB1dFJlZlwiLCBcImxhYmVsSWRcIiwgXCJNZW51UHJvcHNcIiwgXCJtdWx0aXBsZVwiLCBcIm5hbWVcIiwgXCJvbkJsdXJcIiwgXCJvbkNoYW5nZVwiLCBcIm9uQ2xvc2VcIiwgXCJvbkZvY3VzXCIsIFwib25PcGVuXCIsIFwib3BlblwiLCBcInJlYWRPbmx5XCIsIFwicmVuZGVyVmFsdWVcIiwgXCJTZWxlY3REaXNwbGF5UHJvcHNcIiwgXCJ0YWJJbmRleFwiLCBcInR5cGVcIiwgXCJ2YWx1ZVwiLCBcInZhcmlhbnRcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBpc0ZyYWdtZW50IH0gZnJvbSAncmVhY3QtaXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IHVzZUlkIGZyb20gJ0BtdWkvdXRpbHMvdXNlSWQnO1xuaW1wb3J0IHJlZlR5cGUgZnJvbSAnQG11aS91dGlscy9yZWZUeXBlJztcbmltcG9ydCBvd25lckRvY3VtZW50IGZyb20gJy4uL3V0aWxzL293bmVyRG9jdW1lbnQnO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5pbXBvcnQgTWVudSBmcm9tICcuLi9NZW51L01lbnUnO1xuaW1wb3J0IHsgbmF0aXZlU2VsZWN0U2VsZWN0U3R5bGVzLCBuYXRpdmVTZWxlY3RJY29uU3R5bGVzIH0gZnJvbSAnLi4vTmF0aXZlU2VsZWN0L05hdGl2ZVNlbGVjdElucHV0JztcbmltcG9ydCB7IGlzRmlsbGVkIH0gZnJvbSAnLi4vSW5wdXRCYXNlL3V0aWxzJztcbmltcG9ydCBzdHlsZWQsIHsgc2xvdFNob3VsZEZvcndhcmRQcm9wIH0gZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlRm9ya1JlZiBmcm9tICcuLi91dGlscy91c2VGb3JrUmVmJztcbmltcG9ydCB1c2VDb250cm9sbGVkIGZyb20gJy4uL3V0aWxzL3VzZUNvbnRyb2xsZWQnO1xuaW1wb3J0IHNlbGVjdENsYXNzZXMsIHsgZ2V0U2VsZWN0VXRpbGl0eUNsYXNzZXMgfSBmcm9tICcuL3NlbGVjdENsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IFNlbGVjdFNlbGVjdCA9IHN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnTXVpU2VsZWN0JyxcbiAgc2xvdDogJ1NlbGVjdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtcbiAgICAvLyBXaW4gc3BlY2lmaWNpdHkgb3ZlciB0aGUgaW5wdXQgYmFzZVxuICAgIHtcbiAgICAgIFtgJi4ke3NlbGVjdENsYXNzZXMuc2VsZWN0fWBdOiBzdHlsZXMuc2VsZWN0XG4gICAgfSwge1xuICAgICAgW2AmLiR7c2VsZWN0Q2xhc3Nlcy5zZWxlY3R9YF06IHN0eWxlc1tvd25lclN0YXRlLnZhcmlhbnRdXG4gICAgfSwge1xuICAgICAgW2AmLiR7c2VsZWN0Q2xhc3Nlcy5lcnJvcn1gXTogc3R5bGVzLmVycm9yXG4gICAgfSwge1xuICAgICAgW2AmLiR7c2VsZWN0Q2xhc3Nlcy5tdWx0aXBsZX1gXTogc3R5bGVzLm11bHRpcGxlXG4gICAgfV07XG4gIH1cbn0pKG5hdGl2ZVNlbGVjdFNlbGVjdFN0eWxlcywge1xuICAvLyBXaW4gc3BlY2lmaWNpdHkgb3ZlciB0aGUgaW5wdXQgYmFzZVxuICBbYCYuJHtzZWxlY3RDbGFzc2VzLnNlbGVjdH1gXToge1xuICAgIGhlaWdodDogJ2F1dG8nLFxuICAgIC8vIFJlc2V0cyBmb3IgbXVsdGlwbGUgc2VsZWN0IHdpdGggY2hpcHNcbiAgICBtaW5IZWlnaHQ6ICcxLjQzNzVlbScsXG4gICAgLy8gUmVxdWlyZWQgZm9yIHNlbGVjdFxcdGV4dC1maWVsZCBoZWlnaHQgY29uc2lzdGVuY3lcbiAgICB0ZXh0T3ZlcmZsb3c6ICdlbGxpcHNpcycsXG4gICAgd2hpdGVTcGFjZTogJ25vd3JhcCcsXG4gICAgb3ZlcmZsb3c6ICdoaWRkZW4nXG4gIH1cbn0pO1xuY29uc3QgU2VsZWN0SWNvbiA9IHN0eWxlZCgnc3ZnJywge1xuICBuYW1lOiAnTXVpU2VsZWN0JyxcbiAgc2xvdDogJ0ljb24nLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLmljb24sIG93bmVyU3RhdGUudmFyaWFudCAmJiBzdHlsZXNbYGljb24ke2NhcGl0YWxpemUob3duZXJTdGF0ZS52YXJpYW50KX1gXSwgb3duZXJTdGF0ZS5vcGVuICYmIHN0eWxlcy5pY29uT3Blbl07XG4gIH1cbn0pKG5hdGl2ZVNlbGVjdEljb25TdHlsZXMpO1xuY29uc3QgU2VsZWN0TmF0aXZlSW5wdXQgPSBzdHlsZWQoJ2lucHV0Jywge1xuICBzaG91bGRGb3J3YXJkUHJvcDogcHJvcCA9PiBzbG90U2hvdWxkRm9yd2FyZFByb3AocHJvcCkgJiYgcHJvcCAhPT0gJ2NsYXNzZXMnLFxuICBuYW1lOiAnTXVpU2VsZWN0JyxcbiAgc2xvdDogJ05hdGl2ZUlucHV0JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMubmF0aXZlSW5wdXRcbn0pKHtcbiAgYm90dG9tOiAwLFxuICBsZWZ0OiAwLFxuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgb3BhY2l0eTogMCxcbiAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICB3aWR0aDogJzEwMCUnLFxuICBib3hTaXppbmc6ICdib3JkZXItYm94J1xufSk7XG5mdW5jdGlvbiBhcmVFcXVhbFZhbHVlcyhhLCBiKSB7XG4gIGlmICh0eXBlb2YgYiA9PT0gJ29iamVjdCcgJiYgYiAhPT0gbnVsbCkge1xuICAgIHJldHVybiBhID09PSBiO1xuICB9XG5cbiAgLy8gVGhlIHZhbHVlIGNvdWxkIGJlIGEgbnVtYmVyLCB0aGUgRE9NIHdpbGwgc3RyaW5naWZ5IGl0IGFueXdheS5cbiAgcmV0dXJuIFN0cmluZyhhKSA9PT0gU3RyaW5nKGIpO1xufVxuZnVuY3Rpb24gaXNFbXB0eShkaXNwbGF5KSB7XG4gIHJldHVybiBkaXNwbGF5ID09IG51bGwgfHwgdHlwZW9mIGRpc3BsYXkgPT09ICdzdHJpbmcnICYmICFkaXNwbGF5LnRyaW0oKTtcbn1cbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIHZhcmlhbnQsXG4gICAgZGlzYWJsZWQsXG4gICAgbXVsdGlwbGUsXG4gICAgb3BlbixcbiAgICBlcnJvclxuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgc2VsZWN0OiBbJ3NlbGVjdCcsIHZhcmlhbnQsIGRpc2FibGVkICYmICdkaXNhYmxlZCcsIG11bHRpcGxlICYmICdtdWx0aXBsZScsIGVycm9yICYmICdlcnJvciddLFxuICAgIGljb246IFsnaWNvbicsIGBpY29uJHtjYXBpdGFsaXplKHZhcmlhbnQpfWAsIG9wZW4gJiYgJ2ljb25PcGVuJywgZGlzYWJsZWQgJiYgJ2Rpc2FibGVkJ10sXG4gICAgbmF0aXZlSW5wdXQ6IFsnbmF0aXZlSW5wdXQnXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldFNlbGVjdFV0aWxpdHlDbGFzc2VzLCBjbGFzc2VzKTtcbn07XG5cbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuY29uc3QgU2VsZWN0SW5wdXQgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBTZWxlY3RJbnB1dChwcm9wcywgcmVmKSB7XG4gIHZhciBfTWVudVByb3BzJHNsb3RQcm9wcztcbiAgY29uc3Qge1xuICAgICAgJ2FyaWEtZGVzY3JpYmVkYnknOiBhcmlhRGVzY3JpYmVkYnksXG4gICAgICAnYXJpYS1sYWJlbCc6IGFyaWFMYWJlbCxcbiAgICAgIGF1dG9Gb2N1cyxcbiAgICAgIGF1dG9XaWR0aCxcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lLFxuICAgICAgZGVmYXVsdE9wZW4sXG4gICAgICBkZWZhdWx0VmFsdWUsXG4gICAgICBkaXNhYmxlZCxcbiAgICAgIGRpc3BsYXlFbXB0eSxcbiAgICAgIGVycm9yID0gZmFsc2UsXG4gICAgICBJY29uQ29tcG9uZW50LFxuICAgICAgaW5wdXRSZWY6IGlucHV0UmVmUHJvcCxcbiAgICAgIGxhYmVsSWQsXG4gICAgICBNZW51UHJvcHMgPSB7fSxcbiAgICAgIG11bHRpcGxlLFxuICAgICAgbmFtZSxcbiAgICAgIG9uQmx1cixcbiAgICAgIG9uQ2hhbmdlLFxuICAgICAgb25DbG9zZSxcbiAgICAgIG9uRm9jdXMsXG4gICAgICBvbk9wZW4sXG4gICAgICBvcGVuOiBvcGVuUHJvcCxcbiAgICAgIHJlYWRPbmx5LFxuICAgICAgcmVuZGVyVmFsdWUsXG4gICAgICBTZWxlY3REaXNwbGF5UHJvcHMgPSB7fSxcbiAgICAgIHRhYkluZGV4OiB0YWJJbmRleFByb3BcbiAgICAgIC8vIGNhdGNoaW5nIGB0eXBlYCBmcm9tIElucHV0IHdoaWNoIG1ha2VzIG5vIHNlbnNlIGZvciBTZWxlY3RJbnB1dFxuICAgICAgLFxuXG4gICAgICB2YWx1ZTogdmFsdWVQcm9wLFxuICAgICAgdmFyaWFudCA9ICdzdGFuZGFyZCdcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3QgW3ZhbHVlLCBzZXRWYWx1ZVN0YXRlXSA9IHVzZUNvbnRyb2xsZWQoe1xuICAgIGNvbnRyb2xsZWQ6IHZhbHVlUHJvcCxcbiAgICBkZWZhdWx0OiBkZWZhdWx0VmFsdWUsXG4gICAgbmFtZTogJ1NlbGVjdCdcbiAgfSk7XG4gIGNvbnN0IFtvcGVuU3RhdGUsIHNldE9wZW5TdGF0ZV0gPSB1c2VDb250cm9sbGVkKHtcbiAgICBjb250cm9sbGVkOiBvcGVuUHJvcCxcbiAgICBkZWZhdWx0OiBkZWZhdWx0T3BlbixcbiAgICBuYW1lOiAnU2VsZWN0J1xuICB9KTtcbiAgY29uc3QgaW5wdXRSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIGNvbnN0IGRpc3BsYXlSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIGNvbnN0IFtkaXNwbGF5Tm9kZSwgc2V0RGlzcGxheU5vZGVdID0gUmVhY3QudXNlU3RhdGUobnVsbCk7XG4gIGNvbnN0IHtcbiAgICBjdXJyZW50OiBpc09wZW5Db250cm9sbGVkXG4gIH0gPSBSZWFjdC51c2VSZWYob3BlblByb3AgIT0gbnVsbCk7XG4gIGNvbnN0IFttZW51TWluV2lkdGhTdGF0ZSwgc2V0TWVudU1pbldpZHRoU3RhdGVdID0gUmVhY3QudXNlU3RhdGUoKTtcbiAgY29uc3QgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihyZWYsIGlucHV0UmVmUHJvcCk7XG4gIGNvbnN0IGhhbmRsZURpc3BsYXlSZWYgPSBSZWFjdC51c2VDYWxsYmFjayhub2RlID0+IHtcbiAgICBkaXNwbGF5UmVmLmN1cnJlbnQgPSBub2RlO1xuICAgIGlmIChub2RlKSB7XG4gICAgICBzZXREaXNwbGF5Tm9kZShub2RlKTtcbiAgICB9XG4gIH0sIFtdKTtcbiAgY29uc3QgYW5jaG9yRWxlbWVudCA9IGRpc3BsYXlOb2RlID09IG51bGwgPyB2b2lkIDAgOiBkaXNwbGF5Tm9kZS5wYXJlbnROb2RlO1xuICBSZWFjdC51c2VJbXBlcmF0aXZlSGFuZGxlKGhhbmRsZVJlZiwgKCkgPT4gKHtcbiAgICBmb2N1czogKCkgPT4ge1xuICAgICAgZGlzcGxheVJlZi5jdXJyZW50LmZvY3VzKCk7XG4gICAgfSxcbiAgICBub2RlOiBpbnB1dFJlZi5jdXJyZW50LFxuICAgIHZhbHVlXG4gIH0pLCBbdmFsdWVdKTtcblxuICAvLyBSZXNpemUgbWVudSBvbiBgZGVmYXVsdE9wZW5gIGF1dG9tYXRpYyB0b2dnbGUuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGRlZmF1bHRPcGVuICYmIG9wZW5TdGF0ZSAmJiBkaXNwbGF5Tm9kZSAmJiAhaXNPcGVuQ29udHJvbGxlZCkge1xuICAgICAgc2V0TWVudU1pbldpZHRoU3RhdGUoYXV0b1dpZHRoID8gbnVsbCA6IGFuY2hvckVsZW1lbnQuY2xpZW50V2lkdGgpO1xuICAgICAgZGlzcGxheVJlZi5jdXJyZW50LmZvY3VzKCk7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgfSwgW2Rpc3BsYXlOb2RlLCBhdXRvV2lkdGhdKTtcbiAgLy8gYGlzT3BlbkNvbnRyb2xsZWRgIGlzIGlnbm9yZWQgYmVjYXVzZSB0aGUgY29tcG9uZW50IHNob3VsZCBuZXZlciBzd2l0Y2ggYmV0d2VlbiBjb250cm9sbGVkIGFuZCB1bmNvbnRyb2xsZWQgbW9kZXMuXG4gIC8vIGBkZWZhdWx0T3BlbmAgYW5kIGBvcGVuU3RhdGVgIGFyZSBpZ25vcmVkIHRvIGF2b2lkIHVubmVjZXNzYXJ5IGNhbGxiYWNrcy5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoYXV0b0ZvY3VzKSB7XG4gICAgICBkaXNwbGF5UmVmLmN1cnJlbnQuZm9jdXMoKTtcbiAgICB9XG4gIH0sIFthdXRvRm9jdXNdKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIWxhYmVsSWQpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGNvbnN0IGxhYmVsID0gb3duZXJEb2N1bWVudChkaXNwbGF5UmVmLmN1cnJlbnQpLmdldEVsZW1lbnRCeUlkKGxhYmVsSWQpO1xuICAgIGlmIChsYWJlbCkge1xuICAgICAgY29uc3QgaGFuZGxlciA9ICgpID0+IHtcbiAgICAgICAgaWYgKGdldFNlbGVjdGlvbigpLmlzQ29sbGFwc2VkKSB7XG4gICAgICAgICAgZGlzcGxheVJlZi5jdXJyZW50LmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBsYWJlbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZXIpO1xuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgbGFiZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBoYW5kbGVyKTtcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH0sIFtsYWJlbElkXSk7XG4gIGNvbnN0IHVwZGF0ZSA9IChvcGVuLCBldmVudCkgPT4ge1xuICAgIGlmIChvcGVuKSB7XG4gICAgICBpZiAob25PcGVuKSB7XG4gICAgICAgIG9uT3BlbihldmVudCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChvbkNsb3NlKSB7XG4gICAgICBvbkNsb3NlKGV2ZW50KTtcbiAgICB9XG4gICAgaWYgKCFpc09wZW5Db250cm9sbGVkKSB7XG4gICAgICBzZXRNZW51TWluV2lkdGhTdGF0ZShhdXRvV2lkdGggPyBudWxsIDogYW5jaG9yRWxlbWVudC5jbGllbnRXaWR0aCk7XG4gICAgICBzZXRPcGVuU3RhdGUob3Blbik7XG4gICAgfVxuICB9O1xuICBjb25zdCBoYW5kbGVNb3VzZURvd24gPSBldmVudCA9PiB7XG4gICAgLy8gSWdub3JlIGV2ZXJ5dGhpbmcgYnV0IGxlZnQtY2xpY2tcbiAgICBpZiAoZXZlbnQuYnV0dG9uICE9PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIEhpamFjayB0aGUgZGVmYXVsdCBmb2N1cyBiZWhhdmlvci5cbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGRpc3BsYXlSZWYuY3VycmVudC5mb2N1cygpO1xuICAgIHVwZGF0ZSh0cnVlLCBldmVudCk7XG4gIH07XG4gIGNvbnN0IGhhbmRsZUNsb3NlID0gZXZlbnQgPT4ge1xuICAgIHVwZGF0ZShmYWxzZSwgZXZlbnQpO1xuICB9O1xuICBjb25zdCBjaGlsZHJlbkFycmF5ID0gUmVhY3QuQ2hpbGRyZW4udG9BcnJheShjaGlsZHJlbik7XG5cbiAgLy8gU3VwcG9ydCBhdXRvZmlsbC5cbiAgY29uc3QgaGFuZGxlQ2hhbmdlID0gZXZlbnQgPT4ge1xuICAgIGNvbnN0IGNoaWxkID0gY2hpbGRyZW5BcnJheS5maW5kKGNoaWxkSXRlbSA9PiBjaGlsZEl0ZW0ucHJvcHMudmFsdWUgPT09IGV2ZW50LnRhcmdldC52YWx1ZSk7XG4gICAgaWYgKGNoaWxkID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc2V0VmFsdWVTdGF0ZShjaGlsZC5wcm9wcy52YWx1ZSk7XG4gICAgaWYgKG9uQ2hhbmdlKSB7XG4gICAgICBvbkNoYW5nZShldmVudCwgY2hpbGQpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgaGFuZGxlSXRlbUNsaWNrID0gY2hpbGQgPT4gZXZlbnQgPT4ge1xuICAgIGxldCBuZXdWYWx1ZTtcblxuICAgIC8vIFdlIHVzZSB0aGUgdGFiaW5kZXggYXR0cmlidXRlIHRvIHNpZ25hbCB0aGUgYXZhaWxhYmxlIG9wdGlvbnMuXG4gICAgaWYgKCFldmVudC5jdXJyZW50VGFyZ2V0Lmhhc0F0dHJpYnV0ZSgndGFiaW5kZXgnKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAobXVsdGlwbGUpIHtcbiAgICAgIG5ld1ZhbHVlID0gQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZS5zbGljZSgpIDogW107XG4gICAgICBjb25zdCBpdGVtSW5kZXggPSB2YWx1ZS5pbmRleE9mKGNoaWxkLnByb3BzLnZhbHVlKTtcbiAgICAgIGlmIChpdGVtSW5kZXggPT09IC0xKSB7XG4gICAgICAgIG5ld1ZhbHVlLnB1c2goY2hpbGQucHJvcHMudmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV3VmFsdWUuc3BsaWNlKGl0ZW1JbmRleCwgMSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld1ZhbHVlID0gY2hpbGQucHJvcHMudmFsdWU7XG4gICAgfVxuICAgIGlmIChjaGlsZC5wcm9wcy5vbkNsaWNrKSB7XG4gICAgICBjaGlsZC5wcm9wcy5vbkNsaWNrKGV2ZW50KTtcbiAgICB9XG4gICAgaWYgKHZhbHVlICE9PSBuZXdWYWx1ZSkge1xuICAgICAgc2V0VmFsdWVTdGF0ZShuZXdWYWx1ZSk7XG4gICAgICBpZiAob25DaGFuZ2UpIHtcbiAgICAgICAgLy8gUmVkZWZpbmUgdGFyZ2V0IHRvIGFsbG93IG5hbWUgYW5kIHZhbHVlIHRvIGJlIHJlYWQuXG4gICAgICAgIC8vIFRoaXMgYWxsb3dzIHNlYW1sZXNzIGludGVncmF0aW9uIHdpdGggdGhlIG1vc3QgcG9wdWxhciBmb3JtIGxpYnJhcmllcy5cbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL211aS9tYXRlcmlhbC11aS9pc3N1ZXMvMTM0ODUjaXNzdWVjb21tZW50LTY3NjA0ODQ5MlxuICAgICAgICAvLyBDbG9uZSB0aGUgZXZlbnQgdG8gbm90IG92ZXJyaWRlIGB0YXJnZXRgIG9mIHRoZSBvcmlnaW5hbCBldmVudC5cbiAgICAgICAgY29uc3QgbmF0aXZlRXZlbnQgPSBldmVudC5uYXRpdmVFdmVudCB8fCBldmVudDtcbiAgICAgICAgY29uc3QgY2xvbmVkRXZlbnQgPSBuZXcgbmF0aXZlRXZlbnQuY29uc3RydWN0b3IobmF0aXZlRXZlbnQudHlwZSwgbmF0aXZlRXZlbnQpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY2xvbmVkRXZlbnQsICd0YXJnZXQnLCB7XG4gICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICAgIHZhbHVlOiBuZXdWYWx1ZSxcbiAgICAgICAgICAgIG5hbWVcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBvbkNoYW5nZShjbG9uZWRFdmVudCwgY2hpbGQpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIW11bHRpcGxlKSB7XG4gICAgICB1cGRhdGUoZmFsc2UsIGV2ZW50KTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGhhbmRsZUtleURvd24gPSBldmVudCA9PiB7XG4gICAgaWYgKCFyZWFkT25seSkge1xuICAgICAgY29uc3QgdmFsaWRLZXlzID0gWycgJywgJ0Fycm93VXAnLCAnQXJyb3dEb3duJyxcbiAgICAgIC8vIFRoZSBuYXRpdmUgc2VsZWN0IGRvZXNuJ3QgcmVzcG9uZCB0byBlbnRlciBvbiBtYWNPUywgYnV0IGl0J3MgcmVjb21tZW5kZWQgYnlcbiAgICAgIC8vIGh0dHBzOi8vd3d3LnczLm9yZy9XQUkvQVJJQS9hcGcvcGF0dGVybnMvY29tYm9ib3gvZXhhbXBsZXMvY29tYm9ib3gtc2VsZWN0LW9ubHkvXG4gICAgICAnRW50ZXInXTtcbiAgICAgIGlmICh2YWxpZEtleXMuaW5kZXhPZihldmVudC5rZXkpICE9PSAtMSkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB1cGRhdGUodHJ1ZSwgZXZlbnQpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgY29uc3Qgb3BlbiA9IGRpc3BsYXlOb2RlICE9PSBudWxsICYmIG9wZW5TdGF0ZTtcbiAgY29uc3QgaGFuZGxlQmx1ciA9IGV2ZW50ID0+IHtcbiAgICAvLyBpZiBvcGVuIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvblxuICAgIGlmICghb3BlbiAmJiBvbkJsdXIpIHtcbiAgICAgIC8vIFByZWFjdCBzdXBwb3J0LCB0YXJnZXQgaXMgcmVhZCBvbmx5IHByb3BlcnR5IG9uIGEgbmF0aXZlIGV2ZW50LlxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV2ZW50LCAndGFyZ2V0Jywge1xuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICBuYW1lXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgb25CbHVyKGV2ZW50KTtcbiAgICB9XG4gIH07XG4gIGRlbGV0ZSBvdGhlclsnYXJpYS1pbnZhbGlkJ107XG4gIGxldCBkaXNwbGF5O1xuICBsZXQgZGlzcGxheVNpbmdsZTtcbiAgY29uc3QgZGlzcGxheU11bHRpcGxlID0gW107XG4gIGxldCBjb21wdXRlRGlzcGxheSA9IGZhbHNlO1xuICBsZXQgZm91bmRNYXRjaCA9IGZhbHNlO1xuXG4gIC8vIE5vIG5lZWQgdG8gZGlzcGxheSBhbnkgdmFsdWUgaWYgdGhlIGZpZWxkIGlzIGVtcHR5LlxuICBpZiAoaXNGaWxsZWQoe1xuICAgIHZhbHVlXG4gIH0pIHx8IGRpc3BsYXlFbXB0eSkge1xuICAgIGlmIChyZW5kZXJWYWx1ZSkge1xuICAgICAgZGlzcGxheSA9IHJlbmRlclZhbHVlKHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29tcHV0ZURpc3BsYXkgPSB0cnVlO1xuICAgIH1cbiAgfVxuICBjb25zdCBpdGVtcyA9IGNoaWxkcmVuQXJyYXkubWFwKGNoaWxkID0+IHtcbiAgICBpZiAoISAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChpc0ZyYWdtZW50KGNoaWxkKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFtcIk1VSTogVGhlIFNlbGVjdCBjb21wb25lbnQgZG9lc24ndCBhY2NlcHQgYSBGcmFnbWVudCBhcyBhIGNoaWxkLlwiLCAnQ29uc2lkZXIgcHJvdmlkaW5nIGFuIGFycmF5IGluc3RlYWQuJ10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH1cbiAgICBsZXQgc2VsZWN0ZWQ7XG4gICAgaWYgKG11bHRpcGxlKSB7XG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBgTVVJOiBUaGUgXFxgdmFsdWVcXGAgcHJvcCBtdXN0IGJlIGFuIGFycmF5IHdoZW4gdXNpbmcgdGhlIFxcYFNlbGVjdFxcYCBjb21wb25lbnQgd2l0aCBcXGBtdWx0aXBsZVxcYC5gIDogX2Zvcm1hdE11aUVycm9yTWVzc2FnZSgyKSk7XG4gICAgICB9XG4gICAgICBzZWxlY3RlZCA9IHZhbHVlLnNvbWUodiA9PiBhcmVFcXVhbFZhbHVlcyh2LCBjaGlsZC5wcm9wcy52YWx1ZSkpO1xuICAgICAgaWYgKHNlbGVjdGVkICYmIGNvbXB1dGVEaXNwbGF5KSB7XG4gICAgICAgIGRpc3BsYXlNdWx0aXBsZS5wdXNoKGNoaWxkLnByb3BzLmNoaWxkcmVuKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc2VsZWN0ZWQgPSBhcmVFcXVhbFZhbHVlcyh2YWx1ZSwgY2hpbGQucHJvcHMudmFsdWUpO1xuICAgICAgaWYgKHNlbGVjdGVkICYmIGNvbXB1dGVEaXNwbGF5KSB7XG4gICAgICAgIGRpc3BsYXlTaW5nbGUgPSBjaGlsZC5wcm9wcy5jaGlsZHJlbjtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHNlbGVjdGVkKSB7XG4gICAgICBmb3VuZE1hdGNoID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgICdhcmlhLXNlbGVjdGVkJzogc2VsZWN0ZWQgPyAndHJ1ZScgOiAnZmFsc2UnLFxuICAgICAgb25DbGljazogaGFuZGxlSXRlbUNsaWNrKGNoaWxkKSxcbiAgICAgIG9uS2V5VXA6IGV2ZW50ID0+IHtcbiAgICAgICAgaWYgKGV2ZW50LmtleSA9PT0gJyAnKSB7XG4gICAgICAgICAgLy8gb3RoZXJ3aXNlIG91ciBNZW51SXRlbXMgZGlzcGF0Y2hlcyBhIGNsaWNrIGV2ZW50XG4gICAgICAgICAgLy8gaXQncyBub3QgYmVoYXZpb3Igb2YgdGhlIG5hdGl2ZSA8b3B0aW9uPiBhbmQgY2F1c2VzXG4gICAgICAgICAgLy8gdGhlIHNlbGVjdCB0byBjbG9zZSBpbW1lZGlhdGVseSBzaW5jZSB3ZSBvcGVuIG9uIHNwYWNlIGtleWRvd25cbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaGlsZC5wcm9wcy5vbktleVVwKSB7XG4gICAgICAgICAgY2hpbGQucHJvcHMub25LZXlVcChldmVudCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICByb2xlOiAnb3B0aW9uJyxcbiAgICAgIHNlbGVjdGVkLFxuICAgICAgdmFsdWU6IHVuZGVmaW5lZCxcbiAgICAgIC8vIFRoZSB2YWx1ZSBpcyBtb3N0IGxpa2VseSBub3QgYSB2YWxpZCBIVE1MIGF0dHJpYnV0ZS5cbiAgICAgICdkYXRhLXZhbHVlJzogY2hpbGQucHJvcHMudmFsdWUgLy8gSW5zdGVhZCwgd2UgcHJvdmlkZSBpdCBhcyBhIGRhdGEgYXR0cmlidXRlLlxuICAgIH0pO1xuICB9KTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgaWYgKCFmb3VuZE1hdGNoICYmICFtdWx0aXBsZSAmJiB2YWx1ZSAhPT0gJycpIHtcbiAgICAgICAgY29uc3QgdmFsdWVzID0gY2hpbGRyZW5BcnJheS5tYXAoY2hpbGQgPT4gY2hpbGQucHJvcHMudmFsdWUpO1xuICAgICAgICBjb25zb2xlLndhcm4oW2BNVUk6IFlvdSBoYXZlIHByb3ZpZGVkIGFuIG91dC1vZi1yYW5nZSB2YWx1ZSBcXGAke3ZhbHVlfVxcYCBmb3IgdGhlIHNlbGVjdCAke25hbWUgPyBgKG5hbWU9XCIke25hbWV9XCIpIGAgOiAnJ31jb21wb25lbnQuYCwgXCJDb25zaWRlciBwcm92aWRpbmcgYSB2YWx1ZSB0aGF0IG1hdGNoZXMgb25lIG9mIHRoZSBhdmFpbGFibGUgb3B0aW9ucyBvciAnJy5cIiwgYFRoZSBhdmFpbGFibGUgdmFsdWVzIGFyZSAke3ZhbHVlcy5maWx0ZXIoeCA9PiB4ICE9IG51bGwpLm1hcCh4ID0+IGBcXGAke3h9XFxgYCkuam9pbignLCAnKSB8fCAnXCJcIid9LmBdLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9LCBbZm91bmRNYXRjaCwgY2hpbGRyZW5BcnJheSwgbXVsdGlwbGUsIG5hbWUsIHZhbHVlXSk7XG4gIH1cbiAgaWYgKGNvbXB1dGVEaXNwbGF5KSB7XG4gICAgaWYgKG11bHRpcGxlKSB7XG4gICAgICBpZiAoZGlzcGxheU11bHRpcGxlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBkaXNwbGF5ID0gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRpc3BsYXkgPSBkaXNwbGF5TXVsdGlwbGUucmVkdWNlKChvdXRwdXQsIGNoaWxkLCBpbmRleCkgPT4ge1xuICAgICAgICAgIG91dHB1dC5wdXNoKGNoaWxkKTtcbiAgICAgICAgICBpZiAoaW5kZXggPCBkaXNwbGF5TXVsdGlwbGUubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgb3V0cHV0LnB1c2goJywgJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgICAgIH0sIFtdKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZGlzcGxheSA9IGRpc3BsYXlTaW5nbGU7XG4gICAgfVxuICB9XG5cbiAgLy8gQXZvaWQgcGVyZm9ybWluZyBhIGxheW91dCBjb21wdXRhdGlvbiBpbiB0aGUgcmVuZGVyIG1ldGhvZC5cbiAgbGV0IG1lbnVNaW5XaWR0aCA9IG1lbnVNaW5XaWR0aFN0YXRlO1xuICBpZiAoIWF1dG9XaWR0aCAmJiBpc09wZW5Db250cm9sbGVkICYmIGRpc3BsYXlOb2RlKSB7XG4gICAgbWVudU1pbldpZHRoID0gYW5jaG9yRWxlbWVudC5jbGllbnRXaWR0aDtcbiAgfVxuICBsZXQgdGFiSW5kZXg7XG4gIGlmICh0eXBlb2YgdGFiSW5kZXhQcm9wICE9PSAndW5kZWZpbmVkJykge1xuICAgIHRhYkluZGV4ID0gdGFiSW5kZXhQcm9wO1xuICB9IGVsc2Uge1xuICAgIHRhYkluZGV4ID0gZGlzYWJsZWQgPyBudWxsIDogMDtcbiAgfVxuICBjb25zdCBidXR0b25JZCA9IFNlbGVjdERpc3BsYXlQcm9wcy5pZCB8fCAobmFtZSA/IGBtdWktY29tcG9uZW50LXNlbGVjdC0ke25hbWV9YCA6IHVuZGVmaW5lZCk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICB2YXJpYW50LFxuICAgIHZhbHVlLFxuICAgIG9wZW4sXG4gICAgZXJyb3JcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgY29uc3QgcGFwZXJQcm9wcyA9IF9leHRlbmRzKHt9LCBNZW51UHJvcHMuUGFwZXJQcm9wcywgKF9NZW51UHJvcHMkc2xvdFByb3BzID0gTWVudVByb3BzLnNsb3RQcm9wcykgPT0gbnVsbCA/IHZvaWQgMCA6IF9NZW51UHJvcHMkc2xvdFByb3BzLnBhcGVyKTtcbiAgY29uc3QgbGlzdGJveElkID0gdXNlSWQoKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4cyhSZWFjdC5GcmFnbWVudCwge1xuICAgIGNoaWxkcmVuOiBbLyojX19QVVJFX18qL19qc3goU2VsZWN0U2VsZWN0LCBfZXh0ZW5kcyh7XG4gICAgICByZWY6IGhhbmRsZURpc3BsYXlSZWYsXG4gICAgICB0YWJJbmRleDogdGFiSW5kZXgsXG4gICAgICByb2xlOiBcImNvbWJvYm94XCIsXG4gICAgICBcImFyaWEtY29udHJvbHNcIjogbGlzdGJveElkLFxuICAgICAgXCJhcmlhLWRpc2FibGVkXCI6IGRpc2FibGVkID8gJ3RydWUnIDogdW5kZWZpbmVkLFxuICAgICAgXCJhcmlhLWV4cGFuZGVkXCI6IG9wZW4gPyAndHJ1ZScgOiAnZmFsc2UnLFxuICAgICAgXCJhcmlhLWhhc3BvcHVwXCI6IFwibGlzdGJveFwiLFxuICAgICAgXCJhcmlhLWxhYmVsXCI6IGFyaWFMYWJlbCxcbiAgICAgIFwiYXJpYS1sYWJlbGxlZGJ5XCI6IFtsYWJlbElkLCBidXR0b25JZF0uZmlsdGVyKEJvb2xlYW4pLmpvaW4oJyAnKSB8fCB1bmRlZmluZWQsXG4gICAgICBcImFyaWEtZGVzY3JpYmVkYnlcIjogYXJpYURlc2NyaWJlZGJ5LFxuICAgICAgb25LZXlEb3duOiBoYW5kbGVLZXlEb3duLFxuICAgICAgb25Nb3VzZURvd246IGRpc2FibGVkIHx8IHJlYWRPbmx5ID8gbnVsbCA6IGhhbmRsZU1vdXNlRG93bixcbiAgICAgIG9uQmx1cjogaGFuZGxlQmx1cixcbiAgICAgIG9uRm9jdXM6IG9uRm9jdXNcbiAgICB9LCBTZWxlY3REaXNwbGF5UHJvcHMsIHtcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgICBjbGFzc05hbWU6IGNsc3goU2VsZWN0RGlzcGxheVByb3BzLmNsYXNzTmFtZSwgY2xhc3Nlcy5zZWxlY3QsIGNsYXNzTmFtZSlcbiAgICAgIC8vIFRoZSBpZCBpcyByZXF1aXJlZCBmb3IgcHJvcGVyIGExMXlcbiAgICAgICxcbiAgICAgIGlkOiBidXR0b25JZCxcbiAgICAgIGNoaWxkcmVuOiBpc0VtcHR5KGRpc3BsYXkpID8gLy8gbm90cmFuc2xhdGUgbmVlZGVkIHdoaWxlIEdvb2dsZSBUcmFuc2xhdGUgd2lsbCBub3QgZml4IHplcm8td2lkdGggc3BhY2UgaXNzdWVcbiAgICAgIF9zcGFuIHx8IChfc3BhbiA9IC8qI19fUFVSRV9fKi9fanN4KFwic3BhblwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJub3RyYW5zbGF0ZVwiLFxuICAgICAgICBjaGlsZHJlbjogXCJcXHUyMDBCXCJcbiAgICAgIH0pKSA6IGRpc3BsYXlcbiAgICB9KSksIC8qI19fUFVSRV9fKi9fanN4KFNlbGVjdE5hdGl2ZUlucHV0LCBfZXh0ZW5kcyh7XG4gICAgICBcImFyaWEtaW52YWxpZFwiOiBlcnJvcixcbiAgICAgIHZhbHVlOiBBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLmpvaW4oJywnKSA6IHZhbHVlLFxuICAgICAgbmFtZTogbmFtZSxcbiAgICAgIHJlZjogaW5wdXRSZWYsXG4gICAgICBcImFyaWEtaGlkZGVuXCI6IHRydWUsXG4gICAgICBvbkNoYW5nZTogaGFuZGxlQ2hhbmdlLFxuICAgICAgdGFiSW5kZXg6IC0xLFxuICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLm5hdGl2ZUlucHV0LFxuICAgICAgYXV0b0ZvY3VzOiBhdXRvRm9jdXMsXG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlXG4gICAgfSwgb3RoZXIpKSwgLyojX19QVVJFX18qL19qc3goU2VsZWN0SWNvbiwge1xuICAgICAgYXM6IEljb25Db21wb25lbnQsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMuaWNvbixcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGVcbiAgICB9KSwgLyojX19QVVJFX18qL19qc3goTWVudSwgX2V4dGVuZHMoe1xuICAgICAgaWQ6IGBtZW51LSR7bmFtZSB8fCAnJ31gLFxuICAgICAgYW5jaG9yRWw6IGFuY2hvckVsZW1lbnQsXG4gICAgICBvcGVuOiBvcGVuLFxuICAgICAgb25DbG9zZTogaGFuZGxlQ2xvc2UsXG4gICAgICBhbmNob3JPcmlnaW46IHtcbiAgICAgICAgdmVydGljYWw6ICdib3R0b20nLFxuICAgICAgICBob3Jpem9udGFsOiAnY2VudGVyJ1xuICAgICAgfSxcbiAgICAgIHRyYW5zZm9ybU9yaWdpbjoge1xuICAgICAgICB2ZXJ0aWNhbDogJ3RvcCcsXG4gICAgICAgIGhvcml6b250YWw6ICdjZW50ZXInXG4gICAgICB9XG4gICAgfSwgTWVudVByb3BzLCB7XG4gICAgICBNZW51TGlzdFByb3BzOiBfZXh0ZW5kcyh7XG4gICAgICAgICdhcmlhLWxhYmVsbGVkYnknOiBsYWJlbElkLFxuICAgICAgICByb2xlOiAnbGlzdGJveCcsXG4gICAgICAgICdhcmlhLW11bHRpc2VsZWN0YWJsZSc6IG11bHRpcGxlID8gJ3RydWUnIDogdW5kZWZpbmVkLFxuICAgICAgICBkaXNhYmxlTGlzdFdyYXA6IHRydWUsXG4gICAgICAgIGlkOiBsaXN0Ym94SWRcbiAgICAgIH0sIE1lbnVQcm9wcy5NZW51TGlzdFByb3BzKSxcbiAgICAgIHNsb3RQcm9wczogX2V4dGVuZHMoe30sIE1lbnVQcm9wcy5zbG90UHJvcHMsIHtcbiAgICAgICAgcGFwZXI6IF9leHRlbmRzKHt9LCBwYXBlclByb3BzLCB7XG4gICAgICAgICAgc3R5bGU6IF9leHRlbmRzKHtcbiAgICAgICAgICAgIG1pbldpZHRoOiBtZW51TWluV2lkdGhcbiAgICAgICAgICB9LCBwYXBlclByb3BzICE9IG51bGwgPyBwYXBlclByb3BzLnN0eWxlIDogbnVsbClcbiAgICAgICAgfSlcbiAgICAgIH0pLFxuICAgICAgY2hpbGRyZW46IGl0ZW1zXG4gICAgfSkpXVxuICB9KTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gU2VsZWN0SW5wdXQucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgJ2FyaWEtZGVzY3JpYmVkYnknOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgJ2FyaWEtbGFiZWwnOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgYXV0b0ZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHdpZHRoIG9mIHRoZSBwb3BvdmVyIHdpbGwgYXV0b21hdGljYWxseSBiZSBzZXQgYWNjb3JkaW5nIHRvIHRoZSBpdGVtcyBpbnNpZGUgdGhlXG4gICAqIG1lbnUsIG90aGVyd2lzZSBpdCB3aWxsIGJlIGF0IGxlYXN0IHRoZSB3aWR0aCBvZiB0aGUgc2VsZWN0IGlucHV0LlxuICAgKi9cbiAgYXV0b1dpZHRoOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBvcHRpb24gZWxlbWVudHMgdG8gcG9wdWxhdGUgdGhlIHNlbGVjdCB3aXRoLlxuICAgKiBDYW4gYmUgc29tZSBgPE1lbnVJdGVtPmAgZWxlbWVudHMuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogVGhlIENTUyBjbGFzcyBuYW1lIG9mIHRoZSBzZWxlY3QgZWxlbWVudC5cbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpcyB0b2dnbGVkIG9uIG1vdW50LiBVc2Ugd2hlbiB0aGUgY29tcG9uZW50IG9wZW4gc3RhdGUgaXMgbm90IGNvbnRyb2xsZWQuXG4gICAqIFlvdSBjYW4gb25seSB1c2UgaXQgd2hlbiB0aGUgYG5hdGl2ZWAgcHJvcCBpcyBgZmFsc2VgIChkZWZhdWx0KS5cbiAgICovXG4gIGRlZmF1bHRPcGVuOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IHZhbHVlLiBVc2Ugd2hlbiB0aGUgY29tcG9uZW50IGlzIG5vdCBjb250cm9sbGVkLlxuICAgKi9cbiAgZGVmYXVsdFZhbHVlOiBQcm9wVHlwZXMuYW55LFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgc2VsZWN0IGlzIGRpc2FibGVkLlxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgc2VsZWN0ZWQgaXRlbSBpcyBkaXNwbGF5ZWQgZXZlbiBpZiBpdHMgdmFsdWUgaXMgZW1wdHkuXG4gICAqL1xuICBkaXNwbGF5RW1wdHk6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYHNlbGVjdCBpbnB1dGAgd2lsbCBpbmRpY2F0ZSBhbiBlcnJvci5cbiAgICovXG4gIGVycm9yOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBpY29uIHRoYXQgZGlzcGxheXMgdGhlIGFycm93LlxuICAgKi9cbiAgSWNvbkNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLmlzUmVxdWlyZWQsXG4gIC8qKlxuICAgKiBJbXBlcmF0aXZlIGhhbmRsZSBpbXBsZW1lbnRpbmcgYHsgdmFsdWU6IFQsIG5vZGU6IEhUTUxFbGVtZW50LCBmb2N1cygpOiB2b2lkIH1gXG4gICAqIEVxdWl2YWxlbnQgdG8gYHJlZmBcbiAgICovXG4gIGlucHV0UmVmOiByZWZUeXBlLFxuICAvKipcbiAgICogVGhlIElEIG9mIGFuIGVsZW1lbnQgdGhhdCBhY3RzIGFzIGFuIGFkZGl0aW9uYWwgbGFiZWwuIFRoZSBTZWxlY3Qgd2lsbFxuICAgKiBiZSBsYWJlbGxlZCBieSB0aGUgYWRkaXRpb25hbCBsYWJlbCBhbmQgdGhlIHNlbGVjdGVkIHZhbHVlLlxuICAgKi9cbiAgbGFiZWxJZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIFtgTWVudWBdKC9tYXRlcmlhbC11aS9hcGkvbWVudS8pIGVsZW1lbnQuXG4gICAqL1xuICBNZW51UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGB2YWx1ZWAgbXVzdCBiZSBhbiBhcnJheSBhbmQgdGhlIG1lbnUgd2lsbCBzdXBwb3J0IG11bHRpcGxlIHNlbGVjdGlvbnMuXG4gICAqL1xuICBtdWx0aXBsZTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBOYW1lIGF0dHJpYnV0ZSBvZiB0aGUgYHNlbGVjdGAgb3IgaGlkZGVuIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkJsdXI6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiBhIG1lbnUgaXRlbSBpcyBzZWxlY3RlZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBZb3UgY2FuIHB1bGwgb3V0IHRoZSBuZXcgdmFsdWUgYnkgYWNjZXNzaW5nIGBldmVudC50YXJnZXQudmFsdWVgIChhbnkpLlxuICAgKiBAcGFyYW0ge29iamVjdH0gW2NoaWxkXSBUaGUgcmVhY3QgZWxlbWVudCB0aGF0IHdhcyBzZWxlY3RlZC5cbiAgICovXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCByZXF1ZXN0cyB0byBiZSBjbG9zZWQuXG4gICAqIFVzZSBpbiBjb250cm9sbGVkIG1vZGUgKHNlZSBvcGVuKS5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKi9cbiAgb25DbG9zZTogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkZvY3VzOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCByZXF1ZXN0cyB0byBiZSBvcGVuZWQuXG4gICAqIFVzZSBpbiBjb250cm9sbGVkIG1vZGUgKHNlZSBvcGVuKS5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKi9cbiAgb25PcGVuOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpcyBzaG93bi5cbiAgICovXG4gIG9wZW46IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgcmVhZE9ubHk6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogUmVuZGVyIHRoZSBzZWxlY3RlZCB2YWx1ZS5cbiAgICpcbiAgICogQHBhcmFtIHthbnl9IHZhbHVlIFRoZSBgdmFsdWVgIHByb3ZpZGVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIEByZXR1cm5zIHtSZWFjdE5vZGV9XG4gICAqL1xuICByZW5kZXJWYWx1ZTogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBjbGlja2FibGUgZGl2IGVsZW1lbnQuXG4gICAqL1xuICBTZWxlY3REaXNwbGF5UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICB0YWJJbmRleDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgdHlwZTogUHJvcFR5cGVzLmFueSxcbiAgLyoqXG4gICAqIFRoZSBpbnB1dCB2YWx1ZS5cbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMuYW55LFxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnc3RhbmRhcmQnLCAnb3V0bGluZWQnLCAnZmlsbGVkJ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgU2VsZWN0SW5wdXQ7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYXV0b1dpZHRoXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiZGVmYXVsdE9wZW5cIiwgXCJkaXNwbGF5RW1wdHlcIiwgXCJJY29uQ29tcG9uZW50XCIsIFwiaWRcIiwgXCJpbnB1dFwiLCBcImlucHV0UHJvcHNcIiwgXCJsYWJlbFwiLCBcImxhYmVsSWRcIiwgXCJNZW51UHJvcHNcIiwgXCJtdWx0aXBsZVwiLCBcIm5hdGl2ZVwiLCBcIm9uQ2xvc2VcIiwgXCJvbk9wZW5cIiwgXCJvcGVuXCIsIFwicmVuZGVyVmFsdWVcIiwgXCJTZWxlY3REaXNwbGF5UHJvcHNcIiwgXCJ2YXJpYW50XCJdLFxuICBfZXhjbHVkZWQyID0gW1wicm9vdFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBkZWVwbWVyZ2UgZnJvbSAnQG11aS91dGlscy9kZWVwbWVyZ2UnO1xuaW1wb3J0IFNlbGVjdElucHV0IGZyb20gJy4vU2VsZWN0SW5wdXQnO1xuaW1wb3J0IGZvcm1Db250cm9sU3RhdGUgZnJvbSAnLi4vRm9ybUNvbnRyb2wvZm9ybUNvbnRyb2xTdGF0ZSc7XG5pbXBvcnQgdXNlRm9ybUNvbnRyb2wgZnJvbSAnLi4vRm9ybUNvbnRyb2wvdXNlRm9ybUNvbnRyb2wnO1xuaW1wb3J0IEFycm93RHJvcERvd25JY29uIGZyb20gJy4uL2ludGVybmFsL3N2Zy1pY29ucy9BcnJvd0Ryb3BEb3duJztcbmltcG9ydCBJbnB1dCBmcm9tICcuLi9JbnB1dCc7XG5pbXBvcnQgTmF0aXZlU2VsZWN0SW5wdXQgZnJvbSAnLi4vTmF0aXZlU2VsZWN0L05hdGl2ZVNlbGVjdElucHV0JztcbmltcG9ydCBGaWxsZWRJbnB1dCBmcm9tICcuLi9GaWxsZWRJbnB1dCc7XG5pbXBvcnQgT3V0bGluZWRJbnB1dCBmcm9tICcuLi9PdXRsaW5lZElucHV0JztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCB1c2VGb3JrUmVmIGZyb20gJy4uL3V0aWxzL3VzZUZvcmtSZWYnO1xuaW1wb3J0IHN0eWxlZCwgeyByb290U2hvdWxkRm9yd2FyZFByb3AgfSBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3Nlc1xuICB9ID0gb3duZXJTdGF0ZTtcbiAgcmV0dXJuIGNsYXNzZXM7XG59O1xuY29uc3Qgc3R5bGVkUm9vdENvbmZpZyA9IHtcbiAgbmFtZTogJ011aVNlbGVjdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLnJvb3QsXG4gIHNob3VsZEZvcndhcmRQcm9wOiBwcm9wID0+IHJvb3RTaG91bGRGb3J3YXJkUHJvcChwcm9wKSAmJiBwcm9wICE9PSAndmFyaWFudCcsXG4gIHNsb3Q6ICdSb290J1xufTtcbmNvbnN0IFN0eWxlZElucHV0ID0gc3R5bGVkKElucHV0LCBzdHlsZWRSb290Q29uZmlnKSgnJyk7XG5jb25zdCBTdHlsZWRPdXRsaW5lZElucHV0ID0gc3R5bGVkKE91dGxpbmVkSW5wdXQsIHN0eWxlZFJvb3RDb25maWcpKCcnKTtcbmNvbnN0IFN0eWxlZEZpbGxlZElucHV0ID0gc3R5bGVkKEZpbGxlZElucHV0LCBzdHlsZWRSb290Q29uZmlnKSgnJyk7XG5jb25zdCBTZWxlY3QgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBTZWxlY3QoaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgbmFtZTogJ011aVNlbGVjdCcsXG4gICAgcHJvcHM6IGluUHJvcHNcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGF1dG9XaWR0aCA9IGZhbHNlLFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzOiBjbGFzc2VzUHJvcCA9IHt9LFxuICAgICAgY2xhc3NOYW1lLFxuICAgICAgZGVmYXVsdE9wZW4gPSBmYWxzZSxcbiAgICAgIGRpc3BsYXlFbXB0eSA9IGZhbHNlLFxuICAgICAgSWNvbkNvbXBvbmVudCA9IEFycm93RHJvcERvd25JY29uLFxuICAgICAgaWQsXG4gICAgICBpbnB1dCxcbiAgICAgIGlucHV0UHJvcHMsXG4gICAgICBsYWJlbCxcbiAgICAgIGxhYmVsSWQsXG4gICAgICBNZW51UHJvcHMsXG4gICAgICBtdWx0aXBsZSA9IGZhbHNlLFxuICAgICAgbmF0aXZlID0gZmFsc2UsXG4gICAgICBvbkNsb3NlLFxuICAgICAgb25PcGVuLFxuICAgICAgb3BlbixcbiAgICAgIHJlbmRlclZhbHVlLFxuICAgICAgU2VsZWN0RGlzcGxheVByb3BzLFxuICAgICAgdmFyaWFudDogdmFyaWFudFByb3AgPSAnb3V0bGluZWQnXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IGlucHV0Q29tcG9uZW50ID0gbmF0aXZlID8gTmF0aXZlU2VsZWN0SW5wdXQgOiBTZWxlY3RJbnB1dDtcbiAgY29uc3QgbXVpRm9ybUNvbnRyb2wgPSB1c2VGb3JtQ29udHJvbCgpO1xuICBjb25zdCBmY3MgPSBmb3JtQ29udHJvbFN0YXRlKHtcbiAgICBwcm9wcyxcbiAgICBtdWlGb3JtQ29udHJvbCxcbiAgICBzdGF0ZXM6IFsndmFyaWFudCcsICdlcnJvciddXG4gIH0pO1xuICBjb25zdCB2YXJpYW50ID0gZmNzLnZhcmlhbnQgfHwgdmFyaWFudFByb3A7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICB2YXJpYW50LFxuICAgIGNsYXNzZXM6IGNsYXNzZXNQcm9wXG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIGNvbnN0IHJlc3RPZkNsYXNzZXMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShjbGFzc2VzLCBfZXhjbHVkZWQyKTtcbiAgY29uc3QgSW5wdXRDb21wb25lbnQgPSBpbnB1dCB8fCB7XG4gICAgc3RhbmRhcmQ6IC8qI19fUFVSRV9fKi9fanN4KFN0eWxlZElucHV0LCB7XG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlXG4gICAgfSksXG4gICAgb3V0bGluZWQ6IC8qI19fUFVSRV9fKi9fanN4KFN0eWxlZE91dGxpbmVkSW5wdXQsIHtcbiAgICAgIGxhYmVsOiBsYWJlbCxcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGVcbiAgICB9KSxcbiAgICBmaWxsZWQ6IC8qI19fUFVSRV9fKi9fanN4KFN0eWxlZEZpbGxlZElucHV0LCB7XG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlXG4gICAgfSlcbiAgfVt2YXJpYW50XTtcbiAgY29uc3QgaW5wdXRDb21wb25lbnRSZWYgPSB1c2VGb3JrUmVmKHJlZiwgSW5wdXRDb21wb25lbnQucmVmKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFJlYWN0LkZyYWdtZW50LCB7XG4gICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoSW5wdXRDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICAgIC8vIE1vc3Qgb2YgdGhlIGxvZ2ljIGlzIGltcGxlbWVudGVkIGluIGBTZWxlY3RJbnB1dGAuXG4gICAgICAvLyBUaGUgYFNlbGVjdGAgY29tcG9uZW50IGlzIGEgc2ltcGxlIEFQSSB3cmFwcGVyIHRvIGV4cG9zZSBzb21ldGhpbmcgYmV0dGVyIHRvIHBsYXkgd2l0aC5cbiAgICAgIGlucHV0Q29tcG9uZW50LFxuICAgICAgaW5wdXRQcm9wczogX2V4dGVuZHMoe1xuICAgICAgICBjaGlsZHJlbixcbiAgICAgICAgZXJyb3I6IGZjcy5lcnJvcixcbiAgICAgICAgSWNvbkNvbXBvbmVudCxcbiAgICAgICAgdmFyaWFudCxcbiAgICAgICAgdHlwZTogdW5kZWZpbmVkLFxuICAgICAgICAvLyBXZSByZW5kZXIgYSBzZWxlY3QuIFdlIGNhbiBpZ25vcmUgdGhlIHR5cGUgcHJvdmlkZWQgYnkgdGhlIGBJbnB1dGAuXG4gICAgICAgIG11bHRpcGxlXG4gICAgICB9LCBuYXRpdmUgPyB7XG4gICAgICAgIGlkXG4gICAgICB9IDoge1xuICAgICAgICBhdXRvV2lkdGgsXG4gICAgICAgIGRlZmF1bHRPcGVuLFxuICAgICAgICBkaXNwbGF5RW1wdHksXG4gICAgICAgIGxhYmVsSWQsXG4gICAgICAgIE1lbnVQcm9wcyxcbiAgICAgICAgb25DbG9zZSxcbiAgICAgICAgb25PcGVuLFxuICAgICAgICBvcGVuLFxuICAgICAgICByZW5kZXJWYWx1ZSxcbiAgICAgICAgU2VsZWN0RGlzcGxheVByb3BzOiBfZXh0ZW5kcyh7XG4gICAgICAgICAgaWRcbiAgICAgICAgfSwgU2VsZWN0RGlzcGxheVByb3BzKVxuICAgICAgfSwgaW5wdXRQcm9wcywge1xuICAgICAgICBjbGFzc2VzOiBpbnB1dFByb3BzID8gZGVlcG1lcmdlKHJlc3RPZkNsYXNzZXMsIGlucHV0UHJvcHMuY2xhc3NlcykgOiByZXN0T2ZDbGFzc2VzXG4gICAgICB9LCBpbnB1dCA/IGlucHV0LnByb3BzLmlucHV0UHJvcHMgOiB7fSlcbiAgICB9LCAobXVsdGlwbGUgJiYgbmF0aXZlIHx8IGRpc3BsYXlFbXB0eSkgJiYgdmFyaWFudCA9PT0gJ291dGxpbmVkJyA/IHtcbiAgICAgIG5vdGNoZWQ6IHRydWVcbiAgICB9IDoge30sIHtcbiAgICAgIHJlZjogaW5wdXRDb21wb25lbnRSZWYsXG4gICAgICBjbGFzc05hbWU6IGNsc3goSW5wdXRDb21wb25lbnQucHJvcHMuY2xhc3NOYW1lLCBjbGFzc05hbWUsIGNsYXNzZXMucm9vdClcbiAgICB9LCAhaW5wdXQgJiYge1xuICAgICAgdmFyaWFudFxuICAgIH0sIG90aGVyKSlcbiAgfSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFNlbGVjdC5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSB3aWR0aCBvZiB0aGUgcG9wb3ZlciB3aWxsIGF1dG9tYXRpY2FsbHkgYmUgc2V0IGFjY29yZGluZyB0byB0aGUgaXRlbXMgaW5zaWRlIHRoZVxuICAgKiBtZW51LCBvdGhlcndpc2UgaXQgd2lsbCBiZSBhdCBsZWFzdCB0aGUgd2lkdGggb2YgdGhlIHNlbGVjdCBpbnB1dC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGF1dG9XaWR0aDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgb3B0aW9uIGVsZW1lbnRzIHRvIHBvcHVsYXRlIHRoZSBzZWxlY3Qgd2l0aC5cbiAgICogQ2FuIGJlIHNvbWUgYE1lbnVJdGVtYCB3aGVuIGBuYXRpdmVgIGlzIGZhbHNlIGFuZCBgb3B0aW9uYCB3aGVuIGBuYXRpdmVgIGlzIHRydWUuXG4gICAqXG4gICAqIOKaoO+4j1RoZSBgTWVudUl0ZW1gIGVsZW1lbnRzICoqbXVzdCoqIGJlIGRpcmVjdCBkZXNjZW5kYW50cyB3aGVuIGBuYXRpdmVgIGlzIGZhbHNlLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpcyBpbml0aWFsbHkgb3Blbi4gVXNlIHdoZW4gdGhlIGNvbXBvbmVudCBvcGVuIHN0YXRlIGlzIG5vdCBjb250cm9sbGVkIChpLmUuIHRoZSBgb3BlbmAgcHJvcCBpcyBub3QgZGVmaW5lZCkuXG4gICAqIFlvdSBjYW4gb25seSB1c2UgaXQgd2hlbiB0aGUgYG5hdGl2ZWAgcHJvcCBpcyBgZmFsc2VgIChkZWZhdWx0KS5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRlZmF1bHRPcGVuOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IHZhbHVlLiBVc2Ugd2hlbiB0aGUgY29tcG9uZW50IGlzIG5vdCBjb250cm9sbGVkLlxuICAgKi9cbiAgZGVmYXVsdFZhbHVlOiBQcm9wVHlwZXMuYW55LFxuICAvKipcbiAgICogSWYgYHRydWVgLCBhIHZhbHVlIGlzIGRpc3BsYXllZCBldmVuIGlmIG5vIGl0ZW1zIGFyZSBzZWxlY3RlZC5cbiAgICpcbiAgICogSW4gb3JkZXIgdG8gZGlzcGxheSBhIG1lYW5pbmdmdWwgdmFsdWUsIGEgZnVuY3Rpb24gY2FuIGJlIHBhc3NlZCB0byB0aGUgYHJlbmRlclZhbHVlYCBwcm9wIHdoaWNoXG4gICAqIHJldHVybnMgdGhlIHZhbHVlIHRvIGJlIGRpc3BsYXllZCB3aGVuIG5vIGl0ZW1zIGFyZSBzZWxlY3RlZC5cbiAgICpcbiAgICog4pqg77iPIFdoZW4gdXNpbmcgdGhpcyBwcm9wLCBtYWtlIHN1cmUgdGhlIGxhYmVsIGRvZXNuJ3Qgb3ZlcmxhcCB3aXRoIHRoZSBlbXB0eSBkaXNwbGF5ZWQgdmFsdWUuXG4gICAqIFRoZSBsYWJlbCBzaG91bGQgZWl0aGVyIGJlIGhpZGRlbiBvciBmb3JjZWQgdG8gYSBzaHJ1bmsgc3RhdGUuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNwbGF5RW1wdHk6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIGljb24gdGhhdCBkaXNwbGF5cyB0aGUgYXJyb3cuXG4gICAqIEBkZWZhdWx0IEFycm93RHJvcERvd25JY29uXG4gICAqL1xuICBJY29uQ29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBUaGUgYGlkYCBvZiB0aGUgd3JhcHBlciBlbGVtZW50IG9yIHRoZSBgc2VsZWN0YCBlbGVtZW50IHdoZW4gYG5hdGl2ZWAuXG4gICAqL1xuICBpZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIEFuIGBJbnB1dGAgZWxlbWVudDsgZG9lcyBub3QgaGF2ZSB0byBiZSBhIG1hdGVyaWFsLXVpIHNwZWNpZmljIGBJbnB1dGAuXG4gICAqL1xuICBpbnB1dDogUHJvcFR5cGVzLmVsZW1lbnQsXG4gIC8qKlxuICAgKiBbQXR0cmlidXRlc10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2lucHV0I0F0dHJpYnV0ZXMpIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICogV2hlbiBgbmF0aXZlYCBpcyBgdHJ1ZWAsIHRoZSBhdHRyaWJ1dGVzIGFyZSBhcHBsaWVkIG9uIHRoZSBgc2VsZWN0YCBlbGVtZW50LlxuICAgKi9cbiAgaW5wdXRQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIFNlZSBbT3V0bGluZWRJbnB1dCNsYWJlbF0oL21hdGVyaWFsLXVpL2FwaS9vdXRsaW5lZC1pbnB1dC8jcHJvcHMpXG4gICAqL1xuICBsYWJlbDogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBUaGUgSUQgb2YgYW4gZWxlbWVudCB0aGF0IGFjdHMgYXMgYW4gYWRkaXRpb25hbCBsYWJlbC4gVGhlIFNlbGVjdCB3aWxsXG4gICAqIGJlIGxhYmVsbGVkIGJ5IHRoZSBhZGRpdGlvbmFsIGxhYmVsIGFuZCB0aGUgc2VsZWN0ZWQgdmFsdWUuXG4gICAqL1xuICBsYWJlbElkOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgW2BNZW51YF0oL21hdGVyaWFsLXVpL2FwaS9tZW51LykgZWxlbWVudC5cbiAgICovXG4gIE1lbnVQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgYHZhbHVlYCBtdXN0IGJlIGFuIGFycmF5IGFuZCB0aGUgbWVudSB3aWxsIHN1cHBvcnQgbXVsdGlwbGUgc2VsZWN0aW9ucy5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIG11bHRpcGxlOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCB1c2VzIGEgbmF0aXZlIGBzZWxlY3RgIGVsZW1lbnQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBuYXRpdmU6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiBhIG1lbnUgaXRlbSBpcyBzZWxlY3RlZC5cbiAgICpcbiAgICogQHBhcmFtIHtTZWxlY3RDaGFuZ2VFdmVudDxWYWx1ZT59IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBZb3UgY2FuIHB1bGwgb3V0IHRoZSBuZXcgdmFsdWUgYnkgYWNjZXNzaW5nIGBldmVudC50YXJnZXQudmFsdWVgIChhbnkpLlxuICAgKiAqKldhcm5pbmcqKjogVGhpcyBpcyBhIGdlbmVyaWMgZXZlbnQsIG5vdCBhIGNoYW5nZSBldmVudCwgdW5sZXNzIHRoZSBjaGFuZ2UgZXZlbnQgaXMgY2F1c2VkIGJ5IGJyb3dzZXIgYXV0b2ZpbGwuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbY2hpbGRdIFRoZSByZWFjdCBlbGVtZW50IHRoYXQgd2FzIHNlbGVjdGVkIHdoZW4gYG5hdGl2ZWAgaXMgYGZhbHNlYCAoZGVmYXVsdCkuXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgcmVxdWVzdHMgdG8gYmUgY2xvc2VkLlxuICAgKiBVc2UgaXQgaW4gZWl0aGVyIGNvbnRyb2xsZWQgKHNlZSB0aGUgYG9wZW5gIHByb3ApLCBvciB1bmNvbnRyb2xsZWQgbW9kZSAodG8gZGV0ZWN0IHdoZW4gdGhlIFNlbGVjdCBjb2xsYXBzZXMpLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqL1xuICBvbkNsb3NlOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCByZXF1ZXN0cyB0byBiZSBvcGVuZWQuXG4gICAqIFVzZSBpdCBpbiBlaXRoZXIgY29udHJvbGxlZCAoc2VlIHRoZSBgb3BlbmAgcHJvcCksIG9yIHVuY29udHJvbGxlZCBtb2RlICh0byBkZXRlY3Qgd2hlbiB0aGUgU2VsZWN0IGV4cGFuZHMpLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqL1xuICBvbk9wZW46IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIHNob3duLlxuICAgKiBZb3UgY2FuIG9ubHkgdXNlIGl0IHdoZW4gdGhlIGBuYXRpdmVgIHByb3AgaXMgYGZhbHNlYCAoZGVmYXVsdCkuXG4gICAqL1xuICBvcGVuOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFJlbmRlciB0aGUgc2VsZWN0ZWQgdmFsdWUuXG4gICAqIFlvdSBjYW4gb25seSB1c2UgaXQgd2hlbiB0aGUgYG5hdGl2ZWAgcHJvcCBpcyBgZmFsc2VgIChkZWZhdWx0KS5cbiAgICpcbiAgICogQHBhcmFtIHthbnl9IHZhbHVlIFRoZSBgdmFsdWVgIHByb3ZpZGVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIEByZXR1cm5zIHtSZWFjdE5vZGV9XG4gICAqL1xuICByZW5kZXJWYWx1ZTogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBjbGlja2FibGUgZGl2IGVsZW1lbnQuXG4gICAqL1xuICBTZWxlY3REaXNwbGF5UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIC8qKlxuICAgKiBUaGUgYGlucHV0YCB2YWx1ZS4gUHJvdmlkaW5nIGFuIGVtcHR5IHN0cmluZyB3aWxsIHNlbGVjdCBubyBvcHRpb25zLlxuICAgKiBTZXQgdG8gYW4gZW1wdHkgc3RyaW5nIGAnJ2AgaWYgeW91IGRvbid0IHdhbnQgYW55IG9mIHRoZSBhdmFpbGFibGUgb3B0aW9ucyB0byBiZSBzZWxlY3RlZC5cbiAgICpcbiAgICogSWYgdGhlIHZhbHVlIGlzIGFuIG9iamVjdCBpdCBtdXN0IGhhdmUgcmVmZXJlbmNlIGVxdWFsaXR5IHdpdGggdGhlIG9wdGlvbiBpbiBvcmRlciB0byBiZSBzZWxlY3RlZC5cbiAgICogSWYgdGhlIHZhbHVlIGlzIG5vdCBhbiBvYmplY3QsIHRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gbXVzdCBtYXRjaCB3aXRoIHRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIG9wdGlvbiBpbiBvcmRlciB0byBiZSBzZWxlY3RlZC5cbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWycnXSksIFByb3BUeXBlcy5hbnldKSxcbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS5cbiAgICogQGRlZmF1bHQgJ291dGxpbmVkJ1xuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnZmlsbGVkJywgJ291dGxpbmVkJywgJ3N0YW5kYXJkJ10pXG59IDogdm9pZCAwO1xuU2VsZWN0Lm11aU5hbWUgPSAnU2VsZWN0JztcbmV4cG9ydCBkZWZhdWx0IFNlbGVjdDsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFRvb2x0aXBVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aVRvb2x0aXAnLCBzbG90KTtcbn1cbmNvbnN0IHRvb2x0aXBDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpVG9vbHRpcCcsIFsncG9wcGVyJywgJ3BvcHBlckludGVyYWN0aXZlJywgJ3BvcHBlckFycm93JywgJ3BvcHBlckNsb3NlJywgJ3Rvb2x0aXAnLCAndG9vbHRpcEFycm93JywgJ3RvdWNoJywgJ3Rvb2x0aXBQbGFjZW1lbnRMZWZ0JywgJ3Rvb2x0aXBQbGFjZW1lbnRSaWdodCcsICd0b29sdGlwUGxhY2VtZW50VG9wJywgJ3Rvb2x0aXBQbGFjZW1lbnRCb3R0b20nLCAnYXJyb3cnXSk7XG5leHBvcnQgZGVmYXVsdCB0b29sdGlwQ2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJhcnJvd1wiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNvbXBvbmVudHNcIiwgXCJjb21wb25lbnRzUHJvcHNcIiwgXCJkZXNjcmliZUNoaWxkXCIsIFwiZGlzYWJsZUZvY3VzTGlzdGVuZXJcIiwgXCJkaXNhYmxlSG92ZXJMaXN0ZW5lclwiLCBcImRpc2FibGVJbnRlcmFjdGl2ZVwiLCBcImRpc2FibGVUb3VjaExpc3RlbmVyXCIsIFwiZW50ZXJEZWxheVwiLCBcImVudGVyTmV4dERlbGF5XCIsIFwiZW50ZXJUb3VjaERlbGF5XCIsIFwiZm9sbG93Q3Vyc29yXCIsIFwiaWRcIiwgXCJsZWF2ZURlbGF5XCIsIFwibGVhdmVUb3VjaERlbGF5XCIsIFwib25DbG9zZVwiLCBcIm9uT3BlblwiLCBcIm9wZW5cIiwgXCJwbGFjZW1lbnRcIiwgXCJQb3BwZXJDb21wb25lbnRcIiwgXCJQb3BwZXJQcm9wc1wiLCBcInNsb3RQcm9wc1wiLCBcInNsb3RzXCIsIFwidGl0bGVcIiwgXCJUcmFuc2l0aW9uQ29tcG9uZW50XCIsIFwiVHJhbnNpdGlvblByb3BzXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHVzZVRpbWVvdXQsIHsgVGltZW91dCB9IGZyb20gJ0BtdWkvdXRpbHMvdXNlVGltZW91dCc7XG5pbXBvcnQgZWxlbWVudEFjY2VwdGluZ1JlZiBmcm9tICdAbXVpL3V0aWxzL2VsZW1lbnRBY2NlcHRpbmdSZWYnO1xuaW1wb3J0IHsgYXBwZW5kT3duZXJTdGF0ZSB9IGZyb20gJ0BtdWkvYmFzZS91dGlscyc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgeyBhbHBoYSB9IGZyb20gJ0BtdWkvc3lzdGVtL2NvbG9yTWFuaXB1bGF0b3InO1xuaW1wb3J0IHsgdXNlUnRsIH0gZnJvbSAnQG11aS9zeXN0ZW0vUnRsUHJvdmlkZXInO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB1c2VUaGVtZSBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWUnO1xuaW1wb3J0IHVzZVRoZW1lUHJvcHMgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lUHJvcHMnO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5pbXBvcnQgR3JvdyBmcm9tICcuLi9Hcm93JztcbmltcG9ydCBQb3BwZXIgZnJvbSAnLi4vUG9wcGVyJztcbmltcG9ydCB1c2VFdmVudENhbGxiYWNrIGZyb20gJy4uL3V0aWxzL3VzZUV2ZW50Q2FsbGJhY2snO1xuaW1wb3J0IHVzZUZvcmtSZWYgZnJvbSAnLi4vdXRpbHMvdXNlRm9ya1JlZic7XG5pbXBvcnQgdXNlSWQgZnJvbSAnLi4vdXRpbHMvdXNlSWQnO1xuaW1wb3J0IHVzZUlzRm9jdXNWaXNpYmxlIGZyb20gJy4uL3V0aWxzL3VzZUlzRm9jdXNWaXNpYmxlJztcbmltcG9ydCB1c2VDb250cm9sbGVkIGZyb20gJy4uL3V0aWxzL3VzZUNvbnRyb2xsZWQnO1xuaW1wb3J0IHRvb2x0aXBDbGFzc2VzLCB7IGdldFRvb2x0aXBVdGlsaXR5Q2xhc3MgfSBmcm9tICcuL3Rvb2x0aXBDbGFzc2VzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5mdW5jdGlvbiByb3VuZCh2YWx1ZSkge1xuICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSAqIDFlNSkgLyAxZTU7XG59XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3NlcyxcbiAgICBkaXNhYmxlSW50ZXJhY3RpdmUsXG4gICAgYXJyb3csXG4gICAgdG91Y2gsXG4gICAgcGxhY2VtZW50XG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICBwb3BwZXI6IFsncG9wcGVyJywgIWRpc2FibGVJbnRlcmFjdGl2ZSAmJiAncG9wcGVySW50ZXJhY3RpdmUnLCBhcnJvdyAmJiAncG9wcGVyQXJyb3cnXSxcbiAgICB0b29sdGlwOiBbJ3Rvb2x0aXAnLCBhcnJvdyAmJiAndG9vbHRpcEFycm93JywgdG91Y2ggJiYgJ3RvdWNoJywgYHRvb2x0aXBQbGFjZW1lbnQke2NhcGl0YWxpemUocGxhY2VtZW50LnNwbGl0KCctJylbMF0pfWBdLFxuICAgIGFycm93OiBbJ2Fycm93J11cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRUb29sdGlwVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBUb29sdGlwUG9wcGVyID0gc3R5bGVkKFBvcHBlciwge1xuICBuYW1lOiAnTXVpVG9vbHRpcCcsXG4gIHNsb3Q6ICdQb3BwZXInLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLnBvcHBlciwgIW93bmVyU3RhdGUuZGlzYWJsZUludGVyYWN0aXZlICYmIHN0eWxlcy5wb3BwZXJJbnRlcmFjdGl2ZSwgb3duZXJTdGF0ZS5hcnJvdyAmJiBzdHlsZXMucG9wcGVyQXJyb3csICFvd25lclN0YXRlLm9wZW4gJiYgc3R5bGVzLnBvcHBlckNsb3NlXTtcbiAgfVxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGUsXG4gIG9wZW5cbn0pID0+IF9leHRlbmRzKHtcbiAgekluZGV4OiAodGhlbWUudmFycyB8fCB0aGVtZSkuekluZGV4LnRvb2x0aXAsXG4gIHBvaW50ZXJFdmVudHM6ICdub25lJ1xufSwgIW93bmVyU3RhdGUuZGlzYWJsZUludGVyYWN0aXZlICYmIHtcbiAgcG9pbnRlckV2ZW50czogJ2F1dG8nXG59LCAhb3BlbiAmJiB7XG4gIHBvaW50ZXJFdmVudHM6ICdub25lJ1xufSwgb3duZXJTdGF0ZS5hcnJvdyAmJiB7XG4gIFtgJltkYXRhLXBvcHBlci1wbGFjZW1lbnQqPVwiYm90dG9tXCJdIC4ke3Rvb2x0aXBDbGFzc2VzLmFycm93fWBdOiB7XG4gICAgdG9wOiAwLFxuICAgIG1hcmdpblRvcDogJy0wLjcxZW0nLFxuICAgICcmOjpiZWZvcmUnOiB7XG4gICAgICB0cmFuc2Zvcm1PcmlnaW46ICcwIDEwMCUnXG4gICAgfVxuICB9LFxuICBbYCZbZGF0YS1wb3BwZXItcGxhY2VtZW50Kj1cInRvcFwiXSAuJHt0b29sdGlwQ2xhc3Nlcy5hcnJvd31gXToge1xuICAgIGJvdHRvbTogMCxcbiAgICBtYXJnaW5Cb3R0b206ICctMC43MWVtJyxcbiAgICAnJjo6YmVmb3JlJzoge1xuICAgICAgdHJhbnNmb3JtT3JpZ2luOiAnMTAwJSAwJ1xuICAgIH1cbiAgfSxcbiAgW2AmW2RhdGEtcG9wcGVyLXBsYWNlbWVudCo9XCJyaWdodFwiXSAuJHt0b29sdGlwQ2xhc3Nlcy5hcnJvd31gXTogX2V4dGVuZHMoe30sICFvd25lclN0YXRlLmlzUnRsID8ge1xuICAgIGxlZnQ6IDAsXG4gICAgbWFyZ2luTGVmdDogJy0wLjcxZW0nXG4gIH0gOiB7XG4gICAgcmlnaHQ6IDAsXG4gICAgbWFyZ2luUmlnaHQ6ICctMC43MWVtJ1xuICB9LCB7XG4gICAgaGVpZ2h0OiAnMWVtJyxcbiAgICB3aWR0aDogJzAuNzFlbScsXG4gICAgJyY6OmJlZm9yZSc6IHtcbiAgICAgIHRyYW5zZm9ybU9yaWdpbjogJzEwMCUgMTAwJSdcbiAgICB9XG4gIH0pLFxuICBbYCZbZGF0YS1wb3BwZXItcGxhY2VtZW50Kj1cImxlZnRcIl0gLiR7dG9vbHRpcENsYXNzZXMuYXJyb3d9YF06IF9leHRlbmRzKHt9LCAhb3duZXJTdGF0ZS5pc1J0bCA/IHtcbiAgICByaWdodDogMCxcbiAgICBtYXJnaW5SaWdodDogJy0wLjcxZW0nXG4gIH0gOiB7XG4gICAgbGVmdDogMCxcbiAgICBtYXJnaW5MZWZ0OiAnLTAuNzFlbSdcbiAgfSwge1xuICAgIGhlaWdodDogJzFlbScsXG4gICAgd2lkdGg6ICcwLjcxZW0nLFxuICAgICcmOjpiZWZvcmUnOiB7XG4gICAgICB0cmFuc2Zvcm1PcmlnaW46ICcwIDAnXG4gICAgfVxuICB9KVxufSkpO1xuY29uc3QgVG9vbHRpcFRvb2x0aXAgPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aVRvb2x0aXAnLFxuICBzbG90OiAnVG9vbHRpcCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMudG9vbHRpcCwgb3duZXJTdGF0ZS50b3VjaCAmJiBzdHlsZXMudG91Y2gsIG93bmVyU3RhdGUuYXJyb3cgJiYgc3R5bGVzLnRvb2x0aXBBcnJvdywgc3R5bGVzW2B0b29sdGlwUGxhY2VtZW50JHtjYXBpdGFsaXplKG93bmVyU3RhdGUucGxhY2VtZW50LnNwbGl0KCctJylbMF0pfWBdXTtcbiAgfVxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHtcbiAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS52YXJzID8gdGhlbWUudmFycy5wYWxldHRlLlRvb2x0aXAuYmcgOiBhbHBoYSh0aGVtZS5wYWxldHRlLmdyZXlbNzAwXSwgMC45MiksXG4gIGJvcmRlclJhZGl1czogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnNoYXBlLmJvcmRlclJhZGl1cyxcbiAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmNvbW1vbi53aGl0ZSxcbiAgZm9udEZhbWlseTogdGhlbWUudHlwb2dyYXBoeS5mb250RmFtaWx5LFxuICBwYWRkaW5nOiAnNHB4IDhweCcsXG4gIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTEpLFxuICBtYXhXaWR0aDogMzAwLFxuICBtYXJnaW46IDIsXG4gIHdvcmRXcmFwOiAnYnJlYWstd29yZCcsXG4gIGZvbnRXZWlnaHQ6IHRoZW1lLnR5cG9ncmFwaHkuZm9udFdlaWdodE1lZGl1bVxufSwgb3duZXJTdGF0ZS5hcnJvdyAmJiB7XG4gIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICBtYXJnaW46IDBcbn0sIG93bmVyU3RhdGUudG91Y2ggJiYge1xuICBwYWRkaW5nOiAnOHB4IDE2cHgnLFxuICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDE0KSxcbiAgbGluZUhlaWdodDogYCR7cm91bmQoMTYgLyAxNCl9ZW1gLFxuICBmb250V2VpZ2h0OiB0aGVtZS50eXBvZ3JhcGh5LmZvbnRXZWlnaHRSZWd1bGFyXG59LCB7XG4gIFtgLiR7dG9vbHRpcENsYXNzZXMucG9wcGVyfVtkYXRhLXBvcHBlci1wbGFjZW1lbnQqPVwibGVmdFwiXSAmYF06IF9leHRlbmRzKHtcbiAgICB0cmFuc2Zvcm1PcmlnaW46ICdyaWdodCBjZW50ZXInXG4gIH0sICFvd25lclN0YXRlLmlzUnRsID8gX2V4dGVuZHMoe1xuICAgIG1hcmdpblJpZ2h0OiAnMTRweCdcbiAgfSwgb3duZXJTdGF0ZS50b3VjaCAmJiB7XG4gICAgbWFyZ2luUmlnaHQ6ICcyNHB4J1xuICB9KSA6IF9leHRlbmRzKHtcbiAgICBtYXJnaW5MZWZ0OiAnMTRweCdcbiAgfSwgb3duZXJTdGF0ZS50b3VjaCAmJiB7XG4gICAgbWFyZ2luTGVmdDogJzI0cHgnXG4gIH0pKSxcbiAgW2AuJHt0b29sdGlwQ2xhc3Nlcy5wb3BwZXJ9W2RhdGEtcG9wcGVyLXBsYWNlbWVudCo9XCJyaWdodFwiXSAmYF06IF9leHRlbmRzKHtcbiAgICB0cmFuc2Zvcm1PcmlnaW46ICdsZWZ0IGNlbnRlcidcbiAgfSwgIW93bmVyU3RhdGUuaXNSdGwgPyBfZXh0ZW5kcyh7XG4gICAgbWFyZ2luTGVmdDogJzE0cHgnXG4gIH0sIG93bmVyU3RhdGUudG91Y2ggJiYge1xuICAgIG1hcmdpbkxlZnQ6ICcyNHB4J1xuICB9KSA6IF9leHRlbmRzKHtcbiAgICBtYXJnaW5SaWdodDogJzE0cHgnXG4gIH0sIG93bmVyU3RhdGUudG91Y2ggJiYge1xuICAgIG1hcmdpblJpZ2h0OiAnMjRweCdcbiAgfSkpLFxuICBbYC4ke3Rvb2x0aXBDbGFzc2VzLnBvcHBlcn1bZGF0YS1wb3BwZXItcGxhY2VtZW50Kj1cInRvcFwiXSAmYF06IF9leHRlbmRzKHtcbiAgICB0cmFuc2Zvcm1PcmlnaW46ICdjZW50ZXIgYm90dG9tJyxcbiAgICBtYXJnaW5Cb3R0b206ICcxNHB4J1xuICB9LCBvd25lclN0YXRlLnRvdWNoICYmIHtcbiAgICBtYXJnaW5Cb3R0b206ICcyNHB4J1xuICB9KSxcbiAgW2AuJHt0b29sdGlwQ2xhc3Nlcy5wb3BwZXJ9W2RhdGEtcG9wcGVyLXBsYWNlbWVudCo9XCJib3R0b21cIl0gJmBdOiBfZXh0ZW5kcyh7XG4gICAgdHJhbnNmb3JtT3JpZ2luOiAnY2VudGVyIHRvcCcsXG4gICAgbWFyZ2luVG9wOiAnMTRweCdcbiAgfSwgb3duZXJTdGF0ZS50b3VjaCAmJiB7XG4gICAgbWFyZ2luVG9wOiAnMjRweCdcbiAgfSlcbn0pKTtcbmNvbnN0IFRvb2x0aXBBcnJvdyA9IHN0eWxlZCgnc3BhbicsIHtcbiAgbmFtZTogJ011aVRvb2x0aXAnLFxuICBzbG90OiAnQXJyb3cnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5hcnJvd1xufSkoKHtcbiAgdGhlbWVcbn0pID0+ICh7XG4gIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIHdpZHRoOiAnMWVtJyxcbiAgaGVpZ2h0OiAnMC43MWVtJyAvKiA9IHdpZHRoIC8gc3FydCgyKSA9IChsZW5ndGggb2YgdGhlIGh5cG90ZW51c2UpICovLFxuICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgY29sb3I6IHRoZW1lLnZhcnMgPyB0aGVtZS52YXJzLnBhbGV0dGUuVG9vbHRpcC5iZyA6IGFscGhhKHRoZW1lLnBhbGV0dGUuZ3JleVs3MDBdLCAwLjkpLFxuICAnJjo6YmVmb3JlJzoge1xuICAgIGNvbnRlbnQ6ICdcIlwiJyxcbiAgICBtYXJnaW46ICdhdXRvJyxcbiAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgIHdpZHRoOiAnMTAwJScsXG4gICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgYmFja2dyb3VuZENvbG9yOiAnY3VycmVudENvbG9yJyxcbiAgICB0cmFuc2Zvcm06ICdyb3RhdGUoNDVkZWcpJ1xuICB9XG59KSk7XG5sZXQgaHlzdGVyc2lzT3BlbiA9IGZhbHNlO1xuY29uc3QgaHlzdGVyc2lzVGltZXIgPSBuZXcgVGltZW91dCgpO1xubGV0IGN1cnNvclBvc2l0aW9uID0ge1xuICB4OiAwLFxuICB5OiAwXG59O1xuZXhwb3J0IGZ1bmN0aW9uIHRlc3RSZXNldCgpIHtcbiAgaHlzdGVyc2lzT3BlbiA9IGZhbHNlO1xuICBoeXN0ZXJzaXNUaW1lci5jbGVhcigpO1xufVxuZnVuY3Rpb24gY29tcG9zZUV2ZW50SGFuZGxlcihoYW5kbGVyLCBldmVudEhhbmRsZXIpIHtcbiAgcmV0dXJuIChldmVudCwgLi4ucGFyYW1zKSA9PiB7XG4gICAgaWYgKGV2ZW50SGFuZGxlcikge1xuICAgICAgZXZlbnRIYW5kbGVyKGV2ZW50LCAuLi5wYXJhbXMpO1xuICAgIH1cbiAgICBoYW5kbGVyKGV2ZW50LCAuLi5wYXJhbXMpO1xuICB9O1xufVxuXG4vLyBUT0RPIHY2OiBSZW1vdmUgUG9wcGVyQ29tcG9uZW50LCBQb3BwZXJQcm9wcywgVHJhbnNpdGlvbkNvbXBvbmVudCBhbmQgVHJhbnNpdGlvblByb3BzLlxuY29uc3QgVG9vbHRpcCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFRvb2x0aXAoaW5Qcm9wcywgcmVmKSB7XG4gIHZhciBfcmVmLCBfc2xvdHMkcG9wcGVyLCBfcmVmMiwgX3JlZjMsIF9zbG90cyR0cmFuc2l0aW9uLCBfcmVmNCwgX3Nsb3RzJHRvb2x0aXAsIF9yZWY1LCBfc2xvdHMkYXJyb3csIF9zbG90UHJvcHMkcG9wcGVyLCBfcmVmNiwgX3Nsb3RQcm9wcyRwb3BwZXIyLCBfc2xvdFByb3BzJHRyYW5zaXRpb24sIF9zbG90UHJvcHMkdG9vbHRpcCwgX3JlZjcsIF9zbG90UHJvcHMkdG9vbHRpcDIsIF9zbG90UHJvcHMkYXJyb3csIF9yZWY4LCBfc2xvdFByb3BzJGFycm93MjtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpVG9vbHRpcCdcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGFycm93ID0gZmFsc2UsXG4gICAgICBjaGlsZHJlbjogY2hpbGRyZW5Qcm9wLFxuICAgICAgY29tcG9uZW50cyA9IHt9LFxuICAgICAgY29tcG9uZW50c1Byb3BzID0ge30sXG4gICAgICBkZXNjcmliZUNoaWxkID0gZmFsc2UsXG4gICAgICBkaXNhYmxlRm9jdXNMaXN0ZW5lciA9IGZhbHNlLFxuICAgICAgZGlzYWJsZUhvdmVyTGlzdGVuZXIgPSBmYWxzZSxcbiAgICAgIGRpc2FibGVJbnRlcmFjdGl2ZTogZGlzYWJsZUludGVyYWN0aXZlUHJvcCA9IGZhbHNlLFxuICAgICAgZGlzYWJsZVRvdWNoTGlzdGVuZXIgPSBmYWxzZSxcbiAgICAgIGVudGVyRGVsYXkgPSAxMDAsXG4gICAgICBlbnRlck5leHREZWxheSA9IDAsXG4gICAgICBlbnRlclRvdWNoRGVsYXkgPSA3MDAsXG4gICAgICBmb2xsb3dDdXJzb3IgPSBmYWxzZSxcbiAgICAgIGlkOiBpZFByb3AsXG4gICAgICBsZWF2ZURlbGF5ID0gMCxcbiAgICAgIGxlYXZlVG91Y2hEZWxheSA9IDE1MDAsXG4gICAgICBvbkNsb3NlLFxuICAgICAgb25PcGVuLFxuICAgICAgb3Blbjogb3BlblByb3AsXG4gICAgICBwbGFjZW1lbnQgPSAnYm90dG9tJyxcbiAgICAgIFBvcHBlckNvbXBvbmVudDogUG9wcGVyQ29tcG9uZW50UHJvcCxcbiAgICAgIFBvcHBlclByb3BzID0ge30sXG4gICAgICBzbG90UHJvcHMgPSB7fSxcbiAgICAgIHNsb3RzID0ge30sXG4gICAgICB0aXRsZSxcbiAgICAgIFRyYW5zaXRpb25Db21wb25lbnQ6IFRyYW5zaXRpb25Db21wb25lbnRQcm9wID0gR3JvdyxcbiAgICAgIFRyYW5zaXRpb25Qcm9wc1xuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuXG4gIC8vIHRvIHByZXZlbnQgcnVudGltZSBlcnJvcnMsIGRldmVsb3BlcnMgd2lsbCBuZWVkIHRvIHByb3ZpZGUgYSBjaGlsZCBhcyBhIFJlYWN0IGVsZW1lbnQgYW55d2F5LlxuICBjb25zdCBjaGlsZHJlbiA9IC8qI19fUFVSRV9fKi9SZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZHJlblByb3ApID8gY2hpbGRyZW5Qcm9wIDogLyojX19QVVJFX18qL19qc3goXCJzcGFuXCIsIHtcbiAgICBjaGlsZHJlbjogY2hpbGRyZW5Qcm9wXG4gIH0pO1xuICBjb25zdCB0aGVtZSA9IHVzZVRoZW1lKCk7XG4gIGNvbnN0IGlzUnRsID0gdXNlUnRsKCk7XG4gIGNvbnN0IFtjaGlsZE5vZGUsIHNldENoaWxkTm9kZV0gPSBSZWFjdC51c2VTdGF0ZSgpO1xuICBjb25zdCBbYXJyb3dSZWYsIHNldEFycm93UmVmXSA9IFJlYWN0LnVzZVN0YXRlKG51bGwpO1xuICBjb25zdCBpZ25vcmVOb25Ub3VjaEV2ZW50cyA9IFJlYWN0LnVzZVJlZihmYWxzZSk7XG4gIGNvbnN0IGRpc2FibGVJbnRlcmFjdGl2ZSA9IGRpc2FibGVJbnRlcmFjdGl2ZVByb3AgfHwgZm9sbG93Q3Vyc29yO1xuICBjb25zdCBjbG9zZVRpbWVyID0gdXNlVGltZW91dCgpO1xuICBjb25zdCBlbnRlclRpbWVyID0gdXNlVGltZW91dCgpO1xuICBjb25zdCBsZWF2ZVRpbWVyID0gdXNlVGltZW91dCgpO1xuICBjb25zdCB0b3VjaFRpbWVyID0gdXNlVGltZW91dCgpO1xuICBjb25zdCBbb3BlblN0YXRlLCBzZXRPcGVuU3RhdGVdID0gdXNlQ29udHJvbGxlZCh7XG4gICAgY29udHJvbGxlZDogb3BlblByb3AsXG4gICAgZGVmYXVsdDogZmFsc2UsXG4gICAgbmFtZTogJ1Rvb2x0aXAnLFxuICAgIHN0YXRlOiAnb3BlbidcbiAgfSk7XG4gIGxldCBvcGVuID0gb3BlblN0YXRlO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIGNvbnN0IHtcbiAgICAgIGN1cnJlbnQ6IGlzQ29udHJvbGxlZFxuICAgIH0gPSBSZWFjdC51c2VSZWYob3BlblByb3AgIT09IHVuZGVmaW5lZCk7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgaWYgKGNoaWxkTm9kZSAmJiBjaGlsZE5vZGUuZGlzYWJsZWQgJiYgIWlzQ29udHJvbGxlZCAmJiB0aXRsZSAhPT0gJycgJiYgY2hpbGROb2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2J1dHRvbicpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihbJ01VSTogWW91IGFyZSBwcm92aWRpbmcgYSBkaXNhYmxlZCBgYnV0dG9uYCBjaGlsZCB0byB0aGUgVG9vbHRpcCBjb21wb25lbnQuJywgJ0EgZGlzYWJsZWQgZWxlbWVudCBkb2VzIG5vdCBmaXJlIGV2ZW50cy4nLCBcIlRvb2x0aXAgbmVlZHMgdG8gbGlzdGVuIHRvIHRoZSBjaGlsZCBlbGVtZW50J3MgZXZlbnRzIHRvIGRpc3BsYXkgdGhlIHRpdGxlLlwiLCAnJywgJ0FkZCBhIHNpbXBsZSB3cmFwcGVyIGVsZW1lbnQsIHN1Y2ggYXMgYSBgc3BhbmAuJ10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH0sIFt0aXRsZSwgY2hpbGROb2RlLCBpc0NvbnRyb2xsZWRdKTtcbiAgfVxuICBjb25zdCBpZCA9IHVzZUlkKGlkUHJvcCk7XG4gIGNvbnN0IHByZXZVc2VyU2VsZWN0ID0gUmVhY3QudXNlUmVmKCk7XG4gIGNvbnN0IHN0b3BUb3VjaEludGVyYWN0aW9uID0gdXNlRXZlbnRDYWxsYmFjaygoKSA9PiB7XG4gICAgaWYgKHByZXZVc2VyU2VsZWN0LmN1cnJlbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5XZWJraXRVc2VyU2VsZWN0ID0gcHJldlVzZXJTZWxlY3QuY3VycmVudDtcbiAgICAgIHByZXZVc2VyU2VsZWN0LmN1cnJlbnQgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHRvdWNoVGltZXIuY2xlYXIoKTtcbiAgfSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiBzdG9wVG91Y2hJbnRlcmFjdGlvbiwgW3N0b3BUb3VjaEludGVyYWN0aW9uXSk7XG4gIGNvbnN0IGhhbmRsZU9wZW4gPSBldmVudCA9PiB7XG4gICAgaHlzdGVyc2lzVGltZXIuY2xlYXIoKTtcbiAgICBoeXN0ZXJzaXNPcGVuID0gdHJ1ZTtcblxuICAgIC8vIFRoZSBtb3VzZW92ZXIgZXZlbnQgd2lsbCB0cmlnZ2VyIGZvciBldmVyeSBuZXN0ZWQgZWxlbWVudCBpbiB0aGUgdG9vbHRpcC5cbiAgICAvLyBXZSBjYW4gc2tpcCByZXJlbmRlcmluZyB3aGVuIHRoZSB0b29sdGlwIGlzIGFscmVhZHkgb3Blbi5cbiAgICAvLyBXZSBhcmUgdXNpbmcgdGhlIG1vdXNlb3ZlciBldmVudCBpbnN0ZWFkIG9mIHRoZSBtb3VzZWVudGVyIGV2ZW50IHRvIGZpeCBhIGhpZGUvc2hvdyBpc3N1ZS5cbiAgICBzZXRPcGVuU3RhdGUodHJ1ZSk7XG4gICAgaWYgKG9uT3BlbiAmJiAhb3Blbikge1xuICAgICAgb25PcGVuKGV2ZW50KTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGhhbmRsZUNsb3NlID0gdXNlRXZlbnRDYWxsYmFjayhcbiAgLyoqXG4gICAqIEBwYXJhbSB7UmVhY3QuU3ludGhldGljRXZlbnQgfCBFdmVudH0gZXZlbnRcbiAgICovXG4gIGV2ZW50ID0+IHtcbiAgICBoeXN0ZXJzaXNUaW1lci5zdGFydCg4MDAgKyBsZWF2ZURlbGF5LCAoKSA9PiB7XG4gICAgICBoeXN0ZXJzaXNPcGVuID0gZmFsc2U7XG4gICAgfSk7XG4gICAgc2V0T3BlblN0YXRlKGZhbHNlKTtcbiAgICBpZiAob25DbG9zZSAmJiBvcGVuKSB7XG4gICAgICBvbkNsb3NlKGV2ZW50KTtcbiAgICB9XG4gICAgY2xvc2VUaW1lci5zdGFydCh0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVzdCwgKCkgPT4ge1xuICAgICAgaWdub3JlTm9uVG91Y2hFdmVudHMuY3VycmVudCA9IGZhbHNlO1xuICAgIH0pO1xuICB9KTtcbiAgY29uc3QgaGFuZGxlTW91c2VPdmVyID0gZXZlbnQgPT4ge1xuICAgIGlmIChpZ25vcmVOb25Ub3VjaEV2ZW50cy5jdXJyZW50ICYmIGV2ZW50LnR5cGUgIT09ICd0b3VjaHN0YXJ0Jykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFJlbW92ZSB0aGUgdGl0bGUgYWhlYWQgb2YgdGltZS5cbiAgICAvLyBXZSBkb24ndCB3YW50IHRvIHdhaXQgZm9yIHRoZSBuZXh0IHJlbmRlciBjb21taXQuXG4gICAgLy8gV2Ugd291bGQgcmlzayBkaXNwbGF5aW5nIHR3byB0b29sdGlwcyBhdCB0aGUgc2FtZSB0aW1lIChuYXRpdmUgKyB0aGlzIG9uZSkuXG4gICAgaWYgKGNoaWxkTm9kZSkge1xuICAgICAgY2hpbGROb2RlLnJlbW92ZUF0dHJpYnV0ZSgndGl0bGUnKTtcbiAgICB9XG4gICAgZW50ZXJUaW1lci5jbGVhcigpO1xuICAgIGxlYXZlVGltZXIuY2xlYXIoKTtcbiAgICBpZiAoZW50ZXJEZWxheSB8fCBoeXN0ZXJzaXNPcGVuICYmIGVudGVyTmV4dERlbGF5KSB7XG4gICAgICBlbnRlclRpbWVyLnN0YXJ0KGh5c3RlcnNpc09wZW4gPyBlbnRlck5leHREZWxheSA6IGVudGVyRGVsYXksICgpID0+IHtcbiAgICAgICAgaGFuZGxlT3BlbihldmVudCk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgaGFuZGxlT3BlbihldmVudCk7XG4gICAgfVxuICB9O1xuICBjb25zdCBoYW5kbGVNb3VzZUxlYXZlID0gZXZlbnQgPT4ge1xuICAgIGVudGVyVGltZXIuY2xlYXIoKTtcbiAgICBsZWF2ZVRpbWVyLnN0YXJ0KGxlYXZlRGVsYXksICgpID0+IHtcbiAgICAgIGhhbmRsZUNsb3NlKGV2ZW50KTtcbiAgICB9KTtcbiAgfTtcbiAgY29uc3Qge1xuICAgIGlzRm9jdXNWaXNpYmxlUmVmLFxuICAgIG9uQmx1cjogaGFuZGxlQmx1clZpc2libGUsXG4gICAgb25Gb2N1czogaGFuZGxlRm9jdXNWaXNpYmxlLFxuICAgIHJlZjogZm9jdXNWaXNpYmxlUmVmXG4gIH0gPSB1c2VJc0ZvY3VzVmlzaWJsZSgpO1xuICAvLyBXZSBkb24ndCBuZWNlc3NhcmlseSBjYXJlIGFib3V0IHRoZSBmb2N1c1Zpc2libGUgc3RhdGUgKHdoaWNoIGlzIHNhZmUgdG8gYWNjZXNzIHZpYSByZWYgYW55d2F5KS5cbiAgLy8gV2UganVzdCBuZWVkIHRvIHJlLXJlbmRlciB0aGUgVG9vbHRpcCBpZiB0aGUgZm9jdXMtdmlzaWJsZSBzdGF0ZSBjaGFuZ2VzLlxuICBjb25zdCBbLCBzZXRDaGlsZElzRm9jdXNWaXNpYmxlXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgaGFuZGxlQmx1ciA9IGV2ZW50ID0+IHtcbiAgICBoYW5kbGVCbHVyVmlzaWJsZShldmVudCk7XG4gICAgaWYgKGlzRm9jdXNWaXNpYmxlUmVmLmN1cnJlbnQgPT09IGZhbHNlKSB7XG4gICAgICBzZXRDaGlsZElzRm9jdXNWaXNpYmxlKGZhbHNlKTtcbiAgICAgIGhhbmRsZU1vdXNlTGVhdmUoZXZlbnQpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgaGFuZGxlRm9jdXMgPSBldmVudCA9PiB7XG4gICAgLy8gV29ya2Fyb3VuZCBmb3IgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy83NzY5XG4gICAgLy8gVGhlIGF1dG9Gb2N1cyBvZiBSZWFjdCBtaWdodCB0cmlnZ2VyIHRoZSBldmVudCBiZWZvcmUgdGhlIGNvbXBvbmVudERpZE1vdW50LlxuICAgIC8vIFdlIG5lZWQgdG8gYWNjb3VudCBmb3IgdGhpcyBldmVudHVhbGl0eS5cbiAgICBpZiAoIWNoaWxkTm9kZSkge1xuICAgICAgc2V0Q2hpbGROb2RlKGV2ZW50LmN1cnJlbnRUYXJnZXQpO1xuICAgIH1cbiAgICBoYW5kbGVGb2N1c1Zpc2libGUoZXZlbnQpO1xuICAgIGlmIChpc0ZvY3VzVmlzaWJsZVJlZi5jdXJyZW50ID09PSB0cnVlKSB7XG4gICAgICBzZXRDaGlsZElzRm9jdXNWaXNpYmxlKHRydWUpO1xuICAgICAgaGFuZGxlTW91c2VPdmVyKGV2ZW50KTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGRldGVjdFRvdWNoU3RhcnQgPSBldmVudCA9PiB7XG4gICAgaWdub3JlTm9uVG91Y2hFdmVudHMuY3VycmVudCA9IHRydWU7XG4gICAgY29uc3QgY2hpbGRyZW5Qcm9wcyA9IGNoaWxkcmVuLnByb3BzO1xuICAgIGlmIChjaGlsZHJlblByb3BzLm9uVG91Y2hTdGFydCkge1xuICAgICAgY2hpbGRyZW5Qcm9wcy5vblRvdWNoU3RhcnQoZXZlbnQpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgaGFuZGxlVG91Y2hTdGFydCA9IGV2ZW50ID0+IHtcbiAgICBkZXRlY3RUb3VjaFN0YXJ0KGV2ZW50KTtcbiAgICBsZWF2ZVRpbWVyLmNsZWFyKCk7XG4gICAgY2xvc2VUaW1lci5jbGVhcigpO1xuICAgIHN0b3BUb3VjaEludGVyYWN0aW9uKCk7XG4gICAgcHJldlVzZXJTZWxlY3QuY3VycmVudCA9IGRvY3VtZW50LmJvZHkuc3R5bGUuV2Via2l0VXNlclNlbGVjdDtcbiAgICAvLyBQcmV2ZW50IGlPUyB0ZXh0IHNlbGVjdGlvbiBvbiBsb25nLXRhcC5cbiAgICBkb2N1bWVudC5ib2R5LnN0eWxlLldlYmtpdFVzZXJTZWxlY3QgPSAnbm9uZSc7XG4gICAgdG91Y2hUaW1lci5zdGFydChlbnRlclRvdWNoRGVsYXksICgpID0+IHtcbiAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUuV2Via2l0VXNlclNlbGVjdCA9IHByZXZVc2VyU2VsZWN0LmN1cnJlbnQ7XG4gICAgICBoYW5kbGVNb3VzZU92ZXIoZXZlbnQpO1xuICAgIH0pO1xuICB9O1xuICBjb25zdCBoYW5kbGVUb3VjaEVuZCA9IGV2ZW50ID0+IHtcbiAgICBpZiAoY2hpbGRyZW4ucHJvcHMub25Ub3VjaEVuZCkge1xuICAgICAgY2hpbGRyZW4ucHJvcHMub25Ub3VjaEVuZChldmVudCk7XG4gICAgfVxuICAgIHN0b3BUb3VjaEludGVyYWN0aW9uKCk7XG4gICAgbGVhdmVUaW1lci5zdGFydChsZWF2ZVRvdWNoRGVsYXksICgpID0+IHtcbiAgICAgIGhhbmRsZUNsb3NlKGV2ZW50KTtcbiAgICB9KTtcbiAgfTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIW9wZW4pIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtLZXlib2FyZEV2ZW50fSBuYXRpdmVFdmVudFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhbmRsZUtleURvd24obmF0aXZlRXZlbnQpIHtcbiAgICAgIC8vIElFMTEsIEVkZ2UgKHByaW9yIHRvIHVzaW5nIEJpbms/KSB1c2UgJ0VzYydcbiAgICAgIGlmIChuYXRpdmVFdmVudC5rZXkgPT09ICdFc2NhcGUnIHx8IG5hdGl2ZUV2ZW50LmtleSA9PT0gJ0VzYycpIHtcbiAgICAgICAgaGFuZGxlQ2xvc2UobmF0aXZlRXZlbnQpO1xuICAgICAgfVxuICAgIH1cbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgaGFuZGxlS2V5RG93bik7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBoYW5kbGVLZXlEb3duKTtcbiAgICB9O1xuICB9LCBbaGFuZGxlQ2xvc2UsIG9wZW5dKTtcbiAgY29uc3QgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihjaGlsZHJlbi5yZWYsIGZvY3VzVmlzaWJsZVJlZiwgc2V0Q2hpbGROb2RlLCByZWYpO1xuXG4gIC8vIFRoZXJlIGlzIG5vIHBvaW50IGluIGRpc3BsYXlpbmcgYW4gZW1wdHkgdG9vbHRpcC5cbiAgLy8gU28gd2UgZXhjbHVkZSBhbGwgZmFsc3kgdmFsdWVzLCBleGNlcHQgMCwgd2hpY2ggaXMgdmFsaWQuXG4gIGlmICghdGl0bGUgJiYgdGl0bGUgIT09IDApIHtcbiAgICBvcGVuID0gZmFsc2U7XG4gIH1cbiAgY29uc3QgcG9wcGVyUmVmID0gUmVhY3QudXNlUmVmKCk7XG4gIGNvbnN0IGhhbmRsZU1vdXNlTW92ZSA9IGV2ZW50ID0+IHtcbiAgICBjb25zdCBjaGlsZHJlblByb3BzID0gY2hpbGRyZW4ucHJvcHM7XG4gICAgaWYgKGNoaWxkcmVuUHJvcHMub25Nb3VzZU1vdmUpIHtcbiAgICAgIGNoaWxkcmVuUHJvcHMub25Nb3VzZU1vdmUoZXZlbnQpO1xuICAgIH1cbiAgICBjdXJzb3JQb3NpdGlvbiA9IHtcbiAgICAgIHg6IGV2ZW50LmNsaWVudFgsXG4gICAgICB5OiBldmVudC5jbGllbnRZXG4gICAgfTtcbiAgICBpZiAocG9wcGVyUmVmLmN1cnJlbnQpIHtcbiAgICAgIHBvcHBlclJlZi5jdXJyZW50LnVwZGF0ZSgpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgbmFtZU9yRGVzY1Byb3BzID0ge307XG4gIGNvbnN0IHRpdGxlSXNTdHJpbmcgPSB0eXBlb2YgdGl0bGUgPT09ICdzdHJpbmcnO1xuICBpZiAoZGVzY3JpYmVDaGlsZCkge1xuICAgIG5hbWVPckRlc2NQcm9wcy50aXRsZSA9ICFvcGVuICYmIHRpdGxlSXNTdHJpbmcgJiYgIWRpc2FibGVIb3Zlckxpc3RlbmVyID8gdGl0bGUgOiBudWxsO1xuICAgIG5hbWVPckRlc2NQcm9wc1snYXJpYS1kZXNjcmliZWRieSddID0gb3BlbiA/IGlkIDogbnVsbDtcbiAgfSBlbHNlIHtcbiAgICBuYW1lT3JEZXNjUHJvcHNbJ2FyaWEtbGFiZWwnXSA9IHRpdGxlSXNTdHJpbmcgPyB0aXRsZSA6IG51bGw7XG4gICAgbmFtZU9yRGVzY1Byb3BzWydhcmlhLWxhYmVsbGVkYnknXSA9IG9wZW4gJiYgIXRpdGxlSXNTdHJpbmcgPyBpZCA6IG51bGw7XG4gIH1cbiAgY29uc3QgY2hpbGRyZW5Qcm9wcyA9IF9leHRlbmRzKHt9LCBuYW1lT3JEZXNjUHJvcHMsIG90aGVyLCBjaGlsZHJlbi5wcm9wcywge1xuICAgIGNsYXNzTmFtZTogY2xzeChvdGhlci5jbGFzc05hbWUsIGNoaWxkcmVuLnByb3BzLmNsYXNzTmFtZSksXG4gICAgb25Ub3VjaFN0YXJ0OiBkZXRlY3RUb3VjaFN0YXJ0LFxuICAgIHJlZjogaGFuZGxlUmVmXG4gIH0sIGZvbGxvd0N1cnNvciA/IHtcbiAgICBvbk1vdXNlTW92ZTogaGFuZGxlTW91c2VNb3ZlXG4gIH0gOiB7fSk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY2hpbGRyZW5Qcm9wc1snZGF0YS1tdWktaW50ZXJuYWwtY2xvbmUtZWxlbWVudCddID0gdHJ1ZTtcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICBpZiAoY2hpbGROb2RlICYmICFjaGlsZE5vZGUuZ2V0QXR0cmlidXRlKCdkYXRhLW11aS1pbnRlcm5hbC1jbG9uZS1lbGVtZW50JykpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihbJ01VSTogVGhlIGBjaGlsZHJlbmAgY29tcG9uZW50IG9mIHRoZSBUb29sdGlwIGlzIG5vdCBmb3J3YXJkaW5nIGl0cyBwcm9wcyBjb3JyZWN0bHkuJywgJ1BsZWFzZSBtYWtlIHN1cmUgdGhhdCBwcm9wcyBhcmUgc3ByZWFkIG9uIHRoZSBzYW1lIGVsZW1lbnQgdGhhdCB0aGUgcmVmIGlzIGFwcGxpZWQgdG8uJ10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH0sIFtjaGlsZE5vZGVdKTtcbiAgfVxuICBjb25zdCBpbnRlcmFjdGl2ZVdyYXBwZXJMaXN0ZW5lcnMgPSB7fTtcbiAgaWYgKCFkaXNhYmxlVG91Y2hMaXN0ZW5lcikge1xuICAgIGNoaWxkcmVuUHJvcHMub25Ub3VjaFN0YXJ0ID0gaGFuZGxlVG91Y2hTdGFydDtcbiAgICBjaGlsZHJlblByb3BzLm9uVG91Y2hFbmQgPSBoYW5kbGVUb3VjaEVuZDtcbiAgfVxuICBpZiAoIWRpc2FibGVIb3Zlckxpc3RlbmVyKSB7XG4gICAgY2hpbGRyZW5Qcm9wcy5vbk1vdXNlT3ZlciA9IGNvbXBvc2VFdmVudEhhbmRsZXIoaGFuZGxlTW91c2VPdmVyLCBjaGlsZHJlblByb3BzLm9uTW91c2VPdmVyKTtcbiAgICBjaGlsZHJlblByb3BzLm9uTW91c2VMZWF2ZSA9IGNvbXBvc2VFdmVudEhhbmRsZXIoaGFuZGxlTW91c2VMZWF2ZSwgY2hpbGRyZW5Qcm9wcy5vbk1vdXNlTGVhdmUpO1xuICAgIGlmICghZGlzYWJsZUludGVyYWN0aXZlKSB7XG4gICAgICBpbnRlcmFjdGl2ZVdyYXBwZXJMaXN0ZW5lcnMub25Nb3VzZU92ZXIgPSBoYW5kbGVNb3VzZU92ZXI7XG4gICAgICBpbnRlcmFjdGl2ZVdyYXBwZXJMaXN0ZW5lcnMub25Nb3VzZUxlYXZlID0gaGFuZGxlTW91c2VMZWF2ZTtcbiAgICB9XG4gIH1cbiAgaWYgKCFkaXNhYmxlRm9jdXNMaXN0ZW5lcikge1xuICAgIGNoaWxkcmVuUHJvcHMub25Gb2N1cyA9IGNvbXBvc2VFdmVudEhhbmRsZXIoaGFuZGxlRm9jdXMsIGNoaWxkcmVuUHJvcHMub25Gb2N1cyk7XG4gICAgY2hpbGRyZW5Qcm9wcy5vbkJsdXIgPSBjb21wb3NlRXZlbnRIYW5kbGVyKGhhbmRsZUJsdXIsIGNoaWxkcmVuUHJvcHMub25CbHVyKTtcbiAgICBpZiAoIWRpc2FibGVJbnRlcmFjdGl2ZSkge1xuICAgICAgaW50ZXJhY3RpdmVXcmFwcGVyTGlzdGVuZXJzLm9uRm9jdXMgPSBoYW5kbGVGb2N1cztcbiAgICAgIGludGVyYWN0aXZlV3JhcHBlckxpc3RlbmVycy5vbkJsdXIgPSBoYW5kbGVCbHVyO1xuICAgIH1cbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChjaGlsZHJlbi5wcm9wcy50aXRsZSkge1xuICAgICAgY29uc29sZS5lcnJvcihbJ01VSTogWW91IGhhdmUgcHJvdmlkZWQgYSBgdGl0bGVgIHByb3AgdG8gdGhlIGNoaWxkIG9mIDxUb29sdGlwIC8+LicsIGBSZW1vdmUgdGhpcyB0aXRsZSBwcm9wIFxcYCR7Y2hpbGRyZW4ucHJvcHMudGl0bGV9XFxgIG9yIHRoZSBUb29sdGlwIGNvbXBvbmVudC5gXS5qb2luKCdcXG4nKSk7XG4gICAgfVxuICB9XG4gIGNvbnN0IHBvcHBlck9wdGlvbnMgPSBSZWFjdC51c2VNZW1vKCgpID0+IHtcbiAgICB2YXIgX1BvcHBlclByb3BzJHBvcHBlck9wO1xuICAgIGxldCB0b29sdGlwTW9kaWZpZXJzID0gW3tcbiAgICAgIG5hbWU6ICdhcnJvdycsXG4gICAgICBlbmFibGVkOiBCb29sZWFuKGFycm93UmVmKSxcbiAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgZWxlbWVudDogYXJyb3dSZWYsXG4gICAgICAgIHBhZGRpbmc6IDRcbiAgICAgIH1cbiAgICB9XTtcbiAgICBpZiAoKF9Qb3BwZXJQcm9wcyRwb3BwZXJPcCA9IFBvcHBlclByb3BzLnBvcHBlck9wdGlvbnMpICE9IG51bGwgJiYgX1BvcHBlclByb3BzJHBvcHBlck9wLm1vZGlmaWVycykge1xuICAgICAgdG9vbHRpcE1vZGlmaWVycyA9IHRvb2x0aXBNb2RpZmllcnMuY29uY2F0KFBvcHBlclByb3BzLnBvcHBlck9wdGlvbnMubW9kaWZpZXJzKTtcbiAgICB9XG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBQb3BwZXJQcm9wcy5wb3BwZXJPcHRpb25zLCB7XG4gICAgICBtb2RpZmllcnM6IHRvb2x0aXBNb2RpZmllcnNcbiAgICB9KTtcbiAgfSwgW2Fycm93UmVmLCBQb3BwZXJQcm9wc10pO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgaXNSdGwsXG4gICAgYXJyb3csXG4gICAgZGlzYWJsZUludGVyYWN0aXZlLFxuICAgIHBsYWNlbWVudCxcbiAgICBQb3BwZXJDb21wb25lbnRQcm9wLFxuICAgIHRvdWNoOiBpZ25vcmVOb25Ub3VjaEV2ZW50cy5jdXJyZW50XG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIGNvbnN0IFBvcHBlckNvbXBvbmVudCA9IChfcmVmID0gKF9zbG90cyRwb3BwZXIgPSBzbG90cy5wb3BwZXIpICE9IG51bGwgPyBfc2xvdHMkcG9wcGVyIDogY29tcG9uZW50cy5Qb3BwZXIpICE9IG51bGwgPyBfcmVmIDogVG9vbHRpcFBvcHBlcjtcbiAgY29uc3QgVHJhbnNpdGlvbkNvbXBvbmVudCA9IChfcmVmMiA9IChfcmVmMyA9IChfc2xvdHMkdHJhbnNpdGlvbiA9IHNsb3RzLnRyYW5zaXRpb24pICE9IG51bGwgPyBfc2xvdHMkdHJhbnNpdGlvbiA6IGNvbXBvbmVudHMuVHJhbnNpdGlvbikgIT0gbnVsbCA/IF9yZWYzIDogVHJhbnNpdGlvbkNvbXBvbmVudFByb3ApICE9IG51bGwgPyBfcmVmMiA6IEdyb3c7XG4gIGNvbnN0IFRvb2x0aXBDb21wb25lbnQgPSAoX3JlZjQgPSAoX3Nsb3RzJHRvb2x0aXAgPSBzbG90cy50b29sdGlwKSAhPSBudWxsID8gX3Nsb3RzJHRvb2x0aXAgOiBjb21wb25lbnRzLlRvb2x0aXApICE9IG51bGwgPyBfcmVmNCA6IFRvb2x0aXBUb29sdGlwO1xuICBjb25zdCBBcnJvd0NvbXBvbmVudCA9IChfcmVmNSA9IChfc2xvdHMkYXJyb3cgPSBzbG90cy5hcnJvdykgIT0gbnVsbCA/IF9zbG90cyRhcnJvdyA6IGNvbXBvbmVudHMuQXJyb3cpICE9IG51bGwgPyBfcmVmNSA6IFRvb2x0aXBBcnJvdztcbiAgY29uc3QgcG9wcGVyUHJvcHMgPSBhcHBlbmRPd25lclN0YXRlKFBvcHBlckNvbXBvbmVudCwgX2V4dGVuZHMoe30sIFBvcHBlclByb3BzLCAoX3Nsb3RQcm9wcyRwb3BwZXIgPSBzbG90UHJvcHMucG9wcGVyKSAhPSBudWxsID8gX3Nsb3RQcm9wcyRwb3BwZXIgOiBjb21wb25lbnRzUHJvcHMucG9wcGVyLCB7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucG9wcGVyLCBQb3BwZXJQcm9wcyA9PSBudWxsID8gdm9pZCAwIDogUG9wcGVyUHJvcHMuY2xhc3NOYW1lLCAoX3JlZjYgPSAoX3Nsb3RQcm9wcyRwb3BwZXIyID0gc2xvdFByb3BzLnBvcHBlcikgIT0gbnVsbCA/IF9zbG90UHJvcHMkcG9wcGVyMiA6IGNvbXBvbmVudHNQcm9wcy5wb3BwZXIpID09IG51bGwgPyB2b2lkIDAgOiBfcmVmNi5jbGFzc05hbWUpXG4gIH0pLCBvd25lclN0YXRlKTtcbiAgY29uc3QgdHJhbnNpdGlvblByb3BzID0gYXBwZW5kT3duZXJTdGF0ZShUcmFuc2l0aW9uQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgVHJhbnNpdGlvblByb3BzLCAoX3Nsb3RQcm9wcyR0cmFuc2l0aW9uID0gc2xvdFByb3BzLnRyYW5zaXRpb24pICE9IG51bGwgPyBfc2xvdFByb3BzJHRyYW5zaXRpb24gOiBjb21wb25lbnRzUHJvcHMudHJhbnNpdGlvbiksIG93bmVyU3RhdGUpO1xuICBjb25zdCB0b29sdGlwUHJvcHMgPSBhcHBlbmRPd25lclN0YXRlKFRvb2x0aXBDb21wb25lbnQsIF9leHRlbmRzKHt9LCAoX3Nsb3RQcm9wcyR0b29sdGlwID0gc2xvdFByb3BzLnRvb2x0aXApICE9IG51bGwgPyBfc2xvdFByb3BzJHRvb2x0aXAgOiBjb21wb25lbnRzUHJvcHMudG9vbHRpcCwge1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnRvb2x0aXAsIChfcmVmNyA9IChfc2xvdFByb3BzJHRvb2x0aXAyID0gc2xvdFByb3BzLnRvb2x0aXApICE9IG51bGwgPyBfc2xvdFByb3BzJHRvb2x0aXAyIDogY29tcG9uZW50c1Byb3BzLnRvb2x0aXApID09IG51bGwgPyB2b2lkIDAgOiBfcmVmNy5jbGFzc05hbWUpXG4gIH0pLCBvd25lclN0YXRlKTtcbiAgY29uc3QgdG9vbHRpcEFycm93UHJvcHMgPSBhcHBlbmRPd25lclN0YXRlKEFycm93Q29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgKF9zbG90UHJvcHMkYXJyb3cgPSBzbG90UHJvcHMuYXJyb3cpICE9IG51bGwgPyBfc2xvdFByb3BzJGFycm93IDogY29tcG9uZW50c1Byb3BzLmFycm93LCB7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMuYXJyb3csIChfcmVmOCA9IChfc2xvdFByb3BzJGFycm93MiA9IHNsb3RQcm9wcy5hcnJvdykgIT0gbnVsbCA/IF9zbG90UHJvcHMkYXJyb3cyIDogY29tcG9uZW50c1Byb3BzLmFycm93KSA9PSBudWxsID8gdm9pZCAwIDogX3JlZjguY2xhc3NOYW1lKVxuICB9KSwgb3duZXJTdGF0ZSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeHMoUmVhY3QuRnJhZ21lbnQsIHtcbiAgICBjaGlsZHJlbjogWy8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGRyZW4sIGNoaWxkcmVuUHJvcHMpLCAvKiNfX1BVUkVfXyovX2pzeChQb3BwZXJDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICAgIGFzOiBQb3BwZXJDb21wb25lbnRQcm9wICE9IG51bGwgPyBQb3BwZXJDb21wb25lbnRQcm9wIDogUG9wcGVyLFxuICAgICAgcGxhY2VtZW50OiBwbGFjZW1lbnQsXG4gICAgICBhbmNob3JFbDogZm9sbG93Q3Vyc29yID8ge1xuICAgICAgICBnZXRCb3VuZGluZ0NsaWVudFJlY3Q6ICgpID0+ICh7XG4gICAgICAgICAgdG9wOiBjdXJzb3JQb3NpdGlvbi55LFxuICAgICAgICAgIGxlZnQ6IGN1cnNvclBvc2l0aW9uLngsXG4gICAgICAgICAgcmlnaHQ6IGN1cnNvclBvc2l0aW9uLngsXG4gICAgICAgICAgYm90dG9tOiBjdXJzb3JQb3NpdGlvbi55LFxuICAgICAgICAgIHdpZHRoOiAwLFxuICAgICAgICAgIGhlaWdodDogMFxuICAgICAgICB9KVxuICAgICAgfSA6IGNoaWxkTm9kZSxcbiAgICAgIHBvcHBlclJlZjogcG9wcGVyUmVmLFxuICAgICAgb3BlbjogY2hpbGROb2RlID8gb3BlbiA6IGZhbHNlLFxuICAgICAgaWQ6IGlkLFxuICAgICAgdHJhbnNpdGlvbjogdHJ1ZVxuICAgIH0sIGludGVyYWN0aXZlV3JhcHBlckxpc3RlbmVycywgcG9wcGVyUHJvcHMsIHtcbiAgICAgIHBvcHBlck9wdGlvbnM6IHBvcHBlck9wdGlvbnMsXG4gICAgICBjaGlsZHJlbjogKHtcbiAgICAgICAgVHJhbnNpdGlvblByb3BzOiBUcmFuc2l0aW9uUHJvcHNJbm5lclxuICAgICAgfSkgPT4gLyojX19QVVJFX18qL19qc3goVHJhbnNpdGlvbkNvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgICAgICB0aW1lb3V0OiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVyXG4gICAgICB9LCBUcmFuc2l0aW9uUHJvcHNJbm5lciwgdHJhbnNpdGlvblByb3BzLCB7XG4gICAgICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeHMoVG9vbHRpcENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHRvb2x0aXBQcm9wcywge1xuICAgICAgICAgIGNoaWxkcmVuOiBbdGl0bGUsIGFycm93ID8gLyojX19QVVJFX18qL19qc3goQXJyb3dDb21wb25lbnQsIF9leHRlbmRzKHt9LCB0b29sdGlwQXJyb3dQcm9wcywge1xuICAgICAgICAgICAgcmVmOiBzZXRBcnJvd1JlZlxuICAgICAgICAgIH0pKSA6IG51bGxdXG4gICAgICAgIH0pKVxuICAgICAgfSkpXG4gICAgfSkpXVxuICB9KTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVG9vbHRpcC5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGFkZHMgYW4gYXJyb3cgdG8gdGhlIHRvb2x0aXAuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBhcnJvdzogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUb29sdGlwIHJlZmVyZW5jZSBlbGVtZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IGVsZW1lbnRBY2NlcHRpbmdSZWYuaXNSZXF1aXJlZCxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50cyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlLlxuICAgKlxuICAgKiBUaGlzIHByb3AgaXMgYW4gYWxpYXMgZm9yIHRoZSBgc2xvdHNgIHByb3AuXG4gICAqIEl0J3MgcmVjb21tZW5kZWQgdG8gdXNlIHRoZSBgc2xvdHNgIHByb3AgaW5zdGVhZC5cbiAgICpcbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIGNvbXBvbmVudHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgQXJyb3c6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICBQb3BwZXI6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICBUb29sdGlwOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgVHJhbnNpdGlvbjogUHJvcFR5cGVzLmVsZW1lbnRUeXBlXG4gIH0pLFxuICAvKipcbiAgICogVGhlIGV4dHJhIHByb3BzIGZvciB0aGUgc2xvdCBjb21wb25lbnRzLlxuICAgKiBZb3UgY2FuIG92ZXJyaWRlIHRoZSBleGlzdGluZyBwcm9wcyBvciBhZGQgbmV3IG9uZXMuXG4gICAqXG4gICAqIFRoaXMgcHJvcCBpcyBhbiBhbGlhcyBmb3IgdGhlIGBzbG90UHJvcHNgIHByb3AuXG4gICAqIEl0J3MgcmVjb21tZW5kZWQgdG8gdXNlIHRoZSBgc2xvdFByb3BzYCBwcm9wIGluc3RlYWQsIGFzIGBjb21wb25lbnRzUHJvcHNgIHdpbGwgYmUgZGVwcmVjYXRlZCBpbiB0aGUgZnV0dXJlLlxuICAgKlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgY29tcG9uZW50c1Byb3BzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGFycm93OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHBvcHBlcjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICB0b29sdGlwOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHRyYW5zaXRpb246IFByb3BUeXBlcy5vYmplY3RcbiAgfSksXG4gIC8qKlxuICAgKiBTZXQgdG8gYHRydWVgIGlmIHRoZSBgdGl0bGVgIGFjdHMgYXMgYW4gYWNjZXNzaWJsZSBkZXNjcmlwdGlvbi5cbiAgICogQnkgZGVmYXVsdCB0aGUgYHRpdGxlYCBhY3RzIGFzIGFuIGFjY2Vzc2libGUgbGFiZWwgZm9yIHRoZSBjaGlsZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRlc2NyaWJlQ2hpbGQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogRG8gbm90IHJlc3BvbmQgdG8gZm9jdXMtdmlzaWJsZSBldmVudHMuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlRm9jdXNMaXN0ZW5lcjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBEbyBub3QgcmVzcG9uZCB0byBob3ZlciBldmVudHMuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlSG92ZXJMaXN0ZW5lcjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBNYWtlcyBhIHRvb2x0aXAgbm90IGludGVyYWN0aXZlLCBpLmUuIGl0IHdpbGwgY2xvc2Ugd2hlbiB0aGUgdXNlclxuICAgKiBob3ZlcnMgb3ZlciB0aGUgdG9vbHRpcCBiZWZvcmUgdGhlIGBsZWF2ZURlbGF5YCBpcyBleHBpcmVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZUludGVyYWN0aXZlOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIERvIG5vdCByZXNwb25kIHRvIGxvbmcgcHJlc3MgdG91Y2ggZXZlbnRzLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZVRvdWNoTGlzdGVuZXI6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gd2FpdCBiZWZvcmUgc2hvd2luZyB0aGUgdG9vbHRpcC5cbiAgICogVGhpcyBwcm9wIHdvbid0IGltcGFjdCB0aGUgZW50ZXIgdG91Y2ggZGVsYXkgKGBlbnRlclRvdWNoRGVsYXlgKS5cbiAgICogQGRlZmF1bHQgMTAwXG4gICAqL1xuICBlbnRlckRlbGF5OiBQcm9wVHlwZXMubnVtYmVyLFxuICAvKipcbiAgICogVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gd2FpdCBiZWZvcmUgc2hvd2luZyB0aGUgdG9vbHRpcCB3aGVuIG9uZSB3YXMgYWxyZWFkeSByZWNlbnRseSBvcGVuZWQuXG4gICAqIEBkZWZhdWx0IDBcbiAgICovXG4gIGVudGVyTmV4dERlbGF5OiBQcm9wVHlwZXMubnVtYmVyLFxuICAvKipcbiAgICogVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgYSB1c2VyIG11c3QgdG91Y2ggdGhlIGVsZW1lbnQgYmVmb3JlIHNob3dpbmcgdGhlIHRvb2x0aXAuXG4gICAqIEBkZWZhdWx0IDcwMFxuICAgKi9cbiAgZW50ZXJUb3VjaERlbGF5OiBQcm9wVHlwZXMubnVtYmVyLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgdG9vbHRpcCBmb2xsb3cgdGhlIGN1cnNvciBvdmVyIHRoZSB3cmFwcGVkIGVsZW1lbnQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBmb2xsb3dDdXJzb3I6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhpcyBwcm9wIGlzIHVzZWQgdG8gaGVscCBpbXBsZW1lbnQgdGhlIGFjY2Vzc2liaWxpdHkgbG9naWMuXG4gICAqIElmIHlvdSBkb24ndCBwcm92aWRlIHRoaXMgcHJvcC4gSXQgZmFsbHMgYmFjayB0byBhIHJhbmRvbWx5IGdlbmVyYXRlZCBpZC5cbiAgICovXG4gIGlkOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gd2FpdCBiZWZvcmUgaGlkaW5nIHRoZSB0b29sdGlwLlxuICAgKiBUaGlzIHByb3Agd29uJ3QgaW1wYWN0IHRoZSBsZWF2ZSB0b3VjaCBkZWxheSAoYGxlYXZlVG91Y2hEZWxheWApLlxuICAgKiBAZGVmYXVsdCAwXG4gICAqL1xuICBsZWF2ZURlbGF5OiBQcm9wVHlwZXMubnVtYmVyLFxuICAvKipcbiAgICogVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgYWZ0ZXIgdGhlIHVzZXIgc3RvcHMgdG91Y2hpbmcgYW4gZWxlbWVudCBiZWZvcmUgaGlkaW5nIHRoZSB0b29sdGlwLlxuICAgKiBAZGVmYXVsdCAxNTAwXG4gICAqL1xuICBsZWF2ZVRvdWNoRGVsYXk6IFByb3BUeXBlcy5udW1iZXIsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgcmVxdWVzdHMgdG8gYmUgY2xvc2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0LlN5bnRoZXRpY0V2ZW50fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICovXG4gIG9uQ2xvc2U6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IHJlcXVlc3RzIHRvIGJlIG9wZW4uXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3QuU3ludGhldGljRXZlbnR9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKi9cbiAgb25PcGVuOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpcyBzaG93bi5cbiAgICovXG4gIG9wZW46IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVG9vbHRpcCBwbGFjZW1lbnQuXG4gICAqIEBkZWZhdWx0ICdib3R0b20nXG4gICAqL1xuICBwbGFjZW1lbnQ6IFByb3BUeXBlcy5vbmVPZihbJ2JvdHRvbS1lbmQnLCAnYm90dG9tLXN0YXJ0JywgJ2JvdHRvbScsICdsZWZ0LWVuZCcsICdsZWZ0LXN0YXJ0JywgJ2xlZnQnLCAncmlnaHQtZW5kJywgJ3JpZ2h0LXN0YXJ0JywgJ3JpZ2h0JywgJ3RvcC1lbmQnLCAndG9wLXN0YXJ0JywgJ3RvcCddKSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHBvcHBlci5cbiAgICogQGRlZmF1bHQgUG9wcGVyXG4gICAqL1xuICBQb3BwZXJDb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIFtgUG9wcGVyYF0oL21hdGVyaWFsLXVpL2FwaS9wb3BwZXIvKSBlbGVtZW50LlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgUG9wcGVyUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBUaGUgZXh0cmEgcHJvcHMgZm9yIHRoZSBzbG90IGNvbXBvbmVudHMuXG4gICAqIFlvdSBjYW4gb3ZlcnJpZGUgdGhlIGV4aXN0aW5nIHByb3BzIG9yIGFkZCBuZXcgb25lcy5cbiAgICpcbiAgICogVGhpcyBwcm9wIGlzIGFuIGFsaWFzIGZvciB0aGUgYGNvbXBvbmVudHNQcm9wc2AgcHJvcCwgd2hpY2ggd2lsbCBiZSBkZXByZWNhdGVkIGluIHRoZSBmdXR1cmUuXG4gICAqXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBzbG90UHJvcHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgYXJyb3c6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgcG9wcGVyOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHRvb2x0aXA6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgdHJhbnNpdGlvbjogUHJvcFR5cGVzLm9iamVjdFxuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnRzIHVzZWQgZm9yIGVhY2ggc2xvdCBpbnNpZGUuXG4gICAqXG4gICAqIFRoaXMgcHJvcCBpcyBhbiBhbGlhcyBmb3IgdGhlIGBjb21wb25lbnRzYCBwcm9wLCB3aGljaCB3aWxsIGJlIGRlcHJlY2F0ZWQgaW4gdGhlIGZ1dHVyZS5cbiAgICpcbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIHNsb3RzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGFycm93OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgcG9wcGVyOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgdG9vbHRpcDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIHRyYW5zaXRpb246IFByb3BUeXBlcy5lbGVtZW50VHlwZVxuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgLyoqXG4gICAqIFRvb2x0aXAgdGl0bGUuIFplcm8tbGVuZ3RoIHRpdGxlcyBzdHJpbmcsIHVuZGVmaW5lZCwgbnVsbCBhbmQgZmFsc2UgYXJlIG5ldmVyIGRpc3BsYXllZC5cbiAgICovXG4gIHRpdGxlOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHRyYW5zaXRpb24uXG4gICAqIFtGb2xsb3cgdGhpcyBndWlkZV0oL21hdGVyaWFsLXVpL3RyYW5zaXRpb25zLyN0cmFuc2l0aW9uY29tcG9uZW50LXByb3ApIHRvIGxlYXJuIG1vcmUgYWJvdXQgdGhlIHJlcXVpcmVtZW50cyBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0IEdyb3dcbiAgICovXG4gIFRyYW5zaXRpb25Db21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIHRyYW5zaXRpb24gZWxlbWVudC5cbiAgICogQnkgZGVmYXVsdCwgdGhlIGVsZW1lbnQgaXMgYmFzZWQgb24gdGhpcyBbYFRyYW5zaXRpb25gXShodHRwczovL3JlYWN0Y29tbXVuaXR5Lm9yZy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL3RyYW5zaXRpb24vKSBjb21wb25lbnQuXG4gICAqL1xuICBUcmFuc2l0aW9uUHJvcHM6IFByb3BUeXBlcy5vYmplY3Rcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBUb29sdGlwOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cbmNvbnN0IFRhYmxlQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KCk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBUYWJsZUNvbnRleHQuZGlzcGxheU5hbWUgPSAnVGFibGVDb250ZXh0Jztcbn1cbmV4cG9ydCBkZWZhdWx0IFRhYmxlQ29udGV4dDsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFRhYmxlVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlUYWJsZScsIHNsb3QpO1xufVxuY29uc3QgdGFibGVDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpVGFibGUnLCBbJ3Jvb3QnLCAnc3RpY2t5SGVhZGVyJ10pO1xuZXhwb3J0IGRlZmF1bHQgdGFibGVDbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcInBhZGRpbmdcIiwgXCJzaXplXCIsIFwic3RpY2t5SGVhZGVyXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IFRhYmxlQ29udGV4dCBmcm9tICcuL1RhYmxlQ29udGV4dCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHsgZ2V0VGFibGVVdGlsaXR5Q2xhc3MgfSBmcm9tICcuL3RhYmxlQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXMsXG4gICAgc3RpY2t5SGVhZGVyXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCBzdGlja3lIZWFkZXIgJiYgJ3N0aWNreUhlYWRlciddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0VGFibGVVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcbmNvbnN0IFRhYmxlUm9vdCA9IHN0eWxlZCgndGFibGUnLCB7XG4gIG5hbWU6ICdNdWlUYWJsZScsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5yb290LCBvd25lclN0YXRlLnN0aWNreUhlYWRlciAmJiBzdHlsZXMuc3RpY2t5SGVhZGVyXTtcbiAgfVxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHtcbiAgZGlzcGxheTogJ3RhYmxlJyxcbiAgd2lkdGg6ICcxMDAlJyxcbiAgYm9yZGVyQ29sbGFwc2U6ICdjb2xsYXBzZScsXG4gIGJvcmRlclNwYWNpbmc6IDAsXG4gICcmIGNhcHRpb24nOiBfZXh0ZW5kcyh7fSwgdGhlbWUudHlwb2dyYXBoeS5ib2R5Miwge1xuICAgIHBhZGRpbmc6IHRoZW1lLnNwYWNpbmcoMiksXG4gICAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLnRleHQuc2Vjb25kYXJ5LFxuICAgIHRleHRBbGlnbjogJ2xlZnQnLFxuICAgIGNhcHRpb25TaWRlOiAnYm90dG9tJ1xuICB9KVxufSwgb3duZXJTdGF0ZS5zdGlja3lIZWFkZXIgJiYge1xuICBib3JkZXJDb2xsYXBzZTogJ3NlcGFyYXRlJ1xufSkpO1xuY29uc3QgZGVmYXVsdENvbXBvbmVudCA9ICd0YWJsZSc7XG5jb25zdCBUYWJsZSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFRhYmxlKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlUYWJsZSdcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNvbXBvbmVudCA9IGRlZmF1bHRDb21wb25lbnQsXG4gICAgICBwYWRkaW5nID0gJ25vcm1hbCcsXG4gICAgICBzaXplID0gJ21lZGl1bScsXG4gICAgICBzdGlja3lIZWFkZXIgPSBmYWxzZVxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY29tcG9uZW50LFxuICAgIHBhZGRpbmcsXG4gICAgc2l6ZSxcbiAgICBzdGlja3lIZWFkZXJcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgY29uc3QgdGFibGUgPSBSZWFjdC51c2VNZW1vKCgpID0+ICh7XG4gICAgcGFkZGluZyxcbiAgICBzaXplLFxuICAgIHN0aWNreUhlYWRlclxuICB9KSwgW3BhZGRpbmcsIHNpemUsIHN0aWNreUhlYWRlcl0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goVGFibGVDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHRhYmxlLFxuICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeChUYWJsZVJvb3QsIF9leHRlbmRzKHtcbiAgICAgIGFzOiBjb21wb25lbnQsXG4gICAgICByb2xlOiBjb21wb25lbnQgPT09IGRlZmF1bHRDb21wb25lbnQgPyBudWxsIDogJ3RhYmxlJyxcbiAgICAgIHJlZjogcmVmLFxuICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGVcbiAgICB9LCBvdGhlcikpXG4gIH0pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUYWJsZS5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgdGFibGUsIG5vcm1hbGx5IGBUYWJsZUhlYWRgIGFuZCBgVGFibGVCb2R5YC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgLyoqXG4gICAqIEFsbG93cyBUYWJsZUNlbGxzIHRvIGluaGVyaXQgcGFkZGluZyBvZiB0aGUgVGFibGUuXG4gICAqIEBkZWZhdWx0ICdub3JtYWwnXG4gICAqL1xuICBwYWRkaW5nOiBQcm9wVHlwZXMub25lT2YoWydjaGVja2JveCcsICdub25lJywgJ25vcm1hbCddKSxcbiAgLyoqXG4gICAqIEFsbG93cyBUYWJsZUNlbGxzIHRvIGluaGVyaXQgc2l6ZSBvZiB0aGUgVGFibGUuXG4gICAqIEBkZWZhdWx0ICdtZWRpdW0nXG4gICAqL1xuICBzaXplOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ21lZGl1bScsICdzbWFsbCddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogU2V0IHRoZSBoZWFkZXIgc3RpY2t5LlxuICAgKlxuICAgKiDimqDvuI8gSXQgZG9lc24ndCB3b3JrIHdpdGggSUUxMS5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHN0aWNreUhlYWRlcjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBUYWJsZTsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuY29uc3QgVGFibGVsdmwyQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KCk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBUYWJsZWx2bDJDb250ZXh0LmRpc3BsYXlOYW1lID0gJ1RhYmxlbHZsMkNvbnRleHQnO1xufVxuZXhwb3J0IGRlZmF1bHQgVGFibGVsdmwyQ29udGV4dDsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFRhYmxlQm9keVV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpVGFibGVCb2R5Jywgc2xvdCk7XG59XG5jb25zdCB0YWJsZUJvZHlDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpVGFibGVCb2R5JywgWydyb290J10pO1xuZXhwb3J0IGRlZmF1bHQgdGFibGVCb2R5Q2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgVGFibGVsdmwyQ29udGV4dCBmcm9tICcuLi9UYWJsZS9UYWJsZWx2bDJDb250ZXh0JztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgeyBnZXRUYWJsZUJvZHlVdGlsaXR5Q2xhc3MgfSBmcm9tICcuL3RhYmxlQm9keUNsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldFRhYmxlQm9keVV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuY29uc3QgVGFibGVCb2R5Um9vdCA9IHN0eWxlZCgndGJvZHknLCB7XG4gIG5hbWU6ICdNdWlUYWJsZUJvZHknLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLnJvb3Rcbn0pKHtcbiAgZGlzcGxheTogJ3RhYmxlLXJvdy1ncm91cCdcbn0pO1xuY29uc3QgdGFibGVsdmwyID0ge1xuICB2YXJpYW50OiAnYm9keSdcbn07XG5jb25zdCBkZWZhdWx0Q29tcG9uZW50ID0gJ3Rib2R5JztcbmNvbnN0IFRhYmxlQm9keSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFRhYmxlQm9keShpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpVGFibGVCb2R5J1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgY2xhc3NOYW1lLFxuICAgICAgY29tcG9uZW50ID0gZGVmYXVsdENvbXBvbmVudFxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY29tcG9uZW50XG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChUYWJsZWx2bDJDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHRhYmxlbHZsMixcbiAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goVGFibGVCb2R5Um9vdCwgX2V4dGVuZHMoe1xuICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICAgIGFzOiBjb21wb25lbnQsXG4gICAgICByZWY6IHJlZixcbiAgICAgIHJvbGU6IGNvbXBvbmVudCA9PT0gZGVmYXVsdENvbXBvbmVudCA/IG51bGwgOiAncm93Z3JvdXAnLFxuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZVxuICAgIH0sIG90aGVyKSlcbiAgfSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFRhYmxlQm9keS5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LCBub3JtYWxseSBgVGFibGVSb3dgLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgVGFibGVCb2R5OyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0VGFibGVDZWxsVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlUYWJsZUNlbGwnLCBzbG90KTtcbn1cbmNvbnN0IHRhYmxlQ2VsbENsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlUYWJsZUNlbGwnLCBbJ3Jvb3QnLCAnaGVhZCcsICdib2R5JywgJ2Zvb3RlcicsICdzaXplU21hbGwnLCAnc2l6ZU1lZGl1bScsICdwYWRkaW5nQ2hlY2tib3gnLCAncGFkZGluZ05vbmUnLCAnYWxpZ25MZWZ0JywgJ2FsaWduQ2VudGVyJywgJ2FsaWduUmlnaHQnLCAnYWxpZ25KdXN0aWZ5JywgJ3N0aWNreUhlYWRlciddKTtcbmV4cG9ydCBkZWZhdWx0IHRhYmxlQ2VsbENsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYWxpZ25cIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJwYWRkaW5nXCIsIFwic2NvcGVcIiwgXCJzaXplXCIsIFwic29ydERpcmVjdGlvblwiLCBcInZhcmlhbnRcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgeyBkYXJrZW4sIGFscGhhLCBsaWdodGVuIH0gZnJvbSAnQG11aS9zeXN0ZW0vY29sb3JNYW5pcHVsYXRvcic7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCBUYWJsZUNvbnRleHQgZnJvbSAnLi4vVGFibGUvVGFibGVDb250ZXh0JztcbmltcG9ydCBUYWJsZWx2bDJDb250ZXh0IGZyb20gJy4uL1RhYmxlL1RhYmxlbHZsMkNvbnRleHQnO1xuaW1wb3J0IHVzZVRoZW1lUHJvcHMgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lUHJvcHMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB0YWJsZUNlbGxDbGFzc2VzLCB7IGdldFRhYmxlQ2VsbFV0aWxpdHlDbGFzcyB9IGZyb20gJy4vdGFibGVDZWxsQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXMsXG4gICAgdmFyaWFudCxcbiAgICBhbGlnbixcbiAgICBwYWRkaW5nLFxuICAgIHNpemUsXG4gICAgc3RpY2t5SGVhZGVyXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCB2YXJpYW50LCBzdGlja3lIZWFkZXIgJiYgJ3N0aWNreUhlYWRlcicsIGFsaWduICE9PSAnaW5oZXJpdCcgJiYgYGFsaWduJHtjYXBpdGFsaXplKGFsaWduKX1gLCBwYWRkaW5nICE9PSAnbm9ybWFsJyAmJiBgcGFkZGluZyR7Y2FwaXRhbGl6ZShwYWRkaW5nKX1gLCBgc2l6ZSR7Y2FwaXRhbGl6ZShzaXplKX1gXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldFRhYmxlQ2VsbFV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuY29uc3QgVGFibGVDZWxsUm9vdCA9IHN0eWxlZCgndGQnLCB7XG4gIG5hbWU6ICdNdWlUYWJsZUNlbGwnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgc3R5bGVzW293bmVyU3RhdGUudmFyaWFudF0sIHN0eWxlc1tgc2l6ZSR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLnNpemUpfWBdLCBvd25lclN0YXRlLnBhZGRpbmcgIT09ICdub3JtYWwnICYmIHN0eWxlc1tgcGFkZGluZyR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLnBhZGRpbmcpfWBdLCBvd25lclN0YXRlLmFsaWduICE9PSAnaW5oZXJpdCcgJiYgc3R5bGVzW2BhbGlnbiR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLmFsaWduKX1gXSwgb3duZXJTdGF0ZS5zdGlja3lIZWFkZXIgJiYgc3R5bGVzLnN0aWNreUhlYWRlcl07XG4gIH1cbn0pKCh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiBfZXh0ZW5kcyh7fSwgdGhlbWUudHlwb2dyYXBoeS5ib2R5Miwge1xuICBkaXNwbGF5OiAndGFibGUtY2VsbCcsXG4gIHZlcnRpY2FsQWxpZ246ICdpbmhlcml0JyxcbiAgLy8gV29ya2Fyb3VuZCBmb3IgYSByZW5kZXJpbmcgYnVnIHdpdGggc3Bhbm5lZCBjb2x1bW5zIGluIENocm9tZSA2Mi4wLlxuICAvLyBSZW1vdmVzIHRoZSBhbHBoYSAoc2V0cyBpdCB0byAxKSwgYW5kIGxpZ2h0ZW5zIG9yIGRhcmtlbnMgdGhlIHRoZW1lIGNvbG9yLlxuICBib3JkZXJCb3R0b206IHRoZW1lLnZhcnMgPyBgMXB4IHNvbGlkICR7dGhlbWUudmFycy5wYWxldHRlLlRhYmxlQ2VsbC5ib3JkZXJ9YCA6IGAxcHggc29saWRcbiAgICAke3RoZW1lLnBhbGV0dGUubW9kZSA9PT0gJ2xpZ2h0JyA/IGxpZ2h0ZW4oYWxwaGEodGhlbWUucGFsZXR0ZS5kaXZpZGVyLCAxKSwgMC44OCkgOiBkYXJrZW4oYWxwaGEodGhlbWUucGFsZXR0ZS5kaXZpZGVyLCAxKSwgMC42OCl9YCxcbiAgdGV4dEFsaWduOiAnbGVmdCcsXG4gIHBhZGRpbmc6IDE2XG59LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdoZWFkJyAmJiB7XG4gIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS50ZXh0LnByaW1hcnksXG4gIGxpbmVIZWlnaHQ6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgyNCksXG4gIGZvbnRXZWlnaHQ6IHRoZW1lLnR5cG9ncmFwaHkuZm9udFdlaWdodE1lZGl1bVxufSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnYm9keScgJiYge1xuICBjb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUudGV4dC5wcmltYXJ5XG59LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdmb290ZXInICYmIHtcbiAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLnRleHQuc2Vjb25kYXJ5LFxuICBsaW5lSGVpZ2h0OiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMjEpLFxuICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDEyKVxufSwgb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnICYmIHtcbiAgcGFkZGluZzogJzZweCAxNnB4JyxcbiAgW2AmLiR7dGFibGVDZWxsQ2xhc3Nlcy5wYWRkaW5nQ2hlY2tib3h9YF06IHtcbiAgICB3aWR0aDogMjQsXG4gICAgLy8gcHJldmVudCB0aGUgY2hlY2tib3ggY29sdW1uIGZyb20gZ3Jvd2luZ1xuICAgIHBhZGRpbmc6ICcwIDEycHggMCAxNnB4JyxcbiAgICAnJiA+IConOiB7XG4gICAgICBwYWRkaW5nOiAwXG4gICAgfVxuICB9XG59LCBvd25lclN0YXRlLnBhZGRpbmcgPT09ICdjaGVja2JveCcgJiYge1xuICB3aWR0aDogNDgsXG4gIC8vIHByZXZlbnQgdGhlIGNoZWNrYm94IGNvbHVtbiBmcm9tIGdyb3dpbmdcbiAgcGFkZGluZzogJzAgMCAwIDRweCdcbn0sIG93bmVyU3RhdGUucGFkZGluZyA9PT0gJ25vbmUnICYmIHtcbiAgcGFkZGluZzogMFxufSwgb3duZXJTdGF0ZS5hbGlnbiA9PT0gJ2xlZnQnICYmIHtcbiAgdGV4dEFsaWduOiAnbGVmdCdcbn0sIG93bmVyU3RhdGUuYWxpZ24gPT09ICdjZW50ZXInICYmIHtcbiAgdGV4dEFsaWduOiAnY2VudGVyJ1xufSwgb3duZXJTdGF0ZS5hbGlnbiA9PT0gJ3JpZ2h0JyAmJiB7XG4gIHRleHRBbGlnbjogJ3JpZ2h0JyxcbiAgZmxleERpcmVjdGlvbjogJ3Jvdy1yZXZlcnNlJ1xufSwgb3duZXJTdGF0ZS5hbGlnbiA9PT0gJ2p1c3RpZnknICYmIHtcbiAgdGV4dEFsaWduOiAnanVzdGlmeSdcbn0sIG93bmVyU3RhdGUuc3RpY2t5SGVhZGVyICYmIHtcbiAgcG9zaXRpb246ICdzdGlja3knLFxuICB0b3A6IDAsXG4gIHpJbmRleDogMixcbiAgYmFja2dyb3VuZENvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5iYWNrZ3JvdW5kLmRlZmF1bHRcbn0pKTtcblxuLyoqXG4gKiBUaGUgY29tcG9uZW50IHJlbmRlcnMgYSBgPHRoPmAgZWxlbWVudCB3aGVuIHRoZSBwYXJlbnQgY29udGV4dCBpcyBhIGhlYWRlclxuICogb3Igb3RoZXJ3aXNlIGEgYDx0ZD5gIGVsZW1lbnQuXG4gKi9cbmNvbnN0IFRhYmxlQ2VsbCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFRhYmxlQ2VsbChpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpVGFibGVDZWxsJ1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgYWxpZ24gPSAnaW5oZXJpdCcsXG4gICAgICBjbGFzc05hbWUsXG4gICAgICBjb21wb25lbnQ6IGNvbXBvbmVudFByb3AsXG4gICAgICBwYWRkaW5nOiBwYWRkaW5nUHJvcCxcbiAgICAgIHNjb3BlOiBzY29wZVByb3AsXG4gICAgICBzaXplOiBzaXplUHJvcCxcbiAgICAgIHNvcnREaXJlY3Rpb24sXG4gICAgICB2YXJpYW50OiB2YXJpYW50UHJvcFxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCB0YWJsZSA9IFJlYWN0LnVzZUNvbnRleHQoVGFibGVDb250ZXh0KTtcbiAgY29uc3QgdGFibGVsdmwyID0gUmVhY3QudXNlQ29udGV4dChUYWJsZWx2bDJDb250ZXh0KTtcbiAgY29uc3QgaXNIZWFkQ2VsbCA9IHRhYmxlbHZsMiAmJiB0YWJsZWx2bDIudmFyaWFudCA9PT0gJ2hlYWQnO1xuICBsZXQgY29tcG9uZW50O1xuICBpZiAoY29tcG9uZW50UHJvcCkge1xuICAgIGNvbXBvbmVudCA9IGNvbXBvbmVudFByb3A7XG4gIH0gZWxzZSB7XG4gICAgY29tcG9uZW50ID0gaXNIZWFkQ2VsbCA/ICd0aCcgOiAndGQnO1xuICB9XG4gIGxldCBzY29wZSA9IHNjb3BlUHJvcDtcbiAgLy8gc2NvcGUgaXMgbm90IGEgdmFsaWQgYXR0cmlidXRlIGZvciA8dGQvPiBlbGVtZW50cy5cbiAgLy8gc291cmNlOiBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS90YWJsZXMuaHRtbCN0aGUtdGQtZWxlbWVudFxuICBpZiAoY29tcG9uZW50ID09PSAndGQnKSB7XG4gICAgc2NvcGUgPSB1bmRlZmluZWQ7XG4gIH0gZWxzZSBpZiAoIXNjb3BlICYmIGlzSGVhZENlbGwpIHtcbiAgICBzY29wZSA9ICdjb2wnO1xuICB9XG4gIGNvbnN0IHZhcmlhbnQgPSB2YXJpYW50UHJvcCB8fCB0YWJsZWx2bDIgJiYgdGFibGVsdmwyLnZhcmlhbnQ7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBhbGlnbixcbiAgICBjb21wb25lbnQsXG4gICAgcGFkZGluZzogcGFkZGluZ1Byb3AgfHwgKHRhYmxlICYmIHRhYmxlLnBhZGRpbmcgPyB0YWJsZS5wYWRkaW5nIDogJ25vcm1hbCcpLFxuICAgIHNpemU6IHNpemVQcm9wIHx8ICh0YWJsZSAmJiB0YWJsZS5zaXplID8gdGFibGUuc2l6ZSA6ICdtZWRpdW0nKSxcbiAgICBzb3J0RGlyZWN0aW9uLFxuICAgIHN0aWNreUhlYWRlcjogdmFyaWFudCA9PT0gJ2hlYWQnICYmIHRhYmxlICYmIHRhYmxlLnN0aWNreUhlYWRlcixcbiAgICB2YXJpYW50XG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIGxldCBhcmlhU29ydCA9IG51bGw7XG4gIGlmIChzb3J0RGlyZWN0aW9uKSB7XG4gICAgYXJpYVNvcnQgPSBzb3J0RGlyZWN0aW9uID09PSAnYXNjJyA/ICdhc2NlbmRpbmcnIDogJ2Rlc2NlbmRpbmcnO1xuICB9XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChUYWJsZUNlbGxSb290LCBfZXh0ZW5kcyh7XG4gICAgYXM6IGNvbXBvbmVudCxcbiAgICByZWY6IHJlZixcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIFwiYXJpYS1zb3J0XCI6IGFyaWFTb3J0LFxuICAgIHNjb3BlOiBzY29wZSxcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlXG4gIH0sIG90aGVyKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFRhYmxlQ2VsbC5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBTZXQgdGhlIHRleHQtYWxpZ24gb24gdGhlIHRhYmxlIGNlbGwgY29udGVudC5cbiAgICpcbiAgICogTW9uZXRhcnkgb3IgZ2VuZXJhbGx5IG51bWJlciBmaWVsZHMgKipzaG91bGQgYmUgcmlnaHQgYWxpZ25lZCoqIGFzIHRoYXQgYWxsb3dzXG4gICAqIHlvdSB0byBhZGQgdGhlbSB1cCBxdWlja2x5IGluIHlvdXIgaGVhZCB3aXRob3V0IGhhdmluZyB0byB3b3JyeSBhYm91dCBkZWNpbWFscy5cbiAgICogQGRlZmF1bHQgJ2luaGVyaXQnXG4gICAqL1xuICBhbGlnbjogUHJvcFR5cGVzLm9uZU9mKFsnY2VudGVyJywgJ2luaGVyaXQnLCAnanVzdGlmeScsICdsZWZ0JywgJ3JpZ2h0J10pLFxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgLyoqXG4gICAqIFNldHMgdGhlIHBhZGRpbmcgYXBwbGllZCB0byB0aGUgY2VsbC5cbiAgICogVGhlIHByb3AgZGVmYXVsdHMgdG8gdGhlIHZhbHVlIChgJ2RlZmF1bHQnYCkgaW5oZXJpdGVkIGZyb20gdGhlIHBhcmVudCBUYWJsZSBjb21wb25lbnQuXG4gICAqL1xuICBwYWRkaW5nOiBQcm9wVHlwZXMub25lT2YoWydjaGVja2JveCcsICdub25lJywgJ25vcm1hbCddKSxcbiAgLyoqXG4gICAqIFNldCBzY29wZSBhdHRyaWJ1dGUuXG4gICAqL1xuICBzY29wZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFNwZWNpZnkgdGhlIHNpemUgb2YgdGhlIGNlbGwuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSAoYCdtZWRpdW0nYCkgaW5oZXJpdGVkIGZyb20gdGhlIHBhcmVudCBUYWJsZSBjb21wb25lbnQuXG4gICAqL1xuICBzaXplOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ21lZGl1bScsICdzbWFsbCddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogU2V0IGFyaWEtc29ydCBkaXJlY3Rpb24uXG4gICAqL1xuICBzb3J0RGlyZWN0aW9uOiBQcm9wVHlwZXMub25lT2YoWydhc2MnLCAnZGVzYycsIGZhbHNlXSksXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIC8qKlxuICAgKiBTcGVjaWZ5IHRoZSBjZWxsIHR5cGUuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSBpbmhlcml0ZWQgZnJvbSB0aGUgcGFyZW50IFRhYmxlSGVhZCwgVGFibGVCb2R5LCBvciBUYWJsZUZvb3RlciBjb21wb25lbnRzLlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydib2R5JywgJ2Zvb3RlcicsICdoZWFkJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBUYWJsZUNlbGw7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRUYWJsZUNvbnRhaW5lclV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpVGFibGVDb250YWluZXInLCBzbG90KTtcbn1cbmNvbnN0IHRhYmxlQ29udGFpbmVyQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aVRhYmxlQ29udGFpbmVyJywgWydyb290J10pO1xuZXhwb3J0IGRlZmF1bHQgdGFibGVDb250YWluZXJDbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgeyBnZXRUYWJsZUNvbnRhaW5lclV0aWxpdHlDbGFzcyB9IGZyb20gJy4vdGFibGVDb250YWluZXJDbGFzc2VzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3Nlc1xuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290J11cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRUYWJsZUNvbnRhaW5lclV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuY29uc3QgVGFibGVDb250YWluZXJSb290ID0gc3R5bGVkKCdkaXYnLCB7XG4gIG5hbWU6ICdNdWlUYWJsZUNvbnRhaW5lcicsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMucm9vdFxufSkoe1xuICB3aWR0aDogJzEwMCUnLFxuICBvdmVyZmxvd1g6ICdhdXRvJ1xufSk7XG5jb25zdCBUYWJsZUNvbnRhaW5lciA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFRhYmxlQ29udGFpbmVyKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlUYWJsZUNvbnRhaW5lcidcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNvbXBvbmVudCA9ICdkaXYnXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjb21wb25lbnRcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFRhYmxlQ29udGFpbmVyUm9vdCwgX2V4dGVuZHMoe1xuICAgIHJlZjogcmVmLFxuICAgIGFzOiBjb21wb25lbnQsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlXG4gIH0sIG90aGVyKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFRhYmxlQ29udGFpbmVyLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQsIG5vcm1hbGx5IGBUYWJsZWAuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBUYWJsZUNvbnRhaW5lcjsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFRhYmxlSGVhZFV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpVGFibGVIZWFkJywgc2xvdCk7XG59XG5jb25zdCB0YWJsZUhlYWRDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpVGFibGVIZWFkJywgWydyb290J10pO1xuZXhwb3J0IGRlZmF1bHQgdGFibGVIZWFkQ2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgVGFibGVsdmwyQ29udGV4dCBmcm9tICcuLi9UYWJsZS9UYWJsZWx2bDJDb250ZXh0JztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgeyBnZXRUYWJsZUhlYWRVdGlsaXR5Q2xhc3MgfSBmcm9tICcuL3RhYmxlSGVhZENsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldFRhYmxlSGVhZFV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuY29uc3QgVGFibGVIZWFkUm9vdCA9IHN0eWxlZCgndGhlYWQnLCB7XG4gIG5hbWU6ICdNdWlUYWJsZUhlYWQnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLnJvb3Rcbn0pKHtcbiAgZGlzcGxheTogJ3RhYmxlLWhlYWRlci1ncm91cCdcbn0pO1xuY29uc3QgdGFibGVsdmwyID0ge1xuICB2YXJpYW50OiAnaGVhZCdcbn07XG5jb25zdCBkZWZhdWx0Q29tcG9uZW50ID0gJ3RoZWFkJztcbmNvbnN0IFRhYmxlSGVhZCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFRhYmxlSGVhZChpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpVGFibGVIZWFkJ1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgY2xhc3NOYW1lLFxuICAgICAgY29tcG9uZW50ID0gZGVmYXVsdENvbXBvbmVudFxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY29tcG9uZW50XG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChUYWJsZWx2bDJDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHRhYmxlbHZsMixcbiAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goVGFibGVIZWFkUm9vdCwgX2V4dGVuZHMoe1xuICAgICAgYXM6IGNvbXBvbmVudCxcbiAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgICByZWY6IHJlZixcbiAgICAgIHJvbGU6IGNvbXBvbmVudCA9PT0gZGVmYXVsdENvbXBvbmVudCA/IG51bGwgOiAncm93Z3JvdXAnLFxuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZVxuICAgIH0sIG90aGVyKSlcbiAgfSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFRhYmxlSGVhZC5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LCBub3JtYWxseSBgVGFibGVSb3dgLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgVGFibGVIZWFkOyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0VG9vbGJhclV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpVG9vbGJhcicsIHNsb3QpO1xufVxuY29uc3QgdG9vbGJhckNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlUb29sYmFyJywgWydyb290JywgJ2d1dHRlcnMnLCAncmVndWxhcicsICdkZW5zZSddKTtcbmV4cG9ydCBkZWZhdWx0IHRvb2xiYXJDbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcImRpc2FibGVHdXR0ZXJzXCIsIFwidmFyaWFudFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgeyBnZXRUb29sYmFyVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi90b29sYmFyQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXMsXG4gICAgZGlzYWJsZUd1dHRlcnMsXG4gICAgdmFyaWFudFxuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgIWRpc2FibGVHdXR0ZXJzICYmICdndXR0ZXJzJywgdmFyaWFudF1cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRUb29sYmFyVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBUb29sYmFyUm9vdCA9IHN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnTXVpVG9vbGJhcicsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5yb290LCAhb3duZXJTdGF0ZS5kaXNhYmxlR3V0dGVycyAmJiBzdHlsZXMuZ3V0dGVycywgc3R5bGVzW293bmVyU3RhdGUudmFyaWFudF1dO1xuICB9XG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgZGlzcGxheTogJ2ZsZXgnLFxuICBhbGlnbkl0ZW1zOiAnY2VudGVyJ1xufSwgIW93bmVyU3RhdGUuZGlzYWJsZUd1dHRlcnMgJiYge1xuICBwYWRkaW5nTGVmdDogdGhlbWUuc3BhY2luZygyKSxcbiAgcGFkZGluZ1JpZ2h0OiB0aGVtZS5zcGFjaW5nKDIpLFxuICBbdGhlbWUuYnJlYWtwb2ludHMudXAoJ3NtJyldOiB7XG4gICAgcGFkZGluZ0xlZnQ6IHRoZW1lLnNwYWNpbmcoMyksXG4gICAgcGFkZGluZ1JpZ2h0OiB0aGVtZS5zcGFjaW5nKDMpXG4gIH1cbn0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2RlbnNlJyAmJiB7XG4gIG1pbkhlaWdodDogNDhcbn0pLCAoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4gb3duZXJTdGF0ZS52YXJpYW50ID09PSAncmVndWxhcicgJiYgdGhlbWUubWl4aW5zLnRvb2xiYXIpO1xuY29uc3QgVG9vbGJhciA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFRvb2xiYXIoaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aVRvb2xiYXInXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBjbGFzc05hbWUsXG4gICAgICBjb21wb25lbnQgPSAnZGl2JyxcbiAgICAgIGRpc2FibGVHdXR0ZXJzID0gZmFsc2UsXG4gICAgICB2YXJpYW50ID0gJ3JlZ3VsYXInXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjb21wb25lbnQsXG4gICAgZGlzYWJsZUd1dHRlcnMsXG4gICAgdmFyaWFudFxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goVG9vbGJhclJvb3QsIF9leHRlbmRzKHtcbiAgICBhczogY29tcG9uZW50LFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgcmVmOiByZWYsXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZVxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUb29sYmFyLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIFRoZSBUb29sYmFyIGNoaWxkcmVuLCB1c3VhbGx5IGEgbWl4dHVyZSBvZiBgSWNvbkJ1dHRvbmAsIGBCdXR0b25gIGFuZCBgVHlwb2dyYXBoeWAuXG4gICAqIFRoZSBUb29sYmFyIGlzIGEgZmxleCBjb250YWluZXIsIGFsbG93aW5nIGZsZXggaXRlbSBwcm9wZXJ0aWVzIHRvIGJlIHVzZWQgdG8gbGF5IG91dCB0aGUgY2hpbGRyZW4uXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGRpc2FibGVzIGd1dHRlciBwYWRkaW5nLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZUd1dHRlcnM6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKiBAZGVmYXVsdCAncmVndWxhcidcbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnZGVuc2UnLCAncmVndWxhciddKSwgUHJvcFR5cGVzLnN0cmluZ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgVG9vbGJhcjsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjcmVhdGVTdmdJY29uIGZyb20gJy4uLy4uL3V0aWxzL2NyZWF0ZVN2Z0ljb24nO1xuXG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVTdmdJY29uKCAvKiNfX1BVUkVfXyovX2pzeChcInBhdGhcIiwge1xuICBkOiBcIk0xNS40MSAxNi4wOWwtNC41OC00LjU5IDQuNTgtNC41OUwxNCA1LjVsLTYgNiA2IDZ6XCJcbn0pLCAnS2V5Ym9hcmRBcnJvd0xlZnQnKTsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjcmVhdGVTdmdJY29uIGZyb20gJy4uLy4uL3V0aWxzL2NyZWF0ZVN2Z0ljb24nO1xuXG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVTdmdJY29uKCAvKiNfX1BVUkVfXyovX2pzeChcInBhdGhcIiwge1xuICBkOiBcIk04LjU5IDE2LjM0bDQuNTgtNC41OS00LjU4LTQuNTlMMTAgNS43NWw2IDYtNiA2elwiXG59KSwgJ0tleWJvYXJkQXJyb3dSaWdodCcpOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImJhY2tJY29uQnV0dG9uUHJvcHNcIiwgXCJjb3VudFwiLCBcImRpc2FibGVkXCIsIFwiZ2V0SXRlbUFyaWFMYWJlbFwiLCBcIm5leHRJY29uQnV0dG9uUHJvcHNcIiwgXCJvblBhZ2VDaGFuZ2VcIiwgXCJwYWdlXCIsIFwicm93c1BlclBhZ2VcIiwgXCJzaG93Rmlyc3RCdXR0b25cIiwgXCJzaG93TGFzdEJ1dHRvblwiLCBcInNsb3RzXCIsIFwic2xvdFByb3BzXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IHVzZVJ0bCB9IGZyb20gJ0BtdWkvc3lzdGVtL1J0bFByb3ZpZGVyJztcbmltcG9ydCBLZXlib2FyZEFycm93TGVmdCBmcm9tICcuLi9pbnRlcm5hbC9zdmctaWNvbnMvS2V5Ym9hcmRBcnJvd0xlZnQnO1xuaW1wb3J0IEtleWJvYXJkQXJyb3dSaWdodCBmcm9tICcuLi9pbnRlcm5hbC9zdmctaWNvbnMvS2V5Ym9hcmRBcnJvd1JpZ2h0JztcbmltcG9ydCBJY29uQnV0dG9uIGZyb20gJy4uL0ljb25CdXR0b24nO1xuaW1wb3J0IExhc3RQYWdlSWNvbkRlZmF1bHQgZnJvbSAnLi4vaW50ZXJuYWwvc3ZnLWljb25zL0xhc3RQYWdlJztcbmltcG9ydCBGaXJzdFBhZ2VJY29uRGVmYXVsdCBmcm9tICcuLi9pbnRlcm5hbC9zdmctaWNvbnMvRmlyc3RQYWdlJztcblxuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgVGFibGVQYWdpbmF0aW9uQWN0aW9ucyA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFRhYmxlUGFnaW5hdGlvbkFjdGlvbnMocHJvcHMsIHJlZikge1xuICB2YXIgX3Nsb3RzJGZpcnN0QnV0dG9uLCBfc2xvdHMkbGFzdEJ1dHRvbiwgX3Nsb3RzJG5leHRCdXR0b24sIF9zbG90cyRwcmV2aW91c0J1dHRvbiwgX3Nsb3RzJGZpcnN0QnV0dG9uSWNvLCBfc2xvdHMkbGFzdEJ1dHRvbkljb24sIF9zbG90cyRuZXh0QnV0dG9uSWNvbiwgX3Nsb3RzJHByZXZpb3VzQnV0dG9uMjtcbiAgY29uc3Qge1xuICAgICAgYmFja0ljb25CdXR0b25Qcm9wcyxcbiAgICAgIGNvdW50LFxuICAgICAgZGlzYWJsZWQgPSBmYWxzZSxcbiAgICAgIGdldEl0ZW1BcmlhTGFiZWwsXG4gICAgICBuZXh0SWNvbkJ1dHRvblByb3BzLFxuICAgICAgb25QYWdlQ2hhbmdlLFxuICAgICAgcGFnZSxcbiAgICAgIHJvd3NQZXJQYWdlLFxuICAgICAgc2hvd0ZpcnN0QnV0dG9uLFxuICAgICAgc2hvd0xhc3RCdXR0b24sXG4gICAgICBzbG90cyA9IHt9LFxuICAgICAgc2xvdFByb3BzID0ge31cbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3QgaXNSdGwgPSB1c2VSdGwoKTtcbiAgY29uc3QgaGFuZGxlRmlyc3RQYWdlQnV0dG9uQ2xpY2sgPSBldmVudCA9PiB7XG4gICAgb25QYWdlQ2hhbmdlKGV2ZW50LCAwKTtcbiAgfTtcbiAgY29uc3QgaGFuZGxlQmFja0J1dHRvbkNsaWNrID0gZXZlbnQgPT4ge1xuICAgIG9uUGFnZUNoYW5nZShldmVudCwgcGFnZSAtIDEpO1xuICB9O1xuICBjb25zdCBoYW5kbGVOZXh0QnV0dG9uQ2xpY2sgPSBldmVudCA9PiB7XG4gICAgb25QYWdlQ2hhbmdlKGV2ZW50LCBwYWdlICsgMSk7XG4gIH07XG4gIGNvbnN0IGhhbmRsZUxhc3RQYWdlQnV0dG9uQ2xpY2sgPSBldmVudCA9PiB7XG4gICAgb25QYWdlQ2hhbmdlKGV2ZW50LCBNYXRoLm1heCgwLCBNYXRoLmNlaWwoY291bnQgLyByb3dzUGVyUGFnZSkgLSAxKSk7XG4gIH07XG4gIGNvbnN0IEZpcnN0QnV0dG9uID0gKF9zbG90cyRmaXJzdEJ1dHRvbiA9IHNsb3RzLmZpcnN0QnV0dG9uKSAhPSBudWxsID8gX3Nsb3RzJGZpcnN0QnV0dG9uIDogSWNvbkJ1dHRvbjtcbiAgY29uc3QgTGFzdEJ1dHRvbiA9IChfc2xvdHMkbGFzdEJ1dHRvbiA9IHNsb3RzLmxhc3RCdXR0b24pICE9IG51bGwgPyBfc2xvdHMkbGFzdEJ1dHRvbiA6IEljb25CdXR0b247XG4gIGNvbnN0IE5leHRCdXR0b24gPSAoX3Nsb3RzJG5leHRCdXR0b24gPSBzbG90cy5uZXh0QnV0dG9uKSAhPSBudWxsID8gX3Nsb3RzJG5leHRCdXR0b24gOiBJY29uQnV0dG9uO1xuICBjb25zdCBQcmV2aW91c0J1dHRvbiA9IChfc2xvdHMkcHJldmlvdXNCdXR0b24gPSBzbG90cy5wcmV2aW91c0J1dHRvbikgIT0gbnVsbCA/IF9zbG90cyRwcmV2aW91c0J1dHRvbiA6IEljb25CdXR0b247XG4gIGNvbnN0IEZpcnN0QnV0dG9uSWNvbiA9IChfc2xvdHMkZmlyc3RCdXR0b25JY28gPSBzbG90cy5maXJzdEJ1dHRvbkljb24pICE9IG51bGwgPyBfc2xvdHMkZmlyc3RCdXR0b25JY28gOiBGaXJzdFBhZ2VJY29uRGVmYXVsdDtcbiAgY29uc3QgTGFzdEJ1dHRvbkljb24gPSAoX3Nsb3RzJGxhc3RCdXR0b25JY29uID0gc2xvdHMubGFzdEJ1dHRvbkljb24pICE9IG51bGwgPyBfc2xvdHMkbGFzdEJ1dHRvbkljb24gOiBMYXN0UGFnZUljb25EZWZhdWx0O1xuICBjb25zdCBOZXh0QnV0dG9uSWNvbiA9IChfc2xvdHMkbmV4dEJ1dHRvbkljb24gPSBzbG90cy5uZXh0QnV0dG9uSWNvbikgIT0gbnVsbCA/IF9zbG90cyRuZXh0QnV0dG9uSWNvbiA6IEtleWJvYXJkQXJyb3dSaWdodDtcbiAgY29uc3QgUHJldmlvdXNCdXR0b25JY29uID0gKF9zbG90cyRwcmV2aW91c0J1dHRvbjIgPSBzbG90cy5wcmV2aW91c0J1dHRvbkljb24pICE9IG51bGwgPyBfc2xvdHMkcHJldmlvdXNCdXR0b24yIDogS2V5Ym9hcmRBcnJvd0xlZnQ7XG4gIGNvbnN0IEZpcnN0QnV0dG9uU2xvdCA9IGlzUnRsID8gTGFzdEJ1dHRvbiA6IEZpcnN0QnV0dG9uO1xuICBjb25zdCBQcmV2aW91c0J1dHRvblNsb3QgPSBpc1J0bCA/IE5leHRCdXR0b24gOiBQcmV2aW91c0J1dHRvbjtcbiAgY29uc3QgTmV4dEJ1dHRvblNsb3QgPSBpc1J0bCA/IFByZXZpb3VzQnV0dG9uIDogTmV4dEJ1dHRvbjtcbiAgY29uc3QgTGFzdEJ1dHRvblNsb3QgPSBpc1J0bCA/IEZpcnN0QnV0dG9uIDogTGFzdEJ1dHRvbjtcbiAgY29uc3QgZmlyc3RCdXR0b25TbG90UHJvcHMgPSBpc1J0bCA/IHNsb3RQcm9wcy5sYXN0QnV0dG9uIDogc2xvdFByb3BzLmZpcnN0QnV0dG9uO1xuICBjb25zdCBwcmV2aW91c0J1dHRvblNsb3RQcm9wcyA9IGlzUnRsID8gc2xvdFByb3BzLm5leHRCdXR0b24gOiBzbG90UHJvcHMucHJldmlvdXNCdXR0b247XG4gIGNvbnN0IG5leHRCdXR0b25TbG90UHJvcHMgPSBpc1J0bCA/IHNsb3RQcm9wcy5wcmV2aW91c0J1dHRvbiA6IHNsb3RQcm9wcy5uZXh0QnV0dG9uO1xuICBjb25zdCBsYXN0QnV0dG9uU2xvdFByb3BzID0gaXNSdGwgPyBzbG90UHJvcHMuZmlyc3RCdXR0b24gOiBzbG90UHJvcHMubGFzdEJ1dHRvbjtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4cyhcImRpdlwiLCBfZXh0ZW5kcyh7XG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIsIHtcbiAgICBjaGlsZHJlbjogW3Nob3dGaXJzdEJ1dHRvbiAmJiAvKiNfX1BVUkVfXyovX2pzeChGaXJzdEJ1dHRvblNsb3QsIF9leHRlbmRzKHtcbiAgICAgIG9uQ2xpY2s6IGhhbmRsZUZpcnN0UGFnZUJ1dHRvbkNsaWNrLFxuICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkIHx8IHBhZ2UgPT09IDAsXG4gICAgICBcImFyaWEtbGFiZWxcIjogZ2V0SXRlbUFyaWFMYWJlbCgnZmlyc3QnLCBwYWdlKSxcbiAgICAgIHRpdGxlOiBnZXRJdGVtQXJpYUxhYmVsKCdmaXJzdCcsIHBhZ2UpXG4gICAgfSwgZmlyc3RCdXR0b25TbG90UHJvcHMsIHtcbiAgICAgIGNoaWxkcmVuOiBpc1J0bCA/IC8qI19fUFVSRV9fKi9fanN4KExhc3RCdXR0b25JY29uLCBfZXh0ZW5kcyh7fSwgc2xvdFByb3BzLmxhc3RCdXR0b25JY29uKSkgOiAvKiNfX1BVUkVfXyovX2pzeChGaXJzdEJ1dHRvbkljb24sIF9leHRlbmRzKHt9LCBzbG90UHJvcHMuZmlyc3RCdXR0b25JY29uKSlcbiAgICB9KSksIC8qI19fUFVSRV9fKi9fanN4KFByZXZpb3VzQnV0dG9uU2xvdCwgX2V4dGVuZHMoe1xuICAgICAgb25DbGljazogaGFuZGxlQmFja0J1dHRvbkNsaWNrLFxuICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkIHx8IHBhZ2UgPT09IDAsXG4gICAgICBjb2xvcjogXCJpbmhlcml0XCIsXG4gICAgICBcImFyaWEtbGFiZWxcIjogZ2V0SXRlbUFyaWFMYWJlbCgncHJldmlvdXMnLCBwYWdlKSxcbiAgICAgIHRpdGxlOiBnZXRJdGVtQXJpYUxhYmVsKCdwcmV2aW91cycsIHBhZ2UpXG4gICAgfSwgcHJldmlvdXNCdXR0b25TbG90UHJvcHMgIT0gbnVsbCA/IHByZXZpb3VzQnV0dG9uU2xvdFByb3BzIDogYmFja0ljb25CdXR0b25Qcm9wcywge1xuICAgICAgY2hpbGRyZW46IGlzUnRsID8gLyojX19QVVJFX18qL19qc3goTmV4dEJ1dHRvbkljb24sIF9leHRlbmRzKHt9LCBzbG90UHJvcHMubmV4dEJ1dHRvbkljb24pKSA6IC8qI19fUFVSRV9fKi9fanN4KFByZXZpb3VzQnV0dG9uSWNvbiwgX2V4dGVuZHMoe30sIHNsb3RQcm9wcy5wcmV2aW91c0J1dHRvbkljb24pKVxuICAgIH0pKSwgLyojX19QVVJFX18qL19qc3goTmV4dEJ1dHRvblNsb3QsIF9leHRlbmRzKHtcbiAgICAgIG9uQ2xpY2s6IGhhbmRsZU5leHRCdXR0b25DbGljayxcbiAgICAgIGRpc2FibGVkOiBkaXNhYmxlZCB8fCAoY291bnQgIT09IC0xID8gcGFnZSA+PSBNYXRoLmNlaWwoY291bnQgLyByb3dzUGVyUGFnZSkgLSAxIDogZmFsc2UpLFxuICAgICAgY29sb3I6IFwiaW5oZXJpdFwiLFxuICAgICAgXCJhcmlhLWxhYmVsXCI6IGdldEl0ZW1BcmlhTGFiZWwoJ25leHQnLCBwYWdlKSxcbiAgICAgIHRpdGxlOiBnZXRJdGVtQXJpYUxhYmVsKCduZXh0JywgcGFnZSlcbiAgICB9LCBuZXh0QnV0dG9uU2xvdFByb3BzICE9IG51bGwgPyBuZXh0QnV0dG9uU2xvdFByb3BzIDogbmV4dEljb25CdXR0b25Qcm9wcywge1xuICAgICAgY2hpbGRyZW46IGlzUnRsID8gLyojX19QVVJFX18qL19qc3goUHJldmlvdXNCdXR0b25JY29uLCBfZXh0ZW5kcyh7fSwgc2xvdFByb3BzLnByZXZpb3VzQnV0dG9uSWNvbikpIDogLyojX19QVVJFX18qL19qc3goTmV4dEJ1dHRvbkljb24sIF9leHRlbmRzKHt9LCBzbG90UHJvcHMubmV4dEJ1dHRvbkljb24pKVxuICAgIH0pKSwgc2hvd0xhc3RCdXR0b24gJiYgLyojX19QVVJFX18qL19qc3goTGFzdEJ1dHRvblNsb3QsIF9leHRlbmRzKHtcbiAgICAgIG9uQ2xpY2s6IGhhbmRsZUxhc3RQYWdlQnV0dG9uQ2xpY2ssXG4gICAgICBkaXNhYmxlZDogZGlzYWJsZWQgfHwgcGFnZSA+PSBNYXRoLmNlaWwoY291bnQgLyByb3dzUGVyUGFnZSkgLSAxLFxuICAgICAgXCJhcmlhLWxhYmVsXCI6IGdldEl0ZW1BcmlhTGFiZWwoJ2xhc3QnLCBwYWdlKSxcbiAgICAgIHRpdGxlOiBnZXRJdGVtQXJpYUxhYmVsKCdsYXN0JywgcGFnZSlcbiAgICB9LCBsYXN0QnV0dG9uU2xvdFByb3BzLCB7XG4gICAgICBjaGlsZHJlbjogaXNSdGwgPyAvKiNfX1BVUkVfXyovX2pzeChGaXJzdEJ1dHRvbkljb24sIF9leHRlbmRzKHt9LCBzbG90UHJvcHMuZmlyc3RCdXR0b25JY29uKSkgOiAvKiNfX1BVUkVfXyovX2pzeChMYXN0QnV0dG9uSWNvbiwgX2V4dGVuZHMoe30sIHNsb3RQcm9wcy5sYXN0QnV0dG9uSWNvbikpXG4gICAgfSkpXVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFRhYmxlUGFnaW5hdGlvbkFjdGlvbnMucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgYmFjayBhcnJvdyBbYEljb25CdXR0b25gXSgvbWF0ZXJpYWwtdWkvYXBpL2ljb24tYnV0dG9uLykgZWxlbWVudC5cbiAgICovXG4gIGJhY2tJY29uQnV0dG9uUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBUaGUgdG90YWwgbnVtYmVyIG9mIHJvd3MuXG4gICAqL1xuICBjb3VudDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIGRpc2FibGVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogQWNjZXB0cyBhIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYSBzdHJpbmcgdmFsdWUgdGhhdCBwcm92aWRlcyBhIHVzZXItZnJpZW5kbHkgbmFtZSBmb3IgdGhlIGN1cnJlbnQgcGFnZS5cbiAgICpcbiAgICogRm9yIGxvY2FsaXphdGlvbiBwdXJwb3NlcywgeW91IGNhbiB1c2UgdGhlIHByb3ZpZGVkIFt0cmFuc2xhdGlvbnNdKC9tYXRlcmlhbC11aS9ndWlkZXMvbG9jYWxpemF0aW9uLykuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIFRoZSBsaW5rIG9yIGJ1dHRvbiB0eXBlIHRvIGZvcm1hdCAoJ3BhZ2UnIHwgJ2ZpcnN0JyB8ICdsYXN0JyB8ICduZXh0JyB8ICdwcmV2aW91cycpLiBEZWZhdWx0cyB0byAncGFnZScuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBwYWdlIFRoZSBwYWdlIG51bWJlciB0byBmb3JtYXQuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICBnZXRJdGVtQXJpYUxhYmVsOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgbmV4dCBhcnJvdyBbYEljb25CdXR0b25gXSgvbWF0ZXJpYWwtdWkvYXBpL2ljb24tYnV0dG9uLykgZWxlbWVudC5cbiAgICovXG4gIG5leHRJY29uQnV0dG9uUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBwYWdlIGlzIGNoYW5nZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHBhZ2UgVGhlIHBhZ2Ugc2VsZWN0ZWQuXG4gICAqL1xuICBvblBhZ2VDaGFuZ2U6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIC8qKlxuICAgKiBUaGUgemVyby1iYXNlZCBpbmRleCBvZiB0aGUgY3VycmVudCBwYWdlLlxuICAgKi9cbiAgcGFnZTogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogVGhlIG51bWJlciBvZiByb3dzIHBlciBwYWdlLlxuICAgKi9cbiAgcm93c1BlclBhZ2U6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgc2hvdyB0aGUgZmlyc3QtcGFnZSBidXR0b24uXG4gICAqL1xuICBzaG93Rmlyc3RCdXR0b246IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHNob3cgdGhlIGxhc3QtcGFnZSBidXR0b24uXG4gICAqL1xuICBzaG93TGFzdEJ1dHRvbjogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgLyoqXG4gICAqIFRoZSBwcm9wcyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlIHRoZSBUYWJsZVBhZ2luYXRpb25BY3Rpb25zLlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgc2xvdFByb3BzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGZpcnN0QnV0dG9uOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGZpcnN0QnV0dG9uSWNvbjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBsYXN0QnV0dG9uOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGxhc3RCdXR0b25JY29uOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIG5leHRCdXR0b246IFByb3BUeXBlcy5vYmplY3QsXG4gICAgbmV4dEJ1dHRvbkljb246IFByb3BUeXBlcy5vYmplY3QsXG4gICAgcHJldmlvdXNCdXR0b246IFByb3BUeXBlcy5vYmplY3QsXG4gICAgcHJldmlvdXNCdXR0b25JY29uOiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudHMgdXNlZCBmb3IgZWFjaCBzbG90IGluc2lkZSB0aGUgVGFibGVQYWdpbmF0aW9uQWN0aW9ucy5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIHNsb3RzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGZpcnN0QnV0dG9uOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgZmlyc3RCdXR0b25JY29uOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgbGFzdEJ1dHRvbjogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIGxhc3RCdXR0b25JY29uOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgbmV4dEJ1dHRvbjogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIG5leHRCdXR0b25JY29uOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgcHJldmlvdXNCdXR0b246IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICBwcmV2aW91c0J1dHRvbkljb246IFByb3BUeXBlcy5lbGVtZW50VHlwZVxuICB9KVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IFRhYmxlUGFnaW5hdGlvbkFjdGlvbnM7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRUYWJsZVBhZ2luYXRpb25VdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aVRhYmxlUGFnaW5hdGlvbicsIHNsb3QpO1xufVxuY29uc3QgdGFibGVQYWdpbmF0aW9uQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aVRhYmxlUGFnaW5hdGlvbicsIFsncm9vdCcsICd0b29sYmFyJywgJ3NwYWNlcicsICdzZWxlY3RMYWJlbCcsICdzZWxlY3RSb290JywgJ3NlbGVjdCcsICdzZWxlY3RJY29uJywgJ2lucHV0JywgJ21lbnVJdGVtJywgJ2Rpc3BsYXllZFJvd3MnLCAnYWN0aW9ucyddKTtcbmV4cG9ydCBkZWZhdWx0IHRhYmxlUGFnaW5hdGlvbkNsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xudmFyIF9JbnB1dEJhc2U7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJBY3Rpb25zQ29tcG9uZW50XCIsIFwiYmFja0ljb25CdXR0b25Qcm9wc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbFNwYW5cIiwgXCJjb21wb25lbnRcIiwgXCJjb3VudFwiLCBcImRpc2FibGVkXCIsIFwiZ2V0SXRlbUFyaWFMYWJlbFwiLCBcImxhYmVsRGlzcGxheWVkUm93c1wiLCBcImxhYmVsUm93c1BlclBhZ2VcIiwgXCJuZXh0SWNvbkJ1dHRvblByb3BzXCIsIFwib25QYWdlQ2hhbmdlXCIsIFwib25Sb3dzUGVyUGFnZUNoYW5nZVwiLCBcInBhZ2VcIiwgXCJyb3dzUGVyUGFnZVwiLCBcInJvd3NQZXJQYWdlT3B0aW9uc1wiLCBcIlNlbGVjdFByb3BzXCIsIFwic2hvd0ZpcnN0QnV0dG9uXCIsIFwic2hvd0xhc3RCdXR0b25cIiwgXCJzbG90UHJvcHNcIiwgXCJzbG90c1wiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBpbnRlZ2VyUHJvcFR5cGUgZnJvbSAnQG11aS91dGlscy9pbnRlZ2VyUHJvcFR5cGUnO1xuaW1wb3J0IGNoYWluUHJvcFR5cGVzIGZyb20gJ0BtdWkvdXRpbHMvY2hhaW5Qcm9wVHlwZXMnO1xuaW1wb3J0IHsgaXNIb3N0Q29tcG9uZW50IH0gZnJvbSAnQG11aS9iYXNlL3V0aWxzJztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgSW5wdXRCYXNlIGZyb20gJy4uL0lucHV0QmFzZSc7XG5pbXBvcnQgTWVudUl0ZW0gZnJvbSAnLi4vTWVudUl0ZW0nO1xuaW1wb3J0IFNlbGVjdCBmcm9tICcuLi9TZWxlY3QnO1xuaW1wb3J0IFRhYmxlQ2VsbCBmcm9tICcuLi9UYWJsZUNlbGwnO1xuaW1wb3J0IFRvb2xiYXIgZnJvbSAnLi4vVG9vbGJhcic7XG5pbXBvcnQgVGFibGVQYWdpbmF0aW9uQWN0aW9ucyBmcm9tICcuL1RhYmxlUGFnaW5hdGlvbkFjdGlvbnMnO1xuaW1wb3J0IHVzZUlkIGZyb20gJy4uL3V0aWxzL3VzZUlkJztcbmltcG9ydCB0YWJsZVBhZ2luYXRpb25DbGFzc2VzLCB7IGdldFRhYmxlUGFnaW5hdGlvblV0aWxpdHlDbGFzcyB9IGZyb20gJy4vdGFibGVQYWdpbmF0aW9uQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsgY3JlYXRlRWxlbWVudCBhcyBfY3JlYXRlRWxlbWVudCB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgVGFibGVQYWdpbmF0aW9uUm9vdCA9IHN0eWxlZChUYWJsZUNlbGwsIHtcbiAgbmFtZTogJ011aVRhYmxlUGFnaW5hdGlvbicsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMucm9vdFxufSkoKHtcbiAgdGhlbWVcbn0pID0+ICh7XG4gIG92ZXJmbG93OiAnYXV0bycsXG4gIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS50ZXh0LnByaW1hcnksXG4gIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTQpLFxuICAvLyBJbmNyZWFzZSB0aGUgc3BlY2lmaWNpdHkgdG8gb3ZlcnJpZGUgVGFibGVDZWxsLlxuICAnJjpsYXN0LWNoaWxkJzoge1xuICAgIHBhZGRpbmc6IDBcbiAgfVxufSkpO1xuY29uc3QgVGFibGVQYWdpbmF0aW9uVG9vbGJhciA9IHN0eWxlZChUb29sYmFyLCB7XG4gIG5hbWU6ICdNdWlUYWJsZVBhZ2luYXRpb24nLFxuICBzbG90OiAnVG9vbGJhcicsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gX2V4dGVuZHMoe1xuICAgIFtgJiAuJHt0YWJsZVBhZ2luYXRpb25DbGFzc2VzLmFjdGlvbnN9YF06IHN0eWxlcy5hY3Rpb25zXG4gIH0sIHN0eWxlcy50b29sYmFyKVxufSkoKHtcbiAgdGhlbWVcbn0pID0+ICh7XG4gIG1pbkhlaWdodDogNTIsXG4gIHBhZGRpbmdSaWdodDogMixcbiAgW2Ake3RoZW1lLmJyZWFrcG9pbnRzLnVwKCd4cycpfSBhbmQgKG9yaWVudGF0aW9uOiBsYW5kc2NhcGUpYF06IHtcbiAgICBtaW5IZWlnaHQ6IDUyXG4gIH0sXG4gIFt0aGVtZS5icmVha3BvaW50cy51cCgnc20nKV06IHtcbiAgICBtaW5IZWlnaHQ6IDUyLFxuICAgIHBhZGRpbmdSaWdodDogMlxuICB9LFxuICBbYCYgLiR7dGFibGVQYWdpbmF0aW9uQ2xhc3Nlcy5hY3Rpb25zfWBdOiB7XG4gICAgZmxleFNocmluazogMCxcbiAgICBtYXJnaW5MZWZ0OiAyMFxuICB9XG59KSk7XG5jb25zdCBUYWJsZVBhZ2luYXRpb25TcGFjZXIgPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aVRhYmxlUGFnaW5hdGlvbicsXG4gIHNsb3Q6ICdTcGFjZXInLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5zcGFjZXJcbn0pKHtcbiAgZmxleDogJzEgMSAxMDAlJ1xufSk7XG5jb25zdCBUYWJsZVBhZ2luYXRpb25TZWxlY3RMYWJlbCA9IHN0eWxlZCgncCcsIHtcbiAgbmFtZTogJ011aVRhYmxlUGFnaW5hdGlvbicsXG4gIHNsb3Q6ICdTZWxlY3RMYWJlbCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLnNlbGVjdExhYmVsXG59KSgoe1xuICB0aGVtZVxufSkgPT4gX2V4dGVuZHMoe30sIHRoZW1lLnR5cG9ncmFwaHkuYm9keTIsIHtcbiAgZmxleFNocmluazogMFxufSkpO1xuY29uc3QgVGFibGVQYWdpbmF0aW9uU2VsZWN0ID0gc3R5bGVkKFNlbGVjdCwge1xuICBuYW1lOiAnTXVpVGFibGVQYWdpbmF0aW9uJyxcbiAgc2xvdDogJ1NlbGVjdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gX2V4dGVuZHMoe1xuICAgIFtgJiAuJHt0YWJsZVBhZ2luYXRpb25DbGFzc2VzLnNlbGVjdEljb259YF06IHN0eWxlcy5zZWxlY3RJY29uLFxuICAgIFtgJiAuJHt0YWJsZVBhZ2luYXRpb25DbGFzc2VzLnNlbGVjdH1gXTogc3R5bGVzLnNlbGVjdFxuICB9LCBzdHlsZXMuaW5wdXQsIHN0eWxlcy5zZWxlY3RSb290KVxufSkoe1xuICBjb2xvcjogJ2luaGVyaXQnLFxuICBmb250U2l6ZTogJ2luaGVyaXQnLFxuICBmbGV4U2hyaW5rOiAwLFxuICBtYXJnaW5SaWdodDogMzIsXG4gIG1hcmdpbkxlZnQ6IDgsXG4gIFtgJiAuJHt0YWJsZVBhZ2luYXRpb25DbGFzc2VzLnNlbGVjdH1gXToge1xuICAgIHBhZGRpbmdMZWZ0OiA4LFxuICAgIHBhZGRpbmdSaWdodDogMjQsXG4gICAgdGV4dEFsaWduOiAncmlnaHQnLFxuICAgIHRleHRBbGlnbkxhc3Q6ICdyaWdodCcgLy8gQWxpZ24gPHNlbGVjdD4gb24gQ2hyb21lLlxuICB9XG59KTtcbmNvbnN0IFRhYmxlUGFnaW5hdGlvbk1lbnVJdGVtID0gc3R5bGVkKE1lbnVJdGVtLCB7XG4gIG5hbWU6ICdNdWlUYWJsZVBhZ2luYXRpb24nLFxuICBzbG90OiAnTWVudUl0ZW0nLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5tZW51SXRlbVxufSkoe30pO1xuY29uc3QgVGFibGVQYWdpbmF0aW9uRGlzcGxheWVkUm93cyA9IHN0eWxlZCgncCcsIHtcbiAgbmFtZTogJ011aVRhYmxlUGFnaW5hdGlvbicsXG4gIHNsb3Q6ICdEaXNwbGF5ZWRSb3dzJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMuZGlzcGxheWVkUm93c1xufSkoKHtcbiAgdGhlbWVcbn0pID0+IF9leHRlbmRzKHt9LCB0aGVtZS50eXBvZ3JhcGh5LmJvZHkyLCB7XG4gIGZsZXhTaHJpbms6IDBcbn0pKTtcbmZ1bmN0aW9uIGRlZmF1bHRMYWJlbERpc3BsYXllZFJvd3Moe1xuICBmcm9tLFxuICB0byxcbiAgY291bnRcbn0pIHtcbiAgcmV0dXJuIGAke2Zyb2194oCTJHt0b30gb2YgJHtjb3VudCAhPT0gLTEgPyBjb3VudCA6IGBtb3JlIHRoYW4gJHt0b31gfWA7XG59XG5mdW5jdGlvbiBkZWZhdWx0R2V0QXJpYUxhYmVsKHR5cGUpIHtcbiAgcmV0dXJuIGBHbyB0byAke3R5cGV9IHBhZ2VgO1xufVxuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXNcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCddLFxuICAgIHRvb2xiYXI6IFsndG9vbGJhciddLFxuICAgIHNwYWNlcjogWydzcGFjZXInXSxcbiAgICBzZWxlY3RMYWJlbDogWydzZWxlY3RMYWJlbCddLFxuICAgIHNlbGVjdDogWydzZWxlY3QnXSxcbiAgICBpbnB1dDogWydpbnB1dCddLFxuICAgIHNlbGVjdEljb246IFsnc2VsZWN0SWNvbiddLFxuICAgIG1lbnVJdGVtOiBbJ21lbnVJdGVtJ10sXG4gICAgZGlzcGxheWVkUm93czogWydkaXNwbGF5ZWRSb3dzJ10sXG4gICAgYWN0aW9uczogWydhY3Rpb25zJ11cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRUYWJsZVBhZ2luYXRpb25VdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcblxuLyoqXG4gKiBBIGBUYWJsZUNlbGxgIGJhc2VkIGNvbXBvbmVudCBmb3IgcGxhY2luZyBpbnNpZGUgYFRhYmxlRm9vdGVyYCBmb3IgcGFnaW5hdGlvbi5cbiAqL1xuY29uc3QgVGFibGVQYWdpbmF0aW9uID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gVGFibGVQYWdpbmF0aW9uKGluUHJvcHMsIHJlZikge1xuICB2YXIgX3Nsb3RQcm9wcyRzZWxlY3Q7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aVRhYmxlUGFnaW5hdGlvbidcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIEFjdGlvbnNDb21wb25lbnQgPSBUYWJsZVBhZ2luYXRpb25BY3Rpb25zLFxuICAgICAgYmFja0ljb25CdXR0b25Qcm9wcyxcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNvbFNwYW46IGNvbFNwYW5Qcm9wLFxuICAgICAgY29tcG9uZW50ID0gVGFibGVDZWxsLFxuICAgICAgY291bnQsXG4gICAgICBkaXNhYmxlZCA9IGZhbHNlLFxuICAgICAgZ2V0SXRlbUFyaWFMYWJlbCA9IGRlZmF1bHRHZXRBcmlhTGFiZWwsXG4gICAgICBsYWJlbERpc3BsYXllZFJvd3MgPSBkZWZhdWx0TGFiZWxEaXNwbGF5ZWRSb3dzLFxuICAgICAgbGFiZWxSb3dzUGVyUGFnZSA9ICdSb3dzIHBlciBwYWdlOicsXG4gICAgICBuZXh0SWNvbkJ1dHRvblByb3BzLFxuICAgICAgb25QYWdlQ2hhbmdlLFxuICAgICAgb25Sb3dzUGVyUGFnZUNoYW5nZSxcbiAgICAgIHBhZ2UsXG4gICAgICByb3dzUGVyUGFnZSxcbiAgICAgIHJvd3NQZXJQYWdlT3B0aW9ucyA9IFsxMCwgMjUsIDUwLCAxMDBdLFxuICAgICAgU2VsZWN0UHJvcHMgPSB7fSxcbiAgICAgIHNob3dGaXJzdEJ1dHRvbiA9IGZhbHNlLFxuICAgICAgc2hvd0xhc3RCdXR0b24gPSBmYWxzZSxcbiAgICAgIHNsb3RQcm9wcyA9IHt9LFxuICAgICAgc2xvdHMgPSB7fVxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBvd25lclN0YXRlID0gcHJvcHM7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgY29uc3Qgc2VsZWN0UHJvcHMgPSAoX3Nsb3RQcm9wcyRzZWxlY3QgPSBzbG90UHJvcHMgPT0gbnVsbCA/IHZvaWQgMCA6IHNsb3RQcm9wcy5zZWxlY3QpICE9IG51bGwgPyBfc2xvdFByb3BzJHNlbGVjdCA6IFNlbGVjdFByb3BzO1xuICBjb25zdCBNZW51SXRlbUNvbXBvbmVudCA9IHNlbGVjdFByb3BzLm5hdGl2ZSA/ICdvcHRpb24nIDogVGFibGVQYWdpbmF0aW9uTWVudUl0ZW07XG4gIGxldCBjb2xTcGFuO1xuICBpZiAoY29tcG9uZW50ID09PSBUYWJsZUNlbGwgfHwgY29tcG9uZW50ID09PSAndGQnKSB7XG4gICAgY29sU3BhbiA9IGNvbFNwYW5Qcm9wIHx8IDEwMDA7IC8vIGNvbC1zcGFuIG92ZXIgZXZlcnl0aGluZ1xuICB9XG4gIGNvbnN0IHNlbGVjdElkID0gdXNlSWQoc2VsZWN0UHJvcHMuaWQpO1xuICBjb25zdCBsYWJlbElkID0gdXNlSWQoc2VsZWN0UHJvcHMubGFiZWxJZCk7XG4gIGNvbnN0IGdldExhYmVsRGlzcGxheWVkUm93c1RvID0gKCkgPT4ge1xuICAgIGlmIChjb3VudCA9PT0gLTEpIHtcbiAgICAgIHJldHVybiAocGFnZSArIDEpICogcm93c1BlclBhZ2U7XG4gICAgfVxuICAgIHJldHVybiByb3dzUGVyUGFnZSA9PT0gLTEgPyBjb3VudCA6IE1hdGgubWluKGNvdW50LCAocGFnZSArIDEpICogcm93c1BlclBhZ2UpO1xuICB9O1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goVGFibGVQYWdpbmF0aW9uUm9vdCwgX2V4dGVuZHMoe1xuICAgIGNvbFNwYW46IGNvbFNwYW4sXG4gICAgcmVmOiByZWYsXG4gICAgYXM6IGNvbXBvbmVudCxcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSlcbiAgfSwgb3RoZXIsIHtcbiAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3hzKFRhYmxlUGFnaW5hdGlvblRvb2xiYXIsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy50b29sYmFyLFxuICAgICAgY2hpbGRyZW46IFsvKiNfX1BVUkVfXyovX2pzeChUYWJsZVBhZ2luYXRpb25TcGFjZXIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLnNwYWNlclxuICAgICAgfSksIHJvd3NQZXJQYWdlT3B0aW9ucy5sZW5ndGggPiAxICYmIC8qI19fUFVSRV9fKi9fanN4KFRhYmxlUGFnaW5hdGlvblNlbGVjdExhYmVsLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5zZWxlY3RMYWJlbCxcbiAgICAgICAgaWQ6IGxhYmVsSWQsXG4gICAgICAgIGNoaWxkcmVuOiBsYWJlbFJvd3NQZXJQYWdlXG4gICAgICB9KSwgcm93c1BlclBhZ2VPcHRpb25zLmxlbmd0aCA+IDEgJiYgLyojX19QVVJFX18qL19qc3goVGFibGVQYWdpbmF0aW9uU2VsZWN0LCBfZXh0ZW5kcyh7XG4gICAgICAgIHZhcmlhbnQ6IFwic3RhbmRhcmRcIlxuICAgICAgfSwgIXNlbGVjdFByb3BzLnZhcmlhbnQgJiYge1xuICAgICAgICBpbnB1dDogX0lucHV0QmFzZSB8fCAoX0lucHV0QmFzZSA9IC8qI19fUFVSRV9fKi9fanN4KElucHV0QmFzZSwge30pKVxuICAgICAgfSwge1xuICAgICAgICB2YWx1ZTogcm93c1BlclBhZ2UsXG4gICAgICAgIG9uQ2hhbmdlOiBvblJvd3NQZXJQYWdlQ2hhbmdlLFxuICAgICAgICBpZDogc2VsZWN0SWQsXG4gICAgICAgIGxhYmVsSWQ6IGxhYmVsSWRcbiAgICAgIH0sIHNlbGVjdFByb3BzLCB7XG4gICAgICAgIGNsYXNzZXM6IF9leHRlbmRzKHt9LCBzZWxlY3RQcm9wcy5jbGFzc2VzLCB7XG4gICAgICAgICAgLy8gVE9ETyB2NSByZW1vdmUgYGNsYXNzZXMuaW5wdXRgXG4gICAgICAgICAgcm9vdDogY2xzeChjbGFzc2VzLmlucHV0LCBjbGFzc2VzLnNlbGVjdFJvb3QsIChzZWxlY3RQcm9wcy5jbGFzc2VzIHx8IHt9KS5yb290KSxcbiAgICAgICAgICBzZWxlY3Q6IGNsc3goY2xhc3Nlcy5zZWxlY3QsIChzZWxlY3RQcm9wcy5jbGFzc2VzIHx8IHt9KS5zZWxlY3QpLFxuICAgICAgICAgIC8vIFRPRE8gdjUgcmVtb3ZlIGBzZWxlY3RJY29uYFxuICAgICAgICAgIGljb246IGNsc3goY2xhc3Nlcy5zZWxlY3RJY29uLCAoc2VsZWN0UHJvcHMuY2xhc3NlcyB8fCB7fSkuaWNvbilcbiAgICAgICAgfSksXG4gICAgICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICAgICAgY2hpbGRyZW46IHJvd3NQZXJQYWdlT3B0aW9ucy5tYXAocm93c1BlclBhZ2VPcHRpb24gPT4gLyojX19QVVJFX18qL19jcmVhdGVFbGVtZW50KE1lbnVJdGVtQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgIWlzSG9zdENvbXBvbmVudChNZW51SXRlbUNvbXBvbmVudCkgJiYge1xuICAgICAgICAgIG93bmVyU3RhdGVcbiAgICAgICAgfSwge1xuICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5tZW51SXRlbSxcbiAgICAgICAgICBrZXk6IHJvd3NQZXJQYWdlT3B0aW9uLmxhYmVsID8gcm93c1BlclBhZ2VPcHRpb24ubGFiZWwgOiByb3dzUGVyUGFnZU9wdGlvbixcbiAgICAgICAgICB2YWx1ZTogcm93c1BlclBhZ2VPcHRpb24udmFsdWUgPyByb3dzUGVyUGFnZU9wdGlvbi52YWx1ZSA6IHJvd3NQZXJQYWdlT3B0aW9uXG4gICAgICAgIH0pLCByb3dzUGVyUGFnZU9wdGlvbi5sYWJlbCA/IHJvd3NQZXJQYWdlT3B0aW9uLmxhYmVsIDogcm93c1BlclBhZ2VPcHRpb24pKVxuICAgICAgfSkpLCAvKiNfX1BVUkVfXyovX2pzeChUYWJsZVBhZ2luYXRpb25EaXNwbGF5ZWRSb3dzLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5kaXNwbGF5ZWRSb3dzLFxuICAgICAgICBjaGlsZHJlbjogbGFiZWxEaXNwbGF5ZWRSb3dzKHtcbiAgICAgICAgICBmcm9tOiBjb3VudCA9PT0gMCA/IDAgOiBwYWdlICogcm93c1BlclBhZ2UgKyAxLFxuICAgICAgICAgIHRvOiBnZXRMYWJlbERpc3BsYXllZFJvd3NUbygpLFxuICAgICAgICAgIGNvdW50OiBjb3VudCA9PT0gLTEgPyAtMSA6IGNvdW50LFxuICAgICAgICAgIHBhZ2VcbiAgICAgICAgfSlcbiAgICAgIH0pLCAvKiNfX1BVUkVfXyovX2pzeChBY3Rpb25zQ29tcG9uZW50LCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5hY3Rpb25zLFxuICAgICAgICBiYWNrSWNvbkJ1dHRvblByb3BzOiBiYWNrSWNvbkJ1dHRvblByb3BzLFxuICAgICAgICBjb3VudDogY291bnQsXG4gICAgICAgIG5leHRJY29uQnV0dG9uUHJvcHM6IG5leHRJY29uQnV0dG9uUHJvcHMsXG4gICAgICAgIG9uUGFnZUNoYW5nZTogb25QYWdlQ2hhbmdlLFxuICAgICAgICBwYWdlOiBwYWdlLFxuICAgICAgICByb3dzUGVyUGFnZTogcm93c1BlclBhZ2UsXG4gICAgICAgIHNob3dGaXJzdEJ1dHRvbjogc2hvd0ZpcnN0QnV0dG9uLFxuICAgICAgICBzaG93TGFzdEJ1dHRvbjogc2hvd0xhc3RCdXR0b24sXG4gICAgICAgIHNsb3RQcm9wczogc2xvdFByb3BzLmFjdGlvbnMsXG4gICAgICAgIHNsb3RzOiBzbG90cy5hY3Rpb25zLFxuICAgICAgICBnZXRJdGVtQXJpYUxhYmVsOiBnZXRJdGVtQXJpYUxhYmVsLFxuICAgICAgICBkaXNhYmxlZDogZGlzYWJsZWRcbiAgICAgIH0pXVxuICAgIH0pXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVGFibGVQYWdpbmF0aW9uLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgZGlzcGxheWluZyB0aGUgYWN0aW9ucy5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQgVGFibGVQYWdpbmF0aW9uQWN0aW9uc1xuICAgKi9cbiAgQWN0aW9uc0NvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgYmFjayBhcnJvdyBbYEljb25CdXR0b25gXSgvbWF0ZXJpYWwtdWkvYXBpL2ljb24tYnV0dG9uLykgY29tcG9uZW50LlxuICAgKlxuICAgKiBUaGlzIHByb3AgaXMgYW4gYWxpYXMgZm9yIGBzbG90UHJvcHMuYWN0aW9ucy5wcmV2aW91c0J1dHRvbmAgYW5kIHdpbGwgYmUgb3ZlcnJpZGVuIGJ5IGl0IGlmIGJvdGggYXJlIHVzZWQuXG4gICAqIEBkZXByZWNhdGVkIFVzZSBgc2xvdFByb3BzLmFjdGlvbnMucHJldmlvdXNCdXR0b25gIGluc3RlYWQuXG4gICAqL1xuICBiYWNrSWNvbkJ1dHRvblByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNvbFNwYW46IFByb3BUeXBlcy5udW1iZXIsXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgLyoqXG4gICAqIFRoZSB0b3RhbCBudW1iZXIgb2Ygcm93cy5cbiAgICpcbiAgICogVG8gZW5hYmxlIHNlcnZlciBzaWRlIHBhZ2luYXRpb24gZm9yIGFuIHVua25vd24gbnVtYmVyIG9mIGl0ZW1zLCBwcm92aWRlIC0xLlxuICAgKi9cbiAgY291bnQ6IGludGVnZXJQcm9wVHlwZS5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIGRpc2FibGVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogQWNjZXB0cyBhIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYSBzdHJpbmcgdmFsdWUgdGhhdCBwcm92aWRlcyBhIHVzZXItZnJpZW5kbHkgbmFtZSBmb3IgdGhlIGN1cnJlbnQgcGFnZS5cbiAgICogVGhpcyBpcyBpbXBvcnRhbnQgZm9yIHNjcmVlbiByZWFkZXIgdXNlcnMuXG4gICAqXG4gICAqIEZvciBsb2NhbGl6YXRpb24gcHVycG9zZXMsIHlvdSBjYW4gdXNlIHRoZSBwcm92aWRlZCBbdHJhbnNsYXRpb25zXSgvbWF0ZXJpYWwtdWkvZ3VpZGVzL2xvY2FsaXphdGlvbi8pLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBUaGUgbGluayBvciBidXR0b24gdHlwZSB0byBmb3JtYXQgKCdmaXJzdCcgfCAnbGFzdCcgfCAnbmV4dCcgfCAncHJldmlvdXMnKS5cbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICogQGRlZmF1bHQgZnVuY3Rpb24gZGVmYXVsdEdldEFyaWFMYWJlbCh0eXBlKSB7XG4gICAqICAgcmV0dXJuIGBHbyB0byAke3R5cGV9IHBhZ2VgO1xuICAgKiB9XG4gICAqL1xuICBnZXRJdGVtQXJpYUxhYmVsOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEN1c3RvbWl6ZSB0aGUgZGlzcGxheWVkIHJvd3MgbGFiZWwuIEludm9rZWQgd2l0aCBhIGB7IGZyb20sIHRvLCBjb3VudCwgcGFnZSB9YFxuICAgKiBvYmplY3QuXG4gICAqXG4gICAqIEZvciBsb2NhbGl6YXRpb24gcHVycG9zZXMsIHlvdSBjYW4gdXNlIHRoZSBwcm92aWRlZCBbdHJhbnNsYXRpb25zXSgvbWF0ZXJpYWwtdWkvZ3VpZGVzL2xvY2FsaXphdGlvbi8pLlxuICAgKiBAZGVmYXVsdCBmdW5jdGlvbiBkZWZhdWx0TGFiZWxEaXNwbGF5ZWRSb3dzKHsgZnJvbSwgdG8sIGNvdW50IH0pIHtcbiAgICogICByZXR1cm4gYCR7ZnJvbX3igJMke3RvfSBvZiAke2NvdW50ICE9PSAtMSA/IGNvdW50IDogYG1vcmUgdGhhbiAke3RvfWB9YDtcbiAgICogfVxuICAgKi9cbiAgbGFiZWxEaXNwbGF5ZWRSb3dzOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEN1c3RvbWl6ZSB0aGUgcm93cyBwZXIgcGFnZSBsYWJlbC5cbiAgICpcbiAgICogRm9yIGxvY2FsaXphdGlvbiBwdXJwb3NlcywgeW91IGNhbiB1c2UgdGhlIHByb3ZpZGVkIFt0cmFuc2xhdGlvbnNdKC9tYXRlcmlhbC11aS9ndWlkZXMvbG9jYWxpemF0aW9uLykuXG4gICAqIEBkZWZhdWx0ICdSb3dzIHBlciBwYWdlOidcbiAgICovXG4gIGxhYmVsUm93c1BlclBhZ2U6IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgbmV4dCBhcnJvdyBbYEljb25CdXR0b25gXSgvbWF0ZXJpYWwtdWkvYXBpL2ljb24tYnV0dG9uLykgZWxlbWVudC5cbiAgICpcbiAgICogVGhpcyBwcm9wIGlzIGFuIGFsaWFzIGZvciBgc2xvdFByb3BzLmFjdGlvbnMubmV4dEJ1dHRvbmAgYW5kIHdpbGwgYmUgb3ZlcnJpZGVuIGJ5IGl0IGlmIGJvdGggYXJlIHVzZWQuXG4gICAqIEBkZXByZWNhdGVkIFVzZSBgc2xvdFByb3BzLmFjdGlvbnMubmV4dEJ1dHRvbmAgaW5zdGVhZC5cbiAgICovXG4gIG5leHRJY29uQnV0dG9uUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBwYWdlIGlzIGNoYW5nZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3QuTW91c2VFdmVudDxIVE1MQnV0dG9uRWxlbWVudD4gfCBudWxsfSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHBhZ2UgVGhlIHBhZ2Ugc2VsZWN0ZWQuXG4gICAqL1xuICBvblBhZ2VDaGFuZ2U6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBudW1iZXIgb2Ygcm93cyBwZXIgcGFnZSBpcyBjaGFuZ2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0LkNoYW5nZUV2ZW50PEhUTUxUZXh0QXJlYUVsZW1lbnQgfCBIVE1MSW5wdXRFbGVtZW50Pn0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqL1xuICBvblJvd3NQZXJQYWdlQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIFRoZSB6ZXJvLWJhc2VkIGluZGV4IG9mIHRoZSBjdXJyZW50IHBhZ2UuXG4gICAqL1xuICBwYWdlOiBjaGFpblByb3BUeXBlcyhpbnRlZ2VyUHJvcFR5cGUuaXNSZXF1aXJlZCwgcHJvcHMgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIGNvdW50LFxuICAgICAgcGFnZSxcbiAgICAgIHJvd3NQZXJQYWdlXG4gICAgfSA9IHByb3BzO1xuICAgIGlmIChjb3VudCA9PT0gLTEpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25zdCBuZXdMYXN0UGFnZSA9IE1hdGgubWF4KDAsIE1hdGguY2VpbChjb3VudCAvIHJvd3NQZXJQYWdlKSAtIDEpO1xuICAgIGlmIChwYWdlIDwgMCB8fCBwYWdlID4gbmV3TGFzdFBhZ2UpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoJ01VSTogVGhlIHBhZ2UgcHJvcCBvZiBhIFRhYmxlUGFnaW5hdGlvbiBpcyBvdXQgb2YgcmFuZ2UgJyArIGAoMCB0byAke25ld0xhc3RQYWdlfSwgYnV0IHBhZ2UgaXMgJHtwYWdlfSkuYCk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBudW1iZXIgb2Ygcm93cyBwZXIgcGFnZS5cbiAgICpcbiAgICogU2V0IC0xIHRvIGRpc3BsYXkgYWxsIHRoZSByb3dzLlxuICAgKi9cbiAgcm93c1BlclBhZ2U6IGludGVnZXJQcm9wVHlwZS5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogQ3VzdG9taXplcyB0aGUgb3B0aW9ucyBvZiB0aGUgcm93cyBwZXIgcGFnZSBzZWxlY3QgZmllbGQuIElmIGxlc3MgdGhhbiB0d28gb3B0aW9ucyBhcmVcbiAgICogYXZhaWxhYmxlLCBubyBzZWxlY3QgZmllbGQgd2lsbCBiZSBkaXNwbGF5ZWQuXG4gICAqIFVzZSAtMSBmb3IgdGhlIHZhbHVlIHdpdGggYSBjdXN0b20gbGFiZWwgdG8gc2hvdyBhbGwgdGhlIHJvd3MuXG4gICAqIEBkZWZhdWx0IFsxMCwgMjUsIDUwLCAxMDBdXG4gICAqL1xuICByb3dzUGVyUGFnZU9wdGlvbnM6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgbGFiZWw6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICB2YWx1ZTogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkXG4gIH0pXSkuaXNSZXF1aXJlZCksXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSByb3dzIHBlciBwYWdlIFtgU2VsZWN0YF0oL21hdGVyaWFsLXVpL2FwaS9zZWxlY3QvKSBlbGVtZW50LlxuICAgKlxuICAgKiBUaGlzIHByb3AgaXMgYW4gYWxpYXMgZm9yIGBzbG90UHJvcHMuc2VsZWN0YCBhbmQgd2lsbCBiZSBvdmVycmlkZW4gYnkgaXQgaWYgYm90aCBhcmUgdXNlZC5cbiAgICogQGRlcHJlY2F0ZWQgVXNlIGBzbG90UHJvcHMuc2VsZWN0YCBpbnN0ZWFkLlxuICAgKlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgU2VsZWN0UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHNob3cgdGhlIGZpcnN0LXBhZ2UgYnV0dG9uLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgc2hvd0ZpcnN0QnV0dG9uOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgc2hvdyB0aGUgbGFzdC1wYWdlIGJ1dHRvbi5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHNob3dMYXN0QnV0dG9uOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBwcm9wcyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlIHRoZSBUYWJsZVBhZ2luYXRpb24uXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBzbG90UHJvcHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgYWN0aW9uczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIGZpcnN0QnV0dG9uOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgICAgZmlyc3RCdXR0b25JY29uOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgICAgbGFzdEJ1dHRvbjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICAgIGxhc3RCdXR0b25JY29uOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgICAgbmV4dEJ1dHRvbjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICAgIG5leHRCdXR0b25JY29uOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgICAgcHJldmlvdXNCdXR0b246IFByb3BUeXBlcy5vYmplY3QsXG4gICAgICBwcmV2aW91c0J1dHRvbkljb246IFByb3BUeXBlcy5vYmplY3RcbiAgICB9KSxcbiAgICBzZWxlY3Q6IFByb3BUeXBlcy5vYmplY3RcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50cyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlIHRoZSBUYWJsZVBhZ2luYXRpb24uXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBzbG90czogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBhY3Rpb25zOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgZmlyc3RCdXR0b246IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICAgIGZpcnN0QnV0dG9uSWNvbjogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgICAgbGFzdEJ1dHRvbjogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgICAgbGFzdEJ1dHRvbkljb246IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICAgIG5leHRCdXR0b246IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICAgIG5leHRCdXR0b25JY29uOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgICBwcmV2aW91c0J1dHRvbjogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgICAgcHJldmlvdXNCdXR0b25JY29uOiBQcm9wVHlwZXMuZWxlbWVudFR5cGVcbiAgICB9KVxuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IFRhYmxlUGFnaW5hdGlvbjsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFRhYmxlUm93VXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlUYWJsZVJvdycsIHNsb3QpO1xufVxuY29uc3QgdGFibGVSb3dDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpVGFibGVSb3cnLCBbJ3Jvb3QnLCAnc2VsZWN0ZWQnLCAnaG92ZXInLCAnaGVhZCcsICdmb290ZXInXSk7XG5leHBvcnQgZGVmYXVsdCB0YWJsZVJvd0NsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCIsIFwiaG92ZXJcIiwgXCJzZWxlY3RlZFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCB7IGFscGhhIH0gZnJvbSAnQG11aS9zeXN0ZW0vY29sb3JNYW5pcHVsYXRvcic7XG5pbXBvcnQgVGFibGVsdmwyQ29udGV4dCBmcm9tICcuLi9UYWJsZS9UYWJsZWx2bDJDb250ZXh0JztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdGFibGVSb3dDbGFzc2VzLCB7IGdldFRhYmxlUm93VXRpbGl0eUNsYXNzIH0gZnJvbSAnLi90YWJsZVJvd0NsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIHNlbGVjdGVkLFxuICAgIGhvdmVyLFxuICAgIGhlYWQsXG4gICAgZm9vdGVyXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCBzZWxlY3RlZCAmJiAnc2VsZWN0ZWQnLCBob3ZlciAmJiAnaG92ZXInLCBoZWFkICYmICdoZWFkJywgZm9vdGVyICYmICdmb290ZXInXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldFRhYmxlUm93VXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBUYWJsZVJvd1Jvb3QgPSBzdHlsZWQoJ3RyJywge1xuICBuYW1lOiAnTXVpVGFibGVSb3cnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgb3duZXJTdGF0ZS5oZWFkICYmIHN0eWxlcy5oZWFkLCBvd25lclN0YXRlLmZvb3RlciAmJiBzdHlsZXMuZm9vdGVyXTtcbiAgfVxufSkoKHtcbiAgdGhlbWVcbn0pID0+ICh7XG4gIGNvbG9yOiAnaW5oZXJpdCcsXG4gIGRpc3BsYXk6ICd0YWJsZS1yb3cnLFxuICB2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJyxcbiAgLy8gV2UgZGlzYWJsZSB0aGUgZm9jdXMgcmluZyBmb3IgbW91c2UsIHRvdWNoIGFuZCBrZXlib2FyZCB1c2Vycy5cbiAgb3V0bGluZTogMCxcbiAgW2AmLiR7dGFibGVSb3dDbGFzc2VzLmhvdmVyfTpob3ZlcmBdOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5hY3Rpb24uaG92ZXJcbiAgfSxcbiAgW2AmLiR7dGFibGVSb3dDbGFzc2VzLnNlbGVjdGVkfWBdOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS52YXJzID8gYHJnYmEoJHt0aGVtZS52YXJzLnBhbGV0dGUucHJpbWFyeS5tYWluQ2hhbm5lbH0gLyAke3RoZW1lLnZhcnMucGFsZXR0ZS5hY3Rpb24uc2VsZWN0ZWRPcGFjaXR5fSlgIDogYWxwaGEodGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sIHRoZW1lLnBhbGV0dGUuYWN0aW9uLnNlbGVjdGVkT3BhY2l0eSksXG4gICAgJyY6aG92ZXInOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnZhcnMgPyBgcmdiYSgke3RoZW1lLnZhcnMucGFsZXR0ZS5wcmltYXJ5Lm1haW5DaGFubmVsfSAvIGNhbGMoJHt0aGVtZS52YXJzLnBhbGV0dGUuYWN0aW9uLnNlbGVjdGVkT3BhY2l0eX0gKyAke3RoZW1lLnZhcnMucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5fSkpYCA6IGFscGhhKHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5zZWxlY3RlZE9wYWNpdHkgKyB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpXG4gICAgfVxuICB9XG59KSk7XG5jb25zdCBkZWZhdWx0Q29tcG9uZW50ID0gJ3RyJztcbi8qKlxuICogV2lsbCBhdXRvbWF0aWNhbGx5IHNldCBkeW5hbWljIHJvdyBoZWlnaHRcbiAqIGJhc2VkIG9uIHRoZSBtYXRlcmlhbCB0YWJsZSBlbGVtZW50IHBhcmVudCAoaGVhZCwgYm9keSwgZXRjKS5cbiAqL1xuY29uc3QgVGFibGVSb3cgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBUYWJsZVJvdyhpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpVGFibGVSb3cnXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBjbGFzc05hbWUsXG4gICAgICBjb21wb25lbnQgPSBkZWZhdWx0Q29tcG9uZW50LFxuICAgICAgaG92ZXIgPSBmYWxzZSxcbiAgICAgIHNlbGVjdGVkID0gZmFsc2VcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3QgdGFibGVsdmwyID0gUmVhY3QudXNlQ29udGV4dChUYWJsZWx2bDJDb250ZXh0KTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGNvbXBvbmVudCxcbiAgICBob3ZlcixcbiAgICBzZWxlY3RlZCxcbiAgICBoZWFkOiB0YWJsZWx2bDIgJiYgdGFibGVsdmwyLnZhcmlhbnQgPT09ICdoZWFkJyxcbiAgICBmb290ZXI6IHRhYmxlbHZsMiAmJiB0YWJsZWx2bDIudmFyaWFudCA9PT0gJ2Zvb3RlcidcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFRhYmxlUm93Um9vdCwgX2V4dGVuZHMoe1xuICAgIGFzOiBjb21wb25lbnQsXG4gICAgcmVmOiByZWYsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICByb2xlOiBjb21wb25lbnQgPT09IGRlZmF1bHRDb21wb25lbnQgPyBudWxsIDogJ3JvdycsXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZVxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUYWJsZVJvdy5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBTaG91bGQgYmUgdmFsaWQgYDx0cj5gIGNoaWxkcmVuIHN1Y2ggYXMgYFRhYmxlQ2VsbGAuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSB0YWJsZSByb3cgd2lsbCBzaGFkZSBvbiBob3Zlci5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGhvdmVyOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHRhYmxlIHJvdyB3aWxsIGhhdmUgdGhlIHNlbGVjdGVkIHNoYWRpbmcuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBzZWxlY3RlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBUYWJsZVJvdzsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFRleHRGaWVsZFV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpVGV4dEZpZWxkJywgc2xvdCk7XG59XG5jb25zdCB0ZXh0RmllbGRDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpVGV4dEZpZWxkJywgWydyb290J10pO1xuZXhwb3J0IGRlZmF1bHQgdGV4dEZpZWxkQ2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJhdXRvQ29tcGxldGVcIiwgXCJhdXRvRm9jdXNcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbG9yXCIsIFwiZGVmYXVsdFZhbHVlXCIsIFwiZGlzYWJsZWRcIiwgXCJlcnJvclwiLCBcIkZvcm1IZWxwZXJUZXh0UHJvcHNcIiwgXCJmdWxsV2lkdGhcIiwgXCJoZWxwZXJUZXh0XCIsIFwiaWRcIiwgXCJJbnB1dExhYmVsUHJvcHNcIiwgXCJpbnB1dFByb3BzXCIsIFwiSW5wdXRQcm9wc1wiLCBcImlucHV0UmVmXCIsIFwibGFiZWxcIiwgXCJtYXhSb3dzXCIsIFwibWluUm93c1wiLCBcIm11bHRpbGluZVwiLCBcIm5hbWVcIiwgXCJvbkJsdXJcIiwgXCJvbkNoYW5nZVwiLCBcIm9uRm9jdXNcIiwgXCJwbGFjZWhvbGRlclwiLCBcInJlcXVpcmVkXCIsIFwicm93c1wiLCBcInNlbGVjdFwiLCBcIlNlbGVjdFByb3BzXCIsIFwidHlwZVwiLCBcInZhbHVlXCIsIFwidmFyaWFudFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCB1c2VJZCBmcm9tICdAbXVpL3V0aWxzL3VzZUlkJztcbmltcG9ydCByZWZUeXBlIGZyb20gJ0BtdWkvdXRpbHMvcmVmVHlwZSc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHVzZVRoZW1lUHJvcHMgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lUHJvcHMnO1xuaW1wb3J0IElucHV0IGZyb20gJy4uL0lucHV0JztcbmltcG9ydCBGaWxsZWRJbnB1dCBmcm9tICcuLi9GaWxsZWRJbnB1dCc7XG5pbXBvcnQgT3V0bGluZWRJbnB1dCBmcm9tICcuLi9PdXRsaW5lZElucHV0JztcbmltcG9ydCBJbnB1dExhYmVsIGZyb20gJy4uL0lucHV0TGFiZWwnO1xuaW1wb3J0IEZvcm1Db250cm9sIGZyb20gJy4uL0Zvcm1Db250cm9sJztcbmltcG9ydCBGb3JtSGVscGVyVGV4dCBmcm9tICcuLi9Gb3JtSGVscGVyVGV4dCc7XG5pbXBvcnQgU2VsZWN0IGZyb20gJy4uL1NlbGVjdCc7XG5pbXBvcnQgeyBnZXRUZXh0RmllbGRVdGlsaXR5Q2xhc3MgfSBmcm9tICcuL3RleHRGaWVsZENsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHZhcmlhbnRDb21wb25lbnQgPSB7XG4gIHN0YW5kYXJkOiBJbnB1dCxcbiAgZmlsbGVkOiBGaWxsZWRJbnB1dCxcbiAgb3V0bGluZWQ6IE91dGxpbmVkSW5wdXRcbn07XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3Nlc1xuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290J11cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRUZXh0RmllbGRVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcbmNvbnN0IFRleHRGaWVsZFJvb3QgPSBzdHlsZWQoRm9ybUNvbnRyb2wsIHtcbiAgbmFtZTogJ011aVRleHRGaWVsZCcsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMucm9vdFxufSkoe30pO1xuXG4vKipcbiAqIFRoZSBgVGV4dEZpZWxkYCBpcyBhIGNvbnZlbmllbmNlIHdyYXBwZXIgZm9yIHRoZSBtb3N0IGNvbW1vbiBjYXNlcyAoODAlKS5cbiAqIEl0IGNhbm5vdCBiZSBhbGwgdGhpbmdzIHRvIGFsbCBwZW9wbGUsIG90aGVyd2lzZSB0aGUgQVBJIHdvdWxkIGdyb3cgb3V0IG9mIGNvbnRyb2wuXG4gKlxuICogIyMgQWR2YW5jZWQgQ29uZmlndXJhdGlvblxuICpcbiAqIEl0J3MgaW1wb3J0YW50IHRvIHVuZGVyc3RhbmQgdGhhdCB0aGUgdGV4dCBmaWVsZCBpcyBhIHNpbXBsZSBhYnN0cmFjdGlvblxuICogb24gdG9wIG9mIHRoZSBmb2xsb3dpbmcgY29tcG9uZW50czpcbiAqXG4gKiAtIFtGb3JtQ29udHJvbF0oL21hdGVyaWFsLXVpL2FwaS9mb3JtLWNvbnRyb2wvKVxuICogLSBbSW5wdXRMYWJlbF0oL21hdGVyaWFsLXVpL2FwaS9pbnB1dC1sYWJlbC8pXG4gKiAtIFtGaWxsZWRJbnB1dF0oL21hdGVyaWFsLXVpL2FwaS9maWxsZWQtaW5wdXQvKVxuICogLSBbT3V0bGluZWRJbnB1dF0oL21hdGVyaWFsLXVpL2FwaS9vdXRsaW5lZC1pbnB1dC8pXG4gKiAtIFtJbnB1dF0oL21hdGVyaWFsLXVpL2FwaS9pbnB1dC8pXG4gKiAtIFtGb3JtSGVscGVyVGV4dF0oL21hdGVyaWFsLXVpL2FwaS9mb3JtLWhlbHBlci10ZXh0LylcbiAqXG4gKiBJZiB5b3Ugd2lzaCB0byBhbHRlciB0aGUgcHJvcHMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50LCB5b3UgY2FuIGRvIHNvIGFzIGZvbGxvd3M6XG4gKlxuICogYGBganN4XG4gKiBjb25zdCBpbnB1dFByb3BzID0ge1xuICogICBzdGVwOiAzMDAsXG4gKiB9O1xuICpcbiAqIHJldHVybiA8VGV4dEZpZWxkIGlkPVwidGltZVwiIHR5cGU9XCJ0aW1lXCIgaW5wdXRQcm9wcz17aW5wdXRQcm9wc30gLz47XG4gKiBgYGBcbiAqXG4gKiBGb3IgYWR2YW5jZWQgY2FzZXMsIHBsZWFzZSBsb29rIGF0IHRoZSBzb3VyY2Ugb2YgVGV4dEZpZWxkIGJ5IGNsaWNraW5nIG9uIHRoZVxuICogXCJFZGl0IHRoaXMgcGFnZVwiIGJ1dHRvbiBhYm92ZS4gQ29uc2lkZXIgZWl0aGVyOlxuICpcbiAqIC0gdXNpbmcgdGhlIHVwcGVyIGNhc2UgcHJvcHMgZm9yIHBhc3NpbmcgdmFsdWVzIGRpcmVjdGx5IHRvIHRoZSBjb21wb25lbnRzXG4gKiAtIHVzaW5nIHRoZSB1bmRlcmx5aW5nIGNvbXBvbmVudHMgZGlyZWN0bHkgYXMgc2hvd24gaW4gdGhlIGRlbW9zXG4gKi9cbmNvbnN0IFRleHRGaWVsZCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFRleHRGaWVsZChpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpVGV4dEZpZWxkJ1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgYXV0b0NvbXBsZXRlLFxuICAgICAgYXV0b0ZvY3VzID0gZmFsc2UsXG4gICAgICBjaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNvbG9yID0gJ3ByaW1hcnknLFxuICAgICAgZGVmYXVsdFZhbHVlLFxuICAgICAgZGlzYWJsZWQgPSBmYWxzZSxcbiAgICAgIGVycm9yID0gZmFsc2UsXG4gICAgICBGb3JtSGVscGVyVGV4dFByb3BzLFxuICAgICAgZnVsbFdpZHRoID0gZmFsc2UsXG4gICAgICBoZWxwZXJUZXh0LFxuICAgICAgaWQ6IGlkT3ZlcnJpZGUsXG4gICAgICBJbnB1dExhYmVsUHJvcHMsXG4gICAgICBpbnB1dFByb3BzLFxuICAgICAgSW5wdXRQcm9wcyxcbiAgICAgIGlucHV0UmVmLFxuICAgICAgbGFiZWwsXG4gICAgICBtYXhSb3dzLFxuICAgICAgbWluUm93cyxcbiAgICAgIG11bHRpbGluZSA9IGZhbHNlLFxuICAgICAgbmFtZSxcbiAgICAgIG9uQmx1cixcbiAgICAgIG9uQ2hhbmdlLFxuICAgICAgb25Gb2N1cyxcbiAgICAgIHBsYWNlaG9sZGVyLFxuICAgICAgcmVxdWlyZWQgPSBmYWxzZSxcbiAgICAgIHJvd3MsXG4gICAgICBzZWxlY3QgPSBmYWxzZSxcbiAgICAgIFNlbGVjdFByb3BzLFxuICAgICAgdHlwZSxcbiAgICAgIHZhbHVlLFxuICAgICAgdmFyaWFudCA9ICdvdXRsaW5lZCdcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGF1dG9Gb2N1cyxcbiAgICBjb2xvcixcbiAgICBkaXNhYmxlZCxcbiAgICBlcnJvcixcbiAgICBmdWxsV2lkdGgsXG4gICAgbXVsdGlsaW5lLFxuICAgIHJlcXVpcmVkLFxuICAgIHNlbGVjdCxcbiAgICB2YXJpYW50XG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKHNlbGVjdCAmJiAhY2hpbGRyZW4pIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ01VSTogYGNoaWxkcmVuYCBtdXN0IGJlIHBhc3NlZCB3aGVuIHVzaW5nIHRoZSBgVGV4dEZpZWxkYCBjb21wb25lbnQgd2l0aCBgc2VsZWN0YC4nKTtcbiAgICB9XG4gIH1cbiAgY29uc3QgSW5wdXRNb3JlID0ge307XG4gIGlmICh2YXJpYW50ID09PSAnb3V0bGluZWQnKSB7XG4gICAgaWYgKElucHV0TGFiZWxQcm9wcyAmJiB0eXBlb2YgSW5wdXRMYWJlbFByb3BzLnNocmluayAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIElucHV0TW9yZS5ub3RjaGVkID0gSW5wdXRMYWJlbFByb3BzLnNocmluaztcbiAgICB9XG4gICAgSW5wdXRNb3JlLmxhYmVsID0gbGFiZWw7XG4gIH1cbiAgaWYgKHNlbGVjdCkge1xuICAgIC8vIHVuc2V0IGRlZmF1bHRzIGZyb20gdGV4dGJveCBpbnB1dHNcbiAgICBpZiAoIVNlbGVjdFByb3BzIHx8ICFTZWxlY3RQcm9wcy5uYXRpdmUpIHtcbiAgICAgIElucHV0TW9yZS5pZCA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgSW5wdXRNb3JlWydhcmlhLWRlc2NyaWJlZGJ5J10gPSB1bmRlZmluZWQ7XG4gIH1cbiAgY29uc3QgaWQgPSB1c2VJZChpZE92ZXJyaWRlKTtcbiAgY29uc3QgaGVscGVyVGV4dElkID0gaGVscGVyVGV4dCAmJiBpZCA/IGAke2lkfS1oZWxwZXItdGV4dGAgOiB1bmRlZmluZWQ7XG4gIGNvbnN0IGlucHV0TGFiZWxJZCA9IGxhYmVsICYmIGlkID8gYCR7aWR9LWxhYmVsYCA6IHVuZGVmaW5lZDtcbiAgY29uc3QgSW5wdXRDb21wb25lbnQgPSB2YXJpYW50Q29tcG9uZW50W3ZhcmlhbnRdO1xuICBjb25zdCBJbnB1dEVsZW1lbnQgPSAvKiNfX1BVUkVfXyovX2pzeChJbnB1dENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIFwiYXJpYS1kZXNjcmliZWRieVwiOiBoZWxwZXJUZXh0SWQsXG4gICAgYXV0b0NvbXBsZXRlOiBhdXRvQ29tcGxldGUsXG4gICAgYXV0b0ZvY3VzOiBhdXRvRm9jdXMsXG4gICAgZGVmYXVsdFZhbHVlOiBkZWZhdWx0VmFsdWUsXG4gICAgZnVsbFdpZHRoOiBmdWxsV2lkdGgsXG4gICAgbXVsdGlsaW5lOiBtdWx0aWxpbmUsXG4gICAgbmFtZTogbmFtZSxcbiAgICByb3dzOiByb3dzLFxuICAgIG1heFJvd3M6IG1heFJvd3MsXG4gICAgbWluUm93czogbWluUm93cyxcbiAgICB0eXBlOiB0eXBlLFxuICAgIHZhbHVlOiB2YWx1ZSxcbiAgICBpZDogaWQsXG4gICAgaW5wdXRSZWY6IGlucHV0UmVmLFxuICAgIG9uQmx1cjogb25CbHVyLFxuICAgIG9uQ2hhbmdlOiBvbkNoYW5nZSxcbiAgICBvbkZvY3VzOiBvbkZvY3VzLFxuICAgIHBsYWNlaG9sZGVyOiBwbGFjZWhvbGRlcixcbiAgICBpbnB1dFByb3BzOiBpbnB1dFByb3BzXG4gIH0sIElucHV0TW9yZSwgSW5wdXRQcm9wcykpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3hzKFRleHRGaWVsZFJvb3QsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICBlcnJvcjogZXJyb3IsXG4gICAgZnVsbFdpZHRoOiBmdWxsV2lkdGgsXG4gICAgcmVmOiByZWYsXG4gICAgcmVxdWlyZWQ6IHJlcXVpcmVkLFxuICAgIGNvbG9yOiBjb2xvcixcbiAgICB2YXJpYW50OiB2YXJpYW50LFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGVcbiAgfSwgb3RoZXIsIHtcbiAgICBjaGlsZHJlbjogW2xhYmVsICE9IG51bGwgJiYgbGFiZWwgIT09ICcnICYmIC8qI19fUFVSRV9fKi9fanN4KElucHV0TGFiZWwsIF9leHRlbmRzKHtcbiAgICAgIGh0bWxGb3I6IGlkLFxuICAgICAgaWQ6IGlucHV0TGFiZWxJZFxuICAgIH0sIElucHV0TGFiZWxQcm9wcywge1xuICAgICAgY2hpbGRyZW46IGxhYmVsXG4gICAgfSkpLCBzZWxlY3QgPyAvKiNfX1BVUkVfXyovX2pzeChTZWxlY3QsIF9leHRlbmRzKHtcbiAgICAgIFwiYXJpYS1kZXNjcmliZWRieVwiOiBoZWxwZXJUZXh0SWQsXG4gICAgICBpZDogaWQsXG4gICAgICBsYWJlbElkOiBpbnB1dExhYmVsSWQsXG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBpbnB1dDogSW5wdXRFbGVtZW50XG4gICAgfSwgU2VsZWN0UHJvcHMsIHtcbiAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICAgIH0pKSA6IElucHV0RWxlbWVudCwgaGVscGVyVGV4dCAmJiAvKiNfX1BVUkVfXyovX2pzeChGb3JtSGVscGVyVGV4dCwgX2V4dGVuZHMoe1xuICAgICAgaWQ6IGhlbHBlclRleHRJZFxuICAgIH0sIEZvcm1IZWxwZXJUZXh0UHJvcHMsIHtcbiAgICAgIGNoaWxkcmVuOiBoZWxwZXJUZXh0XG4gICAgfSkpXVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFRleHRGaWVsZC5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBUaGlzIHByb3AgaGVscHMgdXNlcnMgdG8gZmlsbCBmb3JtcyBmYXN0ZXIsIGVzcGVjaWFsbHkgb24gbW9iaWxlIGRldmljZXMuXG4gICAqIFRoZSBuYW1lIGNhbiBiZSBjb25mdXNpbmcsIGFzIGl0J3MgbW9yZSBsaWtlIGFuIGF1dG9maWxsLlxuICAgKiBZb3UgY2FuIGxlYXJuIG1vcmUgYWJvdXQgaXQgW2ZvbGxvd2luZyB0aGUgc3BlY2lmaWNhdGlvbl0oaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybS1jb250cm9sLWluZnJhc3RydWN0dXJlLmh0bWwjYXV0b2ZpbGwpLlxuICAgKi9cbiAgYXV0b0NvbXBsZXRlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCBlbGVtZW50IGlzIGZvY3VzZWQgZHVyaW5nIHRoZSBmaXJzdCBtb3VudC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGF1dG9Gb2N1czogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIEl0IHN1cHBvcnRzIGJvdGggZGVmYXVsdCBhbmQgY3VzdG9tIHRoZW1lIGNvbG9ycywgd2hpY2ggY2FuIGJlIGFkZGVkIGFzIHNob3duIGluIHRoZVxuICAgKiBbcGFsZXR0ZSBjdXN0b21pemF0aW9uIGd1aWRlXShodHRwczovL211aS5jb20vbWF0ZXJpYWwtdWkvY3VzdG9taXphdGlvbi9wYWxldHRlLyNjdXN0b20tY29sb3JzKS5cbiAgICogQGRlZmF1bHQgJ3ByaW1hcnknXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydwcmltYXJ5JywgJ3NlY29uZGFyeScsICdlcnJvcicsICdpbmZvJywgJ3N1Y2Nlc3MnLCAnd2FybmluZyddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgdmFsdWUuIFVzZSB3aGVuIHRoZSBjb21wb25lbnQgaXMgbm90IGNvbnRyb2xsZWQuXG4gICAqL1xuICBkZWZhdWx0VmFsdWU6IFByb3BUeXBlcy5hbnksXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgZGlzYWJsZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsYWJlbCBpcyBkaXNwbGF5ZWQgaW4gYW4gZXJyb3Igc3RhdGUuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBlcnJvcjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBbYEZvcm1IZWxwZXJUZXh0YF0oL21hdGVyaWFsLXVpL2FwaS9mb3JtLWhlbHBlci10ZXh0LykgZWxlbWVudC5cbiAgICovXG4gIEZvcm1IZWxwZXJUZXh0UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBpbnB1dCB3aWxsIHRha2UgdXAgdGhlIGZ1bGwgd2lkdGggb2YgaXRzIGNvbnRhaW5lci5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGZ1bGxXaWR0aDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgaGVscGVyIHRleHQgY29udGVudC5cbiAgICovXG4gIGhlbHBlclRleHQ6IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogVGhlIGlkIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqIFVzZSB0aGlzIHByb3AgdG8gbWFrZSBgbGFiZWxgIGFuZCBgaGVscGVyVGV4dGAgYWNjZXNzaWJsZSBmb3Igc2NyZWVuIHJlYWRlcnMuXG4gICAqL1xuICBpZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIFtgSW5wdXRMYWJlbGBdKC9tYXRlcmlhbC11aS9hcGkvaW5wdXQtbGFiZWwvKSBlbGVtZW50LlxuICAgKiBQb2ludGVyIGV2ZW50cyBsaWtlIGBvbkNsaWNrYCBhcmUgZW5hYmxlZCBpZiBhbmQgb25seSBpZiBgc2hyaW5rYCBpcyBgdHJ1ZWAuXG4gICAqL1xuICBJbnB1dExhYmVsUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBbQXR0cmlidXRlc10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2lucHV0I0F0dHJpYnV0ZXMpIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBJbnB1dCBlbGVtZW50LlxuICAgKiBJdCB3aWxsIGJlIGEgW2BGaWxsZWRJbnB1dGBdKC9tYXRlcmlhbC11aS9hcGkvZmlsbGVkLWlucHV0LyksXG4gICAqIFtgT3V0bGluZWRJbnB1dGBdKC9tYXRlcmlhbC11aS9hcGkvb3V0bGluZWQtaW5wdXQvKSBvciBbYElucHV0YF0oL21hdGVyaWFsLXVpL2FwaS9pbnB1dC8pXG4gICAqIGNvbXBvbmVudCBkZXBlbmRpbmcgb24gdGhlIGB2YXJpYW50YCBwcm9wIHZhbHVlLlxuICAgKi9cbiAgSW5wdXRQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIFBhc3MgYSByZWYgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UmVmOiByZWZUeXBlLFxuICAvKipcbiAgICogVGhlIGxhYmVsIGNvbnRlbnQuXG4gICAqL1xuICBsYWJlbDogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBJZiBgZGVuc2VgIG9yIGBub3JtYWxgLCB3aWxsIGFkanVzdCB2ZXJ0aWNhbCBzcGFjaW5nIG9mIHRoaXMgYW5kIGNvbnRhaW5lZCBjb21wb25lbnRzLlxuICAgKiBAZGVmYXVsdCAnbm9uZSdcbiAgICovXG4gIG1hcmdpbjogUHJvcFR5cGVzLm9uZU9mKFsnZGVuc2UnLCAnbm9uZScsICdub3JtYWwnXSksXG4gIC8qKlxuICAgKiBNYXhpbXVtIG51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgbWF4Um93czogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogTWluaW11bSBudW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIG1pblJvd3M6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgYSBgdGV4dGFyZWFgIGVsZW1lbnQgaXMgcmVuZGVyZWQgaW5zdGVhZCBvZiBhbiBpbnB1dC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIG11bHRpbGluZTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBOYW1lIGF0dHJpYnV0ZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uQmx1cjogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSB2YWx1ZSBpcyBjaGFuZ2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIFlvdSBjYW4gcHVsbCBvdXQgdGhlIG5ldyB2YWx1ZSBieSBhY2Nlc3NpbmcgYGV2ZW50LnRhcmdldC52YWx1ZWAgKHN0cmluZykuXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkZvY3VzOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIFRoZSBzaG9ydCBoaW50IGRpc3BsYXllZCBpbiB0aGUgYGlucHV0YCBiZWZvcmUgdGhlIHVzZXIgZW50ZXJzIGEgdmFsdWUuXG4gICAqL1xuICBwbGFjZWhvbGRlcjogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxhYmVsIGlzIGRpc3BsYXllZCBhcyByZXF1aXJlZCBhbmQgdGhlIGBpbnB1dGAgZWxlbWVudCBpcyByZXF1aXJlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHJlcXVpcmVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIE51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgcm93czogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogUmVuZGVyIGEgW2BTZWxlY3RgXSgvbWF0ZXJpYWwtdWkvYXBpL3NlbGVjdC8pIGVsZW1lbnQgd2hpbGUgcGFzc2luZyB0aGUgSW5wdXQgZWxlbWVudCB0byBgU2VsZWN0YCBhcyBgaW5wdXRgIHBhcmFtZXRlci5cbiAgICogSWYgdGhpcyBvcHRpb24gaXMgc2V0IHlvdSBtdXN0IHBhc3MgdGhlIG9wdGlvbnMgb2YgdGhlIHNlbGVjdCBhcyBjaGlsZHJlbi5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHNlbGVjdDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBbYFNlbGVjdGBdKC9tYXRlcmlhbC11aS9hcGkvc2VsZWN0LykgZWxlbWVudC5cbiAgICovXG4gIFNlbGVjdFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogVGhlIHNpemUgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIHNpemU6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnbWVkaXVtJywgJ3NtYWxsJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIC8qKlxuICAgKiBUeXBlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuIEl0IHNob3VsZCBiZSBbYSB2YWxpZCBIVE1MNSBpbnB1dCB0eXBlXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvaW5wdXQjRm9ybV8lM0NpbnB1dCUzRV90eXBlcykuXG4gICAqL1xuICB0eXBlOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudCwgcmVxdWlyZWQgZm9yIGEgY29udHJvbGxlZCBjb21wb25lbnQuXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLmFueSxcbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS5cbiAgICogQGRlZmF1bHQgJ291dGxpbmVkJ1xuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnZmlsbGVkJywgJ291dGxpbmVkJywgJ3N0YW5kYXJkJ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgVGV4dEZpZWxkOyIsImltcG9ydCB7IExpbmsgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xuaW1wb3J0IFwiLi9BcHAuY3NzXCI7XG5pbXBvcnQgeyBTdGFjayB9IGZyb20gXCJAbXVpL21hdGVyaWFsXCI7XG5cbmZ1bmN0aW9uIEFwcCgpIHtcbiAgcmV0dXJuIChcbiAgICA8U3RhY2sgZ2FwPXsyfSBhbGlnbkl0ZW1zPXtcImZsZXgtc3RhcnRcIn0+XG4gICAgICA8TGluayB0bz1cIm1lc3NhZ2VzXCI+TWVzc2FnZXMgVE9ETzogbmFtaW5nPC9MaW5rPlxuICAgICAgPExpbmsgdG89XCJtZXNzYWdlLWxvZ1wiPlxuICAgICAgICBXaGF0J3MgdGhlIGRpZmZlcmVuY2UgYmV0d2VlbiBtZXNzYWdlcyBhbmQgbWVzc2FnZSBsb2dzP1xuICAgICAgPC9MaW5rPlxuICAgICAgPExpbmsgdG89XCJ0cmlnZ2VyYWJsZXNcIj5UcmlnZ2VyYWJsZXM8L0xpbms+XG4gICAgICA8TGluayB0bz1cInNjaGVkdWxlZC10YXNrc1wiPlNjaGVkdWxlZCBUYXNrczwvTGluaz5cbiAgICAgIDxMaW5rIHRvPVwidGFzay1zdGF0dXNcIj5UYXNrIFN0YXR1c2VzPC9MaW5rPlxuICAgICAgPExpbmsgdG89XCJqd3QtdG9rZW5zXCI+SldUIHRva2VucyAoZG9lc24ndCB3b3JrKTwvTGluaz5cbiAgICA8L1N0YWNrPlxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBBcHA7XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJpbmQoZm4sIHRoaXNBcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNBcmcsIGFyZ3VtZW50cyk7XG4gIH07XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBiaW5kIGZyb20gJy4vaGVscGVycy9iaW5kLmpzJztcblxuLy8gdXRpbHMgaXMgYSBsaWJyYXJ5IG9mIGdlbmVyaWMgaGVscGVyIGZ1bmN0aW9ucyBub24tc3BlY2lmaWMgdG8gYXhpb3NcblxuY29uc3Qge3RvU3RyaW5nfSA9IE9iamVjdC5wcm90b3R5cGU7XG5jb25zdCB7Z2V0UHJvdG90eXBlT2Z9ID0gT2JqZWN0O1xuXG5jb25zdCBraW5kT2YgPSAoY2FjaGUgPT4gdGhpbmcgPT4ge1xuICAgIGNvbnN0IHN0ciA9IHRvU3RyaW5nLmNhbGwodGhpbmcpO1xuICAgIHJldHVybiBjYWNoZVtzdHJdIHx8IChjYWNoZVtzdHJdID0gc3RyLnNsaWNlKDgsIC0xKS50b0xvd2VyQ2FzZSgpKTtcbn0pKE9iamVjdC5jcmVhdGUobnVsbCkpO1xuXG5jb25zdCBraW5kT2ZUZXN0ID0gKHR5cGUpID0+IHtcbiAgdHlwZSA9IHR5cGUudG9Mb3dlckNhc2UoKTtcbiAgcmV0dXJuICh0aGluZykgPT4ga2luZE9mKHRoaW5nKSA9PT0gdHlwZVxufVxuXG5jb25zdCB0eXBlT2ZUZXN0ID0gdHlwZSA9PiB0aGluZyA9PiB0eXBlb2YgdGhpbmcgPT09IHR5cGU7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXksIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCB7aXNBcnJheX0gPSBBcnJheTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyB1bmRlZmluZWRcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSB2YWx1ZSBpcyB1bmRlZmluZWQsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1VuZGVmaW5lZCA9IHR5cGVPZlRlc3QoJ3VuZGVmaW5lZCcpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQnVmZmVyXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQnVmZmVyKHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmICFpc1VuZGVmaW5lZCh2YWwpICYmIHZhbC5jb25zdHJ1Y3RvciAhPT0gbnVsbCAmJiAhaXNVbmRlZmluZWQodmFsLmNvbnN0cnVjdG9yKVxuICAgICYmIGlzRnVuY3Rpb24odmFsLmNvbnN0cnVjdG9yLmlzQnVmZmVyKSAmJiB2YWwuY29uc3RydWN0b3IuaXNCdWZmZXIodmFsKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0FycmF5QnVmZmVyID0ga2luZE9mVGVzdCgnQXJyYXlCdWZmZXInKTtcblxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlclZpZXcodmFsKSB7XG4gIGxldCByZXN1bHQ7XG4gIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJykgJiYgKEFycmF5QnVmZmVyLmlzVmlldykpIHtcbiAgICByZXN1bHQgPSBBcnJheUJ1ZmZlci5pc1ZpZXcodmFsKTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSAodmFsKSAmJiAodmFsLmJ1ZmZlcikgJiYgKGlzQXJyYXlCdWZmZXIodmFsLmJ1ZmZlcikpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJpbmdcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyaW5nLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNTdHJpbmcgPSB0eXBlT2ZUZXN0KCdzdHJpbmcnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRnVuY3Rpb24sIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0Z1bmN0aW9uID0gdHlwZU9mVGVzdCgnZnVuY3Rpb24nKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIE51bWJlclxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBOdW1iZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc051bWJlciA9IHR5cGVPZlRlc3QoJ251bWJlcicpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7Kn0gdGhpbmcgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc09iamVjdCA9ICh0aGluZykgPT4gdGhpbmcgIT09IG51bGwgJiYgdHlwZW9mIHRoaW5nID09PSAnb2JqZWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJvb2xlYW5cbiAqXG4gKiBAcGFyYW0geyp9IHRoaW5nIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJvb2xlYW4sIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0Jvb2xlYW4gPSB0aGluZyA9PiB0aGluZyA9PT0gdHJ1ZSB8fCB0aGluZyA9PT0gZmFsc2U7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBwbGFpbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgcGxhaW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNQbGFpbk9iamVjdCA9ICh2YWwpID0+IHtcbiAgaWYgKGtpbmRPZih2YWwpICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IHByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKHZhbCk7XG4gIHJldHVybiAocHJvdG90eXBlID09PSBudWxsIHx8IHByb3RvdHlwZSA9PT0gT2JqZWN0LnByb3RvdHlwZSB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG90eXBlKSA9PT0gbnVsbCkgJiYgIShTeW1ib2wudG9TdHJpbmdUYWcgaW4gdmFsKSAmJiAhKFN5bWJvbC5pdGVyYXRvciBpbiB2YWwpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRGF0ZVxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBEYXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNEYXRlID0ga2luZE9mVGVzdCgnRGF0ZScpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZVxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGaWxlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNGaWxlID0ga2luZE9mVGVzdCgnRmlsZScpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQmxvYlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCbG9iLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNCbG9iID0ga2luZE9mVGVzdCgnQmxvYicpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZUxpc3RcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzRmlsZUxpc3QgPSBraW5kT2ZUZXN0KCdGaWxlTGlzdCcpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyZWFtXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmVhbSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzU3RyZWFtID0gKHZhbCkgPT4gaXNPYmplY3QodmFsKSAmJiBpc0Z1bmN0aW9uKHZhbC5waXBlKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZvcm1EYXRhXG4gKlxuICogQHBhcmFtIHsqfSB0aGluZyBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEZvcm1EYXRhLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNGb3JtRGF0YSA9ICh0aGluZykgPT4ge1xuICBsZXQga2luZDtcbiAgcmV0dXJuIHRoaW5nICYmIChcbiAgICAodHlwZW9mIEZvcm1EYXRhID09PSAnZnVuY3Rpb24nICYmIHRoaW5nIGluc3RhbmNlb2YgRm9ybURhdGEpIHx8IChcbiAgICAgIGlzRnVuY3Rpb24odGhpbmcuYXBwZW5kKSAmJiAoXG4gICAgICAgIChraW5kID0ga2luZE9mKHRoaW5nKSkgPT09ICdmb3JtZGF0YScgfHxcbiAgICAgICAgLy8gZGV0ZWN0IGZvcm0tZGF0YSBpbnN0YW5jZVxuICAgICAgICAoa2luZCA9PT0gJ29iamVjdCcgJiYgaXNGdW5jdGlvbih0aGluZy50b1N0cmluZykgJiYgdGhpbmcudG9TdHJpbmcoKSA9PT0gJ1tvYmplY3QgRm9ybURhdGFdJylcbiAgICAgIClcbiAgICApXG4gIClcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3RcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzVVJMU2VhcmNoUGFyYW1zID0ga2luZE9mVGVzdCgnVVJMU2VhcmNoUGFyYW1zJyk7XG5cbmNvbnN0IFtpc1JlYWRhYmxlU3RyZWFtLCBpc1JlcXVlc3QsIGlzUmVzcG9uc2UsIGlzSGVhZGVyc10gPSBbJ1JlYWRhYmxlU3RyZWFtJywgJ1JlcXVlc3QnLCAnUmVzcG9uc2UnLCAnSGVhZGVycyddLm1hcChraW5kT2ZUZXN0KTtcblxuLyoqXG4gKiBUcmltIGV4Y2VzcyB3aGl0ZXNwYWNlIG9mZiB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBTdHJpbmcgdG8gdHJpbVxuICpcbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBTdHJpbmcgZnJlZWQgb2YgZXhjZXNzIHdoaXRlc3BhY2VcbiAqL1xuY29uc3QgdHJpbSA9IChzdHIpID0+IHN0ci50cmltID9cbiAgc3RyLnRyaW0oKSA6IHN0ci5yZXBsYWNlKC9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZywgJycpO1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbiBBcnJheSBvciBhbiBPYmplY3QgaW52b2tpbmcgYSBmdW5jdGlvbiBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmIGBvYmpgIGlzIGFuIEFycmF5IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwgaW5kZXgsIGFuZCBjb21wbGV0ZSBhcnJheSBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmICdvYmonIGlzIGFuIE9iamVjdCBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGtleSwgYW5kIGNvbXBsZXRlIG9iamVjdCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gb2JqIFRoZSBvYmplY3QgdG8gaXRlcmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGNhbGxiYWNrIHRvIGludm9rZSBmb3IgZWFjaCBpdGVtXG4gKlxuICogQHBhcmFtIHtCb29sZWFufSBbYWxsT3duS2V5cyA9IGZhbHNlXVxuICogQHJldHVybnMge2FueX1cbiAqL1xuZnVuY3Rpb24gZm9yRWFjaChvYmosIGZuLCB7YWxsT3duS2V5cyA9IGZhbHNlfSA9IHt9KSB7XG4gIC8vIERvbid0IGJvdGhlciBpZiBubyB2YWx1ZSBwcm92aWRlZFxuICBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbGV0IGk7XG4gIGxldCBsO1xuXG4gIC8vIEZvcmNlIGFuIGFycmF5IGlmIG5vdCBhbHJlYWR5IHNvbWV0aGluZyBpdGVyYWJsZVxuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBvYmogPSBbb2JqXTtcbiAgfVxuXG4gIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgYXJyYXkgdmFsdWVzXG4gICAgZm9yIChpID0gMCwgbCA9IG9iai5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2ldLCBpLCBvYmopO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgb2JqZWN0IGtleXNcbiAgICBjb25zdCBrZXlzID0gYWxsT3duS2V5cyA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iaikgOiBPYmplY3Qua2V5cyhvYmopO1xuICAgIGNvbnN0IGxlbiA9IGtleXMubGVuZ3RoO1xuICAgIGxldCBrZXk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICBmbi5jYWxsKG51bGwsIG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmRLZXkob2JqLCBrZXkpIHtcbiAga2V5ID0ga2V5LnRvTG93ZXJDYXNlKCk7XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICBsZXQgaSA9IGtleXMubGVuZ3RoO1xuICBsZXQgX2tleTtcbiAgd2hpbGUgKGktLSA+IDApIHtcbiAgICBfa2V5ID0ga2V5c1tpXTtcbiAgICBpZiAoa2V5ID09PSBfa2V5LnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgIHJldHVybiBfa2V5O1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuY29uc3QgX2dsb2JhbCA9ICgoKSA9PiB7XG4gIC8qZXNsaW50IG5vLXVuZGVmOjAqL1xuICBpZiAodHlwZW9mIGdsb2JhbFRoaXMgIT09IFwidW5kZWZpbmVkXCIpIHJldHVybiBnbG9iYWxUaGlzO1xuICByZXR1cm4gdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogZ2xvYmFsKVxufSkoKTtcblxuY29uc3QgaXNDb250ZXh0RGVmaW5lZCA9IChjb250ZXh0KSA9PiAhaXNVbmRlZmluZWQoY29udGV4dCkgJiYgY29udGV4dCAhPT0gX2dsb2JhbDtcblxuLyoqXG4gKiBBY2NlcHRzIHZhcmFyZ3MgZXhwZWN0aW5nIGVhY2ggYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0LCB0aGVuXG4gKiBpbW11dGFibHkgbWVyZ2VzIHRoZSBwcm9wZXJ0aWVzIG9mIGVhY2ggb2JqZWN0IGFuZCByZXR1cm5zIHJlc3VsdC5cbiAqXG4gKiBXaGVuIG11bHRpcGxlIG9iamVjdHMgY29udGFpbiB0aGUgc2FtZSBrZXkgdGhlIGxhdGVyIG9iamVjdCBpblxuICogdGhlIGFyZ3VtZW50cyBsaXN0IHdpbGwgdGFrZSBwcmVjZWRlbmNlLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqIHZhciByZXN1bHQgPSBtZXJnZSh7Zm9vOiAxMjN9LCB7Zm9vOiA0NTZ9KTtcbiAqIGNvbnNvbGUubG9nKHJlc3VsdC5mb28pOyAvLyBvdXRwdXRzIDQ1NlxuICogYGBgXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iajEgT2JqZWN0IHRvIG1lcmdlXG4gKlxuICogQHJldHVybnMge09iamVjdH0gUmVzdWx0IG9mIGFsbCBtZXJnZSBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIG1lcmdlKC8qIG9iajEsIG9iajIsIG9iajMsIC4uLiAqLykge1xuICBjb25zdCB7Y2FzZWxlc3N9ID0gaXNDb250ZXh0RGVmaW5lZCh0aGlzKSAmJiB0aGlzIHx8IHt9O1xuICBjb25zdCByZXN1bHQgPSB7fTtcbiAgY29uc3QgYXNzaWduVmFsdWUgPSAodmFsLCBrZXkpID0+IHtcbiAgICBjb25zdCB0YXJnZXRLZXkgPSBjYXNlbGVzcyAmJiBmaW5kS2V5KHJlc3VsdCwga2V5KSB8fCBrZXk7XG4gICAgaWYgKGlzUGxhaW5PYmplY3QocmVzdWx0W3RhcmdldEtleV0pICYmIGlzUGxhaW5PYmplY3QodmFsKSkge1xuICAgICAgcmVzdWx0W3RhcmdldEtleV0gPSBtZXJnZShyZXN1bHRbdGFyZ2V0S2V5XSwgdmFsKTtcbiAgICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QodmFsKSkge1xuICAgICAgcmVzdWx0W3RhcmdldEtleV0gPSBtZXJnZSh7fSwgdmFsKTtcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkodmFsKSkge1xuICAgICAgcmVzdWx0W3RhcmdldEtleV0gPSB2YWwuc2xpY2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W3RhcmdldEtleV0gPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgZm9yIChsZXQgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgYXJndW1lbnRzW2ldICYmIGZvckVhY2goYXJndW1lbnRzW2ldLCBhc3NpZ25WYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBFeHRlbmRzIG9iamVjdCBhIGJ5IG11dGFibHkgYWRkaW5nIHRvIGl0IHRoZSBwcm9wZXJ0aWVzIG9mIG9iamVjdCBiLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhIFRoZSBvYmplY3QgdG8gYmUgZXh0ZW5kZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBiIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb21cbiAqIEBwYXJhbSB7T2JqZWN0fSB0aGlzQXJnIFRoZSBvYmplY3QgdG8gYmluZCBmdW5jdGlvbiB0b1xuICpcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW2FsbE93bktleXNdXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgcmVzdWx0aW5nIHZhbHVlIG9mIG9iamVjdCBhXG4gKi9cbmNvbnN0IGV4dGVuZCA9IChhLCBiLCB0aGlzQXJnLCB7YWxsT3duS2V5c309IHt9KSA9PiB7XG4gIGZvckVhY2goYiwgKHZhbCwga2V5KSA9PiB7XG4gICAgaWYgKHRoaXNBcmcgJiYgaXNGdW5jdGlvbih2YWwpKSB7XG4gICAgICBhW2tleV0gPSBiaW5kKHZhbCwgdGhpc0FyZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFba2V5XSA9IHZhbDtcbiAgICB9XG4gIH0sIHthbGxPd25LZXlzfSk7XG4gIHJldHVybiBhO1xufVxuXG4vKipcbiAqIFJlbW92ZSBieXRlIG9yZGVyIG1hcmtlci4gVGhpcyBjYXRjaGVzIEVGIEJCIEJGICh0aGUgVVRGLTggQk9NKVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50IHdpdGggQk9NXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gY29udGVudCB2YWx1ZSB3aXRob3V0IEJPTVxuICovXG5jb25zdCBzdHJpcEJPTSA9IChjb250ZW50KSA9PiB7XG4gIGlmIChjb250ZW50LmNoYXJDb2RlQXQoMCkgPT09IDB4RkVGRikge1xuICAgIGNvbnRlbnQgPSBjb250ZW50LnNsaWNlKDEpO1xuICB9XG4gIHJldHVybiBjb250ZW50O1xufVxuXG4vKipcbiAqIEluaGVyaXQgdGhlIHByb3RvdHlwZSBtZXRob2RzIGZyb20gb25lIGNvbnN0cnVjdG9yIGludG8gYW5vdGhlclxuICogQHBhcmFtIHtmdW5jdGlvbn0gY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHN1cGVyQ29uc3RydWN0b3JcbiAqIEBwYXJhbSB7b2JqZWN0fSBbcHJvcHNdXG4gKiBAcGFyYW0ge29iamVjdH0gW2Rlc2NyaXB0b3JzXVxuICpcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5jb25zdCBpbmhlcml0cyA9IChjb25zdHJ1Y3Rvciwgc3VwZXJDb25zdHJ1Y3RvciwgcHJvcHMsIGRlc2NyaXB0b3JzKSA9PiB7XG4gIGNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIGRlc2NyaXB0b3JzKTtcbiAgY29uc3RydWN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY29uc3RydWN0b3I7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb25zdHJ1Y3RvciwgJ3N1cGVyJywge1xuICAgIHZhbHVlOiBzdXBlckNvbnN0cnVjdG9yLnByb3RvdHlwZVxuICB9KTtcbiAgcHJvcHMgJiYgT2JqZWN0LmFzc2lnbihjb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3BzKTtcbn1cblxuLyoqXG4gKiBSZXNvbHZlIG9iamVjdCB3aXRoIGRlZXAgcHJvdG90eXBlIGNoYWluIHRvIGEgZmxhdCBvYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2VPYmogc291cmNlIG9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IFtkZXN0T2JqXVxuICogQHBhcmFtIHtGdW5jdGlvbnxCb29sZWFufSBbZmlsdGVyXVxuICogQHBhcmFtIHtGdW5jdGlvbn0gW3Byb3BGaWx0ZXJdXG4gKlxuICogQHJldHVybnMge09iamVjdH1cbiAqL1xuY29uc3QgdG9GbGF0T2JqZWN0ID0gKHNvdXJjZU9iaiwgZGVzdE9iaiwgZmlsdGVyLCBwcm9wRmlsdGVyKSA9PiB7XG4gIGxldCBwcm9wcztcbiAgbGV0IGk7XG4gIGxldCBwcm9wO1xuICBjb25zdCBtZXJnZWQgPSB7fTtcblxuICBkZXN0T2JqID0gZGVzdE9iaiB8fCB7fTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVxLW51bGwsZXFlcWVxXG4gIGlmIChzb3VyY2VPYmogPT0gbnVsbCkgcmV0dXJuIGRlc3RPYmo7XG5cbiAgZG8ge1xuICAgIHByb3BzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoc291cmNlT2JqKTtcbiAgICBpID0gcHJvcHMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgICBwcm9wID0gcHJvcHNbaV07XG4gICAgICBpZiAoKCFwcm9wRmlsdGVyIHx8IHByb3BGaWx0ZXIocHJvcCwgc291cmNlT2JqLCBkZXN0T2JqKSkgJiYgIW1lcmdlZFtwcm9wXSkge1xuICAgICAgICBkZXN0T2JqW3Byb3BdID0gc291cmNlT2JqW3Byb3BdO1xuICAgICAgICBtZXJnZWRbcHJvcF0gPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBzb3VyY2VPYmogPSBmaWx0ZXIgIT09IGZhbHNlICYmIGdldFByb3RvdHlwZU9mKHNvdXJjZU9iaik7XG4gIH0gd2hpbGUgKHNvdXJjZU9iaiAmJiAoIWZpbHRlciB8fCBmaWx0ZXIoc291cmNlT2JqLCBkZXN0T2JqKSkgJiYgc291cmNlT2JqICE9PSBPYmplY3QucHJvdG90eXBlKTtcblxuICByZXR1cm4gZGVzdE9iajtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgYSBzdHJpbmcgZW5kcyB3aXRoIHRoZSBjaGFyYWN0ZXJzIG9mIGEgc3BlY2lmaWVkIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBzZWFyY2hTdHJpbmdcbiAqIEBwYXJhbSB7TnVtYmVyfSBbcG9zaXRpb249IDBdXG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmNvbnN0IGVuZHNXaXRoID0gKHN0ciwgc2VhcmNoU3RyaW5nLCBwb3NpdGlvbikgPT4ge1xuICBzdHIgPSBTdHJpbmcoc3RyKTtcbiAgaWYgKHBvc2l0aW9uID09PSB1bmRlZmluZWQgfHwgcG9zaXRpb24gPiBzdHIubGVuZ3RoKSB7XG4gICAgcG9zaXRpb24gPSBzdHIubGVuZ3RoO1xuICB9XG4gIHBvc2l0aW9uIC09IHNlYXJjaFN0cmluZy5sZW5ndGg7XG4gIGNvbnN0IGxhc3RJbmRleCA9IHN0ci5pbmRleE9mKHNlYXJjaFN0cmluZywgcG9zaXRpb24pO1xuICByZXR1cm4gbGFzdEluZGV4ICE9PSAtMSAmJiBsYXN0SW5kZXggPT09IHBvc2l0aW9uO1xufVxuXG5cbi8qKlxuICogUmV0dXJucyBuZXcgYXJyYXkgZnJvbSBhcnJheSBsaWtlIG9iamVjdCBvciBudWxsIGlmIGZhaWxlZFxuICpcbiAqIEBwYXJhbSB7Kn0gW3RoaW5nXVxuICpcbiAqIEByZXR1cm5zIHs/QXJyYXl9XG4gKi9cbmNvbnN0IHRvQXJyYXkgPSAodGhpbmcpID0+IHtcbiAgaWYgKCF0aGluZykgcmV0dXJuIG51bGw7XG4gIGlmIChpc0FycmF5KHRoaW5nKSkgcmV0dXJuIHRoaW5nO1xuICBsZXQgaSA9IHRoaW5nLmxlbmd0aDtcbiAgaWYgKCFpc051bWJlcihpKSkgcmV0dXJuIG51bGw7XG4gIGNvbnN0IGFyciA9IG5ldyBBcnJheShpKTtcbiAgd2hpbGUgKGktLSA+IDApIHtcbiAgICBhcnJbaV0gPSB0aGluZ1tpXTtcbiAgfVxuICByZXR1cm4gYXJyO1xufVxuXG4vKipcbiAqIENoZWNraW5nIGlmIHRoZSBVaW50OEFycmF5IGV4aXN0cyBhbmQgaWYgaXQgZG9lcywgaXQgcmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgY2hlY2tzIGlmIHRoZVxuICogdGhpbmcgcGFzc2VkIGluIGlzIGFuIGluc3RhbmNlIG9mIFVpbnQ4QXJyYXlcbiAqXG4gKiBAcGFyYW0ge1R5cGVkQXJyYXl9XG4gKlxuICogQHJldHVybnMge0FycmF5fVxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuY29uc3QgaXNUeXBlZEFycmF5ID0gKFR5cGVkQXJyYXkgPT4ge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICByZXR1cm4gdGhpbmcgPT4ge1xuICAgIHJldHVybiBUeXBlZEFycmF5ICYmIHRoaW5nIGluc3RhbmNlb2YgVHlwZWRBcnJheTtcbiAgfTtcbn0pKHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJyAmJiBnZXRQcm90b3R5cGVPZihVaW50OEFycmF5KSk7XG5cbi8qKlxuICogRm9yIGVhY2ggZW50cnkgaW4gdGhlIG9iamVjdCwgY2FsbCB0aGUgZnVuY3Rpb24gd2l0aCB0aGUga2V5IGFuZCB2YWx1ZS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdDxhbnksIGFueT59IG9iaiAtIFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gLSBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBlbnRyeS5cbiAqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuY29uc3QgZm9yRWFjaEVudHJ5ID0gKG9iaiwgZm4pID0+IHtcbiAgY29uc3QgZ2VuZXJhdG9yID0gb2JqICYmIG9ialtTeW1ib2wuaXRlcmF0b3JdO1xuXG4gIGNvbnN0IGl0ZXJhdG9yID0gZ2VuZXJhdG9yLmNhbGwob2JqKTtcblxuICBsZXQgcmVzdWx0O1xuXG4gIHdoaWxlICgocmVzdWx0ID0gaXRlcmF0b3IubmV4dCgpKSAmJiAhcmVzdWx0LmRvbmUpIHtcbiAgICBjb25zdCBwYWlyID0gcmVzdWx0LnZhbHVlO1xuICAgIGZuLmNhbGwob2JqLCBwYWlyWzBdLCBwYWlyWzFdKTtcbiAgfVxufVxuXG4vKipcbiAqIEl0IHRha2VzIGEgcmVndWxhciBleHByZXNzaW9uIGFuZCBhIHN0cmluZywgYW5kIHJldHVybnMgYW4gYXJyYXkgb2YgYWxsIHRoZSBtYXRjaGVzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHJlZ0V4cCAtIFRoZSByZWd1bGFyIGV4cHJlc3Npb24gdG8gbWF0Y2ggYWdhaW5zdC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgLSBUaGUgc3RyaW5nIHRvIHNlYXJjaC5cbiAqXG4gKiBAcmV0dXJucyB7QXJyYXk8Ym9vbGVhbj59XG4gKi9cbmNvbnN0IG1hdGNoQWxsID0gKHJlZ0V4cCwgc3RyKSA9PiB7XG4gIGxldCBtYXRjaGVzO1xuICBjb25zdCBhcnIgPSBbXTtcblxuICB3aGlsZSAoKG1hdGNoZXMgPSByZWdFeHAuZXhlYyhzdHIpKSAhPT0gbnVsbCkge1xuICAgIGFyci5wdXNoKG1hdGNoZXMpO1xuICB9XG5cbiAgcmV0dXJuIGFycjtcbn1cblxuLyogQ2hlY2tpbmcgaWYgdGhlIGtpbmRPZlRlc3QgZnVuY3Rpb24gcmV0dXJucyB0cnVlIHdoZW4gcGFzc2VkIGFuIEhUTUxGb3JtRWxlbWVudC4gKi9cbmNvbnN0IGlzSFRNTEZvcm0gPSBraW5kT2ZUZXN0KCdIVE1MRm9ybUVsZW1lbnQnKTtcblxuY29uc3QgdG9DYW1lbENhc2UgPSBzdHIgPT4ge1xuICByZXR1cm4gc3RyLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvWy1fXFxzXShbYS16XFxkXSkoXFx3KikvZyxcbiAgICBmdW5jdGlvbiByZXBsYWNlcihtLCBwMSwgcDIpIHtcbiAgICAgIHJldHVybiBwMS50b1VwcGVyQ2FzZSgpICsgcDI7XG4gICAgfVxuICApO1xufTtcblxuLyogQ3JlYXRpbmcgYSBmdW5jdGlvbiB0aGF0IHdpbGwgY2hlY2sgaWYgYW4gb2JqZWN0IGhhcyBhIHByb3BlcnR5LiAqL1xuY29uc3QgaGFzT3duUHJvcGVydHkgPSAoKHtoYXNPd25Qcm9wZXJ0eX0pID0+IChvYmosIHByb3ApID0+IGhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkoT2JqZWN0LnByb3RvdHlwZSk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBSZWdFeHAgb2JqZWN0XG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFJlZ0V4cCBvYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1JlZ0V4cCA9IGtpbmRPZlRlc3QoJ1JlZ0V4cCcpO1xuXG5jb25zdCByZWR1Y2VEZXNjcmlwdG9ycyA9IChvYmosIHJlZHVjZXIpID0+IHtcbiAgY29uc3QgZGVzY3JpcHRvcnMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhvYmopO1xuICBjb25zdCByZWR1Y2VkRGVzY3JpcHRvcnMgPSB7fTtcblxuICBmb3JFYWNoKGRlc2NyaXB0b3JzLCAoZGVzY3JpcHRvciwgbmFtZSkgPT4ge1xuICAgIGxldCByZXQ7XG4gICAgaWYgKChyZXQgPSByZWR1Y2VyKGRlc2NyaXB0b3IsIG5hbWUsIG9iaikpICE9PSBmYWxzZSkge1xuICAgICAgcmVkdWNlZERlc2NyaXB0b3JzW25hbWVdID0gcmV0IHx8IGRlc2NyaXB0b3I7XG4gICAgfVxuICB9KTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhvYmosIHJlZHVjZWREZXNjcmlwdG9ycyk7XG59XG5cbi8qKlxuICogTWFrZXMgYWxsIG1ldGhvZHMgcmVhZC1vbmx5XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gKi9cblxuY29uc3QgZnJlZXplTWV0aG9kcyA9IChvYmopID0+IHtcbiAgcmVkdWNlRGVzY3JpcHRvcnMob2JqLCAoZGVzY3JpcHRvciwgbmFtZSkgPT4ge1xuICAgIC8vIHNraXAgcmVzdHJpY3RlZCBwcm9wcyBpbiBzdHJpY3QgbW9kZVxuICAgIGlmIChpc0Z1bmN0aW9uKG9iaikgJiYgWydhcmd1bWVudHMnLCAnY2FsbGVyJywgJ2NhbGxlZSddLmluZGV4T2YobmFtZSkgIT09IC0xKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgY29uc3QgdmFsdWUgPSBvYmpbbmFtZV07XG5cbiAgICBpZiAoIWlzRnVuY3Rpb24odmFsdWUpKSByZXR1cm47XG5cbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBmYWxzZTtcblxuICAgIGlmICgnd3JpdGFibGUnIGluIGRlc2NyaXB0b3IpIHtcbiAgICAgIGRlc2NyaXB0b3Iud3JpdGFibGUgPSBmYWxzZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIWRlc2NyaXB0b3Iuc2V0KSB7XG4gICAgICBkZXNjcmlwdG9yLnNldCA9ICgpID0+IHtcbiAgICAgICAgdGhyb3cgRXJyb3IoJ0NhbiBub3QgcmV3cml0ZSByZWFkLW9ubHkgbWV0aG9kIFxcJycgKyBuYW1lICsgJ1xcJycpO1xuICAgICAgfTtcbiAgICB9XG4gIH0pO1xufVxuXG5jb25zdCB0b09iamVjdFNldCA9IChhcnJheU9yU3RyaW5nLCBkZWxpbWl0ZXIpID0+IHtcbiAgY29uc3Qgb2JqID0ge307XG5cbiAgY29uc3QgZGVmaW5lID0gKGFycikgPT4ge1xuICAgIGFyci5mb3JFYWNoKHZhbHVlID0+IHtcbiAgICAgIG9ialt2YWx1ZV0gPSB0cnVlO1xuICAgIH0pO1xuICB9XG5cbiAgaXNBcnJheShhcnJheU9yU3RyaW5nKSA/IGRlZmluZShhcnJheU9yU3RyaW5nKSA6IGRlZmluZShTdHJpbmcoYXJyYXlPclN0cmluZykuc3BsaXQoZGVsaW1pdGVyKSk7XG5cbiAgcmV0dXJuIG9iajtcbn1cblxuY29uc3Qgbm9vcCA9ICgpID0+IHt9XG5cbmNvbnN0IHRvRmluaXRlTnVtYmVyID0gKHZhbHVlLCBkZWZhdWx0VmFsdWUpID0+IHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgTnVtYmVyLmlzRmluaXRlKHZhbHVlID0gK3ZhbHVlKSA/IHZhbHVlIDogZGVmYXVsdFZhbHVlO1xufVxuXG5jb25zdCBBTFBIQSA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5eidcblxuY29uc3QgRElHSVQgPSAnMDEyMzQ1Njc4OSc7XG5cbmNvbnN0IEFMUEhBQkVUID0ge1xuICBESUdJVCxcbiAgQUxQSEEsXG4gIEFMUEhBX0RJR0lUOiBBTFBIQSArIEFMUEhBLnRvVXBwZXJDYXNlKCkgKyBESUdJVFxufVxuXG5jb25zdCBnZW5lcmF0ZVN0cmluZyA9IChzaXplID0gMTYsIGFscGhhYmV0ID0gQUxQSEFCRVQuQUxQSEFfRElHSVQpID0+IHtcbiAgbGV0IHN0ciA9ICcnO1xuICBjb25zdCB7bGVuZ3RofSA9IGFscGhhYmV0O1xuICB3aGlsZSAoc2l6ZS0tKSB7XG4gICAgc3RyICs9IGFscGhhYmV0W01hdGgucmFuZG9tKCkgKiBsZW5ndGh8MF1cbiAgfVxuXG4gIHJldHVybiBzdHI7XG59XG5cbi8qKlxuICogSWYgdGhlIHRoaW5nIGlzIGEgRm9ybURhdGEgb2JqZWN0LCByZXR1cm4gdHJ1ZSwgb3RoZXJ3aXNlIHJldHVybiBmYWxzZS5cbiAqXG4gKiBAcGFyYW0ge3Vua25vd259IHRoaW5nIC0gVGhlIHRoaW5nIHRvIGNoZWNrLlxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc1NwZWNDb21wbGlhbnRGb3JtKHRoaW5nKSB7XG4gIHJldHVybiAhISh0aGluZyAmJiBpc0Z1bmN0aW9uKHRoaW5nLmFwcGVuZCkgJiYgdGhpbmdbU3ltYm9sLnRvU3RyaW5nVGFnXSA9PT0gJ0Zvcm1EYXRhJyAmJiB0aGluZ1tTeW1ib2wuaXRlcmF0b3JdKTtcbn1cblxuY29uc3QgdG9KU09OT2JqZWN0ID0gKG9iaikgPT4ge1xuICBjb25zdCBzdGFjayA9IG5ldyBBcnJheSgxMCk7XG5cbiAgY29uc3QgdmlzaXQgPSAoc291cmNlLCBpKSA9PiB7XG5cbiAgICBpZiAoaXNPYmplY3Qoc291cmNlKSkge1xuICAgICAgaWYgKHN0YWNrLmluZGV4T2Yoc291cmNlKSA+PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYoISgndG9KU09OJyBpbiBzb3VyY2UpKSB7XG4gICAgICAgIHN0YWNrW2ldID0gc291cmNlO1xuICAgICAgICBjb25zdCB0YXJnZXQgPSBpc0FycmF5KHNvdXJjZSkgPyBbXSA6IHt9O1xuXG4gICAgICAgIGZvckVhY2goc291cmNlLCAodmFsdWUsIGtleSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHJlZHVjZWRWYWx1ZSA9IHZpc2l0KHZhbHVlLCBpICsgMSk7XG4gICAgICAgICAgIWlzVW5kZWZpbmVkKHJlZHVjZWRWYWx1ZSkgJiYgKHRhcmdldFtrZXldID0gcmVkdWNlZFZhbHVlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgc3RhY2tbaV0gPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc291cmNlO1xuICB9XG5cbiAgcmV0dXJuIHZpc2l0KG9iaiwgMCk7XG59XG5cbmNvbnN0IGlzQXN5bmNGbiA9IGtpbmRPZlRlc3QoJ0FzeW5jRnVuY3Rpb24nKTtcblxuY29uc3QgaXNUaGVuYWJsZSA9ICh0aGluZykgPT5cbiAgdGhpbmcgJiYgKGlzT2JqZWN0KHRoaW5nKSB8fCBpc0Z1bmN0aW9uKHRoaW5nKSkgJiYgaXNGdW5jdGlvbih0aGluZy50aGVuKSAmJiBpc0Z1bmN0aW9uKHRoaW5nLmNhdGNoKTtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBpc0FycmF5LFxuICBpc0FycmF5QnVmZmVyLFxuICBpc0J1ZmZlcixcbiAgaXNGb3JtRGF0YSxcbiAgaXNBcnJheUJ1ZmZlclZpZXcsXG4gIGlzU3RyaW5nLFxuICBpc051bWJlcixcbiAgaXNCb29sZWFuLFxuICBpc09iamVjdCxcbiAgaXNQbGFpbk9iamVjdCxcbiAgaXNSZWFkYWJsZVN0cmVhbSxcbiAgaXNSZXF1ZXN0LFxuICBpc1Jlc3BvbnNlLFxuICBpc0hlYWRlcnMsXG4gIGlzVW5kZWZpbmVkLFxuICBpc0RhdGUsXG4gIGlzRmlsZSxcbiAgaXNCbG9iLFxuICBpc1JlZ0V4cCxcbiAgaXNGdW5jdGlvbixcbiAgaXNTdHJlYW0sXG4gIGlzVVJMU2VhcmNoUGFyYW1zLFxuICBpc1R5cGVkQXJyYXksXG4gIGlzRmlsZUxpc3QsXG4gIGZvckVhY2gsXG4gIG1lcmdlLFxuICBleHRlbmQsXG4gIHRyaW0sXG4gIHN0cmlwQk9NLFxuICBpbmhlcml0cyxcbiAgdG9GbGF0T2JqZWN0LFxuICBraW5kT2YsXG4gIGtpbmRPZlRlc3QsXG4gIGVuZHNXaXRoLFxuICB0b0FycmF5LFxuICBmb3JFYWNoRW50cnksXG4gIG1hdGNoQWxsLFxuICBpc0hUTUxGb3JtLFxuICBoYXNPd25Qcm9wZXJ0eSxcbiAgaGFzT3duUHJvcDogaGFzT3duUHJvcGVydHksIC8vIGFuIGFsaWFzIHRvIGF2b2lkIEVTTGludCBuby1wcm90b3R5cGUtYnVpbHRpbnMgZGV0ZWN0aW9uXG4gIHJlZHVjZURlc2NyaXB0b3JzLFxuICBmcmVlemVNZXRob2RzLFxuICB0b09iamVjdFNldCxcbiAgdG9DYW1lbENhc2UsXG4gIG5vb3AsXG4gIHRvRmluaXRlTnVtYmVyLFxuICBmaW5kS2V5LFxuICBnbG9iYWw6IF9nbG9iYWwsXG4gIGlzQ29udGV4dERlZmluZWQsXG4gIEFMUEhBQkVULFxuICBnZW5lcmF0ZVN0cmluZyxcbiAgaXNTcGVjQ29tcGxpYW50Rm9ybSxcbiAgdG9KU09OT2JqZWN0LFxuICBpc0FzeW5jRm4sXG4gIGlzVGhlbmFibGVcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5cbi8qKlxuICogQ3JlYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBtZXNzYWdlLCBjb25maWcsIGVycm9yIGNvZGUsIHJlcXVlc3QgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIFRoZSBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnXSBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBjcmVhdGVkIGVycm9yLlxuICovXG5mdW5jdGlvbiBBeGlvc0Vycm9yKG1lc3NhZ2UsIGNvZGUsIGNvbmZpZywgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgRXJyb3IuY2FsbCh0aGlzKTtcblxuICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCB0aGlzLmNvbnN0cnVjdG9yKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnN0YWNrID0gKG5ldyBFcnJvcigpKS5zdGFjaztcbiAgfVxuXG4gIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gIHRoaXMubmFtZSA9ICdBeGlvc0Vycm9yJztcbiAgY29kZSAmJiAodGhpcy5jb2RlID0gY29kZSk7XG4gIGNvbmZpZyAmJiAodGhpcy5jb25maWcgPSBjb25maWcpO1xuICByZXF1ZXN0ICYmICh0aGlzLnJlcXVlc3QgPSByZXF1ZXN0KTtcbiAgcmVzcG9uc2UgJiYgKHRoaXMucmVzcG9uc2UgPSByZXNwb25zZSk7XG59XG5cbnV0aWxzLmluaGVyaXRzKEF4aW9zRXJyb3IsIEVycm9yLCB7XG4gIHRvSlNPTjogZnVuY3Rpb24gdG9KU09OKCkge1xuICAgIHJldHVybiB7XG4gICAgICAvLyBTdGFuZGFyZFxuICAgICAgbWVzc2FnZTogdGhpcy5tZXNzYWdlLFxuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgLy8gTWljcm9zb2Z0XG4gICAgICBkZXNjcmlwdGlvbjogdGhpcy5kZXNjcmlwdGlvbixcbiAgICAgIG51bWJlcjogdGhpcy5udW1iZXIsXG4gICAgICAvLyBNb3ppbGxhXG4gICAgICBmaWxlTmFtZTogdGhpcy5maWxlTmFtZSxcbiAgICAgIGxpbmVOdW1iZXI6IHRoaXMubGluZU51bWJlcixcbiAgICAgIGNvbHVtbk51bWJlcjogdGhpcy5jb2x1bW5OdW1iZXIsXG4gICAgICBzdGFjazogdGhpcy5zdGFjayxcbiAgICAgIC8vIEF4aW9zXG4gICAgICBjb25maWc6IHV0aWxzLnRvSlNPTk9iamVjdCh0aGlzLmNvbmZpZyksXG4gICAgICBjb2RlOiB0aGlzLmNvZGUsXG4gICAgICBzdGF0dXM6IHRoaXMucmVzcG9uc2UgJiYgdGhpcy5yZXNwb25zZS5zdGF0dXMgPyB0aGlzLnJlc3BvbnNlLnN0YXR1cyA6IG51bGxcbiAgICB9O1xuICB9XG59KTtcblxuY29uc3QgcHJvdG90eXBlID0gQXhpb3NFcnJvci5wcm90b3R5cGU7XG5jb25zdCBkZXNjcmlwdG9ycyA9IHt9O1xuXG5bXG4gICdFUlJfQkFEX09QVElPTl9WQUxVRScsXG4gICdFUlJfQkFEX09QVElPTicsXG4gICdFQ09OTkFCT1JURUQnLFxuICAnRVRJTUVET1VUJyxcbiAgJ0VSUl9ORVRXT1JLJyxcbiAgJ0VSUl9GUl9UT09fTUFOWV9SRURJUkVDVFMnLFxuICAnRVJSX0RFUFJFQ0FURUQnLFxuICAnRVJSX0JBRF9SRVNQT05TRScsXG4gICdFUlJfQkFEX1JFUVVFU1QnLFxuICAnRVJSX0NBTkNFTEVEJyxcbiAgJ0VSUl9OT1RfU1VQUE9SVCcsXG4gICdFUlJfSU5WQUxJRF9VUkwnXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuXS5mb3JFYWNoKGNvZGUgPT4ge1xuICBkZXNjcmlwdG9yc1tjb2RlXSA9IHt2YWx1ZTogY29kZX07XG59KTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoQXhpb3NFcnJvciwgZGVzY3JpcHRvcnMpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3RvdHlwZSwgJ2lzQXhpb3NFcnJvcicsIHt2YWx1ZTogdHJ1ZX0pO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuQXhpb3NFcnJvci5mcm9tID0gKGVycm9yLCBjb2RlLCBjb25maWcsIHJlcXVlc3QsIHJlc3BvbnNlLCBjdXN0b21Qcm9wcykgPT4ge1xuICBjb25zdCBheGlvc0Vycm9yID0gT2JqZWN0LmNyZWF0ZShwcm90b3R5cGUpO1xuXG4gIHV0aWxzLnRvRmxhdE9iamVjdChlcnJvciwgYXhpb3NFcnJvciwgZnVuY3Rpb24gZmlsdGVyKG9iaikge1xuICAgIHJldHVybiBvYmogIT09IEVycm9yLnByb3RvdHlwZTtcbiAgfSwgcHJvcCA9PiB7XG4gICAgcmV0dXJuIHByb3AgIT09ICdpc0F4aW9zRXJyb3InO1xuICB9KTtcblxuICBBeGlvc0Vycm9yLmNhbGwoYXhpb3NFcnJvciwgZXJyb3IubWVzc2FnZSwgY29kZSwgY29uZmlnLCByZXF1ZXN0LCByZXNwb25zZSk7XG5cbiAgYXhpb3NFcnJvci5jYXVzZSA9IGVycm9yO1xuXG4gIGF4aW9zRXJyb3IubmFtZSA9IGVycm9yLm5hbWU7XG5cbiAgY3VzdG9tUHJvcHMgJiYgT2JqZWN0LmFzc2lnbihheGlvc0Vycm9yLCBjdXN0b21Qcm9wcyk7XG5cbiAgcmV0dXJuIGF4aW9zRXJyb3I7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBBeGlvc0Vycm9yO1xuIiwiLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHN0cmljdFxuZXhwb3J0IGRlZmF1bHQgbnVsbDtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4uL2NvcmUvQXhpb3NFcnJvci5qcyc7XG4vLyB0ZW1wb3JhcnkgaG90Zml4IHRvIGF2b2lkIGNpcmN1bGFyIHJlZmVyZW5jZXMgdW50aWwgQXhpb3NVUkxTZWFyY2hQYXJhbXMgaXMgcmVmYWN0b3JlZFxuaW1wb3J0IFBsYXRmb3JtRm9ybURhdGEgZnJvbSAnLi4vcGxhdGZvcm0vbm9kZS9jbGFzc2VzL0Zvcm1EYXRhLmpzJztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIHRoZSBnaXZlbiB0aGluZyBpcyBhIGFycmF5IG9yIGpzIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdGhpbmcgLSBUaGUgb2JqZWN0IG9yIGFycmF5IHRvIGJlIHZpc2l0ZWQuXG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzVmlzaXRhYmxlKHRoaW5nKSB7XG4gIHJldHVybiB1dGlscy5pc1BsYWluT2JqZWN0KHRoaW5nKSB8fCB1dGlscy5pc0FycmF5KHRoaW5nKTtcbn1cblxuLyoqXG4gKiBJdCByZW1vdmVzIHRoZSBicmFja2V0cyBmcm9tIHRoZSBlbmQgb2YgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IC0gVGhlIGtleSBvZiB0aGUgcGFyYW1ldGVyLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IHRoZSBrZXkgd2l0aG91dCB0aGUgYnJhY2tldHMuXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUJyYWNrZXRzKGtleSkge1xuICByZXR1cm4gdXRpbHMuZW5kc1dpdGgoa2V5LCAnW10nKSA/IGtleS5zbGljZSgwLCAtMikgOiBrZXk7XG59XG5cbi8qKlxuICogSXQgdGFrZXMgYSBwYXRoLCBhIGtleSwgYW5kIGEgYm9vbGVhbiwgYW5kIHJldHVybnMgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCAtIFRoZSBwYXRoIHRvIHRoZSBjdXJyZW50IGtleS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgLSBUaGUga2V5IG9mIHRoZSBjdXJyZW50IG9iamVjdCBiZWluZyBpdGVyYXRlZCBvdmVyLlxuICogQHBhcmFtIHtzdHJpbmd9IGRvdHMgLSBJZiB0cnVlLCB0aGUga2V5IHdpbGwgYmUgcmVuZGVyZWQgd2l0aCBkb3RzIGluc3RlYWQgb2YgYnJhY2tldHMuXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIHBhdGggdG8gdGhlIGN1cnJlbnQga2V5LlxuICovXG5mdW5jdGlvbiByZW5kZXJLZXkocGF0aCwga2V5LCBkb3RzKSB7XG4gIGlmICghcGF0aCkgcmV0dXJuIGtleTtcbiAgcmV0dXJuIHBhdGguY29uY2F0KGtleSkubWFwKGZ1bmN0aW9uIGVhY2godG9rZW4sIGkpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICB0b2tlbiA9IHJlbW92ZUJyYWNrZXRzKHRva2VuKTtcbiAgICByZXR1cm4gIWRvdHMgJiYgaSA/ICdbJyArIHRva2VuICsgJ10nIDogdG9rZW47XG4gIH0pLmpvaW4oZG90cyA/ICcuJyA6ICcnKTtcbn1cblxuLyoqXG4gKiBJZiB0aGUgYXJyYXkgaXMgYW4gYXJyYXkgYW5kIG5vbmUgb2YgaXRzIGVsZW1lbnRzIGFyZSB2aXNpdGFibGUsIHRoZW4gaXQncyBhIGZsYXQgYXJyYXkuXG4gKlxuICogQHBhcmFtIHtBcnJheTxhbnk+fSBhcnIgLSBUaGUgYXJyYXkgdG8gY2hlY2tcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNGbGF0QXJyYXkoYXJyKSB7XG4gIHJldHVybiB1dGlscy5pc0FycmF5KGFycikgJiYgIWFyci5zb21lKGlzVmlzaXRhYmxlKTtcbn1cblxuY29uc3QgcHJlZGljYXRlcyA9IHV0aWxzLnRvRmxhdE9iamVjdCh1dGlscywge30sIG51bGwsIGZ1bmN0aW9uIGZpbHRlcihwcm9wKSB7XG4gIHJldHVybiAvXmlzW0EtWl0vLnRlc3QocHJvcCk7XG59KTtcblxuLyoqXG4gKiBDb252ZXJ0IGEgZGF0YSBvYmplY3QgdG8gRm9ybURhdGFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gKiBAcGFyYW0gez9PYmplY3R9IFtmb3JtRGF0YV1cbiAqIEBwYXJhbSB7P09iamVjdH0gW29wdGlvbnNdXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb3B0aW9ucy52aXNpdG9yXVxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5tZXRhVG9rZW5zID0gdHJ1ZV1cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuZG90cyA9IGZhbHNlXVxuICogQHBhcmFtIHs/Qm9vbGVhbn0gW29wdGlvbnMuaW5kZXhlcyA9IGZhbHNlXVxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9XG4gKiovXG5cbi8qKlxuICogSXQgY29udmVydHMgYW4gb2JqZWN0IGludG8gYSBGb3JtRGF0YSBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdDxhbnksIGFueT59IG9iaiAtIFRoZSBvYmplY3QgdG8gY29udmVydCB0byBmb3JtIGRhdGEuXG4gKiBAcGFyYW0ge3N0cmluZ30gZm9ybURhdGEgLSBUaGUgRm9ybURhdGEgb2JqZWN0IHRvIGFwcGVuZCB0by5cbiAqIEBwYXJhbSB7T2JqZWN0PHN0cmluZywgYW55Pn0gb3B0aW9uc1xuICpcbiAqIEByZXR1cm5zXG4gKi9cbmZ1bmN0aW9uIHRvRm9ybURhdGEob2JqLCBmb3JtRGF0YSwgb3B0aW9ucykge1xuICBpZiAoIXV0aWxzLmlzT2JqZWN0KG9iaikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd0YXJnZXQgbXVzdCBiZSBhbiBvYmplY3QnKTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBmb3JtRGF0YSA9IGZvcm1EYXRhIHx8IG5ldyAoUGxhdGZvcm1Gb3JtRGF0YSB8fCBGb3JtRGF0YSkoKTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgb3B0aW9ucyA9IHV0aWxzLnRvRmxhdE9iamVjdChvcHRpb25zLCB7XG4gICAgbWV0YVRva2VuczogdHJ1ZSxcbiAgICBkb3RzOiBmYWxzZSxcbiAgICBpbmRleGVzOiBmYWxzZVxuICB9LCBmYWxzZSwgZnVuY3Rpb24gZGVmaW5lZChvcHRpb24sIHNvdXJjZSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lcS1udWxsLGVxZXFlcVxuICAgIHJldHVybiAhdXRpbHMuaXNVbmRlZmluZWQoc291cmNlW29wdGlvbl0pO1xuICB9KTtcblxuICBjb25zdCBtZXRhVG9rZW5zID0gb3B0aW9ucy5tZXRhVG9rZW5zO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlLWJlZm9yZS1kZWZpbmVcbiAgY29uc3QgdmlzaXRvciA9IG9wdGlvbnMudmlzaXRvciB8fCBkZWZhdWx0VmlzaXRvcjtcbiAgY29uc3QgZG90cyA9IG9wdGlvbnMuZG90cztcbiAgY29uc3QgaW5kZXhlcyA9IG9wdGlvbnMuaW5kZXhlcztcbiAgY29uc3QgX0Jsb2IgPSBvcHRpb25zLkJsb2IgfHwgdHlwZW9mIEJsb2IgIT09ICd1bmRlZmluZWQnICYmIEJsb2I7XG4gIGNvbnN0IHVzZUJsb2IgPSBfQmxvYiAmJiB1dGlscy5pc1NwZWNDb21wbGlhbnRGb3JtKGZvcm1EYXRhKTtcblxuICBpZiAoIXV0aWxzLmlzRnVuY3Rpb24odmlzaXRvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd2aXNpdG9yIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICB9XG5cbiAgZnVuY3Rpb24gY29udmVydFZhbHVlKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09PSBudWxsKSByZXR1cm4gJyc7XG5cbiAgICBpZiAodXRpbHMuaXNEYXRlKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHZhbHVlLnRvSVNPU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgaWYgKCF1c2VCbG9iICYmIHV0aWxzLmlzQmxvYih2YWx1ZSkpIHtcbiAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKCdCbG9iIGlzIG5vdCBzdXBwb3J0ZWQuIFVzZSBhIEJ1ZmZlciBpbnN0ZWFkLicpO1xuICAgIH1cblxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyKHZhbHVlKSB8fCB1dGlscy5pc1R5cGVkQXJyYXkodmFsdWUpKSB7XG4gICAgICByZXR1cm4gdXNlQmxvYiAmJiB0eXBlb2YgQmxvYiA9PT0gJ2Z1bmN0aW9uJyA/IG5ldyBCbG9iKFt2YWx1ZV0pIDogQnVmZmVyLmZyb20odmFsdWUpO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWZhdWx0IHZpc2l0b3IuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSBrZXlcbiAgICogQHBhcmFtIHtBcnJheTxTdHJpbmd8TnVtYmVyPn0gcGF0aFxuICAgKiBAdGhpcyB7Rm9ybURhdGF9XG4gICAqXG4gICAqIEByZXR1cm5zIHtib29sZWFufSByZXR1cm4gdHJ1ZSB0byB2aXNpdCB0aGUgZWFjaCBwcm9wIG9mIHRoZSB2YWx1ZSByZWN1cnNpdmVseVxuICAgKi9cbiAgZnVuY3Rpb24gZGVmYXVsdFZpc2l0b3IodmFsdWUsIGtleSwgcGF0aCkge1xuICAgIGxldCBhcnIgPSB2YWx1ZTtcblxuICAgIGlmICh2YWx1ZSAmJiAhcGF0aCAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICBpZiAodXRpbHMuZW5kc1dpdGgoa2V5LCAne30nKSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAga2V5ID0gbWV0YVRva2VucyA/IGtleSA6IGtleS5zbGljZSgwLCAtMik7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICB2YWx1ZSA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICh1dGlscy5pc0FycmF5KHZhbHVlKSAmJiBpc0ZsYXRBcnJheSh2YWx1ZSkpIHx8XG4gICAgICAgICgodXRpbHMuaXNGaWxlTGlzdCh2YWx1ZSkgfHwgdXRpbHMuZW5kc1dpdGgoa2V5LCAnW10nKSkgJiYgKGFyciA9IHV0aWxzLnRvQXJyYXkodmFsdWUpKVxuICAgICAgICApKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICBrZXkgPSByZW1vdmVCcmFja2V0cyhrZXkpO1xuXG4gICAgICAgIGFyci5mb3JFYWNoKGZ1bmN0aW9uIGVhY2goZWwsIGluZGV4KSB7XG4gICAgICAgICAgISh1dGlscy5pc1VuZGVmaW5lZChlbCkgfHwgZWwgPT09IG51bGwpICYmIGZvcm1EYXRhLmFwcGVuZChcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXN0ZWQtdGVybmFyeVxuICAgICAgICAgICAgaW5kZXhlcyA9PT0gdHJ1ZSA/IHJlbmRlcktleShba2V5XSwgaW5kZXgsIGRvdHMpIDogKGluZGV4ZXMgPT09IG51bGwgPyBrZXkgOiBrZXkgKyAnW10nKSxcbiAgICAgICAgICAgIGNvbnZlcnRWYWx1ZShlbClcbiAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpc1Zpc2l0YWJsZSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGZvcm1EYXRhLmFwcGVuZChyZW5kZXJLZXkocGF0aCwga2V5LCBkb3RzKSwgY29udmVydFZhbHVlKHZhbHVlKSk7XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjb25zdCBzdGFjayA9IFtdO1xuXG4gIGNvbnN0IGV4cG9zZWRIZWxwZXJzID0gT2JqZWN0LmFzc2lnbihwcmVkaWNhdGVzLCB7XG4gICAgZGVmYXVsdFZpc2l0b3IsXG4gICAgY29udmVydFZhbHVlLFxuICAgIGlzVmlzaXRhYmxlXG4gIH0pO1xuXG4gIGZ1bmN0aW9uIGJ1aWxkKHZhbHVlLCBwYXRoKSB7XG4gICAgaWYgKHV0aWxzLmlzVW5kZWZpbmVkKHZhbHVlKSkgcmV0dXJuO1xuXG4gICAgaWYgKHN0YWNrLmluZGV4T2YodmFsdWUpICE9PSAtMSkge1xuICAgICAgdGhyb3cgRXJyb3IoJ0NpcmN1bGFyIHJlZmVyZW5jZSBkZXRlY3RlZCBpbiAnICsgcGF0aC5qb2luKCcuJykpO1xuICAgIH1cblxuICAgIHN0YWNrLnB1c2godmFsdWUpO1xuXG4gICAgdXRpbHMuZm9yRWFjaCh2YWx1ZSwgZnVuY3Rpb24gZWFjaChlbCwga2V5KSB7XG4gICAgICBjb25zdCByZXN1bHQgPSAhKHV0aWxzLmlzVW5kZWZpbmVkKGVsKSB8fCBlbCA9PT0gbnVsbCkgJiYgdmlzaXRvci5jYWxsKFxuICAgICAgICBmb3JtRGF0YSwgZWwsIHV0aWxzLmlzU3RyaW5nKGtleSkgPyBrZXkudHJpbSgpIDoga2V5LCBwYXRoLCBleHBvc2VkSGVscGVyc1xuICAgICAgKTtcblxuICAgICAgaWYgKHJlc3VsdCA9PT0gdHJ1ZSkge1xuICAgICAgICBidWlsZChlbCwgcGF0aCA/IHBhdGguY29uY2F0KGtleSkgOiBba2V5XSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBzdGFjay5wb3AoKTtcbiAgfVxuXG4gIGlmICghdXRpbHMuaXNPYmplY3Qob2JqKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2RhdGEgbXVzdCBiZSBhbiBvYmplY3QnKTtcbiAgfVxuXG4gIGJ1aWxkKG9iaik7XG5cbiAgcmV0dXJuIGZvcm1EYXRhO1xufVxuXG5leHBvcnQgZGVmYXVsdCB0b0Zvcm1EYXRhO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdG9Gb3JtRGF0YSBmcm9tICcuL3RvRm9ybURhdGEuanMnO1xuXG4vKipcbiAqIEl0IGVuY29kZXMgYSBzdHJpbmcgYnkgcmVwbGFjaW5nIGFsbCBjaGFyYWN0ZXJzIHRoYXQgYXJlIG5vdCBpbiB0aGUgdW5yZXNlcnZlZCBzZXQgd2l0aFxuICogdGhlaXIgcGVyY2VudC1lbmNvZGVkIGVxdWl2YWxlbnRzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciAtIFRoZSBzdHJpbmcgdG8gZW5jb2RlLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBlbmNvZGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gZW5jb2RlKHN0cikge1xuICBjb25zdCBjaGFyTWFwID0ge1xuICAgICchJzogJyUyMScsXG4gICAgXCInXCI6ICclMjcnLFxuICAgICcoJzogJyUyOCcsXG4gICAgJyknOiAnJTI5JyxcbiAgICAnfic6ICclN0UnLFxuICAgICclMjAnOiAnKycsXG4gICAgJyUwMCc6ICdcXHgwMCdcbiAgfTtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChzdHIpLnJlcGxhY2UoL1shJygpfl18JTIwfCUwMC9nLCBmdW5jdGlvbiByZXBsYWNlcihtYXRjaCkge1xuICAgIHJldHVybiBjaGFyTWFwW21hdGNoXTtcbiAgfSk7XG59XG5cbi8qKlxuICogSXQgdGFrZXMgYSBwYXJhbXMgb2JqZWN0IGFuZCBjb252ZXJ0cyBpdCB0byBhIEZvcm1EYXRhIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0PHN0cmluZywgYW55Pn0gcGFyYW1zIC0gVGhlIHBhcmFtZXRlcnMgdG8gYmUgY29udmVydGVkIHRvIGEgRm9ybURhdGEgb2JqZWN0LlxuICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLCBhbnk+fSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgb2JqZWN0IHBhc3NlZCB0byB0aGUgQXhpb3MgY29uc3RydWN0b3IuXG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIEF4aW9zVVJMU2VhcmNoUGFyYW1zKHBhcmFtcywgb3B0aW9ucykge1xuICB0aGlzLl9wYWlycyA9IFtdO1xuXG4gIHBhcmFtcyAmJiB0b0Zvcm1EYXRhKHBhcmFtcywgdGhpcywgb3B0aW9ucyk7XG59XG5cbmNvbnN0IHByb3RvdHlwZSA9IEF4aW9zVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZTtcblxucHJvdG90eXBlLmFwcGVuZCA9IGZ1bmN0aW9uIGFwcGVuZChuYW1lLCB2YWx1ZSkge1xuICB0aGlzLl9wYWlycy5wdXNoKFtuYW1lLCB2YWx1ZV0pO1xufTtcblxucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoZW5jb2Rlcikge1xuICBjb25zdCBfZW5jb2RlID0gZW5jb2RlciA/IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGVuY29kZXIuY2FsbCh0aGlzLCB2YWx1ZSwgZW5jb2RlKTtcbiAgfSA6IGVuY29kZTtcblxuICByZXR1cm4gdGhpcy5fcGFpcnMubWFwKGZ1bmN0aW9uIGVhY2gocGFpcikge1xuICAgIHJldHVybiBfZW5jb2RlKHBhaXJbMF0pICsgJz0nICsgX2VuY29kZShwYWlyWzFdKTtcbiAgfSwgJycpLmpvaW4oJyYnKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEF4aW9zVVJMU2VhcmNoUGFyYW1zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IEF4aW9zVVJMU2VhcmNoUGFyYW1zIGZyb20gJy4uL2hlbHBlcnMvQXhpb3NVUkxTZWFyY2hQYXJhbXMuanMnO1xuXG4vKipcbiAqIEl0IHJlcGxhY2VzIGFsbCBpbnN0YW5jZXMgb2YgdGhlIGNoYXJhY3RlcnMgYDpgLCBgJGAsIGAsYCwgYCtgLCBgW2AsIGFuZCBgXWAgd2l0aCB0aGVpclxuICogVVJJIGVuY29kZWQgY291bnRlcnBhcnRzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbCBUaGUgdmFsdWUgdG8gYmUgZW5jb2RlZC5cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZW5jb2RlZCB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gZW5jb2RlKHZhbCkge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkuXG4gICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLlxuICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLlxuICAgIHJlcGxhY2UoLyUyQy9naSwgJywnKS5cbiAgICByZXBsYWNlKC8lMjAvZywgJysnKS5cbiAgICByZXBsYWNlKC8lNUIvZ2ksICdbJykuXG4gICAgcmVwbGFjZSgvJTVEL2dpLCAnXScpO1xufVxuXG4vKipcbiAqIEJ1aWxkIGEgVVJMIGJ5IGFwcGVuZGluZyBwYXJhbXMgdG8gdGhlIGVuZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGJhc2Ugb2YgdGhlIHVybCAoZS5nLiwgaHR0cDovL3d3dy5nb29nbGUuY29tKVxuICogQHBhcmFtIHtvYmplY3R9IFtwYXJhbXNdIFRoZSBwYXJhbXMgdG8gYmUgYXBwZW5kZWRcbiAqIEBwYXJhbSB7P29iamVjdH0gb3B0aW9uc1xuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBmb3JtYXR0ZWQgdXJsXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkVVJMKHVybCwgcGFyYW1zLCBvcHRpb25zKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICBpZiAoIXBhcmFtcykge1xuICAgIHJldHVybiB1cmw7XG4gIH1cbiAgXG4gIGNvbnN0IF9lbmNvZGUgPSBvcHRpb25zICYmIG9wdGlvbnMuZW5jb2RlIHx8IGVuY29kZTtcblxuICBjb25zdCBzZXJpYWxpemVGbiA9IG9wdGlvbnMgJiYgb3B0aW9ucy5zZXJpYWxpemU7XG5cbiAgbGV0IHNlcmlhbGl6ZWRQYXJhbXM7XG5cbiAgaWYgKHNlcmlhbGl6ZUZuKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHNlcmlhbGl6ZUZuKHBhcmFtcywgb3B0aW9ucyk7XG4gIH0gZWxzZSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKHBhcmFtcykgP1xuICAgICAgcGFyYW1zLnRvU3RyaW5nKCkgOlxuICAgICAgbmV3IEF4aW9zVVJMU2VhcmNoUGFyYW1zKHBhcmFtcywgb3B0aW9ucykudG9TdHJpbmcoX2VuY29kZSk7XG4gIH1cblxuICBpZiAoc2VyaWFsaXplZFBhcmFtcykge1xuICAgIGNvbnN0IGhhc2htYXJrSW5kZXggPSB1cmwuaW5kZXhPZihcIiNcIik7XG5cbiAgICBpZiAoaGFzaG1hcmtJbmRleCAhPT0gLTEpIHtcbiAgICAgIHVybCA9IHVybC5zbGljZSgwLCBoYXNobWFya0luZGV4KTtcbiAgICB9XG4gICAgdXJsICs9ICh1cmwuaW5kZXhPZignPycpID09PSAtMSA/ICc/JyA6ICcmJykgKyBzZXJpYWxpemVkUGFyYW1zO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4vLi4vdXRpbHMuanMnO1xuXG5jbGFzcyBJbnRlcmNlcHRvck1hbmFnZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmhhbmRsZXJzID0gW107XG4gIH1cblxuICAvKipcbiAgICogQWRkIGEgbmV3IGludGVyY2VwdG9yIHRvIHRoZSBzdGFja1xuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdWxmaWxsZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgdGhlbmAgZm9yIGEgYFByb21pc2VgXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHJlamVjdGAgZm9yIGEgYFByb21pc2VgXG4gICAqXG4gICAqIEByZXR1cm4ge051bWJlcn0gQW4gSUQgdXNlZCB0byByZW1vdmUgaW50ZXJjZXB0b3IgbGF0ZXJcbiAgICovXG4gIHVzZShmdWxmaWxsZWQsIHJlamVjdGVkLCBvcHRpb25zKSB7XG4gICAgdGhpcy5oYW5kbGVycy5wdXNoKHtcbiAgICAgIGZ1bGZpbGxlZCxcbiAgICAgIHJlamVjdGVkLFxuICAgICAgc3luY2hyb25vdXM6IG9wdGlvbnMgPyBvcHRpb25zLnN5bmNocm9ub3VzIDogZmFsc2UsXG4gICAgICBydW5XaGVuOiBvcHRpb25zID8gb3B0aW9ucy5ydW5XaGVuIDogbnVsbFxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLmhhbmRsZXJzLmxlbmd0aCAtIDE7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIGFuIGludGVyY2VwdG9yIGZyb20gdGhlIHN0YWNrXG4gICAqXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBpZCBUaGUgSUQgdGhhdCB3YXMgcmV0dXJuZWQgYnkgYHVzZWBcbiAgICpcbiAgICogQHJldHVybnMge0Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgaW50ZXJjZXB0b3Igd2FzIHJlbW92ZWQsIGBmYWxzZWAgb3RoZXJ3aXNlXG4gICAqL1xuICBlamVjdChpZCkge1xuICAgIGlmICh0aGlzLmhhbmRsZXJzW2lkXSkge1xuICAgICAgdGhpcy5oYW5kbGVyc1tpZF0gPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhciBhbGwgaW50ZXJjZXB0b3JzIGZyb20gdGhlIHN0YWNrXG4gICAqXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgY2xlYXIoKSB7XG4gICAgaWYgKHRoaXMuaGFuZGxlcnMpIHtcbiAgICAgIHRoaXMuaGFuZGxlcnMgPSBbXTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSXRlcmF0ZSBvdmVyIGFsbCB0aGUgcmVnaXN0ZXJlZCBpbnRlcmNlcHRvcnNcbiAgICpcbiAgICogVGhpcyBtZXRob2QgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3Igc2tpcHBpbmcgb3ZlciBhbnlcbiAgICogaW50ZXJjZXB0b3JzIHRoYXQgbWF5IGhhdmUgYmVjb21lIGBudWxsYCBjYWxsaW5nIGBlamVjdGAuXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGludGVyY2VwdG9yXG4gICAqXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgZm9yRWFjaChmbikge1xuICAgIHV0aWxzLmZvckVhY2godGhpcy5oYW5kbGVycywgZnVuY3Rpb24gZm9yRWFjaEhhbmRsZXIoaCkge1xuICAgICAgaWYgKGggIT09IG51bGwpIHtcbiAgICAgICAgZm4oaCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgSW50ZXJjZXB0b3JNYW5hZ2VyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHNpbGVudEpTT05QYXJzaW5nOiB0cnVlLFxuICBmb3JjZWRKU09OUGFyc2luZzogdHJ1ZSxcbiAgY2xhcmlmeVRpbWVvdXRFcnJvcjogZmFsc2Vcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBBeGlvc1VSTFNlYXJjaFBhcmFtcyBmcm9tICcuLi8uLi8uLi9oZWxwZXJzL0F4aW9zVVJMU2VhcmNoUGFyYW1zLmpzJztcbmV4cG9ydCBkZWZhdWx0IHR5cGVvZiBVUkxTZWFyY2hQYXJhbXMgIT09ICd1bmRlZmluZWQnID8gVVJMU2VhcmNoUGFyYW1zIDogQXhpb3NVUkxTZWFyY2hQYXJhbXM7XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBkZWZhdWx0IHR5cGVvZiBGb3JtRGF0YSAhPT0gJ3VuZGVmaW5lZCcgPyBGb3JtRGF0YSA6IG51bGw7XG4iLCIndXNlIHN0cmljdCdcblxuZXhwb3J0IGRlZmF1bHQgdHlwZW9mIEJsb2IgIT09ICd1bmRlZmluZWQnID8gQmxvYiA6IG51bGxcbiIsImltcG9ydCBVUkxTZWFyY2hQYXJhbXMgZnJvbSAnLi9jbGFzc2VzL1VSTFNlYXJjaFBhcmFtcy5qcydcbmltcG9ydCBGb3JtRGF0YSBmcm9tICcuL2NsYXNzZXMvRm9ybURhdGEuanMnXG5pbXBvcnQgQmxvYiBmcm9tICcuL2NsYXNzZXMvQmxvYi5qcydcblxuZXhwb3J0IGRlZmF1bHQge1xuICBpc0Jyb3dzZXI6IHRydWUsXG4gIGNsYXNzZXM6IHtcbiAgICBVUkxTZWFyY2hQYXJhbXMsXG4gICAgRm9ybURhdGEsXG4gICAgQmxvYlxuICB9LFxuICBwcm90b2NvbHM6IFsnaHR0cCcsICdodHRwcycsICdmaWxlJywgJ2Jsb2InLCAndXJsJywgJ2RhdGEnXVxufTtcbiIsImNvbnN0IGhhc0Jyb3dzZXJFbnYgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnO1xuXG4vKipcbiAqIERldGVybWluZSBpZiB3ZSdyZSBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudFxuICpcbiAqIFRoaXMgYWxsb3dzIGF4aW9zIHRvIHJ1biBpbiBhIHdlYiB3b3JrZXIsIGFuZCByZWFjdC1uYXRpdmUuXG4gKiBCb3RoIGVudmlyb25tZW50cyBzdXBwb3J0IFhNTEh0dHBSZXF1ZXN0LCBidXQgbm90IGZ1bGx5IHN0YW5kYXJkIGdsb2JhbHMuXG4gKlxuICogd2ViIHdvcmtlcnM6XG4gKiAgdHlwZW9mIHdpbmRvdyAtPiB1bmRlZmluZWRcbiAqICB0eXBlb2YgZG9jdW1lbnQgLT4gdW5kZWZpbmVkXG4gKlxuICogcmVhY3QtbmF0aXZlOlxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdSZWFjdE5hdGl2ZSdcbiAqIG5hdGl2ZXNjcmlwdFxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdOYXRpdmVTY3JpcHQnIG9yICdOUydcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuY29uc3QgaGFzU3RhbmRhcmRCcm93c2VyRW52ID0gKFxuICAocHJvZHVjdCkgPT4ge1xuICAgIHJldHVybiBoYXNCcm93c2VyRW52ICYmIFsnUmVhY3ROYXRpdmUnLCAnTmF0aXZlU2NyaXB0JywgJ05TJ10uaW5kZXhPZihwcm9kdWN0KSA8IDBcbiAgfSkodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnByb2R1Y3QpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiB3ZSdyZSBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciB3ZWJXb3JrZXIgZW52aXJvbm1lbnRcbiAqXG4gKiBBbHRob3VnaCB0aGUgYGlzU3RhbmRhcmRCcm93c2VyRW52YCBtZXRob2QgaW5kaWNhdGVzIHRoYXRcbiAqIGBhbGxvd3MgYXhpb3MgdG8gcnVuIGluIGEgd2ViIHdvcmtlcmAsIHRoZSBXZWJXb3JrZXIgd2lsbCBzdGlsbCBiZVxuICogZmlsdGVyZWQgb3V0IGR1ZSB0byBpdHMganVkZ21lbnQgc3RhbmRhcmRcbiAqIGB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnYC5cbiAqIFRoaXMgbGVhZHMgdG8gYSBwcm9ibGVtIHdoZW4gYXhpb3MgcG9zdCBgRm9ybURhdGFgIGluIHdlYldvcmtlclxuICovXG5jb25zdCBoYXNTdGFuZGFyZEJyb3dzZXJXZWJXb3JrZXJFbnYgPSAoKCkgPT4ge1xuICByZXR1cm4gKFxuICAgIHR5cGVvZiBXb3JrZXJHbG9iYWxTY29wZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICBzZWxmIGluc3RhbmNlb2YgV29ya2VyR2xvYmFsU2NvcGUgJiZcbiAgICB0eXBlb2Ygc2VsZi5pbXBvcnRTY3JpcHRzID09PSAnZnVuY3Rpb24nXG4gICk7XG59KSgpO1xuXG5jb25zdCBvcmlnaW4gPSBoYXNCcm93c2VyRW52ICYmIHdpbmRvdy5sb2NhdGlvbi5ocmVmIHx8ICdodHRwOi8vbG9jYWxob3N0JztcblxuZXhwb3J0IHtcbiAgaGFzQnJvd3NlckVudixcbiAgaGFzU3RhbmRhcmRCcm93c2VyV2ViV29ya2VyRW52LFxuICBoYXNTdGFuZGFyZEJyb3dzZXJFbnYsXG4gIG9yaWdpblxufVxuIiwiaW1wb3J0IHBsYXRmb3JtIGZyb20gJy4vbm9kZS9pbmRleC5qcyc7XG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuL2NvbW1vbi91dGlscy5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgLi4udXRpbHMsXG4gIC4uLnBsYXRmb3JtXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgdG9Gb3JtRGF0YSBmcm9tICcuL3RvRm9ybURhdGEuanMnO1xuaW1wb3J0IHBsYXRmb3JtIGZyb20gJy4uL3BsYXRmb3JtL2luZGV4LmpzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdG9VUkxFbmNvZGVkRm9ybShkYXRhLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b0Zvcm1EYXRhKGRhdGEsIG5ldyBwbGF0Zm9ybS5jbGFzc2VzLlVSTFNlYXJjaFBhcmFtcygpLCBPYmplY3QuYXNzaWduKHtcbiAgICB2aXNpdG9yOiBmdW5jdGlvbih2YWx1ZSwga2V5LCBwYXRoLCBoZWxwZXJzKSB7XG4gICAgICBpZiAocGxhdGZvcm0uaXNOb2RlICYmIHV0aWxzLmlzQnVmZmVyKHZhbHVlKSkge1xuICAgICAgICB0aGlzLmFwcGVuZChrZXksIHZhbHVlLnRvU3RyaW5nKCdiYXNlNjQnKSk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGhlbHBlcnMuZGVmYXVsdFZpc2l0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gIH0sIG9wdGlvbnMpKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcblxuLyoqXG4gKiBJdCB0YWtlcyBhIHN0cmluZyBsaWtlIGBmb29beF1beV1bel1gIGFuZCByZXR1cm5zIGFuIGFycmF5IGxpa2UgYFsnZm9vJywgJ3gnLCAneScsICd6J11cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKlxuICogQHJldHVybnMgQW4gYXJyYXkgb2Ygc3RyaW5ncy5cbiAqL1xuZnVuY3Rpb24gcGFyc2VQcm9wUGF0aChuYW1lKSB7XG4gIC8vIGZvb1t4XVt5XVt6XVxuICAvLyBmb28ueC55LnpcbiAgLy8gZm9vLXgteS16XG4gIC8vIGZvbyB4IHkgelxuICByZXR1cm4gdXRpbHMubWF0Y2hBbGwoL1xcdyt8XFxbKFxcdyopXS9nLCBuYW1lKS5tYXAobWF0Y2ggPT4ge1xuICAgIHJldHVybiBtYXRjaFswXSA9PT0gJ1tdJyA/ICcnIDogbWF0Y2hbMV0gfHwgbWF0Y2hbMF07XG4gIH0pO1xufVxuXG4vKipcbiAqIENvbnZlcnQgYW4gYXJyYXkgdG8gYW4gb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8YW55Pn0gYXJyIC0gVGhlIGFycmF5IHRvIGNvbnZlcnQgdG8gYW4gb2JqZWN0LlxuICpcbiAqIEByZXR1cm5zIEFuIG9iamVjdCB3aXRoIHRoZSBzYW1lIGtleXMgYW5kIHZhbHVlcyBhcyB0aGUgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGFycmF5VG9PYmplY3QoYXJyKSB7XG4gIGNvbnN0IG9iaiA9IHt9O1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoYXJyKTtcbiAgbGV0IGk7XG4gIGNvbnN0IGxlbiA9IGtleXMubGVuZ3RoO1xuICBsZXQga2V5O1xuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBrZXkgPSBrZXlzW2ldO1xuICAgIG9ialtrZXldID0gYXJyW2tleV07XG4gIH1cbiAgcmV0dXJuIG9iajtcbn1cblxuLyoqXG4gKiBJdCB0YWtlcyBhIEZvcm1EYXRhIG9iamVjdCBhbmQgcmV0dXJucyBhIEphdmFTY3JpcHQgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGZvcm1EYXRhIFRoZSBGb3JtRGF0YSBvYmplY3QgdG8gY29udmVydCB0byBKU09OLlxuICpcbiAqIEByZXR1cm5zIHtPYmplY3Q8c3RyaW5nLCBhbnk+IHwgbnVsbH0gVGhlIGNvbnZlcnRlZCBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGZvcm1EYXRhVG9KU09OKGZvcm1EYXRhKSB7XG4gIGZ1bmN0aW9uIGJ1aWxkUGF0aChwYXRoLCB2YWx1ZSwgdGFyZ2V0LCBpbmRleCkge1xuICAgIGxldCBuYW1lID0gcGF0aFtpbmRleCsrXTtcblxuICAgIGlmIChuYW1lID09PSAnX19wcm90b19fJykgcmV0dXJuIHRydWU7XG5cbiAgICBjb25zdCBpc051bWVyaWNLZXkgPSBOdW1iZXIuaXNGaW5pdGUoK25hbWUpO1xuICAgIGNvbnN0IGlzTGFzdCA9IGluZGV4ID49IHBhdGgubGVuZ3RoO1xuICAgIG5hbWUgPSAhbmFtZSAmJiB1dGlscy5pc0FycmF5KHRhcmdldCkgPyB0YXJnZXQubGVuZ3RoIDogbmFtZTtcblxuICAgIGlmIChpc0xhc3QpIHtcbiAgICAgIGlmICh1dGlscy5oYXNPd25Qcm9wKHRhcmdldCwgbmFtZSkpIHtcbiAgICAgICAgdGFyZ2V0W25hbWVdID0gW3RhcmdldFtuYW1lXSwgdmFsdWVdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGFyZ2V0W25hbWVdID0gdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAhaXNOdW1lcmljS2V5O1xuICAgIH1cblxuICAgIGlmICghdGFyZ2V0W25hbWVdIHx8ICF1dGlscy5pc09iamVjdCh0YXJnZXRbbmFtZV0pKSB7XG4gICAgICB0YXJnZXRbbmFtZV0gPSBbXTtcbiAgICB9XG5cbiAgICBjb25zdCByZXN1bHQgPSBidWlsZFBhdGgocGF0aCwgdmFsdWUsIHRhcmdldFtuYW1lXSwgaW5kZXgpO1xuXG4gICAgaWYgKHJlc3VsdCAmJiB1dGlscy5pc0FycmF5KHRhcmdldFtuYW1lXSkpIHtcbiAgICAgIHRhcmdldFtuYW1lXSA9IGFycmF5VG9PYmplY3QodGFyZ2V0W25hbWVdKTtcbiAgICB9XG5cbiAgICByZXR1cm4gIWlzTnVtZXJpY0tleTtcbiAgfVxuXG4gIGlmICh1dGlscy5pc0Zvcm1EYXRhKGZvcm1EYXRhKSAmJiB1dGlscy5pc0Z1bmN0aW9uKGZvcm1EYXRhLmVudHJpZXMpKSB7XG4gICAgY29uc3Qgb2JqID0ge307XG5cbiAgICB1dGlscy5mb3JFYWNoRW50cnkoZm9ybURhdGEsIChuYW1lLCB2YWx1ZSkgPT4ge1xuICAgICAgYnVpbGRQYXRoKHBhcnNlUHJvcFBhdGgobmFtZSksIHZhbHVlLCBvYmosIDApO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmb3JtRGF0YVRvSlNPTjtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4uL2NvcmUvQXhpb3NFcnJvci5qcyc7XG5pbXBvcnQgdHJhbnNpdGlvbmFsRGVmYXVsdHMgZnJvbSAnLi90cmFuc2l0aW9uYWwuanMnO1xuaW1wb3J0IHRvRm9ybURhdGEgZnJvbSAnLi4vaGVscGVycy90b0Zvcm1EYXRhLmpzJztcbmltcG9ydCB0b1VSTEVuY29kZWRGb3JtIGZyb20gJy4uL2hlbHBlcnMvdG9VUkxFbmNvZGVkRm9ybS5qcyc7XG5pbXBvcnQgcGxhdGZvcm0gZnJvbSAnLi4vcGxhdGZvcm0vaW5kZXguanMnO1xuaW1wb3J0IGZvcm1EYXRhVG9KU09OIGZyb20gJy4uL2hlbHBlcnMvZm9ybURhdGFUb0pTT04uanMnO1xuXG4vKipcbiAqIEl0IHRha2VzIGEgc3RyaW5nLCB0cmllcyB0byBwYXJzZSBpdCwgYW5kIGlmIGl0IGZhaWxzLCBpdCByZXR1cm5zIHRoZSBzdHJpbmdpZmllZCB2ZXJzaW9uXG4gKiBvZiB0aGUgaW5wdXRcbiAqXG4gKiBAcGFyYW0ge2FueX0gcmF3VmFsdWUgLSBUaGUgdmFsdWUgdG8gYmUgc3RyaW5naWZpZWQuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwYXJzZXIgLSBBIGZ1bmN0aW9uIHRoYXQgcGFyc2VzIGEgc3RyaW5nIGludG8gYSBKYXZhU2NyaXB0IG9iamVjdC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVuY29kZXIgLSBBIGZ1bmN0aW9uIHRoYXQgdGFrZXMgYSB2YWx1ZSBhbmQgcmV0dXJucyBhIHN0cmluZy5cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIHN0cmluZ2lmaWVkIHZlcnNpb24gb2YgdGhlIHJhd1ZhbHVlLlxuICovXG5mdW5jdGlvbiBzdHJpbmdpZnlTYWZlbHkocmF3VmFsdWUsIHBhcnNlciwgZW5jb2Rlcikge1xuICBpZiAodXRpbHMuaXNTdHJpbmcocmF3VmFsdWUpKSB7XG4gICAgdHJ5IHtcbiAgICAgIChwYXJzZXIgfHwgSlNPTi5wYXJzZSkocmF3VmFsdWUpO1xuICAgICAgcmV0dXJuIHV0aWxzLnRyaW0ocmF3VmFsdWUpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmIChlLm5hbWUgIT09ICdTeW50YXhFcnJvcicpIHtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gKGVuY29kZXIgfHwgSlNPTi5zdHJpbmdpZnkpKHJhd1ZhbHVlKTtcbn1cblxuY29uc3QgZGVmYXVsdHMgPSB7XG5cbiAgdHJhbnNpdGlvbmFsOiB0cmFuc2l0aW9uYWxEZWZhdWx0cyxcblxuICBhZGFwdGVyOiBbJ3hocicsICdodHRwJywgJ2ZldGNoJ10sXG5cbiAgdHJhbnNmb3JtUmVxdWVzdDogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlcXVlc3QoZGF0YSwgaGVhZGVycykge1xuICAgIGNvbnN0IGNvbnRlbnRUeXBlID0gaGVhZGVycy5nZXRDb250ZW50VHlwZSgpIHx8ICcnO1xuICAgIGNvbnN0IGhhc0pTT05Db250ZW50VHlwZSA9IGNvbnRlbnRUeXBlLmluZGV4T2YoJ2FwcGxpY2F0aW9uL2pzb24nKSA+IC0xO1xuICAgIGNvbnN0IGlzT2JqZWN0UGF5bG9hZCA9IHV0aWxzLmlzT2JqZWN0KGRhdGEpO1xuXG4gICAgaWYgKGlzT2JqZWN0UGF5bG9hZCAmJiB1dGlscy5pc0hUTUxGb3JtKGRhdGEpKSB7XG4gICAgICBkYXRhID0gbmV3IEZvcm1EYXRhKGRhdGEpO1xuICAgIH1cblxuICAgIGNvbnN0IGlzRm9ybURhdGEgPSB1dGlscy5pc0Zvcm1EYXRhKGRhdGEpO1xuXG4gICAgaWYgKGlzRm9ybURhdGEpIHtcbiAgICAgIHJldHVybiBoYXNKU09OQ29udGVudFR5cGUgPyBKU09OLnN0cmluZ2lmeShmb3JtRGF0YVRvSlNPTihkYXRhKSkgOiBkYXRhO1xuICAgIH1cblxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc1JlYWRhYmxlU3RyZWFtKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgaGVhZGVycy5zZXRDb250ZW50VHlwZSgnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9dXRmLTgnLCBmYWxzZSk7XG4gICAgICByZXR1cm4gZGF0YS50b1N0cmluZygpO1xuICAgIH1cblxuICAgIGxldCBpc0ZpbGVMaXN0O1xuXG4gICAgaWYgKGlzT2JqZWN0UGF5bG9hZCkge1xuICAgICAgaWYgKGNvbnRlbnRUeXBlLmluZGV4T2YoJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcpID4gLTEpIHtcbiAgICAgICAgcmV0dXJuIHRvVVJMRW5jb2RlZEZvcm0oZGF0YSwgdGhpcy5mb3JtU2VyaWFsaXplcikudG9TdHJpbmcoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKChpc0ZpbGVMaXN0ID0gdXRpbHMuaXNGaWxlTGlzdChkYXRhKSkgfHwgY29udGVudFR5cGUuaW5kZXhPZignbXVsdGlwYXJ0L2Zvcm0tZGF0YScpID4gLTEpIHtcbiAgICAgICAgY29uc3QgX0Zvcm1EYXRhID0gdGhpcy5lbnYgJiYgdGhpcy5lbnYuRm9ybURhdGE7XG5cbiAgICAgICAgcmV0dXJuIHRvRm9ybURhdGEoXG4gICAgICAgICAgaXNGaWxlTGlzdCA/IHsnZmlsZXNbXSc6IGRhdGF9IDogZGF0YSxcbiAgICAgICAgICBfRm9ybURhdGEgJiYgbmV3IF9Gb3JtRGF0YSgpLFxuICAgICAgICAgIHRoaXMuZm9ybVNlcmlhbGl6ZXJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaXNPYmplY3RQYXlsb2FkIHx8IGhhc0pTT05Db250ZW50VHlwZSApIHtcbiAgICAgIGhlYWRlcnMuc2V0Q29udGVudFR5cGUoJ2FwcGxpY2F0aW9uL2pzb24nLCBmYWxzZSk7XG4gICAgICByZXR1cm4gc3RyaW5naWZ5U2FmZWx5KGRhdGEpO1xuICAgIH1cblxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICB0cmFuc2Zvcm1SZXNwb25zZTogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlc3BvbnNlKGRhdGEpIHtcbiAgICBjb25zdCB0cmFuc2l0aW9uYWwgPSB0aGlzLnRyYW5zaXRpb25hbCB8fCBkZWZhdWx0cy50cmFuc2l0aW9uYWw7XG4gICAgY29uc3QgZm9yY2VkSlNPTlBhcnNpbmcgPSB0cmFuc2l0aW9uYWwgJiYgdHJhbnNpdGlvbmFsLmZvcmNlZEpTT05QYXJzaW5nO1xuICAgIGNvbnN0IEpTT05SZXF1ZXN0ZWQgPSB0aGlzLnJlc3BvbnNlVHlwZSA9PT0gJ2pzb24nO1xuXG4gICAgaWYgKHV0aWxzLmlzUmVzcG9uc2UoZGF0YSkgfHwgdXRpbHMuaXNSZWFkYWJsZVN0cmVhbShkYXRhKSkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgaWYgKGRhdGEgJiYgdXRpbHMuaXNTdHJpbmcoZGF0YSkgJiYgKChmb3JjZWRKU09OUGFyc2luZyAmJiAhdGhpcy5yZXNwb25zZVR5cGUpIHx8IEpTT05SZXF1ZXN0ZWQpKSB7XG4gICAgICBjb25zdCBzaWxlbnRKU09OUGFyc2luZyA9IHRyYW5zaXRpb25hbCAmJiB0cmFuc2l0aW9uYWwuc2lsZW50SlNPTlBhcnNpbmc7XG4gICAgICBjb25zdCBzdHJpY3RKU09OUGFyc2luZyA9ICFzaWxlbnRKU09OUGFyc2luZyAmJiBKU09OUmVxdWVzdGVkO1xuXG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKHN0cmljdEpTT05QYXJzaW5nKSB7XG4gICAgICAgICAgaWYgKGUubmFtZSA9PT0gJ1N5bnRheEVycm9yJykge1xuICAgICAgICAgICAgdGhyb3cgQXhpb3NFcnJvci5mcm9tKGUsIEF4aW9zRXJyb3IuRVJSX0JBRF9SRVNQT05TRSwgdGhpcywgbnVsbCwgdGhpcy5yZXNwb25zZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgLyoqXG4gICAqIEEgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgdG8gYWJvcnQgYSByZXF1ZXN0LiBJZiBzZXQgdG8gMCAoZGVmYXVsdCkgYVxuICAgKiB0aW1lb3V0IGlzIG5vdCBjcmVhdGVkLlxuICAgKi9cbiAgdGltZW91dDogMCxcblxuICB4c3JmQ29va2llTmFtZTogJ1hTUkYtVE9LRU4nLFxuICB4c3JmSGVhZGVyTmFtZTogJ1gtWFNSRi1UT0tFTicsXG5cbiAgbWF4Q29udGVudExlbmd0aDogLTEsXG4gIG1heEJvZHlMZW5ndGg6IC0xLFxuXG4gIGVudjoge1xuICAgIEZvcm1EYXRhOiBwbGF0Zm9ybS5jbGFzc2VzLkZvcm1EYXRhLFxuICAgIEJsb2I6IHBsYXRmb3JtLmNsYXNzZXMuQmxvYlxuICB9LFxuXG4gIHZhbGlkYXRlU3RhdHVzOiBmdW5jdGlvbiB2YWxpZGF0ZVN0YXR1cyhzdGF0dXMpIHtcbiAgICByZXR1cm4gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDA7XG4gIH0sXG5cbiAgaGVhZGVyczoge1xuICAgIGNvbW1vbjoge1xuICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonLFxuICAgICAgJ0NvbnRlbnQtVHlwZSc6IHVuZGVmaW5lZFxuICAgIH1cbiAgfVxufTtcblxudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCddLCAobWV0aG9kKSA9PiB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHt9O1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGRlZmF1bHRzO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5cbi8vIFJhd0F4aW9zSGVhZGVycyB3aG9zZSBkdXBsaWNhdGVzIGFyZSBpZ25vcmVkIGJ5IG5vZGVcbi8vIGMuZi4gaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9odHRwLmh0bWwjaHR0cF9tZXNzYWdlX2hlYWRlcnNcbmNvbnN0IGlnbm9yZUR1cGxpY2F0ZU9mID0gdXRpbHMudG9PYmplY3RTZXQoW1xuICAnYWdlJywgJ2F1dGhvcml6YXRpb24nLCAnY29udGVudC1sZW5ndGgnLCAnY29udGVudC10eXBlJywgJ2V0YWcnLFxuICAnZXhwaXJlcycsICdmcm9tJywgJ2hvc3QnLCAnaWYtbW9kaWZpZWQtc2luY2UnLCAnaWYtdW5tb2RpZmllZC1zaW5jZScsXG4gICdsYXN0LW1vZGlmaWVkJywgJ2xvY2F0aW9uJywgJ21heC1mb3J3YXJkcycsICdwcm94eS1hdXRob3JpemF0aW9uJyxcbiAgJ3JlZmVyZXInLCAncmV0cnktYWZ0ZXInLCAndXNlci1hZ2VudCdcbl0pO1xuXG4vKipcbiAqIFBhcnNlIGhlYWRlcnMgaW50byBhbiBvYmplY3RcbiAqXG4gKiBgYGBcbiAqIERhdGU6IFdlZCwgMjcgQXVnIDIwMTQgMDg6NTg6NDkgR01UXG4gKiBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25cbiAqIENvbm5lY3Rpb246IGtlZXAtYWxpdmVcbiAqIFRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcmF3SGVhZGVycyBIZWFkZXJzIG5lZWRpbmcgdG8gYmUgcGFyc2VkXG4gKlxuICogQHJldHVybnMge09iamVjdH0gSGVhZGVycyBwYXJzZWQgaW50byBhbiBvYmplY3RcbiAqL1xuZXhwb3J0IGRlZmF1bHQgcmF3SGVhZGVycyA9PiB7XG4gIGNvbnN0IHBhcnNlZCA9IHt9O1xuICBsZXQga2V5O1xuICBsZXQgdmFsO1xuICBsZXQgaTtcblxuICByYXdIZWFkZXJzICYmIHJhd0hlYWRlcnMuc3BsaXQoJ1xcbicpLmZvckVhY2goZnVuY3Rpb24gcGFyc2VyKGxpbmUpIHtcbiAgICBpID0gbGluZS5pbmRleE9mKCc6Jyk7XG4gICAga2V5ID0gbGluZS5zdWJzdHJpbmcoMCwgaSkudHJpbSgpLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFsID0gbGluZS5zdWJzdHJpbmcoaSArIDEpLnRyaW0oKTtcblxuICAgIGlmICgha2V5IHx8IChwYXJzZWRba2V5XSAmJiBpZ25vcmVEdXBsaWNhdGVPZltrZXldKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChrZXkgPT09ICdzZXQtY29va2llJykge1xuICAgICAgaWYgKHBhcnNlZFtrZXldKSB7XG4gICAgICAgIHBhcnNlZFtrZXldLnB1c2godmFsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gW3ZhbF07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcnNlZFtrZXldID0gcGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSArICcsICcgKyB2YWwgOiB2YWw7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcGFyc2VkO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCBwYXJzZUhlYWRlcnMgZnJvbSAnLi4vaGVscGVycy9wYXJzZUhlYWRlcnMuanMnO1xuXG5jb25zdCAkaW50ZXJuYWxzID0gU3ltYm9sKCdpbnRlcm5hbHMnKTtcblxuZnVuY3Rpb24gbm9ybWFsaXplSGVhZGVyKGhlYWRlcikge1xuICByZXR1cm4gaGVhZGVyICYmIFN0cmluZyhoZWFkZXIpLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemVWYWx1ZSh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT09IGZhbHNlIHx8IHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gdXRpbHMuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZS5tYXAobm9ybWFsaXplVmFsdWUpIDogU3RyaW5nKHZhbHVlKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VUb2tlbnMoc3RyKSB7XG4gIGNvbnN0IHRva2VucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGNvbnN0IHRva2Vuc1JFID0gLyhbXlxccyw7PV0rKVxccyooPzo9XFxzKihbXiw7XSspKT8vZztcbiAgbGV0IG1hdGNoO1xuXG4gIHdoaWxlICgobWF0Y2ggPSB0b2tlbnNSRS5leGVjKHN0cikpKSB7XG4gICAgdG9rZW5zW21hdGNoWzFdXSA9IG1hdGNoWzJdO1xuICB9XG5cbiAgcmV0dXJuIHRva2Vucztcbn1cblxuY29uc3QgaXNWYWxpZEhlYWRlck5hbWUgPSAoc3RyKSA9PiAvXlstX2EtekEtWjAtOV5gfH4sISMkJSYnKisuXSskLy50ZXN0KHN0ci50cmltKCkpO1xuXG5mdW5jdGlvbiBtYXRjaEhlYWRlclZhbHVlKGNvbnRleHQsIHZhbHVlLCBoZWFkZXIsIGZpbHRlciwgaXNIZWFkZXJOYW1lRmlsdGVyKSB7XG4gIGlmICh1dGlscy5pc0Z1bmN0aW9uKGZpbHRlcikpIHtcbiAgICByZXR1cm4gZmlsdGVyLmNhbGwodGhpcywgdmFsdWUsIGhlYWRlcik7XG4gIH1cblxuICBpZiAoaXNIZWFkZXJOYW1lRmlsdGVyKSB7XG4gICAgdmFsdWUgPSBoZWFkZXI7XG4gIH1cblxuICBpZiAoIXV0aWxzLmlzU3RyaW5nKHZhbHVlKSkgcmV0dXJuO1xuXG4gIGlmICh1dGlscy5pc1N0cmluZyhmaWx0ZXIpKSB7XG4gICAgcmV0dXJuIHZhbHVlLmluZGV4T2YoZmlsdGVyKSAhPT0gLTE7XG4gIH1cblxuICBpZiAodXRpbHMuaXNSZWdFeHAoZmlsdGVyKSkge1xuICAgIHJldHVybiBmaWx0ZXIudGVzdCh2YWx1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZm9ybWF0SGVhZGVyKGhlYWRlcikge1xuICByZXR1cm4gaGVhZGVyLnRyaW0oKVxuICAgIC50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoLyhbYS16XFxkXSkoXFx3KikvZywgKHcsIGNoYXIsIHN0cikgPT4ge1xuICAgICAgcmV0dXJuIGNoYXIudG9VcHBlckNhc2UoKSArIHN0cjtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gYnVpbGRBY2Nlc3NvcnMob2JqLCBoZWFkZXIpIHtcbiAgY29uc3QgYWNjZXNzb3JOYW1lID0gdXRpbHMudG9DYW1lbENhc2UoJyAnICsgaGVhZGVyKTtcblxuICBbJ2dldCcsICdzZXQnLCAnaGFzJ10uZm9yRWFjaChtZXRob2ROYW1lID0+IHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBtZXRob2ROYW1lICsgYWNjZXNzb3JOYW1lLCB7XG4gICAgICB2YWx1ZTogZnVuY3Rpb24oYXJnMSwgYXJnMiwgYXJnMykge1xuICAgICAgICByZXR1cm4gdGhpc1ttZXRob2ROYW1lXS5jYWxsKHRoaXMsIGhlYWRlciwgYXJnMSwgYXJnMiwgYXJnMyk7XG4gICAgICB9LFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0pO1xufVxuXG5jbGFzcyBBeGlvc0hlYWRlcnMge1xuICBjb25zdHJ1Y3RvcihoZWFkZXJzKSB7XG4gICAgaGVhZGVycyAmJiB0aGlzLnNldChoZWFkZXJzKTtcbiAgfVxuXG4gIHNldChoZWFkZXIsIHZhbHVlT3JSZXdyaXRlLCByZXdyaXRlKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG5cbiAgICBmdW5jdGlvbiBzZXRIZWFkZXIoX3ZhbHVlLCBfaGVhZGVyLCBfcmV3cml0ZSkge1xuICAgICAgY29uc3QgbEhlYWRlciA9IG5vcm1hbGl6ZUhlYWRlcihfaGVhZGVyKTtcblxuICAgICAgaWYgKCFsSGVhZGVyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignaGVhZGVyIG5hbWUgbXVzdCBiZSBhIG5vbi1lbXB0eSBzdHJpbmcnKTtcbiAgICAgIH1cblxuICAgICAgY29uc3Qga2V5ID0gdXRpbHMuZmluZEtleShzZWxmLCBsSGVhZGVyKTtcblxuICAgICAgaWYoIWtleSB8fCBzZWxmW2tleV0gPT09IHVuZGVmaW5lZCB8fCBfcmV3cml0ZSA9PT0gdHJ1ZSB8fCAoX3Jld3JpdGUgPT09IHVuZGVmaW5lZCAmJiBzZWxmW2tleV0gIT09IGZhbHNlKSkge1xuICAgICAgICBzZWxmW2tleSB8fCBfaGVhZGVyXSA9IG5vcm1hbGl6ZVZhbHVlKF92YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3Qgc2V0SGVhZGVycyA9IChoZWFkZXJzLCBfcmV3cml0ZSkgPT5cbiAgICAgIHV0aWxzLmZvckVhY2goaGVhZGVycywgKF92YWx1ZSwgX2hlYWRlcikgPT4gc2V0SGVhZGVyKF92YWx1ZSwgX2hlYWRlciwgX3Jld3JpdGUpKTtcblxuICAgIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KGhlYWRlcikgfHwgaGVhZGVyIGluc3RhbmNlb2YgdGhpcy5jb25zdHJ1Y3Rvcikge1xuICAgICAgc2V0SGVhZGVycyhoZWFkZXIsIHZhbHVlT3JSZXdyaXRlKVxuICAgIH0gZWxzZSBpZih1dGlscy5pc1N0cmluZyhoZWFkZXIpICYmIChoZWFkZXIgPSBoZWFkZXIudHJpbSgpKSAmJiAhaXNWYWxpZEhlYWRlck5hbWUoaGVhZGVyKSkge1xuICAgICAgc2V0SGVhZGVycyhwYXJzZUhlYWRlcnMoaGVhZGVyKSwgdmFsdWVPclJld3JpdGUpO1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNIZWFkZXJzKGhlYWRlcikpIHtcbiAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIGhlYWRlci5lbnRyaWVzKCkpIHtcbiAgICAgICAgc2V0SGVhZGVyKHZhbHVlLCBrZXksIHJld3JpdGUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBoZWFkZXIgIT0gbnVsbCAmJiBzZXRIZWFkZXIodmFsdWVPclJld3JpdGUsIGhlYWRlciwgcmV3cml0ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBnZXQoaGVhZGVyLCBwYXJzZXIpIHtcbiAgICBoZWFkZXIgPSBub3JtYWxpemVIZWFkZXIoaGVhZGVyKTtcblxuICAgIGlmIChoZWFkZXIpIHtcbiAgICAgIGNvbnN0IGtleSA9IHV0aWxzLmZpbmRLZXkodGhpcywgaGVhZGVyKTtcblxuICAgICAgaWYgKGtleSkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXNba2V5XTtcblxuICAgICAgICBpZiAoIXBhcnNlcikge1xuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwYXJzZXIgPT09IHRydWUpIHtcbiAgICAgICAgICByZXR1cm4gcGFyc2VUb2tlbnModmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzRnVuY3Rpb24ocGFyc2VyKSkge1xuICAgICAgICAgIHJldHVybiBwYXJzZXIuY2FsbCh0aGlzLCB2YWx1ZSwga2V5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1dGlscy5pc1JlZ0V4cChwYXJzZXIpKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcnNlci5leGVjKHZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3BhcnNlciBtdXN0IGJlIGJvb2xlYW58cmVnZXhwfGZ1bmN0aW9uJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaGFzKGhlYWRlciwgbWF0Y2hlcikge1xuICAgIGhlYWRlciA9IG5vcm1hbGl6ZUhlYWRlcihoZWFkZXIpO1xuXG4gICAgaWYgKGhlYWRlcikge1xuICAgICAgY29uc3Qga2V5ID0gdXRpbHMuZmluZEtleSh0aGlzLCBoZWFkZXIpO1xuXG4gICAgICByZXR1cm4gISEoa2V5ICYmIHRoaXNba2V5XSAhPT0gdW5kZWZpbmVkICYmICghbWF0Y2hlciB8fCBtYXRjaEhlYWRlclZhbHVlKHRoaXMsIHRoaXNba2V5XSwga2V5LCBtYXRjaGVyKSkpO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGRlbGV0ZShoZWFkZXIsIG1hdGNoZXIpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBsZXQgZGVsZXRlZCA9IGZhbHNlO1xuXG4gICAgZnVuY3Rpb24gZGVsZXRlSGVhZGVyKF9oZWFkZXIpIHtcbiAgICAgIF9oZWFkZXIgPSBub3JtYWxpemVIZWFkZXIoX2hlYWRlcik7XG5cbiAgICAgIGlmIChfaGVhZGVyKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IHV0aWxzLmZpbmRLZXkoc2VsZiwgX2hlYWRlcik7XG5cbiAgICAgICAgaWYgKGtleSAmJiAoIW1hdGNoZXIgfHwgbWF0Y2hIZWFkZXJWYWx1ZShzZWxmLCBzZWxmW2tleV0sIGtleSwgbWF0Y2hlcikpKSB7XG4gICAgICAgICAgZGVsZXRlIHNlbGZba2V5XTtcblxuICAgICAgICAgIGRlbGV0ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHV0aWxzLmlzQXJyYXkoaGVhZGVyKSkge1xuICAgICAgaGVhZGVyLmZvckVhY2goZGVsZXRlSGVhZGVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlSGVhZGVyKGhlYWRlcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlbGV0ZWQ7XG4gIH1cblxuICBjbGVhcihtYXRjaGVyKSB7XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHRoaXMpO1xuICAgIGxldCBpID0ga2V5cy5sZW5ndGg7XG4gICAgbGV0IGRlbGV0ZWQgPSBmYWxzZTtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGNvbnN0IGtleSA9IGtleXNbaV07XG4gICAgICBpZighbWF0Y2hlciB8fCBtYXRjaEhlYWRlclZhbHVlKHRoaXMsIHRoaXNba2V5XSwga2V5LCBtYXRjaGVyLCB0cnVlKSkge1xuICAgICAgICBkZWxldGUgdGhpc1trZXldO1xuICAgICAgICBkZWxldGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGVsZXRlZDtcbiAgfVxuXG4gIG5vcm1hbGl6ZShmb3JtYXQpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG5cbiAgICB1dGlscy5mb3JFYWNoKHRoaXMsICh2YWx1ZSwgaGVhZGVyKSA9PiB7XG4gICAgICBjb25zdCBrZXkgPSB1dGlscy5maW5kS2V5KGhlYWRlcnMsIGhlYWRlcik7XG5cbiAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgc2VsZltrZXldID0gbm9ybWFsaXplVmFsdWUodmFsdWUpO1xuICAgICAgICBkZWxldGUgc2VsZltoZWFkZXJdO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG5vcm1hbGl6ZWQgPSBmb3JtYXQgPyBmb3JtYXRIZWFkZXIoaGVhZGVyKSA6IFN0cmluZyhoZWFkZXIpLnRyaW0oKTtcblxuICAgICAgaWYgKG5vcm1hbGl6ZWQgIT09IGhlYWRlcikge1xuICAgICAgICBkZWxldGUgc2VsZltoZWFkZXJdO1xuICAgICAgfVxuXG4gICAgICBzZWxmW25vcm1hbGl6ZWRdID0gbm9ybWFsaXplVmFsdWUodmFsdWUpO1xuXG4gICAgICBoZWFkZXJzW25vcm1hbGl6ZWRdID0gdHJ1ZTtcbiAgICB9KTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgY29uY2F0KC4uLnRhcmdldHMpIHtcbiAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5jb25jYXQodGhpcywgLi4udGFyZ2V0cyk7XG4gIH1cblxuICB0b0pTT04oYXNTdHJpbmdzKSB7XG4gICAgY29uc3Qgb2JqID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAgIHV0aWxzLmZvckVhY2godGhpcywgKHZhbHVlLCBoZWFkZXIpID0+IHtcbiAgICAgIHZhbHVlICE9IG51bGwgJiYgdmFsdWUgIT09IGZhbHNlICYmIChvYmpbaGVhZGVyXSA9IGFzU3RyaW5ncyAmJiB1dGlscy5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLmpvaW4oJywgJykgOiB2YWx1ZSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gb2JqO1xuICB9XG5cbiAgW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKHRoaXMudG9KU09OKCkpW1N5bWJvbC5pdGVyYXRvcl0oKTtcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBPYmplY3QuZW50cmllcyh0aGlzLnRvSlNPTigpKS5tYXAoKFtoZWFkZXIsIHZhbHVlXSkgPT4gaGVhZGVyICsgJzogJyArIHZhbHVlKS5qb2luKCdcXG4nKTtcbiAgfVxuXG4gIGdldCBbU3ltYm9sLnRvU3RyaW5nVGFnXSgpIHtcbiAgICByZXR1cm4gJ0F4aW9zSGVhZGVycyc7XG4gIH1cblxuICBzdGF0aWMgZnJvbSh0aGluZykge1xuICAgIHJldHVybiB0aGluZyBpbnN0YW5jZW9mIHRoaXMgPyB0aGluZyA6IG5ldyB0aGlzKHRoaW5nKTtcbiAgfVxuXG4gIHN0YXRpYyBjb25jYXQoZmlyc3QsIC4uLnRhcmdldHMpIHtcbiAgICBjb25zdCBjb21wdXRlZCA9IG5ldyB0aGlzKGZpcnN0KTtcblxuICAgIHRhcmdldHMuZm9yRWFjaCgodGFyZ2V0KSA9PiBjb21wdXRlZC5zZXQodGFyZ2V0KSk7XG5cbiAgICByZXR1cm4gY29tcHV0ZWQ7XG4gIH1cblxuICBzdGF0aWMgYWNjZXNzb3IoaGVhZGVyKSB7XG4gICAgY29uc3QgaW50ZXJuYWxzID0gdGhpc1skaW50ZXJuYWxzXSA9ICh0aGlzWyRpbnRlcm5hbHNdID0ge1xuICAgICAgYWNjZXNzb3JzOiB7fVxuICAgIH0pO1xuXG4gICAgY29uc3QgYWNjZXNzb3JzID0gaW50ZXJuYWxzLmFjY2Vzc29ycztcbiAgICBjb25zdCBwcm90b3R5cGUgPSB0aGlzLnByb3RvdHlwZTtcblxuICAgIGZ1bmN0aW9uIGRlZmluZUFjY2Vzc29yKF9oZWFkZXIpIHtcbiAgICAgIGNvbnN0IGxIZWFkZXIgPSBub3JtYWxpemVIZWFkZXIoX2hlYWRlcik7XG5cbiAgICAgIGlmICghYWNjZXNzb3JzW2xIZWFkZXJdKSB7XG4gICAgICAgIGJ1aWxkQWNjZXNzb3JzKHByb3RvdHlwZSwgX2hlYWRlcik7XG4gICAgICAgIGFjY2Vzc29yc1tsSGVhZGVyXSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdXRpbHMuaXNBcnJheShoZWFkZXIpID8gaGVhZGVyLmZvckVhY2goZGVmaW5lQWNjZXNzb3IpIDogZGVmaW5lQWNjZXNzb3IoaGVhZGVyKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG59XG5cbkF4aW9zSGVhZGVycy5hY2Nlc3NvcihbJ0NvbnRlbnQtVHlwZScsICdDb250ZW50LUxlbmd0aCcsICdBY2NlcHQnLCAnQWNjZXB0LUVuY29kaW5nJywgJ1VzZXItQWdlbnQnLCAnQXV0aG9yaXphdGlvbiddKTtcblxuLy8gcmVzZXJ2ZWQgbmFtZXMgaG90Zml4XG51dGlscy5yZWR1Y2VEZXNjcmlwdG9ycyhBeGlvc0hlYWRlcnMucHJvdG90eXBlLCAoe3ZhbHVlfSwga2V5KSA9PiB7XG4gIGxldCBtYXBwZWQgPSBrZXlbMF0udG9VcHBlckNhc2UoKSArIGtleS5zbGljZSgxKTsgLy8gbWFwIGBzZXRgID0+IGBTZXRgXG4gIHJldHVybiB7XG4gICAgZ2V0OiAoKSA9PiB2YWx1ZSxcbiAgICBzZXQoaGVhZGVyVmFsdWUpIHtcbiAgICAgIHRoaXNbbWFwcGVkXSA9IGhlYWRlclZhbHVlO1xuICAgIH1cbiAgfVxufSk7XG5cbnV0aWxzLmZyZWV6ZU1ldGhvZHMoQXhpb3NIZWFkZXJzKTtcblxuZXhwb3J0IGRlZmF1bHQgQXhpb3NIZWFkZXJzO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5pbXBvcnQgZGVmYXVsdHMgZnJvbSAnLi4vZGVmYXVsdHMvaW5kZXguanMnO1xuaW1wb3J0IEF4aW9zSGVhZGVycyBmcm9tICcuLi9jb3JlL0F4aW9zSGVhZGVycy5qcyc7XG5cbi8qKlxuICogVHJhbnNmb3JtIHRoZSBkYXRhIGZvciBhIHJlcXVlc3Qgb3IgYSByZXNwb25zZVxuICpcbiAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb259IGZucyBBIHNpbmdsZSBmdW5jdGlvbiBvciBBcnJheSBvZiBmdW5jdGlvbnNcbiAqIEBwYXJhbSB7P09iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlIG9iamVjdFxuICpcbiAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0aW5nIHRyYW5zZm9ybWVkIGRhdGFcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHJhbnNmb3JtRGF0YShmbnMsIHJlc3BvbnNlKSB7XG4gIGNvbnN0IGNvbmZpZyA9IHRoaXMgfHwgZGVmYXVsdHM7XG4gIGNvbnN0IGNvbnRleHQgPSByZXNwb25zZSB8fCBjb25maWc7XG4gIGNvbnN0IGhlYWRlcnMgPSBBeGlvc0hlYWRlcnMuZnJvbShjb250ZXh0LmhlYWRlcnMpO1xuICBsZXQgZGF0YSA9IGNvbnRleHQuZGF0YTtcblxuICB1dGlscy5mb3JFYWNoKGZucywgZnVuY3Rpb24gdHJhbnNmb3JtKGZuKSB7XG4gICAgZGF0YSA9IGZuLmNhbGwoY29uZmlnLCBkYXRhLCBoZWFkZXJzLm5vcm1hbGl6ZSgpLCByZXNwb25zZSA/IHJlc3BvbnNlLnN0YXR1cyA6IHVuZGVmaW5lZCk7XG4gIH0pO1xuXG4gIGhlYWRlcnMubm9ybWFsaXplKCk7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzQ2FuY2VsKHZhbHVlKSB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5fX0NBTkNFTF9fKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSAnLi4vY29yZS9BeGlvc0Vycm9yLmpzJztcbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5cbi8qKlxuICogQSBgQ2FuY2VsZWRFcnJvcmAgaXMgYW4gb2JqZWN0IHRoYXQgaXMgdGhyb3duIHdoZW4gYW4gb3BlcmF0aW9uIGlzIGNhbmNlbGVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbWVzc2FnZSBUaGUgbWVzc2FnZS5cbiAqIEBwYXJhbSB7T2JqZWN0PX0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge09iamVjdD19IHJlcXVlc3QgVGhlIHJlcXVlc3QuXG4gKlxuICogQHJldHVybnMge0NhbmNlbGVkRXJyb3J9IFRoZSBjcmVhdGVkIGVycm9yLlxuICovXG5mdW5jdGlvbiBDYW5jZWxlZEVycm9yKG1lc3NhZ2UsIGNvbmZpZywgcmVxdWVzdCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXEtbnVsbCxlcWVxZXFcbiAgQXhpb3NFcnJvci5jYWxsKHRoaXMsIG1lc3NhZ2UgPT0gbnVsbCA/ICdjYW5jZWxlZCcgOiBtZXNzYWdlLCBBeGlvc0Vycm9yLkVSUl9DQU5DRUxFRCwgY29uZmlnLCByZXF1ZXN0KTtcbiAgdGhpcy5uYW1lID0gJ0NhbmNlbGVkRXJyb3InO1xufVxuXG51dGlscy5pbmhlcml0cyhDYW5jZWxlZEVycm9yLCBBeGlvc0Vycm9yLCB7XG4gIF9fQ0FOQ0VMX186IHRydWVcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBDYW5jZWxlZEVycm9yO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuL0F4aW9zRXJyb3IuanMnO1xuXG4vKipcbiAqIFJlc29sdmUgb3IgcmVqZWN0IGEgUHJvbWlzZSBiYXNlZCBvbiByZXNwb25zZSBzdGF0dXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVzb2x2ZSBBIGZ1bmN0aW9uIHRoYXQgcmVzb2x2ZXMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3QgQSBmdW5jdGlvbiB0aGF0IHJlamVjdHMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlLlxuICpcbiAqIEByZXR1cm5zIHtvYmplY3R9IFRoZSByZXNwb25zZS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpIHtcbiAgY29uc3QgdmFsaWRhdGVTdGF0dXMgPSByZXNwb25zZS5jb25maWcudmFsaWRhdGVTdGF0dXM7XG4gIGlmICghcmVzcG9uc2Uuc3RhdHVzIHx8ICF2YWxpZGF0ZVN0YXR1cyB8fCB2YWxpZGF0ZVN0YXR1cyhyZXNwb25zZS5zdGF0dXMpKSB7XG4gICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gIH0gZWxzZSB7XG4gICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKFxuICAgICAgJ1JlcXVlc3QgZmFpbGVkIHdpdGggc3RhdHVzIGNvZGUgJyArIHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgIFtBeGlvc0Vycm9yLkVSUl9CQURfUkVRVUVTVCwgQXhpb3NFcnJvci5FUlJfQkFEX1JFU1BPTlNFXVtNYXRoLmZsb29yKHJlc3BvbnNlLnN0YXR1cyAvIDEwMCkgLSA0XSxcbiAgICAgIHJlc3BvbnNlLmNvbmZpZyxcbiAgICAgIHJlc3BvbnNlLnJlcXVlc3QsXG4gICAgICByZXNwb25zZVxuICAgICkpO1xuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHBhcnNlUHJvdG9jb2wodXJsKSB7XG4gIGNvbnN0IG1hdGNoID0gL14oWy0rXFx3XXsxLDI1fSkoOj9cXC9cXC98OikvLmV4ZWModXJsKTtcbiAgcmV0dXJuIG1hdGNoICYmIG1hdGNoWzFdIHx8ICcnO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENhbGN1bGF0ZSBkYXRhIG1heFJhdGVcbiAqIEBwYXJhbSB7TnVtYmVyfSBbc2FtcGxlc0NvdW50PSAxMF1cbiAqIEBwYXJhbSB7TnVtYmVyfSBbbWluPSAxMDAwXVxuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5mdW5jdGlvbiBzcGVlZG9tZXRlcihzYW1wbGVzQ291bnQsIG1pbikge1xuICBzYW1wbGVzQ291bnQgPSBzYW1wbGVzQ291bnQgfHwgMTA7XG4gIGNvbnN0IGJ5dGVzID0gbmV3IEFycmF5KHNhbXBsZXNDb3VudCk7XG4gIGNvbnN0IHRpbWVzdGFtcHMgPSBuZXcgQXJyYXkoc2FtcGxlc0NvdW50KTtcbiAgbGV0IGhlYWQgPSAwO1xuICBsZXQgdGFpbCA9IDA7XG4gIGxldCBmaXJzdFNhbXBsZVRTO1xuXG4gIG1pbiA9IG1pbiAhPT0gdW5kZWZpbmVkID8gbWluIDogMTAwMDtcblxuICByZXR1cm4gZnVuY3Rpb24gcHVzaChjaHVua0xlbmd0aCkge1xuICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG5cbiAgICBjb25zdCBzdGFydGVkQXQgPSB0aW1lc3RhbXBzW3RhaWxdO1xuXG4gICAgaWYgKCFmaXJzdFNhbXBsZVRTKSB7XG4gICAgICBmaXJzdFNhbXBsZVRTID0gbm93O1xuICAgIH1cblxuICAgIGJ5dGVzW2hlYWRdID0gY2h1bmtMZW5ndGg7XG4gICAgdGltZXN0YW1wc1toZWFkXSA9IG5vdztcblxuICAgIGxldCBpID0gdGFpbDtcbiAgICBsZXQgYnl0ZXNDb3VudCA9IDA7XG5cbiAgICB3aGlsZSAoaSAhPT0gaGVhZCkge1xuICAgICAgYnl0ZXNDb3VudCArPSBieXRlc1tpKytdO1xuICAgICAgaSA9IGkgJSBzYW1wbGVzQ291bnQ7XG4gICAgfVxuXG4gICAgaGVhZCA9IChoZWFkICsgMSkgJSBzYW1wbGVzQ291bnQ7XG5cbiAgICBpZiAoaGVhZCA9PT0gdGFpbCkge1xuICAgICAgdGFpbCA9ICh0YWlsICsgMSkgJSBzYW1wbGVzQ291bnQ7XG4gICAgfVxuXG4gICAgaWYgKG5vdyAtIGZpcnN0U2FtcGxlVFMgPCBtaW4pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBwYXNzZWQgPSBzdGFydGVkQXQgJiYgbm93IC0gc3RhcnRlZEF0O1xuXG4gICAgcmV0dXJuIHBhc3NlZCA/IE1hdGgucm91bmQoYnl0ZXNDb3VudCAqIDEwMDAgLyBwYXNzZWQpIDogdW5kZWZpbmVkO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBzcGVlZG9tZXRlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBUaHJvdHRsZSBkZWNvcmF0b3JcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKiBAcGFyYW0ge051bWJlcn0gZnJlcVxuICogQHJldHVybiB7RnVuY3Rpb259XG4gKi9cbmZ1bmN0aW9uIHRocm90dGxlKGZuLCBmcmVxKSB7XG4gIGxldCB0aW1lc3RhbXAgPSAwO1xuICBjb25zdCB0aHJlc2hvbGQgPSAxMDAwIC8gZnJlcTtcbiAgbGV0IHRpbWVyID0gbnVsbDtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRocm90dGxlZCgpIHtcbiAgICBjb25zdCBmb3JjZSA9IHRoaXMgPT09IHRydWU7XG5cbiAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuICAgIGlmIChmb3JjZSB8fCBub3cgLSB0aW1lc3RhbXAgPiB0aHJlc2hvbGQpIHtcbiAgICAgIGlmICh0aW1lcikge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgICB0aW1lciA9IG51bGw7XG4gICAgICB9XG4gICAgICB0aW1lc3RhbXAgPSBub3c7XG4gICAgICByZXR1cm4gZm4uYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICB9XG4gICAgaWYgKCF0aW1lcikge1xuICAgICAgdGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGltZXIgPSBudWxsO1xuICAgICAgICB0aW1lc3RhbXAgPSBEYXRlLm5vdygpO1xuICAgICAgICByZXR1cm4gZm4uYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICAgIH0sIHRocmVzaG9sZCAtIChub3cgLSB0aW1lc3RhbXApKTtcbiAgICB9XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IHRocm90dGxlO1xuIiwiaW1wb3J0IHNwZWVkb21ldGVyIGZyb20gXCIuL3NwZWVkb21ldGVyLmpzXCI7XG5pbXBvcnQgdGhyb3R0bGUgZnJvbSBcIi4vdGhyb3R0bGUuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgKGxpc3RlbmVyLCBpc0Rvd25sb2FkU3RyZWFtLCBmcmVxID0gMykgPT4ge1xuICBsZXQgYnl0ZXNOb3RpZmllZCA9IDA7XG4gIGNvbnN0IF9zcGVlZG9tZXRlciA9IHNwZWVkb21ldGVyKDUwLCAyNTApO1xuXG4gIHJldHVybiB0aHJvdHRsZShlID0+IHtcbiAgICBjb25zdCBsb2FkZWQgPSBlLmxvYWRlZDtcbiAgICBjb25zdCB0b3RhbCA9IGUubGVuZ3RoQ29tcHV0YWJsZSA/IGUudG90YWwgOiB1bmRlZmluZWQ7XG4gICAgY29uc3QgcHJvZ3Jlc3NCeXRlcyA9IGxvYWRlZCAtIGJ5dGVzTm90aWZpZWQ7XG4gICAgY29uc3QgcmF0ZSA9IF9zcGVlZG9tZXRlcihwcm9ncmVzc0J5dGVzKTtcbiAgICBjb25zdCBpblJhbmdlID0gbG9hZGVkIDw9IHRvdGFsO1xuXG4gICAgYnl0ZXNOb3RpZmllZCA9IGxvYWRlZDtcblxuICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICBsb2FkZWQsXG4gICAgICB0b3RhbCxcbiAgICAgIHByb2dyZXNzOiB0b3RhbCA/IChsb2FkZWQgLyB0b3RhbCkgOiB1bmRlZmluZWQsXG4gICAgICBieXRlczogcHJvZ3Jlc3NCeXRlcyxcbiAgICAgIHJhdGU6IHJhdGUgPyByYXRlIDogdW5kZWZpbmVkLFxuICAgICAgZXN0aW1hdGVkOiByYXRlICYmIHRvdGFsICYmIGluUmFuZ2UgPyAodG90YWwgLSBsb2FkZWQpIC8gcmF0ZSA6IHVuZGVmaW5lZCxcbiAgICAgIGV2ZW50OiBlLFxuICAgICAgbGVuZ3RoQ29tcHV0YWJsZTogdG90YWwgIT0gbnVsbFxuICAgIH07XG5cbiAgICBkYXRhW2lzRG93bmxvYWRTdHJlYW0gPyAnZG93bmxvYWQnIDogJ3VwbG9hZCddID0gdHJ1ZTtcblxuICAgIGxpc3RlbmVyKGRhdGEpO1xuICB9LCBmcmVxKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4vLi4vdXRpbHMuanMnO1xuaW1wb3J0IHBsYXRmb3JtIGZyb20gJy4uL3BsYXRmb3JtL2luZGV4LmpzJztcblxuZXhwb3J0IGRlZmF1bHQgcGxhdGZvcm0uaGFzU3RhbmRhcmRCcm93c2VyRW52ID9cblxuLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIGhhdmUgZnVsbCBzdXBwb3J0IG9mIHRoZSBBUElzIG5lZWRlZCB0byB0ZXN0XG4vLyB3aGV0aGVyIHRoZSByZXF1ZXN0IFVSTCBpcyBvZiB0aGUgc2FtZSBvcmlnaW4gYXMgY3VycmVudCBsb2NhdGlvbi5cbiAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICBjb25zdCBtc2llID0gLyhtc2llfHRyaWRlbnQpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgICBjb25zdCB1cmxQYXJzaW5nTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICBsZXQgb3JpZ2luVVJMO1xuXG4gICAgLyoqXG4gICAgKiBQYXJzZSBhIFVSTCB0byBkaXNjb3ZlciBpdHMgY29tcG9uZW50c1xuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgVGhlIFVSTCB0byBiZSBwYXJzZWRcbiAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgKi9cbiAgICBmdW5jdGlvbiByZXNvbHZlVVJMKHVybCkge1xuICAgICAgbGV0IGhyZWYgPSB1cmw7XG5cbiAgICAgIGlmIChtc2llKSB7XG4gICAgICAgIC8vIElFIG5lZWRzIGF0dHJpYnV0ZSBzZXQgdHdpY2UgdG8gbm9ybWFsaXplIHByb3BlcnRpZXNcbiAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG4gICAgICAgIGhyZWYgPSB1cmxQYXJzaW5nTm9kZS5ocmVmO1xuICAgICAgfVxuXG4gICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcblxuICAgICAgLy8gdXJsUGFyc2luZ05vZGUgcHJvdmlkZXMgdGhlIFVybFV0aWxzIGludGVyZmFjZSAtIGh0dHA6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmx1dGlsc1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaHJlZjogdXJsUGFyc2luZ05vZGUuaHJlZixcbiAgICAgICAgcHJvdG9jb2w6IHVybFBhcnNpbmdOb2RlLnByb3RvY29sID8gdXJsUGFyc2luZ05vZGUucHJvdG9jb2wucmVwbGFjZSgvOiQvLCAnJykgOiAnJyxcbiAgICAgICAgaG9zdDogdXJsUGFyc2luZ05vZGUuaG9zdCxcbiAgICAgICAgc2VhcmNoOiB1cmxQYXJzaW5nTm9kZS5zZWFyY2ggPyB1cmxQYXJzaW5nTm9kZS5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKSA6ICcnLFxuICAgICAgICBoYXNoOiB1cmxQYXJzaW5nTm9kZS5oYXNoID8gdXJsUGFyc2luZ05vZGUuaGFzaC5yZXBsYWNlKC9eIy8sICcnKSA6ICcnLFxuICAgICAgICBob3N0bmFtZTogdXJsUGFyc2luZ05vZGUuaG9zdG5hbWUsXG4gICAgICAgIHBvcnQ6IHVybFBhcnNpbmdOb2RlLnBvcnQsXG4gICAgICAgIHBhdGhuYW1lOiAodXJsUGFyc2luZ05vZGUucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycpID9cbiAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZSA6XG4gICAgICAgICAgJy8nICsgdXJsUGFyc2luZ05vZGUucGF0aG5hbWVcbiAgICAgIH07XG4gICAgfVxuXG4gICAgb3JpZ2luVVJMID0gcmVzb2x2ZVVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG5cbiAgICAvKipcbiAgICAqIERldGVybWluZSBpZiBhIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luIGFzIHRoZSBjdXJyZW50IGxvY2F0aW9uXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHJlcXVlc3RVUkwgVGhlIFVSTCB0byB0ZXN0XG4gICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiwgb3RoZXJ3aXNlIGZhbHNlXG4gICAgKi9cbiAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKHJlcXVlc3RVUkwpIHtcbiAgICAgIGNvbnN0IHBhcnNlZCA9ICh1dGlscy5pc1N0cmluZyhyZXF1ZXN0VVJMKSkgPyByZXNvbHZlVVJMKHJlcXVlc3RVUkwpIDogcmVxdWVzdFVSTDtcbiAgICAgIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VUkwucHJvdG9jb2wgJiZcbiAgICAgICAgICBwYXJzZWQuaG9zdCA9PT0gb3JpZ2luVVJMLmhvc3QpO1xuICAgIH07XG4gIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudnMgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbigpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gIH0pKCk7XG4iLCJpbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5pbXBvcnQgcGxhdGZvcm0gZnJvbSAnLi4vcGxhdGZvcm0vaW5kZXguanMnO1xuXG5leHBvcnQgZGVmYXVsdCBwbGF0Zm9ybS5oYXNTdGFuZGFyZEJyb3dzZXJFbnYgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBzdXBwb3J0IGRvY3VtZW50LmNvb2tpZVxuICB7XG4gICAgd3JpdGUobmFtZSwgdmFsdWUsIGV4cGlyZXMsIHBhdGgsIGRvbWFpbiwgc2VjdXJlKSB7XG4gICAgICBjb25zdCBjb29raWUgPSBbbmFtZSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSldO1xuXG4gICAgICB1dGlscy5pc051bWJlcihleHBpcmVzKSAmJiBjb29raWUucHVzaCgnZXhwaXJlcz0nICsgbmV3IERhdGUoZXhwaXJlcykudG9HTVRTdHJpbmcoKSk7XG5cbiAgICAgIHV0aWxzLmlzU3RyaW5nKHBhdGgpICYmIGNvb2tpZS5wdXNoKCdwYXRoPScgKyBwYXRoKTtcblxuICAgICAgdXRpbHMuaXNTdHJpbmcoZG9tYWluKSAmJiBjb29raWUucHVzaCgnZG9tYWluPScgKyBkb21haW4pO1xuXG4gICAgICBzZWN1cmUgPT09IHRydWUgJiYgY29va2llLnB1c2goJ3NlY3VyZScpO1xuXG4gICAgICBkb2N1bWVudC5jb29raWUgPSBjb29raWUuam9pbignOyAnKTtcbiAgICB9LFxuXG4gICAgcmVhZChuYW1lKSB7XG4gICAgICBjb25zdCBtYXRjaCA9IGRvY3VtZW50LmNvb2tpZS5tYXRjaChuZXcgUmVnRXhwKCcoXnw7XFxcXHMqKSgnICsgbmFtZSArICcpPShbXjtdKiknKSk7XG4gICAgICByZXR1cm4gKG1hdGNoID8gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzNdKSA6IG51bGwpO1xuICAgIH0sXG5cbiAgICByZW1vdmUobmFtZSkge1xuICAgICAgdGhpcy53cml0ZShuYW1lLCAnJywgRGF0ZS5ub3coKSAtIDg2NDAwMDAwKTtcbiAgICB9XG4gIH1cblxuICA6XG5cbiAgLy8gTm9uLXN0YW5kYXJkIGJyb3dzZXIgZW52ICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICB7XG4gICAgd3JpdGUoKSB7fSxcbiAgICByZWFkKCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcbiAgICByZW1vdmUoKSB7fVxuICB9O1xuXG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzQWJzb2x1dGVVUkwodXJsKSB7XG4gIC8vIEEgVVJMIGlzIGNvbnNpZGVyZWQgYWJzb2x1dGUgaWYgaXQgYmVnaW5zIHdpdGggXCI8c2NoZW1lPjovL1wiIG9yIFwiLy9cIiAocHJvdG9jb2wtcmVsYXRpdmUgVVJMKS5cbiAgLy8gUkZDIDM5ODYgZGVmaW5lcyBzY2hlbWUgbmFtZSBhcyBhIHNlcXVlbmNlIG9mIGNoYXJhY3RlcnMgYmVnaW5uaW5nIHdpdGggYSBsZXR0ZXIgYW5kIGZvbGxvd2VkXG4gIC8vIGJ5IGFueSBjb21iaW5hdGlvbiBvZiBsZXR0ZXJzLCBkaWdpdHMsIHBsdXMsIHBlcmlvZCwgb3IgaHlwaGVuLlxuICByZXR1cm4gL14oW2Etel1bYS16XFxkK1xcLS5dKjopP1xcL1xcLy9pLnRlc3QodXJsKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIHNwZWNpZmllZCBVUkxzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVsYXRpdmVVUkwgVGhlIHJlbGF0aXZlIFVSTFxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBVUkxcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVsYXRpdmVVUkwpIHtcbiAgcmV0dXJuIHJlbGF0aXZlVVJMXG4gICAgPyBiYXNlVVJMLnJlcGxhY2UoL1xcLz9cXC8kLywgJycpICsgJy8nICsgcmVsYXRpdmVVUkwucmVwbGFjZSgvXlxcLysvLCAnJylcbiAgICA6IGJhc2VVUkw7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBpc0Fic29sdXRlVVJMIGZyb20gJy4uL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcyc7XG5pbXBvcnQgY29tYmluZVVSTHMgZnJvbSAnLi4vaGVscGVycy9jb21iaW5lVVJMcy5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBiYXNlVVJMIHdpdGggdGhlIHJlcXVlc3RlZFVSTCxcbiAqIG9ubHkgd2hlbiB0aGUgcmVxdWVzdGVkVVJMIGlzIG5vdCBhbHJlYWR5IGFuIGFic29sdXRlIFVSTC5cbiAqIElmIHRoZSByZXF1ZXN0VVJMIGlzIGFic29sdXRlLCB0aGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHJlcXVlc3RlZFVSTCB1bnRvdWNoZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVxdWVzdGVkVVJMIEFic29sdXRlIG9yIHJlbGF0aXZlIFVSTCB0byBjb21iaW5lXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIGZ1bGwgcGF0aFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBidWlsZEZ1bGxQYXRoKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCkge1xuICBpZiAoYmFzZVVSTCAmJiAhaXNBYnNvbHV0ZVVSTChyZXF1ZXN0ZWRVUkwpKSB7XG4gICAgcmV0dXJuIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCk7XG4gIH1cbiAgcmV0dXJuIHJlcXVlc3RlZFVSTDtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCBBeGlvc0hlYWRlcnMgZnJvbSBcIi4vQXhpb3NIZWFkZXJzLmpzXCI7XG5cbmNvbnN0IGhlYWRlcnNUb09iamVjdCA9ICh0aGluZykgPT4gdGhpbmcgaW5zdGFuY2VvZiBBeGlvc0hlYWRlcnMgPyB7IC4uLnRoaW5nIH0gOiB0aGluZztcblxuLyoqXG4gKiBDb25maWctc3BlY2lmaWMgbWVyZ2UtZnVuY3Rpb24gd2hpY2ggY3JlYXRlcyBhIG5ldyBjb25maWctb2JqZWN0XG4gKiBieSBtZXJnaW5nIHR3byBjb25maWd1cmF0aW9uIG9iamVjdHMgdG9nZXRoZXIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzFcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcyXG4gKlxuICogQHJldHVybnMge09iamVjdH0gTmV3IG9iamVjdCByZXN1bHRpbmcgZnJvbSBtZXJnaW5nIGNvbmZpZzIgdG8gY29uZmlnMVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtZXJnZUNvbmZpZyhjb25maWcxLCBjb25maWcyKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBjb25maWcyID0gY29uZmlnMiB8fCB7fTtcbiAgY29uc3QgY29uZmlnID0ge307XG5cbiAgZnVuY3Rpb24gZ2V0TWVyZ2VkVmFsdWUodGFyZ2V0LCBzb3VyY2UsIGNhc2VsZXNzKSB7XG4gICAgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3QodGFyZ2V0KSAmJiB1dGlscy5pc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiB1dGlscy5tZXJnZS5jYWxsKHtjYXNlbGVzc30sIHRhcmdldCwgc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHV0aWxzLm1lcmdlKHt9LCBzb3VyY2UpO1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNBcnJheShzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gc291cmNlLnNsaWNlKCk7XG4gICAgfVxuICAgIHJldHVybiBzb3VyY2U7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gbWVyZ2VEZWVwUHJvcGVydGllcyhhLCBiLCBjYXNlbGVzcykge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoYikpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZShhLCBiLCBjYXNlbGVzcyk7XG4gICAgfSBlbHNlIGlmICghdXRpbHMuaXNVbmRlZmluZWQoYSkpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGEsIGNhc2VsZXNzKTtcbiAgICB9XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gdmFsdWVGcm9tQ29uZmlnMihhLCBiKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChiKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgYik7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIGRlZmF1bHRUb0NvbmZpZzIoYSwgYikge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoYikpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGIpO1xuICAgIH0gZWxzZSBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGEpKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBhKTtcbiAgICB9XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gbWVyZ2VEaXJlY3RLZXlzKGEsIGIsIHByb3ApIHtcbiAgICBpZiAocHJvcCBpbiBjb25maWcyKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUoYSwgYik7XG4gICAgfSBlbHNlIGlmIChwcm9wIGluIGNvbmZpZzEpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGEpO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IG1lcmdlTWFwID0ge1xuICAgIHVybDogdmFsdWVGcm9tQ29uZmlnMixcbiAgICBtZXRob2Q6IHZhbHVlRnJvbUNvbmZpZzIsXG4gICAgZGF0YTogdmFsdWVGcm9tQ29uZmlnMixcbiAgICBiYXNlVVJMOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHRyYW5zZm9ybVJlcXVlc3Q6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgdHJhbnNmb3JtUmVzcG9uc2U6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgcGFyYW1zU2VyaWFsaXplcjogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB0aW1lb3V0OiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHRpbWVvdXRNZXNzYWdlOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHdpdGhDcmVkZW50aWFsczogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB3aXRoWFNSRlRva2VuOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIGFkYXB0ZXI6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgcmVzcG9uc2VUeXBlOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHhzcmZDb29raWVOYW1lOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHhzcmZIZWFkZXJOYW1lOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIG9uVXBsb2FkUHJvZ3Jlc3M6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgb25Eb3dubG9hZFByb2dyZXNzOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIGRlY29tcHJlc3M6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgbWF4Q29udGVudExlbmd0aDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBtYXhCb2R5TGVuZ3RoOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIGJlZm9yZVJlZGlyZWN0OiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHRyYW5zcG9ydDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBodHRwQWdlbnQ6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgaHR0cHNBZ2VudDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBjYW5jZWxUb2tlbjogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBzb2NrZXRQYXRoOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHJlc3BvbnNlRW5jb2Rpbmc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgdmFsaWRhdGVTdGF0dXM6IG1lcmdlRGlyZWN0S2V5cyxcbiAgICBoZWFkZXJzOiAoYSwgYikgPT4gbWVyZ2VEZWVwUHJvcGVydGllcyhoZWFkZXJzVG9PYmplY3QoYSksIGhlYWRlcnNUb09iamVjdChiKSwgdHJ1ZSlcbiAgfTtcblxuICB1dGlscy5mb3JFYWNoKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIGNvbmZpZzEsIGNvbmZpZzIpKSwgZnVuY3Rpb24gY29tcHV0ZUNvbmZpZ1ZhbHVlKHByb3ApIHtcbiAgICBjb25zdCBtZXJnZSA9IG1lcmdlTWFwW3Byb3BdIHx8IG1lcmdlRGVlcFByb3BlcnRpZXM7XG4gICAgY29uc3QgY29uZmlnVmFsdWUgPSBtZXJnZShjb25maWcxW3Byb3BdLCBjb25maWcyW3Byb3BdLCBwcm9wKTtcbiAgICAodXRpbHMuaXNVbmRlZmluZWQoY29uZmlnVmFsdWUpICYmIG1lcmdlICE9PSBtZXJnZURpcmVjdEtleXMpIHx8IChjb25maWdbcHJvcF0gPSBjb25maWdWYWx1ZSk7XG4gIH0pO1xuXG4gIHJldHVybiBjb25maWc7XG59XG4iLCJpbXBvcnQgcGxhdGZvcm0gZnJvbSBcIi4uL3BsYXRmb3JtL2luZGV4LmpzXCI7XG5pbXBvcnQgdXRpbHMgZnJvbSBcIi4uL3V0aWxzLmpzXCI7XG5pbXBvcnQgaXNVUkxTYW1lT3JpZ2luIGZyb20gXCIuL2lzVVJMU2FtZU9yaWdpbi5qc1wiO1xuaW1wb3J0IGNvb2tpZXMgZnJvbSBcIi4vY29va2llcy5qc1wiO1xuaW1wb3J0IGJ1aWxkRnVsbFBhdGggZnJvbSBcIi4uL2NvcmUvYnVpbGRGdWxsUGF0aC5qc1wiO1xuaW1wb3J0IG1lcmdlQ29uZmlnIGZyb20gXCIuLi9jb3JlL21lcmdlQ29uZmlnLmpzXCI7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gXCIuLi9jb3JlL0F4aW9zSGVhZGVycy5qc1wiO1xuaW1wb3J0IGJ1aWxkVVJMIGZyb20gXCIuL2J1aWxkVVJMLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IChjb25maWcpID0+IHtcbiAgY29uc3QgbmV3Q29uZmlnID0gbWVyZ2VDb25maWcoe30sIGNvbmZpZyk7XG5cbiAgbGV0IHtkYXRhLCB3aXRoWFNSRlRva2VuLCB4c3JmSGVhZGVyTmFtZSwgeHNyZkNvb2tpZU5hbWUsIGhlYWRlcnMsIGF1dGh9ID0gbmV3Q29uZmlnO1xuXG4gIG5ld0NvbmZpZy5oZWFkZXJzID0gaGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKGhlYWRlcnMpO1xuXG4gIG5ld0NvbmZpZy51cmwgPSBidWlsZFVSTChidWlsZEZ1bGxQYXRoKG5ld0NvbmZpZy5iYXNlVVJMLCBuZXdDb25maWcudXJsKSwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpO1xuXG4gIC8vIEhUVFAgYmFzaWMgYXV0aGVudGljYXRpb25cbiAgaWYgKGF1dGgpIHtcbiAgICBoZWFkZXJzLnNldCgnQXV0aG9yaXphdGlvbicsICdCYXNpYyAnICtcbiAgICAgIGJ0b2EoKGF1dGgudXNlcm5hbWUgfHwgJycpICsgJzonICsgKGF1dGgucGFzc3dvcmQgPyB1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoYXV0aC5wYXNzd29yZCkpIDogJycpKVxuICAgICk7XG4gIH1cblxuICBsZXQgY29udGVudFR5cGU7XG5cbiAgaWYgKHV0aWxzLmlzRm9ybURhdGEoZGF0YSkpIHtcbiAgICBpZiAocGxhdGZvcm0uaGFzU3RhbmRhcmRCcm93c2VyRW52IHx8IHBsYXRmb3JtLmhhc1N0YW5kYXJkQnJvd3NlcldlYldvcmtlckVudikge1xuICAgICAgaGVhZGVycy5zZXRDb250ZW50VHlwZSh1bmRlZmluZWQpOyAvLyBMZXQgdGhlIGJyb3dzZXIgc2V0IGl0XG4gICAgfSBlbHNlIGlmICgoY29udGVudFR5cGUgPSBoZWFkZXJzLmdldENvbnRlbnRUeXBlKCkpICE9PSBmYWxzZSkge1xuICAgICAgLy8gZml4IHNlbWljb2xvbiBkdXBsaWNhdGlvbiBpc3N1ZSBmb3IgUmVhY3ROYXRpdmUgRm9ybURhdGEgaW1wbGVtZW50YXRpb25cbiAgICAgIGNvbnN0IFt0eXBlLCAuLi50b2tlbnNdID0gY29udGVudFR5cGUgPyBjb250ZW50VHlwZS5zcGxpdCgnOycpLm1hcCh0b2tlbiA9PiB0b2tlbi50cmltKCkpLmZpbHRlcihCb29sZWFuKSA6IFtdO1xuICAgICAgaGVhZGVycy5zZXRDb250ZW50VHlwZShbdHlwZSB8fCAnbXVsdGlwYXJ0L2Zvcm0tZGF0YScsIC4uLnRva2Vuc10uam9pbignOyAnKSk7XG4gICAgfVxuICB9XG5cbiAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gIC8vIFRoaXMgaXMgb25seSBkb25lIGlmIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50LlxuICAvLyBTcGVjaWZpY2FsbHkgbm90IGlmIHdlJ3JlIGluIGEgd2ViIHdvcmtlciwgb3IgcmVhY3QtbmF0aXZlLlxuXG4gIGlmIChwbGF0Zm9ybS5oYXNTdGFuZGFyZEJyb3dzZXJFbnYpIHtcbiAgICB3aXRoWFNSRlRva2VuICYmIHV0aWxzLmlzRnVuY3Rpb24od2l0aFhTUkZUb2tlbikgJiYgKHdpdGhYU1JGVG9rZW4gPSB3aXRoWFNSRlRva2VuKG5ld0NvbmZpZykpO1xuXG4gICAgaWYgKHdpdGhYU1JGVG9rZW4gfHwgKHdpdGhYU1JGVG9rZW4gIT09IGZhbHNlICYmIGlzVVJMU2FtZU9yaWdpbihuZXdDb25maWcudXJsKSkpIHtcbiAgICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgICAgY29uc3QgeHNyZlZhbHVlID0geHNyZkhlYWRlck5hbWUgJiYgeHNyZkNvb2tpZU5hbWUgJiYgY29va2llcy5yZWFkKHhzcmZDb29raWVOYW1lKTtcblxuICAgICAgaWYgKHhzcmZWYWx1ZSkge1xuICAgICAgICBoZWFkZXJzLnNldCh4c3JmSGVhZGVyTmFtZSwgeHNyZlZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3Q29uZmlnO1xufVxuXG4iLCJpbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5pbXBvcnQgc2V0dGxlIGZyb20gJy4vLi4vY29yZS9zZXR0bGUuanMnO1xuaW1wb3J0IHRyYW5zaXRpb25hbERlZmF1bHRzIGZyb20gJy4uL2RlZmF1bHRzL3RyYW5zaXRpb25hbC5qcyc7XG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuLi9jb3JlL0F4aW9zRXJyb3IuanMnO1xuaW1wb3J0IENhbmNlbGVkRXJyb3IgZnJvbSAnLi4vY2FuY2VsL0NhbmNlbGVkRXJyb3IuanMnO1xuaW1wb3J0IHBhcnNlUHJvdG9jb2wgZnJvbSAnLi4vaGVscGVycy9wYXJzZVByb3RvY29sLmpzJztcbmltcG9ydCBwbGF0Zm9ybSBmcm9tICcuLi9wbGF0Zm9ybS9pbmRleC5qcyc7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gJy4uL2NvcmUvQXhpb3NIZWFkZXJzLmpzJztcbmltcG9ydCBwcm9ncmVzc0V2ZW50UmVkdWNlciBmcm9tICcuLi9oZWxwZXJzL3Byb2dyZXNzRXZlbnRSZWR1Y2VyLmpzJztcbmltcG9ydCByZXNvbHZlQ29uZmlnIGZyb20gXCIuLi9oZWxwZXJzL3Jlc29sdmVDb25maWcuanNcIjtcblxuY29uc3QgaXNYSFJBZGFwdGVyU3VwcG9ydGVkID0gdHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJztcblxuZXhwb3J0IGRlZmF1bHQgaXNYSFJBZGFwdGVyU3VwcG9ydGVkICYmIGZ1bmN0aW9uIChjb25maWcpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIGRpc3BhdGNoWGhyUmVxdWVzdChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBjb25zdCBfY29uZmlnID0gcmVzb2x2ZUNvbmZpZyhjb25maWcpO1xuICAgIGxldCByZXF1ZXN0RGF0YSA9IF9jb25maWcuZGF0YTtcbiAgICBjb25zdCByZXF1ZXN0SGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKF9jb25maWcuaGVhZGVycykubm9ybWFsaXplKCk7XG4gICAgbGV0IHtyZXNwb25zZVR5cGV9ID0gX2NvbmZpZztcbiAgICBsZXQgb25DYW5jZWxlZDtcbiAgICBmdW5jdGlvbiBkb25lKCkge1xuICAgICAgaWYgKF9jb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICAgICAgX2NvbmZpZy5jYW5jZWxUb2tlbi51bnN1YnNjcmliZShvbkNhbmNlbGVkKTtcbiAgICAgIH1cblxuICAgICAgaWYgKF9jb25maWcuc2lnbmFsKSB7XG4gICAgICAgIF9jb25maWcuc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Fib3J0Jywgb25DYW5jZWxlZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgIHJlcXVlc3Qub3BlbihfY29uZmlnLm1ldGhvZC50b1VwcGVyQ2FzZSgpLCBfY29uZmlnLnVybCwgdHJ1ZSk7XG5cbiAgICAvLyBTZXQgdGhlIHJlcXVlc3QgdGltZW91dCBpbiBNU1xuICAgIHJlcXVlc3QudGltZW91dCA9IF9jb25maWcudGltZW91dDtcblxuICAgIGZ1bmN0aW9uIG9ubG9hZGVuZCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBQcmVwYXJlIHRoZSByZXNwb25zZVxuICAgICAgY29uc3QgcmVzcG9uc2VIZWFkZXJzID0gQXhpb3NIZWFkZXJzLmZyb20oXG4gICAgICAgICdnZXRBbGxSZXNwb25zZUhlYWRlcnMnIGluIHJlcXVlc3QgJiYgcmVxdWVzdC5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKVxuICAgICAgKTtcbiAgICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9ICFyZXNwb25zZVR5cGUgfHwgcmVzcG9uc2VUeXBlID09PSAndGV4dCcgfHwgcmVzcG9uc2VUeXBlID09PSAnanNvbicgP1xuICAgICAgICByZXF1ZXN0LnJlc3BvbnNlVGV4dCA6IHJlcXVlc3QucmVzcG9uc2U7XG4gICAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgZGF0YTogcmVzcG9uc2VEYXRhLFxuICAgICAgICBzdGF0dXM6IHJlcXVlc3Quc3RhdHVzLFxuICAgICAgICBzdGF0dXNUZXh0OiByZXF1ZXN0LnN0YXR1c1RleHQsXG4gICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlSGVhZGVycyxcbiAgICAgICAgY29uZmlnLFxuICAgICAgICByZXF1ZXN0XG4gICAgICB9O1xuXG4gICAgICBzZXR0bGUoZnVuY3Rpb24gX3Jlc29sdmUodmFsdWUpIHtcbiAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH0sIGZ1bmN0aW9uIF9yZWplY3QoZXJyKSB7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICBkb25lKCk7XG4gICAgICB9LCByZXNwb25zZSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH1cblxuICAgIGlmICgnb25sb2FkZW5kJyBpbiByZXF1ZXN0KSB7XG4gICAgICAvLyBVc2Ugb25sb2FkZW5kIGlmIGF2YWlsYWJsZVxuICAgICAgcmVxdWVzdC5vbmxvYWRlbmQgPSBvbmxvYWRlbmQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIExpc3RlbiBmb3IgcmVhZHkgc3RhdGUgdG8gZW11bGF0ZSBvbmxvYWRlbmRcbiAgICAgIHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlTG9hZCgpIHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0IHx8IHJlcXVlc3QucmVhZHlTdGF0ZSAhPT0gNCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoZSByZXF1ZXN0IGVycm9yZWQgb3V0IGFuZCB3ZSBkaWRuJ3QgZ2V0IGEgcmVzcG9uc2UsIHRoaXMgd2lsbCBiZVxuICAgICAgICAvLyBoYW5kbGVkIGJ5IG9uZXJyb3IgaW5zdGVhZFxuICAgICAgICAvLyBXaXRoIG9uZSBleGNlcHRpb246IHJlcXVlc3QgdGhhdCB1c2luZyBmaWxlOiBwcm90b2NvbCwgbW9zdCBicm93c2Vyc1xuICAgICAgICAvLyB3aWxsIHJldHVybiBzdGF0dXMgYXMgMCBldmVuIHRob3VnaCBpdCdzIGEgc3VjY2Vzc2Z1bCByZXF1ZXN0XG4gICAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMCAmJiAhKHJlcXVlc3QucmVzcG9uc2VVUkwgJiYgcmVxdWVzdC5yZXNwb25zZVVSTC5pbmRleE9mKCdmaWxlOicpID09PSAwKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyByZWFkeXN0YXRlIGhhbmRsZXIgaXMgY2FsbGluZyBiZWZvcmUgb25lcnJvciBvciBvbnRpbWVvdXQgaGFuZGxlcnMsXG4gICAgICAgIC8vIHNvIHdlIHNob3VsZCBjYWxsIG9ubG9hZGVuZCBvbiB0aGUgbmV4dCAndGljaydcbiAgICAgICAgc2V0VGltZW91dChvbmxvYWRlbmQpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgYnJvd3NlciByZXF1ZXN0IGNhbmNlbGxhdGlvbiAoYXMgb3Bwb3NlZCB0byBhIG1hbnVhbCBjYW5jZWxsYXRpb24pXG4gICAgcmVxdWVzdC5vbmFib3J0ID0gZnVuY3Rpb24gaGFuZGxlQWJvcnQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoJ1JlcXVlc3QgYWJvcnRlZCcsIEF4aW9zRXJyb3IuRUNPTk5BQk9SVEVELCBfY29uZmlnLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgbG93IGxldmVsIG5ldHdvcmsgZXJyb3JzXG4gICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24gaGFuZGxlRXJyb3IoKSB7XG4gICAgICAvLyBSZWFsIGVycm9ycyBhcmUgaGlkZGVuIGZyb20gdXMgYnkgdGhlIGJyb3dzZXJcbiAgICAgIC8vIG9uZXJyb3Igc2hvdWxkIG9ubHkgZmlyZSBpZiBpdCdzIGEgbmV0d29yayBlcnJvclxuICAgICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKCdOZXR3b3JrIEVycm9yJywgQXhpb3NFcnJvci5FUlJfTkVUV09SSywgX2NvbmZpZywgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIHRpbWVvdXRcbiAgICByZXF1ZXN0Lm9udGltZW91dCA9IGZ1bmN0aW9uIGhhbmRsZVRpbWVvdXQoKSB7XG4gICAgICBsZXQgdGltZW91dEVycm9yTWVzc2FnZSA9IF9jb25maWcudGltZW91dCA/ICd0aW1lb3V0IG9mICcgKyBfY29uZmlnLnRpbWVvdXQgKyAnbXMgZXhjZWVkZWQnIDogJ3RpbWVvdXQgZXhjZWVkZWQnO1xuICAgICAgY29uc3QgdHJhbnNpdGlvbmFsID0gX2NvbmZpZy50cmFuc2l0aW9uYWwgfHwgdHJhbnNpdGlvbmFsRGVmYXVsdHM7XG4gICAgICBpZiAoX2NvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlKSB7XG4gICAgICAgIHRpbWVvdXRFcnJvck1lc3NhZ2UgPSBfY29uZmlnLnRpbWVvdXRFcnJvck1lc3NhZ2U7XG4gICAgICB9XG4gICAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoXG4gICAgICAgIHRpbWVvdXRFcnJvck1lc3NhZ2UsXG4gICAgICAgIHRyYW5zaXRpb25hbC5jbGFyaWZ5VGltZW91dEVycm9yID8gQXhpb3NFcnJvci5FVElNRURPVVQgOiBBeGlvc0Vycm9yLkVDT05OQUJPUlRFRCxcbiAgICAgICAgX2NvbmZpZyxcbiAgICAgICAgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gUmVtb3ZlIENvbnRlbnQtVHlwZSBpZiBkYXRhIGlzIHVuZGVmaW5lZFxuICAgIHJlcXVlc3REYXRhID09PSB1bmRlZmluZWQgJiYgcmVxdWVzdEhlYWRlcnMuc2V0Q29udGVudFR5cGUobnVsbCk7XG5cbiAgICAvLyBBZGQgaGVhZGVycyB0byB0aGUgcmVxdWVzdFxuICAgIGlmICgnc2V0UmVxdWVzdEhlYWRlcicgaW4gcmVxdWVzdCkge1xuICAgICAgdXRpbHMuZm9yRWFjaChyZXF1ZXN0SGVhZGVycy50b0pTT04oKSwgZnVuY3Rpb24gc2V0UmVxdWVzdEhlYWRlcih2YWwsIGtleSkge1xuICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoa2V5LCB2YWwpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhDcmVkZW50aWFscyB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoX2NvbmZpZy53aXRoQ3JlZGVudGlhbHMpKSB7XG4gICAgICByZXF1ZXN0LndpdGhDcmVkZW50aWFscyA9ICEhX2NvbmZpZy53aXRoQ3JlZGVudGlhbHM7XG4gICAgfVxuXG4gICAgLy8gQWRkIHJlc3BvbnNlVHlwZSB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmIChyZXNwb25zZVR5cGUgJiYgcmVzcG9uc2VUeXBlICE9PSAnanNvbicpIHtcbiAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gX2NvbmZpZy5yZXNwb25zZVR5cGU7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHByb2dyZXNzIGlmIG5lZWRlZFxuICAgIGlmICh0eXBlb2YgX2NvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBwcm9ncmVzc0V2ZW50UmVkdWNlcihfY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcywgdHJ1ZSkpO1xuICAgIH1cblxuICAgIC8vIE5vdCBhbGwgYnJvd3NlcnMgc3VwcG9ydCB1cGxvYWQgZXZlbnRzXG4gICAgaWYgKHR5cGVvZiBfY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicgJiYgcmVxdWVzdC51cGxvYWQpIHtcbiAgICAgIHJlcXVlc3QudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgcHJvZ3Jlc3NFdmVudFJlZHVjZXIoX2NvbmZpZy5vblVwbG9hZFByb2dyZXNzKSk7XG4gICAgfVxuXG4gICAgaWYgKF9jb25maWcuY2FuY2VsVG9rZW4gfHwgX2NvbmZpZy5zaWduYWwpIHtcbiAgICAgIC8vIEhhbmRsZSBjYW5jZWxsYXRpb25cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gICAgICBvbkNhbmNlbGVkID0gY2FuY2VsID0+IHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJlamVjdCghY2FuY2VsIHx8IGNhbmNlbC50eXBlID8gbmV3IENhbmNlbGVkRXJyb3IobnVsbCwgY29uZmlnLCByZXF1ZXN0KSA6IGNhbmNlbCk7XG4gICAgICAgIHJlcXVlc3QuYWJvcnQoKTtcbiAgICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgICB9O1xuXG4gICAgICBfY29uZmlnLmNhbmNlbFRva2VuICYmIF9jb25maWcuY2FuY2VsVG9rZW4uc3Vic2NyaWJlKG9uQ2FuY2VsZWQpO1xuICAgICAgaWYgKF9jb25maWcuc2lnbmFsKSB7XG4gICAgICAgIF9jb25maWcuc2lnbmFsLmFib3J0ZWQgPyBvbkNhbmNlbGVkKCkgOiBfY29uZmlnLnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIG9uQ2FuY2VsZWQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHByb3RvY29sID0gcGFyc2VQcm90b2NvbChfY29uZmlnLnVybCk7XG5cbiAgICBpZiAocHJvdG9jb2wgJiYgcGxhdGZvcm0ucHJvdG9jb2xzLmluZGV4T2YocHJvdG9jb2wpID09PSAtMSkge1xuICAgICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKCdVbnN1cHBvcnRlZCBwcm90b2NvbCAnICsgcHJvdG9jb2wgKyAnOicsIEF4aW9zRXJyb3IuRVJSX0JBRF9SRVFVRVNULCBjb25maWcpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cblxuICAgIC8vIFNlbmQgdGhlIHJlcXVlc3RcbiAgICByZXF1ZXN0LnNlbmQocmVxdWVzdERhdGEgfHwgbnVsbCk7XG4gIH0pO1xufVxuIiwiaW1wb3J0IENhbmNlbGVkRXJyb3IgZnJvbSBcIi4uL2NhbmNlbC9DYW5jZWxlZEVycm9yLmpzXCI7XG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tIFwiLi4vY29yZS9BeGlvc0Vycm9yLmpzXCI7XG5cbmNvbnN0IGNvbXBvc2VTaWduYWxzID0gKHNpZ25hbHMsIHRpbWVvdXQpID0+IHtcbiAgbGV0IGNvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG5cbiAgbGV0IGFib3J0ZWQ7XG5cbiAgY29uc3Qgb25hYm9ydCA9IGZ1bmN0aW9uIChjYW5jZWwpIHtcbiAgICBpZiAoIWFib3J0ZWQpIHtcbiAgICAgIGFib3J0ZWQgPSB0cnVlO1xuICAgICAgdW5zdWJzY3JpYmUoKTtcbiAgICAgIGNvbnN0IGVyciA9IGNhbmNlbCBpbnN0YW5jZW9mIEVycm9yID8gY2FuY2VsIDogdGhpcy5yZWFzb247XG4gICAgICBjb250cm9sbGVyLmFib3J0KGVyciBpbnN0YW5jZW9mIEF4aW9zRXJyb3IgPyBlcnIgOiBuZXcgQ2FuY2VsZWRFcnJvcihlcnIgaW5zdGFuY2VvZiBFcnJvciA/IGVyci5tZXNzYWdlIDogZXJyKSk7XG4gICAgfVxuICB9XG5cbiAgbGV0IHRpbWVyID0gdGltZW91dCAmJiBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICBvbmFib3J0KG5ldyBBeGlvc0Vycm9yKGB0aW1lb3V0ICR7dGltZW91dH0gb2YgbXMgZXhjZWVkZWRgLCBBeGlvc0Vycm9yLkVUSU1FRE9VVCkpXG4gIH0sIHRpbWVvdXQpXG5cbiAgY29uc3QgdW5zdWJzY3JpYmUgPSAoKSA9PiB7XG4gICAgaWYgKHNpZ25hbHMpIHtcbiAgICAgIHRpbWVyICYmIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICB0aW1lciA9IG51bGw7XG4gICAgICBzaWduYWxzLmZvckVhY2goc2lnbmFsID0+IHtcbiAgICAgICAgc2lnbmFsICYmXG4gICAgICAgIChzaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lciA/IHNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKCdhYm9ydCcsIG9uYWJvcnQpIDogc2lnbmFsLnVuc3Vic2NyaWJlKG9uYWJvcnQpKTtcbiAgICAgIH0pO1xuICAgICAgc2lnbmFscyA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgc2lnbmFscy5mb3JFYWNoKChzaWduYWwpID0+IHNpZ25hbCAmJiBzaWduYWwuYWRkRXZlbnRMaXN0ZW5lciAmJiBzaWduYWwuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBvbmFib3J0KSk7XG5cbiAgY29uc3Qge3NpZ25hbH0gPSBjb250cm9sbGVyO1xuXG4gIHNpZ25hbC51bnN1YnNjcmliZSA9IHVuc3Vic2NyaWJlO1xuXG4gIHJldHVybiBbc2lnbmFsLCAoKSA9PiB7XG4gICAgdGltZXIgJiYgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICB0aW1lciA9IG51bGw7XG4gIH1dO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjb21wb3NlU2lnbmFscztcbiIsIlxuXG5leHBvcnQgY29uc3Qgc3RyZWFtQ2h1bmsgPSBmdW5jdGlvbiogKGNodW5rLCBjaHVua1NpemUpIHtcbiAgbGV0IGxlbiA9IGNodW5rLmJ5dGVMZW5ndGg7XG5cbiAgaWYgKCFjaHVua1NpemUgfHwgbGVuIDwgY2h1bmtTaXplKSB7XG4gICAgeWllbGQgY2h1bms7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbGV0IHBvcyA9IDA7XG4gIGxldCBlbmQ7XG5cbiAgd2hpbGUgKHBvcyA8IGxlbikge1xuICAgIGVuZCA9IHBvcyArIGNodW5rU2l6ZTtcbiAgICB5aWVsZCBjaHVuay5zbGljZShwb3MsIGVuZCk7XG4gICAgcG9zID0gZW5kO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCByZWFkQnl0ZXMgPSBhc3luYyBmdW5jdGlvbiogKGl0ZXJhYmxlLCBjaHVua1NpemUsIGVuY29kZSkge1xuICBmb3IgYXdhaXQgKGNvbnN0IGNodW5rIG9mIGl0ZXJhYmxlKSB7XG4gICAgeWllbGQqIHN0cmVhbUNodW5rKEFycmF5QnVmZmVyLmlzVmlldyhjaHVuaykgPyBjaHVuayA6IChhd2FpdCBlbmNvZGUoU3RyaW5nKGNodW5rKSkpLCBjaHVua1NpemUpO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCB0cmFja1N0cmVhbSA9IChzdHJlYW0sIGNodW5rU2l6ZSwgb25Qcm9ncmVzcywgb25GaW5pc2gsIGVuY29kZSkgPT4ge1xuICBjb25zdCBpdGVyYXRvciA9IHJlYWRCeXRlcyhzdHJlYW0sIGNodW5rU2l6ZSwgZW5jb2RlKTtcblxuICBsZXQgYnl0ZXMgPSAwO1xuXG4gIHJldHVybiBuZXcgUmVhZGFibGVTdHJlYW0oe1xuICAgIHR5cGU6ICdieXRlcycsXG5cbiAgICBhc3luYyBwdWxsKGNvbnRyb2xsZXIpIHtcbiAgICAgIGNvbnN0IHtkb25lLCB2YWx1ZX0gPSBhd2FpdCBpdGVyYXRvci5uZXh0KCk7XG5cbiAgICAgIGlmIChkb25lKSB7XG4gICAgICAgIGNvbnRyb2xsZXIuY2xvc2UoKTtcbiAgICAgICAgb25GaW5pc2goKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBsZXQgbGVuID0gdmFsdWUuYnl0ZUxlbmd0aDtcbiAgICAgIG9uUHJvZ3Jlc3MgJiYgb25Qcm9ncmVzcyhieXRlcyArPSBsZW4pO1xuICAgICAgY29udHJvbGxlci5lbnF1ZXVlKG5ldyBVaW50OEFycmF5KHZhbHVlKSk7XG4gICAgfSxcbiAgICBjYW5jZWwocmVhc29uKSB7XG4gICAgICBvbkZpbmlzaChyZWFzb24pO1xuICAgICAgcmV0dXJuIGl0ZXJhdG9yLnJldHVybigpO1xuICAgIH1cbiAgfSwge1xuICAgIGhpZ2hXYXRlck1hcms6IDJcbiAgfSlcbn1cbiIsImltcG9ydCBwbGF0Zm9ybSBmcm9tIFwiLi4vcGxhdGZvcm0vaW5kZXguanNcIjtcbmltcG9ydCB1dGlscyBmcm9tIFwiLi4vdXRpbHMuanNcIjtcbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gXCIuLi9jb3JlL0F4aW9zRXJyb3IuanNcIjtcbmltcG9ydCBjb21wb3NlU2lnbmFscyBmcm9tIFwiLi4vaGVscGVycy9jb21wb3NlU2lnbmFscy5qc1wiO1xuaW1wb3J0IHt0cmFja1N0cmVhbX0gZnJvbSBcIi4uL2hlbHBlcnMvdHJhY2tTdHJlYW0uanNcIjtcbmltcG9ydCBBeGlvc0hlYWRlcnMgZnJvbSBcIi4uL2NvcmUvQXhpb3NIZWFkZXJzLmpzXCI7XG5pbXBvcnQgcHJvZ3Jlc3NFdmVudFJlZHVjZXIgZnJvbSBcIi4uL2hlbHBlcnMvcHJvZ3Jlc3NFdmVudFJlZHVjZXIuanNcIjtcbmltcG9ydCByZXNvbHZlQ29uZmlnIGZyb20gXCIuLi9oZWxwZXJzL3Jlc29sdmVDb25maWcuanNcIjtcbmltcG9ydCBzZXR0bGUgZnJvbSBcIi4uL2NvcmUvc2V0dGxlLmpzXCI7XG5cbmNvbnN0IGZldGNoUHJvZ3Jlc3NEZWNvcmF0b3IgPSAodG90YWwsIGZuKSA9PiB7XG4gIGNvbnN0IGxlbmd0aENvbXB1dGFibGUgPSB0b3RhbCAhPSBudWxsO1xuICByZXR1cm4gKGxvYWRlZCkgPT4gc2V0VGltZW91dCgoKSA9PiBmbih7XG4gICAgbGVuZ3RoQ29tcHV0YWJsZSxcbiAgICB0b3RhbCxcbiAgICBsb2FkZWRcbiAgfSkpO1xufVxuXG5jb25zdCBpc0ZldGNoU3VwcG9ydGVkID0gdHlwZW9mIGZldGNoID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBSZXF1ZXN0ID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBSZXNwb25zZSA9PT0gJ2Z1bmN0aW9uJztcbmNvbnN0IGlzUmVhZGFibGVTdHJlYW1TdXBwb3J0ZWQgPSBpc0ZldGNoU3VwcG9ydGVkICYmIHR5cGVvZiBSZWFkYWJsZVN0cmVhbSA9PT0gJ2Z1bmN0aW9uJztcblxuLy8gdXNlZCBvbmx5IGluc2lkZSB0aGUgZmV0Y2ggYWRhcHRlclxuY29uc3QgZW5jb2RlVGV4dCA9IGlzRmV0Y2hTdXBwb3J0ZWQgJiYgKHR5cGVvZiBUZXh0RW5jb2RlciA9PT0gJ2Z1bmN0aW9uJyA/XG4gICAgKChlbmNvZGVyKSA9PiAoc3RyKSA9PiBlbmNvZGVyLmVuY29kZShzdHIpKShuZXcgVGV4dEVuY29kZXIoKSkgOlxuICAgIGFzeW5jIChzdHIpID0+IG5ldyBVaW50OEFycmF5KGF3YWl0IG5ldyBSZXNwb25zZShzdHIpLmFycmF5QnVmZmVyKCkpXG4pO1xuXG5jb25zdCBzdXBwb3J0c1JlcXVlc3RTdHJlYW0gPSBpc1JlYWRhYmxlU3RyZWFtU3VwcG9ydGVkICYmICgoKSA9PiB7XG4gIGxldCBkdXBsZXhBY2Nlc3NlZCA9IGZhbHNlO1xuXG4gIGNvbnN0IGhhc0NvbnRlbnRUeXBlID0gbmV3IFJlcXVlc3QocGxhdGZvcm0ub3JpZ2luLCB7XG4gICAgYm9keTogbmV3IFJlYWRhYmxlU3RyZWFtKCksXG4gICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgZ2V0IGR1cGxleCgpIHtcbiAgICAgIGR1cGxleEFjY2Vzc2VkID0gdHJ1ZTtcbiAgICAgIHJldHVybiAnaGFsZic7XG4gICAgfSxcbiAgfSkuaGVhZGVycy5oYXMoJ0NvbnRlbnQtVHlwZScpO1xuXG4gIHJldHVybiBkdXBsZXhBY2Nlc3NlZCAmJiAhaGFzQ29udGVudFR5cGU7XG59KSgpO1xuXG5jb25zdCBERUZBVUxUX0NIVU5LX1NJWkUgPSA2NCAqIDEwMjQ7XG5cbmNvbnN0IHN1cHBvcnRzUmVzcG9uc2VTdHJlYW0gPSBpc1JlYWRhYmxlU3RyZWFtU3VwcG9ydGVkICYmICEhKCgpPT4ge1xuICB0cnkge1xuICAgIHJldHVybiB1dGlscy5pc1JlYWRhYmxlU3RyZWFtKG5ldyBSZXNwb25zZSgnJykuYm9keSk7XG4gIH0gY2F0Y2goZXJyKSB7XG4gICAgLy8gcmV0dXJuIHVuZGVmaW5lZFxuICB9XG59KSgpO1xuXG5jb25zdCByZXNvbHZlcnMgPSB7XG4gIHN0cmVhbTogc3VwcG9ydHNSZXNwb25zZVN0cmVhbSAmJiAoKHJlcykgPT4gcmVzLmJvZHkpXG59O1xuXG5pc0ZldGNoU3VwcG9ydGVkICYmICgoKHJlcykgPT4ge1xuICBbJ3RleHQnLCAnYXJyYXlCdWZmZXInLCAnYmxvYicsICdmb3JtRGF0YScsICdzdHJlYW0nXS5mb3JFYWNoKHR5cGUgPT4ge1xuICAgICFyZXNvbHZlcnNbdHlwZV0gJiYgKHJlc29sdmVyc1t0eXBlXSA9IHV0aWxzLmlzRnVuY3Rpb24ocmVzW3R5cGVdKSA/IChyZXMpID0+IHJlc1t0eXBlXSgpIDpcbiAgICAgIChfLCBjb25maWcpID0+IHtcbiAgICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoYFJlc3BvbnNlIHR5cGUgJyR7dHlwZX0nIGlzIG5vdCBzdXBwb3J0ZWRgLCBBeGlvc0Vycm9yLkVSUl9OT1RfU1VQUE9SVCwgY29uZmlnKTtcbiAgICAgIH0pXG4gIH0pO1xufSkobmV3IFJlc3BvbnNlKSk7XG5cbmNvbnN0IGdldEJvZHlMZW5ndGggPSBhc3luYyAoYm9keSkgPT4ge1xuICBpZiAoYm9keSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICBpZih1dGlscy5pc0Jsb2IoYm9keSkpIHtcbiAgICByZXR1cm4gYm9keS5zaXplO1xuICB9XG5cbiAgaWYodXRpbHMuaXNTcGVjQ29tcGxpYW50Rm9ybShib2R5KSkge1xuICAgIHJldHVybiAoYXdhaXQgbmV3IFJlcXVlc3QoYm9keSkuYXJyYXlCdWZmZXIoKSkuYnl0ZUxlbmd0aDtcbiAgfVxuXG4gIGlmKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGJvZHkpKSB7XG4gICAgcmV0dXJuIGJvZHkuYnl0ZUxlbmd0aDtcbiAgfVxuXG4gIGlmKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKGJvZHkpKSB7XG4gICAgYm9keSA9IGJvZHkgKyAnJztcbiAgfVxuXG4gIGlmKHV0aWxzLmlzU3RyaW5nKGJvZHkpKSB7XG4gICAgcmV0dXJuIChhd2FpdCBlbmNvZGVUZXh0KGJvZHkpKS5ieXRlTGVuZ3RoO1xuICB9XG59XG5cbmNvbnN0IHJlc29sdmVCb2R5TGVuZ3RoID0gYXN5bmMgKGhlYWRlcnMsIGJvZHkpID0+IHtcbiAgY29uc3QgbGVuZ3RoID0gdXRpbHMudG9GaW5pdGVOdW1iZXIoaGVhZGVycy5nZXRDb250ZW50TGVuZ3RoKCkpO1xuXG4gIHJldHVybiBsZW5ndGggPT0gbnVsbCA/IGdldEJvZHlMZW5ndGgoYm9keSkgOiBsZW5ndGg7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzRmV0Y2hTdXBwb3J0ZWQgJiYgKGFzeW5jIChjb25maWcpID0+IHtcbiAgbGV0IHtcbiAgICB1cmwsXG4gICAgbWV0aG9kLFxuICAgIGRhdGEsXG4gICAgc2lnbmFsLFxuICAgIGNhbmNlbFRva2VuLFxuICAgIHRpbWVvdXQsXG4gICAgb25Eb3dubG9hZFByb2dyZXNzLFxuICAgIG9uVXBsb2FkUHJvZ3Jlc3MsXG4gICAgcmVzcG9uc2VUeXBlLFxuICAgIGhlYWRlcnMsXG4gICAgd2l0aENyZWRlbnRpYWxzID0gJ3NhbWUtb3JpZ2luJyxcbiAgICBmZXRjaE9wdGlvbnNcbiAgfSA9IHJlc29sdmVDb25maWcoY29uZmlnKTtcblxuICByZXNwb25zZVR5cGUgPSByZXNwb25zZVR5cGUgPyAocmVzcG9uc2VUeXBlICsgJycpLnRvTG93ZXJDYXNlKCkgOiAndGV4dCc7XG5cbiAgbGV0IFtjb21wb3NlZFNpZ25hbCwgc3RvcFRpbWVvdXRdID0gKHNpZ25hbCB8fCBjYW5jZWxUb2tlbiB8fCB0aW1lb3V0KSA/XG4gICAgY29tcG9zZVNpZ25hbHMoW3NpZ25hbCwgY2FuY2VsVG9rZW5dLCB0aW1lb3V0KSA6IFtdO1xuXG4gIGxldCBmaW5pc2hlZCwgcmVxdWVzdDtcblxuICBjb25zdCBvbkZpbmlzaCA9ICgpID0+IHtcbiAgICAhZmluaXNoZWQgJiYgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBjb21wb3NlZFNpZ25hbCAmJiBjb21wb3NlZFNpZ25hbC51bnN1YnNjcmliZSgpO1xuICAgIH0pO1xuXG4gICAgZmluaXNoZWQgPSB0cnVlO1xuICB9XG5cbiAgbGV0IHJlcXVlc3RDb250ZW50TGVuZ3RoO1xuXG4gIHRyeSB7XG4gICAgaWYgKFxuICAgICAgb25VcGxvYWRQcm9ncmVzcyAmJiBzdXBwb3J0c1JlcXVlc3RTdHJlYW0gJiYgbWV0aG9kICE9PSAnZ2V0JyAmJiBtZXRob2QgIT09ICdoZWFkJyAmJlxuICAgICAgKHJlcXVlc3RDb250ZW50TGVuZ3RoID0gYXdhaXQgcmVzb2x2ZUJvZHlMZW5ndGgoaGVhZGVycywgZGF0YSkpICE9PSAwXG4gICAgKSB7XG4gICAgICBsZXQgX3JlcXVlc3QgPSBuZXcgUmVxdWVzdCh1cmwsIHtcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIGJvZHk6IGRhdGEsXG4gICAgICAgIGR1cGxleDogXCJoYWxmXCJcbiAgICAgIH0pO1xuXG4gICAgICBsZXQgY29udGVudFR5cGVIZWFkZXI7XG5cbiAgICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpICYmIChjb250ZW50VHlwZUhlYWRlciA9IF9yZXF1ZXN0LmhlYWRlcnMuZ2V0KCdjb250ZW50LXR5cGUnKSkpIHtcbiAgICAgICAgaGVhZGVycy5zZXRDb250ZW50VHlwZShjb250ZW50VHlwZUhlYWRlcilcbiAgICAgIH1cblxuICAgICAgaWYgKF9yZXF1ZXN0LmJvZHkpIHtcbiAgICAgICAgZGF0YSA9IHRyYWNrU3RyZWFtKF9yZXF1ZXN0LmJvZHksIERFRkFVTFRfQ0hVTktfU0laRSwgZmV0Y2hQcm9ncmVzc0RlY29yYXRvcihcbiAgICAgICAgICByZXF1ZXN0Q29udGVudExlbmd0aCxcbiAgICAgICAgICBwcm9ncmVzc0V2ZW50UmVkdWNlcihvblVwbG9hZFByb2dyZXNzKVxuICAgICAgICApLCBudWxsLCBlbmNvZGVUZXh0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXV0aWxzLmlzU3RyaW5nKHdpdGhDcmVkZW50aWFscykpIHtcbiAgICAgIHdpdGhDcmVkZW50aWFscyA9IHdpdGhDcmVkZW50aWFscyA/ICdjb3JzJyA6ICdvbWl0JztcbiAgICB9XG5cbiAgICByZXF1ZXN0ID0gbmV3IFJlcXVlc3QodXJsLCB7XG4gICAgICAuLi5mZXRjaE9wdGlvbnMsXG4gICAgICBzaWduYWw6IGNvbXBvc2VkU2lnbmFsLFxuICAgICAgbWV0aG9kOiBtZXRob2QudG9VcHBlckNhc2UoKSxcbiAgICAgIGhlYWRlcnM6IGhlYWRlcnMubm9ybWFsaXplKCkudG9KU09OKCksXG4gICAgICBib2R5OiBkYXRhLFxuICAgICAgZHVwbGV4OiBcImhhbGZcIixcbiAgICAgIHdpdGhDcmVkZW50aWFsc1xuICAgIH0pO1xuXG4gICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2gocmVxdWVzdCk7XG5cbiAgICBjb25zdCBpc1N0cmVhbVJlc3BvbnNlID0gc3VwcG9ydHNSZXNwb25zZVN0cmVhbSAmJiAocmVzcG9uc2VUeXBlID09PSAnc3RyZWFtJyB8fCByZXNwb25zZVR5cGUgPT09ICdyZXNwb25zZScpO1xuXG4gICAgaWYgKHN1cHBvcnRzUmVzcG9uc2VTdHJlYW0gJiYgKG9uRG93bmxvYWRQcm9ncmVzcyB8fCBpc1N0cmVhbVJlc3BvbnNlKSkge1xuICAgICAgY29uc3Qgb3B0aW9ucyA9IHt9O1xuXG4gICAgICBbJ3N0YXR1cycsICdzdGF0dXNUZXh0JywgJ2hlYWRlcnMnXS5mb3JFYWNoKHByb3AgPT4ge1xuICAgICAgICBvcHRpb25zW3Byb3BdID0gcmVzcG9uc2VbcHJvcF07XG4gICAgICB9KTtcblxuICAgICAgY29uc3QgcmVzcG9uc2VDb250ZW50TGVuZ3RoID0gdXRpbHMudG9GaW5pdGVOdW1iZXIocmVzcG9uc2UuaGVhZGVycy5nZXQoJ2NvbnRlbnQtbGVuZ3RoJykpO1xuXG4gICAgICByZXNwb25zZSA9IG5ldyBSZXNwb25zZShcbiAgICAgICAgdHJhY2tTdHJlYW0ocmVzcG9uc2UuYm9keSwgREVGQVVMVF9DSFVOS19TSVpFLCBvbkRvd25sb2FkUHJvZ3Jlc3MgJiYgZmV0Y2hQcm9ncmVzc0RlY29yYXRvcihcbiAgICAgICAgICByZXNwb25zZUNvbnRlbnRMZW5ndGgsXG4gICAgICAgICAgcHJvZ3Jlc3NFdmVudFJlZHVjZXIob25Eb3dubG9hZFByb2dyZXNzLCB0cnVlKVxuICAgICAgICApLCBpc1N0cmVhbVJlc3BvbnNlICYmIG9uRmluaXNoLCBlbmNvZGVUZXh0KSxcbiAgICAgICAgb3B0aW9uc1xuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXNwb25zZVR5cGUgPSByZXNwb25zZVR5cGUgfHwgJ3RleHQnO1xuXG4gICAgbGV0IHJlc3BvbnNlRGF0YSA9IGF3YWl0IHJlc29sdmVyc1t1dGlscy5maW5kS2V5KHJlc29sdmVycywgcmVzcG9uc2VUeXBlKSB8fCAndGV4dCddKHJlc3BvbnNlLCBjb25maWcpO1xuXG4gICAgIWlzU3RyZWFtUmVzcG9uc2UgJiYgb25GaW5pc2goKTtcblxuICAgIHN0b3BUaW1lb3V0ICYmIHN0b3BUaW1lb3V0KCk7XG5cbiAgICByZXR1cm4gYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwge1xuICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG4gICAgICAgIGhlYWRlcnM6IEF4aW9zSGVhZGVycy5mcm9tKHJlc3BvbnNlLmhlYWRlcnMpLFxuICAgICAgICBzdGF0dXM6IHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgICAgc3RhdHVzVGV4dDogcmVzcG9uc2Uuc3RhdHVzVGV4dCxcbiAgICAgICAgY29uZmlnLFxuICAgICAgICByZXF1ZXN0XG4gICAgICB9KVxuICAgIH0pXG4gIH0gY2F0Y2ggKGVycikge1xuICAgIG9uRmluaXNoKCk7XG5cbiAgICBpZiAoZXJyICYmIGVyci5uYW1lID09PSAnVHlwZUVycm9yJyAmJiAvZmV0Y2gvaS50ZXN0KGVyci5tZXNzYWdlKSkge1xuICAgICAgdGhyb3cgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgbmV3IEF4aW9zRXJyb3IoJ05ldHdvcmsgRXJyb3InLCBBeGlvc0Vycm9yLkVSUl9ORVRXT1JLLCBjb25maWcsIHJlcXVlc3QpLFxuICAgICAgICB7XG4gICAgICAgICAgY2F1c2U6IGVyci5jYXVzZSB8fCBlcnJcbiAgICAgICAgfVxuICAgICAgKVxuICAgIH1cblxuICAgIHRocm93IEF4aW9zRXJyb3IuZnJvbShlcnIsIGVyciAmJiBlcnIuY29kZSwgY29uZmlnLCByZXF1ZXN0KTtcbiAgfVxufSk7XG5cblxuIiwiaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCBodHRwQWRhcHRlciBmcm9tICcuL2h0dHAuanMnO1xuaW1wb3J0IHhockFkYXB0ZXIgZnJvbSAnLi94aHIuanMnO1xuaW1wb3J0IGZldGNoQWRhcHRlciBmcm9tICcuL2ZldGNoLmpzJztcbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gXCIuLi9jb3JlL0F4aW9zRXJyb3IuanNcIjtcblxuY29uc3Qga25vd25BZGFwdGVycyA9IHtcbiAgaHR0cDogaHR0cEFkYXB0ZXIsXG4gIHhocjogeGhyQWRhcHRlcixcbiAgZmV0Y2g6IGZldGNoQWRhcHRlclxufVxuXG51dGlscy5mb3JFYWNoKGtub3duQWRhcHRlcnMsIChmbiwgdmFsdWUpID0+IHtcbiAgaWYgKGZuKSB7XG4gICAgdHJ5IHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmbiwgJ25hbWUnLCB7dmFsdWV9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZW1wdHlcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZuLCAnYWRhcHRlck5hbWUnLCB7dmFsdWV9KTtcbiAgfVxufSk7XG5cbmNvbnN0IHJlbmRlclJlYXNvbiA9IChyZWFzb24pID0+IGAtICR7cmVhc29ufWA7XG5cbmNvbnN0IGlzUmVzb2x2ZWRIYW5kbGUgPSAoYWRhcHRlcikgPT4gdXRpbHMuaXNGdW5jdGlvbihhZGFwdGVyKSB8fCBhZGFwdGVyID09PSBudWxsIHx8IGFkYXB0ZXIgPT09IGZhbHNlO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGdldEFkYXB0ZXI6IChhZGFwdGVycykgPT4ge1xuICAgIGFkYXB0ZXJzID0gdXRpbHMuaXNBcnJheShhZGFwdGVycykgPyBhZGFwdGVycyA6IFthZGFwdGVyc107XG5cbiAgICBjb25zdCB7bGVuZ3RofSA9IGFkYXB0ZXJzO1xuICAgIGxldCBuYW1lT3JBZGFwdGVyO1xuICAgIGxldCBhZGFwdGVyO1xuXG4gICAgY29uc3QgcmVqZWN0ZWRSZWFzb25zID0ge307XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBuYW1lT3JBZGFwdGVyID0gYWRhcHRlcnNbaV07XG4gICAgICBsZXQgaWQ7XG5cbiAgICAgIGFkYXB0ZXIgPSBuYW1lT3JBZGFwdGVyO1xuXG4gICAgICBpZiAoIWlzUmVzb2x2ZWRIYW5kbGUobmFtZU9yQWRhcHRlcikpIHtcbiAgICAgICAgYWRhcHRlciA9IGtub3duQWRhcHRlcnNbKGlkID0gU3RyaW5nKG5hbWVPckFkYXB0ZXIpKS50b0xvd2VyQ2FzZSgpXTtcblxuICAgICAgICBpZiAoYWRhcHRlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoYFVua25vd24gYWRhcHRlciAnJHtpZH0nYCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGFkYXB0ZXIpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHJlamVjdGVkUmVhc29uc1tpZCB8fCAnIycgKyBpXSA9IGFkYXB0ZXI7XG4gICAgfVxuXG4gICAgaWYgKCFhZGFwdGVyKSB7XG5cbiAgICAgIGNvbnN0IHJlYXNvbnMgPSBPYmplY3QuZW50cmllcyhyZWplY3RlZFJlYXNvbnMpXG4gICAgICAgIC5tYXAoKFtpZCwgc3RhdGVdKSA9PiBgYWRhcHRlciAke2lkfSBgICtcbiAgICAgICAgICAoc3RhdGUgPT09IGZhbHNlID8gJ2lzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGVudmlyb25tZW50JyA6ICdpcyBub3QgYXZhaWxhYmxlIGluIHRoZSBidWlsZCcpXG4gICAgICAgICk7XG5cbiAgICAgIGxldCBzID0gbGVuZ3RoID9cbiAgICAgICAgKHJlYXNvbnMubGVuZ3RoID4gMSA/ICdzaW5jZSA6XFxuJyArIHJlYXNvbnMubWFwKHJlbmRlclJlYXNvbikuam9pbignXFxuJykgOiAnICcgKyByZW5kZXJSZWFzb24ocmVhc29uc1swXSkpIDpcbiAgICAgICAgJ2FzIG5vIGFkYXB0ZXIgc3BlY2lmaWVkJztcblxuICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoXG4gICAgICAgIGBUaGVyZSBpcyBubyBzdWl0YWJsZSBhZGFwdGVyIHRvIGRpc3BhdGNoIHRoZSByZXF1ZXN0IGAgKyBzLFxuICAgICAgICAnRVJSX05PVF9TVVBQT1JUJ1xuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWRhcHRlcjtcbiAgfSxcbiAgYWRhcHRlcnM6IGtub3duQWRhcHRlcnNcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHRyYW5zZm9ybURhdGEgZnJvbSAnLi90cmFuc2Zvcm1EYXRhLmpzJztcbmltcG9ydCBpc0NhbmNlbCBmcm9tICcuLi9jYW5jZWwvaXNDYW5jZWwuanMnO1xuaW1wb3J0IGRlZmF1bHRzIGZyb20gJy4uL2RlZmF1bHRzL2luZGV4LmpzJztcbmltcG9ydCBDYW5jZWxlZEVycm9yIGZyb20gJy4uL2NhbmNlbC9DYW5jZWxlZEVycm9yLmpzJztcbmltcG9ydCBBeGlvc0hlYWRlcnMgZnJvbSAnLi4vY29yZS9BeGlvc0hlYWRlcnMuanMnO1xuaW1wb3J0IGFkYXB0ZXJzIGZyb20gXCIuLi9hZGFwdGVycy9hZGFwdGVycy5qc1wiO1xuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxlZEVycm9yYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKSB7XG4gIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICBjb25maWcuY2FuY2VsVG9rZW4udGhyb3dJZlJlcXVlc3RlZCgpO1xuICB9XG5cbiAgaWYgKGNvbmZpZy5zaWduYWwgJiYgY29uZmlnLnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgdGhyb3cgbmV3IENhbmNlbGVkRXJyb3IobnVsbCwgY29uZmlnKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyIHVzaW5nIHRoZSBjb25maWd1cmVkIGFkYXB0ZXIuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRpc3BhdGNoUmVxdWVzdChjb25maWcpIHtcbiAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gIGNvbmZpZy5oZWFkZXJzID0gQXhpb3NIZWFkZXJzLmZyb20oY29uZmlnLmhlYWRlcnMpO1xuXG4gIC8vIFRyYW5zZm9ybSByZXF1ZXN0IGRhdGFcbiAgY29uZmlnLmRhdGEgPSB0cmFuc2Zvcm1EYXRhLmNhbGwoXG4gICAgY29uZmlnLFxuICAgIGNvbmZpZy50cmFuc2Zvcm1SZXF1ZXN0XG4gICk7XG5cbiAgaWYgKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXS5pbmRleE9mKGNvbmZpZy5tZXRob2QpICE9PSAtMSkge1xuICAgIGNvbmZpZy5oZWFkZXJzLnNldENvbnRlbnRUeXBlKCdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLCBmYWxzZSk7XG4gIH1cblxuICBjb25zdCBhZGFwdGVyID0gYWRhcHRlcnMuZ2V0QWRhcHRlcihjb25maWcuYWRhcHRlciB8fCBkZWZhdWx0cy5hZGFwdGVyKTtcblxuICByZXR1cm4gYWRhcHRlcihjb25maWcpLnRoZW4oZnVuY3Rpb24gb25BZGFwdGVyUmVzb2x1dGlvbihyZXNwb25zZSkge1xuICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgcmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEuY2FsbChcbiAgICAgIGNvbmZpZyxcbiAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZSxcbiAgICAgIHJlc3BvbnNlXG4gICAgKTtcblxuICAgIHJlc3BvbnNlLmhlYWRlcnMgPSBBeGlvc0hlYWRlcnMuZnJvbShyZXNwb25zZS5oZWFkZXJzKTtcblxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfSwgZnVuY3Rpb24gb25BZGFwdGVyUmVqZWN0aW9uKHJlYXNvbikge1xuICAgIGlmICghaXNDYW5jZWwocmVhc29uKSkge1xuICAgICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgICAgaWYgKHJlYXNvbiAmJiByZWFzb24ucmVzcG9uc2UpIHtcbiAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhLmNhbGwoXG4gICAgICAgICAgY29uZmlnLFxuICAgICAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZSxcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2VcbiAgICAgICAgKTtcbiAgICAgICAgcmVhc29uLnJlc3BvbnNlLmhlYWRlcnMgPSBBeGlvc0hlYWRlcnMuZnJvbShyZWFzb24ucmVzcG9uc2UuaGVhZGVycyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlYXNvbik7XG4gIH0pO1xufVxuIiwiZXhwb3J0IGNvbnN0IFZFUlNJT04gPSBcIjEuNy4yXCI7IiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQge1ZFUlNJT059IGZyb20gJy4uL2Vudi9kYXRhLmpzJztcbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4uL2NvcmUvQXhpb3NFcnJvci5qcyc7XG5cbmNvbnN0IHZhbGlkYXRvcnMgPSB7fTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblsnb2JqZWN0JywgJ2Jvb2xlYW4nLCAnbnVtYmVyJywgJ2Z1bmN0aW9uJywgJ3N0cmluZycsICdzeW1ib2wnXS5mb3JFYWNoKCh0eXBlLCBpKSA9PiB7XG4gIHZhbGlkYXRvcnNbdHlwZV0gPSBmdW5jdGlvbiB2YWxpZGF0b3IodGhpbmcpIHtcbiAgICByZXR1cm4gdHlwZW9mIHRoaW5nID09PSB0eXBlIHx8ICdhJyArIChpIDwgMSA/ICduICcgOiAnICcpICsgdHlwZTtcbiAgfTtcbn0pO1xuXG5jb25zdCBkZXByZWNhdGVkV2FybmluZ3MgPSB7fTtcblxuLyoqXG4gKiBUcmFuc2l0aW9uYWwgb3B0aW9uIHZhbGlkYXRvclxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb258Ym9vbGVhbj99IHZhbGlkYXRvciAtIHNldCB0byBmYWxzZSBpZiB0aGUgdHJhbnNpdGlvbmFsIG9wdGlvbiBoYXMgYmVlbiByZW1vdmVkXG4gKiBAcGFyYW0ge3N0cmluZz99IHZlcnNpb24gLSBkZXByZWNhdGVkIHZlcnNpb24gLyByZW1vdmVkIHNpbmNlIHZlcnNpb25cbiAqIEBwYXJhbSB7c3RyaW5nP30gbWVzc2FnZSAtIHNvbWUgbWVzc2FnZSB3aXRoIGFkZGl0aW9uYWwgaW5mb1xuICpcbiAqIEByZXR1cm5zIHtmdW5jdGlvbn1cbiAqL1xudmFsaWRhdG9ycy50cmFuc2l0aW9uYWwgPSBmdW5jdGlvbiB0cmFuc2l0aW9uYWwodmFsaWRhdG9yLCB2ZXJzaW9uLCBtZXNzYWdlKSB7XG4gIGZ1bmN0aW9uIGZvcm1hdE1lc3NhZ2Uob3B0LCBkZXNjKSB7XG4gICAgcmV0dXJuICdbQXhpb3MgdicgKyBWRVJTSU9OICsgJ10gVHJhbnNpdGlvbmFsIG9wdGlvbiBcXCcnICsgb3B0ICsgJ1xcJycgKyBkZXNjICsgKG1lc3NhZ2UgPyAnLiAnICsgbWVzc2FnZSA6ICcnKTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gIHJldHVybiAodmFsdWUsIG9wdCwgb3B0cykgPT4ge1xuICAgIGlmICh2YWxpZGF0b3IgPT09IGZhbHNlKSB7XG4gICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcihcbiAgICAgICAgZm9ybWF0TWVzc2FnZShvcHQsICcgaGFzIGJlZW4gcmVtb3ZlZCcgKyAodmVyc2lvbiA/ICcgaW4gJyArIHZlcnNpb24gOiAnJykpLFxuICAgICAgICBBeGlvc0Vycm9yLkVSUl9ERVBSRUNBVEVEXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICh2ZXJzaW9uICYmICFkZXByZWNhdGVkV2FybmluZ3Nbb3B0XSkge1xuICAgICAgZGVwcmVjYXRlZFdhcm5pbmdzW29wdF0gPSB0cnVlO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgZm9ybWF0TWVzc2FnZShcbiAgICAgICAgICBvcHQsXG4gICAgICAgICAgJyBoYXMgYmVlbiBkZXByZWNhdGVkIHNpbmNlIHYnICsgdmVyc2lvbiArICcgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmVhciBmdXR1cmUnXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbGlkYXRvciA/IHZhbGlkYXRvcih2YWx1ZSwgb3B0LCBvcHRzKSA6IHRydWU7XG4gIH07XG59O1xuXG4vKipcbiAqIEFzc2VydCBvYmplY3QncyBwcm9wZXJ0aWVzIHR5cGVcbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtIHtvYmplY3R9IHNjaGVtYVxuICogQHBhcmFtIHtib29sZWFuP30gYWxsb3dVbmtub3duXG4gKlxuICogQHJldHVybnMge29iamVjdH1cbiAqL1xuXG5mdW5jdGlvbiBhc3NlcnRPcHRpb25zKG9wdGlvbnMsIHNjaGVtYSwgYWxsb3dVbmtub3duKSB7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcpIHtcbiAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcignb3B0aW9ucyBtdXN0IGJlIGFuIG9iamVjdCcsIEF4aW9zRXJyb3IuRVJSX0JBRF9PUFRJT05fVkFMVUUpO1xuICB9XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvcHRpb25zKTtcbiAgbGV0IGkgPSBrZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSA+IDApIHtcbiAgICBjb25zdCBvcHQgPSBrZXlzW2ldO1xuICAgIGNvbnN0IHZhbGlkYXRvciA9IHNjaGVtYVtvcHRdO1xuICAgIGlmICh2YWxpZGF0b3IpIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gb3B0aW9uc1tvcHRdO1xuICAgICAgY29uc3QgcmVzdWx0ID0gdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWxpZGF0b3IodmFsdWUsIG9wdCwgb3B0aW9ucyk7XG4gICAgICBpZiAocmVzdWx0ICE9PSB0cnVlKSB7XG4gICAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKCdvcHRpb24gJyArIG9wdCArICcgbXVzdCBiZSAnICsgcmVzdWx0LCBBeGlvc0Vycm9yLkVSUl9CQURfT1BUSU9OX1ZBTFVFKTtcbiAgICAgIH1cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoYWxsb3dVbmtub3duICE9PSB0cnVlKSB7XG4gICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcignVW5rbm93biBvcHRpb24gJyArIG9wdCwgQXhpb3NFcnJvci5FUlJfQkFEX09QVElPTik7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgYXNzZXJ0T3B0aW9ucyxcbiAgdmFsaWRhdG9yc1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4vLi4vdXRpbHMuanMnO1xuaW1wb3J0IGJ1aWxkVVJMIGZyb20gJy4uL2hlbHBlcnMvYnVpbGRVUkwuanMnO1xuaW1wb3J0IEludGVyY2VwdG9yTWFuYWdlciBmcm9tICcuL0ludGVyY2VwdG9yTWFuYWdlci5qcyc7XG5pbXBvcnQgZGlzcGF0Y2hSZXF1ZXN0IGZyb20gJy4vZGlzcGF0Y2hSZXF1ZXN0LmpzJztcbmltcG9ydCBtZXJnZUNvbmZpZyBmcm9tICcuL21lcmdlQ29uZmlnLmpzJztcbmltcG9ydCBidWlsZEZ1bGxQYXRoIGZyb20gJy4vYnVpbGRGdWxsUGF0aC5qcyc7XG5pbXBvcnQgdmFsaWRhdG9yIGZyb20gJy4uL2hlbHBlcnMvdmFsaWRhdG9yLmpzJztcbmltcG9ydCBBeGlvc0hlYWRlcnMgZnJvbSAnLi9BeGlvc0hlYWRlcnMuanMnO1xuXG5jb25zdCB2YWxpZGF0b3JzID0gdmFsaWRhdG9yLnZhbGlkYXRvcnM7XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGluc3RhbmNlQ29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKlxuICogQHJldHVybiB7QXhpb3N9IEEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKi9cbmNsYXNzIEF4aW9zIHtcbiAgY29uc3RydWN0b3IoaW5zdGFuY2VDb25maWcpIHtcbiAgICB0aGlzLmRlZmF1bHRzID0gaW5zdGFuY2VDb25maWc7XG4gICAgdGhpcy5pbnRlcmNlcHRvcnMgPSB7XG4gICAgICByZXF1ZXN0OiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKCksXG4gICAgICByZXNwb25zZTogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNwYXRjaCBhIHJlcXVlc3RcbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd8T2JqZWN0fSBjb25maWdPclVybCBUaGUgY29uZmlnIHNwZWNpZmljIGZvciB0aGlzIHJlcXVlc3QgKG1lcmdlZCB3aXRoIHRoaXMuZGVmYXVsdHMpXG4gICAqIEBwYXJhbSB7P09iamVjdH0gY29uZmlnXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAgICovXG4gIGFzeW5jIHJlcXVlc3QoY29uZmlnT3JVcmwsIGNvbmZpZykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5fcmVxdWVzdChjb25maWdPclVybCwgY29uZmlnKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGlmIChlcnIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICBsZXQgZHVtbXk7XG5cbiAgICAgICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UgPyBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZShkdW1teSA9IHt9KSA6IChkdW1teSA9IG5ldyBFcnJvcigpKTtcblxuICAgICAgICAvLyBzbGljZSBvZmYgdGhlIEVycm9yOiAuLi4gbGluZVxuICAgICAgICBjb25zdCBzdGFjayA9IGR1bW15LnN0YWNrID8gZHVtbXkuc3RhY2sucmVwbGFjZSgvXi4rXFxuLywgJycpIDogJyc7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKCFlcnIuc3RhY2spIHtcbiAgICAgICAgICAgIGVyci5zdGFjayA9IHN0YWNrO1xuICAgICAgICAgICAgLy8gbWF0Y2ggd2l0aG91dCB0aGUgMiB0b3Agc3RhY2sgbGluZXNcbiAgICAgICAgICB9IGVsc2UgaWYgKHN0YWNrICYmICFTdHJpbmcoZXJyLnN0YWNrKS5lbmRzV2l0aChzdGFjay5yZXBsYWNlKC9eLitcXG4uK1xcbi8sICcnKSkpIHtcbiAgICAgICAgICAgIGVyci5zdGFjayArPSAnXFxuJyArIHN0YWNrXG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gaWdub3JlIHRoZSBjYXNlIHdoZXJlIFwic3RhY2tcIiBpcyBhbiB1bi13cml0YWJsZSBwcm9wZXJ0eVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRocm93IGVycjtcbiAgICB9XG4gIH1cblxuICBfcmVxdWVzdChjb25maWdPclVybCwgY29uZmlnKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgLy8gQWxsb3cgZm9yIGF4aW9zKCdleGFtcGxlL3VybCdbLCBjb25maWddKSBhIGxhIGZldGNoIEFQSVxuICAgIGlmICh0eXBlb2YgY29uZmlnT3JVcmwgPT09ICdzdHJpbmcnKSB7XG4gICAgICBjb25maWcgPSBjb25maWcgfHwge307XG4gICAgICBjb25maWcudXJsID0gY29uZmlnT3JVcmw7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbmZpZyA9IGNvbmZpZ09yVXJsIHx8IHt9O1xuICAgIH1cblxuICAgIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG5cbiAgICBjb25zdCB7dHJhbnNpdGlvbmFsLCBwYXJhbXNTZXJpYWxpemVyLCBoZWFkZXJzfSA9IGNvbmZpZztcblxuICAgIGlmICh0cmFuc2l0aW9uYWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdmFsaWRhdG9yLmFzc2VydE9wdGlvbnModHJhbnNpdGlvbmFsLCB7XG4gICAgICAgIHNpbGVudEpTT05QYXJzaW5nOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4pLFxuICAgICAgICBmb3JjZWRKU09OUGFyc2luZzogdmFsaWRhdG9ycy50cmFuc2l0aW9uYWwodmFsaWRhdG9ycy5ib29sZWFuKSxcbiAgICAgICAgY2xhcmlmeVRpbWVvdXRFcnJvcjogdmFsaWRhdG9ycy50cmFuc2l0aW9uYWwodmFsaWRhdG9ycy5ib29sZWFuKVxuICAgICAgfSwgZmFsc2UpO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXNTZXJpYWxpemVyICE9IG51bGwpIHtcbiAgICAgIGlmICh1dGlscy5pc0Z1bmN0aW9uKHBhcmFtc1NlcmlhbGl6ZXIpKSB7XG4gICAgICAgIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyID0ge1xuICAgICAgICAgIHNlcmlhbGl6ZTogcGFyYW1zU2VyaWFsaXplclxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWxpZGF0b3IuYXNzZXJ0T3B0aW9ucyhwYXJhbXNTZXJpYWxpemVyLCB7XG4gICAgICAgICAgZW5jb2RlOiB2YWxpZGF0b3JzLmZ1bmN0aW9uLFxuICAgICAgICAgIHNlcmlhbGl6ZTogdmFsaWRhdG9ycy5mdW5jdGlvblxuICAgICAgICB9LCB0cnVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBTZXQgY29uZmlnLm1ldGhvZFxuICAgIGNvbmZpZy5tZXRob2QgPSAoY29uZmlnLm1ldGhvZCB8fCB0aGlzLmRlZmF1bHRzLm1ldGhvZCB8fCAnZ2V0JykudG9Mb3dlckNhc2UoKTtcblxuICAgIC8vIEZsYXR0ZW4gaGVhZGVyc1xuICAgIGxldCBjb250ZXh0SGVhZGVycyA9IGhlYWRlcnMgJiYgdXRpbHMubWVyZ2UoXG4gICAgICBoZWFkZXJzLmNvbW1vbixcbiAgICAgIGhlYWRlcnNbY29uZmlnLm1ldGhvZF1cbiAgICApO1xuXG4gICAgaGVhZGVycyAmJiB1dGlscy5mb3JFYWNoKFxuICAgICAgWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAncG9zdCcsICdwdXQnLCAncGF0Y2gnLCAnY29tbW9uJ10sXG4gICAgICAobWV0aG9kKSA9PiB7XG4gICAgICAgIGRlbGV0ZSBoZWFkZXJzW21ldGhvZF07XG4gICAgICB9XG4gICAgKTtcblxuICAgIGNvbmZpZy5oZWFkZXJzID0gQXhpb3NIZWFkZXJzLmNvbmNhdChjb250ZXh0SGVhZGVycywgaGVhZGVycyk7XG5cbiAgICAvLyBmaWx0ZXIgb3V0IHNraXBwZWQgaW50ZXJjZXB0b3JzXG4gICAgY29uc3QgcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4gPSBbXTtcbiAgICBsZXQgc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzID0gdHJ1ZTtcbiAgICB0aGlzLmludGVyY2VwdG9ycy5yZXF1ZXN0LmZvckVhY2goZnVuY3Rpb24gdW5zaGlmdFJlcXVlc3RJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICAgIGlmICh0eXBlb2YgaW50ZXJjZXB0b3IucnVuV2hlbiA9PT0gJ2Z1bmN0aW9uJyAmJiBpbnRlcmNlcHRvci5ydW5XaGVuKGNvbmZpZykgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzID0gc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzICYmIGludGVyY2VwdG9yLnN5bmNocm9ub3VzO1xuXG4gICAgICByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi51bnNoaWZ0KGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICAgIH0pO1xuXG4gICAgY29uc3QgcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluID0gW107XG4gICAgdGhpcy5pbnRlcmNlcHRvcnMucmVzcG9uc2UuZm9yRWFjaChmdW5jdGlvbiBwdXNoUmVzcG9uc2VJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICAgIHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5wdXNoKGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICAgIH0pO1xuXG4gICAgbGV0IHByb21pc2U7XG4gICAgbGV0IGkgPSAwO1xuICAgIGxldCBsZW47XG5cbiAgICBpZiAoIXN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycykge1xuICAgICAgY29uc3QgY2hhaW4gPSBbZGlzcGF0Y2hSZXF1ZXN0LmJpbmQodGhpcyksIHVuZGVmaW5lZF07XG4gICAgICBjaGFpbi51bnNoaWZ0LmFwcGx5KGNoYWluLCByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbik7XG4gICAgICBjaGFpbi5wdXNoLmFwcGx5KGNoYWluLCByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4pO1xuICAgICAgbGVuID0gY2hhaW4ubGVuZ3RoO1xuXG4gICAgICBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKGNvbmZpZyk7XG5cbiAgICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oY2hhaW5baSsrXSwgY2hhaW5baSsrXSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH1cblxuICAgIGxlbiA9IHJlcXVlc3RJbnRlcmNlcHRvckNoYWluLmxlbmd0aDtcblxuICAgIGxldCBuZXdDb25maWcgPSBjb25maWc7XG5cbiAgICBpID0gMDtcblxuICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICBjb25zdCBvbkZ1bGZpbGxlZCA9IHJlcXVlc3RJbnRlcmNlcHRvckNoYWluW2krK107XG4gICAgICBjb25zdCBvblJlamVjdGVkID0gcmVxdWVzdEludGVyY2VwdG9yQ2hhaW5baSsrXTtcbiAgICAgIHRyeSB7XG4gICAgICAgIG5ld0NvbmZpZyA9IG9uRnVsZmlsbGVkKG5ld0NvbmZpZyk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBvblJlamVjdGVkLmNhbGwodGhpcywgZXJyb3IpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgcHJvbWlzZSA9IGRpc3BhdGNoUmVxdWVzdC5jYWxsKHRoaXMsIG5ld0NvbmZpZyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgfVxuXG4gICAgaSA9IDA7XG4gICAgbGVuID0gcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluLmxlbmd0aDtcblxuICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbltpKytdLCByZXNwb25zZUludGVyY2VwdG9yQ2hhaW5baSsrXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuICBnZXRVcmkoY29uZmlnKSB7XG4gICAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcbiAgICBjb25zdCBmdWxsUGF0aCA9IGJ1aWxkRnVsbFBhdGgoY29uZmlnLmJhc2VVUkwsIGNvbmZpZy51cmwpO1xuICAgIHJldHVybiBidWlsZFVSTChmdWxsUGF0aCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpO1xuICB9XG59XG5cbi8vIFByb3ZpZGUgYWxpYXNlcyBmb3Igc3VwcG9ydGVkIHJlcXVlc3QgbWV0aG9kc1xudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdvcHRpb25zJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KG1lcmdlQ29uZmlnKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kLFxuICAgICAgdXJsLFxuICAgICAgZGF0YTogKGNvbmZpZyB8fCB7fSkuZGF0YVxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuXG4gIGZ1bmN0aW9uIGdlbmVyYXRlSFRUUE1ldGhvZChpc0Zvcm0pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gaHR0cE1ldGhvZCh1cmwsIGRhdGEsIGNvbmZpZykge1xuICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdChtZXJnZUNvbmZpZyhjb25maWcgfHwge30sIHtcbiAgICAgICAgbWV0aG9kLFxuICAgICAgICBoZWFkZXJzOiBpc0Zvcm0gPyB7XG4gICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdtdWx0aXBhcnQvZm9ybS1kYXRhJ1xuICAgICAgICB9IDoge30sXG4gICAgICAgIHVybCxcbiAgICAgICAgZGF0YVxuICAgICAgfSkpO1xuICAgIH07XG4gIH1cblxuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGdlbmVyYXRlSFRUUE1ldGhvZCgpO1xuXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2QgKyAnRm9ybSddID0gZ2VuZXJhdGVIVFRQTWV0aG9kKHRydWUpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IEF4aW9zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgQ2FuY2VsZWRFcnJvciBmcm9tICcuL0NhbmNlbGVkRXJyb3IuanMnO1xuXG4vKipcbiAqIEEgYENhbmNlbFRva2VuYCBpcyBhbiBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byByZXF1ZXN0IGNhbmNlbGxhdGlvbiBvZiBhbiBvcGVyYXRpb24uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXhlY3V0b3IgVGhlIGV4ZWN1dG9yIGZ1bmN0aW9uLlxuICpcbiAqIEByZXR1cm5zIHtDYW5jZWxUb2tlbn1cbiAqL1xuY2xhc3MgQ2FuY2VsVG9rZW4ge1xuICBjb25zdHJ1Y3RvcihleGVjdXRvcikge1xuICAgIGlmICh0eXBlb2YgZXhlY3V0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2V4ZWN1dG9yIG11c3QgYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICBsZXQgcmVzb2x2ZVByb21pc2U7XG5cbiAgICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiBwcm9taXNlRXhlY3V0b3IocmVzb2x2ZSkge1xuICAgICAgcmVzb2x2ZVByb21pc2UgPSByZXNvbHZlO1xuICAgIH0pO1xuXG4gICAgY29uc3QgdG9rZW4gPSB0aGlzO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICB0aGlzLnByb21pc2UudGhlbihjYW5jZWwgPT4ge1xuICAgICAgaWYgKCF0b2tlbi5fbGlzdGVuZXJzKSByZXR1cm47XG5cbiAgICAgIGxldCBpID0gdG9rZW4uX2xpc3RlbmVycy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgICAgIHRva2VuLl9saXN0ZW5lcnNbaV0oY2FuY2VsKTtcbiAgICAgIH1cbiAgICAgIHRva2VuLl9saXN0ZW5lcnMgPSBudWxsO1xuICAgIH0pO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICB0aGlzLnByb21pc2UudGhlbiA9IG9uZnVsZmlsbGVkID0+IHtcbiAgICAgIGxldCBfcmVzb2x2ZTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gICAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgIHRva2VuLnN1YnNjcmliZShyZXNvbHZlKTtcbiAgICAgICAgX3Jlc29sdmUgPSByZXNvbHZlO1xuICAgICAgfSkudGhlbihvbmZ1bGZpbGxlZCk7XG5cbiAgICAgIHByb21pc2UuY2FuY2VsID0gZnVuY3Rpb24gcmVqZWN0KCkge1xuICAgICAgICB0b2tlbi51bnN1YnNjcmliZShfcmVzb2x2ZSk7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9O1xuXG4gICAgZXhlY3V0b3IoZnVuY3Rpb24gY2FuY2VsKG1lc3NhZ2UsIGNvbmZpZywgcmVxdWVzdCkge1xuICAgICAgaWYgKHRva2VuLnJlYXNvbikge1xuICAgICAgICAvLyBDYW5jZWxsYXRpb24gaGFzIGFscmVhZHkgYmVlbiByZXF1ZXN0ZWRcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0b2tlbi5yZWFzb24gPSBuZXcgQ2FuY2VsZWRFcnJvcihtZXNzYWdlLCBjb25maWcsIHJlcXVlc3QpO1xuICAgICAgcmVzb2x2ZVByb21pc2UodG9rZW4ucmVhc29uKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaHJvd3MgYSBgQ2FuY2VsZWRFcnJvcmAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAgICovXG4gIHRocm93SWZSZXF1ZXN0ZWQoKSB7XG4gICAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgICB0aHJvdyB0aGlzLnJlYXNvbjtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU3Vic2NyaWJlIHRvIHRoZSBjYW5jZWwgc2lnbmFsXG4gICAqL1xuXG4gIHN1YnNjcmliZShsaXN0ZW5lcikge1xuICAgIGlmICh0aGlzLnJlYXNvbikge1xuICAgICAgbGlzdGVuZXIodGhpcy5yZWFzb24pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9saXN0ZW5lcnMpIHtcbiAgICAgIHRoaXMuX2xpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fbGlzdGVuZXJzID0gW2xpc3RlbmVyXTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVW5zdWJzY3JpYmUgZnJvbSB0aGUgY2FuY2VsIHNpZ25hbFxuICAgKi9cblxuICB1bnN1YnNjcmliZShsaXN0ZW5lcikge1xuICAgIGlmICghdGhpcy5fbGlzdGVuZXJzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5fbGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIHRoaXMuX2xpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIGEgbmV3IGBDYW5jZWxUb2tlbmAgYW5kIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsXG4gICAqIGNhbmNlbHMgdGhlIGBDYW5jZWxUb2tlbmAuXG4gICAqL1xuICBzdGF0aWMgc291cmNlKCkge1xuICAgIGxldCBjYW5jZWw7XG4gICAgY29uc3QgdG9rZW4gPSBuZXcgQ2FuY2VsVG9rZW4oZnVuY3Rpb24gZXhlY3V0b3IoYykge1xuICAgICAgY2FuY2VsID0gYztcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgdG9rZW4sXG4gICAgICBjYW5jZWxcbiAgICB9O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENhbmNlbFRva2VuO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFN5bnRhY3RpYyBzdWdhciBmb3IgaW52b2tpbmcgYSBmdW5jdGlvbiBhbmQgZXhwYW5kaW5nIGFuIGFycmF5IGZvciBhcmd1bWVudHMuXG4gKlxuICogQ29tbW9uIHVzZSBjYXNlIHdvdWxkIGJlIHRvIHVzZSBgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5YC5cbiAqXG4gKiAgYGBganNcbiAqICBmdW5jdGlvbiBmKHgsIHksIHopIHt9XG4gKiAgdmFyIGFyZ3MgPSBbMSwgMiwgM107XG4gKiAgZi5hcHBseShudWxsLCBhcmdzKTtcbiAqICBgYGBcbiAqXG4gKiBXaXRoIGBzcHJlYWRgIHRoaXMgZXhhbXBsZSBjYW4gYmUgcmUtd3JpdHRlbi5cbiAqXG4gKiAgYGBganNcbiAqICBzcHJlYWQoZnVuY3Rpb24oeCwgeSwgeikge30pKFsxLCAyLCAzXSk7XG4gKiAgYGBgXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNwcmVhZChjYWxsYmFjaykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcChhcnIpIHtcbiAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkobnVsbCwgYXJyKTtcbiAgfTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4vLi4vdXRpbHMuanMnO1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgcGF5bG9hZCBpcyBhbiBlcnJvciB0aHJvd24gYnkgQXhpb3NcbiAqXG4gKiBAcGFyYW0geyp9IHBheWxvYWQgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgcGF5bG9hZCBpcyBhbiBlcnJvciB0aHJvd24gYnkgQXhpb3MsIG90aGVyd2lzZSBmYWxzZVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0F4aW9zRXJyb3IocGF5bG9hZCkge1xuICByZXR1cm4gdXRpbHMuaXNPYmplY3QocGF5bG9hZCkgJiYgKHBheWxvYWQuaXNBeGlvc0Vycm9yID09PSB0cnVlKTtcbn1cbiIsImNvbnN0IEh0dHBTdGF0dXNDb2RlID0ge1xuICBDb250aW51ZTogMTAwLFxuICBTd2l0Y2hpbmdQcm90b2NvbHM6IDEwMSxcbiAgUHJvY2Vzc2luZzogMTAyLFxuICBFYXJseUhpbnRzOiAxMDMsXG4gIE9rOiAyMDAsXG4gIENyZWF0ZWQ6IDIwMSxcbiAgQWNjZXB0ZWQ6IDIwMixcbiAgTm9uQXV0aG9yaXRhdGl2ZUluZm9ybWF0aW9uOiAyMDMsXG4gIE5vQ29udGVudDogMjA0LFxuICBSZXNldENvbnRlbnQ6IDIwNSxcbiAgUGFydGlhbENvbnRlbnQ6IDIwNixcbiAgTXVsdGlTdGF0dXM6IDIwNyxcbiAgQWxyZWFkeVJlcG9ydGVkOiAyMDgsXG4gIEltVXNlZDogMjI2LFxuICBNdWx0aXBsZUNob2ljZXM6IDMwMCxcbiAgTW92ZWRQZXJtYW5lbnRseTogMzAxLFxuICBGb3VuZDogMzAyLFxuICBTZWVPdGhlcjogMzAzLFxuICBOb3RNb2RpZmllZDogMzA0LFxuICBVc2VQcm94eTogMzA1LFxuICBVbnVzZWQ6IDMwNixcbiAgVGVtcG9yYXJ5UmVkaXJlY3Q6IDMwNyxcbiAgUGVybWFuZW50UmVkaXJlY3Q6IDMwOCxcbiAgQmFkUmVxdWVzdDogNDAwLFxuICBVbmF1dGhvcml6ZWQ6IDQwMSxcbiAgUGF5bWVudFJlcXVpcmVkOiA0MDIsXG4gIEZvcmJpZGRlbjogNDAzLFxuICBOb3RGb3VuZDogNDA0LFxuICBNZXRob2ROb3RBbGxvd2VkOiA0MDUsXG4gIE5vdEFjY2VwdGFibGU6IDQwNixcbiAgUHJveHlBdXRoZW50aWNhdGlvblJlcXVpcmVkOiA0MDcsXG4gIFJlcXVlc3RUaW1lb3V0OiA0MDgsXG4gIENvbmZsaWN0OiA0MDksXG4gIEdvbmU6IDQxMCxcbiAgTGVuZ3RoUmVxdWlyZWQ6IDQxMSxcbiAgUHJlY29uZGl0aW9uRmFpbGVkOiA0MTIsXG4gIFBheWxvYWRUb29MYXJnZTogNDEzLFxuICBVcmlUb29Mb25nOiA0MTQsXG4gIFVuc3VwcG9ydGVkTWVkaWFUeXBlOiA0MTUsXG4gIFJhbmdlTm90U2F0aXNmaWFibGU6IDQxNixcbiAgRXhwZWN0YXRpb25GYWlsZWQ6IDQxNyxcbiAgSW1BVGVhcG90OiA0MTgsXG4gIE1pc2RpcmVjdGVkUmVxdWVzdDogNDIxLFxuICBVbnByb2Nlc3NhYmxlRW50aXR5OiA0MjIsXG4gIExvY2tlZDogNDIzLFxuICBGYWlsZWREZXBlbmRlbmN5OiA0MjQsXG4gIFRvb0Vhcmx5OiA0MjUsXG4gIFVwZ3JhZGVSZXF1aXJlZDogNDI2LFxuICBQcmVjb25kaXRpb25SZXF1aXJlZDogNDI4LFxuICBUb29NYW55UmVxdWVzdHM6IDQyOSxcbiAgUmVxdWVzdEhlYWRlckZpZWxkc1Rvb0xhcmdlOiA0MzEsXG4gIFVuYXZhaWxhYmxlRm9yTGVnYWxSZWFzb25zOiA0NTEsXG4gIEludGVybmFsU2VydmVyRXJyb3I6IDUwMCxcbiAgTm90SW1wbGVtZW50ZWQ6IDUwMSxcbiAgQmFkR2F0ZXdheTogNTAyLFxuICBTZXJ2aWNlVW5hdmFpbGFibGU6IDUwMyxcbiAgR2F0ZXdheVRpbWVvdXQ6IDUwNCxcbiAgSHR0cFZlcnNpb25Ob3RTdXBwb3J0ZWQ6IDUwNSxcbiAgVmFyaWFudEFsc29OZWdvdGlhdGVzOiA1MDYsXG4gIEluc3VmZmljaWVudFN0b3JhZ2U6IDUwNyxcbiAgTG9vcERldGVjdGVkOiA1MDgsXG4gIE5vdEV4dGVuZGVkOiA1MTAsXG4gIE5ldHdvcmtBdXRoZW50aWNhdGlvblJlcXVpcmVkOiA1MTEsXG59O1xuXG5PYmplY3QuZW50cmllcyhIdHRwU3RhdHVzQ29kZSkuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gIEh0dHBTdGF0dXNDb2RlW3ZhbHVlXSA9IGtleTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBIdHRwU3RhdHVzQ29kZTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4vdXRpbHMuanMnO1xuaW1wb3J0IGJpbmQgZnJvbSAnLi9oZWxwZXJzL2JpbmQuanMnO1xuaW1wb3J0IEF4aW9zIGZyb20gJy4vY29yZS9BeGlvcy5qcyc7XG5pbXBvcnQgbWVyZ2VDb25maWcgZnJvbSAnLi9jb3JlL21lcmdlQ29uZmlnLmpzJztcbmltcG9ydCBkZWZhdWx0cyBmcm9tICcuL2RlZmF1bHRzL2luZGV4LmpzJztcbmltcG9ydCBmb3JtRGF0YVRvSlNPTiBmcm9tICcuL2hlbHBlcnMvZm9ybURhdGFUb0pTT04uanMnO1xuaW1wb3J0IENhbmNlbGVkRXJyb3IgZnJvbSAnLi9jYW5jZWwvQ2FuY2VsZWRFcnJvci5qcyc7XG5pbXBvcnQgQ2FuY2VsVG9rZW4gZnJvbSAnLi9jYW5jZWwvQ2FuY2VsVG9rZW4uanMnO1xuaW1wb3J0IGlzQ2FuY2VsIGZyb20gJy4vY2FuY2VsL2lzQ2FuY2VsLmpzJztcbmltcG9ydCB7VkVSU0lPTn0gZnJvbSAnLi9lbnYvZGF0YS5qcyc7XG5pbXBvcnQgdG9Gb3JtRGF0YSBmcm9tICcuL2hlbHBlcnMvdG9Gb3JtRGF0YS5qcyc7XG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuL2NvcmUvQXhpb3NFcnJvci5qcyc7XG5pbXBvcnQgc3ByZWFkIGZyb20gJy4vaGVscGVycy9zcHJlYWQuanMnO1xuaW1wb3J0IGlzQXhpb3NFcnJvciBmcm9tICcuL2hlbHBlcnMvaXNBeGlvc0Vycm9yLmpzJztcbmltcG9ydCBBeGlvc0hlYWRlcnMgZnJvbSBcIi4vY29yZS9BeGlvc0hlYWRlcnMuanNcIjtcbmltcG9ydCBhZGFwdGVycyBmcm9tICcuL2FkYXB0ZXJzL2FkYXB0ZXJzLmpzJztcbmltcG9ydCBIdHRwU3RhdHVzQ29kZSBmcm9tICcuL2hlbHBlcnMvSHR0cFN0YXR1c0NvZGUuanMnO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkZWZhdWx0Q29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKlxuICogQHJldHVybnMge0F4aW9zfSBBIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICovXG5mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZShkZWZhdWx0Q29uZmlnKSB7XG4gIGNvbnN0IGNvbnRleHQgPSBuZXcgQXhpb3MoZGVmYXVsdENvbmZpZyk7XG4gIGNvbnN0IGluc3RhbmNlID0gYmluZChBeGlvcy5wcm90b3R5cGUucmVxdWVzdCwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBheGlvcy5wcm90b3R5cGUgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBBeGlvcy5wcm90b3R5cGUsIGNvbnRleHQsIHthbGxPd25LZXlzOiB0cnVlfSk7XG5cbiAgLy8gQ29weSBjb250ZXh0IHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgY29udGV4dCwgbnVsbCwge2FsbE93bktleXM6IHRydWV9KTtcblxuICAvLyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2VzXG4gIGluc3RhbmNlLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpbnN0YW5jZUNvbmZpZykge1xuICAgIHJldHVybiBjcmVhdGVJbnN0YW5jZShtZXJnZUNvbmZpZyhkZWZhdWx0Q29uZmlnLCBpbnN0YW5jZUNvbmZpZykpO1xuICB9O1xuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxuLy8gQ3JlYXRlIHRoZSBkZWZhdWx0IGluc3RhbmNlIHRvIGJlIGV4cG9ydGVkXG5jb25zdCBheGlvcyA9IGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRzKTtcblxuLy8gRXhwb3NlIEF4aW9zIGNsYXNzIHRvIGFsbG93IGNsYXNzIGluaGVyaXRhbmNlXG5heGlvcy5BeGlvcyA9IEF4aW9zO1xuXG4vLyBFeHBvc2UgQ2FuY2VsICYgQ2FuY2VsVG9rZW5cbmF4aW9zLkNhbmNlbGVkRXJyb3IgPSBDYW5jZWxlZEVycm9yO1xuYXhpb3MuQ2FuY2VsVG9rZW4gPSBDYW5jZWxUb2tlbjtcbmF4aW9zLmlzQ2FuY2VsID0gaXNDYW5jZWw7XG5heGlvcy5WRVJTSU9OID0gVkVSU0lPTjtcbmF4aW9zLnRvRm9ybURhdGEgPSB0b0Zvcm1EYXRhO1xuXG4vLyBFeHBvc2UgQXhpb3NFcnJvciBjbGFzc1xuYXhpb3MuQXhpb3NFcnJvciA9IEF4aW9zRXJyb3I7XG5cbi8vIGFsaWFzIGZvciBDYW5jZWxlZEVycm9yIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG5heGlvcy5DYW5jZWwgPSBheGlvcy5DYW5jZWxlZEVycm9yO1xuXG4vLyBFeHBvc2UgYWxsL3NwcmVhZFxuYXhpb3MuYWxsID0gZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7XG4gIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG59O1xuXG5heGlvcy5zcHJlYWQgPSBzcHJlYWQ7XG5cbi8vIEV4cG9zZSBpc0F4aW9zRXJyb3JcbmF4aW9zLmlzQXhpb3NFcnJvciA9IGlzQXhpb3NFcnJvcjtcblxuLy8gRXhwb3NlIG1lcmdlQ29uZmlnXG5heGlvcy5tZXJnZUNvbmZpZyA9IG1lcmdlQ29uZmlnO1xuXG5heGlvcy5BeGlvc0hlYWRlcnMgPSBBeGlvc0hlYWRlcnM7XG5cbmF4aW9zLmZvcm1Ub0pTT04gPSB0aGluZyA9PiBmb3JtRGF0YVRvSlNPTih1dGlscy5pc0hUTUxGb3JtKHRoaW5nKSA/IG5ldyBGb3JtRGF0YSh0aGluZykgOiB0aGluZyk7XG5cbmF4aW9zLmdldEFkYXB0ZXIgPSBhZGFwdGVycy5nZXRBZGFwdGVyO1xuXG5heGlvcy5IdHRwU3RhdHVzQ29kZSA9IEh0dHBTdGF0dXNDb2RlO1xuXG5heGlvcy5kZWZhdWx0ID0gYXhpb3M7XG5cbi8vIHRoaXMgbW9kdWxlIHNob3VsZCBvbmx5IGhhdmUgYSBkZWZhdWx0IGV4cG9ydFxuZXhwb3J0IGRlZmF1bHQgYXhpb3NcbiIsInZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xudmFyIF9fZ2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xuICAgICAgICB3aGlsZSAoZyAmJiAoZyA9IDAsIG9wWzBdICYmIChfID0gMCkpLCBfKSB0cnkge1xuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XG4gICAgfVxufTtcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG52YXIgYWdlbnQ7XG4vKipcbiAqIEdldCB0aGUgYmFja2VuZCBjbGllbnQgaW5zdGFuY2UuXG4gKiBOT1RFOiB0aGlzIGZ1bmN0aW9uIHdpbGwgdGhyb3cgYW4gZXJyb3IgaWYgdGhlIGNsaWVudCBpcyBub3QgY29uZmlndXJlZC5cbiAqXG4gKiBAcmV0dXJucyBBeGlvc0luc3RhbmNlXG4gKi9cbmV4cG9ydCB2YXIgZ2V0QmFja2VuZENsaWVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIWFnZW50KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQmFja2VuZCBjbGllbnQgbm90IGNvbmZpZ3VyZWQuIENhbGwgY29uZmlndXJlQmFja2VuZENsaWVudCBmaXJzdC4nKTtcbiAgICB9XG4gICAgcmV0dXJuIGFnZW50O1xufTtcbmV4cG9ydCB2YXIgY29uZmlndXJlQmFja2VuZENsaWVudCA9IGZ1bmN0aW9uIChiYWNrZW5kVXJsLCBhY2Nlc3NUb2tlbiwgd2l0aENyZWRlbnRpYWxzKSB7XG4gICAgdmFyIG5ld0FnZW50ID0gYXhpb3MuY3JlYXRlKHsgYmFzZVVSTDogYmFja2VuZFVybCB9KTtcbiAgICBuZXdBZ2VudC5kZWZhdWx0cy53aXRoQ3JlZGVudGlhbHMgPSB3aXRoQ3JlZGVudGlhbHM7XG4gICAgaWYgKGFjY2Vzc1Rva2VuKVxuICAgICAgICBuZXdBZ2VudC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vblsnQXV0aG9yaXphdGlvbiddID0gXCJCZWFyZXIgXCIuY29uY2F0KGFjY2Vzc1Rva2VuKTtcbiAgICBhZ2VudCA9IG5ld0FnZW50O1xufTtcbnZhciBiYXNlUXVlcnk7XG5leHBvcnQgdmFyIGdldFJ0a0Jhc2VRdWVyeSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIWJhc2VRdWVyeSkge1xuICAgICAgICBiYXNlUXVlcnkgPSBmdW5jdGlvbiAoX2EpIHsgcmV0dXJuIF9fYXdhaXRlcih2b2lkIDAsIFtfYV0sIHZvaWQgMCwgZnVuY3Rpb24gKF9iKSB7XG4gICAgICAgICAgICB2YXIgYXhpb3NBZ2VudCwgcmVzdWx0LCBheGlvc0Vycm9yXzEsIGVycjtcbiAgICAgICAgICAgIHZhciBfYywgX2QsIF9lO1xuICAgICAgICAgICAgdmFyIHVybCA9IF9iLnVybCwgbWV0aG9kID0gX2IubWV0aG9kLCBkYXRhID0gX2IuZGF0YSwgcGFyYW1zID0gX2IucGFyYW1zO1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfZikge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2YubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgYXhpb3NBZ2VudCA9IGdldEJhY2tlbmRDbGllbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9mLmxhYmVsID0gMTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2YudHJ5cy5wdXNoKFsxLCAzLCAsIDRdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGF4aW9zQWdlbnQucmVxdWVzdCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogYXhpb3NBZ2VudC5kZWZhdWx0cy5iYXNlVVJMICsgdXJsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiBwYXJhbXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBfZi5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgeyBkYXRhOiByZXN1bHQuZGF0YSB9XTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgYXhpb3NFcnJvcl8xID0gX2Yuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyID0gYXhpb3NFcnJvcl8xO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1czogKF9kID0gKF9jID0gZXJyID09PSBudWxsIHx8IGVyciA9PT0gdm9pZCAwID8gdm9pZCAwIDogZXJyLnJlc3BvbnNlKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Muc3RhdHVzKSAhPT0gbnVsbCAmJiBfZCAhPT0gdm9pZCAwID8gX2QgOiA1MDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiAoKF9lID0gZXJyLnJlc3BvbnNlKSA9PT0gbnVsbCB8fCBfZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2UuZGF0YSkgfHwgZXJyLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTsgfTtcbiAgICB9XG4gICAgcmV0dXJuIGJhc2VRdWVyeTtcbn07XG4iLCJpbXBvcnQgeyBqc3ggYXMgX2pzeCwganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsgVGFibGVDZWxsLCBUYWJsZUhlYWQsIFRhYmxlUm93IH0gZnJvbSAnQG11aS9tYXRlcmlhbCc7XG5leHBvcnQgdmFyIExpc3RIZWFkZXIgPSBmdW5jdGlvbiAoX2EpIHtcbiAgICB2YXIgY29sdW1ucyA9IF9hLmNvbHVtbnM7XG4gICAgcmV0dXJuIChfanN4KFRhYmxlSGVhZCwgeyBjaGlsZHJlbjogX2pzeHMoVGFibGVSb3csIHsgY2hpbGRyZW46IFtjb2x1bW5zLm1hcChmdW5jdGlvbiAoY29sdW1uKSB7IHJldHVybiAoX2pzeChUYWJsZUNlbGwsIHsgc3g6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3ByaW1hcnkubWFpbicsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ2NvbW1vbi53aGl0ZScsXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogMTYsXG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5XaWR0aDogY29sdW1uLm1pbldpZHRoLFxuICAgICAgICAgICAgICAgICAgICB9LCBjaGlsZHJlbjogY29sdW1uLmxhYmVsIH0sIGNvbHVtbi5pZCkpOyB9KSwgX2pzeChUYWJsZUNlbGwsIHsgc3g6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3ByaW1hcnkubWFpbicsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ2NvbW1vbi53aGl0ZScsXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogMTYsXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMTAwLFxuICAgICAgICAgICAgICAgICAgICB9IH0sIFwic3VibWl0LWNlbGxcIildIH0pIH0pKTtcbn07XG4iLCJpbXBvcnQgeyBqc3ggYXMgX2pzeCwgRnJhZ21lbnQgYXMgX0ZyYWdtZW50IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBUYWJsZUNlbGwsIFRhYmxlUm93IH0gZnJvbSAnQG11aS9tYXRlcmlhbCc7XG5leHBvcnQgdmFyIExpc3RSb3cgPSBmdW5jdGlvbiAoX2EpIHtcbiAgICB2YXIgcm93cyA9IF9hLnJvd3MsIG9uQ2xpY2tSb3dBY3Rpb24gPSBfYS5vbkNsaWNrUm93QWN0aW9uLCBjb2x1bW5zID0gX2EuY29sdW1ucywgdXBkYXRlRmlsdGVycyA9IF9hLnVwZGF0ZUZpbHRlcnM7XG4gICAgcmV0dXJuIChfanN4KF9GcmFnbWVudCwgeyBjaGlsZHJlbjogcm93cy5tYXAoZnVuY3Rpb24gKHJvdykgeyByZXR1cm4gKF9qc3goVGFibGVSb3csIHsgc3g6IHtcbiAgICAgICAgICAgICAgICAnJjpudGgtb2YtdHlwZShvZGQpJzoge1xuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdhY3Rpb24uaG92ZXInLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LCBvbkNsaWNrOiBmdW5jdGlvbiAoZSkgeyByZXR1cm4gb25DbGlja1Jvd0FjdGlvbihyb3cuaWQsIGUuY3RybEtleSB8fCBlLmJ1dHRvbiA9PT0gMSk7IH0sIGhvdmVyOiB0cnVlLCByb2xlOiBcImNoZWNrYm94XCIsIHRhYkluZGV4OiAtMSwgY2hpbGRyZW46IGNvbHVtbnMubWFwKGZ1bmN0aW9uIChjb2x1bW4pIHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSByb3dbY29sdW1uLmlkXTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKF9qc3goVGFibGVDZWxsLCB7IGNoaWxkcmVuOiBjb2x1bW4ucmVuZGVyVmFsdWUgPyBjb2x1bW4ucmVuZGVyVmFsdWUodmFsdWUsIGNvbHVtbiwgdXBkYXRlRmlsdGVycykgOiBcIlwiLmNvbmNhdCh2YWx1ZSkgfSwgY29sdW1uLmlkKSk7XG4gICAgICAgICAgICB9KSB9LCByb3cuaWQpKTsgfSkgfSkpO1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuJ3VzZSBjbGllbnQnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfdXRpbHMuY3JlYXRlU3ZnSWNvbjtcbiAgfVxufSk7XG52YXIgX3V0aWxzID0gcmVxdWlyZShcIkBtdWkvbWF0ZXJpYWwvdXRpbHNcIik7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cInVzZSBjbGllbnRcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIF9jcmVhdGVTdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVTdmdJY29uXCIpKTtcbnZhciBfanN4UnVudGltZSA9IHJlcXVpcmUoXCJyZWFjdC9qc3gtcnVudGltZVwiKTtcbnZhciBfZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdCA9ICgwLCBfY3JlYXRlU3ZnSWNvbi5kZWZhdWx0KSggLyojX19QVVJFX18qLygwLCBfanN4UnVudGltZS5qc3gpKFwicGF0aFwiLCB7XG4gIGQ6IFwiTTIyIDNIN2MtLjY5IDAtMS4yMy4zNS0xLjU5Ljg4TDAgMTJsNS40MSA4LjExYy4zNi41My45Ljg5IDEuNTkuODloMTVjMS4xIDAgMi0uOSAyLTJWNWMwLTEuMS0uOS0yLTItMm0tMyAxMi41OUwxNy41OSAxNyAxNCAxMy40MSAxMC40MSAxNyA5IDE1LjU5IDEyLjU5IDEyIDkgOC40MSAxMC40MSA3IDE0IDEwLjU5IDE3LjU5IDcgMTkgOC40MSAxNS40MSAxMnpcIlxufSksICdCYWNrc3BhY2UnKTsiLCJpbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsgSWNvbkJ1dHRvbiwgSW5wdXRBZG9ybm1lbnQsIFRleHRGaWVsZCB9IGZyb20gJ0BtdWkvbWF0ZXJpYWwnO1xuaW1wb3J0IEJhY2tzcGFjZSBmcm9tICdAbXVpL2ljb25zLW1hdGVyaWFsL0JhY2tzcGFjZSc7XG52YXIgTGlzdEZpbHRlckZpZWxkID0gZnVuY3Rpb24gKF9hKSB7XG4gICAgdmFyIHZhbGlkYXRpb25FcnJvciA9IF9hLnZhbGlkYXRpb25FcnJvciwgZmlsdGVyS2V5ID0gX2EuZmlsdGVyS2V5LCBmaWx0ZXJWYWx1ZSA9IF9hLmZpbHRlclZhbHVlLCBmaWx0ZXJIZWxwZXIgPSBfYS5maWx0ZXJIZWxwZXIsIHNldEZpbHRlclZhbHVlID0gX2Euc2V0RmlsdGVyVmFsdWUsIG9uRmlsdGVyQ2xlYXIgPSBfYS5vbkZpbHRlckNsZWFyO1xuICAgIHJldHVybiAoX2pzeChUZXh0RmllbGQsIHsgc2l6ZTogXCJzbWFsbFwiLCBlcnJvcjogISF2YWxpZGF0aW9uRXJyb3IsIGhlbHBlclRleHQ6IHZhbGlkYXRpb25FcnJvciB8fCBmaWx0ZXJIZWxwZXIsIHZhbHVlOiBmaWx0ZXJWYWx1ZSB8fCAnJywgb25DaGFuZ2U6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgc2V0RmlsdGVyVmFsdWUoZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgICAgICAgfSwgSW5wdXRQcm9wczoge1xuICAgICAgICAgICAgZW5kQWRvcm5tZW50OiBmaWx0ZXJWYWx1ZSAmJiBvbkZpbHRlckNsZWFyID8gKF9qc3goSW5wdXRBZG9ybm1lbnQsIHsgcG9zaXRpb246IFwiZW5kXCIsIGNoaWxkcmVuOiBfanN4KEljb25CdXR0b24sIHsgb25DbGljazogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBvbkZpbHRlckNsZWFyKGZpbHRlcktleSk7XG4gICAgICAgICAgICAgICAgICAgIH0sIHNpemU6IFwic21hbGxcIiwgY2hpbGRyZW46IF9qc3goQmFja3NwYWNlLCB7fSkgfSkgfSkpIDogdW5kZWZpbmVkLFxuICAgICAgICB9IH0pKTtcbn07XG5leHBvcnQgZGVmYXVsdCBMaXN0RmlsdGVyRmllbGQ7XG4iLCJ2YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxuICAgICAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0O1xuICAgIH07XG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xuaW1wb3J0IHsganN4IGFzIF9qc3gsIEZyYWdtZW50IGFzIF9GcmFnbWVudCwganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsgQnV0dG9uLCBUYWJsZUNlbGwgfSBmcm9tICdAbXVpL21hdGVyaWFsJztcbmltcG9ydCBMaXN0RmlsdGVyRmllbGQgZnJvbSAnLi9MaXN0RmlsdGVyRmllbGQnO1xuZXhwb3J0IHZhciBMaXN0RmlsdGVycyA9IGZ1bmN0aW9uIChfYSkge1xuICAgIHZhciBjb2x1bW5zID0gX2EuY29sdW1ucywgb25GaWx0ZXJDbGVhciA9IF9hLm9uRmlsdGVyQ2xlYXIsIHNldEZvcm1WYWxpZGF0aW9uRXJyb3JzID0gX2Euc2V0Rm9ybVZhbGlkYXRpb25FcnJvcnMsIHJlbW92ZUZpbHRlckVycm9yID0gX2EucmVtb3ZlRmlsdGVyRXJyb3IsIHNldEZpbHRlclZhbHVlcyA9IF9hLnNldEZpbHRlclZhbHVlcywgaGFuZGxlRmlsdGVyQ2hhbmdlID0gX2EuaGFuZGxlRmlsdGVyQ2hhbmdlLCBmaWx0ZXJWYWx1ZXMgPSBfYS5maWx0ZXJWYWx1ZXMsIGZvcm1WYWxpZGF0aW9uRXJyb3JzID0gX2EuZm9ybVZhbGlkYXRpb25FcnJvcnM7XG4gICAgcmV0dXJuIChfanN4cyhfRnJhZ21lbnQsIHsgY2hpbGRyZW46IFtjb2x1bW5zLm1hcChmdW5jdGlvbiAoY29sdW1uKSB7XG4gICAgICAgICAgICAgICAgdmFyIGZpbHRlcktleSA9IGNvbHVtbi5maWx0ZXJLZXk7XG4gICAgICAgICAgICAgICAgdmFyIGZpbHRlclZhbHVlID0gZmlsdGVyVmFsdWVzW2ZpbHRlcktleV0gfHwgJyc7XG4gICAgICAgICAgICAgICAgdmFyIHZhbGlkYXRpb25FcnJvciA9IGZvcm1WYWxpZGF0aW9uRXJyb3JzW2ZpbHRlcktleV07XG4gICAgICAgICAgICAgICAgdmFyIHZhbGlkYXRvciA9IGNvbHVtbi5maWx0ZXJWYWxpZGF0b3I7XG4gICAgICAgICAgICAgICAgdmFyIGhhbmRsZVZhbGlkYXRlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbGlkYXRvciAmJiB2YWx1ZSAmJiB2YWx1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXJyb3IgPSB2YWxpZGF0b3IodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0Rm9ybVZhbGlkYXRpb25FcnJvcnMoX19hc3NpZ24oX19hc3NpZ24oe30sIGZvcm1WYWxpZGF0aW9uRXJyb3JzKSwgKF9hID0ge30sIF9hW2ZpbHRlcktleV0gPSBlcnJvciwgX2EpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh2YWxpZGF0aW9uRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVGaWx0ZXJFcnJvcihmaWx0ZXJLZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHZhbGlkYXRpb25FcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlRmlsdGVyRXJyb3IoZmlsdGVyS2V5KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIChfanN4KFRhYmxlQ2VsbCwgeyBzdHlsZTogeyB3aWR0aDogY29sdW1uLm1pbldpZHRoIH0sIGNoaWxkcmVuOiBjb2x1bW4ucmVuZGVyRmlsdGVyID8gKGNvbHVtbi5yZW5kZXJGaWx0ZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyS2V5OiBmaWx0ZXJLZXksXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXJWYWx1ZTogXCJcIi5jb25jYXQoZmlsdGVyVmFsdWUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVySGVscGVyOiBjb2x1bW4uZmlsdGVySGVscGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvbkVycm9yOiB2YWxpZGF0aW9uRXJyb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRGaWx0ZXJWYWx1ZTogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldEZpbHRlclZhbHVlcyhfX2Fzc2lnbihfX2Fzc2lnbih7fSwgZmlsdGVyVmFsdWVzKSwgKF9hID0ge30sIF9hW2ZpbHRlcktleV0gPSB2YWx1ZSwgX2EpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlVmFsaWRhdGUodmFsdWUudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgb25GaWx0ZXJDbGVhcjogZnVuY3Rpb24gKCkgeyByZXR1cm4gb25GaWx0ZXJDbGVhciA9PT0gbnVsbCB8fCBvbkZpbHRlckNsZWFyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvbkZpbHRlckNsZWFyKGZpbHRlcktleSk7IH0sXG4gICAgICAgICAgICAgICAgICAgIH0pKSA6IChfanN4KExpc3RGaWx0ZXJGaWVsZCwgeyBmaWx0ZXJLZXk6IGZpbHRlcktleSwgZmlsdGVyVmFsdWU6IFwiXCIuY29uY2F0KGZpbHRlclZhbHVlKSwgZmlsdGVySGVscGVyOiBjb2x1bW4uZmlsdGVySGVscGVyLCB2YWxpZGF0aW9uRXJyb3I6IHZhbGlkYXRpb25FcnJvciwgc2V0RmlsdGVyVmFsdWU6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRGaWx0ZXJWYWx1ZXMoX19hc3NpZ24oX19hc3NpZ24oe30sIGZpbHRlclZhbHVlcyksIChfYSA9IHt9LCBfYVtmaWx0ZXJLZXldID0gdmFsdWUsIF9hKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZVZhbGlkYXRlKHZhbHVlLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgb25GaWx0ZXJDbGVhcjogZnVuY3Rpb24gKCkgeyByZXR1cm4gb25GaWx0ZXJDbGVhciA9PT0gbnVsbCB8fCBvbkZpbHRlckNsZWFyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvbkZpbHRlckNsZWFyKGZpbHRlcktleSk7IH0gfSkpIH0sIGNvbHVtbi5pZCkpO1xuICAgICAgICAgICAgfSksIF9qc3goVGFibGVDZWxsLCB7IHN0eWxlOiB7IHdpZHRoOiAxMDAgfSwgY2hpbGRyZW46IF9qc3goQnV0dG9uLCB7IHZhcmlhbnQ6IFwiY29udGFpbmVkXCIsIGRpc2FibGVkOiAhIU9iamVjdC5rZXlzKGZvcm1WYWxpZGF0aW9uRXJyb3JzKS5sZW5ndGgsIG9uQ2xpY2s6IGhhbmRsZUZpbHRlckNoYW5nZSwgY2hpbGRyZW46IFwiRmlsdGVyXCIgfSkgfSwgXCJzdWJtaXQtY2VsbFwiKV0gfSkpO1xufTtcbiIsInZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IGZ1bmN0aW9uICgpIHtcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfTtcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBMaXN0RmlsdGVycyB9IGZyb20gJy4vTGlzdEZpbHRlcnMnO1xuaW1wb3J0IHsgVGFibGVSb3cgfSBmcm9tICdAbXVpL21hdGVyaWFsJztcbmV4cG9ydCB2YXIgTGlzdENvbnRyb2xzID0gZnVuY3Rpb24gKF9hKSB7XG4gICAgdmFyIGNvbHVtbnMgPSBfYS5jb2x1bW5zLCBmaWx0ZXJzID0gX2EuZmlsdGVycywgb25GaWx0ZXJDaGFuZ2UgPSBfYS5vbkZpbHRlckNoYW5nZSwgb25QYWdlQ2hhbmdlID0gX2Eub25QYWdlQ2hhbmdlLCBvbkZpbHRlckNsZWFyID0gX2Eub25GaWx0ZXJDbGVhcjtcbiAgICB2YXIgX2IgPSB1c2VTdGF0ZSh7fSksIGZvcm1WYWxpZGF0aW9uRXJyb3JzID0gX2JbMF0sIHNldEZvcm1WYWxpZGF0aW9uRXJyb3JzID0gX2JbMV07XG4gICAgdmFyIHJlbW92ZUZpbHRlckVycm9yID0gZnVuY3Rpb24gKGZpbHRlcktleSkge1xuICAgICAgICB2YXIgY3VycmVudEVycm9ycyA9IF9fYXNzaWduKHt9LCBmb3JtVmFsaWRhdGlvbkVycm9ycyk7XG4gICAgICAgIGRlbGV0ZSBjdXJyZW50RXJyb3JzW2ZpbHRlcktleV07XG4gICAgICAgIHNldEZvcm1WYWxpZGF0aW9uRXJyb3JzKGN1cnJlbnRFcnJvcnMpO1xuICAgIH07XG4gICAgdmFyIF9jID0gdXNlU3RhdGUoZmlsdGVycyksIGZpbHRlclZhbHVlcyA9IF9jWzBdLCBzZXRGaWx0ZXJWYWx1ZXMgPSBfY1sxXTtcbiAgICB2YXIgaGFuZGxlRmlsdGVyQ2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBvbkZpbHRlckNoYW5nZShmaWx0ZXJWYWx1ZXMpO1xuICAgIH07XG4gICAgdmFyIG9uS2V5UHJlc3MgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICBpZiAoZS5rZXkgPT09ICdFbnRlcicpIHtcbiAgICAgICAgICAgIG9uRmlsdGVyQ2hhbmdlKGZpbHRlclZhbHVlcyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiAoX2pzeChUYWJsZVJvdywgeyBzeDogeyB2ZXJ0aWNhbEFsaWduOiAnYmFzZWxpbmUnIH0sIG9uS2V5UHJlc3M6IG9uS2V5UHJlc3MsIGNoaWxkcmVuOiBfanN4KExpc3RGaWx0ZXJzLCB7IG9uUGFnZUNoYW5nZTogb25QYWdlQ2hhbmdlLCBjb2x1bW5zOiBjb2x1bW5zLCBvbkZpbHRlckNsZWFyOiBvbkZpbHRlckNsZWFyLCBzZXRGb3JtVmFsaWRhdGlvbkVycm9yczogc2V0Rm9ybVZhbGlkYXRpb25FcnJvcnMsIHJlbW92ZUZpbHRlckVycm9yOiByZW1vdmVGaWx0ZXJFcnJvciwgc2V0RmlsdGVyVmFsdWVzOiBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIHNldEZpbHRlclZhbHVlcyhmdW5jdGlvbiAocHJldikgeyByZXR1cm4gKF9fYXNzaWduKF9fYXNzaWduKHt9LCBwcmV2KSwgdmFsdWUpKTsgfSk7IH0sIGhhbmRsZUZpbHRlckNoYW5nZTogaGFuZGxlRmlsdGVyQ2hhbmdlLCBmaWx0ZXJWYWx1ZXM6IGZpbHRlclZhbHVlcywgZm9ybVZhbGlkYXRpb25FcnJvcnM6IGZvcm1WYWxpZGF0aW9uRXJyb3JzIH0pIH0pKTtcbn07XG4iLCJpbXBvcnQgeyBqc3ggYXMgX2pzeCwganN4cyBhcyBfanN4cywgRnJhZ21lbnQgYXMgX0ZyYWdtZW50IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBCdXR0b24sIFRhYmxlLCBUYWJsZUJvZHksIFRhYmxlQ2VsbCwgVGFibGVDb250YWluZXIsIFRhYmxlUGFnaW5hdGlvbiwgVGFibGVSb3csIH0gZnJvbSAnQG11aS9tYXRlcmlhbCc7XG5pbXBvcnQgeyBMaXN0SGVhZGVyIH0gZnJvbSAnLi9MaXN0SGVhZGVyJztcbmltcG9ydCB7IExpc3RSb3cgfSBmcm9tICcuL0xpc3RSb3cnO1xuaW1wb3J0IHsgTGlzdENvbnRyb2xzIH0gZnJvbSAnLi9MaXN0Q29udHJvbHMnO1xuZXhwb3J0IHZhciBMaXN0VGFibGUgPSBmdW5jdGlvbiAoX2EpIHtcbiAgICB2YXIgb25QYWdlQ2hhbmdlID0gX2Eub25QYWdlQ2hhbmdlLCByb3dzID0gX2Eucm93cywgY29sdW1ucyA9IF9hLmNvbHVtbnMsIGZpbHRlcnMgPSBfYS5maWx0ZXJzLCBtZXNzYWdlVG90YWxDb3VudCA9IF9hLm1lc3NhZ2VUb3RhbENvdW50LCBvbkNsaWNrUm93QWN0aW9uID0gX2Eub25DbGlja1Jvd0FjdGlvbiwgb25GaWx0ZXJDaGFuZ2UgPSBfYS5vbkZpbHRlckNoYW5nZSwgb25BZGROZXcgPSBfYS5vbkFkZE5ldywgb25GaWx0ZXJDbGVhciA9IF9hLm9uRmlsdGVyQ2xlYXI7XG4gICAgdmFyIGhhbmRsZUNoYW5nZVBhZ2UgPSBmdW5jdGlvbiAoX2V2ZW50LCBuZXdQYWdlKSB7XG4gICAgICAgIG9uUGFnZUNoYW5nZShuZXdQYWdlKTtcbiAgICB9O1xuICAgIHZhciBoYW5kbGVGaWx0ZXJDaGFuZ2UgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgb25GaWx0ZXJDaGFuZ2UgPT09IG51bGwgfHwgb25GaWx0ZXJDaGFuZ2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9uRmlsdGVyQ2hhbmdlKHZhbHVlKTtcbiAgICB9O1xuICAgIHJldHVybiAoX2pzeHMoX0ZyYWdtZW50LCB7IGNoaWxkcmVuOiBbX2pzeChUYWJsZUNvbnRhaW5lciwgeyBzeDogeyBtYXhIZWlnaHQ6ICdjYWxjKDEwMHZoIC0gMjAwcHgpJyB9LCBjaGlsZHJlbjogX2pzeHMoVGFibGUsIHsgc3RpY2t5SGVhZGVyOiB0cnVlLCBcImFyaWEtbGFiZWxcIjogXCJzdGlja3kgdGFibGVcIiwgc2l6ZTogXCJzbWFsbFwiLCBjaGlsZHJlbjogW19qc3goTGlzdEhlYWRlciwgeyBjb2x1bW5zOiBjb2x1bW5zIH0pLCBfanN4cyhUYWJsZUJvZHksIHsgY2hpbGRyZW46IFtvbkFkZE5ldyAmJiAoX2pzeChUYWJsZVJvdywgeyBjaGlsZHJlbjogX2pzeChUYWJsZUNlbGwsIHsgY2hpbGRyZW46IF9qc3goQnV0dG9uLCB7IHZhcmlhbnQ6IFwiY29udGFpbmVkXCIsIHR5cGU6IFwiYnV0dG9uXCIsIG9uQ2xpY2s6IG9uQWRkTmV3LCBjaGlsZHJlbjogXCJBZGQgbmV3XCIgfSkgfSkgfSkpLCBvbkZpbHRlckNoYW5nZSA/IChfanN4KExpc3RDb250cm9scywgeyBvblBhZ2VDaGFuZ2U6IG9uUGFnZUNoYW5nZSwgY29sdW1uczogY29sdW1ucywgb25GaWx0ZXJDaGFuZ2U6IGhhbmRsZUZpbHRlckNoYW5nZSwgZmlsdGVyczogZmlsdGVycywgb25GaWx0ZXJDbGVhcjogb25GaWx0ZXJDbGVhciB9LCBKU09OLnN0cmluZ2lmeShmaWx0ZXJzKSkpIDogbnVsbCwgX2pzeChMaXN0Um93LCB7IHJvd3M6IHJvd3MsIG9uQ2xpY2tSb3dBY3Rpb246IG9uQ2xpY2tSb3dBY3Rpb24sIGNvbHVtbnM6IGNvbHVtbnMsIHVwZGF0ZUZpbHRlcnM6IGhhbmRsZUZpbHRlckNoYW5nZSB9KV0gfSldIH0pIH0pLCBfanN4KFRhYmxlUGFnaW5hdGlvbiwgeyBjb21wb25lbnQ6IFwiZGl2XCIsIGNvdW50OiBtZXNzYWdlVG90YWxDb3VudCwgcm93c1BlclBhZ2U6IChmaWx0ZXJzLnNpemUgJiYgcGFyc2VJbnQoZmlsdGVycy5zaXplLCAxMCkpIHx8IDEwMCwgcGFnZTogKGZpbHRlcnMucGFnZSAmJiBwYXJzZUludChmaWx0ZXJzLnBhZ2UsIDEwKSkgfHwgMCwgb25QYWdlQ2hhbmdlOiBoYW5kbGVDaGFuZ2VQYWdlLCByb3dzUGVyUGFnZU9wdGlvbnM6IFtdIH0pXSB9KSk7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cInVzZSBjbGllbnRcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIF9jcmVhdGVTdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVTdmdJY29uXCIpKTtcbnZhciBfanN4UnVudGltZSA9IHJlcXVpcmUoXCJyZWFjdC9qc3gtcnVudGltZVwiKTtcbnZhciBfZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdCA9ICgwLCBfY3JlYXRlU3ZnSWNvbi5kZWZhdWx0KSggLyojX19QVVJFX18qLygwLCBfanN4UnVudGltZS5qc3gpKFwicGF0aFwiLCB7XG4gIGQ6IFwiTTE1LjUgMTRoLS43OWwtLjI4LS4yN0MxNS40MSAxMi41OSAxNiAxMS4xMSAxNiA5LjUgMTYgNS45MSAxMy4wOSAzIDkuNSAzUzMgNS45MSAzIDkuNSA1LjkxIDE2IDkuNSAxNmMxLjYxIDAgMy4wOS0uNTkgNC4yMy0xLjU3bC4yNy4yOHYuNzlsNSA0Ljk5TDIwLjQ5IDE5em0tNiAwQzcuMDEgMTQgNSAxMS45OSA1IDkuNVM3LjAxIDUgOS41IDUgMTQgNy4wMSAxNCA5LjUgMTEuOTkgMTQgOS41IDE0XCJcbn0pLCAnU2VhcmNoJyk7IiwiZXhwb3J0IHZhciBmaWx0ZXJGcm9tVXJsU2VhcmNoUGFyYW1zID0gZnVuY3Rpb24gKHF1ZXJ5LCBrZXlzKSB7XG4gICAgdmFyIGZpbHRlciA9IHt9O1xuICAgIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoaykge1xuICAgICAgICB2YXIgdmFsdWUgPSBxdWVyeS5nZXQoay50b1N0cmluZygpKTtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICBmaWx0ZXJba10gPSB2YWx1ZS50b1N0cmluZygpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGZpbHRlcjtcbn07XG4vKipcbiAqIFByb2R1Y2UgYSBmaWx0ZXIgdmFsdWUgZnJvbSBhIHJvdyB2YWx1ZS4gQmVzdCBlZmZvcnQgcmVjb2duaXRpb24gb2YgdGhlIGRpZmZlcmVudCB0eXBlcyBvZiBvYmplY3RzLlxuICogQHBhcmFtIHJvd1ZhbHVlXG4gKiBAcmV0dXJuc1xuICovXG5leHBvcnQgdmFyIGZpbHRlclZhbHVlRnJvbVJvd1ZhbHVlID0gZnVuY3Rpb24gKHJvd1ZhbHVlKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkocm93VmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBmb3JtYXRLZXlWYWx1ZUFycmF5KHJvd1ZhbHVlKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIHJvd1ZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gZm9ybWF0T2JqZWN0KHJvd1ZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHJvd1ZhbHVlLnRvU3RyaW5nKCk7XG59O1xuZXhwb3J0IHZhciBmb3JtYXRPYmplY3QgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gT2JqZWN0LmVudHJpZXModmFsdWUpXG4gICAgICAgIC5tYXAoZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHZhciBrID0gX2FbMF0sIHYgPSBfYVsxXTtcbiAgICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KGssIFwiPVwiKS5jb25jYXQodik7XG4gICAgfSlcbiAgICAgICAgLmpvaW4oJywnKTtcbn07XG5leHBvcnQgdmFyIGZvcm1hdEtleVZhbHVlQXJyYXkgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUubWFwKGZ1bmN0aW9uICh2KSB7IHJldHVybiBcIlwiLmNvbmNhdCh2LmtleSwgXCI9XCIpLmNvbmNhdCh2LnZhbHVlKTsgfSkuam9pbignLCcpO1xufTtcbmV4cG9ydCB2YXIgY3JlYXRlRmlsdGVyUXVlcnkgPSBmdW5jdGlvbiAoZmlsdGVycywgZm9ybWF0dGVyQnlLZXkpIHtcbiAgICB2YXIgcmVzdWx0ID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpO1xuICAgIGlmICghZmlsdGVycykge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBPYmplY3QuZW50cmllcyhmaWx0ZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChfYSkge1xuICAgICAgICB2YXIgX2I7XG4gICAgICAgIHZhciBfYywgX2Q7XG4gICAgICAgIHZhciBrZXkgPSBfYVswXSwgdmFsdWUgPSBfYVsxXTtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgc3ViUmVzdWx0ID0gKF9kID0gKF9jID0gZm9ybWF0dGVyQnlLZXkgPT09IG51bGwgfHwgZm9ybWF0dGVyQnlLZXkgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGZvcm1hdHRlckJ5S2V5W2tleV0pID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5jYWxsKGZvcm1hdHRlckJ5S2V5LCB2YWx1ZSwga2V5KSkgIT09IG51bGwgJiYgX2QgIT09IHZvaWQgMCA/IF9kIDogbmV3IFVSTFNlYXJjaFBhcmFtcygoX2IgPSB7fSwgX2Jba2V5XSA9IHZhbHVlLCBfYikpO1xuICAgICAgICAgICAgc3ViUmVzdWx0LmZvckVhY2goZnVuY3Rpb24gKHN1YlZhbHVlLCBzdWJLZXkpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQuYXBwZW5kKHN1YktleSwgc3ViVmFsdWUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbiIsImltcG9ydCB7IGpzeCBhcyBfanN4LCBGcmFnbWVudCBhcyBfRnJhZ21lbnQsIGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IEljb25CdXR0b24gfSBmcm9tICdAbXVpL21hdGVyaWFsJztcbmltcG9ydCBTZWFyY2ggZnJvbSAnQG11aS9pY29ucy1tYXRlcmlhbC9TZWFyY2gnO1xuaW1wb3J0IHsgZmlsdGVyVmFsdWVGcm9tUm93VmFsdWUgfSBmcm9tICcuLi91dGlscy9maWx0ZXJVdGlscyc7XG4vKipcbiAqIEdlbmVyYXRlIGEgbGluayB0byB1cGRhdGUgdGhlIGZpbHRlciBmb3IgdGhlIHZhbHVlIGRpc3BsYXllZCBpbiB0aGUgY2VsbFxuICogVE9ETzogRGlzYWJsZSB0aGUgYnV0dG9uIGlmIGFscmVhZHkgZmlsdGVyZWQgYnkgdGhlIGtleT9cbiAqIEBwYXJhbSBrZXkgVGhlIEZpbHRlciBrZXlcbiAqIEBwYXJhbSB2YWx1ZSB0aGUgdmFsdWUgdG8gc2V0IGFzIHRoZSBmaWx0ZXIuIElmIHRoZSB2YWx1ZSBpcyBudWxsIG9yIHVuZGVmaW5lZCBubyBidXR0b24gd2lsbCBiZSBzaG93blxuICovXG52YXIgVmFsdWVGaWx0ZXJMaW5rID0gZnVuY3Rpb24gKF9hKSB7XG4gICAgdmFyIGZpbHRlcktleSA9IF9hLmZpbHRlcktleSwgdmFsdWUgPSBfYS52YWx1ZSwgaXNFbXB0eVZhbHVlSGlkZGVuID0gX2EuaXNFbXB0eVZhbHVlSGlkZGVuLCB1cGRhdGVGaWx0ZXJzID0gX2EudXBkYXRlRmlsdGVycztcbiAgICB2YXIgaGFuZGxlQ2xpY2sgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgdmFyIGZpbHRlclZhbHVlID0gKF9hID0ge30sXG4gICAgICAgICAgICBfYVtmaWx0ZXJLZXldID0gZmlsdGVyVmFsdWVGcm9tUm93VmFsdWUodmFsdWUpLFxuICAgICAgICAgICAgX2EpO1xuICAgICAgICB1cGRhdGVGaWx0ZXJzKGZpbHRlclZhbHVlKTtcbiAgICB9O1xuICAgIGlmIChpc0VtcHR5VmFsdWVIaWRkZW4gJiYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsdWUgPT09ICcnKSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIChfanN4cyhfRnJhZ21lbnQsIHsgY2hpbGRyZW46IFt2YWx1ZSwgJyAnLCBfanN4KEljb25CdXR0b24sIHsgb25DbGljazogaGFuZGxlQ2xpY2ssIHNpemU6IFwic21hbGxcIiwgY2hpbGRyZW46IF9qc3goU2VhcmNoLCB7fSkgfSldIH0pKTtcbn07XG5leHBvcnQgZGVmYXVsdCBWYWx1ZUZpbHRlckxpbms7XG4iLCJpbXBvcnQgeyBqc3ggYXMgX2pzeCwganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEdyaWQsIEljb25CdXR0b24sIElucHV0QWRvcm5tZW50LCBUZXh0RmllbGQgfSBmcm9tICdAbXVpL21hdGVyaWFsJztcbmltcG9ydCBCYWNrc3BhY2UgZnJvbSAnQG11aS9pY29ucy1tYXRlcmlhbC9CYWNrc3BhY2UnO1xudmFyIERhdGVUaW1lUmFuZ2VGaWx0ZXJGaWVsZCA9IGZ1bmN0aW9uIChfYSkge1xuICAgIHZhciBmaWx0ZXJWYWx1ZSA9IF9hLmZpbHRlclZhbHVlLCB2YWxpZGF0aW9uRXJyb3IgPSBfYS52YWxpZGF0aW9uRXJyb3IsIHNldEZpbHRlclZhbHVlID0gX2Euc2V0RmlsdGVyVmFsdWU7XG4gICAgdmFyIF9iID0gKGZpbHRlclZhbHVlID09PSBudWxsIHx8IGZpbHRlclZhbHVlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBmaWx0ZXJWYWx1ZS5zcGxpdCgnLScpKSB8fCAnJywgaW5pdGlhbFN0YXJ0RGF0ZVRpbWUgPSBfYlswXSwgaW5pdGlhbEVuZERhdGVUaW1lID0gX2JbMV07XG4gICAgdmFyIF9jID0gUmVhY3QudXNlU3RhdGUoaW5pdGlhbFN0YXJ0RGF0ZVRpbWUpLCBzdGFydERhdGVUaW1lID0gX2NbMF0sIHNldFN0YXJ0RGF0ZVRpbWUgPSBfY1sxXTtcbiAgICB2YXIgX2QgPSBSZWFjdC51c2VTdGF0ZShpbml0aWFsRW5kRGF0ZVRpbWUpLCBlbmREYXRlVGltZSA9IF9kWzBdLCBzZXRFbmREYXRlVGltZSA9IF9kWzFdO1xuICAgIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IFwiXCIuY29uY2F0KHN0YXJ0RGF0ZVRpbWUgfHwgJycpLmNvbmNhdChlbmREYXRlVGltZSB8fCBzdGFydERhdGVUaW1lID8gJy0nIDogJycpLmNvbmNhdChlbmREYXRlVGltZSB8fCAnJyk7XG4gICAgICAgIHNldEZpbHRlclZhbHVlKHZhbHVlKTtcbiAgICB9LCBbc3RhcnREYXRlVGltZSwgZW5kRGF0ZVRpbWVdKTtcbiAgICByZXR1cm4gKF9qc3hzKEdyaWQsIHsgY29udGFpbmVyOiB0cnVlLCBkaXJlY3Rpb246IFwicm93XCIsIHNwYWNpbmc6IDEsIGNoaWxkcmVuOiBbX2pzeChHcmlkLCB7IGl0ZW06IHRydWUsIHhzOiAxMiwgeGw6IDYsIGNoaWxkcmVuOiBfanN4KFRleHRGaWVsZCwgeyBzaXplOiBcInNtYWxsXCIsIGVycm9yOiAhIXZhbGlkYXRpb25FcnJvciwgaGVscGVyVGV4dDogdmFsaWRhdGlvbkVycm9yIHx8ICdTdGFydCcsIHZhbHVlOiBzdGFydERhdGVUaW1lIHx8ICcnLCBvbkNoYW5nZTogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRTdGFydERhdGVUaW1lKFwiXCIuY29uY2F0KGV2ZW50LnRhcmdldC52YWx1ZSwgXCI6MDBcIikpO1xuICAgICAgICAgICAgICAgICAgICB9LCBmdWxsV2lkdGg6IHRydWUsIElucHV0UHJvcHM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZEFkb3JubWVudDogc3RhcnREYXRlVGltZSAmJiBzdGFydERhdGVUaW1lLmxlbmd0aCA+IDAgPyAoX2pzeChJbnB1dEFkb3JubWVudCwgeyBwb3NpdGlvbjogXCJlbmRcIiwgY2hpbGRyZW46IF9qc3goSWNvbkJ1dHRvbiwgeyBvbkNsaWNrOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFN0YXJ0RGF0ZVRpbWUodW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgc2l6ZTogXCJzbWFsbFwiLCBjaGlsZHJlbjogX2pzeChCYWNrc3BhY2UsIHt9KSB9KSB9KSkgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgIH0gfSkgfSksIF9qc3goR3JpZCwgeyBpdGVtOiB0cnVlLCB4czogMTIsIHhsOiA2LCBjaGlsZHJlbjogX2pzeChUZXh0RmllbGQsIHsgc2l6ZTogXCJzbWFsbFwiLCB2YWx1ZTogZW5kRGF0ZVRpbWUgfHwgJycsIGhlbHBlclRleHQ6IFwiRW5kXCIsIG9uQ2hhbmdlOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldEVuZERhdGVUaW1lKFwiXCIuY29uY2F0KGV2ZW50LnRhcmdldC52YWx1ZSwgXCI6MDBcIikpO1xuICAgICAgICAgICAgICAgICAgICB9LCBmdWxsV2lkdGg6IHRydWUsIElucHV0UHJvcHM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZEFkb3JubWVudDogZW5kRGF0ZVRpbWUgJiYgZW5kRGF0ZVRpbWUubGVuZ3RoID4gMCA/IChfanN4KElucHV0QWRvcm5tZW50LCB7IHBvc2l0aW9uOiBcImVuZFwiLCBjaGlsZHJlbjogX2pzeChJY29uQnV0dG9uLCB7IG9uQ2xpY2s6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0RW5kRGF0ZVRpbWUodW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgc2l6ZTogXCJzbWFsbFwiLCBjaGlsZHJlbjogX2pzeChCYWNrc3BhY2UsIHt9KSB9KSB9KSkgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgIH0gfSkgfSldIH0pKTtcbn07XG5leHBvcnQgZGVmYXVsdCBEYXRlVGltZVJhbmdlRmlsdGVyRmllbGQ7XG4iLCJleHBvcnQgdmFyIG51bWJlclZhbGlkYXRvciA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiAhL15cXGQqJC8udGVzdCh2YWx1ZSkgPyAnVmFsdWUgbXVzdCBiZSBudW1lcmljIScgOiB1bmRlZmluZWQ7XG59O1xuZXhwb3J0IHZhciBib29sZWFuVmFsaWRhdG9yID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuICEvXih0cnVlfGZhbHNlKSQvLnRlc3QodmFsdWUpID8gJ1ZhbHVlIG11c3QgYmUgdHJ1ZSBvciBmYWxzZSEnIDogdW5kZWZpbmVkO1xufTtcbmV4cG9ydCB2YXIgbnVtYmVyUmFuZ2VWYWxpZGF0b3IgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gIS9eWzAtOV0qXFxzKi17MCwxfVxccypbMC05XSokLy50ZXN0KHZhbHVlKSA/ICdWYWx1ZSBtdXN0IGJlIG51bWVyaWMgb3IgYSByYW5nZSEnIDogdW5kZWZpbmVkO1xufTtcbmV4cG9ydCB2YXIgZGF0ZXRpbWVSYW5nZVZhbGlkYXRvciA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiAhL14oXFxkezR9LVxcZHsyfS1cXGR7Mn0oKFxcc3xUKVxcZHsyfTpcXGR7Mn06XFxkezJ9KT8pezAsMX1cXHMqLXswLDF9XFxzKihcXGR7NH0tXFxkezJ9LVxcZHsyfSgoXFxzfFQpXFxkezJ9OlxcZHsyfTpcXGR7Mn0pPyl7MCwxfSQvLnRlc3QodmFsdWUpXG4gICAgICAgID8gJ1ZhbHVlIG11c3QgYmUgYSBkYXRlKHRpbWUpIG9yIHJhbmdlISdcbiAgICAgICAgOiB1bmRlZmluZWQ7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cInVzZSBjbGllbnRcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIF9jcmVhdGVTdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVTdmdJY29uXCIpKTtcbnZhciBfanN4UnVudGltZSA9IHJlcXVpcmUoXCJyZWFjdC9qc3gtcnVudGltZVwiKTtcbnZhciBfZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdCA9ICgwLCBfY3JlYXRlU3ZnSWNvbi5kZWZhdWx0KSggLyojX19QVVJFX18qLygwLCBfanN4UnVudGltZS5qc3gpKFwicGF0aFwiLCB7XG4gIGQ6IFwibTEyIDgtNiA2IDEuNDEgMS40MUwxMiAxMC44M2w0LjU5IDQuNThMMTggMTR6XCJcbn0pLCAnRXhwYW5kTGVzcycpOyIsIlwidXNlIHN0cmljdFwiO1xuXCJ1c2UgY2xpZW50XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBfY3JlYXRlU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlU3ZnSWNvblwiKSk7XG52YXIgX2pzeFJ1bnRpbWUgPSByZXF1aXJlKFwicmVhY3QvanN4LXJ1bnRpbWVcIik7XG52YXIgX2RlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQgPSAoMCwgX2NyZWF0ZVN2Z0ljb24uZGVmYXVsdCkoIC8qI19fUFVSRV9fKi8oMCwgX2pzeFJ1bnRpbWUuanN4KShcInBhdGhcIiwge1xuICBkOiBcIk0xNi41OSA4LjU5IDEyIDEzLjE3IDcuNDEgOC41OSA2IDEwbDYgNiA2LTZ6XCJcbn0pLCAnRXhwYW5kTW9yZScpOyIsImltcG9ydCB7IGpzeCBhcyBfanN4LCBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBCb3gsIEljb25CdXR0b24gfSBmcm9tICdAbXVpL21hdGVyaWFsJztcbmltcG9ydCBFeHBhbmRMZXNzIGZyb20gJ0BtdWkvaWNvbnMtbWF0ZXJpYWwvRXhwYW5kTGVzcyc7XG5pbXBvcnQgRXhwYW5kTW9yZSBmcm9tICdAbXVpL2ljb25zLW1hdGVyaWFsL0V4cGFuZE1vcmUnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbnZhciBmb3JtYXRTaW5nbGVNZXRhZGF0YSA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiBcIlwiLmNvbmNhdChrZXksIFwiOiBcIikuY29uY2F0KHZhbHVlKTtcbiAgICByZXR1cm4gJyc7XG59O1xudmFyIE1ldGFkYXRhID0gZnVuY3Rpb24gKF9hKSB7XG4gICAgdmFyIG1ldGFkYXRhID0gX2EubWV0YWRhdGEsIG9wZW4gPSBfYS5vcGVuO1xuICAgIHZhciBtZXRhZGF0YUxpc3QgPSBvcGVuID8gT2JqZWN0LmVudHJpZXMobWV0YWRhdGEpIDogT2JqZWN0LmVudHJpZXMobWV0YWRhdGEpLnNsaWNlKDAsIDEpO1xuICAgIHJldHVybiAoX2pzeChCb3gsIHsgc3g6IHsgd2hpdGVTcGFjZTogJ3ByZS1saW5lJywgcGFkZGluZzogJzEwcHgnIH0sIGNoaWxkcmVuOiBtZXRhZGF0YUxpc3QubWFwKGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgdmFyIGtleSA9IF9hWzBdLCB2YWx1ZSA9IF9hWzFdO1xuICAgICAgICAgICAgcmV0dXJuIGZvcm1hdFNpbmdsZU1ldGFkYXRhKGtleSwgdmFsdWUpO1xuICAgICAgICB9KS5qb2luKCdcXG4nKSB9KSk7XG59O1xuZXhwb3J0IHZhciBMaXN0TWV0YWRhdGEgPSBmdW5jdGlvbiAoX2EpIHtcbiAgICB2YXIgbWV0YWRhdGEgPSBfYS5tZXRhZGF0YTtcbiAgICB2YXIgX2IgPSBSZWFjdC51c2VTdGF0ZShmYWxzZSksIG9wZW4gPSBfYlswXSwgc2V0T3BlbiA9IF9iWzFdO1xuICAgIHZhciBoYW5kbGVDbGljayA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgc2V0T3Blbighb3Blbik7XG4gICAgfTtcbiAgICByZXR1cm4gKF9qc3hzKEJveCwgeyBzeDogeyBkaXNwbGF5OiAnZmxleCcsIGZsZXhEaXJlY3Rpb246ICdyb3cnLCBhbGlnbkl0ZW1zOiAnZmxleC1zdGFydCcgfSwgY2hpbGRyZW46IFtfanN4KEljb25CdXR0b24sIHsgb25DbGljazogaGFuZGxlQ2xpY2ssIGNoaWxkcmVuOiBvcGVuID8gX2pzeChFeHBhbmRMZXNzLCB7fSkgOiBfanN4KEV4cGFuZE1vcmUsIHt9KSB9KSwgX2pzeChNZXRhZGF0YSwgeyBvcGVuOiBvcGVuLCBtZXRhZGF0YTogbWV0YWRhdGEgfSldIH0pKTtcbn07XG4iLCJpbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsgTGlzdE1ldGFkYXRhIH0gZnJvbSAnLi9MaXN0TWV0YWRhdGEnO1xuLy8gVE9ETyBhZGQgdHlwaW5ncyBmb3IgYWxsIHRoZSBmb3JtYXR0ZXJzIHNvIHRoYXQgb25seSB2YWxpZCBrZXlzIGFyZSBwYXNzZWRcbmV4cG9ydCB2YXIgZm9ybWF0TnVtYmVyUmFuZ2VGaWx0ZXIgPSBmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgIHZhciB0cmltbWVkID0gdmFsdWUudHJpbSgpO1xuICAgIHZhciByZXN1bHQgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKCk7XG4gICAgaWYgKCF0cmltbWVkKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIHZhciByYW5nZVNlcGFyYXRvckluZGV4ID0gdHJpbW1lZC5pbmRleE9mKCctJyk7XG4gICAgdmFyIGtleVN0ciA9IFN0cmluZyhrZXkpO1xuICAgIGlmIChyYW5nZVNlcGFyYXRvckluZGV4ID49IDApIHtcbiAgICAgICAgdmFyIHBhcnRzID0gdHJpbW1lZC5zcGxpdCgnLScsIDIpO1xuICAgICAgICB2YXIgc3RhcnQgPSBwYXJ0c1swXS50cmltKCk7XG4gICAgICAgIHZhciBlbmQgPSBwYXJ0c1sxXS50cmltKCk7XG4gICAgICAgIGlmIChzdGFydCkge1xuICAgICAgICAgICAgcmVzdWx0LmFwcGVuZChcIlwiLmNvbmNhdChrZXlTdHIsIFwiLm1pblwiKSwgc3RhcnQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbmQpIHtcbiAgICAgICAgICAgIHJlc3VsdC5hcHBlbmQoXCJcIi5jb25jYXQoa2V5U3RyLCBcIi5tYXhcIiksIGVuZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgcmVzdWx0LmFwcGVuZChcIlwiLmNvbmNhdChrZXlTdHIsIFwiLm1pblwiKSwgdHJpbW1lZCk7XG4gICAgcmVzdWx0LmFwcGVuZChcIlwiLmNvbmNhdChrZXlTdHIsIFwiLm1heFwiKSwgdHJpbW1lZCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgZGF0ZXRpbWVQYXR0ZXJuID0gL1xcZHs0fS1cXGR7Mn0tXFxkezJ9KChcXHN8VClcXGR7Mn06XFxkezJ9OlxcZHsyfSk/L2c7XG5leHBvcnQgdmFyIGZvcm1hdERhdGV0aW1lUmFuZ2VGaWx0ZXIgPSBmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgIHZhciBmb3JtYXRNaW4gPSBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuICh2YWx1ZS5sZW5ndGggPiAxMCA/IHZhbHVlIDogXCJcIi5jb25jYXQodmFsdWUsIFwiIDAwOjAwOjAwXCIpKTsgfTtcbiAgICB2YXIgZm9ybWF0TWF4ID0gZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiAodmFsdWUubGVuZ3RoID4gMTAgPyB2YWx1ZSA6IFwiXCIuY29uY2F0KHZhbHVlLCBcIiAyMzo1OTo1OVwiKSk7IH07XG4gICAgdmFyIHRyaW1tZWQgPSB2YWx1ZS50cmltKCk7XG4gICAgdmFyIHJlc3VsdCA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKTtcbiAgICBpZiAoIXRyaW1tZWQpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgdmFyIGlzU3RhcnRPbmx5ID0gdHJpbW1lZC5jaGFyQXQodHJpbW1lZC5sZW5ndGggLSAxKSA9PT0gJy0nO1xuICAgIHZhciBpc0VuZE9ubHkgPSB0cmltbWVkLmluZGV4T2YoJy0nKSA9PT0gMDtcbiAgICB2YXIgbWF0Y2hlcyA9IHZhbHVlLm1hdGNoKGRhdGV0aW1lUGF0dGVybik7XG4gICAgaWYgKCFtYXRjaGVzIHx8IG1hdGNoZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIHZhciBrZXlTdHIgPSBTdHJpbmcoa2V5KTtcbiAgICBpZiAobWF0Y2hlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgaWYgKCFpc1N0YXJ0T25seSAmJiAhaXNFbmRPbmx5KSB7XG4gICAgICAgICAgICByZXN1bHQuYXBwZW5kKFwiXCIuY29uY2F0KGtleVN0ciwgXCIubWluXCIpLCBmb3JtYXRNaW4obWF0Y2hlc1swXSkpO1xuICAgICAgICAgICAgcmVzdWx0LmFwcGVuZChcIlwiLmNvbmNhdChrZXlTdHIsIFwiLm1heFwiKSwgZm9ybWF0TWF4KG1hdGNoZXNbMF0pKTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0LmFwcGVuZChcIlwiLmNvbmNhdChrZXlTdHIsIFwiLlwiKS5jb25jYXQoaXNFbmRPbmx5ID8gJ21heCcgOiAnbWluJyksIGlzRW5kT25seSA/IGZvcm1hdE1heChtYXRjaGVzWzBdKSA6IGZvcm1hdE1pbihtYXRjaGVzWzBdKSk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIHJlc3VsdC5hcHBlbmQoXCJcIi5jb25jYXQoa2V5U3RyLCBcIi5taW5cIiksIGZvcm1hdE1pbihtYXRjaGVzWzBdKSk7XG4gICAgcmVzdWx0LmFwcGVuZChcIlwiLmNvbmNhdChrZXlTdHIsIFwiLm1heFwiKSwgZm9ybWF0TWF4KG1hdGNoZXNbMV0pKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbmV4cG9ydCB2YXIgZm9ybWF0RGF0ZVRpbWUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUuc2xpY2UoMCwgdmFsdWUuaW5kZXhPZignLicpKS5yZXBsYWNlKCdUJywgJyAnKTtcbn07XG5leHBvcnQgdmFyIGZvcm1hdE1ldGFkYXRhID0gZnVuY3Rpb24gKG1ldGFkYXRhKSB7XG4gICAgcmV0dXJuIF9qc3goTGlzdE1ldGFkYXRhLCB7IG1ldGFkYXRhOiBtZXRhZGF0YSB9KTtcbn07XG5leHBvcnQgdmFyIGdldFBhcmFtZXRlclZhbHVlRm9ybWF0dGVycyA9IGZ1bmN0aW9uIChkZWZpbml0aW9ucykge1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBkZWZpbml0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChkZWZpbml0aW9uKSB7XG4gICAgICAgIGlmIChkZWZpbml0aW9uLnBhcmFtVmFsdWVGb3JtYXR0ZXIpIHtcbiAgICAgICAgICAgIHJlc3VsdFtkZWZpbml0aW9uLmZpbHRlcktleV0gPSBkZWZpbml0aW9uLnBhcmFtVmFsdWVGb3JtYXR0ZXI7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbiIsImZ1bmN0aW9uIG4obil7Zm9yKHZhciByPWFyZ3VtZW50cy5sZW5ndGgsdD1BcnJheShyPjE/ci0xOjApLGU9MTtlPHI7ZSsrKXRbZS0xXT1hcmd1bWVudHNbZV07aWYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVil7dmFyIGk9WVtuXSxvPWk/XCJmdW5jdGlvblwiPT10eXBlb2YgaT9pLmFwcGx5KG51bGwsdCk6aTpcInVua25vd24gZXJyb3IgbnI6IFwiK247dGhyb3cgRXJyb3IoXCJbSW1tZXJdIFwiK28pfXRocm93IEVycm9yKFwiW0ltbWVyXSBtaW5pZmllZCBlcnJvciBucjogXCIrbisodC5sZW5ndGg/XCIgXCIrdC5tYXAoKGZ1bmN0aW9uKG4pe3JldHVyblwiJ1wiK24rXCInXCJ9KSkuam9pbihcIixcIik6XCJcIikrXCIuIEZpbmQgdGhlIGZ1bGwgZXJyb3IgYXQ6IGh0dHBzOi8vYml0Lmx5LzNjWEVLV2ZcIil9ZnVuY3Rpb24gcihuKXtyZXR1cm4hIW4mJiEhbltRXX1mdW5jdGlvbiB0KG4pe3ZhciByO3JldHVybiEhbiYmKGZ1bmN0aW9uKG4pe2lmKCFufHxcIm9iamVjdFwiIT10eXBlb2YgbilyZXR1cm4hMTt2YXIgcj1PYmplY3QuZ2V0UHJvdG90eXBlT2Yobik7aWYobnVsbD09PXIpcmV0dXJuITA7dmFyIHQ9T2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwocixcImNvbnN0cnVjdG9yXCIpJiZyLmNvbnN0cnVjdG9yO3JldHVybiB0PT09T2JqZWN0fHxcImZ1bmN0aW9uXCI9PXR5cGVvZiB0JiZGdW5jdGlvbi50b1N0cmluZy5jYWxsKHQpPT09Wn0obil8fEFycmF5LmlzQXJyYXkobil8fCEhbltMXXx8ISEobnVsbD09PShyPW4uY29uc3RydWN0b3IpfHx2b2lkIDA9PT1yP3ZvaWQgMDpyW0xdKXx8cyhuKXx8dihuKSl9ZnVuY3Rpb24gZSh0KXtyZXR1cm4gcih0KXx8bigyMyx0KSx0W1FdLnR9ZnVuY3Rpb24gaShuLHIsdCl7dm9pZCAwPT09dCYmKHQ9ITEpLDA9PT1vKG4pPyh0P09iamVjdC5rZXlzOm5uKShuKS5mb3JFYWNoKChmdW5jdGlvbihlKXt0JiZcInN5bWJvbFwiPT10eXBlb2YgZXx8cihlLG5bZV0sbil9KSk6bi5mb3JFYWNoKChmdW5jdGlvbih0LGUpe3JldHVybiByKGUsdCxuKX0pKX1mdW5jdGlvbiBvKG4pe3ZhciByPW5bUV07cmV0dXJuIHI/ci5pPjM/ci5pLTQ6ci5pOkFycmF5LmlzQXJyYXkobik/MTpzKG4pPzI6dihuKT8zOjB9ZnVuY3Rpb24gdShuLHIpe3JldHVybiAyPT09byhuKT9uLmhhcyhyKTpPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobixyKX1mdW5jdGlvbiBhKG4scil7cmV0dXJuIDI9PT1vKG4pP24uZ2V0KHIpOm5bcl19ZnVuY3Rpb24gZihuLHIsdCl7dmFyIGU9byhuKTsyPT09ZT9uLnNldChyLHQpOjM9PT1lP24uYWRkKHQpOm5bcl09dH1mdW5jdGlvbiBjKG4scil7cmV0dXJuIG49PT1yPzAhPT1ufHwxL249PTEvcjpuIT1uJiZyIT1yfWZ1bmN0aW9uIHMobil7cmV0dXJuIFgmJm4gaW5zdGFuY2VvZiBNYXB9ZnVuY3Rpb24gdihuKXtyZXR1cm4gcSYmbiBpbnN0YW5jZW9mIFNldH1mdW5jdGlvbiBwKG4pe3JldHVybiBuLm98fG4udH1mdW5jdGlvbiBsKG4pe2lmKEFycmF5LmlzQXJyYXkobikpcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKG4pO3ZhciByPXJuKG4pO2RlbGV0ZSByW1FdO2Zvcih2YXIgdD1ubihyKSxlPTA7ZTx0Lmxlbmd0aDtlKyspe3ZhciBpPXRbZV0sbz1yW2ldOyExPT09by53cml0YWJsZSYmKG8ud3JpdGFibGU9ITAsby5jb25maWd1cmFibGU9ITApLChvLmdldHx8by5zZXQpJiYocltpXT17Y29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwLGVudW1lcmFibGU6by5lbnVtZXJhYmxlLHZhbHVlOm5baV19KX1yZXR1cm4gT2JqZWN0LmNyZWF0ZShPYmplY3QuZ2V0UHJvdG90eXBlT2Yobikscil9ZnVuY3Rpb24gZChuLGUpe3JldHVybiB2b2lkIDA9PT1lJiYoZT0hMSkseShuKXx8cihuKXx8IXQobil8fChvKG4pPjEmJihuLnNldD1uLmFkZD1uLmNsZWFyPW4uZGVsZXRlPWgpLE9iamVjdC5mcmVlemUobiksZSYmaShuLChmdW5jdGlvbihuLHIpe3JldHVybiBkKHIsITApfSksITApKSxufWZ1bmN0aW9uIGgoKXtuKDIpfWZ1bmN0aW9uIHkobil7cmV0dXJuIG51bGw9PW58fFwib2JqZWN0XCIhPXR5cGVvZiBufHxPYmplY3QuaXNGcm96ZW4obil9ZnVuY3Rpb24gYihyKXt2YXIgdD10bltyXTtyZXR1cm4gdHx8bigxOCxyKSx0fWZ1bmN0aW9uIG0obixyKXt0bltuXXx8KHRuW25dPXIpfWZ1bmN0aW9uIF8oKXtyZXR1cm5cInByb2R1Y3Rpb25cIj09PXByb2Nlc3MuZW52Lk5PREVfRU5WfHxVfHxuKDApLFV9ZnVuY3Rpb24gaihuLHIpe3ImJihiKFwiUGF0Y2hlc1wiKSxuLnU9W10sbi5zPVtdLG4udj1yKX1mdW5jdGlvbiBnKG4pe08obiksbi5wLmZvckVhY2goUyksbi5wPW51bGx9ZnVuY3Rpb24gTyhuKXtuPT09VSYmKFU9bi5sKX1mdW5jdGlvbiB3KG4pe3JldHVybiBVPXtwOltdLGw6VSxoOm4sbTohMCxfOjB9fWZ1bmN0aW9uIFMobil7dmFyIHI9bltRXTswPT09ci5pfHwxPT09ci5pP3IuaigpOnIuZz0hMH1mdW5jdGlvbiBQKHIsZSl7ZS5fPWUucC5sZW5ndGg7dmFyIGk9ZS5wWzBdLG89dm9pZCAwIT09ciYmciE9PWk7cmV0dXJuIGUuaC5PfHxiKFwiRVM1XCIpLlMoZSxyLG8pLG8/KGlbUV0uUCYmKGcoZSksbig0KSksdChyKSYmKHI9TShlLHIpLGUubHx8eChlLHIpKSxlLnUmJmIoXCJQYXRjaGVzXCIpLk0oaVtRXS50LHIsZS51LGUucykpOnI9TShlLGksW10pLGcoZSksZS51JiZlLnYoZS51LGUucyksciE9PUg/cjp2b2lkIDB9ZnVuY3Rpb24gTShuLHIsdCl7aWYoeShyKSlyZXR1cm4gcjt2YXIgZT1yW1FdO2lmKCFlKXJldHVybiBpKHIsKGZ1bmN0aW9uKGksbyl7cmV0dXJuIEEobixlLHIsaSxvLHQpfSksITApLHI7aWYoZS5BIT09bilyZXR1cm4gcjtpZighZS5QKXJldHVybiB4KG4sZS50LCEwKSxlLnQ7aWYoIWUuSSl7ZS5JPSEwLGUuQS5fLS07dmFyIG89ND09PWUuaXx8NT09PWUuaT9lLm89bChlLmspOmUubyx1PW8sYT0hMTszPT09ZS5pJiYodT1uZXcgU2V0KG8pLG8uY2xlYXIoKSxhPSEwKSxpKHUsKGZ1bmN0aW9uKHIsaSl7cmV0dXJuIEEobixlLG8scixpLHQsYSl9KSkseChuLG8sITEpLHQmJm4udSYmYihcIlBhdGNoZXNcIikuTihlLHQsbi51LG4ucyl9cmV0dXJuIGUub31mdW5jdGlvbiBBKGUsaSxvLGEsYyxzLHYpe2lmKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJmM9PT1vJiZuKDUpLHIoYykpe3ZhciBwPU0oZSxjLHMmJmkmJjMhPT1pLmkmJiF1KGkuUixhKT9zLmNvbmNhdChhKTp2b2lkIDApO2lmKGYobyxhLHApLCFyKHApKXJldHVybjtlLm09ITF9ZWxzZSB2JiZvLmFkZChjKTtpZih0KGMpJiYheShjKSl7aWYoIWUuaC5EJiZlLl88MSlyZXR1cm47TShlLGMpLGkmJmkuQS5sfHx4KGUsYyl9fWZ1bmN0aW9uIHgobixyLHQpe3ZvaWQgMD09PXQmJih0PSExKSwhbi5sJiZuLmguRCYmbi5tJiZkKHIsdCl9ZnVuY3Rpb24geihuLHIpe3ZhciB0PW5bUV07cmV0dXJuKHQ/cCh0KTpuKVtyXX1mdW5jdGlvbiBJKG4scil7aWYociBpbiBuKWZvcih2YXIgdD1PYmplY3QuZ2V0UHJvdG90eXBlT2Yobik7dDspe3ZhciBlPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodCxyKTtpZihlKXJldHVybiBlO3Q9T2JqZWN0LmdldFByb3RvdHlwZU9mKHQpfX1mdW5jdGlvbiBrKG4pe24uUHx8KG4uUD0hMCxuLmwmJmsobi5sKSl9ZnVuY3Rpb24gRShuKXtuLm98fChuLm89bChuLnQpKX1mdW5jdGlvbiBOKG4scix0KXt2YXIgZT1zKHIpP2IoXCJNYXBTZXRcIikuRihyLHQpOnYocik/YihcIk1hcFNldFwiKS5UKHIsdCk6bi5PP2Z1bmN0aW9uKG4scil7dmFyIHQ9QXJyYXkuaXNBcnJheShuKSxlPXtpOnQ/MTowLEE6cj9yLkE6XygpLFA6ITEsSTohMSxSOnt9LGw6cix0Om4sazpudWxsLG86bnVsbCxqOm51bGwsQzohMX0saT1lLG89ZW47dCYmKGk9W2VdLG89b24pO3ZhciB1PVByb3h5LnJldm9jYWJsZShpLG8pLGE9dS5yZXZva2UsZj11LnByb3h5O3JldHVybiBlLms9ZixlLmo9YSxmfShyLHQpOmIoXCJFUzVcIikuSihyLHQpO3JldHVybih0P3QuQTpfKCkpLnAucHVzaChlKSxlfWZ1bmN0aW9uIFIoZSl7cmV0dXJuIHIoZSl8fG4oMjIsZSksZnVuY3Rpb24gbihyKXtpZighdChyKSlyZXR1cm4gcjt2YXIgZSx1PXJbUV0sYz1vKHIpO2lmKHUpe2lmKCF1LlAmJih1Lmk8NHx8IWIoXCJFUzVcIikuSyh1KSkpcmV0dXJuIHUudDt1Lkk9ITAsZT1EKHIsYyksdS5JPSExfWVsc2UgZT1EKHIsYyk7cmV0dXJuIGkoZSwoZnVuY3Rpb24ocix0KXt1JiZhKHUudCxyKT09PXR8fGYoZSxyLG4odCkpfSkpLDM9PT1jP25ldyBTZXQoZSk6ZX0oZSl9ZnVuY3Rpb24gRChuLHIpe3N3aXRjaChyKXtjYXNlIDI6cmV0dXJuIG5ldyBNYXAobik7Y2FzZSAzOnJldHVybiBBcnJheS5mcm9tKG4pfXJldHVybiBsKG4pfWZ1bmN0aW9uIEYoKXtmdW5jdGlvbiB0KG4scil7dmFyIHQ9c1tuXTtyZXR1cm4gdD90LmVudW1lcmFibGU9cjpzW25dPXQ9e2NvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOnIsZ2V0OmZ1bmN0aW9uKCl7dmFyIHI9dGhpc1tRXTtyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZmKHIpLGVuLmdldChyLG4pfSxzZXQ6ZnVuY3Rpb24ocil7dmFyIHQ9dGhpc1tRXTtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZmKHQpLGVuLnNldCh0LG4scil9fSx0fWZ1bmN0aW9uIGUobil7Zm9yKHZhciByPW4ubGVuZ3RoLTE7cj49MDtyLS0pe3ZhciB0PW5bcl1bUV07aWYoIXQuUClzd2l0Y2godC5pKXtjYXNlIDU6YSh0KSYmayh0KTticmVhaztjYXNlIDQ6byh0KSYmayh0KX19fWZ1bmN0aW9uIG8obil7Zm9yKHZhciByPW4udCx0PW4uayxlPW5uKHQpLGk9ZS5sZW5ndGgtMTtpPj0wO2ktLSl7dmFyIG89ZVtpXTtpZihvIT09USl7dmFyIGE9cltvXTtpZih2b2lkIDA9PT1hJiYhdShyLG8pKXJldHVybiEwO3ZhciBmPXRbb10scz1mJiZmW1FdO2lmKHM/cy50IT09YTohYyhmLGEpKXJldHVybiEwfX12YXIgdj0hIXJbUV07cmV0dXJuIGUubGVuZ3RoIT09bm4ocikubGVuZ3RoKyh2PzA6MSl9ZnVuY3Rpb24gYShuKXt2YXIgcj1uLms7aWYoci5sZW5ndGghPT1uLnQubGVuZ3RoKXJldHVybiEwO3ZhciB0PU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocixyLmxlbmd0aC0xKTtpZih0JiYhdC5nZXQpcmV0dXJuITA7Zm9yKHZhciBlPTA7ZTxyLmxlbmd0aDtlKyspaWYoIXIuaGFzT3duUHJvcGVydHkoZSkpcmV0dXJuITA7cmV0dXJuITF9ZnVuY3Rpb24gZihyKXtyLmcmJm4oMyxKU09OLnN0cmluZ2lmeShwKHIpKSl9dmFyIHM9e307bShcIkVTNVwiLHtKOmZ1bmN0aW9uKG4scil7dmFyIGU9QXJyYXkuaXNBcnJheShuKSxpPWZ1bmN0aW9uKG4scil7aWYobil7Zm9yKHZhciBlPUFycmF5KHIubGVuZ3RoKSxpPTA7aTxyLmxlbmd0aDtpKyspT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJcIitpLHQoaSwhMCkpO3JldHVybiBlfXZhciBvPXJuKHIpO2RlbGV0ZSBvW1FdO2Zvcih2YXIgdT1ubihvKSxhPTA7YTx1Lmxlbmd0aDthKyspe3ZhciBmPXVbYV07b1tmXT10KGYsbnx8ISFvW2ZdLmVudW1lcmFibGUpfXJldHVybiBPYmplY3QuY3JlYXRlKE9iamVjdC5nZXRQcm90b3R5cGVPZihyKSxvKX0oZSxuKSxvPXtpOmU/NTo0LEE6cj9yLkE6XygpLFA6ITEsSTohMSxSOnt9LGw6cix0Om4sazppLG86bnVsbCxnOiExLEM6ITF9O3JldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoaSxRLHt2YWx1ZTpvLHdyaXRhYmxlOiEwfSksaX0sUzpmdW5jdGlvbihuLHQsbyl7bz9yKHQpJiZ0W1FdLkE9PT1uJiZlKG4ucCk6KG4udSYmZnVuY3Rpb24gbihyKXtpZihyJiZcIm9iamVjdFwiPT10eXBlb2Ygcil7dmFyIHQ9cltRXTtpZih0KXt2YXIgZT10LnQsbz10LmssZj10LlIsYz10Lmk7aWYoND09PWMpaShvLChmdW5jdGlvbihyKXtyIT09USYmKHZvaWQgMCE9PWVbcl18fHUoZSxyKT9mW3JdfHxuKG9bcl0pOihmW3JdPSEwLGsodCkpKX0pKSxpKGUsKGZ1bmN0aW9uKG4pe3ZvaWQgMCE9PW9bbl18fHUobyxuKXx8KGZbbl09ITEsayh0KSl9KSk7ZWxzZSBpZig1PT09Yyl7aWYoYSh0KSYmKGsodCksZi5sZW5ndGg9ITApLG8ubGVuZ3RoPGUubGVuZ3RoKWZvcih2YXIgcz1vLmxlbmd0aDtzPGUubGVuZ3RoO3MrKylmW3NdPSExO2Vsc2UgZm9yKHZhciB2PWUubGVuZ3RoO3Y8by5sZW5ndGg7disrKWZbdl09ITA7Zm9yKHZhciBwPU1hdGgubWluKG8ubGVuZ3RoLGUubGVuZ3RoKSxsPTA7bDxwO2wrKylvLmhhc093blByb3BlcnR5KGwpfHwoZltsXT0hMCksdm9pZCAwPT09ZltsXSYmbihvW2xdKX19fX0obi5wWzBdKSxlKG4ucCkpfSxLOmZ1bmN0aW9uKG4pe3JldHVybiA0PT09bi5pP28obik6YShuKX19KX1mdW5jdGlvbiBUKCl7ZnVuY3Rpb24gZShuKXtpZighdChuKSlyZXR1cm4gbjtpZihBcnJheS5pc0FycmF5KG4pKXJldHVybiBuLm1hcChlKTtpZihzKG4pKXJldHVybiBuZXcgTWFwKEFycmF5LmZyb20obi5lbnRyaWVzKCkpLm1hcCgoZnVuY3Rpb24obil7cmV0dXJuW25bMF0sZShuWzFdKV19KSkpO2lmKHYobikpcmV0dXJuIG5ldyBTZXQoQXJyYXkuZnJvbShuKS5tYXAoZSkpO3ZhciByPU9iamVjdC5jcmVhdGUoT2JqZWN0LmdldFByb3RvdHlwZU9mKG4pKTtmb3IodmFyIGkgaW4gbilyW2ldPWUobltpXSk7cmV0dXJuIHUobixMKSYmKHJbTF09bltMXSkscn1mdW5jdGlvbiBmKG4pe3JldHVybiByKG4pP2Uobik6bn12YXIgYz1cImFkZFwiO20oXCJQYXRjaGVzXCIseyQ6ZnVuY3Rpb24ocix0KXtyZXR1cm4gdC5mb3JFYWNoKChmdW5jdGlvbih0KXtmb3IodmFyIGk9dC5wYXRoLHU9dC5vcCxmPXIscz0wO3M8aS5sZW5ndGgtMTtzKyspe3ZhciB2PW8oZikscD1pW3NdO1wic3RyaW5nXCIhPXR5cGVvZiBwJiZcIm51bWJlclwiIT10eXBlb2YgcCYmKHA9XCJcIitwKSwwIT09diYmMSE9PXZ8fFwiX19wcm90b19fXCIhPT1wJiZcImNvbnN0cnVjdG9yXCIhPT1wfHxuKDI0KSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBmJiZcInByb3RvdHlwZVwiPT09cCYmbigyNCksXCJvYmplY3RcIiE9dHlwZW9mKGY9YShmLHApKSYmbigxNSxpLmpvaW4oXCIvXCIpKX12YXIgbD1vKGYpLGQ9ZSh0LnZhbHVlKSxoPWlbaS5sZW5ndGgtMV07c3dpdGNoKHUpe2Nhc2VcInJlcGxhY2VcIjpzd2l0Y2gobCl7Y2FzZSAyOnJldHVybiBmLnNldChoLGQpO2Nhc2UgMzpuKDE2KTtkZWZhdWx0OnJldHVybiBmW2hdPWR9Y2FzZSBjOnN3aXRjaChsKXtjYXNlIDE6cmV0dXJuXCItXCI9PT1oP2YucHVzaChkKTpmLnNwbGljZShoLDAsZCk7Y2FzZSAyOnJldHVybiBmLnNldChoLGQpO2Nhc2UgMzpyZXR1cm4gZi5hZGQoZCk7ZGVmYXVsdDpyZXR1cm4gZltoXT1kfWNhc2VcInJlbW92ZVwiOnN3aXRjaChsKXtjYXNlIDE6cmV0dXJuIGYuc3BsaWNlKGgsMSk7Y2FzZSAyOnJldHVybiBmLmRlbGV0ZShoKTtjYXNlIDM6cmV0dXJuIGYuZGVsZXRlKHQudmFsdWUpO2RlZmF1bHQ6cmV0dXJuIGRlbGV0ZSBmW2hdfWRlZmF1bHQ6bigxNyx1KX19KSkscn0sTjpmdW5jdGlvbihuLHIsdCxlKXtzd2l0Y2gobi5pKXtjYXNlIDA6Y2FzZSA0OmNhc2UgMjpyZXR1cm4gZnVuY3Rpb24obixyLHQsZSl7dmFyIG89bi50LHM9bi5vO2kobi5SLChmdW5jdGlvbihuLGkpe3ZhciB2PWEobyxuKSxwPWEocyxuKSxsPWk/dShvLG4pP1wicmVwbGFjZVwiOmM6XCJyZW1vdmVcIjtpZih2IT09cHx8XCJyZXBsYWNlXCIhPT1sKXt2YXIgZD1yLmNvbmNhdChuKTt0LnB1c2goXCJyZW1vdmVcIj09PWw/e29wOmwscGF0aDpkfTp7b3A6bCxwYXRoOmQsdmFsdWU6cH0pLGUucHVzaChsPT09Yz97b3A6XCJyZW1vdmVcIixwYXRoOmR9OlwicmVtb3ZlXCI9PT1sP3tvcDpjLHBhdGg6ZCx2YWx1ZTpmKHYpfTp7b3A6XCJyZXBsYWNlXCIscGF0aDpkLHZhbHVlOmYodil9KX19KSl9KG4scix0LGUpO2Nhc2UgNTpjYXNlIDE6cmV0dXJuIGZ1bmN0aW9uKG4scix0LGUpe3ZhciBpPW4udCxvPW4uUix1PW4ubztpZih1Lmxlbmd0aDxpLmxlbmd0aCl7dmFyIGE9W3UsaV07aT1hWzBdLHU9YVsxXTt2YXIgcz1bZSx0XTt0PXNbMF0sZT1zWzFdfWZvcih2YXIgdj0wO3Y8aS5sZW5ndGg7disrKWlmKG9bdl0mJnVbdl0hPT1pW3ZdKXt2YXIgcD1yLmNvbmNhdChbdl0pO3QucHVzaCh7b3A6XCJyZXBsYWNlXCIscGF0aDpwLHZhbHVlOmYodVt2XSl9KSxlLnB1c2goe29wOlwicmVwbGFjZVwiLHBhdGg6cCx2YWx1ZTpmKGlbdl0pfSl9Zm9yKHZhciBsPWkubGVuZ3RoO2w8dS5sZW5ndGg7bCsrKXt2YXIgZD1yLmNvbmNhdChbbF0pO3QucHVzaCh7b3A6YyxwYXRoOmQsdmFsdWU6Zih1W2xdKX0pfWkubGVuZ3RoPHUubGVuZ3RoJiZlLnB1c2goe29wOlwicmVwbGFjZVwiLHBhdGg6ci5jb25jYXQoW1wibGVuZ3RoXCJdKSx2YWx1ZTppLmxlbmd0aH0pfShuLHIsdCxlKTtjYXNlIDM6cmV0dXJuIGZ1bmN0aW9uKG4scix0LGUpe3ZhciBpPW4udCxvPW4ubyx1PTA7aS5mb3JFYWNoKChmdW5jdGlvbihuKXtpZighby5oYXMobikpe3ZhciBpPXIuY29uY2F0KFt1XSk7dC5wdXNoKHtvcDpcInJlbW92ZVwiLHBhdGg6aSx2YWx1ZTpufSksZS51bnNoaWZ0KHtvcDpjLHBhdGg6aSx2YWx1ZTpufSl9dSsrfSkpLHU9MCxvLmZvckVhY2goKGZ1bmN0aW9uKG4pe2lmKCFpLmhhcyhuKSl7dmFyIG89ci5jb25jYXQoW3VdKTt0LnB1c2goe29wOmMscGF0aDpvLHZhbHVlOm59KSxlLnVuc2hpZnQoe29wOlwicmVtb3ZlXCIscGF0aDpvLHZhbHVlOm59KX11Kyt9KSl9KG4scix0LGUpfX0sTTpmdW5jdGlvbihuLHIsdCxlKXt0LnB1c2goe29wOlwicmVwbGFjZVwiLHBhdGg6W10sdmFsdWU6cj09PUg/dm9pZCAwOnJ9KSxlLnB1c2goe29wOlwicmVwbGFjZVwiLHBhdGg6W10sdmFsdWU6bn0pfX0pfWZ1bmN0aW9uIEMoKXtmdW5jdGlvbiByKG4scil7ZnVuY3Rpb24gdCgpe3RoaXMuY29uc3RydWN0b3I9bn1hKG4sciksbi5wcm90b3R5cGU9KHQucHJvdG90eXBlPXIucHJvdG90eXBlLG5ldyB0KX1mdW5jdGlvbiBlKG4pe24ub3x8KG4uUj1uZXcgTWFwLG4ubz1uZXcgTWFwKG4udCkpfWZ1bmN0aW9uIG8obil7bi5vfHwobi5vPW5ldyBTZXQsbi50LmZvckVhY2goKGZ1bmN0aW9uKHIpe2lmKHQocikpe3ZhciBlPU4obi5BLmgscixuKTtuLnAuc2V0KHIsZSksbi5vLmFkZChlKX1lbHNlIG4uby5hZGQocil9KSkpfWZ1bmN0aW9uIHUocil7ci5nJiZuKDMsSlNPTi5zdHJpbmdpZnkocChyKSkpfXZhciBhPWZ1bmN0aW9uKG4scil7cmV0dXJuKGE9T2JqZWN0LnNldFByb3RvdHlwZU9mfHx7X19wcm90b19fOltdfWluc3RhbmNlb2YgQXJyYXkmJmZ1bmN0aW9uKG4scil7bi5fX3Byb3RvX189cn18fGZ1bmN0aW9uKG4scil7Zm9yKHZhciB0IGluIHIpci5oYXNPd25Qcm9wZXJ0eSh0KSYmKG5bdF09clt0XSl9KShuLHIpfSxmPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gbihuLHIpe3JldHVybiB0aGlzW1FdPXtpOjIsbDpyLEE6cj9yLkE6XygpLFA6ITEsSTohMSxvOnZvaWQgMCxSOnZvaWQgMCx0Om4sazp0aGlzLEM6ITEsZzohMX0sdGhpc31yKG4sTWFwKTt2YXIgbz1uLnByb3RvdHlwZTtyZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sXCJzaXplXCIse2dldDpmdW5jdGlvbigpe3JldHVybiBwKHRoaXNbUV0pLnNpemV9fSksby5oYXM9ZnVuY3Rpb24obil7cmV0dXJuIHAodGhpc1tRXSkuaGFzKG4pfSxvLnNldD1mdW5jdGlvbihuLHIpe3ZhciB0PXRoaXNbUV07cmV0dXJuIHUodCkscCh0KS5oYXMobikmJnAodCkuZ2V0KG4pPT09cnx8KGUodCksayh0KSx0LlIuc2V0KG4sITApLHQuby5zZXQobixyKSx0LlIuc2V0KG4sITApKSx0aGlzfSxvLmRlbGV0ZT1mdW5jdGlvbihuKXtpZighdGhpcy5oYXMobikpcmV0dXJuITE7dmFyIHI9dGhpc1tRXTtyZXR1cm4gdShyKSxlKHIpLGsociksci50LmhhcyhuKT9yLlIuc2V0KG4sITEpOnIuUi5kZWxldGUobiksci5vLmRlbGV0ZShuKSwhMH0sby5jbGVhcj1mdW5jdGlvbigpe3ZhciBuPXRoaXNbUV07dShuKSxwKG4pLnNpemUmJihlKG4pLGsobiksbi5SPW5ldyBNYXAsaShuLnQsKGZ1bmN0aW9uKHIpe24uUi5zZXQociwhMSl9KSksbi5vLmNsZWFyKCkpfSxvLmZvckVhY2g9ZnVuY3Rpb24obixyKXt2YXIgdD10aGlzO3AodGhpc1tRXSkuZm9yRWFjaCgoZnVuY3Rpb24oZSxpKXtuLmNhbGwocix0LmdldChpKSxpLHQpfSkpfSxvLmdldD1mdW5jdGlvbihuKXt2YXIgcj10aGlzW1FdO3Uocik7dmFyIGk9cChyKS5nZXQobik7aWYoci5JfHwhdChpKSlyZXR1cm4gaTtpZihpIT09ci50LmdldChuKSlyZXR1cm4gaTt2YXIgbz1OKHIuQS5oLGkscik7cmV0dXJuIGUociksci5vLnNldChuLG8pLG99LG8ua2V5cz1mdW5jdGlvbigpe3JldHVybiBwKHRoaXNbUV0pLmtleXMoKX0sby52YWx1ZXM9ZnVuY3Rpb24oKXt2YXIgbixyPXRoaXMsdD10aGlzLmtleXMoKTtyZXR1cm4obj17fSlbVl09ZnVuY3Rpb24oKXtyZXR1cm4gci52YWx1ZXMoKX0sbi5uZXh0PWZ1bmN0aW9uKCl7dmFyIG49dC5uZXh0KCk7cmV0dXJuIG4uZG9uZT9uOntkb25lOiExLHZhbHVlOnIuZ2V0KG4udmFsdWUpfX0sbn0sby5lbnRyaWVzPWZ1bmN0aW9uKCl7dmFyIG4scj10aGlzLHQ9dGhpcy5rZXlzKCk7cmV0dXJuKG49e30pW1ZdPWZ1bmN0aW9uKCl7cmV0dXJuIHIuZW50cmllcygpfSxuLm5leHQ9ZnVuY3Rpb24oKXt2YXIgbj10Lm5leHQoKTtpZihuLmRvbmUpcmV0dXJuIG47dmFyIGU9ci5nZXQobi52YWx1ZSk7cmV0dXJue2RvbmU6ITEsdmFsdWU6W24udmFsdWUsZV19fSxufSxvW1ZdPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZW50cmllcygpfSxufSgpLGM9ZnVuY3Rpb24oKXtmdW5jdGlvbiBuKG4scil7cmV0dXJuIHRoaXNbUV09e2k6MyxsOnIsQTpyP3IuQTpfKCksUDohMSxJOiExLG86dm9pZCAwLHQ6bixrOnRoaXMscDpuZXcgTWFwLGc6ITEsQzohMX0sdGhpc31yKG4sU2V0KTt2YXIgdD1uLnByb3RvdHlwZTtyZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJzaXplXCIse2dldDpmdW5jdGlvbigpe3JldHVybiBwKHRoaXNbUV0pLnNpemV9fSksdC5oYXM9ZnVuY3Rpb24obil7dmFyIHI9dGhpc1tRXTtyZXR1cm4gdShyKSxyLm8/ISFyLm8uaGFzKG4pfHwhKCFyLnAuaGFzKG4pfHwhci5vLmhhcyhyLnAuZ2V0KG4pKSk6ci50LmhhcyhuKX0sdC5hZGQ9ZnVuY3Rpb24obil7dmFyIHI9dGhpc1tRXTtyZXR1cm4gdShyKSx0aGlzLmhhcyhuKXx8KG8ociksayhyKSxyLm8uYWRkKG4pKSx0aGlzfSx0LmRlbGV0ZT1mdW5jdGlvbihuKXtpZighdGhpcy5oYXMobikpcmV0dXJuITE7dmFyIHI9dGhpc1tRXTtyZXR1cm4gdShyKSxvKHIpLGsociksci5vLmRlbGV0ZShuKXx8ISFyLnAuaGFzKG4pJiZyLm8uZGVsZXRlKHIucC5nZXQobikpfSx0LmNsZWFyPWZ1bmN0aW9uKCl7dmFyIG49dGhpc1tRXTt1KG4pLHAobikuc2l6ZSYmKG8obiksayhuKSxuLm8uY2xlYXIoKSl9LHQudmFsdWVzPWZ1bmN0aW9uKCl7dmFyIG49dGhpc1tRXTtyZXR1cm4gdShuKSxvKG4pLG4uby52YWx1ZXMoKX0sdC5lbnRyaWVzPWZ1bmN0aW9uKCl7dmFyIG49dGhpc1tRXTtyZXR1cm4gdShuKSxvKG4pLG4uby5lbnRyaWVzKCl9LHQua2V5cz1mdW5jdGlvbigpe3JldHVybiB0aGlzLnZhbHVlcygpfSx0W1ZdPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudmFsdWVzKCl9LHQuZm9yRWFjaD1mdW5jdGlvbihuLHIpe2Zvcih2YXIgdD10aGlzLnZhbHVlcygpLGU9dC5uZXh0KCk7IWUuZG9uZTspbi5jYWxsKHIsZS52YWx1ZSxlLnZhbHVlLHRoaXMpLGU9dC5uZXh0KCl9LG59KCk7bShcIk1hcFNldFwiLHtGOmZ1bmN0aW9uKG4scil7cmV0dXJuIG5ldyBmKG4scil9LFQ6ZnVuY3Rpb24obixyKXtyZXR1cm4gbmV3IGMobixyKX19KX1mdW5jdGlvbiBKKCl7RigpLEMoKSxUKCl9ZnVuY3Rpb24gSyhuKXtyZXR1cm4gbn1mdW5jdGlvbiAkKG4pe3JldHVybiBufXZhciBHLFUsVz1cInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sKFwieFwiKSxYPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBNYXAscT1cInVuZGVmaW5lZFwiIT10eXBlb2YgU2V0LEI9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFByb3h5JiZ2b2lkIDAhPT1Qcm94eS5yZXZvY2FibGUmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBSZWZsZWN0LEg9Vz9TeW1ib2wuZm9yKFwiaW1tZXItbm90aGluZ1wiKTooKEc9e30pW1wiaW1tZXItbm90aGluZ1wiXT0hMCxHKSxMPVc/U3ltYm9sLmZvcihcImltbWVyLWRyYWZ0YWJsZVwiKTpcIl9fJGltbWVyX2RyYWZ0YWJsZVwiLFE9Vz9TeW1ib2wuZm9yKFwiaW1tZXItc3RhdGVcIik6XCJfXyRpbW1lcl9zdGF0ZVwiLFY9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yfHxcIkBAaXRlcmF0b3JcIixZPXswOlwiSWxsZWdhbCBzdGF0ZVwiLDE6XCJJbW1lciBkcmFmdHMgY2Fubm90IGhhdmUgY29tcHV0ZWQgcHJvcGVydGllc1wiLDI6XCJUaGlzIG9iamVjdCBoYXMgYmVlbiBmcm96ZW4gYW5kIHNob3VsZCBub3QgYmUgbXV0YXRlZFwiLDM6ZnVuY3Rpb24obil7cmV0dXJuXCJDYW5ub3QgdXNlIGEgcHJveHkgdGhhdCBoYXMgYmVlbiByZXZva2VkLiBEaWQgeW91IHBhc3MgYW4gb2JqZWN0IGZyb20gaW5zaWRlIGFuIGltbWVyIGZ1bmN0aW9uIHRvIGFuIGFzeW5jIHByb2Nlc3M/IFwiK259LDQ6XCJBbiBpbW1lciBwcm9kdWNlciByZXR1cm5lZCBhIG5ldyB2YWx1ZSAqYW5kKiBtb2RpZmllZCBpdHMgZHJhZnQuIEVpdGhlciByZXR1cm4gYSBuZXcgdmFsdWUgKm9yKiBtb2RpZnkgdGhlIGRyYWZ0LlwiLDU6XCJJbW1lciBmb3JiaWRzIGNpcmN1bGFyIHJlZmVyZW5jZXNcIiw2OlwiVGhlIGZpcnN0IG9yIHNlY29uZCBhcmd1bWVudCB0byBgcHJvZHVjZWAgbXVzdCBiZSBhIGZ1bmN0aW9uXCIsNzpcIlRoZSB0aGlyZCBhcmd1bWVudCB0byBgcHJvZHVjZWAgbXVzdCBiZSBhIGZ1bmN0aW9uIG9yIHVuZGVmaW5lZFwiLDg6XCJGaXJzdCBhcmd1bWVudCB0byBgY3JlYXRlRHJhZnRgIG11c3QgYmUgYSBwbGFpbiBvYmplY3QsIGFuIGFycmF5LCBvciBhbiBpbW1lcmFibGUgb2JqZWN0XCIsOTpcIkZpcnN0IGFyZ3VtZW50IHRvIGBmaW5pc2hEcmFmdGAgbXVzdCBiZSBhIGRyYWZ0IHJldHVybmVkIGJ5IGBjcmVhdGVEcmFmdGBcIiwxMDpcIlRoZSBnaXZlbiBkcmFmdCBpcyBhbHJlYWR5IGZpbmFsaXplZFwiLDExOlwiT2JqZWN0LmRlZmluZVByb3BlcnR5KCkgY2Fubm90IGJlIHVzZWQgb24gYW4gSW1tZXIgZHJhZnRcIiwxMjpcIk9iamVjdC5zZXRQcm90b3R5cGVPZigpIGNhbm5vdCBiZSB1c2VkIG9uIGFuIEltbWVyIGRyYWZ0XCIsMTM6XCJJbW1lciBvbmx5IHN1cHBvcnRzIGRlbGV0aW5nIGFycmF5IGluZGljZXNcIiwxNDpcIkltbWVyIG9ubHkgc3VwcG9ydHMgc2V0dGluZyBhcnJheSBpbmRpY2VzIGFuZCB0aGUgJ2xlbmd0aCcgcHJvcGVydHlcIiwxNTpmdW5jdGlvbihuKXtyZXR1cm5cIkNhbm5vdCBhcHBseSBwYXRjaCwgcGF0aCBkb2Vzbid0IHJlc29sdmU6IFwiK259LDE2OidTZXRzIGNhbm5vdCBoYXZlIFwicmVwbGFjZVwiIHBhdGNoZXMuJywxNzpmdW5jdGlvbihuKXtyZXR1cm5cIlVuc3VwcG9ydGVkIHBhdGNoIG9wZXJhdGlvbjogXCIrbn0sMTg6ZnVuY3Rpb24obil7cmV0dXJuXCJUaGUgcGx1Z2luIGZvciAnXCIrbitcIicgaGFzIG5vdCBiZWVuIGxvYWRlZCBpbnRvIEltbWVyLiBUbyBlbmFibGUgdGhlIHBsdWdpbiwgaW1wb3J0IGFuZCBjYWxsIGBlbmFibGVcIituK1wiKClgIHdoZW4gaW5pdGlhbGl6aW5nIHlvdXIgYXBwbGljYXRpb24uXCJ9LDIwOlwiQ2Fubm90IHVzZSBwcm94aWVzIGlmIFByb3h5LCBQcm94eS5yZXZvY2FibGUgb3IgUmVmbGVjdCBhcmUgbm90IGF2YWlsYWJsZVwiLDIxOmZ1bmN0aW9uKG4pe3JldHVyblwicHJvZHVjZSBjYW4gb25seSBiZSBjYWxsZWQgb24gdGhpbmdzIHRoYXQgYXJlIGRyYWZ0YWJsZTogcGxhaW4gb2JqZWN0cywgYXJyYXlzLCBNYXAsIFNldCBvciBjbGFzc2VzIHRoYXQgYXJlIG1hcmtlZCB3aXRoICdbaW1tZXJhYmxlXTogdHJ1ZScuIEdvdCAnXCIrbitcIidcIn0sMjI6ZnVuY3Rpb24obil7cmV0dXJuXCInY3VycmVudCcgZXhwZWN0cyBhIGRyYWZ0LCBnb3Q6IFwiK259LDIzOmZ1bmN0aW9uKG4pe3JldHVyblwiJ29yaWdpbmFsJyBleHBlY3RzIGEgZHJhZnQsIGdvdDogXCIrbn0sMjQ6XCJQYXRjaGluZyByZXNlcnZlZCBhdHRyaWJ1dGVzIGxpa2UgX19wcm90b19fLCBwcm90b3R5cGUgYW5kIGNvbnN0cnVjdG9yIGlzIG5vdCBhbGxvd2VkXCJ9LFo9XCJcIitPYmplY3QucHJvdG90eXBlLmNvbnN0cnVjdG9yLG5uPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBSZWZsZWN0JiZSZWZsZWN0Lm93bktleXM/UmVmbGVjdC5vd25LZXlzOnZvaWQgMCE9PU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM/ZnVuY3Rpb24obil7cmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG4pLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG4pKX06T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMscm49T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnN8fGZ1bmN0aW9uKG4pe3ZhciByPXt9O3JldHVybiBubihuKS5mb3JFYWNoKChmdW5jdGlvbih0KXtyW3RdPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iobix0KX0pKSxyfSx0bj17fSxlbj17Z2V0OmZ1bmN0aW9uKG4scil7aWYocj09PVEpcmV0dXJuIG47dmFyIGU9cChuKTtpZighdShlLHIpKXJldHVybiBmdW5jdGlvbihuLHIsdCl7dmFyIGUsaT1JKHIsdCk7cmV0dXJuIGk/XCJ2YWx1ZVwiaW4gaT9pLnZhbHVlOm51bGw9PT0oZT1pLmdldCl8fHZvaWQgMD09PWU/dm9pZCAwOmUuY2FsbChuLmspOnZvaWQgMH0obixlLHIpO3ZhciBpPWVbcl07cmV0dXJuIG4uSXx8IXQoaSk/aTppPT09eihuLnQscik/KEUobiksbi5vW3JdPU4obi5BLmgsaSxuKSk6aX0saGFzOmZ1bmN0aW9uKG4scil7cmV0dXJuIHIgaW4gcChuKX0sb3duS2V5czpmdW5jdGlvbihuKXtyZXR1cm4gUmVmbGVjdC5vd25LZXlzKHAobikpfSxzZXQ6ZnVuY3Rpb24obixyLHQpe3ZhciBlPUkocChuKSxyKTtpZihudWxsPT1lP3ZvaWQgMDplLnNldClyZXR1cm4gZS5zZXQuY2FsbChuLmssdCksITA7aWYoIW4uUCl7dmFyIGk9eihwKG4pLHIpLG89bnVsbD09aT92b2lkIDA6aVtRXTtpZihvJiZvLnQ9PT10KXJldHVybiBuLm9bcl09dCxuLlJbcl09ITEsITA7aWYoYyh0LGkpJiYodm9pZCAwIT09dHx8dShuLnQscikpKXJldHVybiEwO0UobiksayhuKX1yZXR1cm4gbi5vW3JdPT09dCYmKHZvaWQgMCE9PXR8fHIgaW4gbi5vKXx8TnVtYmVyLmlzTmFOKHQpJiZOdW1iZXIuaXNOYU4obi5vW3JdKXx8KG4ub1tyXT10LG4uUltyXT0hMCksITB9LGRlbGV0ZVByb3BlcnR5OmZ1bmN0aW9uKG4scil7cmV0dXJuIHZvaWQgMCE9PXoobi50LHIpfHxyIGluIG4udD8obi5SW3JdPSExLEUobiksayhuKSk6ZGVsZXRlIG4uUltyXSxuLm8mJmRlbGV0ZSBuLm9bcl0sITB9LGdldE93blByb3BlcnR5RGVzY3JpcHRvcjpmdW5jdGlvbihuLHIpe3ZhciB0PXAobiksZT1SZWZsZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0LHIpO3JldHVybiBlP3t3cml0YWJsZTohMCxjb25maWd1cmFibGU6MSE9PW4uaXx8XCJsZW5ndGhcIiE9PXIsZW51bWVyYWJsZTplLmVudW1lcmFibGUsdmFsdWU6dFtyXX06ZX0sZGVmaW5lUHJvcGVydHk6ZnVuY3Rpb24oKXtuKDExKX0sZ2V0UHJvdG90eXBlT2Y6ZnVuY3Rpb24obil7cmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZihuLnQpfSxzZXRQcm90b3R5cGVPZjpmdW5jdGlvbigpe24oMTIpfX0sb249e307aShlbiwoZnVuY3Rpb24obixyKXtvbltuXT1mdW5jdGlvbigpe3JldHVybiBhcmd1bWVudHNbMF09YXJndW1lbnRzWzBdWzBdLHIuYXBwbHkodGhpcyxhcmd1bWVudHMpfX0pKSxvbi5kZWxldGVQcm9wZXJ0eT1mdW5jdGlvbihyLHQpe3JldHVyblwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJmlzTmFOKHBhcnNlSW50KHQpKSYmbigxMyksb24uc2V0LmNhbGwodGhpcyxyLHQsdm9pZCAwKX0sb24uc2V0PWZ1bmN0aW9uKHIsdCxlKXtyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZcImxlbmd0aFwiIT09dCYmaXNOYU4ocGFyc2VJbnQodCkpJiZuKDE0KSxlbi5zZXQuY2FsbCh0aGlzLHJbMF0sdCxlLHJbMF0pfTt2YXIgdW49ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKHIpe3ZhciBlPXRoaXM7dGhpcy5PPUIsdGhpcy5EPSEwLHRoaXMucHJvZHVjZT1mdW5jdGlvbihyLGksbyl7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgciYmXCJmdW5jdGlvblwiIT10eXBlb2YgaSl7dmFyIHU9aTtpPXI7dmFyIGE9ZTtyZXR1cm4gZnVuY3Rpb24obil7dmFyIHI9dGhpczt2b2lkIDA9PT1uJiYobj11KTtmb3IodmFyIHQ9YXJndW1lbnRzLmxlbmd0aCxlPUFycmF5KHQ+MT90LTE6MCksbz0xO288dDtvKyspZVtvLTFdPWFyZ3VtZW50c1tvXTtyZXR1cm4gYS5wcm9kdWNlKG4sKGZ1bmN0aW9uKG4pe3ZhciB0O3JldHVybih0PWkpLmNhbGwuYXBwbHkodCxbcixuXS5jb25jYXQoZSkpfSkpfX12YXIgZjtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBpJiZuKDYpLHZvaWQgMCE9PW8mJlwiZnVuY3Rpb25cIiE9dHlwZW9mIG8mJm4oNyksdChyKSl7dmFyIGM9dyhlKSxzPU4oZSxyLHZvaWQgMCksdj0hMDt0cnl7Zj1pKHMpLHY9ITF9ZmluYWxseXt2P2coYyk6TyhjKX1yZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2YgUHJvbWlzZSYmZiBpbnN0YW5jZW9mIFByb21pc2U/Zi50aGVuKChmdW5jdGlvbihuKXtyZXR1cm4gaihjLG8pLFAobixjKX0pLChmdW5jdGlvbihuKXt0aHJvdyBnKGMpLG59KSk6KGooYyxvKSxQKGYsYykpfWlmKCFyfHxcIm9iamVjdFwiIT10eXBlb2Ygcil7aWYodm9pZCAwPT09KGY9aShyKSkmJihmPXIpLGY9PT1IJiYoZj12b2lkIDApLGUuRCYmZChmLCEwKSxvKXt2YXIgcD1bXSxsPVtdO2IoXCJQYXRjaGVzXCIpLk0ocixmLHAsbCksbyhwLGwpfXJldHVybiBmfW4oMjEscil9LHRoaXMucHJvZHVjZVdpdGhQYXRjaGVzPWZ1bmN0aW9uKG4scil7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgbilyZXR1cm4gZnVuY3Rpb24ocil7Zm9yKHZhciB0PWFyZ3VtZW50cy5sZW5ndGgsaT1BcnJheSh0PjE/dC0xOjApLG89MTtvPHQ7bysrKWlbby0xXT1hcmd1bWVudHNbb107cmV0dXJuIGUucHJvZHVjZVdpdGhQYXRjaGVzKHIsKGZ1bmN0aW9uKHIpe3JldHVybiBuLmFwcGx5KHZvaWQgMCxbcl0uY29uY2F0KGkpKX0pKX07dmFyIHQsaSxvPWUucHJvZHVjZShuLHIsKGZ1bmN0aW9uKG4scil7dD1uLGk9cn0pKTtyZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2YgUHJvbWlzZSYmbyBpbnN0YW5jZW9mIFByb21pc2U/by50aGVuKChmdW5jdGlvbihuKXtyZXR1cm5bbix0LGldfSkpOltvLHQsaV19LFwiYm9vbGVhblwiPT10eXBlb2YobnVsbD09cj92b2lkIDA6ci51c2VQcm94aWVzKSYmdGhpcy5zZXRVc2VQcm94aWVzKHIudXNlUHJveGllcyksXCJib29sZWFuXCI9PXR5cGVvZihudWxsPT1yP3ZvaWQgMDpyLmF1dG9GcmVlemUpJiZ0aGlzLnNldEF1dG9GcmVlemUoci5hdXRvRnJlZXplKX12YXIgaT1lLnByb3RvdHlwZTtyZXR1cm4gaS5jcmVhdGVEcmFmdD1mdW5jdGlvbihlKXt0KGUpfHxuKDgpLHIoZSkmJihlPVIoZSkpO3ZhciBpPXcodGhpcyksbz1OKHRoaXMsZSx2b2lkIDApO3JldHVybiBvW1FdLkM9ITAsTyhpKSxvfSxpLmZpbmlzaERyYWZ0PWZ1bmN0aW9uKHIsdCl7dmFyIGU9ciYmcltRXTtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYoZSYmZS5DfHxuKDkpLGUuSSYmbigxMCkpO3ZhciBpPWUuQTtyZXR1cm4gaihpLHQpLFAodm9pZCAwLGkpfSxpLnNldEF1dG9GcmVlemU9ZnVuY3Rpb24obil7dGhpcy5EPW59LGkuc2V0VXNlUHJveGllcz1mdW5jdGlvbihyKXtyJiYhQiYmbigyMCksdGhpcy5PPXJ9LGkuYXBwbHlQYXRjaGVzPWZ1bmN0aW9uKG4sdCl7dmFyIGU7Zm9yKGU9dC5sZW5ndGgtMTtlPj0wO2UtLSl7dmFyIGk9dFtlXTtpZigwPT09aS5wYXRoLmxlbmd0aCYmXCJyZXBsYWNlXCI9PT1pLm9wKXtuPWkudmFsdWU7YnJlYWt9fWU+LTEmJih0PXQuc2xpY2UoZSsxKSk7dmFyIG89YihcIlBhdGNoZXNcIikuJDtyZXR1cm4gcihuKT9vKG4sdCk6dGhpcy5wcm9kdWNlKG4sKGZ1bmN0aW9uKG4pe3JldHVybiBvKG4sdCl9KSl9LGV9KCksYW49bmV3IHVuLGZuPWFuLnByb2R1Y2UsY249YW4ucHJvZHVjZVdpdGhQYXRjaGVzLmJpbmQoYW4pLHNuPWFuLnNldEF1dG9GcmVlemUuYmluZChhbiksdm49YW4uc2V0VXNlUHJveGllcy5iaW5kKGFuKSxwbj1hbi5hcHBseVBhdGNoZXMuYmluZChhbiksbG49YW4uY3JlYXRlRHJhZnQuYmluZChhbiksZG49YW4uZmluaXNoRHJhZnQuYmluZChhbik7ZXhwb3J0IGRlZmF1bHQgZm47ZXhwb3J0e3VuIGFzIEltbWVyLHBuIGFzIGFwcGx5UGF0Y2hlcyxLIGFzIGNhc3REcmFmdCwkIGFzIGNhc3RJbW11dGFibGUsbG4gYXMgY3JlYXRlRHJhZnQsUiBhcyBjdXJyZW50LEogYXMgZW5hYmxlQWxsUGx1Z2lucyxGIGFzIGVuYWJsZUVTNSxDIGFzIGVuYWJsZU1hcFNldCxUIGFzIGVuYWJsZVBhdGNoZXMsZG4gYXMgZmluaXNoRHJhZnQsZCBhcyBmcmVlemUsTCBhcyBpbW1lcmFibGUsciBhcyBpc0RyYWZ0LHQgYXMgaXNEcmFmdGFibGUsSCBhcyBub3RoaW5nLGUgYXMgb3JpZ2luYWwsZm4gYXMgcHJvZHVjZSxjbiBhcyBwcm9kdWNlV2l0aFBhdGNoZXMsc24gYXMgc2V0QXV0b0ZyZWV6ZSx2biBhcyBzZXRVc2VQcm94aWVzfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWltbWVyLmVzbS5qcy5tYXBcbiIsInZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgICAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhiKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XHJcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbiAgICB9O1xyXG59KSgpO1xyXG52YXIgX19nZW5lcmF0b3IgPSAodGhpcyAmJiB0aGlzLl9fZ2VuZXJhdG9yKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgYm9keSkge1xyXG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcclxuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XHJcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xyXG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XHJcbiAgICB9XHJcbn07XHJcbnZhciBfX3NwcmVhZEFycmF5ID0gKHRoaXMgJiYgdGhpcy5fX3NwcmVhZEFycmF5KSB8fCBmdW5jdGlvbiAodG8sIGZyb20pIHtcclxuICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IGZyb20ubGVuZ3RoLCBqID0gdG8ubGVuZ3RoOyBpIDwgaWw7IGkrKywgaisrKVxyXG4gICAgICAgIHRvW2pdID0gZnJvbVtpXTtcclxuICAgIHJldHVybiB0bztcclxufTtcclxudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcclxudmFyIF9fZGVmUHJvcHMgPSBPYmplY3QuZGVmaW5lUHJvcGVydGllcztcclxudmFyIF9fZ2V0T3duUHJvcERlc2NzID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnM7XHJcbnZhciBfX2dldE93blByb3BTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcclxudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XHJcbnZhciBfX3Byb3BJc0VudW0gPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xyXG52YXIgX19kZWZOb3JtYWxQcm9wID0gZnVuY3Rpb24gKG9iaiwga2V5LCB2YWx1ZSkgeyByZXR1cm4ga2V5IGluIG9iaiA/IF9fZGVmUHJvcChvYmosIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSkgOiBvYmpba2V5XSA9IHZhbHVlOyB9O1xyXG52YXIgX19zcHJlYWRWYWx1ZXMgPSBmdW5jdGlvbiAoYSwgYikge1xyXG4gICAgZm9yICh2YXIgcHJvcCBpbiBiIHx8IChiID0ge30pKVxyXG4gICAgICAgIGlmIChfX2hhc093blByb3AuY2FsbChiLCBwcm9wKSlcclxuICAgICAgICAgICAgX19kZWZOb3JtYWxQcm9wKGEsIHByb3AsIGJbcHJvcF0pO1xyXG4gICAgaWYgKF9fZ2V0T3duUHJvcFN5bWJvbHMpXHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYyA9IF9fZ2V0T3duUHJvcFN5bWJvbHMoYik7IF9pIDwgX2MubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBwcm9wID0gX2NbX2ldO1xyXG4gICAgICAgICAgICBpZiAoX19wcm9wSXNFbnVtLmNhbGwoYiwgcHJvcCkpXHJcbiAgICAgICAgICAgICAgICBfX2RlZk5vcm1hbFByb3AoYSwgcHJvcCwgYltwcm9wXSk7XHJcbiAgICAgICAgfVxyXG4gICAgcmV0dXJuIGE7XHJcbn07XHJcbnZhciBfX3NwcmVhZFByb3BzID0gZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIF9fZGVmUHJvcHMoYSwgX19nZXRPd25Qcm9wRGVzY3MoYikpOyB9O1xyXG52YXIgX19hc3luYyA9IGZ1bmN0aW9uIChfX3RoaXMsIF9fYXJndW1lbnRzLCBnZW5lcmF0b3IpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgdmFyIGZ1bGZpbGxlZCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHZhciByZWplY3RlZCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgc3RlcChnZW5lcmF0b3IudGhyb3codmFsdWUpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICB2YXIgc3RlcCA9IGZ1bmN0aW9uICh4KSB7IHJldHVybiB4LmRvbmUgPyByZXNvbHZlKHgudmFsdWUpIDogUHJvbWlzZS5yZXNvbHZlKHgudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH07XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KF9fdGhpcywgX19hcmd1bWVudHMpKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn07XHJcbi8vIHNyYy9pbmRleC50c1xyXG5pbXBvcnQgeyBlbmFibGVFUzUgfSBmcm9tIFwiaW1tZXJcIjtcclxuZXhwb3J0ICogZnJvbSBcInJlZHV4XCI7XHJcbmltcG9ydCB7IGRlZmF1bHQgYXMgZGVmYXVsdDIsIGN1cnJlbnQgYXMgY3VycmVudDIsIGZyZWV6ZSwgb3JpZ2luYWwsIGlzRHJhZnQgYXMgaXNEcmFmdDQgfSBmcm9tIFwiaW1tZXJcIjtcclxuaW1wb3J0IHsgY3JlYXRlU2VsZWN0b3IgYXMgY3JlYXRlU2VsZWN0b3IyIH0gZnJvbSBcInJlc2VsZWN0XCI7XHJcbi8vIHNyYy9jcmVhdGVEcmFmdFNhZmVTZWxlY3Rvci50c1xyXG5pbXBvcnQgeyBjdXJyZW50LCBpc0RyYWZ0IH0gZnJvbSBcImltbWVyXCI7XHJcbmltcG9ydCB7IGNyZWF0ZVNlbGVjdG9yIH0gZnJvbSBcInJlc2VsZWN0XCI7XHJcbnZhciBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvciA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBhcmdzID0gW107XHJcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgIH1cclxuICAgIHZhciBzZWxlY3RvciA9IGNyZWF0ZVNlbGVjdG9yLmFwcGx5KHZvaWQgMCwgYXJncyk7XHJcbiAgICB2YXIgd3JhcHBlZFNlbGVjdG9yID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgdmFyIHJlc3QgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICByZXN0W19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc2VsZWN0b3IuYXBwbHkodm9pZCAwLCBfX3NwcmVhZEFycmF5KFtpc0RyYWZ0KHZhbHVlKSA/IGN1cnJlbnQodmFsdWUpIDogdmFsdWVdLCByZXN0KSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIHdyYXBwZWRTZWxlY3RvcjtcclxufTtcclxuLy8gc3JjL2NvbmZpZ3VyZVN0b3JlLnRzXHJcbmltcG9ydCB7IGNyZWF0ZVN0b3JlLCBjb21wb3NlIGFzIGNvbXBvc2UyLCBhcHBseU1pZGRsZXdhcmUsIGNvbWJpbmVSZWR1Y2VycyB9IGZyb20gXCJyZWR1eFwiO1xyXG4vLyBzcmMvZGV2dG9vbHNFeHRlbnNpb24udHNcclxuaW1wb3J0IHsgY29tcG9zZSB9IGZyb20gXCJyZWR1eFwiO1xyXG52YXIgY29tcG9zZVdpdGhEZXZUb29scyA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93Ll9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX0NPTVBPU0VfXyA/IHdpbmRvdy5fX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9DT01QT1NFX18gOiBmdW5jdGlvbiAoKSB7XHJcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMClcclxuICAgICAgICByZXR1cm4gdm9pZCAwO1xyXG4gICAgaWYgKHR5cGVvZiBhcmd1bWVudHNbMF0gPT09IFwib2JqZWN0XCIpXHJcbiAgICAgICAgcmV0dXJuIGNvbXBvc2U7XHJcbiAgICByZXR1cm4gY29tcG9zZS5hcHBseShudWxsLCBhcmd1bWVudHMpO1xyXG59O1xyXG52YXIgZGV2VG9vbHNFbmhhbmNlciA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93Ll9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX18gPyB3aW5kb3cuX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fXyA6IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAobm9vcDIpIHtcclxuICAgICAgICByZXR1cm4gbm9vcDI7XHJcbiAgICB9O1xyXG59O1xyXG4vLyBzcmMvaXNQbGFpbk9iamVjdC50c1xyXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbHVlKSB7XHJcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcIm9iamVjdFwiIHx8IHZhbHVlID09PSBudWxsKVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIHZhciBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih2YWx1ZSk7XHJcbiAgICBpZiAocHJvdG8gPT09IG51bGwpXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB2YXIgYmFzZVByb3RvID0gcHJvdG87XHJcbiAgICB3aGlsZSAoT2JqZWN0LmdldFByb3RvdHlwZU9mKGJhc2VQcm90bykgIT09IG51bGwpIHtcclxuICAgICAgICBiYXNlUHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoYmFzZVByb3RvKTtcclxuICAgIH1cclxuICAgIHJldHVybiBwcm90byA9PT0gYmFzZVByb3RvO1xyXG59XHJcbi8vIHNyYy9nZXREZWZhdWx0TWlkZGxld2FyZS50c1xyXG5pbXBvcnQgdGh1bmtNaWRkbGV3YXJlIGZyb20gXCJyZWR1eC10aHVua1wiO1xyXG4vLyBzcmMvdHNIZWxwZXJzLnRzXHJcbnZhciBoYXNNYXRjaEZ1bmN0aW9uID0gZnVuY3Rpb24gKHYpIHtcclxuICAgIHJldHVybiB2ICYmIHR5cGVvZiB2Lm1hdGNoID09PSBcImZ1bmN0aW9uXCI7XHJcbn07XHJcbi8vIHNyYy9jcmVhdGVBY3Rpb24udHNcclxuZnVuY3Rpb24gY3JlYXRlQWN0aW9uKHR5cGUsIHByZXBhcmVBY3Rpb24pIHtcclxuICAgIGZ1bmN0aW9uIGFjdGlvbkNyZWF0b3IoKSB7XHJcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChwcmVwYXJlQWN0aW9uKSB7XHJcbiAgICAgICAgICAgIHZhciBwcmVwYXJlZCA9IHByZXBhcmVBY3Rpb24uYXBwbHkodm9pZCAwLCBhcmdzKTtcclxuICAgICAgICAgICAgaWYgKCFwcmVwYXJlZCkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwicHJlcGFyZUFjdGlvbiBkaWQgbm90IHJldHVybiBhbiBvYmplY3RcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIF9fc3ByZWFkVmFsdWVzKF9fc3ByZWFkVmFsdWVzKHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IHR5cGUsXHJcbiAgICAgICAgICAgICAgICBwYXlsb2FkOiBwcmVwYXJlZC5wYXlsb2FkXHJcbiAgICAgICAgICAgIH0sIFwibWV0YVwiIGluIHByZXBhcmVkICYmIHsgbWV0YTogcHJlcGFyZWQubWV0YSB9KSwgXCJlcnJvclwiIGluIHByZXBhcmVkICYmIHsgZXJyb3I6IHByZXBhcmVkLmVycm9yIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4geyB0eXBlOiB0eXBlLCBwYXlsb2FkOiBhcmdzWzBdIH07XHJcbiAgICB9XHJcbiAgICBhY3Rpb25DcmVhdG9yLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gXCJcIiArIHR5cGU7IH07XHJcbiAgICBhY3Rpb25DcmVhdG9yLnR5cGUgPSB0eXBlO1xyXG4gICAgYWN0aW9uQ3JlYXRvci5tYXRjaCA9IGZ1bmN0aW9uIChhY3Rpb24pIHsgcmV0dXJuIGFjdGlvbi50eXBlID09PSB0eXBlOyB9O1xyXG4gICAgcmV0dXJuIGFjdGlvbkNyZWF0b3I7XHJcbn1cclxuZnVuY3Rpb24gaXNBY3Rpb24oYWN0aW9uKSB7XHJcbiAgICByZXR1cm4gaXNQbGFpbk9iamVjdChhY3Rpb24pICYmIFwidHlwZVwiIGluIGFjdGlvbjtcclxufVxyXG5mdW5jdGlvbiBpc0FjdGlvbkNyZWF0b3IoYWN0aW9uKSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIGFjdGlvbiA9PT0gXCJmdW5jdGlvblwiICYmIFwidHlwZVwiIGluIGFjdGlvbiAmJiBoYXNNYXRjaEZ1bmN0aW9uKGFjdGlvbik7XHJcbn1cclxuZnVuY3Rpb24gaXNGU0EoYWN0aW9uKSB7XHJcbiAgICByZXR1cm4gaXNBY3Rpb24oYWN0aW9uKSAmJiB0eXBlb2YgYWN0aW9uLnR5cGUgPT09IFwic3RyaW5nXCIgJiYgT2JqZWN0LmtleXMoYWN0aW9uKS5ldmVyeShpc1ZhbGlkS2V5KTtcclxufVxyXG5mdW5jdGlvbiBpc1ZhbGlkS2V5KGtleSkge1xyXG4gICAgcmV0dXJuIFtcInR5cGVcIiwgXCJwYXlsb2FkXCIsIFwiZXJyb3JcIiwgXCJtZXRhXCJdLmluZGV4T2Yoa2V5KSA+IC0xO1xyXG59XHJcbmZ1bmN0aW9uIGdldFR5cGUoYWN0aW9uQ3JlYXRvcikge1xyXG4gICAgcmV0dXJuIFwiXCIgKyBhY3Rpb25DcmVhdG9yO1xyXG59XHJcbi8vIHNyYy9hY3Rpb25DcmVhdG9ySW52YXJpYW50TWlkZGxld2FyZS50c1xyXG5mdW5jdGlvbiBnZXRNZXNzYWdlKHR5cGUpIHtcclxuICAgIHZhciBzcGxpdFR5cGUgPSB0eXBlID8gKFwiXCIgKyB0eXBlKS5zcGxpdChcIi9cIikgOiBbXTtcclxuICAgIHZhciBhY3Rpb25OYW1lID0gc3BsaXRUeXBlW3NwbGl0VHlwZS5sZW5ndGggLSAxXSB8fCBcImFjdGlvbkNyZWF0b3JcIjtcclxuICAgIHJldHVybiBcIkRldGVjdGVkIGFuIGFjdGlvbiBjcmVhdG9yIHdpdGggdHlwZSBcXFwiXCIgKyAodHlwZSB8fCBcInVua25vd25cIikgKyBcIlxcXCIgYmVpbmcgZGlzcGF0Y2hlZC4gXFxuTWFrZSBzdXJlIHlvdSdyZSBjYWxsaW5nIHRoZSBhY3Rpb24gY3JlYXRvciBiZWZvcmUgZGlzcGF0Y2hpbmcsIGkuZS4gYGRpc3BhdGNoKFwiICsgYWN0aW9uTmFtZSArIFwiKCkpYCBpbnN0ZWFkIG9mIGBkaXNwYXRjaChcIiArIGFjdGlvbk5hbWUgKyBcIilgLiBUaGlzIGlzIG5lY2Vzc2FyeSBldmVuIGlmIHRoZSBhY3Rpb24gaGFzIG5vIHBheWxvYWQuXCI7XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlQWN0aW9uQ3JlYXRvckludmFyaWFudE1pZGRsZXdhcmUob3B0aW9ucykge1xyXG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cclxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHsgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHsgcmV0dXJuIG5leHQoYWN0aW9uKTsgfTsgfTsgfTtcclxuICAgIH1cclxuICAgIHZhciBfYyA9IG9wdGlvbnMuaXNBY3Rpb25DcmVhdG9yLCBpc0FjdGlvbkNyZWF0b3IyID0gX2MgPT09IHZvaWQgMCA/IGlzQWN0aW9uQ3JlYXRvciA6IF9jO1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZ1bmN0aW9uIChuZXh0KSB7IHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgaWYgKGlzQWN0aW9uQ3JlYXRvcjIoYWN0aW9uKSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oZ2V0TWVzc2FnZShhY3Rpb24udHlwZSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV4dChhY3Rpb24pO1xyXG4gICAgfTsgfTsgfTtcclxufVxyXG4vLyBzcmMvdXRpbHMudHNcclxuaW1wb3J0IGNyZWF0ZU5leHRTdGF0ZSwgeyBpc0RyYWZ0YWJsZSB9IGZyb20gXCJpbW1lclwiO1xyXG5mdW5jdGlvbiBnZXRUaW1lTWVhc3VyZVV0aWxzKG1heERlbGF5LCBmbk5hbWUpIHtcclxuICAgIHZhciBlbGFwc2VkID0gMDtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgbWVhc3VyZVRpbWU6IGZ1bmN0aW9uIChmbikge1xyXG4gICAgICAgICAgICB2YXIgc3RhcnRlZCA9IERhdGUubm93KCk7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZm4oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmaW5hbGx5IHtcclxuICAgICAgICAgICAgICAgIHZhciBmaW5pc2hlZCA9IERhdGUubm93KCk7XHJcbiAgICAgICAgICAgICAgICBlbGFwc2VkICs9IGZpbmlzaGVkIC0gc3RhcnRlZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgd2FybklmRXhjZWVkZWQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKGVsYXBzZWQgPiBtYXhEZWxheSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGZuTmFtZSArIFwiIHRvb2sgXCIgKyBlbGFwc2VkICsgXCJtcywgd2hpY2ggaXMgbW9yZSB0aGFuIHRoZSB3YXJuaW5nIHRocmVzaG9sZCBvZiBcIiArIG1heERlbGF5ICsgXCJtcy4gXFxuSWYgeW91ciBzdGF0ZSBvciBhY3Rpb25zIGFyZSB2ZXJ5IGxhcmdlLCB5b3UgbWF5IHdhbnQgdG8gZGlzYWJsZSB0aGUgbWlkZGxld2FyZSBhcyBpdCBtaWdodCBjYXVzZSB0b28gbXVjaCBvZiBhIHNsb3dkb3duIGluIGRldmVsb3BtZW50IG1vZGUuIFNlZSBodHRwczovL3JlZHV4LXRvb2xraXQuanMub3JnL2FwaS9nZXREZWZhdWx0TWlkZGxld2FyZSBmb3IgaW5zdHJ1Y3Rpb25zLlxcbkl0IGlzIGRpc2FibGVkIGluIHByb2R1Y3Rpb24gYnVpbGRzLCBzbyB5b3UgZG9uJ3QgbmVlZCB0byB3b3JyeSBhYm91dCB0aGF0LlwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1cclxudmFyIE1pZGRsZXdhcmVBcnJheSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhNaWRkbGV3YXJlQXJyYXksIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBNaWRkbGV3YXJlQXJyYXkoKSB7XHJcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5hcHBseSh0aGlzLCBhcmdzKSB8fCB0aGlzO1xyXG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihfdGhpcywgTWlkZGxld2FyZUFycmF5LnByb3RvdHlwZSk7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1pZGRsZXdhcmVBcnJheSwgU3ltYm9sLnNwZWNpZXMsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIE1pZGRsZXdhcmVBcnJheTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBNaWRkbGV3YXJlQXJyYXkucHJvdG90eXBlLmNvbmNhdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgYXJyID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgYXJyW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBfc3VwZXIucHJvdG90eXBlLmNvbmNhdC5hcHBseSh0aGlzLCBhcnIpO1xyXG4gICAgfTtcclxuICAgIE1pZGRsZXdhcmVBcnJheS5wcm90b3R5cGUucHJlcGVuZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgYXJyID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgYXJyW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhcnIubGVuZ3RoID09PSAxICYmIEFycmF5LmlzQXJyYXkoYXJyWzBdKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IChNaWRkbGV3YXJlQXJyYXkuYmluZC5hcHBseShNaWRkbGV3YXJlQXJyYXksIF9fc3ByZWFkQXJyYXkoW3ZvaWQgMF0sIGFyclswXS5jb25jYXQodGhpcykpKSkoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyAoTWlkZGxld2FyZUFycmF5LmJpbmQuYXBwbHkoTWlkZGxld2FyZUFycmF5LCBfX3NwcmVhZEFycmF5KFt2b2lkIDBdLCBhcnIuY29uY2F0KHRoaXMpKSkpKCk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIE1pZGRsZXdhcmVBcnJheTtcclxufShBcnJheSkpO1xyXG52YXIgRW5oYW5jZXJBcnJheSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhFbmhhbmNlckFycmF5LCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gRW5oYW5jZXJBcnJheSgpIHtcclxuICAgICAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3MpIHx8IHRoaXM7XHJcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKF90aGlzLCBFbmhhbmNlckFycmF5LnByb3RvdHlwZSk7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEVuaGFuY2VyQXJyYXksIFN5bWJvbC5zcGVjaWVzLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBFbmhhbmNlckFycmF5O1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIEVuaGFuY2VyQXJyYXkucHJvdG90eXBlLmNvbmNhdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgYXJyID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgYXJyW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBfc3VwZXIucHJvdG90eXBlLmNvbmNhdC5hcHBseSh0aGlzLCBhcnIpO1xyXG4gICAgfTtcclxuICAgIEVuaGFuY2VyQXJyYXkucHJvdG90eXBlLnByZXBlbmQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGFyciA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIGFycltfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYXJyLmxlbmd0aCA9PT0gMSAmJiBBcnJheS5pc0FycmF5KGFyclswXSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyAoRW5oYW5jZXJBcnJheS5iaW5kLmFwcGx5KEVuaGFuY2VyQXJyYXksIF9fc3ByZWFkQXJyYXkoW3ZvaWQgMF0sIGFyclswXS5jb25jYXQodGhpcykpKSkoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyAoRW5oYW5jZXJBcnJheS5iaW5kLmFwcGx5KEVuaGFuY2VyQXJyYXksIF9fc3ByZWFkQXJyYXkoW3ZvaWQgMF0sIGFyci5jb25jYXQodGhpcykpKSkoKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gRW5oYW5jZXJBcnJheTtcclxufShBcnJheSkpO1xyXG5mdW5jdGlvbiBmcmVlemVEcmFmdGFibGUodmFsKSB7XHJcbiAgICByZXR1cm4gaXNEcmFmdGFibGUodmFsKSA/IGNyZWF0ZU5leHRTdGF0ZSh2YWwsIGZ1bmN0aW9uICgpIHtcclxuICAgIH0pIDogdmFsO1xyXG59XHJcbi8vIHNyYy9pbW11dGFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUudHNcclxudmFyIGlzUHJvZHVjdGlvbiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIjtcclxudmFyIHByZWZpeCA9IFwiSW52YXJpYW50IGZhaWxlZFwiO1xyXG5mdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLCBtZXNzYWdlKSB7XHJcbiAgICBpZiAoY29uZGl0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKGlzUHJvZHVjdGlvbikge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihwcmVmaXgpO1xyXG4gICAgfVxyXG4gICAgdGhyb3cgbmV3IEVycm9yKHByZWZpeCArIFwiOiBcIiArIChtZXNzYWdlIHx8IFwiXCIpKTtcclxufVxyXG5mdW5jdGlvbiBzdHJpbmdpZnkob2JqLCBzZXJpYWxpemVyLCBpbmRlbnQsIGRlY3ljbGVyKSB7XHJcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkob2JqLCBnZXRTZXJpYWxpemUoc2VyaWFsaXplciwgZGVjeWNsZXIpLCBpbmRlbnQpO1xyXG59XHJcbmZ1bmN0aW9uIGdldFNlcmlhbGl6ZShzZXJpYWxpemVyLCBkZWN5Y2xlcikge1xyXG4gICAgdmFyIHN0YWNrID0gW10sIGtleXMgPSBbXTtcclxuICAgIGlmICghZGVjeWNsZXIpXHJcbiAgICAgICAgZGVjeWNsZXIgPSBmdW5jdGlvbiAoXywgdmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKHN0YWNrWzBdID09PSB2YWx1ZSlcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIltDaXJjdWxhciB+XVwiO1xyXG4gICAgICAgICAgICByZXR1cm4gXCJbQ2lyY3VsYXIgfi5cIiArIGtleXMuc2xpY2UoMCwgc3RhY2suaW5kZXhPZih2YWx1ZSkpLmpvaW4oXCIuXCIpICsgXCJdXCI7XHJcbiAgICAgICAgfTtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xyXG4gICAgICAgIGlmIChzdGFjay5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHZhciB0aGlzUG9zID0gc3RhY2suaW5kZXhPZih0aGlzKTtcclxuICAgICAgICAgICAgfnRoaXNQb3MgPyBzdGFjay5zcGxpY2UodGhpc1BvcyArIDEpIDogc3RhY2sucHVzaCh0aGlzKTtcclxuICAgICAgICAgICAgfnRoaXNQb3MgPyBrZXlzLnNwbGljZSh0aGlzUG9zLCBJbmZpbml0eSwga2V5KSA6IGtleXMucHVzaChrZXkpO1xyXG4gICAgICAgICAgICBpZiAofnN0YWNrLmluZGV4T2YodmFsdWUpKVxyXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBkZWN5Y2xlci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHN0YWNrLnB1c2godmFsdWUpO1xyXG4gICAgICAgIHJldHVybiBzZXJpYWxpemVyID09IG51bGwgPyB2YWx1ZSA6IHNlcmlhbGl6ZXIuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gaXNJbW11dGFibGVEZWZhdWx0KHZhbHVlKSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlICE9PSBcIm9iamVjdFwiIHx8IHZhbHVlID09IG51bGwgfHwgT2JqZWN0LmlzRnJvemVuKHZhbHVlKTtcclxufVxyXG5mdW5jdGlvbiB0cmFja0Zvck11dGF0aW9ucyhpc0ltbXV0YWJsZSwgaWdub3JlUGF0aHMsIG9iaikge1xyXG4gICAgdmFyIHRyYWNrZWRQcm9wZXJ0aWVzID0gdHJhY2tQcm9wZXJ0aWVzKGlzSW1tdXRhYmxlLCBpZ25vcmVQYXRocywgb2JqKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgZGV0ZWN0TXV0YXRpb25zOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBkZXRlY3RNdXRhdGlvbnMoaXNJbW11dGFibGUsIGlnbm9yZVBhdGhzLCB0cmFja2VkUHJvcGVydGllcywgb2JqKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIHRyYWNrUHJvcGVydGllcyhpc0ltbXV0YWJsZSwgaWdub3JlUGF0aHMsIG9iaiwgcGF0aCwgY2hlY2tlZE9iamVjdHMpIHtcclxuICAgIGlmIChpZ25vcmVQYXRocyA9PT0gdm9pZCAwKSB7IGlnbm9yZVBhdGhzID0gW107IH1cclxuICAgIGlmIChwYXRoID09PSB2b2lkIDApIHsgcGF0aCA9IFwiXCI7IH1cclxuICAgIGlmIChjaGVja2VkT2JqZWN0cyA9PT0gdm9pZCAwKSB7IGNoZWNrZWRPYmplY3RzID0gbmV3IFNldCgpOyB9XHJcbiAgICB2YXIgdHJhY2tlZCA9IHsgdmFsdWU6IG9iaiB9O1xyXG4gICAgaWYgKCFpc0ltbXV0YWJsZShvYmopICYmICFjaGVja2VkT2JqZWN0cy5oYXMob2JqKSkge1xyXG4gICAgICAgIGNoZWNrZWRPYmplY3RzLmFkZChvYmopO1xyXG4gICAgICAgIHRyYWNrZWQuY2hpbGRyZW4gPSB7fTtcclxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XHJcbiAgICAgICAgICAgIHZhciBjaGlsZFBhdGggPSBwYXRoID8gcGF0aCArIFwiLlwiICsga2V5IDoga2V5O1xyXG4gICAgICAgICAgICBpZiAoaWdub3JlUGF0aHMubGVuZ3RoICYmIGlnbm9yZVBhdGhzLmluZGV4T2YoY2hpbGRQYXRoKSAhPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRyYWNrZWQuY2hpbGRyZW5ba2V5XSA9IHRyYWNrUHJvcGVydGllcyhpc0ltbXV0YWJsZSwgaWdub3JlUGF0aHMsIG9ialtrZXldLCBjaGlsZFBhdGgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0cmFja2VkO1xyXG59XHJcbmZ1bmN0aW9uIGRldGVjdE11dGF0aW9ucyhpc0ltbXV0YWJsZSwgaWdub3JlZFBhdGhzLCB0cmFja2VkUHJvcGVydHksIG9iaiwgc2FtZVBhcmVudFJlZiwgcGF0aCkge1xyXG4gICAgaWYgKGlnbm9yZWRQYXRocyA9PT0gdm9pZCAwKSB7IGlnbm9yZWRQYXRocyA9IFtdOyB9XHJcbiAgICBpZiAoc2FtZVBhcmVudFJlZiA9PT0gdm9pZCAwKSB7IHNhbWVQYXJlbnRSZWYgPSBmYWxzZTsgfVxyXG4gICAgaWYgKHBhdGggPT09IHZvaWQgMCkgeyBwYXRoID0gXCJcIjsgfVxyXG4gICAgdmFyIHByZXZPYmogPSB0cmFja2VkUHJvcGVydHkgPyB0cmFja2VkUHJvcGVydHkudmFsdWUgOiB2b2lkIDA7XHJcbiAgICB2YXIgc2FtZVJlZiA9IHByZXZPYmogPT09IG9iajtcclxuICAgIGlmIChzYW1lUGFyZW50UmVmICYmICFzYW1lUmVmICYmICFOdW1iZXIuaXNOYU4ob2JqKSkge1xyXG4gICAgICAgIHJldHVybiB7IHdhc011dGF0ZWQ6IHRydWUsIHBhdGg6IHBhdGggfTtcclxuICAgIH1cclxuICAgIGlmIChpc0ltbXV0YWJsZShwcmV2T2JqKSB8fCBpc0ltbXV0YWJsZShvYmopKSB7XHJcbiAgICAgICAgcmV0dXJuIHsgd2FzTXV0YXRlZDogZmFsc2UgfTtcclxuICAgIH1cclxuICAgIHZhciBrZXlzVG9EZXRlY3QgPSB7fTtcclxuICAgIGZvciAodmFyIGtleSBpbiB0cmFja2VkUHJvcGVydHkuY2hpbGRyZW4pIHtcclxuICAgICAgICBrZXlzVG9EZXRlY3Rba2V5XSA9IHRydWU7XHJcbiAgICB9XHJcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XHJcbiAgICAgICAga2V5c1RvRGV0ZWN0W2tleV0gPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgdmFyIGhhc0lnbm9yZWRQYXRocyA9IGlnbm9yZWRQYXRocy5sZW5ndGggPiAwO1xyXG4gICAgdmFyIF9sb29wXzEgPSBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgdmFyIG5lc3RlZFBhdGggPSBwYXRoID8gcGF0aCArIFwiLlwiICsga2V5IDoga2V5O1xyXG4gICAgICAgIGlmIChoYXNJZ25vcmVkUGF0aHMpIHtcclxuICAgICAgICAgICAgdmFyIGhhc01hdGNoZXMgPSBpZ25vcmVkUGF0aHMuc29tZShmdW5jdGlvbiAoaWdub3JlZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGlnbm9yZWQgaW5zdGFuY2VvZiBSZWdFeHApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWdub3JlZC50ZXN0KG5lc3RlZFBhdGgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5lc3RlZFBhdGggPT09IGlnbm9yZWQ7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpZiAoaGFzTWF0Y2hlcykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiY29udGludWVcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgcmVzdWx0ID0gZGV0ZWN0TXV0YXRpb25zKGlzSW1tdXRhYmxlLCBpZ25vcmVkUGF0aHMsIHRyYWNrZWRQcm9wZXJ0eS5jaGlsZHJlbltrZXldLCBvYmpba2V5XSwgc2FtZVJlZiwgbmVzdGVkUGF0aCk7XHJcbiAgICAgICAgaWYgKHJlc3VsdC53YXNNdXRhdGVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiByZXN1bHQgfTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgZm9yICh2YXIga2V5IGluIGtleXNUb0RldGVjdCkge1xyXG4gICAgICAgIHZhciBzdGF0ZV8xID0gX2xvb3BfMShrZXkpO1xyXG4gICAgICAgIGlmICh0eXBlb2Ygc3RhdGVfMSA9PT0gXCJvYmplY3RcIilcclxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlXzEudmFsdWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4geyB3YXNNdXRhdGVkOiBmYWxzZSB9O1xyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZUltbXV0YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZShvcHRpb25zKSB7XHJcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxyXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIikge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBmdW5jdGlvbiAobmV4dCkgeyByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikgeyByZXR1cm4gbmV4dChhY3Rpb24pOyB9OyB9OyB9O1xyXG4gICAgfVxyXG4gICAgdmFyIF9jID0gb3B0aW9ucy5pc0ltbXV0YWJsZSwgaXNJbW11dGFibGUgPSBfYyA9PT0gdm9pZCAwID8gaXNJbW11dGFibGVEZWZhdWx0IDogX2MsIGlnbm9yZWRQYXRocyA9IG9wdGlvbnMuaWdub3JlZFBhdGhzLCBfZCA9IG9wdGlvbnMud2FybkFmdGVyLCB3YXJuQWZ0ZXIgPSBfZCA9PT0gdm9pZCAwID8gMzIgOiBfZCwgaWdub3JlID0gb3B0aW9ucy5pZ25vcmU7XHJcbiAgICBpZ25vcmVkUGF0aHMgPSBpZ25vcmVkUGF0aHMgfHwgaWdub3JlO1xyXG4gICAgdmFyIHRyYWNrID0gdHJhY2tGb3JNdXRhdGlvbnMuYmluZChudWxsLCBpc0ltbXV0YWJsZSwgaWdub3JlZFBhdGhzKTtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoX2MpIHtcclxuICAgICAgICB2YXIgZ2V0U3RhdGUgPSBfYy5nZXRTdGF0ZTtcclxuICAgICAgICB2YXIgc3RhdGUgPSBnZXRTdGF0ZSgpO1xyXG4gICAgICAgIHZhciB0cmFja2VyID0gdHJhY2soc3RhdGUpO1xyXG4gICAgICAgIHZhciByZXN1bHQ7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChuZXh0KSB7IHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgICAgIHZhciBtZWFzdXJlVXRpbHMgPSBnZXRUaW1lTWVhc3VyZVV0aWxzKHdhcm5BZnRlciwgXCJJbW11dGFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmVcIik7XHJcbiAgICAgICAgICAgIG1lYXN1cmVVdGlscy5tZWFzdXJlVGltZShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZSA9IGdldFN0YXRlKCk7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB0cmFja2VyLmRldGVjdE11dGF0aW9ucygpO1xyXG4gICAgICAgICAgICAgICAgdHJhY2tlciA9IHRyYWNrKHN0YXRlKTtcclxuICAgICAgICAgICAgICAgIGludmFyaWFudCghcmVzdWx0Lndhc011dGF0ZWQsIFwiQSBzdGF0ZSBtdXRhdGlvbiB3YXMgZGV0ZWN0ZWQgYmV0d2VlbiBkaXNwYXRjaGVzLCBpbiB0aGUgcGF0aCAnXCIgKyAocmVzdWx0LnBhdGggfHwgXCJcIikgKyBcIicuICBUaGlzIG1heSBjYXVzZSBpbmNvcnJlY3QgYmVoYXZpb3IuIChodHRwczovL3JlZHV4LmpzLm9yZy9zdHlsZS1ndWlkZS9zdHlsZS1ndWlkZSNkby1ub3QtbXV0YXRlLXN0YXRlKVwiKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHZhciBkaXNwYXRjaGVkQWN0aW9uID0gbmV4dChhY3Rpb24pO1xyXG4gICAgICAgICAgICBtZWFzdXJlVXRpbHMubWVhc3VyZVRpbWUoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgc3RhdGUgPSBnZXRTdGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdHJhY2tlci5kZXRlY3RNdXRhdGlvbnMoKTtcclxuICAgICAgICAgICAgICAgIHRyYWNrZXIgPSB0cmFjayhzdGF0ZSk7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQud2FzTXV0YXRlZCAmJiBpbnZhcmlhbnQoIXJlc3VsdC53YXNNdXRhdGVkLCBcIkEgc3RhdGUgbXV0YXRpb24gd2FzIGRldGVjdGVkIGluc2lkZSBhIGRpc3BhdGNoLCBpbiB0aGUgcGF0aDogXCIgKyAocmVzdWx0LnBhdGggfHwgXCJcIikgKyBcIi4gVGFrZSBhIGxvb2sgYXQgdGhlIHJlZHVjZXIocykgaGFuZGxpbmcgdGhlIGFjdGlvbiBcIiArIHN0cmluZ2lmeShhY3Rpb24pICsgXCIuIChodHRwczovL3JlZHV4LmpzLm9yZy9zdHlsZS1ndWlkZS9zdHlsZS1ndWlkZSNkby1ub3QtbXV0YXRlLXN0YXRlKVwiKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIG1lYXN1cmVVdGlscy53YXJuSWZFeGNlZWRlZCgpO1xyXG4gICAgICAgICAgICByZXR1cm4gZGlzcGF0Y2hlZEFjdGlvbjtcclxuICAgICAgICB9OyB9O1xyXG4gICAgfTtcclxufVxyXG4vLyBzcmMvc2VyaWFsaXphYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlLnRzXHJcbmZ1bmN0aW9uIGlzUGxhaW4odmFsKSB7XHJcbiAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWw7XHJcbiAgICByZXR1cm4gdmFsID09IG51bGwgfHwgdHlwZSA9PT0gXCJzdHJpbmdcIiB8fCB0eXBlID09PSBcImJvb2xlYW5cIiB8fCB0eXBlID09PSBcIm51bWJlclwiIHx8IEFycmF5LmlzQXJyYXkodmFsKSB8fCBpc1BsYWluT2JqZWN0KHZhbCk7XHJcbn1cclxuZnVuY3Rpb24gZmluZE5vblNlcmlhbGl6YWJsZVZhbHVlKHZhbHVlLCBwYXRoLCBpc1NlcmlhbGl6YWJsZSwgZ2V0RW50cmllcywgaWdub3JlZFBhdGhzLCBjYWNoZSkge1xyXG4gICAgaWYgKHBhdGggPT09IHZvaWQgMCkgeyBwYXRoID0gXCJcIjsgfVxyXG4gICAgaWYgKGlzU2VyaWFsaXphYmxlID09PSB2b2lkIDApIHsgaXNTZXJpYWxpemFibGUgPSBpc1BsYWluOyB9XHJcbiAgICBpZiAoaWdub3JlZFBhdGhzID09PSB2b2lkIDApIHsgaWdub3JlZFBhdGhzID0gW107IH1cclxuICAgIHZhciBmb3VuZE5lc3RlZFNlcmlhbGl6YWJsZTtcclxuICAgIGlmICghaXNTZXJpYWxpemFibGUodmFsdWUpKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAga2V5UGF0aDogcGF0aCB8fCBcIjxyb290PlwiLFxyXG4gICAgICAgICAgICB2YWx1ZTogdmFsdWVcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJvYmplY3RcIiB8fCB2YWx1ZSA9PT0gbnVsbCkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGlmIChjYWNoZSA9PSBudWxsID8gdm9pZCAwIDogY2FjaGUuaGFzKHZhbHVlKSlcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB2YXIgZW50cmllcyA9IGdldEVudHJpZXMgIT0gbnVsbCA/IGdldEVudHJpZXModmFsdWUpIDogT2JqZWN0LmVudHJpZXModmFsdWUpO1xyXG4gICAgdmFyIGhhc0lnbm9yZWRQYXRocyA9IGlnbm9yZWRQYXRocy5sZW5ndGggPiAwO1xyXG4gICAgdmFyIF9sb29wXzIgPSBmdW5jdGlvbiAoa2V5LCBuZXN0ZWRWYWx1ZSkge1xyXG4gICAgICAgIHZhciBuZXN0ZWRQYXRoID0gcGF0aCA/IHBhdGggKyBcIi5cIiArIGtleSA6IGtleTtcclxuICAgICAgICBpZiAoaGFzSWdub3JlZFBhdGhzKSB7XHJcbiAgICAgICAgICAgIHZhciBoYXNNYXRjaGVzID0gaWdub3JlZFBhdGhzLnNvbWUoZnVuY3Rpb24gKGlnbm9yZWQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChpZ25vcmVkIGluc3RhbmNlb2YgUmVnRXhwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlnbm9yZWQudGVzdChuZXN0ZWRQYXRoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXN0ZWRQYXRoID09PSBpZ25vcmVkO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgaWYgKGhhc01hdGNoZXMpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcImNvbnRpbnVlXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFpc1NlcmlhbGl6YWJsZShuZXN0ZWRWYWx1ZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IHtcclxuICAgICAgICAgICAgICAgICAgICBrZXlQYXRoOiBuZXN0ZWRQYXRoLFxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBuZXN0ZWRWYWx1ZVxyXG4gICAgICAgICAgICAgICAgfSB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHlwZW9mIG5lc3RlZFZhbHVlID09PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgICAgIGZvdW5kTmVzdGVkU2VyaWFsaXphYmxlID0gZmluZE5vblNlcmlhbGl6YWJsZVZhbHVlKG5lc3RlZFZhbHVlLCBuZXN0ZWRQYXRoLCBpc1NlcmlhbGl6YWJsZSwgZ2V0RW50cmllcywgaWdub3JlZFBhdGhzLCBjYWNoZSk7XHJcbiAgICAgICAgICAgIGlmIChmb3VuZE5lc3RlZFNlcmlhbGl6YWJsZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IGZvdW5kTmVzdGVkU2VyaWFsaXphYmxlIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgZm9yICh2YXIgX2kgPSAwLCBlbnRyaWVzXzEgPSBlbnRyaWVzOyBfaSA8IGVudHJpZXNfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICB2YXIgX2MgPSBlbnRyaWVzXzFbX2ldLCBrZXkgPSBfY1swXSwgbmVzdGVkVmFsdWUgPSBfY1sxXTtcclxuICAgICAgICB2YXIgc3RhdGVfMiA9IF9sb29wXzIoa2V5LCBuZXN0ZWRWYWx1ZSk7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBzdGF0ZV8yID09PSBcIm9iamVjdFwiKVxyXG4gICAgICAgICAgICByZXR1cm4gc3RhdGVfMi52YWx1ZTtcclxuICAgIH1cclxuICAgIGlmIChjYWNoZSAmJiBpc05lc3RlZEZyb3plbih2YWx1ZSkpXHJcbiAgICAgICAgY2FjaGUuYWRkKHZhbHVlKTtcclxuICAgIHJldHVybiBmYWxzZTtcclxufVxyXG5mdW5jdGlvbiBpc05lc3RlZEZyb3plbih2YWx1ZSkge1xyXG4gICAgaWYgKCFPYmplY3QuaXNGcm96ZW4odmFsdWUpKVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIGZvciAodmFyIF9pID0gMCwgX2MgPSBPYmplY3QudmFsdWVzKHZhbHVlKTsgX2kgPCBfYy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICB2YXIgbmVzdGVkVmFsdWUgPSBfY1tfaV07XHJcbiAgICAgICAgaWYgKHR5cGVvZiBuZXN0ZWRWYWx1ZSAhPT0gXCJvYmplY3RcIiB8fCBuZXN0ZWRWYWx1ZSA9PT0gbnVsbClcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgaWYgKCFpc05lc3RlZEZyb3plbihuZXN0ZWRWYWx1ZSkpXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZVNlcmlhbGl6YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZShvcHRpb25zKSB7XHJcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxyXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIikge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBmdW5jdGlvbiAobmV4dCkgeyByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikgeyByZXR1cm4gbmV4dChhY3Rpb24pOyB9OyB9OyB9O1xyXG4gICAgfVxyXG4gICAgdmFyIF9jID0gb3B0aW9ucy5pc1NlcmlhbGl6YWJsZSwgaXNTZXJpYWxpemFibGUgPSBfYyA9PT0gdm9pZCAwID8gaXNQbGFpbiA6IF9jLCBnZXRFbnRyaWVzID0gb3B0aW9ucy5nZXRFbnRyaWVzLCBfZCA9IG9wdGlvbnMuaWdub3JlZEFjdGlvbnMsIGlnbm9yZWRBY3Rpb25zID0gX2QgPT09IHZvaWQgMCA/IFtdIDogX2QsIF9lID0gb3B0aW9ucy5pZ25vcmVkQWN0aW9uUGF0aHMsIGlnbm9yZWRBY3Rpb25QYXRocyA9IF9lID09PSB2b2lkIDAgPyBbXCJtZXRhLmFyZ1wiLCBcIm1ldGEuYmFzZVF1ZXJ5TWV0YVwiXSA6IF9lLCBfZiA9IG9wdGlvbnMuaWdub3JlZFBhdGhzLCBpZ25vcmVkUGF0aHMgPSBfZiA9PT0gdm9pZCAwID8gW10gOiBfZiwgX2cgPSBvcHRpb25zLndhcm5BZnRlciwgd2FybkFmdGVyID0gX2cgPT09IHZvaWQgMCA/IDMyIDogX2csIF9oID0gb3B0aW9ucy5pZ25vcmVTdGF0ZSwgaWdub3JlU3RhdGUgPSBfaCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfaCwgX2ogPSBvcHRpb25zLmlnbm9yZUFjdGlvbnMsIGlnbm9yZUFjdGlvbnMgPSBfaiA9PT0gdm9pZCAwID8gZmFsc2UgOiBfaiwgX2sgPSBvcHRpb25zLmRpc2FibGVDYWNoZSwgZGlzYWJsZUNhY2hlID0gX2sgPT09IHZvaWQgMCA/IGZhbHNlIDogX2s7XHJcbiAgICB2YXIgY2FjaGUgPSAhZGlzYWJsZUNhY2hlICYmIFdlYWtTZXQgPyBuZXcgV2Vha1NldCgpIDogdm9pZCAwO1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzdG9yZUFQSSkgeyByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHsgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcclxuICAgICAgICB2YXIgcmVzdWx0ID0gbmV4dChhY3Rpb24pO1xyXG4gICAgICAgIHZhciBtZWFzdXJlVXRpbHMgPSBnZXRUaW1lTWVhc3VyZVV0aWxzKHdhcm5BZnRlciwgXCJTZXJpYWxpemFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmVcIik7XHJcbiAgICAgICAgaWYgKCFpZ25vcmVBY3Rpb25zICYmICEoaWdub3JlZEFjdGlvbnMubGVuZ3RoICYmIGlnbm9yZWRBY3Rpb25zLmluZGV4T2YoYWN0aW9uLnR5cGUpICE9PSAtMSkpIHtcclxuICAgICAgICAgICAgbWVhc3VyZVV0aWxzLm1lYXN1cmVUaW1lKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBmb3VuZEFjdGlvbk5vblNlcmlhbGl6YWJsZVZhbHVlID0gZmluZE5vblNlcmlhbGl6YWJsZVZhbHVlKGFjdGlvbiwgXCJcIiwgaXNTZXJpYWxpemFibGUsIGdldEVudHJpZXMsIGlnbm9yZWRBY3Rpb25QYXRocywgY2FjaGUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGZvdW5kQWN0aW9uTm9uU2VyaWFsaXphYmxlVmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIga2V5UGF0aCA9IGZvdW5kQWN0aW9uTm9uU2VyaWFsaXphYmxlVmFsdWUua2V5UGF0aCwgdmFsdWUgPSBmb3VuZEFjdGlvbk5vblNlcmlhbGl6YWJsZVZhbHVlLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJBIG5vbi1zZXJpYWxpemFibGUgdmFsdWUgd2FzIGRldGVjdGVkIGluIGFuIGFjdGlvbiwgaW4gdGhlIHBhdGg6IGBcIiArIGtleVBhdGggKyBcImAuIFZhbHVlOlwiLCB2YWx1ZSwgXCJcXG5UYWtlIGEgbG9vayBhdCB0aGUgbG9naWMgdGhhdCBkaXNwYXRjaGVkIHRoaXMgYWN0aW9uOiBcIiwgYWN0aW9uLCBcIlxcbihTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvZmFxL2FjdGlvbnMjd2h5LXNob3VsZC10eXBlLWJlLWEtc3RyaW5nLW9yLWF0LWxlYXN0LXNlcmlhbGl6YWJsZS13aHktc2hvdWxkLW15LWFjdGlvbi10eXBlcy1iZS1jb25zdGFudHMpXCIsIFwiXFxuKFRvIGFsbG93IG5vbi1zZXJpYWxpemFibGUgdmFsdWVzIHNlZTogaHR0cHM6Ly9yZWR1eC10b29sa2l0LmpzLm9yZy91c2FnZS91c2FnZS1ndWlkZSN3b3JraW5nLXdpdGgtbm9uLXNlcmlhbGl6YWJsZS1kYXRhKVwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghaWdub3JlU3RhdGUpIHtcclxuICAgICAgICAgICAgbWVhc3VyZVV0aWxzLm1lYXN1cmVUaW1lKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBzdGF0ZSA9IHN0b3JlQVBJLmdldFN0YXRlKCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgZm91bmRTdGF0ZU5vblNlcmlhbGl6YWJsZVZhbHVlID0gZmluZE5vblNlcmlhbGl6YWJsZVZhbHVlKHN0YXRlLCBcIlwiLCBpc1NlcmlhbGl6YWJsZSwgZ2V0RW50cmllcywgaWdub3JlZFBhdGhzLCBjYWNoZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZm91bmRTdGF0ZU5vblNlcmlhbGl6YWJsZVZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGtleVBhdGggPSBmb3VuZFN0YXRlTm9uU2VyaWFsaXphYmxlVmFsdWUua2V5UGF0aCwgdmFsdWUgPSBmb3VuZFN0YXRlTm9uU2VyaWFsaXphYmxlVmFsdWUudmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkEgbm9uLXNlcmlhbGl6YWJsZSB2YWx1ZSB3YXMgZGV0ZWN0ZWQgaW4gdGhlIHN0YXRlLCBpbiB0aGUgcGF0aDogYFwiICsga2V5UGF0aCArIFwiYC4gVmFsdWU6XCIsIHZhbHVlLCBcIlxcblRha2UgYSBsb29rIGF0IHRoZSByZWR1Y2VyKHMpIGhhbmRsaW5nIHRoaXMgYWN0aW9uIHR5cGU6IFwiICsgYWN0aW9uLnR5cGUgKyBcIi5cXG4oU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2ZhcS9vcmdhbml6aW5nLXN0YXRlI2Nhbi1pLXB1dC1mdW5jdGlvbnMtcHJvbWlzZXMtb3Itb3RoZXItbm9uLXNlcmlhbGl6YWJsZS1pdGVtcy1pbi1teS1zdG9yZS1zdGF0ZSlcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBtZWFzdXJlVXRpbHMud2FybklmRXhjZWVkZWQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH07IH07IH07XHJcbn1cclxuLy8gc3JjL2dldERlZmF1bHRNaWRkbGV3YXJlLnRzXHJcbmZ1bmN0aW9uIGlzQm9vbGVhbih4KSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIHggPT09IFwiYm9vbGVhblwiO1xyXG59XHJcbmZ1bmN0aW9uIGN1cnJ5R2V0RGVmYXVsdE1pZGRsZXdhcmUoKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gY3VycmllZEdldERlZmF1bHRNaWRkbGV3YXJlKG9wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm4gZ2V0RGVmYXVsdE1pZGRsZXdhcmUob3B0aW9ucyk7XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGdldERlZmF1bHRNaWRkbGV3YXJlKG9wdGlvbnMpIHtcclxuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XHJcbiAgICB2YXIgX2MgPSBvcHRpb25zLnRodW5rLCB0aHVuayA9IF9jID09PSB2b2lkIDAgPyB0cnVlIDogX2MsIF9kID0gb3B0aW9ucy5pbW11dGFibGVDaGVjaywgaW1tdXRhYmxlQ2hlY2sgPSBfZCA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9kLCBfZSA9IG9wdGlvbnMuc2VyaWFsaXphYmxlQ2hlY2ssIHNlcmlhbGl6YWJsZUNoZWNrID0gX2UgPT09IHZvaWQgMCA/IHRydWUgOiBfZSwgX2YgPSBvcHRpb25zLmFjdGlvbkNyZWF0b3JDaGVjaywgYWN0aW9uQ3JlYXRvckNoZWNrID0gX2YgPT09IHZvaWQgMCA/IHRydWUgOiBfZjtcclxuICAgIHZhciBtaWRkbGV3YXJlQXJyYXkgPSBuZXcgTWlkZGxld2FyZUFycmF5KCk7XHJcbiAgICBpZiAodGh1bmspIHtcclxuICAgICAgICBpZiAoaXNCb29sZWFuKHRodW5rKSkge1xyXG4gICAgICAgICAgICBtaWRkbGV3YXJlQXJyYXkucHVzaCh0aHVua01pZGRsZXdhcmUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgbWlkZGxld2FyZUFycmF5LnB1c2godGh1bmtNaWRkbGV3YXJlLndpdGhFeHRyYUFyZ3VtZW50KHRodW5rLmV4dHJhQXJndW1lbnQpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XHJcbiAgICAgICAgaWYgKGltbXV0YWJsZUNoZWNrKSB7XHJcbiAgICAgICAgICAgIHZhciBpbW11dGFibGVPcHRpb25zID0ge307XHJcbiAgICAgICAgICAgIGlmICghaXNCb29sZWFuKGltbXV0YWJsZUNoZWNrKSkge1xyXG4gICAgICAgICAgICAgICAgaW1tdXRhYmxlT3B0aW9ucyA9IGltbXV0YWJsZUNoZWNrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG1pZGRsZXdhcmVBcnJheS51bnNoaWZ0KGNyZWF0ZUltbXV0YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZShpbW11dGFibGVPcHRpb25zKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChzZXJpYWxpemFibGVDaGVjaykge1xyXG4gICAgICAgICAgICB2YXIgc2VyaWFsaXphYmxlT3B0aW9ucyA9IHt9O1xyXG4gICAgICAgICAgICBpZiAoIWlzQm9vbGVhbihzZXJpYWxpemFibGVDaGVjaykpIHtcclxuICAgICAgICAgICAgICAgIHNlcmlhbGl6YWJsZU9wdGlvbnMgPSBzZXJpYWxpemFibGVDaGVjaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBtaWRkbGV3YXJlQXJyYXkucHVzaChjcmVhdGVTZXJpYWxpemFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUoc2VyaWFsaXphYmxlT3B0aW9ucykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYWN0aW9uQ3JlYXRvckNoZWNrKSB7XHJcbiAgICAgICAgICAgIHZhciBhY3Rpb25DcmVhdG9yT3B0aW9ucyA9IHt9O1xyXG4gICAgICAgICAgICBpZiAoIWlzQm9vbGVhbihhY3Rpb25DcmVhdG9yQ2hlY2spKSB7XHJcbiAgICAgICAgICAgICAgICBhY3Rpb25DcmVhdG9yT3B0aW9ucyA9IGFjdGlvbkNyZWF0b3JDaGVjaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBtaWRkbGV3YXJlQXJyYXkudW5zaGlmdChjcmVhdGVBY3Rpb25DcmVhdG9ySW52YXJpYW50TWlkZGxld2FyZShhY3Rpb25DcmVhdG9yT3B0aW9ucykpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBtaWRkbGV3YXJlQXJyYXk7XHJcbn1cclxuLy8gc3JjL2NvbmZpZ3VyZVN0b3JlLnRzXHJcbnZhciBJU19QUk9EVUNUSU9OID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiO1xyXG5mdW5jdGlvbiBjb25maWd1cmVTdG9yZShvcHRpb25zKSB7XHJcbiAgICB2YXIgY3VycmllZEdldERlZmF1bHRNaWRkbGV3YXJlID0gY3VycnlHZXREZWZhdWx0TWlkZGxld2FyZSgpO1xyXG4gICAgdmFyIF9jID0gb3B0aW9ucyB8fCB7fSwgX2QgPSBfYy5yZWR1Y2VyLCByZWR1Y2VyID0gX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLCBfZSA9IF9jLm1pZGRsZXdhcmUsIG1pZGRsZXdhcmUgPSBfZSA9PT0gdm9pZCAwID8gY3VycmllZEdldERlZmF1bHRNaWRkbGV3YXJlKCkgOiBfZSwgX2YgPSBfYy5kZXZUb29scywgZGV2VG9vbHMgPSBfZiA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9mLCBfZyA9IF9jLnByZWxvYWRlZFN0YXRlLCBwcmVsb2FkZWRTdGF0ZSA9IF9nID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZywgX2ggPSBfYy5lbmhhbmNlcnMsIGVuaGFuY2VycyA9IF9oID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfaDtcclxuICAgIHZhciByb290UmVkdWNlcjtcclxuICAgIGlmICh0eXBlb2YgcmVkdWNlciA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgcm9vdFJlZHVjZXIgPSByZWR1Y2VyO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNQbGFpbk9iamVjdChyZWR1Y2VyKSkge1xyXG4gICAgICAgIHJvb3RSZWR1Y2VyID0gY29tYmluZVJlZHVjZXJzKHJlZHVjZXIpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdcInJlZHVjZXJcIiBpcyBhIHJlcXVpcmVkIGFyZ3VtZW50LCBhbmQgbXVzdCBiZSBhIGZ1bmN0aW9uIG9yIGFuIG9iamVjdCBvZiBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgcGFzc2VkIHRvIGNvbWJpbmVSZWR1Y2VycycpO1xyXG4gICAgfVxyXG4gICAgdmFyIGZpbmFsTWlkZGxld2FyZSA9IG1pZGRsZXdhcmU7XHJcbiAgICBpZiAodHlwZW9mIGZpbmFsTWlkZGxld2FyZSA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgZmluYWxNaWRkbGV3YXJlID0gZmluYWxNaWRkbGV3YXJlKGN1cnJpZWRHZXREZWZhdWx0TWlkZGxld2FyZSk7XHJcbiAgICAgICAgaWYgKCFJU19QUk9EVUNUSU9OICYmICFBcnJheS5pc0FycmF5KGZpbmFsTWlkZGxld2FyZSkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwid2hlbiB1c2luZyBhIG1pZGRsZXdhcmUgYnVpbGRlciBmdW5jdGlvbiwgYW4gYXJyYXkgb2YgbWlkZGxld2FyZSBtdXN0IGJlIHJldHVybmVkXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmICghSVNfUFJPRFVDVElPTiAmJiBmaW5hbE1pZGRsZXdhcmUuc29tZShmdW5jdGlvbiAoaXRlbSkgeyByZXR1cm4gdHlwZW9mIGl0ZW0gIT09IFwiZnVuY3Rpb25cIjsgfSkpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJlYWNoIG1pZGRsZXdhcmUgcHJvdmlkZWQgdG8gY29uZmlndXJlU3RvcmUgbXVzdCBiZSBhIGZ1bmN0aW9uXCIpO1xyXG4gICAgfVxyXG4gICAgdmFyIG1pZGRsZXdhcmVFbmhhbmNlciA9IGFwcGx5TWlkZGxld2FyZS5hcHBseSh2b2lkIDAsIGZpbmFsTWlkZGxld2FyZSk7XHJcbiAgICB2YXIgZmluYWxDb21wb3NlID0gY29tcG9zZTI7XHJcbiAgICBpZiAoZGV2VG9vbHMpIHtcclxuICAgICAgICBmaW5hbENvbXBvc2UgPSBjb21wb3NlV2l0aERldlRvb2xzKF9fc3ByZWFkVmFsdWVzKHtcclxuICAgICAgICAgICAgdHJhY2U6ICFJU19QUk9EVUNUSU9OXHJcbiAgICAgICAgfSwgdHlwZW9mIGRldlRvb2xzID09PSBcIm9iamVjdFwiICYmIGRldlRvb2xzKSk7XHJcbiAgICB9XHJcbiAgICB2YXIgZGVmYXVsdEVuaGFuY2VycyA9IG5ldyBFbmhhbmNlckFycmF5KG1pZGRsZXdhcmVFbmhhbmNlcik7XHJcbiAgICB2YXIgc3RvcmVFbmhhbmNlcnMgPSBkZWZhdWx0RW5oYW5jZXJzO1xyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZW5oYW5jZXJzKSkge1xyXG4gICAgICAgIHN0b3JlRW5oYW5jZXJzID0gX19zcHJlYWRBcnJheShbbWlkZGxld2FyZUVuaGFuY2VyXSwgZW5oYW5jZXJzKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHR5cGVvZiBlbmhhbmNlcnMgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgIHN0b3JlRW5oYW5jZXJzID0gZW5oYW5jZXJzKGRlZmF1bHRFbmhhbmNlcnMpO1xyXG4gICAgfVxyXG4gICAgdmFyIGNvbXBvc2VkRW5oYW5jZXIgPSBmaW5hbENvbXBvc2UuYXBwbHkodm9pZCAwLCBzdG9yZUVuaGFuY2Vycyk7XHJcbiAgICByZXR1cm4gY3JlYXRlU3RvcmUocm9vdFJlZHVjZXIsIHByZWxvYWRlZFN0YXRlLCBjb21wb3NlZEVuaGFuY2VyKTtcclxufVxyXG4vLyBzcmMvY3JlYXRlUmVkdWNlci50c1xyXG5pbXBvcnQgY3JlYXRlTmV4dFN0YXRlMiwgeyBpc0RyYWZ0IGFzIGlzRHJhZnQyLCBpc0RyYWZ0YWJsZSBhcyBpc0RyYWZ0YWJsZTIgfSBmcm9tIFwiaW1tZXJcIjtcclxuLy8gc3JjL21hcEJ1aWxkZXJzLnRzXHJcbmZ1bmN0aW9uIGV4ZWN1dGVSZWR1Y2VyQnVpbGRlckNhbGxiYWNrKGJ1aWxkZXJDYWxsYmFjaykge1xyXG4gICAgdmFyIGFjdGlvbnNNYXAgPSB7fTtcclxuICAgIHZhciBhY3Rpb25NYXRjaGVycyA9IFtdO1xyXG4gICAgdmFyIGRlZmF1bHRDYXNlUmVkdWNlcjtcclxuICAgIHZhciBidWlsZGVyID0ge1xyXG4gICAgICAgIGFkZENhc2U6IGZ1bmN0aW9uICh0eXBlT3JBY3Rpb25DcmVhdG9yLCByZWR1Y2VyKSB7XHJcbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgIGlmIChhY3Rpb25NYXRjaGVycy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYGJ1aWxkZXIuYWRkQ2FzZWAgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIGJlZm9yZSBjYWxsaW5nIGBidWlsZGVyLmFkZE1hdGNoZXJgXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGRlZmF1bHRDYXNlUmVkdWNlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImBidWlsZGVyLmFkZENhc2VgIHNob3VsZCBvbmx5IGJlIGNhbGxlZCBiZWZvcmUgY2FsbGluZyBgYnVpbGRlci5hZGREZWZhdWx0Q2FzZWBcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgdHlwZU9yQWN0aW9uQ3JlYXRvciA9PT0gXCJzdHJpbmdcIiA/IHR5cGVPckFjdGlvbkNyZWF0b3IgOiB0eXBlT3JBY3Rpb25DcmVhdG9yLnR5cGU7XHJcbiAgICAgICAgICAgIGlmICghdHlwZSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYGJ1aWxkZXIuYWRkQ2FzZWAgY2Fubm90IGJlIGNhbGxlZCB3aXRoIGFuIGVtcHR5IGFjdGlvbiB0eXBlXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0eXBlIGluIGFjdGlvbnNNYXApIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImBidWlsZGVyLmFkZENhc2VgIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCB0d28gcmVkdWNlcnMgZm9yIHRoZSBzYW1lIGFjdGlvbiB0eXBlXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGFjdGlvbnNNYXBbdHlwZV0gPSByZWR1Y2VyO1xyXG4gICAgICAgICAgICByZXR1cm4gYnVpbGRlcjtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGFkZE1hdGNoZXI6IGZ1bmN0aW9uIChtYXRjaGVyLCByZWR1Y2VyKSB7XHJcbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgIGlmIChkZWZhdWx0Q2FzZVJlZHVjZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJgYnVpbGRlci5hZGRNYXRjaGVyYCBzaG91bGQgb25seSBiZSBjYWxsZWQgYmVmb3JlIGNhbGxpbmcgYGJ1aWxkZXIuYWRkRGVmYXVsdENhc2VgXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGFjdGlvbk1hdGNoZXJzLnB1c2goeyBtYXRjaGVyOiBtYXRjaGVyLCByZWR1Y2VyOiByZWR1Y2VyIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gYnVpbGRlcjtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGFkZERlZmF1bHRDYXNlOiBmdW5jdGlvbiAocmVkdWNlcikge1xyXG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGVmYXVsdENhc2VSZWR1Y2VyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYGJ1aWxkZXIuYWRkRGVmYXVsdENhc2VgIGNhbiBvbmx5IGJlIGNhbGxlZCBvbmNlXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGRlZmF1bHRDYXNlUmVkdWNlciA9IHJlZHVjZXI7XHJcbiAgICAgICAgICAgIHJldHVybiBidWlsZGVyO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBidWlsZGVyQ2FsbGJhY2soYnVpbGRlcik7XHJcbiAgICByZXR1cm4gW2FjdGlvbnNNYXAsIGFjdGlvbk1hdGNoZXJzLCBkZWZhdWx0Q2FzZVJlZHVjZXJdO1xyXG59XHJcbi8vIHNyYy9jcmVhdGVSZWR1Y2VyLnRzXHJcbmZ1bmN0aW9uIGlzU3RhdGVGdW5jdGlvbih4KSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIjtcclxufVxyXG52YXIgaGFzV2FybmVkQWJvdXRPYmplY3ROb3RhdGlvbiA9IGZhbHNlO1xyXG5mdW5jdGlvbiBjcmVhdGVSZWR1Y2VyKGluaXRpYWxTdGF0ZSwgbWFwT3JCdWlsZGVyQ2FsbGJhY2ssIGFjdGlvbk1hdGNoZXJzLCBkZWZhdWx0Q2FzZVJlZHVjZXIpIHtcclxuICAgIGlmIChhY3Rpb25NYXRjaGVycyA9PT0gdm9pZCAwKSB7IGFjdGlvbk1hdGNoZXJzID0gW107IH1cclxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcclxuICAgICAgICBpZiAodHlwZW9mIG1hcE9yQnVpbGRlckNhbGxiYWNrID09PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgICAgIGlmICghaGFzV2FybmVkQWJvdXRPYmplY3ROb3RhdGlvbikge1xyXG4gICAgICAgICAgICAgICAgaGFzV2FybmVkQWJvdXRPYmplY3ROb3RhdGlvbiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJUaGUgb2JqZWN0IG5vdGF0aW9uIGZvciBgY3JlYXRlUmVkdWNlcmAgaXMgZGVwcmVjYXRlZCwgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBSVEsgMi4wLiBQbGVhc2UgdXNlIHRoZSAnYnVpbGRlciBjYWxsYmFjaycgbm90YXRpb24gaW5zdGVhZDogaHR0cHM6Ly9yZWR1eC10b29sa2l0LmpzLm9yZy9hcGkvY3JlYXRlUmVkdWNlclwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHZhciBfYyA9IHR5cGVvZiBtYXBPckJ1aWxkZXJDYWxsYmFjayA9PT0gXCJmdW5jdGlvblwiID8gZXhlY3V0ZVJlZHVjZXJCdWlsZGVyQ2FsbGJhY2sobWFwT3JCdWlsZGVyQ2FsbGJhY2spIDogW21hcE9yQnVpbGRlckNhbGxiYWNrLCBhY3Rpb25NYXRjaGVycywgZGVmYXVsdENhc2VSZWR1Y2VyXSwgYWN0aW9uc01hcCA9IF9jWzBdLCBmaW5hbEFjdGlvbk1hdGNoZXJzID0gX2NbMV0sIGZpbmFsRGVmYXVsdENhc2VSZWR1Y2VyID0gX2NbMl07XHJcbiAgICB2YXIgZ2V0SW5pdGlhbFN0YXRlO1xyXG4gICAgaWYgKGlzU3RhdGVGdW5jdGlvbihpbml0aWFsU3RhdGUpKSB7XHJcbiAgICAgICAgZ2V0SW5pdGlhbFN0YXRlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gZnJlZXplRHJhZnRhYmxlKGluaXRpYWxTdGF0ZSgpKTsgfTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHZhciBmcm96ZW5Jbml0aWFsU3RhdGVfMSA9IGZyZWV6ZURyYWZ0YWJsZShpbml0aWFsU3RhdGUpO1xyXG4gICAgICAgIGdldEluaXRpYWxTdGF0ZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZyb3plbkluaXRpYWxTdGF0ZV8xOyB9O1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gcmVkdWNlcihzdGF0ZSwgYWN0aW9uKSB7XHJcbiAgICAgICAgaWYgKHN0YXRlID09PSB2b2lkIDApIHsgc3RhdGUgPSBnZXRJbml0aWFsU3RhdGUoKTsgfVxyXG4gICAgICAgIHZhciBjYXNlUmVkdWNlcnMgPSBfX3NwcmVhZEFycmF5KFtcclxuICAgICAgICAgICAgYWN0aW9uc01hcFthY3Rpb24udHlwZV1cclxuICAgICAgICBdLCBmaW5hbEFjdGlvbk1hdGNoZXJzLmZpbHRlcihmdW5jdGlvbiAoX2MpIHtcclxuICAgICAgICAgICAgdmFyIG1hdGNoZXIgPSBfYy5tYXRjaGVyO1xyXG4gICAgICAgICAgICByZXR1cm4gbWF0Y2hlcihhY3Rpb24pO1xyXG4gICAgICAgIH0pLm1hcChmdW5jdGlvbiAoX2MpIHtcclxuICAgICAgICAgICAgdmFyIHJlZHVjZXIyID0gX2MucmVkdWNlcjtcclxuICAgICAgICAgICAgcmV0dXJuIHJlZHVjZXIyO1xyXG4gICAgICAgIH0pKTtcclxuICAgICAgICBpZiAoY2FzZVJlZHVjZXJzLmZpbHRlcihmdW5jdGlvbiAoY3IpIHsgcmV0dXJuICEhY3I7IH0pLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICBjYXNlUmVkdWNlcnMgPSBbZmluYWxEZWZhdWx0Q2FzZVJlZHVjZXJdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY2FzZVJlZHVjZXJzLnJlZHVjZShmdW5jdGlvbiAocHJldmlvdXNTdGF0ZSwgY2FzZVJlZHVjZXIpIHtcclxuICAgICAgICAgICAgaWYgKGNhc2VSZWR1Y2VyKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNEcmFmdDIocHJldmlvdXNTdGF0ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZHJhZnQgPSBwcmV2aW91c1N0YXRlO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBjYXNlUmVkdWNlcihkcmFmdCwgYWN0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0ID09PSB2b2lkIDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByZXZpb3VzU3RhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICghaXNEcmFmdGFibGUyKHByZXZpb3VzU3RhdGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGNhc2VSZWR1Y2VyKHByZXZpb3VzU3RhdGUsIGFjdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gdm9pZCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcmV2aW91c1N0YXRlID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJldmlvdXNTdGF0ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihcIkEgY2FzZSByZWR1Y2VyIG9uIGEgbm9uLWRyYWZ0YWJsZSB2YWx1ZSBtdXN0IG5vdCByZXR1cm4gdW5kZWZpbmVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZU5leHRTdGF0ZTIocHJldmlvdXNTdGF0ZSwgZnVuY3Rpb24gKGRyYWZ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjYXNlUmVkdWNlcihkcmFmdCwgYWN0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcHJldmlvdXNTdGF0ZTtcclxuICAgICAgICB9LCBzdGF0ZSk7XHJcbiAgICB9XHJcbiAgICByZWR1Y2VyLmdldEluaXRpYWxTdGF0ZSA9IGdldEluaXRpYWxTdGF0ZTtcclxuICAgIHJldHVybiByZWR1Y2VyO1xyXG59XHJcbi8vIHNyYy9jcmVhdGVTbGljZS50c1xyXG52YXIgaGFzV2FybmVkQWJvdXRPYmplY3ROb3RhdGlvbjIgPSBmYWxzZTtcclxuZnVuY3Rpb24gZ2V0VHlwZTIoc2xpY2UsIGFjdGlvbktleSkge1xyXG4gICAgcmV0dXJuIHNsaWNlICsgXCIvXCIgKyBhY3Rpb25LZXk7XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlU2xpY2Uob3B0aW9ucykge1xyXG4gICAgdmFyIG5hbWUgPSBvcHRpb25zLm5hbWU7XHJcbiAgICBpZiAoIW5hbWUpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJgbmFtZWAgaXMgYSByZXF1aXJlZCBvcHRpb24gZm9yIGNyZWF0ZVNsaWNlXCIpO1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSBcInVuZGVmaW5lZFwiICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcImRldmVsb3BtZW50XCIpIHtcclxuICAgICAgICBpZiAob3B0aW9ucy5pbml0aWFsU3RhdGUgPT09IHZvaWQgMCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiWW91IG11c3QgcHJvdmlkZSBhbiBgaW5pdGlhbFN0YXRlYCB2YWx1ZSB0aGF0IGlzIG5vdCBgdW5kZWZpbmVkYC4gWW91IG1heSBoYXZlIG1pc3NwZWxsZWQgYGluaXRpYWxTdGF0ZWBcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgdmFyIGluaXRpYWxTdGF0ZSA9IHR5cGVvZiBvcHRpb25zLmluaXRpYWxTdGF0ZSA9PSBcImZ1bmN0aW9uXCIgPyBvcHRpb25zLmluaXRpYWxTdGF0ZSA6IGZyZWV6ZURyYWZ0YWJsZShvcHRpb25zLmluaXRpYWxTdGF0ZSk7XHJcbiAgICB2YXIgcmVkdWNlcnMgPSBvcHRpb25zLnJlZHVjZXJzIHx8IHt9O1xyXG4gICAgdmFyIHJlZHVjZXJOYW1lcyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcclxuICAgIHZhciBzbGljZUNhc2VSZWR1Y2Vyc0J5TmFtZSA9IHt9O1xyXG4gICAgdmFyIHNsaWNlQ2FzZVJlZHVjZXJzQnlUeXBlID0ge307XHJcbiAgICB2YXIgYWN0aW9uQ3JlYXRvcnMgPSB7fTtcclxuICAgIHJlZHVjZXJOYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChyZWR1Y2VyTmFtZSkge1xyXG4gICAgICAgIHZhciBtYXliZVJlZHVjZXJXaXRoUHJlcGFyZSA9IHJlZHVjZXJzW3JlZHVjZXJOYW1lXTtcclxuICAgICAgICB2YXIgdHlwZSA9IGdldFR5cGUyKG5hbWUsIHJlZHVjZXJOYW1lKTtcclxuICAgICAgICB2YXIgY2FzZVJlZHVjZXI7XHJcbiAgICAgICAgdmFyIHByZXBhcmVDYWxsYmFjaztcclxuICAgICAgICBpZiAoXCJyZWR1Y2VyXCIgaW4gbWF5YmVSZWR1Y2VyV2l0aFByZXBhcmUpIHtcclxuICAgICAgICAgICAgY2FzZVJlZHVjZXIgPSBtYXliZVJlZHVjZXJXaXRoUHJlcGFyZS5yZWR1Y2VyO1xyXG4gICAgICAgICAgICBwcmVwYXJlQ2FsbGJhY2sgPSBtYXliZVJlZHVjZXJXaXRoUHJlcGFyZS5wcmVwYXJlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY2FzZVJlZHVjZXIgPSBtYXliZVJlZHVjZXJXaXRoUHJlcGFyZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc2xpY2VDYXNlUmVkdWNlcnNCeU5hbWVbcmVkdWNlck5hbWVdID0gY2FzZVJlZHVjZXI7XHJcbiAgICAgICAgc2xpY2VDYXNlUmVkdWNlcnNCeVR5cGVbdHlwZV0gPSBjYXNlUmVkdWNlcjtcclxuICAgICAgICBhY3Rpb25DcmVhdG9yc1tyZWR1Y2VyTmFtZV0gPSBwcmVwYXJlQ2FsbGJhY2sgPyBjcmVhdGVBY3Rpb24odHlwZSwgcHJlcGFyZUNhbGxiYWNrKSA6IGNyZWF0ZUFjdGlvbih0eXBlKTtcclxuICAgIH0pO1xyXG4gICAgZnVuY3Rpb24gYnVpbGRSZWR1Y2VyKCkge1xyXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLmV4dHJhUmVkdWNlcnMgPT09IFwib2JqZWN0XCIpIHtcclxuICAgICAgICAgICAgICAgIGlmICghaGFzV2FybmVkQWJvdXRPYmplY3ROb3RhdGlvbjIpIHtcclxuICAgICAgICAgICAgICAgICAgICBoYXNXYXJuZWRBYm91dE9iamVjdE5vdGF0aW9uMiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiVGhlIG9iamVjdCBub3RhdGlvbiBmb3IgYGNyZWF0ZVNsaWNlLmV4dHJhUmVkdWNlcnNgIGlzIGRlcHJlY2F0ZWQsIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gUlRLIDIuMC4gUGxlYXNlIHVzZSB0aGUgJ2J1aWxkZXIgY2FsbGJhY2snIG5vdGF0aW9uIGluc3RlYWQ6IGh0dHBzOi8vcmVkdXgtdG9vbGtpdC5qcy5vcmcvYXBpL2NyZWF0ZVNsaWNlXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBfYyA9IHR5cGVvZiBvcHRpb25zLmV4dHJhUmVkdWNlcnMgPT09IFwiZnVuY3Rpb25cIiA/IGV4ZWN1dGVSZWR1Y2VyQnVpbGRlckNhbGxiYWNrKG9wdGlvbnMuZXh0cmFSZWR1Y2VycykgOiBbb3B0aW9ucy5leHRyYVJlZHVjZXJzXSwgX2QgPSBfY1swXSwgZXh0cmFSZWR1Y2VycyA9IF9kID09PSB2b2lkIDAgPyB7fSA6IF9kLCBfZSA9IF9jWzFdLCBhY3Rpb25NYXRjaGVycyA9IF9lID09PSB2b2lkIDAgPyBbXSA6IF9lLCBfZiA9IF9jWzJdLCBkZWZhdWx0Q2FzZVJlZHVjZXIgPSBfZiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Y7XHJcbiAgICAgICAgdmFyIGZpbmFsQ2FzZVJlZHVjZXJzID0gX19zcHJlYWRWYWx1ZXMoX19zcHJlYWRWYWx1ZXMoe30sIGV4dHJhUmVkdWNlcnMpLCBzbGljZUNhc2VSZWR1Y2Vyc0J5VHlwZSk7XHJcbiAgICAgICAgcmV0dXJuIGNyZWF0ZVJlZHVjZXIoaW5pdGlhbFN0YXRlLCBmdW5jdGlvbiAoYnVpbGRlcikge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gZmluYWxDYXNlUmVkdWNlcnMpIHtcclxuICAgICAgICAgICAgICAgIGJ1aWxkZXIuYWRkQ2FzZShrZXksIGZpbmFsQ2FzZVJlZHVjZXJzW2tleV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgYWN0aW9uTWF0Y2hlcnNfMSA9IGFjdGlvbk1hdGNoZXJzOyBfaSA8IGFjdGlvbk1hdGNoZXJzXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbSA9IGFjdGlvbk1hdGNoZXJzXzFbX2ldO1xyXG4gICAgICAgICAgICAgICAgYnVpbGRlci5hZGRNYXRjaGVyKG0ubWF0Y2hlciwgbS5yZWR1Y2VyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZGVmYXVsdENhc2VSZWR1Y2VyKSB7XHJcbiAgICAgICAgICAgICAgICBidWlsZGVyLmFkZERlZmF1bHRDYXNlKGRlZmF1bHRDYXNlUmVkdWNlcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHZhciBfcmVkdWNlcjtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgbmFtZTogbmFtZSxcclxuICAgICAgICByZWR1Y2VyOiBmdW5jdGlvbiAoc3RhdGUsIGFjdGlvbikge1xyXG4gICAgICAgICAgICBpZiAoIV9yZWR1Y2VyKVxyXG4gICAgICAgICAgICAgICAgX3JlZHVjZXIgPSBidWlsZFJlZHVjZXIoKTtcclxuICAgICAgICAgICAgcmV0dXJuIF9yZWR1Y2VyKHN0YXRlLCBhY3Rpb24pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYWN0aW9uczogYWN0aW9uQ3JlYXRvcnMsXHJcbiAgICAgICAgY2FzZVJlZHVjZXJzOiBzbGljZUNhc2VSZWR1Y2Vyc0J5TmFtZSxcclxuICAgICAgICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKCFfcmVkdWNlcilcclxuICAgICAgICAgICAgICAgIF9yZWR1Y2VyID0gYnVpbGRSZWR1Y2VyKCk7XHJcbiAgICAgICAgICAgIHJldHVybiBfcmVkdWNlci5nZXRJbml0aWFsU3RhdGUoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XHJcbi8vIHNyYy9lbnRpdGllcy9lbnRpdHlfc3RhdGUudHNcclxuZnVuY3Rpb24gZ2V0SW5pdGlhbEVudGl0eVN0YXRlKCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBpZHM6IFtdLFxyXG4gICAgICAgIGVudGl0aWVzOiB7fVxyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVJbml0aWFsU3RhdGVGYWN0b3J5KCkge1xyXG4gICAgZnVuY3Rpb24gZ2V0SW5pdGlhbFN0YXRlKGFkZGl0aW9uYWxTdGF0ZSkge1xyXG4gICAgICAgIGlmIChhZGRpdGlvbmFsU3RhdGUgPT09IHZvaWQgMCkgeyBhZGRpdGlvbmFsU3RhdGUgPSB7fTsgfVxyXG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKGdldEluaXRpYWxFbnRpdHlTdGF0ZSgpLCBhZGRpdGlvbmFsU3RhdGUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHsgZ2V0SW5pdGlhbFN0YXRlOiBnZXRJbml0aWFsU3RhdGUgfTtcclxufVxyXG4vLyBzcmMvZW50aXRpZXMvc3RhdGVfc2VsZWN0b3JzLnRzXHJcbmZ1bmN0aW9uIGNyZWF0ZVNlbGVjdG9yc0ZhY3RvcnkoKSB7XHJcbiAgICBmdW5jdGlvbiBnZXRTZWxlY3RvcnMoc2VsZWN0U3RhdGUpIHtcclxuICAgICAgICB2YXIgc2VsZWN0SWRzID0gZnVuY3Rpb24gKHN0YXRlKSB7IHJldHVybiBzdGF0ZS5pZHM7IH07XHJcbiAgICAgICAgdmFyIHNlbGVjdEVudGl0aWVzID0gZnVuY3Rpb24gKHN0YXRlKSB7IHJldHVybiBzdGF0ZS5lbnRpdGllczsgfTtcclxuICAgICAgICB2YXIgc2VsZWN0QWxsID0gY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3Ioc2VsZWN0SWRzLCBzZWxlY3RFbnRpdGllcywgZnVuY3Rpb24gKGlkcywgZW50aXRpZXMpIHsgcmV0dXJuIGlkcy5tYXAoZnVuY3Rpb24gKGlkKSB7IHJldHVybiBlbnRpdGllc1tpZF07IH0pOyB9KTtcclxuICAgICAgICB2YXIgc2VsZWN0SWQgPSBmdW5jdGlvbiAoXywgaWQpIHsgcmV0dXJuIGlkOyB9O1xyXG4gICAgICAgIHZhciBzZWxlY3RCeUlkID0gZnVuY3Rpb24gKGVudGl0aWVzLCBpZCkgeyByZXR1cm4gZW50aXRpZXNbaWRdOyB9O1xyXG4gICAgICAgIHZhciBzZWxlY3RUb3RhbCA9IGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yKHNlbGVjdElkcywgZnVuY3Rpb24gKGlkcykgeyByZXR1cm4gaWRzLmxlbmd0aDsgfSk7XHJcbiAgICAgICAgaWYgKCFzZWxlY3RTdGF0ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgc2VsZWN0SWRzOiBzZWxlY3RJZHMsXHJcbiAgICAgICAgICAgICAgICBzZWxlY3RFbnRpdGllczogc2VsZWN0RW50aXRpZXMsXHJcbiAgICAgICAgICAgICAgICBzZWxlY3RBbGw6IHNlbGVjdEFsbCxcclxuICAgICAgICAgICAgICAgIHNlbGVjdFRvdGFsOiBzZWxlY3RUb3RhbCxcclxuICAgICAgICAgICAgICAgIHNlbGVjdEJ5SWQ6IGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yKHNlbGVjdEVudGl0aWVzLCBzZWxlY3RJZCwgc2VsZWN0QnlJZClcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHNlbGVjdEdsb2JhbGl6ZWRFbnRpdGllcyA9IGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yKHNlbGVjdFN0YXRlLCBzZWxlY3RFbnRpdGllcyk7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgc2VsZWN0SWRzOiBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvcihzZWxlY3RTdGF0ZSwgc2VsZWN0SWRzKSxcclxuICAgICAgICAgICAgc2VsZWN0RW50aXRpZXM6IHNlbGVjdEdsb2JhbGl6ZWRFbnRpdGllcyxcclxuICAgICAgICAgICAgc2VsZWN0QWxsOiBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvcihzZWxlY3RTdGF0ZSwgc2VsZWN0QWxsKSxcclxuICAgICAgICAgICAgc2VsZWN0VG90YWw6IGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yKHNlbGVjdFN0YXRlLCBzZWxlY3RUb3RhbCksXHJcbiAgICAgICAgICAgIHNlbGVjdEJ5SWQ6IGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yKHNlbGVjdEdsb2JhbGl6ZWRFbnRpdGllcywgc2VsZWN0SWQsIHNlbGVjdEJ5SWQpXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIHJldHVybiB7IGdldFNlbGVjdG9yczogZ2V0U2VsZWN0b3JzIH07XHJcbn1cclxuLy8gc3JjL2VudGl0aWVzL3N0YXRlX2FkYXB0ZXIudHNcclxuaW1wb3J0IGNyZWF0ZU5leHRTdGF0ZTMsIHsgaXNEcmFmdCBhcyBpc0RyYWZ0MyB9IGZyb20gXCJpbW1lclwiO1xyXG5mdW5jdGlvbiBjcmVhdGVTaW5nbGVBcmd1bWVudFN0YXRlT3BlcmF0b3IobXV0YXRvcikge1xyXG4gICAgdmFyIG9wZXJhdG9yID0gY3JlYXRlU3RhdGVPcGVyYXRvcihmdW5jdGlvbiAoXywgc3RhdGUpIHsgcmV0dXJuIG11dGF0b3Ioc3RhdGUpOyB9KTtcclxuICAgIHJldHVybiBmdW5jdGlvbiBvcGVyYXRpb24oc3RhdGUpIHtcclxuICAgICAgICByZXR1cm4gb3BlcmF0b3Ioc3RhdGUsIHZvaWQgMCk7XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZVN0YXRlT3BlcmF0b3IobXV0YXRvcikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG9wZXJhdGlvbihzdGF0ZSwgYXJnKSB7XHJcbiAgICAgICAgZnVuY3Rpb24gaXNQYXlsb2FkQWN0aW9uQXJndW1lbnQoYXJnMikge1xyXG4gICAgICAgICAgICByZXR1cm4gaXNGU0EoYXJnMik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBydW5NdXRhdG9yID0gZnVuY3Rpb24gKGRyYWZ0KSB7XHJcbiAgICAgICAgICAgIGlmIChpc1BheWxvYWRBY3Rpb25Bcmd1bWVudChhcmcpKSB7XHJcbiAgICAgICAgICAgICAgICBtdXRhdG9yKGFyZy5wYXlsb2FkLCBkcmFmdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBtdXRhdG9yKGFyZywgZHJhZnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZiAoaXNEcmFmdDMoc3RhdGUpKSB7XHJcbiAgICAgICAgICAgIHJ1bk11dGF0b3Ioc3RhdGUpO1xyXG4gICAgICAgICAgICByZXR1cm4gc3RhdGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlTmV4dFN0YXRlMyhzdGF0ZSwgcnVuTXV0YXRvcik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG4vLyBzcmMvZW50aXRpZXMvdXRpbHMudHNcclxuZnVuY3Rpb24gc2VsZWN0SWRWYWx1ZShlbnRpdHksIHNlbGVjdElkKSB7XHJcbiAgICB2YXIga2V5ID0gc2VsZWN0SWQoZW50aXR5KTtcclxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYga2V5ID09PSB2b2lkIDApIHtcclxuICAgICAgICBjb25zb2xlLndhcm4oXCJUaGUgZW50aXR5IHBhc3NlZCB0byB0aGUgYHNlbGVjdElkYCBpbXBsZW1lbnRhdGlvbiByZXR1cm5lZCB1bmRlZmluZWQuXCIsIFwiWW91IHNob3VsZCBwcm9iYWJseSBwcm92aWRlIHlvdXIgb3duIGBzZWxlY3RJZGAgaW1wbGVtZW50YXRpb24uXCIsIFwiVGhlIGVudGl0eSB0aGF0IHdhcyBwYXNzZWQ6XCIsIGVudGl0eSwgXCJUaGUgYHNlbGVjdElkYCBpbXBsZW1lbnRhdGlvbjpcIiwgc2VsZWN0SWQudG9TdHJpbmcoKSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4ga2V5O1xyXG59XHJcbmZ1bmN0aW9uIGVuc3VyZUVudGl0aWVzQXJyYXkoZW50aXRpZXMpIHtcclxuICAgIGlmICghQXJyYXkuaXNBcnJheShlbnRpdGllcykpIHtcclxuICAgICAgICBlbnRpdGllcyA9IE9iamVjdC52YWx1ZXMoZW50aXRpZXMpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGVudGl0aWVzO1xyXG59XHJcbmZ1bmN0aW9uIHNwbGl0QWRkZWRVcGRhdGVkRW50aXRpZXMobmV3RW50aXRpZXMsIHNlbGVjdElkLCBzdGF0ZSkge1xyXG4gICAgbmV3RW50aXRpZXMgPSBlbnN1cmVFbnRpdGllc0FycmF5KG5ld0VudGl0aWVzKTtcclxuICAgIHZhciBhZGRlZCA9IFtdO1xyXG4gICAgdmFyIHVwZGF0ZWQgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMCwgbmV3RW50aXRpZXNfMSA9IG5ld0VudGl0aWVzOyBfaSA8IG5ld0VudGl0aWVzXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgdmFyIGVudGl0eSA9IG5ld0VudGl0aWVzXzFbX2ldO1xyXG4gICAgICAgIHZhciBpZCA9IHNlbGVjdElkVmFsdWUoZW50aXR5LCBzZWxlY3RJZCk7XHJcbiAgICAgICAgaWYgKGlkIGluIHN0YXRlLmVudGl0aWVzKSB7XHJcbiAgICAgICAgICAgIHVwZGF0ZWQucHVzaCh7IGlkOiBpZCwgY2hhbmdlczogZW50aXR5IH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgYWRkZWQucHVzaChlbnRpdHkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBbYWRkZWQsIHVwZGF0ZWRdO1xyXG59XHJcbi8vIHNyYy9lbnRpdGllcy91bnNvcnRlZF9zdGF0ZV9hZGFwdGVyLnRzXHJcbmZ1bmN0aW9uIGNyZWF0ZVVuc29ydGVkU3RhdGVBZGFwdGVyKHNlbGVjdElkKSB7XHJcbiAgICBmdW5jdGlvbiBhZGRPbmVNdXRhYmx5KGVudGl0eSwgc3RhdGUpIHtcclxuICAgICAgICB2YXIga2V5ID0gc2VsZWN0SWRWYWx1ZShlbnRpdHksIHNlbGVjdElkKTtcclxuICAgICAgICBpZiAoa2V5IGluIHN0YXRlLmVudGl0aWVzKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3RhdGUuaWRzLnB1c2goa2V5KTtcclxuICAgICAgICBzdGF0ZS5lbnRpdGllc1trZXldID0gZW50aXR5O1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gYWRkTWFueU11dGFibHkobmV3RW50aXRpZXMsIHN0YXRlKSB7XHJcbiAgICAgICAgbmV3RW50aXRpZXMgPSBlbnN1cmVFbnRpdGllc0FycmF5KG5ld0VudGl0aWVzKTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIG5ld0VudGl0aWVzXzIgPSBuZXdFbnRpdGllczsgX2kgPCBuZXdFbnRpdGllc18yLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgZW50aXR5ID0gbmV3RW50aXRpZXNfMltfaV07XHJcbiAgICAgICAgICAgIGFkZE9uZU11dGFibHkoZW50aXR5LCBzdGF0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gc2V0T25lTXV0YWJseShlbnRpdHksIHN0YXRlKSB7XHJcbiAgICAgICAgdmFyIGtleSA9IHNlbGVjdElkVmFsdWUoZW50aXR5LCBzZWxlY3RJZCk7XHJcbiAgICAgICAgaWYgKCEoa2V5IGluIHN0YXRlLmVudGl0aWVzKSkge1xyXG4gICAgICAgICAgICBzdGF0ZS5pZHMucHVzaChrZXkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzdGF0ZS5lbnRpdGllc1trZXldID0gZW50aXR5O1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gc2V0TWFueU11dGFibHkobmV3RW50aXRpZXMsIHN0YXRlKSB7XHJcbiAgICAgICAgbmV3RW50aXRpZXMgPSBlbnN1cmVFbnRpdGllc0FycmF5KG5ld0VudGl0aWVzKTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIG5ld0VudGl0aWVzXzMgPSBuZXdFbnRpdGllczsgX2kgPCBuZXdFbnRpdGllc18zLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgZW50aXR5ID0gbmV3RW50aXRpZXNfM1tfaV07XHJcbiAgICAgICAgICAgIHNldE9uZU11dGFibHkoZW50aXR5LCBzdGF0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gc2V0QWxsTXV0YWJseShuZXdFbnRpdGllcywgc3RhdGUpIHtcclxuICAgICAgICBuZXdFbnRpdGllcyA9IGVuc3VyZUVudGl0aWVzQXJyYXkobmV3RW50aXRpZXMpO1xyXG4gICAgICAgIHN0YXRlLmlkcyA9IFtdO1xyXG4gICAgICAgIHN0YXRlLmVudGl0aWVzID0ge307XHJcbiAgICAgICAgYWRkTWFueU11dGFibHkobmV3RW50aXRpZXMsIHN0YXRlKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHJlbW92ZU9uZU11dGFibHkoa2V5LCBzdGF0ZSkge1xyXG4gICAgICAgIHJldHVybiByZW1vdmVNYW55TXV0YWJseShba2V5XSwgc3RhdGUpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gcmVtb3ZlTWFueU11dGFibHkoa2V5cywgc3RhdGUpIHtcclxuICAgICAgICB2YXIgZGlkTXV0YXRlID0gZmFsc2U7XHJcbiAgICAgICAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICAgICAgaWYgKGtleSBpbiBzdGF0ZS5lbnRpdGllcykge1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHN0YXRlLmVudGl0aWVzW2tleV07XHJcbiAgICAgICAgICAgICAgICBkaWRNdXRhdGUgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKGRpZE11dGF0ZSkge1xyXG4gICAgICAgICAgICBzdGF0ZS5pZHMgPSBzdGF0ZS5pZHMuZmlsdGVyKGZ1bmN0aW9uIChpZCkgeyByZXR1cm4gaWQgaW4gc3RhdGUuZW50aXRpZXM7IH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHJlbW92ZUFsbE11dGFibHkoc3RhdGUpIHtcclxuICAgICAgICBPYmplY3QuYXNzaWduKHN0YXRlLCB7XHJcbiAgICAgICAgICAgIGlkczogW10sXHJcbiAgICAgICAgICAgIGVudGl0aWVzOiB7fVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gdGFrZU5ld0tleShrZXlzLCB1cGRhdGUsIHN0YXRlKSB7XHJcbiAgICAgICAgdmFyIG9yaWdpbmFsMiA9IHN0YXRlLmVudGl0aWVzW3VwZGF0ZS5pZF07XHJcbiAgICAgICAgdmFyIHVwZGF0ZWQgPSBPYmplY3QuYXNzaWduKHt9LCBvcmlnaW5hbDIsIHVwZGF0ZS5jaGFuZ2VzKTtcclxuICAgICAgICB2YXIgbmV3S2V5ID0gc2VsZWN0SWRWYWx1ZSh1cGRhdGVkLCBzZWxlY3RJZCk7XHJcbiAgICAgICAgdmFyIGhhc05ld0tleSA9IG5ld0tleSAhPT0gdXBkYXRlLmlkO1xyXG4gICAgICAgIGlmIChoYXNOZXdLZXkpIHtcclxuICAgICAgICAgICAga2V5c1t1cGRhdGUuaWRdID0gbmV3S2V5O1xyXG4gICAgICAgICAgICBkZWxldGUgc3RhdGUuZW50aXRpZXNbdXBkYXRlLmlkXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3RhdGUuZW50aXRpZXNbbmV3S2V5XSA9IHVwZGF0ZWQ7XHJcbiAgICAgICAgcmV0dXJuIGhhc05ld0tleTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHVwZGF0ZU9uZU11dGFibHkodXBkYXRlLCBzdGF0ZSkge1xyXG4gICAgICAgIHJldHVybiB1cGRhdGVNYW55TXV0YWJseShbdXBkYXRlXSwgc3RhdGUpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gdXBkYXRlTWFueU11dGFibHkodXBkYXRlcywgc3RhdGUpIHtcclxuICAgICAgICB2YXIgbmV3S2V5cyA9IHt9O1xyXG4gICAgICAgIHZhciB1cGRhdGVzUGVyRW50aXR5ID0ge307XHJcbiAgICAgICAgdXBkYXRlcy5mb3JFYWNoKGZ1bmN0aW9uICh1cGRhdGUpIHtcclxuICAgICAgICAgICAgaWYgKHVwZGF0ZS5pZCBpbiBzdGF0ZS5lbnRpdGllcykge1xyXG4gICAgICAgICAgICAgICAgdXBkYXRlc1BlckVudGl0eVt1cGRhdGUuaWRdID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlkOiB1cGRhdGUuaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlczogX19zcHJlYWRWYWx1ZXMoX19zcHJlYWRWYWx1ZXMoe30sIHVwZGF0ZXNQZXJFbnRpdHlbdXBkYXRlLmlkXSA/IHVwZGF0ZXNQZXJFbnRpdHlbdXBkYXRlLmlkXS5jaGFuZ2VzIDogbnVsbCksIHVwZGF0ZS5jaGFuZ2VzKVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHVwZGF0ZXMgPSBPYmplY3QudmFsdWVzKHVwZGF0ZXNQZXJFbnRpdHkpO1xyXG4gICAgICAgIHZhciBkaWRNdXRhdGVFbnRpdGllcyA9IHVwZGF0ZXMubGVuZ3RoID4gMDtcclxuICAgICAgICBpZiAoZGlkTXV0YXRlRW50aXRpZXMpIHtcclxuICAgICAgICAgICAgdmFyIGRpZE11dGF0ZUlkcyA9IHVwZGF0ZXMuZmlsdGVyKGZ1bmN0aW9uICh1cGRhdGUpIHsgcmV0dXJuIHRha2VOZXdLZXkobmV3S2V5cywgdXBkYXRlLCBzdGF0ZSk7IH0pLmxlbmd0aCA+IDA7XHJcbiAgICAgICAgICAgIGlmIChkaWRNdXRhdGVJZHMpIHtcclxuICAgICAgICAgICAgICAgIHN0YXRlLmlkcyA9IE9iamVjdC5rZXlzKHN0YXRlLmVudGl0aWVzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHVwc2VydE9uZU11dGFibHkoZW50aXR5LCBzdGF0ZSkge1xyXG4gICAgICAgIHJldHVybiB1cHNlcnRNYW55TXV0YWJseShbZW50aXR5XSwgc3RhdGUpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gdXBzZXJ0TWFueU11dGFibHkobmV3RW50aXRpZXMsIHN0YXRlKSB7XHJcbiAgICAgICAgdmFyIF9jID0gc3BsaXRBZGRlZFVwZGF0ZWRFbnRpdGllcyhuZXdFbnRpdGllcywgc2VsZWN0SWQsIHN0YXRlKSwgYWRkZWQgPSBfY1swXSwgdXBkYXRlZCA9IF9jWzFdO1xyXG4gICAgICAgIHVwZGF0ZU1hbnlNdXRhYmx5KHVwZGF0ZWQsIHN0YXRlKTtcclxuICAgICAgICBhZGRNYW55TXV0YWJseShhZGRlZCwgc3RhdGUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICByZW1vdmVBbGw6IGNyZWF0ZVNpbmdsZUFyZ3VtZW50U3RhdGVPcGVyYXRvcihyZW1vdmVBbGxNdXRhYmx5KSxcclxuICAgICAgICBhZGRPbmU6IGNyZWF0ZVN0YXRlT3BlcmF0b3IoYWRkT25lTXV0YWJseSksXHJcbiAgICAgICAgYWRkTWFueTogY3JlYXRlU3RhdGVPcGVyYXRvcihhZGRNYW55TXV0YWJseSksXHJcbiAgICAgICAgc2V0T25lOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHNldE9uZU11dGFibHkpLFxyXG4gICAgICAgIHNldE1hbnk6IGNyZWF0ZVN0YXRlT3BlcmF0b3Ioc2V0TWFueU11dGFibHkpLFxyXG4gICAgICAgIHNldEFsbDogY3JlYXRlU3RhdGVPcGVyYXRvcihzZXRBbGxNdXRhYmx5KSxcclxuICAgICAgICB1cGRhdGVPbmU6IGNyZWF0ZVN0YXRlT3BlcmF0b3IodXBkYXRlT25lTXV0YWJseSksXHJcbiAgICAgICAgdXBkYXRlTWFueTogY3JlYXRlU3RhdGVPcGVyYXRvcih1cGRhdGVNYW55TXV0YWJseSksXHJcbiAgICAgICAgdXBzZXJ0T25lOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHVwc2VydE9uZU11dGFibHkpLFxyXG4gICAgICAgIHVwc2VydE1hbnk6IGNyZWF0ZVN0YXRlT3BlcmF0b3IodXBzZXJ0TWFueU11dGFibHkpLFxyXG4gICAgICAgIHJlbW92ZU9uZTogY3JlYXRlU3RhdGVPcGVyYXRvcihyZW1vdmVPbmVNdXRhYmx5KSxcclxuICAgICAgICByZW1vdmVNYW55OiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHJlbW92ZU1hbnlNdXRhYmx5KVxyXG4gICAgfTtcclxufVxyXG4vLyBzcmMvZW50aXRpZXMvc29ydGVkX3N0YXRlX2FkYXB0ZXIudHNcclxuZnVuY3Rpb24gY3JlYXRlU29ydGVkU3RhdGVBZGFwdGVyKHNlbGVjdElkLCBzb3J0KSB7XHJcbiAgICB2YXIgX2MgPSBjcmVhdGVVbnNvcnRlZFN0YXRlQWRhcHRlcihzZWxlY3RJZCksIHJlbW92ZU9uZSA9IF9jLnJlbW92ZU9uZSwgcmVtb3ZlTWFueSA9IF9jLnJlbW92ZU1hbnksIHJlbW92ZUFsbCA9IF9jLnJlbW92ZUFsbDtcclxuICAgIGZ1bmN0aW9uIGFkZE9uZU11dGFibHkoZW50aXR5LCBzdGF0ZSkge1xyXG4gICAgICAgIHJldHVybiBhZGRNYW55TXV0YWJseShbZW50aXR5XSwgc3RhdGUpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gYWRkTWFueU11dGFibHkobmV3RW50aXRpZXMsIHN0YXRlKSB7XHJcbiAgICAgICAgbmV3RW50aXRpZXMgPSBlbnN1cmVFbnRpdGllc0FycmF5KG5ld0VudGl0aWVzKTtcclxuICAgICAgICB2YXIgbW9kZWxzID0gbmV3RW50aXRpZXMuZmlsdGVyKGZ1bmN0aW9uIChtb2RlbCkgeyByZXR1cm4gIShzZWxlY3RJZFZhbHVlKG1vZGVsLCBzZWxlY3RJZCkgaW4gc3RhdGUuZW50aXRpZXMpOyB9KTtcclxuICAgICAgICBpZiAobW9kZWxzLmxlbmd0aCAhPT0gMCkge1xyXG4gICAgICAgICAgICBtZXJnZShtb2RlbHMsIHN0YXRlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBzZXRPbmVNdXRhYmx5KGVudGl0eSwgc3RhdGUpIHtcclxuICAgICAgICByZXR1cm4gc2V0TWFueU11dGFibHkoW2VudGl0eV0sIHN0YXRlKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHNldE1hbnlNdXRhYmx5KG5ld0VudGl0aWVzLCBzdGF0ZSkge1xyXG4gICAgICAgIG5ld0VudGl0aWVzID0gZW5zdXJlRW50aXRpZXNBcnJheShuZXdFbnRpdGllcyk7XHJcbiAgICAgICAgaWYgKG5ld0VudGl0aWVzLmxlbmd0aCAhPT0gMCkge1xyXG4gICAgICAgICAgICBtZXJnZShuZXdFbnRpdGllcywgc3RhdGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHNldEFsbE11dGFibHkobmV3RW50aXRpZXMsIHN0YXRlKSB7XHJcbiAgICAgICAgbmV3RW50aXRpZXMgPSBlbnN1cmVFbnRpdGllc0FycmF5KG5ld0VudGl0aWVzKTtcclxuICAgICAgICBzdGF0ZS5lbnRpdGllcyA9IHt9O1xyXG4gICAgICAgIHN0YXRlLmlkcyA9IFtdO1xyXG4gICAgICAgIGFkZE1hbnlNdXRhYmx5KG5ld0VudGl0aWVzLCBzdGF0ZSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiB1cGRhdGVPbmVNdXRhYmx5KHVwZGF0ZSwgc3RhdGUpIHtcclxuICAgICAgICByZXR1cm4gdXBkYXRlTWFueU11dGFibHkoW3VwZGF0ZV0sIHN0YXRlKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHVwZGF0ZU1hbnlNdXRhYmx5KHVwZGF0ZXMsIHN0YXRlKSB7XHJcbiAgICAgICAgdmFyIGFwcGxpZWRVcGRhdGVzID0gZmFsc2U7XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCB1cGRhdGVzXzEgPSB1cGRhdGVzOyBfaSA8IHVwZGF0ZXNfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIHVwZGF0ZSA9IHVwZGF0ZXNfMVtfaV07XHJcbiAgICAgICAgICAgIHZhciBlbnRpdHkgPSBzdGF0ZS5lbnRpdGllc1t1cGRhdGUuaWRdO1xyXG4gICAgICAgICAgICBpZiAoIWVudGl0eSkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYXBwbGllZFVwZGF0ZXMgPSB0cnVlO1xyXG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKGVudGl0eSwgdXBkYXRlLmNoYW5nZXMpO1xyXG4gICAgICAgICAgICB2YXIgbmV3SWQgPSBzZWxlY3RJZChlbnRpdHkpO1xyXG4gICAgICAgICAgICBpZiAodXBkYXRlLmlkICE9PSBuZXdJZCkge1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHN0YXRlLmVudGl0aWVzW3VwZGF0ZS5pZF07XHJcbiAgICAgICAgICAgICAgICBzdGF0ZS5lbnRpdGllc1tuZXdJZF0gPSBlbnRpdHk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFwcGxpZWRVcGRhdGVzKSB7XHJcbiAgICAgICAgICAgIHJlc29ydEVudGl0aWVzKHN0YXRlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiB1cHNlcnRPbmVNdXRhYmx5KGVudGl0eSwgc3RhdGUpIHtcclxuICAgICAgICByZXR1cm4gdXBzZXJ0TWFueU11dGFibHkoW2VudGl0eV0sIHN0YXRlKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHVwc2VydE1hbnlNdXRhYmx5KG5ld0VudGl0aWVzLCBzdGF0ZSkge1xyXG4gICAgICAgIHZhciBfYyA9IHNwbGl0QWRkZWRVcGRhdGVkRW50aXRpZXMobmV3RW50aXRpZXMsIHNlbGVjdElkLCBzdGF0ZSksIGFkZGVkID0gX2NbMF0sIHVwZGF0ZWQgPSBfY1sxXTtcclxuICAgICAgICB1cGRhdGVNYW55TXV0YWJseSh1cGRhdGVkLCBzdGF0ZSk7XHJcbiAgICAgICAgYWRkTWFueU11dGFibHkoYWRkZWQsIHN0YXRlKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGFyZUFycmF5c0VxdWFsKGEsIGIpIHtcclxuICAgICAgICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhLmxlbmd0aCAmJiBpIDwgYi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoYVtpXSA9PT0gYltpXSkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIG1lcmdlKG1vZGVscywgc3RhdGUpIHtcclxuICAgICAgICBtb2RlbHMuZm9yRWFjaChmdW5jdGlvbiAobW9kZWwpIHtcclxuICAgICAgICAgICAgc3RhdGUuZW50aXRpZXNbc2VsZWN0SWQobW9kZWwpXSA9IG1vZGVsO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJlc29ydEVudGl0aWVzKHN0YXRlKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHJlc29ydEVudGl0aWVzKHN0YXRlKSB7XHJcbiAgICAgICAgdmFyIGFsbEVudGl0aWVzID0gT2JqZWN0LnZhbHVlcyhzdGF0ZS5lbnRpdGllcyk7XHJcbiAgICAgICAgYWxsRW50aXRpZXMuc29ydChzb3J0KTtcclxuICAgICAgICB2YXIgbmV3U29ydGVkSWRzID0gYWxsRW50aXRpZXMubWFwKHNlbGVjdElkKTtcclxuICAgICAgICB2YXIgaWRzID0gc3RhdGUuaWRzO1xyXG4gICAgICAgIGlmICghYXJlQXJyYXlzRXF1YWwoaWRzLCBuZXdTb3J0ZWRJZHMpKSB7XHJcbiAgICAgICAgICAgIHN0YXRlLmlkcyA9IG5ld1NvcnRlZElkcztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHJlbW92ZU9uZTogcmVtb3ZlT25lLFxyXG4gICAgICAgIHJlbW92ZU1hbnk6IHJlbW92ZU1hbnksXHJcbiAgICAgICAgcmVtb3ZlQWxsOiByZW1vdmVBbGwsXHJcbiAgICAgICAgYWRkT25lOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKGFkZE9uZU11dGFibHkpLFxyXG4gICAgICAgIHVwZGF0ZU9uZTogY3JlYXRlU3RhdGVPcGVyYXRvcih1cGRhdGVPbmVNdXRhYmx5KSxcclxuICAgICAgICB1cHNlcnRPbmU6IGNyZWF0ZVN0YXRlT3BlcmF0b3IodXBzZXJ0T25lTXV0YWJseSksXHJcbiAgICAgICAgc2V0T25lOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHNldE9uZU11dGFibHkpLFxyXG4gICAgICAgIHNldE1hbnk6IGNyZWF0ZVN0YXRlT3BlcmF0b3Ioc2V0TWFueU11dGFibHkpLFxyXG4gICAgICAgIHNldEFsbDogY3JlYXRlU3RhdGVPcGVyYXRvcihzZXRBbGxNdXRhYmx5KSxcclxuICAgICAgICBhZGRNYW55OiBjcmVhdGVTdGF0ZU9wZXJhdG9yKGFkZE1hbnlNdXRhYmx5KSxcclxuICAgICAgICB1cGRhdGVNYW55OiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHVwZGF0ZU1hbnlNdXRhYmx5KSxcclxuICAgICAgICB1cHNlcnRNYW55OiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHVwc2VydE1hbnlNdXRhYmx5KVxyXG4gICAgfTtcclxufVxyXG4vLyBzcmMvZW50aXRpZXMvY3JlYXRlX2FkYXB0ZXIudHNcclxuZnVuY3Rpb24gY3JlYXRlRW50aXR5QWRhcHRlcihvcHRpb25zKSB7XHJcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxyXG4gICAgdmFyIF9jID0gX19zcHJlYWRWYWx1ZXMoe1xyXG4gICAgICAgIHNvcnRDb21wYXJlcjogZmFsc2UsXHJcbiAgICAgICAgc2VsZWN0SWQ6IGZ1bmN0aW9uIChpbnN0YW5jZSkgeyByZXR1cm4gaW5zdGFuY2UuaWQ7IH1cclxuICAgIH0sIG9wdGlvbnMpLCBzZWxlY3RJZCA9IF9jLnNlbGVjdElkLCBzb3J0Q29tcGFyZXIgPSBfYy5zb3J0Q29tcGFyZXI7XHJcbiAgICB2YXIgc3RhdGVGYWN0b3J5ID0gY3JlYXRlSW5pdGlhbFN0YXRlRmFjdG9yeSgpO1xyXG4gICAgdmFyIHNlbGVjdG9yc0ZhY3RvcnkgPSBjcmVhdGVTZWxlY3RvcnNGYWN0b3J5KCk7XHJcbiAgICB2YXIgc3RhdGVBZGFwdGVyID0gc29ydENvbXBhcmVyID8gY3JlYXRlU29ydGVkU3RhdGVBZGFwdGVyKHNlbGVjdElkLCBzb3J0Q29tcGFyZXIpIDogY3JlYXRlVW5zb3J0ZWRTdGF0ZUFkYXB0ZXIoc2VsZWN0SWQpO1xyXG4gICAgcmV0dXJuIF9fc3ByZWFkVmFsdWVzKF9fc3ByZWFkVmFsdWVzKF9fc3ByZWFkVmFsdWVzKHtcclxuICAgICAgICBzZWxlY3RJZDogc2VsZWN0SWQsXHJcbiAgICAgICAgc29ydENvbXBhcmVyOiBzb3J0Q29tcGFyZXJcclxuICAgIH0sIHN0YXRlRmFjdG9yeSksIHNlbGVjdG9yc0ZhY3RvcnkpLCBzdGF0ZUFkYXB0ZXIpO1xyXG59XHJcbi8vIHNyYy9uYW5vaWQudHNcclxudmFyIHVybEFscGhhYmV0ID0gXCJNb2R1bGVTeW1iaGFzT3duUHItMDEyMzQ1Njc4OUFCQ0RFRkdITlJWZmdjdGlVdnpfS3FZVEprTHhwWlhJalFXXCI7XHJcbnZhciBuYW5vaWQgPSBmdW5jdGlvbiAoc2l6ZSkge1xyXG4gICAgaWYgKHNpemUgPT09IHZvaWQgMCkgeyBzaXplID0gMjE7IH1cclxuICAgIHZhciBpZCA9IFwiXCI7XHJcbiAgICB2YXIgaSA9IHNpemU7XHJcbiAgICB3aGlsZSAoaS0tKSB7XHJcbiAgICAgICAgaWQgKz0gdXJsQWxwaGFiZXRbTWF0aC5yYW5kb20oKSAqIDY0IHwgMF07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaWQ7XHJcbn07XHJcbi8vIHNyYy9jcmVhdGVBc3luY1RodW5rLnRzXHJcbnZhciBjb21tb25Qcm9wZXJ0aWVzID0gW1xyXG4gICAgXCJuYW1lXCIsXHJcbiAgICBcIm1lc3NhZ2VcIixcclxuICAgIFwic3RhY2tcIixcclxuICAgIFwiY29kZVwiXHJcbl07XHJcbnZhciBSZWplY3RXaXRoVmFsdWUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBSZWplY3RXaXRoVmFsdWUocGF5bG9hZCwgbWV0YSkge1xyXG4gICAgICAgIHRoaXMucGF5bG9hZCA9IHBheWxvYWQ7XHJcbiAgICAgICAgdGhpcy5tZXRhID0gbWV0YTtcclxuICAgIH1cclxuICAgIHJldHVybiBSZWplY3RXaXRoVmFsdWU7XHJcbn0oKSk7XHJcbnZhciBGdWxmaWxsV2l0aE1ldGEgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBGdWxmaWxsV2l0aE1ldGEocGF5bG9hZCwgbWV0YSkge1xyXG4gICAgICAgIHRoaXMucGF5bG9hZCA9IHBheWxvYWQ7XHJcbiAgICAgICAgdGhpcy5tZXRhID0gbWV0YTtcclxuICAgIH1cclxuICAgIHJldHVybiBGdWxmaWxsV2l0aE1ldGE7XHJcbn0oKSk7XHJcbnZhciBtaW5pU2VyaWFsaXplRXJyb3IgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgdmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICB2YXIgc2ltcGxlRXJyb3IgPSB7fTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGNvbW1vblByb3BlcnRpZXNfMSA9IGNvbW1vblByb3BlcnRpZXM7IF9pIDwgY29tbW9uUHJvcGVydGllc18xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgcHJvcGVydHkgPSBjb21tb25Qcm9wZXJ0aWVzXzFbX2ldO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlW3Byb3BlcnR5XSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgc2ltcGxlRXJyb3JbcHJvcGVydHldID0gdmFsdWVbcHJvcGVydHldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzaW1wbGVFcnJvcjtcclxuICAgIH1cclxuICAgIHJldHVybiB7IG1lc3NhZ2U6IFN0cmluZyh2YWx1ZSkgfTtcclxufTtcclxudmFyIGNyZWF0ZUFzeW5jVGh1bmsgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gY3JlYXRlQXN5bmNUaHVuazIodHlwZVByZWZpeCwgcGF5bG9hZENyZWF0b3IsIG9wdGlvbnMpIHtcclxuICAgICAgICB2YXIgZnVsZmlsbGVkID0gY3JlYXRlQWN0aW9uKHR5cGVQcmVmaXggKyBcIi9mdWxmaWxsZWRcIiwgZnVuY3Rpb24gKHBheWxvYWQsIHJlcXVlc3RJZCwgYXJnLCBtZXRhKSB7IHJldHVybiAoe1xyXG4gICAgICAgICAgICBwYXlsb2FkOiBwYXlsb2FkLFxyXG4gICAgICAgICAgICBtZXRhOiBfX3NwcmVhZFByb3BzKF9fc3ByZWFkVmFsdWVzKHt9LCBtZXRhIHx8IHt9KSwge1xyXG4gICAgICAgICAgICAgICAgYXJnOiBhcmcsXHJcbiAgICAgICAgICAgICAgICByZXF1ZXN0SWQ6IHJlcXVlc3RJZCxcclxuICAgICAgICAgICAgICAgIHJlcXVlc3RTdGF0dXM6IFwiZnVsZmlsbGVkXCJcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9KTsgfSk7XHJcbiAgICAgICAgdmFyIHBlbmRpbmcgPSBjcmVhdGVBY3Rpb24odHlwZVByZWZpeCArIFwiL3BlbmRpbmdcIiwgZnVuY3Rpb24gKHJlcXVlc3RJZCwgYXJnLCBtZXRhKSB7IHJldHVybiAoe1xyXG4gICAgICAgICAgICBwYXlsb2FkOiB2b2lkIDAsXHJcbiAgICAgICAgICAgIG1ldGE6IF9fc3ByZWFkUHJvcHMoX19zcHJlYWRWYWx1ZXMoe30sIG1ldGEgfHwge30pLCB7XHJcbiAgICAgICAgICAgICAgICBhcmc6IGFyZyxcclxuICAgICAgICAgICAgICAgIHJlcXVlc3RJZDogcmVxdWVzdElkLFxyXG4gICAgICAgICAgICAgICAgcmVxdWVzdFN0YXR1czogXCJwZW5kaW5nXCJcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9KTsgfSk7XHJcbiAgICAgICAgdmFyIHJlamVjdGVkID0gY3JlYXRlQWN0aW9uKHR5cGVQcmVmaXggKyBcIi9yZWplY3RlZFwiLCBmdW5jdGlvbiAoZXJyb3IsIHJlcXVlc3RJZCwgYXJnLCBwYXlsb2FkLCBtZXRhKSB7IHJldHVybiAoe1xyXG4gICAgICAgICAgICBwYXlsb2FkOiBwYXlsb2FkLFxyXG4gICAgICAgICAgICBlcnJvcjogKG9wdGlvbnMgJiYgb3B0aW9ucy5zZXJpYWxpemVFcnJvciB8fCBtaW5pU2VyaWFsaXplRXJyb3IpKGVycm9yIHx8IFwiUmVqZWN0ZWRcIiksXHJcbiAgICAgICAgICAgIG1ldGE6IF9fc3ByZWFkUHJvcHMoX19zcHJlYWRWYWx1ZXMoe30sIG1ldGEgfHwge30pLCB7XHJcbiAgICAgICAgICAgICAgICBhcmc6IGFyZyxcclxuICAgICAgICAgICAgICAgIHJlcXVlc3RJZDogcmVxdWVzdElkLFxyXG4gICAgICAgICAgICAgICAgcmVqZWN0ZWRXaXRoVmFsdWU6ICEhcGF5bG9hZCxcclxuICAgICAgICAgICAgICAgIHJlcXVlc3RTdGF0dXM6IFwicmVqZWN0ZWRcIixcclxuICAgICAgICAgICAgICAgIGFib3J0ZWQ6IChlcnJvciA9PSBudWxsID8gdm9pZCAwIDogZXJyb3IubmFtZSkgPT09IFwiQWJvcnRFcnJvclwiLFxyXG4gICAgICAgICAgICAgICAgY29uZGl0aW9uOiAoZXJyb3IgPT0gbnVsbCA/IHZvaWQgMCA6IGVycm9yLm5hbWUpID09PSBcIkNvbmRpdGlvbkVycm9yXCJcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9KTsgfSk7XHJcbiAgICAgICAgdmFyIGRpc3BsYXllZFdhcm5pbmcgPSBmYWxzZTtcclxuICAgICAgICB2YXIgQUMgPSB0eXBlb2YgQWJvcnRDb250cm9sbGVyICE9PSBcInVuZGVmaW5lZFwiID8gQWJvcnRDb250cm9sbGVyIDogLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBmdW5jdGlvbiBjbGFzc18xKCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zaWduYWwgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWJvcnRlZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2hFdmVudDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBvbmFib3J0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICByZW1vdmVFdmVudExpc3RlbmVyOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICByZWFzb246IHZvaWQgMCxcclxuICAgICAgICAgICAgICAgICAgICB0aHJvd0lmQWJvcnRlZDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2xhc3NfMS5wcm90b3R5cGUuYWJvcnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkaXNwbGF5ZWRXYXJuaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXllZFdhcm5pbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmluZm8oXCJUaGlzIHBsYXRmb3JtIGRvZXMgbm90IGltcGxlbWVudCBBYm9ydENvbnRyb2xsZXIuIFxcbklmIHlvdSB3YW50IHRvIHVzZSB0aGUgQWJvcnRDb250cm9sbGVyIHRvIHJlYWN0IHRvIGBhYm9ydGAgZXZlbnRzLCBwbGVhc2UgY29uc2lkZXIgaW1wb3J0aW5nIGEgcG9seWZpbGwgbGlrZSAnYWJvcnRjb250cm9sbGVyLXBvbHlmaWxsL2Rpc3QvYWJvcnRjb250cm9sbGVyLXBvbHlmaWxsLW9ubHknLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHJldHVybiBjbGFzc18xO1xyXG4gICAgICAgIH0oKSk7XHJcbiAgICAgICAgZnVuY3Rpb24gYWN0aW9uQ3JlYXRvcihhcmcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChkaXNwYXRjaCwgZ2V0U3RhdGUsIGV4dHJhKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVxdWVzdElkID0gKG9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMuaWRHZW5lcmF0b3IpID8gb3B0aW9ucy5pZEdlbmVyYXRvcihhcmcpIDogbmFub2lkKCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgYWJvcnRDb250cm9sbGVyID0gbmV3IEFDKCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgYWJvcnRSZWFzb247XHJcbiAgICAgICAgICAgICAgICB2YXIgc3RhcnRlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gYWJvcnQocmVhc29uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWJvcnRSZWFzb24gPSByZWFzb247XHJcbiAgICAgICAgICAgICAgICAgICAgYWJvcnRDb250cm9sbGVyLmFib3J0KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2YXIgcHJvbWlzZTIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9fYXN5bmModGhpcywgbnVsbCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2EsIF9iLCBmaW5hbEFjdGlvbiwgY29uZGl0aW9uUmVzdWx0LCBhYm9ydGVkUHJvbWlzZSwgZXJyXzEsIHNraXBEaXNwYXRjaDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfYy5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MudHJ5cy5wdXNoKFswLCA0LCAsIDVdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZGl0aW9uUmVzdWx0ID0gKF9hID0gb3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9ucy5jb25kaXRpb24pID09IG51bGwgPyB2b2lkIDAgOiBfYS5jYWxsKG9wdGlvbnMsIGFyZywgeyBnZXRTdGF0ZTogZ2V0U3RhdGUsIGV4dHJhOiBleHRyYSB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1RoZW5hYmxlKGNvbmRpdGlvblJlc3VsdCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDJdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBjb25kaXRpb25SZXN1bHRdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZGl0aW9uUmVzdWx0ID0gX2Muc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYy5sYWJlbCA9IDI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29uZGl0aW9uUmVzdWx0ID09PSBmYWxzZSB8fCBhYm9ydENvbnRyb2xsZXIuc2lnbmFsLmFib3J0ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkNvbmRpdGlvbkVycm9yXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogXCJBYm9ydGVkIGR1ZSB0byBjb25kaXRpb24gY2FsbGJhY2sgcmV0dXJuaW5nIGZhbHNlLlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhYm9ydGVkUHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChfLCByZWplY3QpIHsgcmV0dXJuIGFib3J0Q29udHJvbGxlci5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlamVjdCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkFib3J0RXJyb3JcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGFib3J0UmVhc29uIHx8IFwiQWJvcnRlZFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyB9KTsgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKHBlbmRpbmcocmVxdWVzdElkLCBhcmcsIChfYiA9IG9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMuZ2V0UGVuZGluZ01ldGEpID09IG51bGwgPyB2b2lkIDAgOiBfYi5jYWxsKG9wdGlvbnMsIHsgcmVxdWVzdElkOiByZXF1ZXN0SWQsIGFyZzogYXJnIH0sIHsgZ2V0U3RhdGU6IGdldFN0YXRlLCBleHRyYTogZXh0cmEgfSkpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgUHJvbWlzZS5yYWNlKFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhYm9ydGVkUHJvbWlzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQcm9taXNlLnJlc29sdmUocGF5bG9hZENyZWF0b3IoYXJnLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoOiBkaXNwYXRjaCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0U3RhdGU6IGdldFN0YXRlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRyYTogZXh0cmEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RJZDogcmVxdWVzdElkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWduYWw6IGFib3J0Q29udHJvbGxlci5zaWduYWwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFib3J0OiBhYm9ydCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0V2l0aFZhbHVlOiBmdW5jdGlvbiAodmFsdWUsIG1ldGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVqZWN0V2l0aFZhbHVlKHZhbHVlLCBtZXRhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVsZmlsbFdpdGhWYWx1ZTogZnVuY3Rpb24gKHZhbHVlLCBtZXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEZ1bGZpbGxXaXRoTWV0YSh2YWx1ZSwgbWV0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBSZWplY3RXaXRoVmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IHJlc3VsdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgRnVsZmlsbFdpdGhNZXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVsZmlsbGVkKHJlc3VsdC5wYXlsb2FkLCByZXF1ZXN0SWQsIGFyZywgcmVzdWx0Lm1ldGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmdWxmaWxsZWQocmVzdWx0LCByZXF1ZXN0SWQsIGFyZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsQWN0aW9uID0gX2Muc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA1XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycl8xID0gX2Muc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbEFjdGlvbiA9IGVycl8xIGluc3RhbmNlb2YgUmVqZWN0V2l0aFZhbHVlID8gcmVqZWN0ZWQobnVsbCwgcmVxdWVzdElkLCBhcmcsIGVycl8xLnBheWxvYWQsIGVycl8xLm1ldGEpIDogcmVqZWN0ZWQoZXJyXzEsIHJlcXVlc3RJZCwgYXJnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBza2lwRGlzcGF0Y2ggPSBvcHRpb25zICYmICFvcHRpb25zLmRpc3BhdGNoQ29uZGl0aW9uUmVqZWN0aW9uICYmIHJlamVjdGVkLm1hdGNoKGZpbmFsQWN0aW9uKSAmJiBmaW5hbEFjdGlvbi5tZXRhLmNvbmRpdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFza2lwRGlzcGF0Y2gpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKGZpbmFsQWN0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgZmluYWxBY3Rpb25dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0oKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHByb21pc2UyLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWJvcnQ6IGFib3J0LFxyXG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RJZDogcmVxdWVzdElkLFxyXG4gICAgICAgICAgICAgICAgICAgIGFyZzogYXJnLFxyXG4gICAgICAgICAgICAgICAgICAgIHVud3JhcDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJvbWlzZTIudGhlbih1bndyYXBSZXN1bHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihhY3Rpb25DcmVhdG9yLCB7XHJcbiAgICAgICAgICAgIHBlbmRpbmc6IHBlbmRpbmcsXHJcbiAgICAgICAgICAgIHJlamVjdGVkOiByZWplY3RlZCxcclxuICAgICAgICAgICAgZnVsZmlsbGVkOiBmdWxmaWxsZWQsXHJcbiAgICAgICAgICAgIHR5cGVQcmVmaXg6IHR5cGVQcmVmaXhcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGNyZWF0ZUFzeW5jVGh1bmsyLndpdGhUeXBlcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNyZWF0ZUFzeW5jVGh1bmsyOyB9O1xyXG4gICAgcmV0dXJuIGNyZWF0ZUFzeW5jVGh1bmsyO1xyXG59KSgpO1xyXG5mdW5jdGlvbiB1bndyYXBSZXN1bHQoYWN0aW9uKSB7XHJcbiAgICBpZiAoYWN0aW9uLm1ldGEgJiYgYWN0aW9uLm1ldGEucmVqZWN0ZWRXaXRoVmFsdWUpIHtcclxuICAgICAgICB0aHJvdyBhY3Rpb24ucGF5bG9hZDtcclxuICAgIH1cclxuICAgIGlmIChhY3Rpb24uZXJyb3IpIHtcclxuICAgICAgICB0aHJvdyBhY3Rpb24uZXJyb3I7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYWN0aW9uLnBheWxvYWQ7XHJcbn1cclxuZnVuY3Rpb24gaXNUaGVuYWJsZSh2YWx1ZSkge1xyXG4gICAgcmV0dXJuIHZhbHVlICE9PSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgdmFsdWUudGhlbiA9PT0gXCJmdW5jdGlvblwiO1xyXG59XHJcbi8vIHNyYy9tYXRjaGVycy50c1xyXG52YXIgbWF0Y2hlcyA9IGZ1bmN0aW9uIChtYXRjaGVyLCBhY3Rpb24pIHtcclxuICAgIGlmIChoYXNNYXRjaEZ1bmN0aW9uKG1hdGNoZXIpKSB7XHJcbiAgICAgICAgcmV0dXJuIG1hdGNoZXIubWF0Y2goYWN0aW9uKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBtYXRjaGVyKGFjdGlvbik7XHJcbiAgICB9XHJcbn07XHJcbmZ1bmN0aW9uIGlzQW55T2YoKSB7XHJcbiAgICB2YXIgbWF0Y2hlcnMgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgbWF0Y2hlcnNbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgIH1cclxuICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIG1hdGNoZXJzLnNvbWUoZnVuY3Rpb24gKG1hdGNoZXIpIHsgcmV0dXJuIG1hdGNoZXMobWF0Y2hlciwgYWN0aW9uKTsgfSk7XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGlzQWxsT2YoKSB7XHJcbiAgICB2YXIgbWF0Y2hlcnMgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgbWF0Y2hlcnNbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgIH1cclxuICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIG1hdGNoZXJzLmV2ZXJ5KGZ1bmN0aW9uIChtYXRjaGVyKSB7IHJldHVybiBtYXRjaGVzKG1hdGNoZXIsIGFjdGlvbik7IH0pO1xyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBoYXNFeHBlY3RlZFJlcXVlc3RNZXRhZGF0YShhY3Rpb24sIHZhbGlkU3RhdHVzKSB7XHJcbiAgICBpZiAoIWFjdGlvbiB8fCAhYWN0aW9uLm1ldGEpXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgdmFyIGhhc1ZhbGlkUmVxdWVzdElkID0gdHlwZW9mIGFjdGlvbi5tZXRhLnJlcXVlc3RJZCA9PT0gXCJzdHJpbmdcIjtcclxuICAgIHZhciBoYXNWYWxpZFJlcXVlc3RTdGF0dXMgPSB2YWxpZFN0YXR1cy5pbmRleE9mKGFjdGlvbi5tZXRhLnJlcXVlc3RTdGF0dXMpID4gLTE7XHJcbiAgICByZXR1cm4gaGFzVmFsaWRSZXF1ZXN0SWQgJiYgaGFzVmFsaWRSZXF1ZXN0U3RhdHVzO1xyXG59XHJcbmZ1bmN0aW9uIGlzQXN5bmNUaHVua0FycmF5KGEpIHtcclxuICAgIHJldHVybiB0eXBlb2YgYVswXSA9PT0gXCJmdW5jdGlvblwiICYmIFwicGVuZGluZ1wiIGluIGFbMF0gJiYgXCJmdWxmaWxsZWRcIiBpbiBhWzBdICYmIFwicmVqZWN0ZWRcIiBpbiBhWzBdO1xyXG59XHJcbmZ1bmN0aW9uIGlzUGVuZGluZygpIHtcclxuICAgIHZhciBhc3luY1RodW5rcyA9IFtdO1xyXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICBhc3luY1RodW5rc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgfVxyXG4gICAgaWYgKGFzeW5jVGh1bmtzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7IHJldHVybiBoYXNFeHBlY3RlZFJlcXVlc3RNZXRhZGF0YShhY3Rpb24sIFtcInBlbmRpbmdcIl0pOyB9O1xyXG4gICAgfVxyXG4gICAgaWYgKCFpc0FzeW5jVGh1bmtBcnJheShhc3luY1RodW5rcykpIHtcclxuICAgICAgICByZXR1cm4gaXNQZW5kaW5nKCkoYXN5bmNUaHVua3NbMF0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcclxuICAgICAgICB2YXIgbWF0Y2hlcnMgPSBhc3luY1RodW5rcy5tYXAoZnVuY3Rpb24gKGFzeW5jVGh1bmspIHsgcmV0dXJuIGFzeW5jVGh1bmsucGVuZGluZzsgfSk7XHJcbiAgICAgICAgdmFyIGNvbWJpbmVkTWF0Y2hlciA9IGlzQW55T2YuYXBwbHkodm9pZCAwLCBtYXRjaGVycyk7XHJcbiAgICAgICAgcmV0dXJuIGNvbWJpbmVkTWF0Y2hlcihhY3Rpb24pO1xyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBpc1JlamVjdGVkKCkge1xyXG4gICAgdmFyIGFzeW5jVGh1bmtzID0gW107XHJcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIGFzeW5jVGh1bmtzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICB9XHJcbiAgICBpZiAoYXN5bmNUaHVua3MubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHsgcmV0dXJuIGhhc0V4cGVjdGVkUmVxdWVzdE1ldGFkYXRhKGFjdGlvbiwgW1wicmVqZWN0ZWRcIl0pOyB9O1xyXG4gICAgfVxyXG4gICAgaWYgKCFpc0FzeW5jVGh1bmtBcnJheShhc3luY1RodW5rcykpIHtcclxuICAgICAgICByZXR1cm4gaXNSZWplY3RlZCgpKGFzeW5jVGh1bmtzWzBdKTtcclxuICAgIH1cclxuICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgdmFyIG1hdGNoZXJzID0gYXN5bmNUaHVua3MubWFwKGZ1bmN0aW9uIChhc3luY1RodW5rKSB7IHJldHVybiBhc3luY1RodW5rLnJlamVjdGVkOyB9KTtcclxuICAgICAgICB2YXIgY29tYmluZWRNYXRjaGVyID0gaXNBbnlPZi5hcHBseSh2b2lkIDAsIG1hdGNoZXJzKTtcclxuICAgICAgICByZXR1cm4gY29tYmluZWRNYXRjaGVyKGFjdGlvbik7XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGlzUmVqZWN0ZWRXaXRoVmFsdWUoKSB7XHJcbiAgICB2YXIgYXN5bmNUaHVua3MgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgYXN5bmNUaHVua3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgIH1cclxuICAgIHZhciBoYXNGbGFnID0gZnVuY3Rpb24gKGFjdGlvbikge1xyXG4gICAgICAgIHJldHVybiBhY3Rpb24gJiYgYWN0aW9uLm1ldGEgJiYgYWN0aW9uLm1ldGEucmVqZWN0ZWRXaXRoVmFsdWU7XHJcbiAgICB9O1xyXG4gICAgaWYgKGFzeW5jVGh1bmtzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgICAgIHZhciBjb21iaW5lZE1hdGNoZXIgPSBpc0FsbE9mKGlzUmVqZWN0ZWQuYXBwbHkodm9pZCAwLCBhc3luY1RodW5rcyksIGhhc0ZsYWcpO1xyXG4gICAgICAgICAgICByZXR1cm4gY29tYmluZWRNYXRjaGVyKGFjdGlvbik7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIGlmICghaXNBc3luY1RodW5rQXJyYXkoYXN5bmNUaHVua3MpKSB7XHJcbiAgICAgICAgcmV0dXJuIGlzUmVqZWN0ZWRXaXRoVmFsdWUoKShhc3luY1RodW5rc1swXSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xyXG4gICAgICAgIHZhciBjb21iaW5lZE1hdGNoZXIgPSBpc0FsbE9mKGlzUmVqZWN0ZWQuYXBwbHkodm9pZCAwLCBhc3luY1RodW5rcyksIGhhc0ZsYWcpO1xyXG4gICAgICAgIHJldHVybiBjb21iaW5lZE1hdGNoZXIoYWN0aW9uKTtcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gaXNGdWxmaWxsZWQoKSB7XHJcbiAgICB2YXIgYXN5bmNUaHVua3MgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgYXN5bmNUaHVua3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgIH1cclxuICAgIGlmIChhc3luY1RodW5rcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikgeyByZXR1cm4gaGFzRXhwZWN0ZWRSZXF1ZXN0TWV0YWRhdGEoYWN0aW9uLCBbXCJmdWxmaWxsZWRcIl0pOyB9O1xyXG4gICAgfVxyXG4gICAgaWYgKCFpc0FzeW5jVGh1bmtBcnJheShhc3luY1RodW5rcykpIHtcclxuICAgICAgICByZXR1cm4gaXNGdWxmaWxsZWQoKShhc3luY1RodW5rc1swXSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xyXG4gICAgICAgIHZhciBtYXRjaGVycyA9IGFzeW5jVGh1bmtzLm1hcChmdW5jdGlvbiAoYXN5bmNUaHVuaykgeyByZXR1cm4gYXN5bmNUaHVuay5mdWxmaWxsZWQ7IH0pO1xyXG4gICAgICAgIHZhciBjb21iaW5lZE1hdGNoZXIgPSBpc0FueU9mLmFwcGx5KHZvaWQgMCwgbWF0Y2hlcnMpO1xyXG4gICAgICAgIHJldHVybiBjb21iaW5lZE1hdGNoZXIoYWN0aW9uKTtcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gaXNBc3luY1RodW5rQWN0aW9uKCkge1xyXG4gICAgdmFyIGFzeW5jVGh1bmtzID0gW107XHJcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIGFzeW5jVGh1bmtzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICB9XHJcbiAgICBpZiAoYXN5bmNUaHVua3MubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHsgcmV0dXJuIGhhc0V4cGVjdGVkUmVxdWVzdE1ldGFkYXRhKGFjdGlvbiwgW1wicGVuZGluZ1wiLCBcImZ1bGZpbGxlZFwiLCBcInJlamVjdGVkXCJdKTsgfTtcclxuICAgIH1cclxuICAgIGlmICghaXNBc3luY1RodW5rQXJyYXkoYXN5bmNUaHVua3MpKSB7XHJcbiAgICAgICAgcmV0dXJuIGlzQXN5bmNUaHVua0FjdGlvbigpKGFzeW5jVGh1bmtzWzBdKTtcclxuICAgIH1cclxuICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgdmFyIG1hdGNoZXJzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBhc3luY1RodW5rc18xID0gYXN5bmNUaHVua3M7IF9pIDwgYXN5bmNUaHVua3NfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIGFzeW5jVGh1bmsgPSBhc3luY1RodW5rc18xW19pXTtcclxuICAgICAgICAgICAgbWF0Y2hlcnMucHVzaChhc3luY1RodW5rLnBlbmRpbmcsIGFzeW5jVGh1bmsucmVqZWN0ZWQsIGFzeW5jVGh1bmsuZnVsZmlsbGVkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGNvbWJpbmVkTWF0Y2hlciA9IGlzQW55T2YuYXBwbHkodm9pZCAwLCBtYXRjaGVycyk7XHJcbiAgICAgICAgcmV0dXJuIGNvbWJpbmVkTWF0Y2hlcihhY3Rpb24pO1xyXG4gICAgfTtcclxufVxyXG4vLyBzcmMvbGlzdGVuZXJNaWRkbGV3YXJlL3V0aWxzLnRzXHJcbnZhciBhc3NlcnRGdW5jdGlvbiA9IGZ1bmN0aW9uIChmdW5jLCBleHBlY3RlZCkge1xyXG4gICAgaWYgKHR5cGVvZiBmdW5jICE9PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGV4cGVjdGVkICsgXCIgaXMgbm90IGEgZnVuY3Rpb25cIik7XHJcbiAgICB9XHJcbn07XHJcbnZhciBub29wID0gZnVuY3Rpb24gKCkge1xyXG59O1xyXG52YXIgY2F0Y2hSZWplY3Rpb24gPSBmdW5jdGlvbiAocHJvbWlzZTIsIG9uRXJyb3IpIHtcclxuICAgIGlmIChvbkVycm9yID09PSB2b2lkIDApIHsgb25FcnJvciA9IG5vb3A7IH1cclxuICAgIHByb21pc2UyLmNhdGNoKG9uRXJyb3IpO1xyXG4gICAgcmV0dXJuIHByb21pc2UyO1xyXG59O1xyXG52YXIgYWRkQWJvcnRTaWduYWxMaXN0ZW5lciA9IGZ1bmN0aW9uIChhYm9ydFNpZ25hbCwgY2FsbGJhY2spIHtcclxuICAgIGFib3J0U2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBjYWxsYmFjaywgeyBvbmNlOiB0cnVlIH0pO1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFib3J0U2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBjYWxsYmFjayk7IH07XHJcbn07XHJcbnZhciBhYm9ydENvbnRyb2xsZXJXaXRoUmVhc29uID0gZnVuY3Rpb24gKGFib3J0Q29udHJvbGxlciwgcmVhc29uKSB7XHJcbiAgICB2YXIgc2lnbmFsID0gYWJvcnRDb250cm9sbGVyLnNpZ25hbDtcclxuICAgIGlmIChzaWduYWwuYWJvcnRlZCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmICghKFwicmVhc29uXCIgaW4gc2lnbmFsKSkge1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzaWduYWwsIFwicmVhc29uXCIsIHtcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgdmFsdWU6IHJlYXNvbixcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgO1xyXG4gICAgYWJvcnRDb250cm9sbGVyLmFib3J0KHJlYXNvbik7XHJcbn07XHJcbi8vIHNyYy9saXN0ZW5lck1pZGRsZXdhcmUvZXhjZXB0aW9ucy50c1xyXG52YXIgdGFzayA9IFwidGFza1wiO1xyXG52YXIgbGlzdGVuZXIgPSBcImxpc3RlbmVyXCI7XHJcbnZhciBjb21wbGV0ZWQgPSBcImNvbXBsZXRlZFwiO1xyXG52YXIgY2FuY2VsbGVkID0gXCJjYW5jZWxsZWRcIjtcclxudmFyIHRhc2tDYW5jZWxsZWQgPSBcInRhc2stXCIgKyBjYW5jZWxsZWQ7XHJcbnZhciB0YXNrQ29tcGxldGVkID0gXCJ0YXNrLVwiICsgY29tcGxldGVkO1xyXG52YXIgbGlzdGVuZXJDYW5jZWxsZWQgPSBsaXN0ZW5lciArIFwiLVwiICsgY2FuY2VsbGVkO1xyXG52YXIgbGlzdGVuZXJDb21wbGV0ZWQgPSBsaXN0ZW5lciArIFwiLVwiICsgY29tcGxldGVkO1xyXG52YXIgVGFza0Fib3J0RXJyb3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBUYXNrQWJvcnRFcnJvcihjb2RlKSB7XHJcbiAgICAgICAgdGhpcy5jb2RlID0gY29kZTtcclxuICAgICAgICB0aGlzLm5hbWUgPSBcIlRhc2tBYm9ydEVycm9yXCI7XHJcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gdGFzayArIFwiIFwiICsgY2FuY2VsbGVkICsgXCIgKHJlYXNvbjogXCIgKyBjb2RlICsgXCIpXCI7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gVGFza0Fib3J0RXJyb3I7XHJcbn0oKSk7XHJcbi8vIHNyYy9saXN0ZW5lck1pZGRsZXdhcmUvdGFzay50c1xyXG52YXIgdmFsaWRhdGVBY3RpdmUgPSBmdW5jdGlvbiAoc2lnbmFsKSB7XHJcbiAgICBpZiAoc2lnbmFsLmFib3J0ZWQpIHtcclxuICAgICAgICB0aHJvdyBuZXcgVGFza0Fib3J0RXJyb3Ioc2lnbmFsLnJlYXNvbik7XHJcbiAgICB9XHJcbn07XHJcbmZ1bmN0aW9uIHJhY2VXaXRoU2lnbmFsKHNpZ25hbCwgcHJvbWlzZTIpIHtcclxuICAgIHZhciBjbGVhbnVwID0gbm9vcDtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgdmFyIG5vdGlmeVJlamVjdGlvbiA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlamVjdChuZXcgVGFza0Fib3J0RXJyb3Ioc2lnbmFsLnJlYXNvbikpOyB9O1xyXG4gICAgICAgIGlmIChzaWduYWwuYWJvcnRlZCkge1xyXG4gICAgICAgICAgICBub3RpZnlSZWplY3Rpb24oKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjbGVhbnVwID0gYWRkQWJvcnRTaWduYWxMaXN0ZW5lcihzaWduYWwsIG5vdGlmeVJlamVjdGlvbik7XHJcbiAgICAgICAgcHJvbWlzZTIuZmluYWxseShmdW5jdGlvbiAoKSB7IHJldHVybiBjbGVhbnVwKCk7IH0pLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcclxuICAgIH0pLmZpbmFsbHkoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGNsZWFudXAgPSBub29wO1xyXG4gICAgfSk7XHJcbn1cclxudmFyIHJ1blRhc2sgPSBmdW5jdGlvbiAodGFzazIsIGNsZWFuVXApIHsgcmV0dXJuIF9fYXN5bmModm9pZCAwLCBudWxsLCBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgdmFsdWUsIGVycm9yXzE7XHJcbiAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9jKSB7XHJcbiAgICAgICAgc3dpdGNoIChfYy5sYWJlbCkge1xyXG4gICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICBfYy50cnlzLnB1c2goWzAsIDMsIDQsIDVdKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIFByb21pc2UucmVzb2x2ZSgpXTtcclxuICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgX2Muc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGFzazIoKV07XHJcbiAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgIHZhbHVlID0gX2Muc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiBcIm9rXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZVxyXG4gICAgICAgICAgICAgICAgICAgIH1dO1xyXG4gICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICBlcnJvcl8xID0gX2Muc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiBlcnJvcl8xIGluc3RhbmNlb2YgVGFza0Fib3J0RXJyb3IgPyBcImNhbmNlbGxlZFwiIDogXCJyZWplY3RlZFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogZXJyb3JfMVxyXG4gICAgICAgICAgICAgICAgICAgIH1dO1xyXG4gICAgICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICAgICAgICBjbGVhblVwID09IG51bGwgPyB2b2lkIDAgOiBjbGVhblVwKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWzcgLyplbmRmaW5hbGx5Ki9dO1xyXG4gICAgICAgICAgICBjYXNlIDU6IHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufSk7IH07XHJcbnZhciBjcmVhdGVQYXVzZSA9IGZ1bmN0aW9uIChzaWduYWwpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAocHJvbWlzZTIpIHtcclxuICAgICAgICByZXR1cm4gY2F0Y2hSZWplY3Rpb24ocmFjZVdpdGhTaWduYWwoc2lnbmFsLCBwcm9taXNlMikudGhlbihmdW5jdGlvbiAob3V0cHV0KSB7XHJcbiAgICAgICAgICAgIHZhbGlkYXRlQWN0aXZlKHNpZ25hbCk7XHJcbiAgICAgICAgICAgIHJldHVybiBvdXRwdXQ7XHJcbiAgICAgICAgfSkpO1xyXG4gICAgfTtcclxufTtcclxudmFyIGNyZWF0ZURlbGF5ID0gZnVuY3Rpb24gKHNpZ25hbCkge1xyXG4gICAgdmFyIHBhdXNlID0gY3JlYXRlUGF1c2Uoc2lnbmFsKTtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodGltZW91dE1zKSB7XHJcbiAgICAgICAgcmV0dXJuIHBhdXNlKG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJldHVybiBzZXRUaW1lb3V0KHJlc29sdmUsIHRpbWVvdXRNcyk7IH0pKTtcclxuICAgIH07XHJcbn07XHJcbi8vIHNyYy9saXN0ZW5lck1pZGRsZXdhcmUvaW5kZXgudHNcclxudmFyIGFzc2lnbiA9IE9iamVjdC5hc3NpZ247XHJcbnZhciBJTlRFUk5BTF9OSUxfVE9LRU4gPSB7fTtcclxudmFyIGFsbSA9IFwibGlzdGVuZXJNaWRkbGV3YXJlXCI7XHJcbnZhciBjcmVhdGVGb3JrID0gZnVuY3Rpb24gKHBhcmVudEFib3J0U2lnbmFsLCBwYXJlbnRCbG9ja2luZ1Byb21pc2VzKSB7XHJcbiAgICB2YXIgbGlua0NvbnRyb2xsZXJzID0gZnVuY3Rpb24gKGNvbnRyb2xsZXIpIHsgcmV0dXJuIGFkZEFib3J0U2lnbmFsTGlzdGVuZXIocGFyZW50QWJvcnRTaWduYWwsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFib3J0Q29udHJvbGxlcldpdGhSZWFzb24oY29udHJvbGxlciwgcGFyZW50QWJvcnRTaWduYWwucmVhc29uKTsgfSk7IH07XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhc2tFeGVjdXRvciwgb3B0cykge1xyXG4gICAgICAgIGFzc2VydEZ1bmN0aW9uKHRhc2tFeGVjdXRvciwgXCJ0YXNrRXhlY3V0b3JcIik7XHJcbiAgICAgICAgdmFyIGNoaWxkQWJvcnRDb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xyXG4gICAgICAgIGxpbmtDb250cm9sbGVycyhjaGlsZEFib3J0Q29udHJvbGxlcik7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJ1blRhc2soZnVuY3Rpb24gKCkgeyByZXR1cm4gX19hc3luYyh2b2lkIDAsIG51bGwsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdDI7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2MpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2MubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRlQWN0aXZlKHBhcmVudEFib3J0U2lnbmFsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVBY3RpdmUoY2hpbGRBYm9ydENvbnRyb2xsZXIuc2lnbmFsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGFza0V4ZWN1dG9yKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXVzZTogY3JlYXRlUGF1c2UoY2hpbGRBYm9ydENvbnRyb2xsZXIuc2lnbmFsKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxheTogY3JlYXRlRGVsYXkoY2hpbGRBYm9ydENvbnRyb2xsZXIuc2lnbmFsKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWduYWw6IGNoaWxkQWJvcnRDb250cm9sbGVyLnNpZ25hbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0MiA9IF9jLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVBY3RpdmUoY2hpbGRBYm9ydENvbnRyb2xsZXIuc2lnbmFsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHJlc3VsdDJdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTsgfSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gYWJvcnRDb250cm9sbGVyV2l0aFJlYXNvbihjaGlsZEFib3J0Q29udHJvbGxlciwgdGFza0NvbXBsZXRlZCk7IH0pO1xyXG4gICAgICAgIGlmIChvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLmF1dG9Kb2luKSB7XHJcbiAgICAgICAgICAgIHBhcmVudEJsb2NraW5nUHJvbWlzZXMucHVzaChyZXN1bHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICByZXN1bHQ6IGNyZWF0ZVBhdXNlKHBhcmVudEFib3J0U2lnbmFsKShyZXN1bHQpLFxyXG4gICAgICAgICAgICBjYW5jZWw6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGFib3J0Q29udHJvbGxlcldpdGhSZWFzb24oY2hpbGRBYm9ydENvbnRyb2xsZXIsIHRhc2tDYW5jZWxsZWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcbn07XHJcbnZhciBjcmVhdGVUYWtlUGF0dGVybiA9IGZ1bmN0aW9uIChzdGFydExpc3RlbmluZywgc2lnbmFsKSB7XHJcbiAgICB2YXIgdGFrZSA9IGZ1bmN0aW9uIChwcmVkaWNhdGUsIHRpbWVvdXQpIHsgcmV0dXJuIF9fYXN5bmModm9pZCAwLCBudWxsLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHVuc3Vic2NyaWJlLCB0dXBsZVByb21pc2UsIHByb21pc2VzLCBvdXRwdXQ7XHJcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYykge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKF9jLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVBY3RpdmUoc2lnbmFsKTtcclxuICAgICAgICAgICAgICAgICAgICB1bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIHR1cGxlUHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0b3BMaXN0ZW5pbmcgPSBzdGFydExpc3RlbmluZyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmVkaWNhdGU6IHByZWRpY2F0ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVmZmVjdDogZnVuY3Rpb24gKGFjdGlvbiwgbGlzdGVuZXJBcGkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lckFwaS51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyQXBpLmdldFN0YXRlKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyQXBpLmdldE9yaWdpbmFsU3RhdGUoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdG9wTGlzdGVuaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBwcm9taXNlcyA9IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHVwbGVQcm9taXNlXHJcbiAgICAgICAgICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGltZW91dCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb21pc2VzLnB1c2gobmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmV0dXJuIHNldFRpbWVvdXQocmVzb2x2ZSwgdGltZW91dCwgbnVsbCk7IH0pKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgX2MubGFiZWwgPSAxO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgIF9jLnRyeXMucHVzaChbMSwgLCAzLCA0XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgcmFjZVdpdGhTaWduYWwoc2lnbmFsLCBQcm9taXNlLnJhY2UocHJvbWlzZXMpKV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ID0gX2Muc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRlQWN0aXZlKHNpZ25hbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIG91dHB1dF07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgdW5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzcgLyplbmRmaW5hbGx5Ki9dO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pOyB9O1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChwcmVkaWNhdGUsIHRpbWVvdXQpIHsgcmV0dXJuIGNhdGNoUmVqZWN0aW9uKHRha2UocHJlZGljYXRlLCB0aW1lb3V0KSk7IH07XHJcbn07XHJcbnZhciBnZXRMaXN0ZW5lckVudHJ5UHJvcHNGcm9tID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuICAgIHZhciB0eXBlID0gb3B0aW9ucy50eXBlLCBhY3Rpb25DcmVhdG9yID0gb3B0aW9ucy5hY3Rpb25DcmVhdG9yLCBtYXRjaGVyID0gb3B0aW9ucy5tYXRjaGVyLCBwcmVkaWNhdGUgPSBvcHRpb25zLnByZWRpY2F0ZSwgZWZmZWN0ID0gb3B0aW9ucy5lZmZlY3Q7XHJcbiAgICBpZiAodHlwZSkge1xyXG4gICAgICAgIHByZWRpY2F0ZSA9IGNyZWF0ZUFjdGlvbih0eXBlKS5tYXRjaDtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGFjdGlvbkNyZWF0b3IpIHtcclxuICAgICAgICB0eXBlID0gYWN0aW9uQ3JlYXRvci50eXBlO1xyXG4gICAgICAgIHByZWRpY2F0ZSA9IGFjdGlvbkNyZWF0b3IubWF0Y2g7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChtYXRjaGVyKSB7XHJcbiAgICAgICAgcHJlZGljYXRlID0gbWF0Y2hlcjtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHByZWRpY2F0ZSkge1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ3JlYXRpbmcgb3IgcmVtb3ZpbmcgYSBsaXN0ZW5lciByZXF1aXJlcyBvbmUgb2YgdGhlIGtub3duIGZpZWxkcyBmb3IgbWF0Y2hpbmcgYW4gYWN0aW9uXCIpO1xyXG4gICAgfVxyXG4gICAgYXNzZXJ0RnVuY3Rpb24oZWZmZWN0LCBcIm9wdGlvbnMubGlzdGVuZXJcIik7XHJcbiAgICByZXR1cm4geyBwcmVkaWNhdGU6IHByZWRpY2F0ZSwgdHlwZTogdHlwZSwgZWZmZWN0OiBlZmZlY3QgfTtcclxufTtcclxudmFyIGNyZWF0ZUxpc3RlbmVyRW50cnkgPSBmdW5jdGlvbiAob3B0aW9ucykge1xyXG4gICAgdmFyIF9jID0gZ2V0TGlzdGVuZXJFbnRyeVByb3BzRnJvbShvcHRpb25zKSwgdHlwZSA9IF9jLnR5cGUsIHByZWRpY2F0ZSA9IF9jLnByZWRpY2F0ZSwgZWZmZWN0ID0gX2MuZWZmZWN0O1xyXG4gICAgdmFyIGlkID0gbmFub2lkKCk7XHJcbiAgICB2YXIgZW50cnkgPSB7XHJcbiAgICAgICAgaWQ6IGlkLFxyXG4gICAgICAgIGVmZmVjdDogZWZmZWN0LFxyXG4gICAgICAgIHR5cGU6IHR5cGUsXHJcbiAgICAgICAgcHJlZGljYXRlOiBwcmVkaWNhdGUsXHJcbiAgICAgICAgcGVuZGluZzogbmV3IFNldCgpLFxyXG4gICAgICAgIHVuc3Vic2NyaWJlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuc3Vic2NyaWJlIG5vdCBpbml0aWFsaXplZFwiKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGVudHJ5O1xyXG59O1xyXG52YXIgY2FuY2VsQWN0aXZlTGlzdGVuZXJzID0gZnVuY3Rpb24gKGVudHJ5KSB7XHJcbiAgICBlbnRyeS5wZW5kaW5nLmZvckVhY2goZnVuY3Rpb24gKGNvbnRyb2xsZXIpIHtcclxuICAgICAgICBhYm9ydENvbnRyb2xsZXJXaXRoUmVhc29uKGNvbnRyb2xsZXIsIGxpc3RlbmVyQ2FuY2VsbGVkKTtcclxuICAgIH0pO1xyXG59O1xyXG52YXIgY3JlYXRlQ2xlYXJMaXN0ZW5lck1pZGRsZXdhcmUgPSBmdW5jdGlvbiAobGlzdGVuZXJNYXApIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgbGlzdGVuZXJNYXAuZm9yRWFjaChjYW5jZWxBY3RpdmVMaXN0ZW5lcnMpO1xyXG4gICAgICAgIGxpc3RlbmVyTWFwLmNsZWFyKCk7XHJcbiAgICB9O1xyXG59O1xyXG52YXIgc2FmZWx5Tm90aWZ5RXJyb3IgPSBmdW5jdGlvbiAoZXJyb3JIYW5kbGVyLCBlcnJvclRvTm90aWZ5LCBlcnJvckluZm8pIHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgZXJyb3JIYW5kbGVyKGVycm9yVG9Ob3RpZnksIGVycm9ySW5mbyk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyb3JIYW5kbGVyRXJyb3IpIHtcclxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhyb3cgZXJyb3JIYW5kbGVyRXJyb3I7XHJcbiAgICAgICAgfSwgMCk7XHJcbiAgICB9XHJcbn07XHJcbnZhciBhZGRMaXN0ZW5lciA9IGNyZWF0ZUFjdGlvbihhbG0gKyBcIi9hZGRcIik7XHJcbnZhciBjbGVhckFsbExpc3RlbmVycyA9IGNyZWF0ZUFjdGlvbihhbG0gKyBcIi9yZW1vdmVBbGxcIik7XHJcbnZhciByZW1vdmVMaXN0ZW5lciA9IGNyZWF0ZUFjdGlvbihhbG0gKyBcIi9yZW1vdmVcIik7XHJcbnZhciBkZWZhdWx0RXJyb3JIYW5kbGVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGFyZ3MgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgfVxyXG4gICAgY29uc29sZS5lcnJvci5hcHBseShjb25zb2xlLCBfX3NwcmVhZEFycmF5KFthbG0gKyBcIi9lcnJvclwiXSwgYXJncykpO1xyXG59O1xyXG5mdW5jdGlvbiBjcmVhdGVMaXN0ZW5lck1pZGRsZXdhcmUobWlkZGxld2FyZU9wdGlvbnMpIHtcclxuICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICBpZiAobWlkZGxld2FyZU9wdGlvbnMgPT09IHZvaWQgMCkgeyBtaWRkbGV3YXJlT3B0aW9ucyA9IHt9OyB9XHJcbiAgICB2YXIgbGlzdGVuZXJNYXAgPSBuZXcgTWFwKCk7XHJcbiAgICB2YXIgZXh0cmEgPSBtaWRkbGV3YXJlT3B0aW9ucy5leHRyYSwgX2MgPSBtaWRkbGV3YXJlT3B0aW9ucy5vbkVycm9yLCBvbkVycm9yID0gX2MgPT09IHZvaWQgMCA/IGRlZmF1bHRFcnJvckhhbmRsZXIgOiBfYztcclxuICAgIGFzc2VydEZ1bmN0aW9uKG9uRXJyb3IsIFwib25FcnJvclwiKTtcclxuICAgIHZhciBpbnNlcnRFbnRyeSA9IGZ1bmN0aW9uIChlbnRyeSkge1xyXG4gICAgICAgIGVudHJ5LnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbGlzdGVuZXJNYXAuZGVsZXRlKGVudHJ5LmlkKTsgfTtcclxuICAgICAgICBsaXN0ZW5lck1hcC5zZXQoZW50cnkuaWQsIGVudHJ5KTtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGNhbmNlbE9wdGlvbnMpIHtcclxuICAgICAgICAgICAgZW50cnkudW5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgICAgaWYgKGNhbmNlbE9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IGNhbmNlbE9wdGlvbnMuY2FuY2VsQWN0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICBjYW5jZWxBY3RpdmVMaXN0ZW5lcnMoZW50cnkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcbiAgICB2YXIgZmluZExpc3RlbmVyRW50cnkgPSBmdW5jdGlvbiAoY29tcGFyYXRvcikge1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgX2MgPSBBcnJheS5mcm9tKGxpc3RlbmVyTWFwLnZhbHVlcygpKTsgX2kgPCBfYy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIGVudHJ5ID0gX2NbX2ldO1xyXG4gICAgICAgICAgICBpZiAoY29tcGFyYXRvcihlbnRyeSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlbnRyeTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdm9pZCAwO1xyXG4gICAgfTtcclxuICAgIHZhciBzdGFydExpc3RlbmluZyA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcbiAgICAgICAgdmFyIGVudHJ5ID0gZmluZExpc3RlbmVyRW50cnkoZnVuY3Rpb24gKGV4aXN0aW5nRW50cnkpIHsgcmV0dXJuIGV4aXN0aW5nRW50cnkuZWZmZWN0ID09PSBvcHRpb25zLmVmZmVjdDsgfSk7XHJcbiAgICAgICAgaWYgKCFlbnRyeSkge1xyXG4gICAgICAgICAgICBlbnRyeSA9IGNyZWF0ZUxpc3RlbmVyRW50cnkob3B0aW9ucyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBpbnNlcnRFbnRyeShlbnRyeSk7XHJcbiAgICB9O1xyXG4gICAgdmFyIHN0b3BMaXN0ZW5pbmcgPSBmdW5jdGlvbiAob3B0aW9ucykge1xyXG4gICAgICAgIHZhciBfYyA9IGdldExpc3RlbmVyRW50cnlQcm9wc0Zyb20ob3B0aW9ucyksIHR5cGUgPSBfYy50eXBlLCBlZmZlY3QgPSBfYy5lZmZlY3QsIHByZWRpY2F0ZSA9IF9jLnByZWRpY2F0ZTtcclxuICAgICAgICB2YXIgZW50cnkgPSBmaW5kTGlzdGVuZXJFbnRyeShmdW5jdGlvbiAoZW50cnkyKSB7XHJcbiAgICAgICAgICAgIHZhciBtYXRjaFByZWRpY2F0ZU9yVHlwZSA9IHR5cGVvZiB0eXBlID09PSBcInN0cmluZ1wiID8gZW50cnkyLnR5cGUgPT09IHR5cGUgOiBlbnRyeTIucHJlZGljYXRlID09PSBwcmVkaWNhdGU7XHJcbiAgICAgICAgICAgIHJldHVybiBtYXRjaFByZWRpY2F0ZU9yVHlwZSAmJiBlbnRyeTIuZWZmZWN0ID09PSBlZmZlY3Q7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKGVudHJ5KSB7XHJcbiAgICAgICAgICAgIGVudHJ5LnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmNhbmNlbEFjdGl2ZSkge1xyXG4gICAgICAgICAgICAgICAgY2FuY2VsQWN0aXZlTGlzdGVuZXJzKGVudHJ5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gISFlbnRyeTtcclxuICAgIH07XHJcbiAgICB2YXIgbm90aWZ5TGlzdGVuZXIgPSBmdW5jdGlvbiAoZW50cnksIGFjdGlvbiwgYXBpLCBnZXRPcmlnaW5hbFN0YXRlKSB7IHJldHVybiBfX2FzeW5jKF90aGlzLCBudWxsLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGludGVybmFsVGFza0NvbnRyb2xsZXIsIHRha2UsIGF1dG9Kb2luUHJvbWlzZXMsIGxpc3RlbmVyRXJyb3JfMTtcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9jKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoX2MubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFRhc2tDb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRha2UgPSBjcmVhdGVUYWtlUGF0dGVybihzdGFydExpc3RlbmluZywgaW50ZXJuYWxUYXNrQ29udHJvbGxlci5zaWduYWwpO1xyXG4gICAgICAgICAgICAgICAgICAgIGF1dG9Kb2luUHJvbWlzZXMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBfYy5sYWJlbCA9IDE7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgX2MudHJ5cy5wdXNoKFsxLCAzLCA0LCA2XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZW50cnkucGVuZGluZy5hZGQoaW50ZXJuYWxUYXNrQ29udHJvbGxlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgUHJvbWlzZS5yZXNvbHZlKGVudHJ5LmVmZmVjdChhY3Rpb24sIGFzc2lnbih7fSwgYXBpLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRPcmlnaW5hbFN0YXRlOiBnZXRPcmlnaW5hbFN0YXRlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZGl0aW9uOiBmdW5jdGlvbiAocHJlZGljYXRlLCB0aW1lb3V0KSB7IHJldHVybiB0YWtlKHByZWRpY2F0ZSwgdGltZW91dCkudGhlbihCb29sZWFuKTsgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRha2U6IHRha2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxheTogY3JlYXRlRGVsYXkoaW50ZXJuYWxUYXNrQ29udHJvbGxlci5zaWduYWwpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF1c2U6IGNyZWF0ZVBhdXNlKGludGVybmFsVGFza0NvbnRyb2xsZXIuc2lnbmFsKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhOiBleHRyYSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpZ25hbDogaW50ZXJuYWxUYXNrQ29udHJvbGxlci5zaWduYWwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JrOiBjcmVhdGVGb3JrKGludGVybmFsVGFza0NvbnRyb2xsZXIuc2lnbmFsLCBhdXRvSm9pblByb21pc2VzKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuc3Vic2NyaWJlOiBlbnRyeS51bnN1YnNjcmliZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyTWFwLnNldChlbnRyeS5pZCwgZW50cnkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbmNlbEFjdGl2ZUxpc3RlbmVyczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudHJ5LnBlbmRpbmcuZm9yRWFjaChmdW5jdGlvbiAoY29udHJvbGxlciwgXywgc2V0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb250cm9sbGVyICE9PSBpbnRlcm5hbFRhc2tDb250cm9sbGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhYm9ydENvbnRyb2xsZXJXaXRoUmVhc29uKGNvbnRyb2xsZXIsIGxpc3RlbmVyQ2FuY2VsbGVkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldC5kZWxldGUoY29udHJvbGxlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpKV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgX2Muc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDZdO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyRXJyb3JfMSA9IF9jLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIShsaXN0ZW5lckVycm9yXzEgaW5zdGFuY2VvZiBUYXNrQWJvcnRFcnJvcikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2FmZWx5Tm90aWZ5RXJyb3Iob25FcnJvciwgbGlzdGVuZXJFcnJvcl8xLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYWlzZWRCeTogXCJlZmZlY3RcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNl07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IHJldHVybiBbNCAvKnlpZWxkKi8sIFByb21pc2UuYWxsU2V0dGxlZChhdXRvSm9pblByb21pc2VzKV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6XHJcbiAgICAgICAgICAgICAgICAgICAgX2Muc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGFib3J0Q29udHJvbGxlcldpdGhSZWFzb24oaW50ZXJuYWxUYXNrQ29udHJvbGxlciwgbGlzdGVuZXJDb21wbGV0ZWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGVudHJ5LnBlbmRpbmcuZGVsZXRlKGludGVybmFsVGFza0NvbnRyb2xsZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNyAvKmVuZGZpbmFsbHkqL107XHJcbiAgICAgICAgICAgICAgICBjYXNlIDY6IHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7IH07XHJcbiAgICB2YXIgY2xlYXJMaXN0ZW5lck1pZGRsZXdhcmUgPSBjcmVhdGVDbGVhckxpc3RlbmVyTWlkZGxld2FyZShsaXN0ZW5lck1hcCk7XHJcbiAgICB2YXIgbWlkZGxld2FyZSA9IGZ1bmN0aW9uIChhcGkpIHsgcmV0dXJuIGZ1bmN0aW9uIChuZXh0KSB7IHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgaWYgKCFpc0FjdGlvbihhY3Rpb24pKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXh0KGFjdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhZGRMaXN0ZW5lci5tYXRjaChhY3Rpb24pKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzdGFydExpc3RlbmluZyhhY3Rpb24ucGF5bG9hZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjbGVhckFsbExpc3RlbmVycy5tYXRjaChhY3Rpb24pKSB7XHJcbiAgICAgICAgICAgIGNsZWFyTGlzdGVuZXJNaWRkbGV3YXJlKCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHJlbW92ZUxpc3RlbmVyLm1hdGNoKGFjdGlvbikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHN0b3BMaXN0ZW5pbmcoYWN0aW9uLnBheWxvYWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgb3JpZ2luYWxTdGF0ZSA9IGFwaS5nZXRTdGF0ZSgpO1xyXG4gICAgICAgIHZhciBnZXRPcmlnaW5hbFN0YXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAob3JpZ2luYWxTdGF0ZSA9PT0gSU5URVJOQUxfTklMX1RPS0VOKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYWxtICsgXCI6IGdldE9yaWdpbmFsU3RhdGUgY2FuIG9ubHkgYmUgY2FsbGVkIHN5bmNocm9ub3VzbHlcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsU3RhdGU7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB2YXIgcmVzdWx0O1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IG5leHQoYWN0aW9uKTtcclxuICAgICAgICAgICAgaWYgKGxpc3RlbmVyTWFwLnNpemUgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudFN0YXRlID0gYXBpLmdldFN0YXRlKCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgbGlzdGVuZXJFbnRyaWVzID0gQXJyYXkuZnJvbShsaXN0ZW5lck1hcC52YWx1ZXMoKSk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGxpc3RlbmVyRW50cmllc18xID0gbGlzdGVuZXJFbnRyaWVzOyBfaSA8IGxpc3RlbmVyRW50cmllc18xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlbnRyeSA9IGxpc3RlbmVyRW50cmllc18xW19pXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcnVuTGlzdGVuZXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBydW5MaXN0ZW5lciA9IGVudHJ5LnByZWRpY2F0ZShhY3Rpb24sIGN1cnJlbnRTdGF0ZSwgb3JpZ2luYWxTdGF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChwcmVkaWNhdGVFcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBydW5MaXN0ZW5lciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzYWZlbHlOb3RpZnlFcnJvcihvbkVycm9yLCBwcmVkaWNhdGVFcnJvciwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFpc2VkQnk6IFwicHJlZGljYXRlXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghcnVuTGlzdGVuZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIG5vdGlmeUxpc3RlbmVyKGVudHJ5LCBhY3Rpb24sIGFwaSwgZ2V0T3JpZ2luYWxTdGF0ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7XHJcbiAgICAgICAgICAgIG9yaWdpbmFsU3RhdGUgPSBJTlRFUk5BTF9OSUxfVE9LRU47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9OyB9OyB9O1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBtaWRkbGV3YXJlOiBtaWRkbGV3YXJlLFxyXG4gICAgICAgIHN0YXJ0TGlzdGVuaW5nOiBzdGFydExpc3RlbmluZyxcclxuICAgICAgICBzdG9wTGlzdGVuaW5nOiBzdG9wTGlzdGVuaW5nLFxyXG4gICAgICAgIGNsZWFyTGlzdGVuZXJzOiBjbGVhckxpc3RlbmVyTWlkZGxld2FyZVxyXG4gICAgfTtcclxufVxyXG4vLyBzcmMvYXV0b0JhdGNoRW5oYW5jZXIudHNcclxudmFyIFNIT1VMRF9BVVRPQkFUQ0ggPSBcIlJUS19hdXRvQmF0Y2hcIjtcclxudmFyIHByZXBhcmVBdXRvQmF0Y2hlZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZ1bmN0aW9uIChwYXlsb2FkKSB7XHJcbiAgICB2YXIgX2M7XHJcbiAgICByZXR1cm4gKHtcclxuICAgICAgICBwYXlsb2FkOiBwYXlsb2FkLFxyXG4gICAgICAgIG1ldGE6IChfYyA9IHt9LCBfY1tTSE9VTERfQVVUT0JBVENIXSA9IHRydWUsIF9jKVxyXG4gICAgfSk7XHJcbn07IH07XHJcbnZhciBwcm9taXNlO1xyXG52YXIgcXVldWVNaWNyb3Rhc2tTaGltID0gdHlwZW9mIHF1ZXVlTWljcm90YXNrID09PSBcImZ1bmN0aW9uXCIgPyBxdWV1ZU1pY3JvdGFzay5iaW5kKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDogZ2xvYmFsVGhpcykgOiBmdW5jdGlvbiAoY2IpIHsgcmV0dXJuIChwcm9taXNlIHx8IChwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKCkpKS50aGVuKGNiKS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7IHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgIHRocm93IGVycjtcclxufSwgMCk7IH0pOyB9O1xyXG52YXIgY3JlYXRlUXVldWVXaXRoVGltZXIgPSBmdW5jdGlvbiAodGltZW91dCkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChub3RpZnkpIHtcclxuICAgICAgICBzZXRUaW1lb3V0KG5vdGlmeSwgdGltZW91dCk7XHJcbiAgICB9O1xyXG59O1xyXG52YXIgckFGID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lID8gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA6IGNyZWF0ZVF1ZXVlV2l0aFRpbWVyKDEwKTtcclxudmFyIGF1dG9CYXRjaEVuaGFuY2VyID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHsgdHlwZTogXCJyYWZcIiB9OyB9XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHsgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHN0b3JlID0gbmV4dC5hcHBseSh2b2lkIDAsIGFyZ3MpO1xyXG4gICAgICAgIHZhciBub3RpZnlpbmcgPSB0cnVlO1xyXG4gICAgICAgIHZhciBzaG91bGROb3RpZnlBdEVuZE9mVGljayA9IGZhbHNlO1xyXG4gICAgICAgIHZhciBub3RpZmljYXRpb25RdWV1ZWQgPSBmYWxzZTtcclxuICAgICAgICB2YXIgbGlzdGVuZXJzID0gbmV3IFNldCgpO1xyXG4gICAgICAgIHZhciBxdWV1ZUNhbGxiYWNrID0gb3B0aW9ucy50eXBlID09PSBcInRpY2tcIiA/IHF1ZXVlTWljcm90YXNrU2hpbSA6IG9wdGlvbnMudHlwZSA9PT0gXCJyYWZcIiA/IHJBRiA6IG9wdGlvbnMudHlwZSA9PT0gXCJjYWxsYmFja1wiID8gb3B0aW9ucy5xdWV1ZU5vdGlmaWNhdGlvbiA6IGNyZWF0ZVF1ZXVlV2l0aFRpbWVyKG9wdGlvbnMudGltZW91dCk7XHJcbiAgICAgICAgdmFyIG5vdGlmeUxpc3RlbmVycyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgbm90aWZpY2F0aW9uUXVldWVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmIChzaG91bGROb3RpZnlBdEVuZE9mVGljaykge1xyXG4gICAgICAgICAgICAgICAgc2hvdWxkTm90aWZ5QXRFbmRPZlRpY2sgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsKSB7IHJldHVybiBsKCk7IH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgc3RvcmUsIHtcclxuICAgICAgICAgICAgc3Vic2NyaWJlOiBmdW5jdGlvbiAobGlzdGVuZXIyKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgd3JhcHBlZExpc3RlbmVyID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbm90aWZ5aW5nICYmIGxpc3RlbmVyMigpOyB9O1xyXG4gICAgICAgICAgICAgICAgdmFyIHVuc3Vic2NyaWJlID0gc3RvcmUuc3Vic2NyaWJlKHdyYXBwZWRMaXN0ZW5lcik7XHJcbiAgICAgICAgICAgICAgICBsaXN0ZW5lcnMuYWRkKGxpc3RlbmVyMik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXJzLmRlbGV0ZShsaXN0ZW5lcjIpO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZGlzcGF0Y2g6IGZ1bmN0aW9uIChhY3Rpb24pIHtcclxuICAgICAgICAgICAgICAgIHZhciBfYTtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbm90aWZ5aW5nID0gISgoX2EgPSBhY3Rpb24gPT0gbnVsbCA/IHZvaWQgMCA6IGFjdGlvbi5tZXRhKSA9PSBudWxsID8gdm9pZCAwIDogX2FbU0hPVUxEX0FVVE9CQVRDSF0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3VsZE5vdGlmeUF0RW5kT2ZUaWNrID0gIW5vdGlmeWluZztcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc2hvdWxkTm90aWZ5QXRFbmRPZlRpY2spIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFub3RpZmljYXRpb25RdWV1ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdGlmaWNhdGlvblF1ZXVlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWV1ZUNhbGxiYWNrKG5vdGlmeUxpc3RlbmVycyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0b3JlLmRpc3BhdGNoKGFjdGlvbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmaW5hbGx5IHtcclxuICAgICAgICAgICAgICAgICAgICBub3RpZnlpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9OyB9O1xyXG59O1xyXG4vLyBzcmMvaW5kZXgudHNcclxuZW5hYmxlRVM1KCk7XHJcbmV4cG9ydCB7IEVuaGFuY2VyQXJyYXksIE1pZGRsZXdhcmVBcnJheSwgU0hPVUxEX0FVVE9CQVRDSCwgVGFza0Fib3J0RXJyb3IsIGFkZExpc3RlbmVyLCBhdXRvQmF0Y2hFbmhhbmNlciwgY2xlYXJBbGxMaXN0ZW5lcnMsIGNvbmZpZ3VyZVN0b3JlLCBjcmVhdGVBY3Rpb24sIGNyZWF0ZUFjdGlvbkNyZWF0b3JJbnZhcmlhbnRNaWRkbGV3YXJlLCBjcmVhdGVBc3luY1RodW5rLCBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvciwgY3JlYXRlRW50aXR5QWRhcHRlciwgY3JlYXRlSW1tdXRhYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlLCBjcmVhdGVMaXN0ZW5lck1pZGRsZXdhcmUsIGRlZmF1bHQyIGFzIGNyZWF0ZU5leHRTdGF0ZSwgY3JlYXRlUmVkdWNlciwgY3JlYXRlU2VsZWN0b3IyIGFzIGNyZWF0ZVNlbGVjdG9yLCBjcmVhdGVTZXJpYWxpemFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUsIGNyZWF0ZVNsaWNlLCBjdXJyZW50MiBhcyBjdXJyZW50LCBmaW5kTm9uU2VyaWFsaXphYmxlVmFsdWUsIGZyZWV6ZSwgZ2V0RGVmYXVsdE1pZGRsZXdhcmUsIGdldFR5cGUsIGlzQWN0aW9uLCBpc0FjdGlvbkNyZWF0b3IsIGlzQWxsT2YsIGlzQW55T2YsIGlzQXN5bmNUaHVua0FjdGlvbiwgaXNEcmFmdDQgYXMgaXNEcmFmdCwgaXNGU0EgYXMgaXNGbHV4U3RhbmRhcmRBY3Rpb24sIGlzRnVsZmlsbGVkLCBpc0ltbXV0YWJsZURlZmF1bHQsIGlzUGVuZGluZywgaXNQbGFpbiwgaXNQbGFpbk9iamVjdCwgaXNSZWplY3RlZCwgaXNSZWplY3RlZFdpdGhWYWx1ZSwgbWluaVNlcmlhbGl6ZUVycm9yLCBuYW5vaWQsIG9yaWdpbmFsLCBwcmVwYXJlQXV0b0JhdGNoZWQsIHJlbW92ZUxpc3RlbmVyLCB1bndyYXBSZXN1bHQgfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVkdXgtdG9vbGtpdC5lc20uanMubWFwIiwiaW1wb3J0IHsgZm9ybWF0RGF0ZXRpbWVSYW5nZUZpbHRlciwgZm9ybWF0TnVtYmVyUmFuZ2VGaWx0ZXIsIH0gZnJvbSAnLi4vLi4vY29tbW9uL2NvbXBvbmVudHMvbGlzdFV0aWxzJztcbmltcG9ydCB7IGdldEJhY2tlbmRDbGllbnQgfSBmcm9tICcuLi8uLi9jb21tb24vZXZvbHZlckNsaWVudCc7XG5pbXBvcnQgeyBjcmVhdGVGaWx0ZXJRdWVyeSB9IGZyb20gJy4uLy4uL2NvbW1vbi91dGlscy9maWx0ZXJVdGlscyc7XG5leHBvcnQgdmFyIGZvcm1hdHRlckJ5S2V5ID0ge1xuICAgIHM6IGZvcm1hdERhdGV0aW1lUmFuZ2VGaWx0ZXIsXG4gICAgZDogZm9ybWF0TnVtYmVyUmFuZ2VGaWx0ZXIsXG4gICAgcnFzOiBmb3JtYXROdW1iZXJSYW5nZUZpbHRlcixcbiAgICBycHM6IGZvcm1hdE51bWJlclJhbmdlRmlsdGVyLFxufTtcbmV4cG9ydCB2YXIgZmV0Y2hMb2dzID0gZnVuY3Rpb24gKGxvZ0ZpbHRlcnMpIHtcbiAgICB2YXIgdXJsID0gbmV3IFVSTCgnbG9nJywgZ2V0QmFja2VuZENsaWVudCgpLmRlZmF1bHRzLmJhc2VVUkwpO1xuICAgIGNyZWF0ZUZpbHRlclF1ZXJ5KGxvZ0ZpbHRlcnMsIGZvcm1hdHRlckJ5S2V5KS5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICAgIHJldHVybiB1cmwuc2VhcmNoUGFyYW1zLmFwcGVuZChrZXksIHZhbHVlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gZ2V0QmFja2VuZENsaWVudCgpLmdldCh1cmwudG9TdHJpbmcoKSk7XG59O1xuIiwidmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG52YXIgX19nZW5lcmF0b3IgPSAodGhpcyAmJiB0aGlzLl9fZ2VuZXJhdG9yKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgYm9keSkge1xuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XG4gICAgICAgIHdoaWxlIChnICYmIChnID0gMCwgb3BbMF0gJiYgKF8gPSAwKSksIF8pIHRyeSB7XG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcbiAgICB9XG59O1xuaW1wb3J0IHsgY3JlYXRlQXN5bmNUaHVuayB9IGZyb20gJ0ByZWR1eGpzL3Rvb2xraXQnO1xuaW1wb3J0IHsgZmV0Y2hMb2dzIH0gZnJvbSAnLi4vdXRpbHMnO1xuZXhwb3J0IHZhciBmZXRjaExvZ3NBY3Rpb24gPSBjcmVhdGVBc3luY1RodW5rKCdsb2dzL2ZldGNoTG9ncycsIGZ1bmN0aW9uIChsb2dGaWx0ZXJzLCB0aHVua0FwaSkgeyByZXR1cm4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmVzcG9uc2U7XG4gICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIGZldGNoTG9ncyhsb2dGaWx0ZXJzKV07XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyAhPT0gMjAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCB0aHVua0FwaS5yZWplY3RXaXRoVmFsdWUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdGYWlsZWQgdG8gZmV0Y2ggbG9ncy4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgcmVzcG9uc2UuZGF0YV07XG4gICAgICAgIH1cbiAgICB9KTtcbn0pOyB9KTtcbiIsInZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IGZ1bmN0aW9uICgpIHtcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfTtcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG52YXIgX2E7XG5pbXBvcnQgeyBjcmVhdGVTbGljZSB9IGZyb20gJ0ByZWR1eGpzL3Rvb2xraXQnO1xuaW1wb3J0IHsgZmV0Y2hMb2dzQWN0aW9uIH0gZnJvbSAnLi4vYWN0aW9ucyc7XG52YXIgaW5pdGlhbFN0YXRlID0ge1xuICAgIGxvZ01lc3NhZ2VzOiBbXSxcbiAgICBsb2dNZXNzYWdlVG90YWxDb3VudDogMCxcbiAgICBzdGF0dXM6ICdsb2FkaW5nJyxcbiAgICBmaWx0ZXJzOiB7XG4gICAgICAgIHBhZ2U6ICcwJyxcbiAgICAgICAgc2l6ZTogJzEwMCcsXG4gICAgfSxcbn07XG5leHBvcnQgdmFyIGxvZ1NsaWNlID0gY3JlYXRlU2xpY2Uoe1xuICAgIG5hbWU6ICdsb2cnLFxuICAgIGluaXRpYWxTdGF0ZTogaW5pdGlhbFN0YXRlLFxuICAgIHJlZHVjZXJzOiB7XG4gICAgICAgIHVwZGF0ZUxvZ3M6IGZ1bmN0aW9uIChzdGF0ZSwgX2EpIHtcbiAgICAgICAgICAgIHZhciBwYXlsb2FkID0gX2EucGF5bG9hZDtcbiAgICAgICAgICAgIHN0YXRlLmxvZ01lc3NhZ2VzID0gcGF5bG9hZDtcbiAgICAgICAgfSxcbiAgICAgICAgdXBkYXRlRmlsdGVyczogZnVuY3Rpb24gKHN0YXRlLCBfYSkge1xuICAgICAgICAgICAgdmFyIHBheWxvYWQgPSBfYS5wYXlsb2FkO1xuICAgICAgICAgICAgc3RhdGUuZmlsdGVycyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBzdGF0ZS5maWx0ZXJzKSwgcGF5bG9hZCk7XG4gICAgICAgIH0sXG4gICAgICAgIGNsZWFyRmlsdGVyczogZnVuY3Rpb24gKHN0YXRlLCBfYSkge1xuICAgICAgICAgICAgdmFyIHBheWxvYWQgPSBfYS5wYXlsb2FkO1xuICAgICAgICAgICAgdmFyIGZpbHRlcnMgPSBfX2Fzc2lnbih7fSwgc3RhdGUuZmlsdGVycyk7XG4gICAgICAgICAgICBwYXlsb2FkLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgZmlsdGVyc1tlbGVtZW50XTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc3RhdGUuZmlsdGVycyA9IGZpbHRlcnM7XG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBleHRyYVJlZHVjZXJzOiBmdW5jdGlvbiAoYnVpbGRlcikge1xuICAgICAgICBidWlsZGVyLmFkZENhc2UoZmV0Y2hMb2dzQWN0aW9uLnBlbmRpbmcsIGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgICAgICAgc3RhdGUuc3RhdHVzID0gJ2xvYWRpbmcnO1xuICAgICAgICAgICAgc3RhdGUuZXJyb3IgPSAndW5kZWZpbmVkJztcbiAgICAgICAgfSk7XG4gICAgICAgIGJ1aWxkZXIuYWRkQ2FzZShmZXRjaExvZ3NBY3Rpb24uZnVsZmlsbGVkLCBmdW5jdGlvbiAoc3RhdGUsIF9hKSB7XG4gICAgICAgICAgICB2YXIgcGF5bG9hZCA9IF9hLnBheWxvYWQ7XG4gICAgICAgICAgICBzdGF0ZS5sb2dNZXNzYWdlcyA9IHBheWxvYWQuY29udGVudDtcbiAgICAgICAgICAgIHN0YXRlLmxvZ01lc3NhZ2VUb3RhbENvdW50ID0gcGF5bG9hZC50b3RhbEVsZW1lbnRzO1xuICAgICAgICAgICAgc3RhdGUuc3RhdHVzID0gJ3N1Y2NlZWRlZCc7XG4gICAgICAgIH0pO1xuICAgICAgICBidWlsZGVyLmFkZENhc2UoZmV0Y2hMb2dzQWN0aW9uLnJlamVjdGVkLCBmdW5jdGlvbiAoc3RhdGUsIF9hKSB7XG4gICAgICAgICAgICB2YXIgcGF5bG9hZCA9IF9hLnBheWxvYWQ7XG4gICAgICAgICAgICBpZiAocGF5bG9hZCkge1xuICAgICAgICAgICAgICAgIHN0YXRlLmVycm9yID0gcGF5bG9hZC5tZXNzYWdlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3RhdGUuc3RhdHVzID0gJ2ZhaWxlZCc7XG4gICAgICAgIH0pO1xuICAgIH0sXG59KTtcbmV4cG9ydCB2YXIgdXBkYXRlTG9ncyA9IChfYSA9IGxvZ1NsaWNlLmFjdGlvbnMsIF9hLnVwZGF0ZUxvZ3MpLCB1cGRhdGVGaWx0ZXJzID0gX2EudXBkYXRlRmlsdGVycywgY2xlYXJGaWx0ZXJzID0gX2EuY2xlYXJGaWx0ZXJzO1xuZXhwb3J0IHZhciBzZWxlY3RMb2dzID0gZnVuY3Rpb24gKHN0YXRlKSB7IHJldHVybiBzdGF0ZS5sb2dzLmxvZ01lc3NhZ2VzOyB9O1xuZXhwb3J0IHZhciBzZWxlY3RMb2dNZXNzYWdlVG90YWxDb3VudCA9IGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgIHJldHVybiBzdGF0ZS5sb2dzLmxvZ01lc3NhZ2VUb3RhbENvdW50O1xufTtcbmV4cG9ydCB2YXIgc2VsZWN0RmlsdGVycyA9IGZ1bmN0aW9uIChzdGF0ZSkgeyByZXR1cm4gc3RhdGUubG9ncy5maWx0ZXJzOyB9O1xuZXhwb3J0IHZhciBzZWxlY3RTdGF0dXMgPSBmdW5jdGlvbiAoc3RhdGUpIHsgcmV0dXJuIHN0YXRlLmxvZ3Muc3RhdHVzOyB9O1xuZXhwb3J0IGRlZmF1bHQgbG9nU2xpY2UucmVkdWNlcjtcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTcuMC4yXG4gKiByZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGI9NjAxMDMsYz02MDEwNixkPTYwMTA3LGU9NjAxMDgsZj02MDExNCxnPTYwMTA5LGg9NjAxMTAsaz02MDExMixsPTYwMTEzLG09NjAxMjAsbj02MDExNSxwPTYwMTE2LHE9NjAxMjEscj02MDEyMix1PTYwMTE3LHY9NjAxMjksdz02MDEzMTtcbmlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3Ipe3ZhciB4PVN5bWJvbC5mb3I7Yj14KFwicmVhY3QuZWxlbWVudFwiKTtjPXgoXCJyZWFjdC5wb3J0YWxcIik7ZD14KFwicmVhY3QuZnJhZ21lbnRcIik7ZT14KFwicmVhY3Quc3RyaWN0X21vZGVcIik7Zj14KFwicmVhY3QucHJvZmlsZXJcIik7Zz14KFwicmVhY3QucHJvdmlkZXJcIik7aD14KFwicmVhY3QuY29udGV4dFwiKTtrPXgoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTtsPXgoXCJyZWFjdC5zdXNwZW5zZVwiKTttPXgoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpO249eChcInJlYWN0Lm1lbW9cIik7cD14KFwicmVhY3QubGF6eVwiKTtxPXgoXCJyZWFjdC5ibG9ja1wiKTtyPXgoXCJyZWFjdC5zZXJ2ZXIuYmxvY2tcIik7dT14KFwicmVhY3QuZnVuZGFtZW50YWxcIik7dj14KFwicmVhY3QuZGVidWdfdHJhY2VfbW9kZVwiKTt3PXgoXCJyZWFjdC5sZWdhY3lfaGlkZGVuXCIpfVxuZnVuY3Rpb24geShhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgdD1hLiQkdHlwZW9mO3N3aXRjaCh0KXtjYXNlIGI6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgZDpjYXNlIGY6Y2FzZSBlOmNhc2UgbDpjYXNlIG06cmV0dXJuIGE7ZGVmYXVsdDpzd2l0Y2goYT1hJiZhLiQkdHlwZW9mLGEpe2Nhc2UgaDpjYXNlIGs6Y2FzZSBwOmNhc2UgbjpjYXNlIGc6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm4gdH19Y2FzZSBjOnJldHVybiB0fX19dmFyIHo9ZyxBPWIsQj1rLEM9ZCxEPXAsRT1uLEY9YyxHPWYsSD1lLEk9bDtleHBvcnRzLkNvbnRleHRDb25zdW1lcj1oO2V4cG9ydHMuQ29udGV4dFByb3ZpZGVyPXo7ZXhwb3J0cy5FbGVtZW50PUE7ZXhwb3J0cy5Gb3J3YXJkUmVmPUI7ZXhwb3J0cy5GcmFnbWVudD1DO2V4cG9ydHMuTGF6eT1EO2V4cG9ydHMuTWVtbz1FO2V4cG9ydHMuUG9ydGFsPUY7ZXhwb3J0cy5Qcm9maWxlcj1HO2V4cG9ydHMuU3RyaWN0TW9kZT1IO1xuZXhwb3J0cy5TdXNwZW5zZT1JO2V4cG9ydHMuaXNBc3luY01vZGU9ZnVuY3Rpb24oKXtyZXR1cm4hMX07ZXhwb3J0cy5pc0NvbmN1cnJlbnRNb2RlPWZ1bmN0aW9uKCl7cmV0dXJuITF9O2V4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1ofTtleHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyPWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09Z307ZXhwb3J0cy5pc0VsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWJ9O2V4cG9ydHMuaXNGb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09a307ZXhwb3J0cy5pc0ZyYWdtZW50PWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09ZH07ZXhwb3J0cy5pc0xhenk9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1wfTtleHBvcnRzLmlzTWVtbz1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PW59O1xuZXhwb3J0cy5pc1BvcnRhbD1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PWN9O2V4cG9ydHMuaXNQcm9maWxlcj1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PWZ9O2V4cG9ydHMuaXNTdHJpY3RNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09ZX07ZXhwb3J0cy5pc1N1c3BlbnNlPWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09bH07ZXhwb3J0cy5pc1ZhbGlkRWxlbWVudFR5cGU9ZnVuY3Rpb24oYSl7cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBhfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYXx8YT09PWR8fGE9PT1mfHxhPT09dnx8YT09PWV8fGE9PT1sfHxhPT09bXx8YT09PXd8fFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJihhLiQkdHlwZW9mPT09cHx8YS4kJHR5cGVvZj09PW58fGEuJCR0eXBlb2Y9PT1nfHxhLiQkdHlwZW9mPT09aHx8YS4kJHR5cGVvZj09PWt8fGEuJCR0eXBlb2Y9PT11fHxhLiQkdHlwZW9mPT09cXx8YVswXT09PXIpPyEwOiExfTtcbmV4cG9ydHMudHlwZU9mPXk7XG4iLCJ2YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxuICAgICAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0O1xuICAgIH07XG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGZvcm1hdERhdGVUaW1lLCBmb3JtYXRNZXRhZGF0YSB9IGZyb20gJy4uLy4uL2NvbW1vbi9jb21wb25lbnRzL2xpc3RVdGlscyc7XG5pbXBvcnQgeyBkYXRldGltZVJhbmdlVmFsaWRhdG9yLCBudW1iZXJSYW5nZVZhbGlkYXRvciwgbnVtYmVyVmFsaWRhdG9yLCB9IGZyb20gJy4uLy4uL2NvbW1vbi91dGlscy92YWxpZGF0aW9uJztcbmltcG9ydCBWYWx1ZUZpbHRlckxpbmsgZnJvbSAnLi4vLi4vY29tbW9uL2NvbXBvbmVudHMvVmFsdWVGaWx0ZXJMaW5rJztcbmltcG9ydCBEYXRlVGltZVJhbmdlRmlsdGVyRmllbGQgZnJvbSAnLi4vLi4vY29tbW9uL2NvbXBvbmVudHMvRGF0ZVRpbWVSYW5nZUZpbHRlckZpZWxkJztcbnZhciBkZWZpbml0aW9uID0gW1xuICAgIHtcbiAgICAgICAgaWQ6ICdzdGFydFRpbWUnLFxuICAgICAgICBsYWJlbDogJ1N0YXJ0IHRpbWUnLFxuICAgICAgICByZW5kZXJWYWx1ZTogZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiBmb3JtYXREYXRlVGltZSh2YWx1ZSk7IH0sXG4gICAgICAgIG1pbldpZHRoOiAyNTAsXG4gICAgICAgIGZpbHRlcktleTogJ3MnLFxuICAgICAgICBmaWx0ZXJIZWxwZXI6ICd5eXl5LU1NLWRkIEhIOm1tOnNzIC0gP3l5eXktTU0tZGQgSEg6bW06c3MnLFxuICAgICAgICBmaWx0ZXJWYWxpZGF0b3I6IGRhdGV0aW1lUmFuZ2VWYWxpZGF0b3IsXG4gICAgICAgIHJlbmRlckZpbHRlcjogZnVuY3Rpb24gKHByb3BzKSB7IHJldHVybiBfanN4KERhdGVUaW1lUmFuZ2VGaWx0ZXJGaWVsZCwgX19hc3NpZ24oe30sIHByb3BzKSk7IH0sXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGlkOiAnZHVyYXRpb25NcycsXG4gICAgICAgIGxhYmVsOiAnRHVyYXRpb24sIG1zJyxcbiAgICAgICAgbWluV2lkdGg6IDEwMCxcbiAgICAgICAgZmlsdGVyS2V5OiAnZCcsXG4gICAgICAgIGZpbHRlckhlbHBlcjogJ251bWJlciAtID9udW1iZXInLFxuICAgICAgICBmaWx0ZXJWYWxpZGF0b3I6IG51bWJlclJhbmdlVmFsaWRhdG9yLFxuICAgIH0sXG4gICAge1xuICAgICAgICBpZDogJ21lc3NhZ2VUeXBlJyxcbiAgICAgICAgbGFiZWw6ICdUeXBlJyxcbiAgICAgICAgbWluV2lkdGg6IDEwMCxcbiAgICAgICAgZmlsdGVyS2V5OiAnbScsXG4gICAgICAgIGZpbHRlckhlbHBlcjogJ2UuZy4gQ29udHJvbFZhbHVlL2xpc3QnLFxuICAgIH0sXG4gICAgeyBpZDogJ3Byb3RvY29sJywgbGFiZWw6ICdQcm90b2NvbCcsIG1pbldpZHRoOiAxNTAsIGZpbHRlcktleTogJ3AnLCBmaWx0ZXJIZWxwZXI6ICdlLmcuIGh0dHAnIH0sXG4gICAgeyBpZDogJ3N0YXR1c0NvZGUnLCBsYWJlbDogJ1N0YXR1cycsIG1pbldpZHRoOiAxNTAsIGZpbHRlcktleTogJ2MnLCBmaWx0ZXJIZWxwZXI6ICdlLmcuIDQwMCcgfSxcbiAgICB7XG4gICAgICAgIGlkOiAnbWVzc2FnZUNoYWluSWQnLFxuICAgICAgICBsYWJlbDogJ01lc3NhZ2UgQ2hhaW4gSUQnLFxuICAgICAgICBtaW5XaWR0aDogMTUwLFxuICAgICAgICBmaWx0ZXJLZXk6ICdtY2knLFxuICAgICAgICByZW5kZXJWYWx1ZTogZnVuY3Rpb24gKHZhbHVlLCBjb2x1bW4sIHVwZGF0ZUZpbHRlcnMpIHsgcmV0dXJuIChfanN4KFZhbHVlRmlsdGVyTGluaywgeyB2YWx1ZTogdmFsdWUudG9TdHJpbmcoKSwgZmlsdGVyS2V5OiBjb2x1bW4uZmlsdGVyS2V5LCB1cGRhdGVGaWx0ZXJzOiB1cGRhdGVGaWx0ZXJzIH0pKTsgfSxcbiAgICAgICAgZmlsdGVySGVscGVyOiAnZS5nLiAxMjMnLFxuICAgICAgICBmaWx0ZXJWYWxpZGF0b3I6IG51bWJlclZhbGlkYXRvcixcbiAgICB9LFxuICAgIHtcbiAgICAgICAgaWQ6ICdyZXF1ZXN0U2l6ZScsXG4gICAgICAgIGxhYmVsOiAnUmVxdWVzdCBzaXplJyxcbiAgICAgICAgbWluV2lkdGg6IDE1MCxcbiAgICAgICAgZmlsdGVyS2V5OiAncnFzJyxcbiAgICAgICAgZmlsdGVySGVscGVyOiAnbnVtYmVyIC0gP251bWJlcicsXG4gICAgICAgIGZpbHRlclZhbGlkYXRvcjogbnVtYmVyUmFuZ2VWYWxpZGF0b3IsXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGlkOiAncmVzcG9uc2VTaXplJyxcbiAgICAgICAgbGFiZWw6ICdSZXNwb25zZSBzaXplJyxcbiAgICAgICAgbWluV2lkdGg6IDE1MCxcbiAgICAgICAgZmlsdGVyS2V5OiAncnBzJyxcbiAgICAgICAgZmlsdGVySGVscGVyOiAnbnVtYmVyIC0gP251bWJlcicsXG4gICAgICAgIGZpbHRlclZhbGlkYXRvcjogbnVtYmVyUmFuZ2VWYWxpZGF0b3IsXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGlkOiAnbWV0YWRhdGEnLFxuICAgICAgICBsYWJlbDogJ01ldGFkYXRhJyxcbiAgICAgICAgcmVuZGVyVmFsdWU6IGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gZm9ybWF0TWV0YWRhdGEodmFsdWUpOyB9LFxuICAgICAgICBtaW5XaWR0aDogMTUwLFxuICAgICAgICBmaWx0ZXJLZXk6ICdtZCcsXG4gICAgICAgIGZpbHRlckhlbHBlcjogJ0E9YSwgQj1iJyxcbiAgICB9LFxuXTtcbmV4cG9ydCBkZWZhdWx0IGRlZmluaXRpb247XG4iLCJpbXBvcnQgeyBqc3ggYXMgX2pzeCwgRnJhZ21lbnQgYXMgX0ZyYWdtZW50LCBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBCYWNrZHJvcCwgQ2lyY3VsYXJQcm9ncmVzcyB9IGZyb20gJ0BtdWkvbWF0ZXJpYWwnO1xuaW1wb3J0IGNvbHVtbnMgZnJvbSAnLi9sb2dMaXN0Q29sdW1uRGVmaW5pdGlvbnMnO1xuaW1wb3J0IHsgTGlzdFRhYmxlIH0gZnJvbSAnLi4vLi4vY29tbW9uL2NvbXBvbmVudHMvTGlzdFRhYmxlJztcbnZhciBMb2dMaXN0Q29tcG9uZW50ID0gZnVuY3Rpb24gKF9hKSB7XG4gICAgdmFyIG9uUGFnZUNoYW5nZSA9IF9hLm9uUGFnZUNoYW5nZSwgbG9nU3RhdHVzID0gX2EubG9nU3RhdHVzLCBsb2dSb3dzID0gX2EubG9nUm93cywgbG9nRmlsdGVycyA9IF9hLmxvZ0ZpbHRlcnMsIGxvZ01lc3NhZ2VUb3RhbENvdW50ID0gX2EubG9nTWVzc2FnZVRvdGFsQ291bnQsIG9uQ2xpY2tSb3dBY3Rpb24gPSBfYS5vbkNsaWNrUm93QWN0aW9uLCBvbkZpbHRlckNoYW5nZSA9IF9hLm9uRmlsdGVyQ2hhbmdlLCBvbkZpbHRlckNsZWFyID0gX2Eub25GaWx0ZXJDbGVhcjtcbiAgICByZXR1cm4gKF9qc3hzKF9GcmFnbWVudCwgeyBjaGlsZHJlbjogW19qc3goTGlzdFRhYmxlLCB7IG9uUGFnZUNoYW5nZTogb25QYWdlQ2hhbmdlLCByb3dzOiBsb2dSb3dzLCBjb2x1bW5zOiBjb2x1bW5zLCBmaWx0ZXJzOiBsb2dGaWx0ZXJzLCBtZXNzYWdlVG90YWxDb3VudDogbG9nTWVzc2FnZVRvdGFsQ291bnQsIG9uQ2xpY2tSb3dBY3Rpb246IG9uQ2xpY2tSb3dBY3Rpb24sIG9uRmlsdGVyQ2hhbmdlOiBvbkZpbHRlckNoYW5nZSwgb25GaWx0ZXJDbGVhcjogb25GaWx0ZXJDbGVhciB9KSwgbG9nU3RhdHVzID09PSAnbG9hZGluZycgJiYgKF9qc3goQmFja2Ryb3AsIHsgb3BlbjogdHJ1ZSwgY2hpbGRyZW46IF9qc3goQ2lyY3VsYXJQcm9ncmVzcywge30pIH0pKV0gfSkpO1xufTtcbmV4cG9ydCBkZWZhdWx0IExvZ0xpc3RDb21wb25lbnQ7XG4iLCJcInVzZSBzdHJpY3RcIjtcblwidXNlIGNsaWVudFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgX2NyZWF0ZVN2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZVN2Z0ljb25cIikpO1xudmFyIF9qc3hSdW50aW1lID0gcmVxdWlyZShcInJlYWN0L2pzeC1ydW50aW1lXCIpO1xudmFyIF9kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0ID0gKDAsIF9jcmVhdGVTdmdJY29uLmRlZmF1bHQpKCAvKiNfX1BVUkVfXyovKDAsIF9qc3hSdW50aW1lLmpzeCkoXCJwYXRoXCIsIHtcbiAgZDogXCJNMjAgMTFINy44M2w1LjU5LTUuNTlMMTIgNGwtOCA4IDggOCAxLjQxLTEuNDFMNy44MyAxM0gyMHpcIlxufSksICdBcnJvd0JhY2snKTsiLCJpbXBvcnQgeyBqc3ggYXMgX2pzeCwganN4cyBhcyBfanN4cywgRnJhZ21lbnQgYXMgX0ZyYWdtZW50IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgQXJyb3dCYWNrSWNvbiBmcm9tICdAbXVpL2ljb25zLW1hdGVyaWFsL0Fycm93QmFjayc7XG5pbXBvcnQgeyBCdXR0b24sIEdyaWQsIFRleHRGaWVsZCB9IGZyb20gJ0BtdWkvbWF0ZXJpYWwnO1xuaW1wb3J0IHsgZm9ybWF0RGF0ZVRpbWUgfSBmcm9tICcuLi8uLi9jb21tb24vY29tcG9uZW50cy9saXN0VXRpbHMnO1xudmFyIExvZ01lc3NhZ2VGaWVsZCA9IGZ1bmN0aW9uIChfYSkge1xuICAgIHZhciBsYWJlbCA9IF9hLmxhYmVsLCB2YWx1ZSA9IF9hLnZhbHVlLCBpc1dpZGUgPSBfYS5pc1dpZGUsIGlzRnVsbCA9IF9hLmlzRnVsbDtcbiAgICByZXR1cm4gKF9qc3goR3JpZCwgeyBpdGVtOiB0cnVlLCB4czogMTIsIHNtOiBpc0Z1bGwgPyAxMiA6IDYsIG1kOiBpc0Z1bGwgPyAxMiA6IGlzV2lkZSA/IDYgOiAzLCBjaGlsZHJlbjogX2pzeChUZXh0RmllbGQsIHsgbGFiZWw6IGxhYmVsLCB2YWx1ZTogdmFsdWUsIElucHV0UHJvcHM6IHtcbiAgICAgICAgICAgICAgICByZWFkT25seTogdHJ1ZSxcbiAgICAgICAgICAgIH0sIElucHV0TGFiZWxQcm9wczoge1xuICAgICAgICAgICAgICAgIHN0eWxlOiB7IGZvbnRTaXplOiAyMCB9LFxuICAgICAgICAgICAgfSwgbXVsdGlsaW5lOiB0cnVlLCBmdWxsV2lkdGg6IHRydWUgfSkgfSkpO1xufTtcbnZhciBMb2dNZXNzYWdlQ29tcG9uZW50ID0gZnVuY3Rpb24gKF9hKSB7XG4gICAgdmFyIG1lc3NhZ2UgPSBfYS5tZXNzYWdlLCBiYWNrQWN0aW9uID0gX2EuYmFja0FjdGlvbiwgZG93bmxvYWREYXRhQWN0aW9uID0gX2EuZG93bmxvYWREYXRhQWN0aW9uO1xuICAgIHJldHVybiAoX2pzeHMoX0ZyYWdtZW50LCB7IGNoaWxkcmVuOiBbX2pzeChCdXR0b24sIHsgdmFyaWFudDogXCJjb250YWluZWRcIiwgc3RhcnRJY29uOiBfanN4KEFycm93QmFja0ljb24sIHt9KSwgb25DbGljazogZnVuY3Rpb24gKCkgeyByZXR1cm4gYmFja0FjdGlvbigpOyB9LCBzeDoge1xuICAgICAgICAgICAgICAgICAgICBtYXJnaW5Cb3R0b206IDAuNSxcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDIwMCxcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnc2Vjb25kYXJ5Lm1haW4nLFxuICAgICAgICAgICAgICAgIH0sIGNoaWxkcmVuOiBcIkJhY2tcIiB9KSwgbWVzc2FnZSA/IChfanN4cyhHcmlkLCB7IGNvbnRhaW5lcjogdHJ1ZSwgZGlyZWN0aW9uOiBcInJvd1wiLCBqdXN0aWZ5Q29udGVudDogXCJmbGV4LXN0YXJ0XCIsIHNwYWNpbmc6IDIsIGNoaWxkcmVuOiBbX2pzeChHcmlkLCB7IGl0ZW06IHRydWUsIHhzOiAxMiwgbWQ6IDEyLCBsZzogMTIsIGNoaWxkcmVuOiBfanN4KFwiaDFcIiwgeyBjaGlsZHJlbjogXCJNZXNzYWdlIERldGFpbHNcIiB9KSB9KSwgX2pzeChMb2dNZXNzYWdlRmllbGQsIHsgbGFiZWw6IFwiU2VudCBBdFwiLCB2YWx1ZTogZm9ybWF0RGF0ZVRpbWUobWVzc2FnZS5zdGFydFRpbWUpIH0pLCBfanN4KExvZ01lc3NhZ2VGaWVsZCwgeyBsYWJlbDogXCJEdXJhdGlvbiwgbXNcIiwgdmFsdWU6IG1lc3NhZ2UuZHVyYXRpb25NcyB9KSwgX2pzeChMb2dNZXNzYWdlRmllbGQsIHsgbGFiZWw6IFwiQXBwIFNlcnZlclwiLCB2YWx1ZTogbWVzc2FnZS5hcHBTZXJ2ZXIgfSksIF9qc3goTG9nTWVzc2FnZUZpZWxkLCB7IGxhYmVsOiBcIkFwcCBWZXJzaW9uXCIsIHZhbHVlOiBtZXNzYWdlLmFwcFZlcnNpb24gfSksIF9qc3goTG9nTWVzc2FnZUZpZWxkLCB7IGxhYmVsOiBcIlR5cGVcIiwgdmFsdWU6IG1lc3NhZ2UubWVzc2FnZVR5cGUgfSksIF9qc3goTG9nTWVzc2FnZUZpZWxkLCB7IGxhYmVsOiBcIlByb3RvY29sXCIsIHZhbHVlOiBtZXNzYWdlLnByb3RvY29sIH0pLCBfanN4KExvZ01lc3NhZ2VGaWVsZCwgeyBsYWJlbDogXCJSZXF1ZXN0aW5nIHN5c3RlbVwiLCB2YWx1ZTogbWVzc2FnZS5yZXF1ZXN0aW5nU3lzdGVtIH0pLCBfanN4KExvZ01lc3NhZ2VGaWVsZCwgeyBsYWJlbDogXCJSZXNwb25kaW5nIHN5c3RlbVwiLCB2YWx1ZTogbWVzc2FnZS5yZXNwb25kaW5nU3lzdGVtIH0pLCBfanN4cyhHcmlkLCB7IGl0ZW06IHRydWUsIGNvbnRhaW5lcjogdHJ1ZSwgeHM6IDEyLCBzcGFjaW5nOiAyLCBjaGlsZHJlbjogW19qc3goTG9nTWVzc2FnZUZpZWxkLCB7IGxhYmVsOiBcIlJlcXVlc3QgaGVhZGVyc1wiLCB2YWx1ZTogbWVzc2FnZS5yZXF1ZXN0SGVhZGVycywgaXNXaWRlOiB0cnVlIH0pLCBfanN4KExvZ01lc3NhZ2VGaWVsZCwgeyBsYWJlbDogXCJSZXNwb25zZSBoZWFkZXJzXCIsIHZhbHVlOiBtZXNzYWdlLnJlc3BvbnNlSGVhZGVycywgaXNXaWRlOiB0cnVlIH0pXSB9KSwgX2pzeChMb2dNZXNzYWdlRmllbGQsIHsgbGFiZWw6IFwiQWRkcmVzc1wiLCB2YWx1ZTogbWVzc2FnZS5hZGRyZXNzLCBpc0Z1bGw6IHRydWUgfSksIF9qc3goTG9nTWVzc2FnZUZpZWxkLCB7IGxhYmVsOiBcIlN0YXR1cyBjb2RlXCIsIHZhbHVlOiBtZXNzYWdlLnN0YXR1c0NvZGUgfSksIF9qc3goTG9nTWVzc2FnZUZpZWxkLCB7IGxhYmVsOiBcIlN0YXR1cyBtZXNzYWdlXCIsIHZhbHVlOiBtZXNzYWdlLnN0YXR1c01lc3NhZ2UgfSksIF9qc3goTG9nTWVzc2FnZUZpZWxkLCB7IGxhYmVsOiBcIk1lc3NhZ2UgY2hhaW4gSURcIiwgdmFsdWU6IG1lc3NhZ2UubWVzc2FnZUNoYWluSWQgfSksIF9qc3goTG9nTWVzc2FnZUZpZWxkLCB7IGxhYmVsOiBcIlJlcXVlc3QgU2l6ZSAoQilcIiwgdmFsdWU6IG1lc3NhZ2UucmVxdWVzdFNpemUgfSksIF9qc3goTG9nTWVzc2FnZUZpZWxkLCB7IGxhYmVsOiBcIlJlc3BvbnNlIFNpemUgKEIpXCIsIHZhbHVlOiBtZXNzYWdlLnJlc3BvbnNlU2l6ZSB9KSwgX2pzeChHcmlkLCB7IGl0ZW06IHRydWUsIGNvbnRhaW5lcjogdHJ1ZSwgeHM6IDEyLCBzcGFjaW5nOiAyLCBjaGlsZHJlbjogX2pzeChMb2dNZXNzYWdlRmllbGQsIHsgbGFiZWw6IFwiTWV0YWRhdGFcIiwgdmFsdWU6IE9iamVjdC5lbnRyaWVzKG1lc3NhZ2UubWV0YWRhdGEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBrZXkgPSBfYVswXSwgdmFsdWUgPSBfYVsxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KGtleSwgXCIgPSBcIikuY29uY2F0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuam9pbignXFxuJyksIGlzRnVsbDogdHJ1ZSB9KSB9KSwgX2pzeHMoR3JpZCwgeyBjb250YWluZXI6IHRydWUsIGl0ZW06IHRydWUsIGRpcmVjdGlvbjogXCJyb3dcIiwgeHM6IDEyLCBzcGFjaW5nOiAyLCBjaGlsZHJlbjogW19qc3goR3JpZCwgeyBpdGVtOiB0cnVlLCB4czogMTIsIG1kOiAzLCBjaGlsZHJlbjogX2pzeChCdXR0b24sIHsgZGlzYWJsZWQ6IG1lc3NhZ2UucmVxdWVzdFNpemUgPT09IDAsIHZhcmlhbnQ6IFwiY29udGFpbmVkXCIsIG9uQ2xpY2s6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRvd25sb2FkRGF0YUFjdGlvbihtZXNzYWdlLmlkLCAncmVxdWVzdCcpOyB9LCBzeDogeyBtYXJnaW46IDEsIHdpZHRoOiAyMDAgfSwgY2hpbGRyZW46IFwiRG93bmxvYWQgUmVxdWVzdFwiIH0pIH0pLCBfanN4KEdyaWQsIHsgaXRlbTogdHJ1ZSwgeHM6IDEyLCBtZDogMywgY2hpbGRyZW46IF9qc3goQnV0dG9uLCB7IGRpc2FibGVkOiBtZXNzYWdlLnJlc3BvbnNlU2l6ZSA9PT0gMCwgdmFyaWFudDogXCJjb250YWluZWRcIiwgb25DbGljazogZnVuY3Rpb24gKCkgeyByZXR1cm4gZG93bmxvYWREYXRhQWN0aW9uKG1lc3NhZ2UuaWQsICdyZXNwb25zZScpOyB9LCBzeDogeyBtYXJnaW46IDEsIHdpZHRoOiAyMDAgfSwgY2hpbGRyZW46IFwiRG93bmxvYWQgUmVzcG9uc2VcIiB9KSB9KV0gfSldIH0pKSA6IChfanN4KFwicFwiLCB7IGNoaWxkcmVuOiBcIk5vIG1lc3NhZ2UgZGF0YSBmb3VuZFwiIH0pKV0gfSkpO1xufTtcbmV4cG9ydCBkZWZhdWx0IExvZ01lc3NhZ2VDb21wb25lbnQ7XG4iLCJpbXBvcnQgeyB1c2VMb2FkZXJEYXRhLCB1c2VOYXZpZ2F0ZSwgdXNlU2VhcmNoUGFyYW1zIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcblxuaW1wb3J0IHsgRmlsdGVyLCBQYXJhbUZvcm1hdHRlckJ5S2V5IH0gZnJvbSBcIkBldm9sdmVyLWZpL2V2b2x2ZXItYmFzaWNzXCI7XG5pbXBvcnQgeyBmaWx0ZXJGcm9tVXJsU2VhcmNoUGFyYW1zIH0gZnJvbSBcIkBldm9sdmVyLWZpL2V2b2x2ZXItYmFzaWNzXCI7XG5cbmltcG9ydCB7IExvZ0ZpbHRlciB9IGZyb20gXCJAZXZvbHZlci1maS9ldm9sdmVyLWJhc2ljcy9tZXNzYWdlLWxvZ1wiO1xuXG5pbXBvcnQge1xuICBmb3JtYXREYXRldGltZVJhbmdlRmlsdGVyLFxuICBmb3JtYXROdW1iZXJSYW5nZUZpbHRlcixcbn0gZnJvbSBcIkBldm9sdmVyLWZpL2V2b2x2ZXItYmFzaWNzXCI7XG5pbXBvcnQge1xuICBMb2dMaXN0Q29tcG9uZW50LFxuICBMb2dNZXNzYWdlUmVzcG9uc2UsXG59IGZyb20gXCJAZXZvbHZlci1maS9ldm9sdmVyLWJhc2ljcy9tZXNzYWdlLWxvZ1wiO1xuXG5jb25zdCBmb3JtYXR0ZXJCeUtleTogUGFyYW1Gb3JtYXR0ZXJCeUtleTxMb2dGaWx0ZXI+ID0ge1xuICBkOiBmb3JtYXROdW1iZXJSYW5nZUZpbHRlcixcbiAgczogZm9ybWF0RGF0ZXRpbWVSYW5nZUZpbHRlcixcbiAgcnFzOiBmb3JtYXROdW1iZXJSYW5nZUZpbHRlcixcbiAgcnBzOiBmb3JtYXROdW1iZXJSYW5nZUZpbHRlcixcbn07XG5cbmNvbnN0IGZvcm1hdFNlYXJjaFBhcmFtcyA9IChsb2dGaWx0ZXJzOiBMb2dGaWx0ZXIpOiBVUkxTZWFyY2hQYXJhbXMgPT4ge1xuICBjb25zdCByZXN1bHQgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKCk7XG4gIGlmICghbG9nRmlsdGVycyB8fCBPYmplY3Qua2V5cyhsb2dGaWx0ZXJzKS5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgT2JqZWN0LmVudHJpZXMobG9nRmlsdGVycykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICBjb25zdCBzdWJSZXN1bHQ6IFVSTFNlYXJjaFBhcmFtcyA9XG4gICAgICAgIGZvcm1hdHRlckJ5S2V5Py5ba2V5IGFzIGtleW9mIExvZ0ZpbHRlcl0/LihcbiAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICBrZXkgYXMga2V5b2YgTG9nRmlsdGVyXG4gICAgICAgICkgPz8gbmV3IFVSTFNlYXJjaFBhcmFtcyh7IFtrZXldOiB2YWx1ZSB9KTtcbiAgICAgIHN1YlJlc3VsdC5mb3JFYWNoKChzdWJWYWx1ZSwgc3ViS2V5KSA9PiB7XG4gICAgICAgIHJlc3VsdC5hcHBlbmQoc3ViS2V5LCBzdWJWYWx1ZSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5jb25zdCBNZXNzYWdlTG9nUm91dGUgPSAoKSA9PiB7XG4gIGNvbnN0IG5hdmlnYXRlID0gdXNlTmF2aWdhdGUoKTtcbiAgY29uc3QgW3NlYXJjaFBhcmFtcywgc2V0U2VhcmNoUGFyYW1zXSA9IHVzZVNlYXJjaFBhcmFtcygpO1xuICBjb25zdCBsb2dGaWx0ZXJzID0gZmlsdGVyRnJvbVVybFNlYXJjaFBhcmFtczxMb2dGaWx0ZXI+KHNlYXJjaFBhcmFtcywgW1xuICAgIFwidlwiLFxuICAgIFwicFwiLFxuICAgIFwic1wiLFxuICAgIFwiZFwiLFxuICAgIFwiY1wiLFxuICAgIFwibWNpXCIsXG4gICAgXCJycXNcIixcbiAgICBcInJwc1wiLFxuICAgIFwibWRcIixcbiAgICBcInBhZ2VcIixcbiAgICBcInNpemVcIixcbiAgXSk7XG4gIGNvbnN0IGxvZ01lc3NhZ2VSZXNwb25zZSA9IHVzZUxvYWRlckRhdGEoKSBhcyBMb2dNZXNzYWdlUmVzcG9uc2U7XG5cbiAgY29uc3QgeyB0b3RhbEVsZW1lbnRzLCBjb250ZW50OiBsb2dSb3dzIH0gPSBsb2dNZXNzYWdlUmVzcG9uc2U7XG5cbiAgY29uc29sZS5sb2coXCJsb2dSb3dzXCIsIGxvZ1Jvd3MpO1xuICBjb25zdCBoYW5kbGVQYWdlQ2hhbmdlID0gKHBhZ2U6IG51bWJlcik6IHZvaWQgPT4ge1xuICAgIGNvbnNvbGUubG9nKFwicGFnZSBjaGFuZ2VkIHRvXCIsIHBhZ2UpO1xuICB9O1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbiAgY29uc3QgaGFuZGxlT25DbGlja1JvdyA9IChpZDogc3RyaW5nIHwgbnVtYmVyLCBfbmV3V2luZG93PzogYm9vbGVhbikgPT4ge1xuICAgIG5hdmlnYXRlKGAvc3lzdGVtLWxvZ3MvJHtpZH1gKTtcbiAgfTtcblxuICBjb25zdCBoYW5kbGVGaWx0ZXJDaGFuZ2UgPSAodmFsdWU6IFBhcnRpYWw8RmlsdGVyPExvZ0ZpbHRlcj4+KTogdm9pZCA9PiB7XG4gICAgY29uc3QgbmV3UGFyYW1zID0gZm9ybWF0U2VhcmNoUGFyYW1zKHZhbHVlKTtcbiAgICBzZXRTZWFyY2hQYXJhbXMobmV3UGFyYW1zKTtcbiAgfTtcblxuICBjb25zdCBoYW5kbGVGaWx0ZXJDbGVhciA9IChrZXk6IGtleW9mIExvZ0ZpbHRlcik6IHZvaWQgPT4ge1xuICAgIGNvbnN0IG5ld1BhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoc2VhcmNoUGFyYW1zKTtcbiAgICBuZXdQYXJhbXMuZGVsZXRlKGtleSk7XG4gICAgc2V0U2VhcmNoUGFyYW1zKG5ld1BhcmFtcyk7XG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8TG9nTGlzdENvbXBvbmVudFxuICAgICAgb25QYWdlQ2hhbmdlPXtoYW5kbGVQYWdlQ2hhbmdlfVxuICAgICAgbG9nU3RhdHVzPXtcIlwifVxuICAgICAgbG9nUm93cz17bG9nUm93c31cbiAgICAgIGxvZ0ZpbHRlcnM9e2xvZ0ZpbHRlcnN9XG4gICAgICBsb2dNZXNzYWdlVG90YWxDb3VudD17dG90YWxFbGVtZW50c31cbiAgICAgIG9uQ2xpY2tSb3dBY3Rpb249e2hhbmRsZU9uQ2xpY2tSb3d9XG4gICAgICBvbkZpbHRlckNoYW5nZT17aGFuZGxlRmlsdGVyQ2hhbmdlfVxuICAgICAgb25GaWx0ZXJDbGVhcj17aGFuZGxlRmlsdGVyQ2xlYXJ9XG4gICAgLz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE1lc3NhZ2VMb2dSb3V0ZTtcbiIsImltcG9ydCB7IExvZ01lc3NhZ2VSZXNwb25zZSB9IGZyb20gXCJAZXZvbHZlci1maS9ldm9sdmVyLWJhc2ljcy9tZXNzYWdlLWxvZ1wiO1xuaW1wb3J0IHsgTG9hZGVyRnVuY3Rpb24sIExvYWRlckZ1bmN0aW9uQXJncyB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XG5cbmV4cG9ydCBjb25zdCBsb2FkZXI6IExvYWRlckZ1bmN0aW9uID0gYXN5bmMgKHtcbiAgcmVxdWVzdCxcbn06IExvYWRlckZ1bmN0aW9uQXJncyk6IFByb21pc2U8TG9nTWVzc2FnZVJlc3BvbnNlPiA9PiB7XG4gIGNvbnN0IHJlcXVlc3RVcmwgPSBuZXcgVVJMKHJlcXVlc3QudXJsKTtcbiAgY29uc3Qgc2VhcmNoUGFyYW1zID0gcmVxdWVzdFVybC5zZWFyY2hQYXJhbXM7XG5cbiAgLy8gVE9ETzogdXNlIHV0aWxpdGllcyBmcm9tIEBldm9sdmVyLWZpL2V2b2x2ZXItYmFzaWNzXG4gIGNvbnN0IGFwaVVybCA9IG5ldyBVUkwoXCJodHRwOi8vbG9jYWxob3N0OjgwODAvbG9nXCIpO1xuICBzZWFyY2hQYXJhbXMuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4ge1xuICAgIGFwaVVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKGtleSwgdmFsdWUpO1xuICB9KTtcblxuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGFwaVVybCwge1xuICAgIG1ldGhvZDogXCJHRVRcIixcbiAgICBoZWFkZXJzOiB7XG4gICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICB9LFxuICB9KTtcblxuICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGZldGNoIGxvZ3NcIik7XG4gIH1cblxuICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xufTtcbiIsImltcG9ydCB7XG4gIExvZ01lc3NhZ2VDb21wb25lbnQsXG4gIExvZ01lc3NhZ2VSZXNwb25zZSxcbn0gZnJvbSBcIkBldm9sdmVyLWZpL2V2b2x2ZXItYmFzaWNzL21lc3NhZ2UtbG9nXCI7XG5pbXBvcnQgeyB1c2VMb2FkZXJEYXRhLCB1c2VOYXZpZ2F0ZSwgdXNlUGFyYW1zIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcblxuY29uc3QgU2luZ2xlTWVzc2FnZVJvdXRlID0gKCkgPT4ge1xuICBjb25zdCBuYXZpZ2F0ZSA9IHVzZU5hdmlnYXRlKCk7XG4gIGNvbnN0IGRhdGEgPSB1c2VMb2FkZXJEYXRhKCk7XG4gIGNvbnN0IHsgaWQgfSA9IHVzZVBhcmFtczx7IGlkOiBzdHJpbmcgfT4oKTtcbiAgY29uc3QgcGFyc2VkSWQgPSBpZCA/IHBhcnNlSW50KGlkLCAxMCkgOiAwO1xuXG4gIGNvbnN0IHsgY29udGVudCB9ID0gZGF0YSBhcyBMb2dNZXNzYWdlUmVzcG9uc2U7XG5cbiAgY29uc3QgbWVzc2FnZSA9IGNvbnRlbnQuZmluZCgobWVzc2FnZSkgPT4gbWVzc2FnZS5pZCA9PT0gcGFyc2VkSWQpO1xuXG4gIHJldHVybiAoXG4gICAgPExvZ01lc3NhZ2VDb21wb25lbnRcbiAgICAgIG1lc3NhZ2U9e21lc3NhZ2V9XG4gICAgICBiYWNrQWN0aW9uPXsoKSA9PiBuYXZpZ2F0ZShcIi4uXCIsIHsgcmVsYXRpdmU6IFwicGF0aFwiIH0pfVxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuICAgICAgZG93bmxvYWREYXRhQWN0aW9uPXtmdW5jdGlvbiAoX2lkOiBudW1iZXIsIF90eXBlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRnVuY3Rpb24gbm90IGltcGxlbWVudGVkLlwiKTtcbiAgICAgIH19XG4gICAgLz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFNpbmdsZU1lc3NhZ2VSb3V0ZTtcbiIsImltcG9ydCB7IGdldEJhY2tlbmRDbGllbnQgfSBmcm9tICcuLi8uLi9jb21tb24vZXZvbHZlckNsaWVudCc7XG5leHBvcnQgdmFyIGZldGNoVHJpZ2dlcmFibGVzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBnZXRCYWNrZW5kQ2xpZW50KCkuZ2V0KCd0cmlnZ2VyJyk7XG59O1xuZXhwb3J0IHZhciBjcmVhdGVUcmlnZ2VyUXVlcnkgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgcmV0dXJuIG5ldyBVUkxTZWFyY2hQYXJhbXMocGFyYW1zKTtcbn07XG5leHBvcnQgdmFyIHRyaWdnZXJUcmlnZ2VyYWJsZSA9IGZ1bmN0aW9uICh0cmlnZ2VyTmFtZSwgcGFyYW1zKSB7XG4gICAgdmFyIHNlYXJjaFBhcmFtcyA9IGNyZWF0ZVRyaWdnZXJRdWVyeShwYXJhbXMpO1xuICAgIHZhciBwYXJhbXNTdHJpbmcgPSBzZWFyY2hQYXJhbXMudG9TdHJpbmcoKSA/IFwiP1wiLmNvbmNhdChzZWFyY2hQYXJhbXMudG9TdHJpbmcoKSkgOiAnJztcbiAgICByZXR1cm4gZ2V0QmFja2VuZENsaWVudCgpLnBvc3QoXCJ0cmlnZ2VyL1wiLmNvbmNhdCh0cmlnZ2VyTmFtZSwgXCIvYXN5bmNcIikuY29uY2F0KHBhcmFtc1N0cmluZykpO1xufTtcbiIsInZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xudmFyIF9fZ2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xuICAgICAgICB3aGlsZSAoZyAmJiAoZyA9IDAsIG9wWzBdICYmIChfID0gMCkpLCBfKSB0cnkge1xuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XG4gICAgfVxufTtcbmltcG9ydCB7IGNyZWF0ZUFzeW5jVGh1bmsgfSBmcm9tICdAcmVkdXhqcy90b29sa2l0JztcbmltcG9ydCB7IHRyaWdnZXJUcmlnZ2VyYWJsZSwgZmV0Y2hUcmlnZ2VyYWJsZXMgfSBmcm9tICcuLi91dGlscyc7XG5leHBvcnQgdmFyIGZldGNoVHJpZ2dlcmFibGVzQWN0aW9uID0gY3JlYXRlQXN5bmNUaHVuaygndHJpZ2dlcmFibGVzL2ZldGNoVHJpZ2dlcmFibGVzJywgZnVuY3Rpb24gKF9wYXlsb2FkLCB0aHVua0FwaSkgeyByZXR1cm4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmVzcG9uc2U7XG4gICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIGZldGNoVHJpZ2dlcmFibGVzKCldO1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgIT09IDIwMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgdGh1bmtBcGkucmVqZWN0V2l0aFZhbHVlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnRmFpbGVkIHRvIGZldGNoIHRyaWdnZXJhYmxlcycsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCByZXNwb25zZS5kYXRhXTtcbiAgICAgICAgfVxuICAgIH0pO1xufSk7IH0pO1xuZXhwb3J0IHZhciB0cmlnZ2VyQWN0aW9uID0gY3JlYXRlQXN5bmNUaHVuaygndHJpZ2dlcmFibGVzL3RyaWdnZXInLCBmdW5jdGlvbiAoX2EsIHRodW5rQXBpXzEpIHsgcmV0dXJuIF9fYXdhaXRlcih2b2lkIDAsIFtfYSwgdGh1bmtBcGlfMV0sIHZvaWQgMCwgZnVuY3Rpb24gKF9iLCB0aHVua0FwaSkge1xuICAgIHZhciByZXNwb25zZTtcbiAgICB2YXIgdHJpZ2dlck5hbWUgPSBfYi50cmlnZ2VyTmFtZSwgdHJpZ2dlclBhcmFtcyA9IF9iLnRyaWdnZXJQYXJhbXM7XG4gICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYykge1xuICAgICAgICBzd2l0Y2ggKF9jLmxhYmVsKSB7XG4gICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRyaWdnZXJUcmlnZ2VyYWJsZSh0cmlnZ2VyTmFtZSwgdHJpZ2dlclBhcmFtcyldO1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2Muc2VudCgpO1xuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgIT09IDIwMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgdGh1bmtBcGkucmVqZWN0V2l0aFZhbHVlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnRmFpbGVkIHRvIGZldGNoIHRyaWdnZXJhYmxlcycsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCByZXNwb25zZS5kYXRhXTtcbiAgICAgICAgfVxuICAgIH0pO1xufSk7IH0pO1xuIiwiaW1wb3J0IHsgY3JlYXRlU2xpY2UgfSBmcm9tICdAcmVkdXhqcy90b29sa2l0JztcbmltcG9ydCB7IGZldGNoVHJpZ2dlcmFibGVzQWN0aW9uLCB0cmlnZ2VyQWN0aW9uIH0gZnJvbSAnLi4vYWN0aW9ucyc7XG52YXIgaW5pdGlhbFN0YXRlID0ge1xuICAgIHRyaWdnZXJhYmxlczoge30sXG4gICAgZmV0Y2hTdGF0dXM6ICdsb2FkaW5nJyxcbn07XG5leHBvcnQgdmFyIHRyaWdnZXJhYmxlU2xpY2UgPSBjcmVhdGVTbGljZSh7XG4gICAgbmFtZTogJ3RyaWdnZXJhYmxlJyxcbiAgICBpbml0aWFsU3RhdGU6IGluaXRpYWxTdGF0ZSxcbiAgICByZWR1Y2Vyczoge30sXG4gICAgZXh0cmFSZWR1Y2VyczogZnVuY3Rpb24gKGJ1aWxkZXIpIHtcbiAgICAgICAgYnVpbGRlci5hZGRDYXNlKGZldGNoVHJpZ2dlcmFibGVzQWN0aW9uLnBlbmRpbmcsIGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgICAgICAgc3RhdGUuZmV0Y2hTdGF0dXMgPSAnbG9hZGluZyc7XG4gICAgICAgICAgICBzdGF0ZS5mZXRjaEVycm9yID0gJ3VuZGVmaW5lZCc7XG4gICAgICAgIH0pO1xuICAgICAgICBidWlsZGVyLmFkZENhc2UoZmV0Y2hUcmlnZ2VyYWJsZXNBY3Rpb24uZnVsZmlsbGVkLCBmdW5jdGlvbiAoc3RhdGUsIF9hKSB7XG4gICAgICAgICAgICB2YXIgcGF5bG9hZCA9IF9hLnBheWxvYWQ7XG4gICAgICAgICAgICBzdGF0ZS50cmlnZ2VyYWJsZXMgPSBwYXlsb2FkO1xuICAgICAgICAgICAgc3RhdGUuZmV0Y2hTdGF0dXMgPSAnc3VjY2VlZGVkJztcbiAgICAgICAgfSk7XG4gICAgICAgIGJ1aWxkZXIuYWRkQ2FzZShmZXRjaFRyaWdnZXJhYmxlc0FjdGlvbi5yZWplY3RlZCwgZnVuY3Rpb24gKHN0YXRlLCBfYSkge1xuICAgICAgICAgICAgdmFyIHBheWxvYWQgPSBfYS5wYXlsb2FkO1xuICAgICAgICAgICAgaWYgKHBheWxvYWQpIHtcbiAgICAgICAgICAgICAgICBzdGF0ZS5mZXRjaEVycm9yID0gcGF5bG9hZC5tZXNzYWdlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3RhdGUuZmV0Y2hTdGF0dXMgPSAnZmFpbGVkJztcbiAgICAgICAgfSk7XG4gICAgICAgIGJ1aWxkZXIuYWRkQ2FzZSh0cmlnZ2VyQWN0aW9uLnBlbmRpbmcsIGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgICAgICAgc3RhdGUudHJpZ2dlclN0YXR1cyA9ICdsb2FkaW5nJztcbiAgICAgICAgfSk7XG4gICAgICAgIGJ1aWxkZXIuYWRkQ2FzZSh0cmlnZ2VyQWN0aW9uLmZ1bGZpbGxlZCwgZnVuY3Rpb24gKHN0YXRlLCBfYSkge1xuICAgICAgICAgICAgdmFyIHBheWxvYWQgPSBfYS5wYXlsb2FkO1xuICAgICAgICAgICAgc3RhdGUudHJpZ2dlclJlc3BvbnNlID0gcGF5bG9hZDtcbiAgICAgICAgICAgIHN0YXRlLnRyaWdnZXJTdGF0dXMgPSAnc3VjY2VlZGVkJztcbiAgICAgICAgfSk7XG4gICAgICAgIGJ1aWxkZXIuYWRkQ2FzZSh0cmlnZ2VyQWN0aW9uLnJlamVjdGVkLCBmdW5jdGlvbiAoc3RhdGUsIF9hKSB7XG4gICAgICAgICAgICB2YXIgcGF5bG9hZCA9IF9hLnBheWxvYWQ7XG4gICAgICAgICAgICBpZiAocGF5bG9hZCkge1xuICAgICAgICAgICAgICAgIHN0YXRlLnRyaWdnZXJFcnJvciA9IHBheWxvYWQubWVzc2FnZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0YXRlLnRyaWdnZXJTdGF0dXMgPSAnZmFpbGVkJztcbiAgICAgICAgfSk7XG4gICAgfSxcbn0pO1xuZXhwb3J0IHZhciBzZWxlY3RUcmlnZ2VyYWJsZXMgPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICByZXR1cm4gc3RhdGUudHJpZ2dlcmFibGVzLnRyaWdnZXJhYmxlcztcbn07XG5leHBvcnQgdmFyIHNlbGVjdFRyaWdnZXJhYmxlc0ZldGNoU3RhdHVzID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgcmV0dXJuIHN0YXRlLnRyaWdnZXJhYmxlcy5mZXRjaFN0YXR1cztcbn07XG5leHBvcnQgdmFyIHNlbGVjdFRyaWdnZXJSZXNwb25zZSA9IGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgIHJldHVybiBzdGF0ZS50cmlnZ2VyYWJsZXMudHJpZ2dlclJlc3BvbnNlO1xufTtcbmV4cG9ydCB2YXIgc2VsZWN0VHJpZ2dlclN0YXR1cyA9IGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgIHJldHVybiBzdGF0ZS50cmlnZ2VyYWJsZXMudHJpZ2dlclN0YXR1cztcbn07XG5leHBvcnQgdmFyIHNlbGVjdElzVHJpZ2dlcnNMb2FkaW5nID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgcmV0dXJuIHN0YXRlLnRyaWdnZXJhYmxlcy5mZXRjaFN0YXR1cyA9PT0gJ2xvYWRpbmcnIHx8IHN0YXRlLnRyaWdnZXJhYmxlcy50cmlnZ2VyU3RhdHVzID09PSAnbG9hZGluZyc7XG59O1xuZXhwb3J0IGRlZmF1bHQgdHJpZ2dlcmFibGVTbGljZS5yZWR1Y2VyO1xuIiwiaW1wb3J0IHsgZ2V0QmFja2VuZENsaWVudCB9IGZyb20gJy4uLy4uL2NvbW1vbi9ldm9sdmVyQ2xpZW50JztcbmV4cG9ydCB2YXIgZmV0Y2hBY3RpdmVUYXNrU3RhdHVzZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGdldEJhY2tlbmRDbGllbnQoKS5nZXQoJ3Rhc2svbGlzdC9hY3RpdmUnKTtcbn07XG5leHBvcnQgdmFyIGZldGNoVGFza1N0YXR1cyA9IGZ1bmN0aW9uIChpZCkge1xuICAgIHJldHVybiBnZXRCYWNrZW5kQ2xpZW50KCkuZ2V0KFwidGFzay9cIi5jb25jYXQoaWQpKTtcbn07XG4iLCJ2YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbnZhciBfX2dlbmVyYXRvciA9ICh0aGlzICYmIHRoaXMuX19nZW5lcmF0b3IpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBib2R5KSB7XG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcbiAgICAgICAgd2hpbGUgKGcgJiYgKGcgPSAwLCBvcFswXSAmJiAoXyA9IDApKSwgXykgdHJ5IHtcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xuICAgIH1cbn07XG5pbXBvcnQgeyBjcmVhdGVBc3luY1RodW5rIH0gZnJvbSAnQHJlZHV4anMvdG9vbGtpdCc7XG5pbXBvcnQgeyBmZXRjaFRhc2tTdGF0dXMsIGZldGNoQWN0aXZlVGFza1N0YXR1c2VzIH0gZnJvbSAnLi4vdXRpbHMnO1xuZXhwb3J0IHZhciBmZXRjaEFjdGl2ZVRhc2tTdGF0dXNlc0FjdGlvbiA9IGNyZWF0ZUFzeW5jVGh1bmsoJ3Rhc2svZmV0Y2hBY3RpdmVUYXNrcycsIGZ1bmN0aW9uIChfcGF5bG9hZCwgdGh1bmtBcGkpIHsgcmV0dXJuIF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJlc3BvbnNlO1xuICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCBmZXRjaEFjdGl2ZVRhc2tTdGF0dXNlcygpXTtcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICByZXNwb25zZSA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzICE9PSAyMDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHRodW5rQXBpLnJlamVjdFdpdGhWYWx1ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ0ZhaWxlZCB0byBmZXRjaCB0YXNrIHN0YXR1c2VzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHJlc3BvbnNlLmRhdGFdO1xuICAgICAgICB9XG4gICAgfSk7XG59KTsgfSk7XG5leHBvcnQgdmFyIGZldGNoVGFza1N0YXR1c0FjdGlvbiA9IGNyZWF0ZUFzeW5jVGh1bmsoJ3Rhc2svZmV0Y2hUYXNrU3RhdHVzJywgZnVuY3Rpb24gKHBheWxvYWQsIHRodW5rQXBpKSB7IHJldHVybiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXNwb25zZTtcbiAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgZmV0Y2hUYXNrU3RhdHVzKHBheWxvYWQpXTtcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICByZXNwb25zZSA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzICE9PSAyMDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHRodW5rQXBpLnJlamVjdFdpdGhWYWx1ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogXCJGYWlsZWQgdG8gZmV0Y2ggdGFzayBzdGF0dXMgZm9yIFwiLmNvbmNhdChwYXlsb2FkKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHJlc3BvbnNlLmRhdGFdO1xuICAgICAgICB9XG4gICAgfSk7XG59KTsgfSk7XG4iLCJ2YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxuICAgICAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0O1xuICAgIH07XG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xuaW1wb3J0IHsgY3JlYXRlU2xpY2UgfSBmcm9tICdAcmVkdXhqcy90b29sa2l0JztcbmltcG9ydCB7IGZldGNoQWN0aXZlVGFza1N0YXR1c2VzQWN0aW9uLCBmZXRjaFRhc2tTdGF0dXNBY3Rpb24gfSBmcm9tICcuLi9hY3Rpb25zJztcbnZhciBpbml0aWFsU3RhdGUgPSB7XG4gICAgZmV0Y2hTdGF0dXM6ICdsb2FkaW5nJyxcbn07XG5leHBvcnQgdmFyIHRhc2tTdGF0dXNTbGljZSA9IGNyZWF0ZVNsaWNlKHtcbiAgICBuYW1lOiAndGFza1N0YXR1cycsXG4gICAgaW5pdGlhbFN0YXRlOiBpbml0aWFsU3RhdGUsXG4gICAgcmVkdWNlcnM6IHt9LFxuICAgIGV4dHJhUmVkdWNlcnM6IGZ1bmN0aW9uIChidWlsZGVyKSB7XG4gICAgICAgIGJ1aWxkZXIuYWRkQ2FzZShmZXRjaEFjdGl2ZVRhc2tTdGF0dXNlc0FjdGlvbi5wZW5kaW5nLCBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgICAgIHN0YXRlLmZldGNoU3RhdHVzID0gJ2xvYWRpbmcnO1xuICAgICAgICAgICAgc3RhdGUuZmV0Y2hFcnJvciA9ICd1bmRlZmluZWQnO1xuICAgICAgICB9KTtcbiAgICAgICAgYnVpbGRlci5hZGRDYXNlKGZldGNoQWN0aXZlVGFza1N0YXR1c2VzQWN0aW9uLmZ1bGZpbGxlZCwgZnVuY3Rpb24gKHN0YXRlLCBfYSkge1xuICAgICAgICAgICAgdmFyIHBheWxvYWQgPSBfYS5wYXlsb2FkO1xuICAgICAgICAgICAgdmFyIGFjdGl2ZVN0YXR1c2VzID0ge307XG4gICAgICAgICAgICBpZiAoc3RhdGUudHJpZ2dlcmVkVGFza1N0YXR1c2VzKSB7XG4gICAgICAgICAgICAgICAgYWN0aXZlU3RhdHVzZXMgPSBfX2Fzc2lnbih7fSwgc3RhdGUudHJpZ2dlcmVkVGFza1N0YXR1c2VzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBheWxvYWQuZm9yRWFjaChmdW5jdGlvbiAodHMpIHtcbiAgICAgICAgICAgICAgICBhY3RpdmVTdGF0dXNlc1t0cy5pZF0gPSB0cztcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc3RhdGUuYWN0aXZlVGFza1N0YXR1c2VzID0gYWN0aXZlU3RhdHVzZXM7XG4gICAgICAgICAgICBzdGF0ZS5mZXRjaFN0YXR1cyA9ICdzdWNjZWVkZWQnO1xuICAgICAgICB9KTtcbiAgICAgICAgYnVpbGRlci5hZGRDYXNlKGZldGNoQWN0aXZlVGFza1N0YXR1c2VzQWN0aW9uLnJlamVjdGVkLCBmdW5jdGlvbiAoc3RhdGUsIF9hKSB7XG4gICAgICAgICAgICB2YXIgcGF5bG9hZCA9IF9hLnBheWxvYWQ7XG4gICAgICAgICAgICBpZiAocGF5bG9hZCkge1xuICAgICAgICAgICAgICAgIHN0YXRlLmZldGNoRXJyb3IgPSBwYXlsb2FkLm1lc3NhZ2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdGF0ZS5mZXRjaFN0YXR1cyA9ICdmYWlsZWQnO1xuICAgICAgICAgICAgc3RhdGUuYWN0aXZlVGFza1N0YXR1c2VzID0gdW5kZWZpbmVkO1xuICAgICAgICB9KTtcbiAgICAgICAgYnVpbGRlci5hZGRDYXNlKGZldGNoVGFza1N0YXR1c0FjdGlvbi5mdWxmaWxsZWQsIGZ1bmN0aW9uIChzdGF0ZSwgX2EpIHtcbiAgICAgICAgICAgIHZhciBfYiwgX2M7XG4gICAgICAgICAgICB2YXIgcGF5bG9hZCA9IF9hLnBheWxvYWQ7XG4gICAgICAgICAgICBpZiAoIXN0YXRlLnRyaWdnZXJlZFRhc2tTdGF0dXNlcykge1xuICAgICAgICAgICAgICAgIHN0YXRlLnRyaWdnZXJlZFRhc2tTdGF0dXNlcyA9IChfYiA9IHt9LCBfYltwYXlsb2FkLmlkXSA9IHBheWxvYWQsIF9iKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHN0YXRlLnRyaWdnZXJlZFRhc2tTdGF0dXNlc1twYXlsb2FkLmlkXSA9IHBheWxvYWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXN0YXRlLmFjdGl2ZVRhc2tTdGF0dXNlcykge1xuICAgICAgICAgICAgICAgIHN0YXRlLmFjdGl2ZVRhc2tTdGF0dXNlcyA9IChfYyA9IHt9LCBfY1twYXlsb2FkLmlkXSA9IHBheWxvYWQsIF9jKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHN0YXRlLmFjdGl2ZVRhc2tTdGF0dXNlc1twYXlsb2FkLmlkXSA9IHBheWxvYWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0sXG59KTtcbmV4cG9ydCB2YXIgc2VsZWN0VGFza1N0YXR1c2VzID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgcmV0dXJuIHN0YXRlLnRhc2tTdGF0dXNlcy5hY3RpdmVUYXNrU3RhdHVzZXM7XG59O1xuZXhwb3J0IHZhciBzZWxlY3RUYXNrU3RhdHVzZXNGZXRjaFN0YXR1cyA9IGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgIHJldHVybiBzdGF0ZS50YXNrU3RhdHVzZXMuZmV0Y2hTdGF0dXM7XG59O1xuZXhwb3J0IHZhciBzZWxlY3RUcmlnZ2VyZWRUYXNrU3RhdHVzZXMgPSBmdW5jdGlvbiAoc3RhdGUpIHsgcmV0dXJuIHN0YXRlLnRhc2tTdGF0dXNlcy50cmlnZ2VyZWRUYXNrU3RhdHVzZXM7IH07XG5leHBvcnQgZGVmYXVsdCB0YXNrU3RhdHVzU2xpY2UucmVkdWNlcjtcbiIsImltcG9ydCB7IGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCBBbGVydCBmcm9tICdAbXVpL21hdGVyaWFsL0FsZXJ0JztcbnZhciBUcmlnZ2VyUmVzcG9uc2VOb3RpZmljYXRpb24gPSBmdW5jdGlvbiAoX2EpIHtcbiAgICB2YXIgdHJpZ2dlclJlc3BvbnNlID0gX2EudHJpZ2dlclJlc3BvbnNlLCBzaG93Tm90aWZpY2F0aW9uID0gX2Euc2hvd05vdGlmaWNhdGlvbiwgb25DbG9zZSA9IF9hLm9uQ2xvc2U7XG4gICAgcmV0dXJuIHRyaWdnZXJSZXNwb25zZSAmJiBzaG93Tm90aWZpY2F0aW9uID8gKF9qc3hzKEFsZXJ0LCB7IG9uQ2xvc2U6IG9uQ2xvc2UsIHN4OiB7IG1hcmdpbkJvdHRvbTogMjAgfSwgZWxldmF0aW9uOiA2LCBzZXZlcml0eTogXCJzdWNjZXNzXCIsIHZhcmlhbnQ6IFwiZmlsbGVkXCIsIGNoaWxkcmVuOiBbXCJCYWNrZW5kIHJlc3BvbnNlOiBcIiwgdHJpZ2dlclJlc3BvbnNlXSB9KSkgOiBudWxsO1xufTtcbmV4cG9ydCBkZWZhdWx0IFRyaWdnZXJSZXNwb25zZU5vdGlmaWNhdGlvbjtcbiIsIlwidXNlIHN0cmljdFwiO1xuXCJ1c2UgY2xpZW50XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBfY3JlYXRlU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlU3ZnSWNvblwiKSk7XG52YXIgX2pzeFJ1bnRpbWUgPSByZXF1aXJlKFwicmVhY3QvanN4LXJ1bnRpbWVcIik7XG52YXIgX2RlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQgPSAoMCwgX2NyZWF0ZVN2Z0ljb24uZGVmYXVsdCkoIC8qI19fUFVSRV9fKi8oMCwgX2pzeFJ1bnRpbWUuanN4KShcInBhdGhcIiwge1xuICBkOiBcIk0xNyAxMEg3djJoMTB6bTItN2gtMVYxaC0ydjJIOFYxSDZ2Mkg1Yy0xLjExIDAtMS45OS45LTEuOTkgMkwzIDE5YzAgMS4xLjg5IDIgMiAyaDE0YzEuMSAwIDItLjkgMi0yVjVjMC0xLjEtLjktMi0yLTJtMCAxNkg1VjhoMTR6bS01LTVIN3YyaDd6XCJcbn0pLCAnRXZlbnROb3RlJyk7IiwiaW1wb3J0IHsganN4IGFzIF9qc3gsIGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBDYXJkLCBDYXJkQWN0aW9ucywgQ2FyZENvbnRlbnQsIENhcmRIZWFkZXIsIENpcmN1bGFyUHJvZ3Jlc3MsIENvbGxhcHNlLCBJY29uQnV0dG9uLCBUb29sdGlwLCBUeXBvZ3JhcGh5LCB9IGZyb20gJ0BtdWkvbWF0ZXJpYWwnO1xuaW1wb3J0IEV4cGFuZE1vcmVJY29uIGZyb20gJ0BtdWkvaWNvbnMtbWF0ZXJpYWwvRXhwYW5kTW9yZSc7XG5pbXBvcnQgRXZlbnROb3RlSWNvbiBmcm9tICdAbXVpL2ljb25zLW1hdGVyaWFsL0V2ZW50Tm90ZSc7XG5leHBvcnQgdmFyIFRhc2tTdGF0dXNDYXJkID0gZnVuY3Rpb24gKF9hKSB7XG4gICAgdmFyIHRhc2tTdGF0dXMgPSBfYS50YXNrU3RhdHVzLCBvcGVuTWVzc2FnZUNoYWluID0gX2Eub3Blbk1lc3NhZ2VDaGFpbjtcbiAgICB2YXIgX2IgPSBSZWFjdC51c2VTdGF0ZShmYWxzZSksIGV4cGFuZGVkID0gX2JbMF0sIHNldEV4cGFuZGVkID0gX2JbMV07XG4gICAgdmFyIGhhbmRsZUV4cGFuZENsaWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBzZXRFeHBhbmRlZCghZXhwYW5kZWQpO1xuICAgIH07XG4gICAgcmV0dXJuIChfanN4cyhDYXJkLCB7IGNoaWxkcmVuOiBbX2pzeChDYXJkSGVhZGVyLCB7IHRpdGxlOiBcIiNcIi5jb25jYXQodGFza1N0YXR1cy5pZCwgXCIgXCIpLmNvbmNhdCh0YXNrU3RhdHVzLmdyb3VwKSwgc3ViaGVhZGVyOiB0YXNrU3RhdHVzLmRlc2NyaXB0aW9uLCBhdmF0YXI6IHRhc2tTdGF0dXMuc3RhdGUgPT09ICdSVU5OSU5HJyB8fCB0YXNrU3RhdHVzLnN0YXRlID09PSAnQ0FOQ0VMTElORycgPyAoX2pzeChDaXJjdWxhclByb2dyZXNzLCB7fSkpIDogdW5kZWZpbmVkIH0pLCBfanN4cyhDYXJkQ29udGVudCwgeyBjaGlsZHJlbjogW19qc3goVHlwb2dyYXBoeSwgeyB2YXJpYW50OiBcImJvZHkyXCIsIGNvbG9yOiBcInRleHRTZWNvbmRhcnlcIiwgY29tcG9uZW50OiBcInBcIiwgY2hpbGRyZW46IFwiVGFzayBzdGF0ZSBpcyBcIi5jb25jYXQodGFza1N0YXR1cy5zdGF0ZSwgXCIuIFwiKS5jb25jYXQodGFza1N0YXR1cy5kdXJhdGlvbk1zID8gXCJSdW4gdG9vayBcIi5jb25jYXQodGFza1N0YXR1cy5kdXJhdGlvbk1zIC8gMTAwMCwgXCIgc2Vjb25kcy5cIikgOiAnJykgfSksIF9qc3goVHlwb2dyYXBoeSwgeyB2YXJpYW50OiBcImJvZHkyXCIsIGNvbG9yOiBcInRleHRTZWNvbmRhcnlcIiwgY29tcG9uZW50OiBcInBcIiwgY2hpbGRyZW46IHRhc2tTdGF0dXMubWVzc2FnZSB9KV0gfSksIF9qc3hzKENhcmRBY3Rpb25zLCB7IGRpc2FibGVTcGFjaW5nOiB0cnVlLCBjaGlsZHJlbjogW19qc3goVG9vbHRpcCwgeyB0aXRsZTogXCJTaG93IG1lc3NhZ2UgY2hhaW5cIiwgY2hpbGRyZW46IF9qc3goSWNvbkJ1dHRvbiwgeyBcImFyaWEtbGFiZWxcIjogXCJzaG93IG1lc3NhZ2UgY2hhaW5cIiwgb25DbGljazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZUNoYWluTWV0YWRhdGEgPSB0YXNrU3RhdHVzLm1ldGFkYXRhLmZpbmQoZnVuY3Rpb24gKG1kKSB7IHJldHVybiBtZC5rZXkgPT09ICdNZXNzYWdlQ2hhaW5JZCc7IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWVzc2FnZUNoYWluTWV0YWRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wZW5NZXNzYWdlQ2hhaW4oTnVtYmVyKG1lc3NhZ2VDaGFpbk1ldGFkYXRhLnZhbHVlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBjaGlsZHJlbjogX2pzeChFdmVudE5vdGVJY29uLCB7fSkgfSkgfSksIF9qc3goVG9vbHRpcCwgeyB0aXRsZTogZXhwYW5kZWQgPyAnSGlkZSBtZXRhZGF0YScgOiAnU2hvdyBtZXRhZGF0YScsIGNoaWxkcmVuOiBfanN4KEljb25CdXR0b24sIHsgc3g6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtOiBleHBhbmRlZCA/ICdyb3RhdGUoMTgwZGVnKScgOiAncm90YXRlKDBkZWcpJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luTGVmdDogJ2F1dG8nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uOiAndHJhbnNmb3JtIGR1cmF0aW9uLnNob3J0ZXN0JywgLy8gVE9ETzogY3JlYXRlIGEgc3RvcnkgYW5kIHRlc3QgdGhpc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiAhdGFza1N0YXR1cy5tZXRhZGF0YS5sZW5ndGggPyAnbm9uZScgOiAnZmxleCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgb25DbGljazogaGFuZGxlRXhwYW5kQ2xpY2ssIFwiYXJpYS1leHBhbmRlZFwiOiBleHBhbmRlZCwgXCJhcmlhLWxhYmVsXCI6IFwic2hvdyBtZXRhZGF0YVwiLCBjaGlsZHJlbjogX2pzeChFeHBhbmRNb3JlSWNvbiwge30pIH0pIH0pXSB9KSwgX2pzeChDb2xsYXBzZSwgeyBpbjogZXhwYW5kZWQsIHRpbWVvdXQ6IFwiYXV0b1wiLCB1bm1vdW50T25FeGl0OiB0cnVlLCBjaGlsZHJlbjogX2pzeHMoQ2FyZENvbnRlbnQsIHsgY2hpbGRyZW46IFtfanN4KFR5cG9ncmFwaHksIHsgcGFyYWdyYXBoOiB0cnVlLCBjaGlsZHJlbjogXCJNZXRhZGF0YTpcIiB9KSwgdGFza1N0YXR1cy5tZXRhZGF0YS5tYXAoZnVuY3Rpb24gKG1kKSB7IHJldHVybiAoX2pzeHMoVHlwb2dyYXBoeSwgeyBjaGlsZHJlbjogW21kLmtleSwgXCI6IFwiLCBtZC52YWx1ZV0gfSwgXCJ0YXNrLXN0YXR1cy1tZC1cIi5jb25jYXQodGFza1N0YXR1cy5pZCwgXCItXCIpLmNvbmNhdChtZC5rZXkpKSk7IH0pXSB9KSB9KV0gfSkpO1xufTtcbiIsImltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgR3JpZCBmcm9tICdAbXVpL21hdGVyaWFsL0dyaWQnO1xuaW1wb3J0IHsgVGFza1N0YXR1c0NhcmQgfSBmcm9tICcuLi8uLi90YXNrLXN0YXR1cy9jb21wb25lbnRzL1Rhc2tTdGF0dXNDYXJkJztcbnZhciBBY3RpdmVUYXNrU3RhdHVzZXMgPSBmdW5jdGlvbiAoX2EpIHtcbiAgICB2YXIgYWN0aXZlVGFza1N0YXR1c2VzID0gX2EuYWN0aXZlVGFza1N0YXR1c2VzLCBvcGVuTWVzc2FnZUNoYWluID0gX2Eub3Blbk1lc3NhZ2VDaGFpbjtcbiAgICByZXR1cm4gYWN0aXZlVGFza1N0YXR1c2VzID8gKF9qc3goR3JpZCwgeyBjb250YWluZXI6IHRydWUsIHNwYWNpbmc6IDIsIHN4OiB7XG4gICAgICAgICAgICBtYXJnaW5Cb3R0b206IDIwLFxuICAgICAgICB9LCBjaGlsZHJlbjogT2JqZWN0LnZhbHVlcyhhY3RpdmVUYXNrU3RhdHVzZXMpLm1hcChmdW5jdGlvbiAodGFza1N0YXR1cykgeyByZXR1cm4gKF9qc3goR3JpZCwgeyBpdGVtOiB0cnVlLCB4czogNiwgY2hpbGRyZW46IF9qc3goVGFza1N0YXR1c0NhcmQsIHsgdGFza1N0YXR1czogdGFza1N0YXR1cywgb3Blbk1lc3NhZ2VDaGFpbjogb3Blbk1lc3NhZ2VDaGFpbiB9KSB9LCBcInRhc2stc3RhdHVzLWdyaWQtaXRlbS1cIi5jb25jYXQodGFza1N0YXR1cy5pZCkpKTsgfSkgfSkpIDogbnVsbDtcbn07XG5leHBvcnQgZGVmYXVsdCBBY3RpdmVUYXNrU3RhdHVzZXM7XG4iLCJleHBvcnQgdmFyIGNyZWF0ZVRyaWdnZXJRdWVyeSA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICByZXR1cm4gcGFyYW1zXG4gICAgICAgID8gXCI/XCIuY29uY2F0KE9iamVjdC5lbnRyaWVzKHBhcmFtcylcbiAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICB2YXIgdiA9IF9hWzFdO1xuICAgICAgICAgICAgcmV0dXJuICEhdjtcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICB2YXIgayA9IF9hWzBdLCB2ID0gX2FbMV07XG4gICAgICAgICAgICByZXR1cm4gXCJcIi5jb25jYXQoaywgXCI9XCIpLmNvbmNhdChlbmNvZGVVUklDb21wb25lbnQodikpO1xuICAgICAgICB9KVxuICAgICAgICAgICAgLmpvaW4oJyYnKSlcbiAgICAgICAgOiAnJztcbn07XG52YXIgaXNOdW1lcmljID0gZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiAhaXNOYU4ocGFyc2VGbG9hdCh2YWx1ZSkpICYmICFpc05hTihOdW1iZXIodmFsdWUpIC0gMCk7IH07XG4vLyBUT0RPICN0cmlnZ2VyYWJsZXM6IHVwZGF0ZSB0aGUgVHJpZ2dlcmFibGVQYXJhbURlZmluaXRvbiB0eXBpbmcgdG8gbWF0Y2ggdGhlc2UgdHlwZXNcbnZhciBudW1lcmljVHlwZXMgPSB7XG4gICAgJ2phdmEubGFuZy5JbnRlZ2VyJzogdHJ1ZSxcbiAgICAnamF2YS5sYW5nLkxvbmcnOiB0cnVlLFxuICAgICdqYXZhLmxhbmcuRG91YmxlJzogdHJ1ZSxcbiAgICAnamF2YS5sYW5nLkZsb2F0JzogdHJ1ZSxcbn07XG5leHBvcnQgdmFyIHZhbGlkYXRlVHJpZ2dlclBhcmFtZXRlciA9IGZ1bmN0aW9uICh2YWx1ZSwgcGFyYW1EZWZpbml0aW9uKSB7XG4gICAgaWYgKCFwYXJhbURlZmluaXRpb24ucmVxdWlyZWQgJiYgIXZhbHVlKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmIChwYXJhbURlZmluaXRpb24ucmVxdWlyZWQgJiYgKCF2YWx1ZSB8fCB2YWx1ZS50cmltKCkubGVuZ3RoID09PSAwKSkge1xuICAgICAgICByZXR1cm4gXCJcIi5jb25jYXQocGFyYW1EZWZpbml0aW9uLm5hbWUsIFwiIGlzIG1hbmRhdG9yeSFcIik7XG4gICAgfVxuICAgIGlmIChudW1lcmljVHlwZXNbcGFyYW1EZWZpbml0aW9uLnR5cGVdKSB7XG4gICAgICAgIGlmICghaXNOdW1lcmljKHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuICdWYWx1ZSBtdXN0IGJlIG51bWVyaWMhJztcbiAgICAgICAgfVxuICAgICAgICB2YXIgbnVtZXJpY1ZhbHVlID0gTnVtYmVyKHZhbHVlKTtcbiAgICAgICAgaWYgKHBhcmFtRGVmaW5pdGlvbi50eXBlID09PSAnamF2YS5sYW5nLkludGVnZXInICYmICFOdW1iZXIuaXNJbnRlZ2VyKG51bWVyaWNWYWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiAnVmFsdWUgbXVzdCBiZSBhbiBJbnRlZ2VyISc7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG1pblZhbHVlID0gcGFyYW1EZWZpbml0aW9uLm1pblZhbHVlIHx8IE51bWJlci5NSU5fVkFMVUU7XG4gICAgICAgIHZhciBtYXhWYWx1ZSA9IHBhcmFtRGVmaW5pdGlvbi5tYXhWYWx1ZSB8fCBOdW1iZXIuTUFYX1ZBTFVFO1xuICAgICAgICBpZiAobnVtZXJpY1ZhbHVlIDwgbWluVmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBcIlZhbHVlIHRvbyBzbWFsbCwgbXVzdCBiZSA+PSBcIi5jb25jYXQobWluVmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChudW1lcmljVmFsdWUgPiBtYXhWYWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIFwiVmFsdWUgdG9vIGxhcmdlLCBtdXN0IGJlIDw9IFwiLmNvbmNhdChtYXhWYWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIG1pbkxlbmd0aCA9IHBhcmFtRGVmaW5pdGlvbi5taW5MZW5ndGggfHwgMDtcbiAgICB2YXIgbWF4TGVuZ3RoID0gcGFyYW1EZWZpbml0aW9uLm1heExlbmd0aDtcbiAgICBpZiAodmFsdWUubGVuZ3RoIDwgbWluTGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBcIlZhbHVlIHRvbyBzaG9ydCwgbXVzdCBhdCBsZWFzdCBcIi5jb25jYXQobWluTGVuZ3RoLCBcIiBjaGFyYWN0ZXJzXCIpO1xuICAgIH1cbiAgICBpZiAobWF4TGVuZ3RoICYmIHZhbHVlLmxlbmd0aCA+IG1heExlbmd0aCkge1xuICAgICAgICByZXR1cm4gXCJWYWx1ZSB0b28gbG9uZywgbXVzdCBiZSBhdCBtb3N0IFwiLmNvbmNhdChtYXhMZW5ndGgsIFwiIGNoYXJhY3RlcnNcIik7XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG59O1xuIiwidmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcbiAgICAgICAgICAgICAgICB0W3BdID0gc1twXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdDtcbiAgICB9O1xuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcbmltcG9ydCB7IGpzeCBhcyBfanN4LCBGcmFnbWVudCBhcyBfRnJhZ21lbnQsIGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IEJveCwgQnV0dG9uLCBUZXh0RmllbGQsIFR5cG9ncmFwaHkgfSBmcm9tICdAbXVpL21hdGVyaWFsJztcbmltcG9ydCB7IHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdmFsaWRhdGVUcmlnZ2VyUGFyYW1ldGVyIH0gZnJvbSAnLi90cmlnZ2VyYWJsZVV0aWxzJztcbnZhciBnZXRJbml0aWFsRXJyb3JzID0gZnVuY3Rpb24gKHRyaWdnZXJQYXJhbXMpIHtcbiAgICB2YXIgaW5pdGlhbEVycm9ycyA9IHt9O1xuICAgIHRyaWdnZXJQYXJhbXMuZm9yRWFjaChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgaWYgKHBhcmFtLnJlcXVpcmVkKSB7XG4gICAgICAgICAgICBpbml0aWFsRXJyb3JzW3BhcmFtLm5hbWVdID0gJyc7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gaW5pdGlhbEVycm9ycztcbn07XG52YXIgVHJpZ2dlckZvcm0gPSBmdW5jdGlvbiAoX2EpIHtcbiAgICB2YXIgdHJpZ2dlck5hbWUgPSBfYS50cmlnZ2VyTmFtZSwgdHJpZ2dlclBhcmFtcyA9IF9hLnRyaWdnZXJQYXJhbXMsIHRyaWdnZXJBY3Rpb24gPSBfYS50cmlnZ2VyQWN0aW9uO1xuICAgIHZhciBfYiA9IHVzZVN0YXRlKHt9KSwgdHJpZ2dlclZhbHVlcyA9IF9iWzBdLCBzZXRUcmlnZ2VyVmFsdWVzID0gX2JbMV07XG4gICAgdmFyIF9jID0gdXNlU3RhdGUoZ2V0SW5pdGlhbEVycm9ycyh0cmlnZ2VyUGFyYW1zKSksIGZvcm1WYWxpZGF0aW9uRXJyb3JzID0gX2NbMF0sIHNldEZvcm1WYWxpZGF0aW9uRXJyb3JzID0gX2NbMV07XG4gICAgdmFyIHJlbW92ZVRyaWdnZXJFcnJvciA9IGZ1bmN0aW9uIChwYXJhbU5hbWUpIHtcbiAgICAgICAgdmFyIGN1cnJlbnRFcnJvcnMgPSBfX2Fzc2lnbih7fSwgZm9ybVZhbGlkYXRpb25FcnJvcnMpO1xuICAgICAgICBkZWxldGUgY3VycmVudEVycm9yc1twYXJhbU5hbWVdO1xuICAgICAgICBzZXRGb3JtVmFsaWRhdGlvbkVycm9ycyhjdXJyZW50RXJyb3JzKTtcbiAgICB9O1xuICAgIHZhciBoYW5kbGVUcmlnZ2VyUGFyYW1DaGFuZ2UgPSBmdW5jdGlvbiAocGFyYW1zLCBldmVudCkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICB2YXIgbmFtZSA9IHBhcmFtcy5uYW1lO1xuICAgICAgICBzZXRUcmlnZ2VyVmFsdWVzKF9fYXNzaWduKF9fYXNzaWduKHt9LCB0cmlnZ2VyVmFsdWVzKSwgKF9hID0ge30sIF9hW25hbWVdID0gZXZlbnQudGFyZ2V0LnZhbHVlLCBfYSkpKTtcbiAgICAgICAgdmFyIGVycm9yID0gdmFsaWRhdGVUcmlnZ2VyUGFyYW1ldGVyKGV2ZW50LnRhcmdldC52YWx1ZSwgcGFyYW1zKTtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICBzZXRGb3JtVmFsaWRhdGlvbkVycm9ycyhfX2Fzc2lnbihfX2Fzc2lnbih7fSwgZm9ybVZhbGlkYXRpb25FcnJvcnMpLCAoX2IgPSB7fSwgX2JbbmFtZV0gPSBlcnJvciwgX2IpKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZW1vdmVUcmlnZ2VyRXJyb3IobmFtZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiAoX2pzeChcImZvcm1cIiwgeyBvblN1Ym1pdDogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgdHJpZ2dlckFjdGlvbih0cmlnZ2VyTmFtZSwgdHJpZ2dlclZhbHVlcyk7XG4gICAgICAgIH0sIGNoaWxkcmVuOiBfanN4cyhCb3gsIHsgZGlzcGxheTogXCJmbGV4XCIsIGZsZXhXcmFwOiBcIndyYXBcIiwgZ2FwOiA0LCByb3dHYXA6IDQsIGNoaWxkcmVuOiBbdHJpZ2dlclBhcmFtcy5sZW5ndGggPT09IDAgPyAoX2pzeChUeXBvZ3JhcGh5LCB7IGNoaWxkcmVuOiBcIlRyaWdnZXIgZG9lcyBub3Qgc3VwcG9ydCBhZGRpdGlvbmFsIHBhcmFtZXRlcnNcIiB9KSkgOiAoX2pzeHMoX0ZyYWdtZW50LCB7IGNoaWxkcmVuOiBbX2pzeChUeXBvZ3JhcGh5LCB7IG1pbldpZHRoOiBcIjEwMCVcIiwgY2hpbGRyZW46IFwiVHJpZ2dlciBwYXJhbWV0ZXJzXCIgfSksIHRyaWdnZXJQYXJhbXMubWFwKGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmFtZSA9IHBhcmFtcy5uYW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaWVsZEVycm9yID0gZm9ybVZhbGlkYXRpb25FcnJvcnMgPyBmb3JtVmFsaWRhdGlvbkVycm9yc1tuYW1lXSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKF9qc3goVGV4dEZpZWxkLCB7IHN4OiB7IG1hcmdpbkJvdHRvbTogMTAgfSwgZXJyb3I6ICEhZmllbGRFcnJvciwgaWQ6IFwiXCIuY29uY2F0KHRyaWdnZXJOYW1lLCBcIi1cIikuY29uY2F0KG5hbWUsIFwiLWlucHV0XCIpLCBoZWxwZXJUZXh0OiBmaWVsZEVycm9yIHx8ICcnLCByZXF1aXJlZDogcGFyYW1zLnJlcXVpcmVkLCBsYWJlbDogbmFtZSwgb25DaGFuZ2U6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZVRyaWdnZXJQYXJhbUNoYW5nZShwYXJhbXMsIGV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSB9LCBcIlwiLmNvbmNhdCh0cmlnZ2VyTmFtZSwgXCItXCIpLmNvbmNhdChuYW1lLCBcIi1pbnB1dFwiKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSldIH0pKSwgX2pzeChCdXR0b24sIHsgaWQ6IFwiXCIuY29uY2F0KHRyaWdnZXJOYW1lLCBcIi1zdWJtaXQtYnRuXCIpLCB2YXJpYW50OiBcImNvbnRhaW5lZFwiLCB0eXBlOiBcInN1Ym1pdFwiLCBkaXNhYmxlZDogZm9ybVZhbGlkYXRpb25FcnJvcnMgPyBPYmplY3Qua2V5cyhmb3JtVmFsaWRhdGlvbkVycm9ycykubGVuZ3RoID4gMCA6IGZhbHNlLCBzeDogeyBtYXJnaW5Ub3A6IDEwLCBmbG9hdDogJ3JpZ2h0JywgbWFyZ2luTGVmdDogJ2F1dG8nLCBoZWlnaHQ6ICdmaXQtY29udGVudCcgfSwgY2hpbGRyZW46IFwiVHJpZ2dlclwiIH0pXSB9KSB9KSk7XG59O1xuZXhwb3J0IGRlZmF1bHQgVHJpZ2dlckZvcm07XG4iLCJpbXBvcnQgeyBqc3ggYXMgX2pzeCwganN4cyBhcyBfanN4cywgRnJhZ21lbnQgYXMgX0ZyYWdtZW50IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgQWNjb3JkaW9uIGZyb20gJ0BtdWkvbWF0ZXJpYWwvQWNjb3JkaW9uJztcbmltcG9ydCBBY2NvcmRpb25EZXRhaWxzIGZyb20gJ0BtdWkvbWF0ZXJpYWwvQWNjb3JkaW9uRGV0YWlscyc7XG5pbXBvcnQgQWNjb3JkaW9uU3VtbWFyeSBmcm9tICdAbXVpL21hdGVyaWFsL0FjY29yZGlvblN1bW1hcnknO1xuaW1wb3J0IFR5cG9ncmFwaHkgZnJvbSAnQG11aS9tYXRlcmlhbC9UeXBvZ3JhcGh5JztcbmltcG9ydCBFeHBhbmRNb3JlSWNvbiBmcm9tICdAbXVpL2ljb25zLW1hdGVyaWFsL0V4cGFuZE1vcmUnO1xuaW1wb3J0IFRyaWdnZXJGb3JtIGZyb20gJy4vVHJpZ2dlckZvcm0nO1xuLy8gVE9ETzogY291bGQgYmUgaW5saW5lZCBpbnRvIFRyaWdnZXJhYmxlcy50c3gsIGVzcGVjaWFsbHkgaWYgdGhpcyBzaHJpbmtzIGF0IGFsbFxudmFyIFRyaWdnZXJhYmxlc0xpc3QgPSBmdW5jdGlvbiAoX2EpIHtcbiAgICAvLyBUT0RPOiB1c2VkIGJ5IHRoZSBmb3JtIHRvIGtlZXAgdGhlIHRyaWdnZXIgc3RhdGUgYWN0aXZlIGJldHdlZW4gc3VibWlzc2lvbiwgYnV0IG9ubHkgd2hlbiBjbGlja2luZyB0aGUgYnV0dG9uP1xuICAgIC8vIG5lZWRzIHRlc3RpbmcgdG8gZmlndXJlIG91dCBpZiBpdCBhY3R1YWxseSBkb2VzIGFueXRoaW5nXG4gICAgdmFyIHRyaWdnZXJhYmxlcyA9IF9hLnRyaWdnZXJhYmxlcywgdHJpZ2dlckFjdGlvbiA9IF9hLnRyaWdnZXJBY3Rpb247XG4gICAgcmV0dXJuIChfanN4KF9GcmFnbWVudCwgeyBjaGlsZHJlbjogT2JqZWN0LmVudHJpZXModHJpZ2dlcmFibGVzKS5tYXAoZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICB2YXIgdHJpZ2dlck5hbWUgPSBfYVswXSwgdHJpZ2dlclBhcmFtcyA9IF9hWzFdO1xuICAgICAgICAgICAgcmV0dXJuIChfanN4cyhBY2NvcmRpb24sIHsgc3g6IHsgd2lkdGg6ICcxMDAlJywgbWFyZ2luQm90dG9tOiAnNXB4JyB9LCBjaGlsZHJlbjogW19qc3goQWNjb3JkaW9uU3VtbWFyeSwgeyBleHBhbmRJY29uOiBfanN4KEV4cGFuZE1vcmVJY29uLCB7fSksIFwiYXJpYS1jb250cm9sc1wiOiBcIlwiLmNvbmNhdCh0cmlnZ2VyTmFtZSwgXCItY29udGVudFwiKSwgaWQ6IFwiXCIuY29uY2F0KHRyaWdnZXJOYW1lLCBcIi1oZWFkZXJcIiksIGNoaWxkcmVuOiBfanN4KFR5cG9ncmFwaHksIHsgc3g6IHsgZm9udFNpemU6IDE4LCBmbGV4QmFzaXM6ICczMy4zMyUnLCBmbGV4U2hyaW5rOiAwIH0sIGNoaWxkcmVuOiB0cmlnZ2VyTmFtZSB9KSB9KSwgX2pzeChBY2NvcmRpb25EZXRhaWxzLCB7IHN4OiB7IGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nIH0sIGNoaWxkcmVuOiBfanN4KFRyaWdnZXJGb3JtLCB7IHRyaWdnZXJOYW1lOiB0cmlnZ2VyTmFtZSwgdHJpZ2dlclBhcmFtczogdHJpZ2dlclBhcmFtcywgdHJpZ2dlckFjdGlvbjogdHJpZ2dlckFjdGlvbiB9KSB9KV0gfSwgXCJcIi5jb25jYXQodHJpZ2dlck5hbWUsIFwiLWNvbnRhaW5lclwiKSkpO1xuICAgICAgICB9KSB9KSk7XG59O1xuZXhwb3J0IGRlZmF1bHQgVHJpZ2dlcmFibGVzTGlzdDtcbiIsImltcG9ydCB7IGpzeCBhcyBfanN4LCBGcmFnbWVudCBhcyBfRnJhZ21lbnQsIGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFRyaWdnZXJSZXNwb25zZU5vdGlmaWNhdGlvbiBmcm9tICcuL1RyaWdnZXJSZXNwb25zZU5vdGlmaWNhdGlvbic7XG5pbXBvcnQgQWN0aXZlVGFza1N0YXR1c2VzIGZyb20gJy4vQWN0aXZlVGFza1N0YXR1c2VzJztcbmltcG9ydCBUcmlnZ2VyYWJsZXNMaXN0IGZyb20gJy4vVHJpZ2dlcmFibGVzTGlzdCc7XG52YXIgVHJpZ2dlcmFibGVzQ29tcG9uZW50ID0gZnVuY3Rpb24gKF9hKSB7XG4gICAgdmFyIGFjdGl2ZVRhc2tTdGF0dXNlcyA9IF9hLmFjdGl2ZVRhc2tTdGF0dXNlcywgdHJpZ2dlcmFibGVzID0gX2EudHJpZ2dlcmFibGVzLCB0cmlnZ2VyUmVzcG9uc2UgPSBfYS50cmlnZ2VyUmVzcG9uc2UsIG9wZW5NZXNzYWdlQ2hhaW4gPSBfYS5vcGVuTWVzc2FnZUNoYWluLCBoYW5kbGVUcmlnZ2VyQWN0aW9uID0gX2EuaGFuZGxlVHJpZ2dlckFjdGlvbjtcbiAgICB2YXIgX2IgPSB1c2VTdGF0ZSh0cnVlKSwgc2hvd05vdGlmaWNhdGlvbiA9IF9iWzBdLCBzZXRTaG93Tm90aWZpY2F0aW9uID0gX2JbMV07XG4gICAgcmV0dXJuIChfanN4cyhfRnJhZ21lbnQsIHsgY2hpbGRyZW46IFtfanN4KFRyaWdnZXJSZXNwb25zZU5vdGlmaWNhdGlvbiwgeyB0cmlnZ2VyUmVzcG9uc2U6IHRyaWdnZXJSZXNwb25zZSwgc2hvd05vdGlmaWNhdGlvbjogc2hvd05vdGlmaWNhdGlvbiwgb25DbG9zZTogZnVuY3Rpb24gKCkgeyByZXR1cm4gc2V0U2hvd05vdGlmaWNhdGlvbihmYWxzZSk7IH0gfSksIF9qc3goQWN0aXZlVGFza1N0YXR1c2VzLCB7IGFjdGl2ZVRhc2tTdGF0dXNlczogYWN0aXZlVGFza1N0YXR1c2VzLCBvcGVuTWVzc2FnZUNoYWluOiBvcGVuTWVzc2FnZUNoYWluIH0pLCBfanN4KFRyaWdnZXJhYmxlc0xpc3QsIHsgdHJpZ2dlcmFibGVzOiB0cmlnZ2VyYWJsZXMsIHRyaWdnZXJBY3Rpb246IGhhbmRsZVRyaWdnZXJBY3Rpb24gfSldIH0pKTtcbn07XG5leHBvcnQgZGVmYXVsdCBUcmlnZ2VyYWJsZXNDb21wb25lbnQ7XG4iLCJpbXBvcnQge1xuICBUYXNrU3RhdHVzLFxuICBUYXNrU3RhdHVzTWFwLFxufSBmcm9tIFwiQGV2b2x2ZXItZmkvZXZvbHZlci1iYXNpY3MvdGFzay1zdGF0dXNcIjtcbmltcG9ydCB7XG4gIFRyaWdnZXJQYXJhbXMsXG4gIFRyaWdnZXJhYmxlUmVzcG9uc2UsXG4gIFRyaWdnZXJhYmxlc0NvbXBvbmVudCxcbiAgdHJpZ2dlclRyaWdnZXJhYmxlLFxufSBmcm9tIFwiQGV2b2x2ZXItZmkvZXZvbHZlci1iYXNpY3MvdHJpZ2dlcmFibGVcIjtcbmltcG9ydCB7IHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VMb2FkZXJEYXRhLCB1c2VOYXZpZ2F0ZSwgdXNlUmV2YWxpZGF0b3IgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xuXG5jb25zdCBUcmlnZ2VyYWJsZXNSb3V0ZSA9ICgpID0+IHtcbiAgY29uc3QgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpO1xuICBjb25zdCByZXZhbGlkYXRvciA9IHVzZVJldmFsaWRhdG9yKCk7XG5cbiAgY29uc3QgW3RyaWdnZXJSZXNwb25zZSwgc2V0VHJpZ2dlclJlc3BvbnNlXSA9IHVzZVN0YXRlPHtcbiAgICBzdGF0dXM6IG51bWJlcjtcbiAgICBkYXRhOiBzdHJpbmc7XG4gIH0+KCk7XG5cbiAgY29uc3QgdHJpZ2dlcmFibGVzUmVzcG9uc2UgPSB1c2VMb2FkZXJEYXRhKCkgYXMge1xuICAgIHRyaWdnZXJhYmxlczogVHJpZ2dlcmFibGVSZXNwb25zZTtcbiAgICBhY3RpdmVUYXNrU3RhdHVzZXM6IEFycmF5PFRhc2tTdGF0dXM+O1xuICB9O1xuXG4gIGNvbnN0IHsgYWN0aXZlVGFza1N0YXR1c2VzLCB0cmlnZ2VyYWJsZXMgfSA9IHRyaWdnZXJhYmxlc1Jlc3BvbnNlO1xuXG4gIGNvbnN0IHRhc2tTdGF0dXNNYXAgPSBhY3RpdmVUYXNrU3RhdHVzZXMucmVkdWNlKChhY2MsIHRhc2tTdGF0dXMpID0+IHtcbiAgICBhY2NbdGFza1N0YXR1cy5pZF0gPSB0YXNrU3RhdHVzO1xuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9IGFzIFRhc2tTdGF0dXNNYXApO1xuXG4gIC8vIHVzZVN1Ym1pdCwgcm91dGUgYWN0aW9uIGFuZCBhIHVzZUFjdGlvbkRhdGEgY291bGQgYmUgdXNlZCB0b29cbiAgY29uc3QgaGFuZGxlVHJpZ2dlckFjdGlvbiA9IGFzeW5jIChcbiAgICB0cmlnZ2VyTmFtZTogc3RyaW5nLFxuICAgIHRyaWdnZXJQYXJhbXM6IFRyaWdnZXJQYXJhbXNcbiAgKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdHJpZ2dlclRyaWdnZXJhYmxlKHRyaWdnZXJOYW1lLCB0cmlnZ2VyUGFyYW1zKTtcbiAgICAgIHNldFRyaWdnZXJSZXNwb25zZShyZXNwb25zZSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgc2V0VHJpZ2dlclJlc3BvbnNlKHtcbiAgICAgICAgc3RhdHVzOiA1MDAsXG4gICAgICAgIGRhdGE6IGBGYWlsZWQgdG8gdHJpZ2dlciAke3RyaWdnZXJOYW1lfWAsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXZhbGlkYXRvci5yZXZhbGlkYXRlKCk7XG4gIH07XG5cbiAgLy8gVE9ETzogcmV2aXNlIGV2b2x2ZXItYmFzaWNzXG4gIHJldHVybiAoXG4gICAgPFRyaWdnZXJhYmxlc0NvbXBvbmVudFxuICAgICAgdHJpZ2dlclJlc3BvbnNlPXt0cmlnZ2VyUmVzcG9uc2U/LmRhdGF9XG4gICAgICBhY3RpdmVUYXNrU3RhdHVzZXM9e3Rhc2tTdGF0dXNNYXB9XG4gICAgICB0cmlnZ2VyYWJsZXM9e3RyaWdnZXJhYmxlc31cbiAgICAgIG9wZW5NZXNzYWdlQ2hhaW49eyhtZXNzYWdlQ2hhaW5JZDogbnVtYmVyKTogdm9pZCA9PiB7XG4gICAgICAgIC8vIFRPRE86IG5vdCBpbXBsZW1lbnRlZCBpbiB0aGUgbGlicmFyeSBlaXRoZXJcbiAgICAgICAgbmF2aWdhdGUoYC9tZXNzYWdlLWxvZy8ke21lc3NhZ2VDaGFpbklkfWApO1xuICAgICAgfX1cbiAgICAgIGhhbmRsZVRyaWdnZXJBY3Rpb249e2hhbmRsZVRyaWdnZXJBY3Rpb259XG4gICAgLz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFRyaWdnZXJhYmxlc1JvdXRlO1xuIiwiaW1wb3J0IHtcbiAgVGFza1N0YXR1cyxcbiAgZmV0Y2hBY3RpdmVUYXNrU3RhdHVzZXMsXG59IGZyb20gXCJAZXZvbHZlci1maS9ldm9sdmVyLWJhc2ljcy90YXNrLXN0YXR1c1wiO1xuaW1wb3J0IHtcbiAgVHJpZ2dlcmFibGVSZXNwb25zZSxcbiAgZmV0Y2hUcmlnZ2VyYWJsZXMsXG59IGZyb20gXCJAZXZvbHZlci1maS9ldm9sdmVyLWJhc2ljcy90cmlnZ2VyYWJsZVwiO1xuXG5pbXBvcnQgeyBMb2FkZXJGdW5jdGlvbiB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XG5cbmV4cG9ydCBjb25zdCBsb2FkZXI6IExvYWRlckZ1bmN0aW9uID0gYXN5bmMgKCk6IFByb21pc2U8e1xuICB0cmlnZ2VyYWJsZXM6IFRyaWdnZXJhYmxlUmVzcG9uc2U7XG4gIGFjdGl2ZVRhc2tTdGF0dXNlczogQXJyYXk8VGFza1N0YXR1cz47XG59PiA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgdHJpZ2dlcmFibGVzUmVzcG9uc2UgPSBhd2FpdCBmZXRjaFRyaWdnZXJhYmxlcygpO1xuICAgIGNvbnN0IGFjdGl2ZVRhc2tTdGF0dXNlc1Jlc3BvbnNlID0gYXdhaXQgZmV0Y2hBY3RpdmVUYXNrU3RhdHVzZXMoKTtcbiAgICBjb25zdCB7IGRhdGE6IHRyaWdnZXJhYmxlcyB9ID0gdHJpZ2dlcmFibGVzUmVzcG9uc2U7XG4gICAgY29uc3QgeyBkYXRhOiBhY3RpdmVUYXNrU3RhdHVzZXMgfSA9IGFjdGl2ZVRhc2tTdGF0dXNlc1Jlc3BvbnNlO1xuICAgIHJldHVybiB7IHRyaWdnZXJhYmxlcywgYWN0aXZlVGFza1N0YXR1c2VzIH07XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGZldGNoIHRyaWdnZXJhYmxlc1wiKTtcbiAgfVxufTtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBSZWFjdERPTSBmcm9tIFwicmVhY3QtZG9tL2NsaWVudFwiO1xuXG5pbXBvcnQgeyBjcmVhdGVCcm93c2VyUm91dGVyLCBSb3V0ZXJQcm92aWRlciB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XG5cbmltcG9ydCBBcHAgZnJvbSBcIi4vQXBwLnRzeFwiO1xuaW1wb3J0IFwiLi9pbmRleC5jc3NcIjtcbmltcG9ydCBNZXNzYWdlTG9nUm91dGUgZnJvbSBcIi4vcm91dGVzL21lc3NhZ2UtbG9nL01lc3NhZ2VMb2dSb3V0ZS50c3hcIjtcbmltcG9ydCB7IGxvYWRlciBhcyBsb2dMaXN0TG9hZGVyIH0gZnJvbSBcIi4vcm91dGVzL21lc3NhZ2UtbG9nL2xvYWRlci50c1wiO1xuXG5pbXBvcnQgU2luZ2xlTWVzc2FnZVJvdXRlIGZyb20gXCIuL3JvdXRlcy9tZXNzYWdlLWxvZy9TaW5nbGVNZXNzYWdlUm91dGUudHN4XCI7XG5pbXBvcnQgVHJpZ2dlcmFibGVzUm91dGUgZnJvbSBcIi4vcm91dGVzL3RyaWdnZXJhYmxlcy9UcmlnZ2VyYWJsZXNSb3V0ZS50c3hcIjtcbmltcG9ydCB7IGxvYWRlciBhcyB0cmlnZ2VyYWJsZXNMb2FkZXIgfSBmcm9tIFwiLi9yb3V0ZXMvdHJpZ2dlcmFibGVzL2xvYWRlci50c1wiO1xuaW1wb3J0IHsgY29uZmlndXJlQmFja2VuZENsaWVudCB9IGZyb20gXCJAZXZvbHZlci1maS9ldm9sdmVyLWJhc2ljc1wiO1xuXG5jb25maWd1cmVCYWNrZW5kQ2xpZW50KFwiaHR0cDovL2xvY2FsaG9zdDo4MDgwXCIsIHVuZGVmaW5lZCwgdHJ1ZSk7XG5cbmNvbnN0IHJvdXRlciA9IGNyZWF0ZUJyb3dzZXJSb3V0ZXIoXG4gIFtcbiAgICB7XG4gICAgICBwYXRoOiBcIi9cIixcbiAgICAgIGVsZW1lbnQ6IDxBcHAgLz4sXG4gICAgfSxcbiAgICB7XG4gICAgICBwYXRoOiBcIi9tZXNzYWdlLWxvZ1wiLFxuICAgICAgZWxlbWVudDogPE1lc3NhZ2VMb2dSb3V0ZSAvPixcbiAgICAgIGxvYWRlcjogbG9nTGlzdExvYWRlcixcbiAgICB9LFxuICAgIHtcbiAgICAgIHBhdGg6IFwiL21lc3NhZ2UtbG9nLzppZFwiLFxuICAgICAgZWxlbWVudDogPFNpbmdsZU1lc3NhZ2VSb3V0ZSAvPixcbiAgICAgIGxvYWRlcjogbG9nTGlzdExvYWRlcixcbiAgICB9LFxuICAgIHtcbiAgICAgIHBhdGg6IFwiL3RyaWdnZXJhYmxlc1wiLFxuICAgICAgZWxlbWVudDogPFRyaWdnZXJhYmxlc1JvdXRlIC8+LFxuICAgICAgbG9hZGVyOiB0cmlnZ2VyYWJsZXNMb2FkZXIsXG4gICAgfSxcbiAgXSxcbiAge1xuICAgIGJhc2VuYW1lOiBcIi9hZG1pbi11aVwiLFxuICB9XG4pO1xuXG5SZWFjdERPTS5jcmVhdGVSb290KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicm9vdFwiKSEpLnJlbmRlcihcbiAgPFJlYWN0LlN0cmljdE1vZGU+XG4gICAgPFJvdXRlclByb3ZpZGVyIHJvdXRlcj17cm91dGVyfSAvPlxuICA8L1JlYWN0LlN0cmljdE1vZGU+XG4pO1xuIl0sIm5hbWVzIjpbImwiLCJuIiwicCIsInEiLCJyIiwidCIsInUiLCJ2IiwidyIsIngiLCJ5IiwieiIsIkEiLCJhIiwiQiIsIkMiLCJEIiwiRSIsImIiLCJlIiwiRiIsIkciLCJIIiwiSSIsIkoiLCJLIiwiTCIsIk0iLCJkIiwiYyIsImsiLCJoIiwiZyIsImYiLCJtIiwiTiIsIk8iLCJlc2NhcGUiLCJQIiwiUSIsIlIiLCJTIiwiVCIsIlUiLCJWIiwiVyIsIlgiLCJyZWFjdF9wcm9kdWN0aW9uX21pbiIsInJlYWN0TW9kdWxlIiwicmVxdWlyZSQkMCIsInJlYWN0SnN4UnVudGltZV9wcm9kdWN0aW9uX21pbiIsImpzeFJ1bnRpbWVNb2R1bGUiLCJleHBvcnRzIiwic2NoZWR1bGVyTW9kdWxlIiwiYWEiLCJjYSIsInJlcXVpcmUkJDEiLCJkYSIsImVhIiwiZmEiLCJoYSIsImlhIiwiamEiLCJrYSIsImxhIiwibWEiLCJvYSIsInBhIiwicWEiLCJyYSIsInNhIiwidGEiLCJ1YSIsInZhIiwid2EiLCJ5YSIsInphIiwiQWEiLCJCYSIsIkNhIiwiRGEiLCJFYSIsIkZhIiwiR2EiLCJIYSIsIklhIiwiSmEiLCJLYSIsIkxhIiwiTWEiLCJOYSIsIk9hIiwiUGEiLCJRYSIsIlJhIiwiU2EiLCJUYSIsIlVhIiwiVmEiLCJXYSIsIlhhIiwiWWEiLCJaYSIsImFiIiwiYmIiLCJjYiIsImRiIiwiZWIiLCJmYiIsImdiIiwiaGIiLCJpYiIsImpiIiwia2IiLCJsYiIsIm1iIiwibmIiLCJvYiIsInBiIiwicWIiLCJyYiIsInNiIiwidGIiLCJ1YiIsInZiIiwid2IiLCJ4YiIsInliIiwiemIiLCJBYiIsIkJiIiwiQ2IiLCJEYiIsIkViIiwiRmIiLCJHYiIsIkhiIiwiSWIiLCJKYiIsIktiIiwiTGIiLCJNYiIsIk5iIiwiT2IiLCJQYiIsIlFiIiwiUmIiLCJTYiIsIlRiIiwiVWIiLCJWYiIsIldiIiwiWGIiLCJZYiIsIlpiIiwiJGIiLCJhYyIsImJjIiwiY2MiLCJkYyIsImVjIiwiZmMiLCJnYyIsImhjIiwiaWMiLCJqYyIsImtjIiwibGMiLCJtYyIsIm9jIiwibmMiLCJwYyIsInFjIiwicmMiLCJzYyIsInRjIiwidWMiLCJ2YyIsIndjIiwieGMiLCJ5YyIsInpjIiwiQWMiLCJCYyIsIkNjIiwiRGMiLCJFYyIsIkZjIiwiR2MiLCJIYyIsIkljIiwiSmMiLCJLYyIsIkxjIiwiTWMiLCJOYyIsIk9jIiwiUGMiLCJRYyIsIlJjIiwiU2MiLCJUYyIsIlVjIiwiVmMiLCJXYyIsIlhjIiwiWWMiLCJaYyIsIiRjIiwiYWQiLCJiZCIsImNkIiwiZGQiLCJlZCIsImZkIiwiZ2QiLCJoZCIsImlkIiwiamQiLCJrZCIsImxkIiwibWQiLCJuZCIsIm9kIiwicGQiLCJxZCIsInJkIiwic2QiLCJ0ZCIsInVkIiwidmQiLCJ3ZCIsInhkIiwieWQiLCJBZCIsInpkIiwiQmQiLCJDZCIsIkRkIiwiRWQiLCJGZCIsIkdkIiwiSGQiLCJJZCIsIkpkIiwiS2QiLCJMZCIsIk1kIiwiTmQiLCJPZCIsIlBkIiwiUWQiLCJSZCIsIlNkIiwiVGQiLCJVZCIsIlZkIiwiV2QiLCJYZCIsIllkIiwiWmQiLCIkZCIsImFlIiwiYmUiLCJjZSIsImRlIiwiZWUiLCJmZSIsImdlIiwiaGUiLCJpZSIsImplIiwia2UiLCJsZSIsIm1lIiwibmUiLCJvZSIsInBlIiwicWUiLCJyZSIsInNlIiwidGUiLCJ1ZSIsInZlIiwid2UiLCJ4ZSIsInllIiwiemUiLCJBZSIsIkJlIiwiQ2UiLCJEZSIsIkVlIiwiRmUiLCJHZSIsIkhlIiwiSWUiLCJKZSIsIktlIiwiTGUiLCJNZSIsIk5lIiwiT2UiLCJQZSIsIlFlIiwiUmUiLCJTZSIsIlRlIiwiVWUiLCJWZSIsIldlIiwiWGUiLCJZZSIsIlplIiwiJGUiLCJhZiIsImJmIiwiY2YiLCJkZiIsImVmIiwiZmYiLCJnZiIsImhmIiwiamYiLCJrZiIsImxmIiwibWYiLCJuZiIsIm9mIiwicGYiLCJxZiIsInJmIiwic2YiLCJ0ZiIsInVmIiwidmYiLCJ3ZiIsIm5hIiwieGEiLCIkYSIsImJhIiwieGYiLCJ5ZiIsInpmIiwiQWYiLCJCZiIsIkNmIiwiRGYiLCJFZiIsIkZmIiwiR2YiLCJIZiIsIkpmIiwiSWYiLCJLZiIsIkxmIiwiTWYiLCJOZiIsIk9mIiwiUGYiLCJRZiIsIlJmIiwiU2YiLCJUZiIsIlVmIiwiVmYiLCJXZiIsIlhmIiwiWWYiLCJaZiIsIiRmIiwiYWciLCJiZyIsImNnIiwiZGciLCJlZyIsImZnIiwiZ2ciLCJoZyIsImlnIiwiamciLCJrZyIsImxnIiwibWciLCJuZyIsIm9nIiwicGciLCJxZyIsInJnIiwic2ciLCJ0ZyIsInVnIiwidmciLCJ3ZyIsInhnIiwieWciLCJ6ZyIsIkFnIiwiQmciLCJDZyIsIkRnIiwiRWciLCJGZyIsIkdnIiwiSGciLCJJZyIsIkpnIiwiS2ciLCJMZyIsIk1nIiwiTmciLCJPZyIsIlBnIiwiUWciLCJSZyIsIlNnIiwiVGciLCJVZyIsIlZnIiwiV2ciLCJYZyIsIllnIiwiWmciLCIkZyIsImFoIiwiYmgiLCJjaCIsImRoIiwiZWgiLCJmaCIsImdoIiwiaGgiLCJpaCIsImpoIiwia2giLCJsaCIsIm1oIiwibmgiLCJvaCIsInBoIiwicWgiLCJyaCIsInNoIiwidGgiLCJ1aCIsInZoIiwid2giLCJ4aCIsInloIiwiemgiLCJBaCIsIkJoIiwiQ2giLCJEaCIsIkVoIiwiRmgiLCJHaCIsIkhoIiwiSWgiLCJKaCIsIktoIiwiTGgiLCJNaCIsIk5oIiwiT2giLCJQaCIsIlFoIiwiUmgiLCJTaCIsIlRoIiwiVWgiLCJWaCIsIldoIiwiWGgiLCJZaCIsIlpoIiwiJGgiLCJhaSIsImJpIiwiY2kiLCJkaSIsImVpIiwiZmkiLCJnaSIsImhpIiwiaWkiLCJqaSIsImtpIiwibGkiLCJtaSIsIm5pIiwib2kiLCJwaSIsInFpIiwicmkiLCJzaSIsInRpIiwidWkiLCJ2aSIsIndpIiwieGkiLCJ5aSIsInppIiwiQWkiLCJCaSIsIkNpIiwiRGkiLCJFaSIsIkZpIiwiR2kiLCJIaSIsIklpIiwiSmkiLCJLaSIsIkxpIiwiTWkiLCJOaSIsIk9pIiwiUGkiLCJRaSIsIlJpIiwiU2kiLCJUaSIsIlVpIiwiVmkiLCJXaSIsIlhpIiwiWWkiLCJaaSIsIiRpIiwiYWoiLCJiaiIsImNqIiwiZGoiLCJlaiIsImZqIiwiZ2oiLCJoaiIsImlqIiwiamoiLCJraiIsImxqIiwibWoiLCJuaiIsIm9qIiwicGoiLCJxaiIsInJqIiwic2oiLCJ0aiIsInVqIiwidmoiLCJ3aiIsInhqIiwieWoiLCJ6aiIsIkFqIiwiQmoiLCJDaiIsIkRqIiwiRWoiLCJGaiIsIkdqIiwiSGoiLCJJaiIsIkpqIiwiS2oiLCJMaiIsIk1qIiwiTmoiLCJPaiIsIlBqIiwiUWoiLCJSaiIsIlNqIiwiVGoiLCJVaiIsIlZqIiwiV2oiLCJYaiIsIllqIiwiWmoiLCJhayIsImJrIiwiY2siLCJkayIsImVrIiwiZmsiLCJnayIsImhrIiwiaWsiLCJqayIsImtrIiwibGsiLCJtayIsIm5rIiwib2siLCJZIiwiWiIsInBrIiwicWsiLCJyayIsInNrIiwidGsiLCJ1ayIsInZrIiwid2siLCJ4ayIsInlrIiwiemsiLCJBayIsIkJrIiwiQ2siLCJEayIsIkVrIiwiRmsiLCJHayIsIkhrIiwiSWsiLCJKayIsIktrIiwiTGsiLCJNayIsIk5rIiwiT2siLCJQayIsIlFrIiwiUmsiLCJTayIsIlRrIiwiVWsiLCJWayIsIldrIiwiWGsiLCJZayIsIlprIiwiJGsiLCJhbCIsImJsIiwiY2wiLCJkbCIsImVsIiwiZmwiLCJnbCIsImhsIiwiaWwiLCJqbCIsImtsIiwibGwiLCJtbCIsIm5sIiwib2wiLCJwbCIsInFsIiwicmwiLCJzbCIsInRsIiwidWwiLCJ2bCIsInJlYWN0RG9tX3Byb2R1Y3Rpb25fbWluIiwiY2hlY2tEQ0UiLCJlcnIiLCJyZWFjdERvbU1vZHVsZSIsIl9leHRlbmRzIiwidGFyZ2V0IiwiaSIsInNvdXJjZSIsImtleSIsIkFjdGlvbiIsIlBvcFN0YXRlRXZlbnRUeXBlIiwiY3JlYXRlQnJvd3Nlckhpc3RvcnkiLCJvcHRpb25zIiwiY3JlYXRlQnJvd3NlckxvY2F0aW9uIiwid2luZG93IiwiZ2xvYmFsSGlzdG9yeSIsInBhdGhuYW1lIiwic2VhcmNoIiwiaGFzaCIsImNyZWF0ZUxvY2F0aW9uIiwiY3JlYXRlQnJvd3NlckhyZWYiLCJ0byIsImNyZWF0ZVBhdGgiLCJnZXRVcmxCYXNlZEhpc3RvcnkiLCJpbnZhcmlhbnQiLCJ2YWx1ZSIsIm1lc3NhZ2UiLCJ3YXJuaW5nIiwiY29uZCIsImNyZWF0ZUtleSIsImdldEhpc3RvcnlTdGF0ZSIsImxvY2F0aW9uIiwiaW5kZXgiLCJjdXJyZW50Iiwic3RhdGUiLCJwYXJzZVBhdGgiLCJfcmVmIiwicGF0aCIsInBhcnNlZFBhdGgiLCJoYXNoSW5kZXgiLCJzZWFyY2hJbmRleCIsImdldExvY2F0aW9uIiwiY3JlYXRlSHJlZiIsInZhbGlkYXRlTG9jYXRpb24iLCJ2NUNvbXBhdCIsImFjdGlvbiIsImxpc3RlbmVyIiwiZ2V0SW5kZXgiLCJoYW5kbGVQb3AiLCJuZXh0SW5kZXgiLCJkZWx0YSIsImhpc3RvcnkiLCJwdXNoIiwiaGlzdG9yeVN0YXRlIiwidXJsIiwiZXJyb3IiLCJyZXBsYWNlIiwiY3JlYXRlVVJMIiwiYmFzZSIsImhyZWYiLCJmbiIsIlJlc3VsdFR5cGUiLCJpbW11dGFibGVSb3V0ZUtleXMiLCJpc0luZGV4Um91dGUiLCJyb3V0ZSIsImNvbnZlcnRSb3V0ZXNUb0RhdGFSb3V0ZXMiLCJyb3V0ZXMiLCJtYXBSb3V0ZVByb3BlcnRpZXMiLCJwYXJlbnRQYXRoIiwibWFuaWZlc3QiLCJ0cmVlUGF0aCIsImluZGV4Um91dGUiLCJwYXRoT3JMYXlvdXRSb3V0ZSIsIm1hdGNoUm91dGVzIiwibG9jYXRpb25BcmciLCJiYXNlbmFtZSIsInN0cmlwQmFzZW5hbWUiLCJicmFuY2hlcyIsImZsYXR0ZW5Sb3V0ZXMiLCJyYW5rUm91dGVCcmFuY2hlcyIsIm1hdGNoZXMiLCJkZWNvZGVkIiwiZGVjb2RlUGF0aCIsIm1hdGNoUm91dGVCcmFuY2giLCJjb252ZXJ0Um91dGVNYXRjaFRvVWlNYXRjaCIsIm1hdGNoIiwibG9hZGVyRGF0YSIsInBhcmFtcyIsInBhcmVudHNNZXRhIiwiZmxhdHRlblJvdXRlIiwicmVsYXRpdmVQYXRoIiwibWV0YSIsImpvaW5QYXRocyIsInJvdXRlc01ldGEiLCJjb21wdXRlU2NvcmUiLCJfcm91dGUkcGF0aCIsImV4cGxvZGVkIiwiZXhwbG9kZU9wdGlvbmFsU2VnbWVudHMiLCJzZWdtZW50cyIsImZpcnN0IiwicmVzdCIsImlzT3B0aW9uYWwiLCJyZXF1aXJlZCIsInJlc3RFeHBsb2RlZCIsInJlc3VsdCIsInN1YnBhdGgiLCJjb21wYXJlSW5kZXhlcyIsInBhcmFtUmUiLCJkeW5hbWljU2VnbWVudFZhbHVlIiwiaW5kZXhSb3V0ZVZhbHVlIiwiZW1wdHlTZWdtZW50VmFsdWUiLCJzdGF0aWNTZWdtZW50VmFsdWUiLCJzcGxhdFBlbmFsdHkiLCJpc1NwbGF0IiwicyIsImluaXRpYWxTY29yZSIsInNjb3JlIiwic2VnbWVudCIsImJyYW5jaCIsIm1hdGNoZWRQYXJhbXMiLCJtYXRjaGVkUGF0aG5hbWUiLCJlbmQiLCJyZW1haW5pbmdQYXRobmFtZSIsIm1hdGNoUGF0aCIsIm5vcm1hbGl6ZVBhdGhuYW1lIiwicGF0dGVybiIsIm1hdGNoZXIiLCJjb21waWxlZFBhcmFtcyIsImNvbXBpbGVQYXRoIiwicGF0aG5hbWVCYXNlIiwiY2FwdHVyZUdyb3VwcyIsIm1lbW8iLCJwYXJhbU5hbWUiLCJzcGxhdFZhbHVlIiwiY2FzZVNlbnNpdGl2ZSIsInJlZ2V4cFNvdXJjZSIsIl8iLCJzdGFydEluZGV4IiwibmV4dENoYXIiLCJyZXNvbHZlUGF0aCIsImZyb21QYXRobmFtZSIsInRvUGF0aG5hbWUiLCJyZXNvbHZlUGF0aG5hbWUiLCJub3JtYWxpemVTZWFyY2giLCJub3JtYWxpemVIYXNoIiwiZ2V0SW52YWxpZFBhdGhFcnJvciIsImNoYXIiLCJmaWVsZCIsImRlc3QiLCJnZXRQYXRoQ29udHJpYnV0aW5nTWF0Y2hlcyIsImdldFJlc29sdmVUb01hdGNoZXMiLCJ2N19yZWxhdGl2ZVNwbGF0UGF0aCIsInBhdGhNYXRjaGVzIiwiaWR4IiwicmVzb2x2ZVRvIiwidG9BcmciLCJyb3V0ZVBhdGhuYW1lcyIsImxvY2F0aW9uUGF0aG5hbWUiLCJpc1BhdGhSZWxhdGl2ZSIsImlzRW1wdHlQYXRoIiwiZnJvbSIsInJvdXRlUGF0aG5hbWVJbmRleCIsInRvU2VnbWVudHMiLCJoYXNFeHBsaWNpdFRyYWlsaW5nU2xhc2giLCJoYXNDdXJyZW50VHJhaWxpbmdTbGFzaCIsInBhdGhzIiwiRXJyb3JSZXNwb25zZUltcGwiLCJzdGF0dXMiLCJzdGF0dXNUZXh0IiwiZGF0YSIsImludGVybmFsIiwiaXNSb3V0ZUVycm9yUmVzcG9uc2UiLCJ2YWxpZE11dGF0aW9uTWV0aG9kc0FyciIsInZhbGlkTXV0YXRpb25NZXRob2RzIiwidmFsaWRSZXF1ZXN0TWV0aG9kc0FyciIsInZhbGlkUmVxdWVzdE1ldGhvZHMiLCJyZWRpcmVjdFN0YXR1c0NvZGVzIiwicmVkaXJlY3RQcmVzZXJ2ZU1ldGhvZFN0YXR1c0NvZGVzIiwiSURMRV9OQVZJR0FUSU9OIiwiSURMRV9GRVRDSEVSIiwiSURMRV9CTE9DS0VSIiwiQUJTT0xVVEVfVVJMX1JFR0VYIiwiZGVmYXVsdE1hcFJvdXRlUHJvcGVydGllcyIsIlRSQU5TSVRJT05TX1NUT1JBR0VfS0VZIiwiY3JlYXRlUm91dGVyIiwiaW5pdCIsInJvdXRlcldpbmRvdyIsImlzQnJvd3NlciIsImlzU2VydmVyIiwiZGV0ZWN0RXJyb3JCb3VuZGFyeSIsImRhdGFSb3V0ZXMiLCJpbkZsaWdodERhdGFSb3V0ZXMiLCJkYXRhU3RyYXRlZ3lJbXBsIiwiZGVmYXVsdERhdGFTdHJhdGVneSIsImZ1dHVyZSIsInVubGlzdGVuSGlzdG9yeSIsInN1YnNjcmliZXJzIiwic2F2ZWRTY3JvbGxQb3NpdGlvbnMiLCJnZXRTY3JvbGxSZXN0b3JhdGlvbktleSIsImdldFNjcm9sbFBvc2l0aW9uIiwiaW5pdGlhbFNjcm9sbFJlc3RvcmVkIiwiaW5pdGlhbE1hdGNoZXMiLCJpbml0aWFsRXJyb3JzIiwiZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvciIsImdldFNob3J0Q2lyY3VpdE1hdGNoZXMiLCJpbml0aWFsaXplZCIsImhhc0xhenlSb3V0ZXMiLCJoYXNMb2FkZXJzIiwiZXJyb3JzIiwiaXNSb3V0ZUluaXRpYWxpemVkIiwicm91dGVyIiwicGVuZGluZ0FjdGlvbiIsInBlbmRpbmdQcmV2ZW50U2Nyb2xsUmVzZXQiLCJwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIiLCJwZW5kaW5nVmlld1RyYW5zaXRpb25FbmFibGVkIiwiYXBwbGllZFZpZXdUcmFuc2l0aW9ucyIsInJlbW92ZVBhZ2VIaWRlRXZlbnRMaXN0ZW5lciIsImlzVW5pbnRlcnJ1cHRlZFJldmFsaWRhdGlvbiIsImlzUmV2YWxpZGF0aW9uUmVxdWlyZWQiLCJjYW5jZWxsZWREZWZlcnJlZFJvdXRlcyIsImNhbmNlbGxlZEZldGNoZXJMb2FkcyIsImZldGNoQ29udHJvbGxlcnMiLCJpbmNyZW1lbnRpbmdMb2FkSWQiLCJwZW5kaW5nTmF2aWdhdGlvbkxvYWRJZCIsImZldGNoUmVsb2FkSWRzIiwiZmV0Y2hSZWRpcmVjdElkcyIsImZldGNoTG9hZE1hdGNoZXMiLCJhY3RpdmVGZXRjaGVycyIsImRlbGV0ZWRGZXRjaGVycyIsImFjdGl2ZURlZmVycmVkcyIsImJsb2NrZXJGdW5jdGlvbnMiLCJpZ25vcmVOZXh0SGlzdG9yeVVwZGF0ZSIsImluaXRpYWxpemUiLCJoaXN0b3J5QWN0aW9uIiwiYmxvY2tlcktleSIsInNob3VsZEJsb2NrTmF2aWdhdGlvbiIsInVwZGF0ZUJsb2NrZXIiLCJibG9ja2VycyIsInVwZGF0ZVN0YXRlIiwic3RhcnROYXZpZ2F0aW9uIiwicmVzdG9yZUFwcGxpZWRUcmFuc2l0aW9ucyIsIl9zYXZlQXBwbGllZFRyYW5zaXRpb25zIiwicGVyc2lzdEFwcGxpZWRUcmFuc2l0aW9ucyIsImRpc3Bvc2UiLCJkZWxldGVGZXRjaGVyIiwiZGVsZXRlQmxvY2tlciIsInN1YnNjcmliZSIsIm5ld1N0YXRlIiwib3B0cyIsImNvbXBsZXRlZEZldGNoZXJzIiwiZGVsZXRlZEZldGNoZXJzS2V5cyIsImZldGNoZXIiLCJzdWJzY3JpYmVyIiwiY29tcGxldGVOYXZpZ2F0aW9uIiwiX3RlbXAiLCJfbG9jYXRpb24kc3RhdGUiLCJfbG9jYXRpb24kc3RhdGUyIiwiZmx1c2hTeW5jIiwiaXNBY3Rpb25SZWxvYWQiLCJpc011dGF0aW9uTWV0aG9kIiwiYWN0aW9uRGF0YSIsIm1lcmdlTG9hZGVyRGF0YSIsInByZXZlbnRTY3JvbGxSZXNldCIsInZpZXdUcmFuc2l0aW9uT3B0cyIsInByaW9yUGF0aHMiLCJ0b1BhdGhzIiwiZ2V0U2F2ZWRTY3JvbGxQb3NpdGlvbiIsIm5hdmlnYXRlIiwibm9ybWFsaXplZFBhdGgiLCJub3JtYWxpemVUbyIsInN1Ym1pc3Npb24iLCJub3JtYWxpemVOYXZpZ2F0ZU9wdGlvbnMiLCJjdXJyZW50TG9jYXRpb24iLCJuZXh0TG9jYXRpb24iLCJ1c2VyUmVwbGFjZSIsInJldmFsaWRhdGUiLCJpbnRlcnJ1cHRBY3RpdmVMb2FkcyIsInNhdmVTY3JvbGxQb3NpdGlvbiIsInJvdXRlc1RvVXNlIiwibG9hZGluZ05hdmlnYXRpb24iLCJub3RGb3VuZE1hdGNoZXMiLCJjYW5jZWxBY3RpdmVEZWZlcnJlZHMiLCJpc0hhc2hDaGFuZ2VPbmx5IiwicmVxdWVzdCIsImNyZWF0ZUNsaWVudFNpZGVSZXF1ZXN0IiwicGVuZGluZ0FjdGlvblJlc3VsdCIsImZpbmROZWFyZXN0Qm91bmRhcnkiLCJhY3Rpb25SZXN1bHQiLCJoYW5kbGVBY3Rpb24iLCJnZXRMb2FkaW5nTmF2aWdhdGlvbiIsInNob3J0Q2lyY3VpdGVkIiwiaGFuZGxlTG9hZGVycyIsImdldEFjdGlvbkRhdGFGb3JDb21taXQiLCJuYXZpZ2F0aW9uIiwiZ2V0U3VibWl0dGluZ05hdmlnYXRpb24iLCJhY3Rpb25NYXRjaCIsImdldFRhcmdldE1hdGNoIiwiY2FsbERhdGFTdHJhdGVneSIsImlzUmVkaXJlY3RSZXN1bHQiLCJub3JtYWxpemVSZWRpcmVjdExvY2F0aW9uIiwic3RhcnRSZWRpcmVjdE5hdmlnYXRpb24iLCJpc0RlZmVycmVkUmVzdWx0IiwiaXNFcnJvclJlc3VsdCIsImJvdW5kYXJ5TWF0Y2giLCJvdmVycmlkZU5hdmlnYXRpb24iLCJmZXRjaGVyU3VibWlzc2lvbiIsImluaXRpYWxIeWRyYXRpb24iLCJhY3RpdmVTdWJtaXNzaW9uIiwiZ2V0U3VibWlzc2lvbkZyb21OYXZpZ2F0aW9uIiwibWF0Y2hlc1RvTG9hZCIsInJldmFsaWRhdGluZ0ZldGNoZXJzIiwiZ2V0TWF0Y2hlc1RvTG9hZCIsInJvdXRlSWQiLCJ1cGRhdGVkRmV0Y2hlcnMiLCJtYXJrRmV0Y2hSZWRpcmVjdHNEb25lIiwicmV2YWxpZGF0aW5nRmV0Y2hlciIsImdldExvYWRpbmdGZXRjaGVyIiwiYWJvcnRGZXRjaGVyIiwiYWJvcnRQZW5kaW5nRmV0Y2hSZXZhbGlkYXRpb25zIiwibG9hZGVyUmVzdWx0cyIsImZldGNoZXJSZXN1bHRzIiwiY2FsbExvYWRlcnNBbmRNYXliZVJlc29sdmVEYXRhIiwicmVkaXJlY3QiLCJmaW5kUmVkaXJlY3QiLCJmZXRjaGVyS2V5IiwicHJvY2Vzc0xvYWRlckRhdGEiLCJkZWZlcnJlZERhdGEiLCJhYm9ydGVkIiwiX3JlZjIiLCJfcmVmMyIsImRpZEFib3J0RmV0Y2hMb2FkcyIsImFib3J0U3RhbGVGZXRjaExvYWRzIiwic2hvdWxkVXBkYXRlRmV0Y2hlcnMiLCJmZXRjaCIsInNldEZldGNoZXJFcnJvciIsImhhbmRsZUZldGNoZXJBY3Rpb24iLCJoYW5kbGVGZXRjaGVyTG9hZGVyIiwicmVxdWVzdE1hdGNoZXMiLCJleGlzdGluZ0ZldGNoZXIiLCJ1cGRhdGVGZXRjaGVyU3RhdGUiLCJnZXRTdWJtaXR0aW5nRmV0Y2hlciIsImFib3J0Q29udHJvbGxlciIsImZldGNoUmVxdWVzdCIsIm9yaWdpbmF0aW5nTG9hZElkIiwiZ2V0RG9uZUZldGNoZXIiLCJyZXZhbGlkYXRpb25SZXF1ZXN0IiwibG9hZElkIiwibG9hZEZldGNoZXIiLCJzdGFsZUtleSIsImRvbmVGZXRjaGVyIiwicmVzb2x2ZURlZmVycmVkRGF0YSIsIl90ZW1wMiIsInJlZGlyZWN0TG9jYXRpb24iLCJpc0RvY3VtZW50UmVsb2FkIiwicmVkaXJlY3RIaXN0b3J5QWN0aW9uIiwiZm9ybU1ldGhvZCIsImZvcm1BY3Rpb24iLCJmb3JtRW5jVHlwZSIsInR5cGUiLCJyZXN1bHRzIiwiY2FsbERhdGFTdHJhdGVneUltcGwiLCJpc1JlZGlyZWN0SGFuZGxlclJlc3VsdCIsInJlc3BvbnNlIiwibm9ybWFsaXplUmVsYXRpdmVSb3V0aW5nUmVkaXJlY3RSZXNwb25zZSIsImNvbnZlcnRIYW5kbGVyUmVzdWx0VG9EYXRhUmVzdWx0IiwiY3VycmVudE1hdGNoZXMiLCJmZXRjaGVyc1RvTG9hZCIsImZldGNoZXJSZXF1ZXN0IiwicmVzb2x2ZURlZmVycmVkUmVzdWx0cyIsImdldEZldGNoZXIiLCJkZWxldGVGZXRjaGVyQW5kVXBkYXRlU3RhdGUiLCJjb3VudCIsImNvbnRyb2xsZXIiLCJtYXJrRmV0Y2hlcnNEb25lIiwia2V5cyIsImRvbmVLZXlzIiwibGFuZGVkSWQiLCJ5ZWV0ZWRLZXlzIiwiZ2V0QmxvY2tlciIsImJsb2NrZXIiLCJuZXdCbG9ja2VyIiwiX3JlZjQiLCJlbnRyaWVzIiwiYmxvY2tlckZ1bmN0aW9uIiwicHJlZGljYXRlIiwiY2FuY2VsbGVkUm91dGVJZHMiLCJkZmQiLCJlbmFibGVTY3JvbGxSZXN0b3JhdGlvbiIsInBvc2l0aW9ucyIsImdldFBvc2l0aW9uIiwiZ2V0S2V5IiwiZ2V0U2Nyb2xsS2V5IiwiX2ludGVybmFsU2V0Um91dGVzIiwibmV3Um91dGVzIiwiaXNTdWJtaXNzaW9uTmF2aWdhdGlvbiIsInByZXBlbmRCYXNlbmFtZSIsImZyb21Sb3V0ZUlkIiwicmVsYXRpdmUiLCJjb250ZXh0dWFsTWF0Y2hlcyIsImFjdGl2ZVJvdXRlTWF0Y2giLCJoYXNOYWtlZEluZGV4UXVlcnkiLCJub3JtYWxpemVGb3JtTWV0aG9kIiwiaXNGZXRjaGVyIiwiaXNWYWxpZE1ldGhvZCIsImdldEludmFsaWRCb2R5RXJyb3IiLCJyYXdGb3JtTWV0aG9kIiwic3RyaXBIYXNoRnJvbVBhdGgiLCJ0ZXh0IiwiYWNjIiwiX3JlZjUiLCJuYW1lIiwianNvbiIsInNlYXJjaFBhcmFtcyIsImZvcm1EYXRhIiwiY29udmVydEZvcm1EYXRhVG9TZWFyY2hQYXJhbXMiLCJjb252ZXJ0U2VhcmNoUGFyYW1zVG9Gb3JtRGF0YSIsImdldExvYWRlck1hdGNoZXNVbnRpbEJvdW5kYXJ5IiwiYm91bmRhcnlJZCIsImJvdW5kYXJ5TWF0Y2hlcyIsImlzSW5pdGlhbExvYWQiLCJza2lwQWN0aW9uRXJyb3JSZXZhbGlkYXRpb24iLCJjdXJyZW50VXJsIiwibmV4dFVybCIsImFjdGlvblN0YXR1cyIsInNob3VsZFNraXBSZXZhbGlkYXRpb24iLCJuYXZpZ2F0aW9uTWF0Y2hlcyIsImlzTmV3TG9hZGVyIiwiY3VycmVudFJvdXRlTWF0Y2giLCJuZXh0Um91dGVNYXRjaCIsInNob3VsZFJldmFsaWRhdGVMb2FkZXIiLCJpc05ld1JvdXRlSW5zdGFuY2UiLCJmZXRjaGVyTWF0Y2hlcyIsImZldGNoZXJNYXRjaCIsInNob3VsZFJldmFsaWRhdGUiLCJjdXJyZW50TG9hZGVyRGF0YSIsImN1cnJlbnRNYXRjaCIsImlzTmV3IiwiaXNNaXNzaW5nRGF0YSIsImN1cnJlbnRQYXRoIiwibG9hZGVyTWF0Y2giLCJhcmciLCJyb3V0ZUNob2ljZSIsImxvYWRMYXp5Um91dGVNb2R1bGUiLCJsYXp5Um91dGUiLCJyb3V0ZVRvVXBkYXRlIiwicm91dGVVcGRhdGVzIiwibGF6eVJvdXRlUHJvcGVydHkiLCJpc1Byb3BlcnR5U3RhdGljYWxseURlZmluZWQiLCJyZXF1ZXN0Q29udGV4dCIsInJvdXRlSWRzVG9Mb2FkIiwibG9hZGVkTWF0Y2hlcyIsInNob3VsZExvYWQiLCJoYW5kbGVyT3ZlcnJpZGUiLCJjYWxsTG9hZGVyT3JBY3Rpb24iLCJzdGF0aWNDb250ZXh0Iiwib25SZWplY3QiLCJydW5IYW5kbGVyIiwiaGFuZGxlciIsInJlamVjdCIsImFib3J0UHJvbWlzZSIsImFjdHVhbEhhbmRsZXIiLCJjdHgiLCJoYW5kbGVyUHJvbWlzZSIsImhhbmRsZXJFcnJvciIsImhhbmRsZXJSZXN1bHQiLCJpc1Jlc3BvbnNlIiwiY29udGVudFR5cGUiLCJpc0RlZmVycmVkRGF0YSIsIl9yZXN1bHQkaW5pdCIsIl9yZXN1bHQkaW5pdDIiLCJ0cmltbWVkTWF0Y2hlcyIsIm5vcm1hbGl6ZWRMb2NhdGlvbiIsImlzU2FtZUJhc2VuYW1lIiwic2lnbmFsIiwicHJvY2Vzc1JvdXRlTG9hZGVyRGF0YSIsInNraXBMb2FkZXJFcnJvckJ1YmJsaW5nIiwic3RhdHVzQ29kZSIsImZvdW5kRXJyb3IiLCJsb2FkZXJIZWFkZXJzIiwicGVuZGluZ0Vycm9yIiwibmV3TG9hZGVyRGF0YSIsIm1lcmdlZExvYWRlckRhdGEiLCJfdGVtcDUiLCJtZXRob2QiLCJlcnJvck1lc3NhZ2UiLCJkZWZlcnJlZCIsInNpZ25hbHMiLCJpc1JldmFsaWRhdGluZ0xvYWRlciIsInVud3JhcCIsIl93aW5kb3ciLCJ0cmFuc2l0aW9ucyIsInNlc3Npb25Qb3NpdGlvbnMiLCJEYXRhUm91dGVyQ29udGV4dCIsIlJlYWN0LmNyZWF0ZUNvbnRleHQiLCJEYXRhUm91dGVyU3RhdGVDb250ZXh0IiwiTmF2aWdhdGlvbkNvbnRleHQiLCJMb2NhdGlvbkNvbnRleHQiLCJSb3V0ZUNvbnRleHQiLCJSb3V0ZUVycm9yQ29udGV4dCIsInVzZUhyZWYiLCJ1c2VJblJvdXRlckNvbnRleHQiLCJVTlNBRkVfaW52YXJpYW50IiwibmF2aWdhdG9yIiwiUmVhY3QudXNlQ29udGV4dCIsInVzZVJlc29sdmVkUGF0aCIsImpvaW5lZFBhdGhuYW1lIiwidXNlTG9jYXRpb24iLCJ1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IiwiUmVhY3QudXNlTGF5b3V0RWZmZWN0IiwidXNlTmF2aWdhdGUiLCJpc0RhdGFSb3V0ZSIsInVzZU5hdmlnYXRlU3RhYmxlIiwidXNlTmF2aWdhdGVVbnN0YWJsZSIsImRhdGFSb3V0ZXJDb250ZXh0Iiwicm91dGVQYXRobmFtZXNKc29uIiwiVU5TQUZFX2dldFJlc29sdmVUb01hdGNoZXMiLCJhY3RpdmVSZWYiLCJSZWFjdC51c2VSZWYiLCJSZWFjdC51c2VDYWxsYmFjayIsInVzZVBhcmFtcyIsInJvdXRlTWF0Y2giLCJSZWFjdC51c2VNZW1vIiwidXNlUm91dGVzSW1wbCIsImRhdGFSb3V0ZXJTdGF0ZSIsInBhcmVudE1hdGNoZXMiLCJwYXJlbnRQYXJhbXMiLCJwYXJlbnRQYXRobmFtZUJhc2UiLCJsb2NhdGlvbkZyb21Db250ZXh0IiwicGFyZW50U2VnbWVudHMiLCJfcmVuZGVyTWF0Y2hlcyIsIkRlZmF1bHRFcnJvckNvbXBvbmVudCIsInVzZVJvdXRlRXJyb3IiLCJzdGFjayIsInByZVN0eWxlcyIsIlJlYWN0LmNyZWF0ZUVsZW1lbnQiLCJSZWFjdC5GcmFnbWVudCIsImRlZmF1bHRFcnJvckVsZW1lbnQiLCJSZW5kZXJFcnJvckJvdW5kYXJ5IiwiUmVhY3QuQ29tcG9uZW50IiwicHJvcHMiLCJlcnJvckluZm8iLCJSZW5kZXJlZFJvdXRlIiwicm91dGVDb250ZXh0IiwiY2hpbGRyZW4iLCJfZGF0YVJvdXRlclN0YXRlMiIsIl9kYXRhUm91dGVyU3RhdGUiLCJyZW5kZXJlZE1hdGNoZXMiLCJlcnJvckluZGV4IiwicmVuZGVyRmFsbGJhY2siLCJmYWxsYmFja0luZGV4IiwibmVlZHNUb1J1bkxvYWRlciIsIm91dGxldCIsInNob3VsZFJlbmRlckh5ZHJhdGVGYWxsYmFjayIsImVycm9yRWxlbWVudCIsImh5ZHJhdGVGYWxsYmFja0VsZW1lbnQiLCJ3YXJuaW5nT25jZSIsImdldENoaWxkcmVuIiwiRGF0YVJvdXRlckhvb2siLCJEYXRhUm91dGVyU3RhdGVIb29rIiwidXNlRGF0YVJvdXRlckNvbnRleHQiLCJob29rTmFtZSIsInVzZURhdGFSb3V0ZXJTdGF0ZSIsInVzZVJvdXRlQ29udGV4dCIsInVzZUN1cnJlbnRSb3V0ZUlkIiwidGhpc1JvdXRlIiwidXNlUmV2YWxpZGF0b3IiLCJ1c2VMb2FkZXJEYXRhIiwiX3N0YXRlJGVycm9ycyIsImFscmVhZHlXYXJuZWQiLCJSb3V0ZXIiLCJiYXNlbmFtZVByb3AiLCJsb2NhdGlvblByb3AiLCJuYXZpZ2F0aW9uVHlwZSIsInN0YXRpY1Byb3AiLCJuYXZpZ2F0aW9uQ29udGV4dCIsImxvY2F0aW9uQ29udGV4dCIsInRyYWlsaW5nUGF0aG5hbWUiLCJ1cGRhdGVzIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiLCJleGNsdWRlZCIsInNvdXJjZUtleXMiLCJpc01vZGlmaWVkRXZlbnQiLCJldmVudCIsInNob3VsZFByb2Nlc3NMaW5rQ2xpY2siLCJjcmVhdGVTZWFyY2hQYXJhbXMiLCJnZXRTZWFyY2hQYXJhbXNGb3JMb2NhdGlvbiIsImxvY2F0aW9uU2VhcmNoIiwiZGVmYXVsdFNlYXJjaFBhcmFtcyIsIl9leGNsdWRlZCIsIlJFQUNUX1JPVVRFUl9WRVJTSU9OIiwiY3JlYXRlQnJvd3NlclJvdXRlciIsInBhcnNlSHlkcmF0aW9uRGF0YSIsIlVOU0FGRV9tYXBSb3V0ZVByb3BlcnRpZXMiLCJkZXNlcmlhbGl6ZUVycm9ycyIsInNlcmlhbGl6ZWQiLCJ2YWwiLCJVTlNBRkVfRXJyb3JSZXNwb25zZUltcGwiLCJFcnJvckNvbnN0cnVjdG9yIiwiVmlld1RyYW5zaXRpb25Db250ZXh0IiwiRmV0Y2hlcnNDb250ZXh0IiwiU1RBUlRfVFJBTlNJVElPTiIsInN0YXJ0VHJhbnNpdGlvbkltcGwiLCJSZWFjdCIsIkZMVVNIX1NZTkMiLCJmbHVzaFN5bmNJbXBsIiwiUmVhY3RET00iLCJzdGFydFRyYW5zaXRpb25TYWZlIiwiZmx1c2hTeW5jU2FmZSIsIkRlZmVycmVkIiwicmVzb2x2ZSIsInJlYXNvbiIsIlJvdXRlclByb3ZpZGVyIiwiZmFsbGJhY2tFbGVtZW50Iiwic2V0U3RhdGVJbXBsIiwiUmVhY3QudXNlU3RhdGUiLCJwZW5kaW5nU3RhdGUiLCJzZXRQZW5kaW5nU3RhdGUiLCJ2dENvbnRleHQiLCJzZXRWdENvbnRleHQiLCJyZW5kZXJEZmQiLCJzZXRSZW5kZXJEZmQiLCJ0cmFuc2l0aW9uIiwic2V0VHJhbnNpdGlvbiIsImludGVycnVwdGlvbiIsInNldEludGVycnVwdGlvbiIsImZldGNoZXJEYXRhIiwidjdfc3RhcnRUcmFuc2l0aW9uIiwib3B0SW5TdGFydFRyYW5zaXRpb24iLCJzZXRTdGF0ZSIsImlzVmlld1RyYW5zaXRpb25VbmF2YWlsYWJsZSIsIlJlYWN0LnVzZUVmZmVjdCIsInJlbmRlclByb21pc2UiLCJVTlNBRkVfRGF0YVJvdXRlckNvbnRleHQiLCJVTlNBRkVfRGF0YVJvdXRlclN0YXRlQ29udGV4dCIsIkRhdGFSb3V0ZXMiLCJVTlNBRkVfdXNlUm91dGVzSW1wbCIsIkxpbmsiLCJSZWFjdC5mb3J3YXJkUmVmIiwiX3JlZjciLCJyZWYiLCJvbkNsaWNrIiwicmVsb2FkRG9jdW1lbnQiLCJ1bnN0YWJsZV92aWV3VHJhbnNpdGlvbiIsIlVOU0FGRV9OYXZpZ2F0aW9uQ29udGV4dCIsImFic29sdXRlSHJlZiIsImlzRXh0ZXJuYWwiLCJ0YXJnZXRVcmwiLCJpbnRlcm5hbE9uQ2xpY2siLCJ1c2VMaW5rQ2xpY2tIYW5kbGVyIiwiaGFuZGxlQ2xpY2siLCJyZXBsYWNlUHJvcCIsInVzZVNlYXJjaFBhcmFtcyIsImRlZmF1bHRJbml0IiwiZGVmYXVsdFNlYXJjaFBhcmFtc1JlZiIsImhhc1NldFNlYXJjaFBhcmFtc1JlZiIsInNldFNlYXJjaFBhcmFtcyIsIm5leHRJbml0IiwibmF2aWdhdGVPcHRpb25zIiwibmV3U2VhcmNoUGFyYW1zIiwiY29tbW9uIiwicmVkIiwicHVycGxlIiwiYmx1ZSIsImxpZ2h0Qmx1ZSIsImdyZWVuIiwib3JhbmdlIiwiZ3JleSIsImZvcm1hdE11aUVycm9yTWVzc2FnZSIsImNvZGUiLCJUSEVNRV9JRCIsIm1lbW9pemUiLCJjYWNoZSIsInJlYWN0UHJvcHNSZWdleCIsImlzUHJvcFZhbGlkIiwicHJvcCIsInNoZWV0Rm9yVGFnIiwidGFnIiwiY3JlYXRlU3R5bGVFbGVtZW50IiwiU3R5bGVTaGVldCIsIl90aGlzIiwiYmVmb3JlIiwiX3Byb3RvIiwibm9kZXMiLCJydWxlIiwic2hlZXQiLCJNUyIsIk1PWiIsIldFQktJVCIsIkNPTU1FTlQiLCJSVUxFU0VUIiwiREVDTEFSQVRJT04iLCJJTVBPUlQiLCJLRVlGUkFNRVMiLCJMQVlFUiIsImFicyIsImFzc2lnbiIsImxlbmd0aCIsImNoYXJhdCIsInRyaW0iLCJyZXBsYWNlbWVudCIsImluZGV4b2YiLCJzdWJzdHIiLCJiZWdpbiIsInN0cmxlbiIsInNpemVvZiIsImFwcGVuZCIsImFycmF5IiwiY29tYmluZSIsImNhbGxiYWNrIiwibGluZSIsImNvbHVtbiIsInBvc2l0aW9uIiwiY2hhcmFjdGVyIiwiY2hhcmFjdGVycyIsIm5vZGUiLCJyb290IiwicGFyZW50IiwiY29weSIsInByZXYiLCJuZXh0IiwicGVlayIsImNhcmV0Iiwic2xpY2UiLCJ0b2tlbiIsImFsbG9jIiwiZGVhbGxvYyIsImRlbGltaXQiLCJkZWxpbWl0ZXIiLCJ3aGl0ZXNwYWNlIiwiZXNjYXBpbmciLCJjb21tZW50ZXIiLCJpZGVudGlmaWVyIiwiY29tcGlsZSIsInBhcnNlIiwicnVsZXMiLCJydWxlc2V0cyIsInBzZXVkbyIsInBvaW50cyIsImRlY2xhcmF0aW9ucyIsIm9mZnNldCIsImF0cnVsZSIsInByb3BlcnR5IiwicHJldmlvdXMiLCJ2YXJpYWJsZSIsInNjYW5uaW5nIiwiYW1wZXJzYW5kIiwicmVmZXJlbmNlIiwiY29tbWVudCIsImRlY2xhcmF0aW9uIiwicnVsZXNldCIsInBvc3QiLCJzaXplIiwiaiIsInNlcmlhbGl6ZSIsIm91dHB1dCIsInN0cmluZ2lmeSIsImVsZW1lbnQiLCJtaWRkbGV3YXJlIiwiY29sbGVjdGlvbiIsInJ1bGVzaGVldCIsImlkZW50aWZpZXJXaXRoUG9pbnRUcmFja2luZyIsInRvUnVsZXMiLCJwYXJzZWQiLCJnZXRSdWxlcyIsImZpeGVkRWxlbWVudHMiLCJjb21wYXQiLCJpc0ltcGxpY2l0UnVsZSIsInBhcmVudFJ1bGVzIiwicmVtb3ZlTGFiZWwiLCJwcmVmaXgiLCJwcmVmaXhlciIsImRlZmF1bHRTdHlsaXNQbHVnaW5zIiwiY3JlYXRlQ2FjaGUiLCJzc3JTdHlsZXMiLCJkYXRhRW1vdGlvbkF0dHJpYnV0ZSIsInN0eWxpc1BsdWdpbnMiLCJpbnNlcnRlZCIsImNvbnRhaW5lciIsIm5vZGVzVG9IeWRyYXRlIiwiYXR0cmliIiwiX2luc2VydCIsIm9tbmlwcmVzZW50UGx1Z2lucyIsImN1cnJlbnRTaGVldCIsImZpbmFsaXppbmdQbHVnaW5zIiwic2VyaWFsaXplciIsInN0eWxpcyIsInN0eWxlcyIsInNlbGVjdG9yIiwic2hvdWxkQ2FjaGUiLCJyZWFjdElzX3Byb2R1Y3Rpb25fbWluIiwicmVhY3RJc01vZHVsZSIsInJlYWN0SXMiLCJGT1JXQVJEX1JFRl9TVEFUSUNTIiwiTUVNT19TVEFUSUNTIiwiVFlQRV9TVEFUSUNTIiwiZ2V0UmVnaXN0ZXJlZFN0eWxlcyIsInJlZ2lzdGVyZWQiLCJyZWdpc3RlcmVkU3R5bGVzIiwiY2xhc3NOYW1lcyIsInJhd0NsYXNzTmFtZSIsImNsYXNzTmFtZSIsInJlZ2lzdGVyU3R5bGVzIiwiaXNTdHJpbmdUYWciLCJpbnNlcnRTdHlsZXMiLCJtdXJtdXIyIiwic3RyIiwibGVuIiwidW5pdGxlc3NLZXlzIiwiaHlwaGVuYXRlUmVnZXgiLCJhbmltYXRpb25SZWdleCIsImlzQ3VzdG9tUHJvcGVydHkiLCJpc1Byb2Nlc3NhYmxlVmFsdWUiLCJwcm9jZXNzU3R5bGVOYW1lIiwic3R5bGVOYW1lIiwicHJvY2Vzc1N0eWxlVmFsdWUiLCJwMSIsInAyIiwiY3Vyc29yIiwidW5pdGxlc3MiLCJoYW5kbGVJbnRlcnBvbGF0aW9uIiwibWVyZ2VkUHJvcHMiLCJpbnRlcnBvbGF0aW9uIiwiY3JlYXRlU3RyaW5nRnJvbU9iamVjdCIsInByZXZpb3VzQ3Vyc29yIiwiY2FjaGVkIiwib2JqIiwic3RyaW5nIiwiX2tleSIsIl9pIiwiaW50ZXJwb2xhdGVkIiwibGFiZWxQYXR0ZXJuIiwic2VyaWFsaXplU3R5bGVzIiwiYXJncyIsInN0cmluZ01vZGUiLCJzdHJpbmdzIiwiaWRlbnRpZmllck5hbWUiLCJoYXNoU3RyaW5nIiwic3luY0ZhbGxiYWNrIiwiY3JlYXRlIiwidXNlSW5zZXJ0aW9uRWZmZWN0IiwidXNlSW5zZXJ0aW9uRWZmZWN0QWx3YXlzV2l0aFN5bmNGYWxsYmFjayIsInVzZUluc2VydGlvbkVmZmVjdFdpdGhMYXlvdXRGYWxsYmFjayIsIkVtb3Rpb25DYWNoZUNvbnRleHQiLCJDYWNoZVByb3ZpZGVyIiwid2l0aEVtb3Rpb25DYWNoZSIsImZ1bmMiLCJmb3J3YXJkUmVmIiwidXNlQ29udGV4dCIsIlRoZW1lQ29udGV4dCIsIm1vZHVsZSIsIkdsb2JhbCIsInNoZWV0UmVmIiwicmVoeWRyYXRpbmciLCJzaGVldFJlZkN1cnJlbnQiLCJjc3MiLCJfbGVuIiwia2V5ZnJhbWVzIiwiaW5zZXJ0YWJsZSIsInRlc3RPbWl0UHJvcHNPblN0cmluZ1RhZyIsInRlc3RPbWl0UHJvcHNPbkNvbXBvbmVudCIsImdldERlZmF1bHRTaG91bGRGb3J3YXJkUHJvcCIsImNvbXBvc2VTaG91bGRGb3J3YXJkUHJvcHMiLCJpc1JlYWwiLCJzaG91bGRGb3J3YXJkUHJvcCIsIm9wdGlvbnNTaG91bGRGb3J3YXJkUHJvcCIsInByb3BOYW1lIiwiSW5zZXJ0aW9uIiwiY3JlYXRlU3R5bGVkIiwiYmFzZVRhZyIsInRhcmdldENsYXNzTmFtZSIsImRlZmF1bHRTaG91bGRGb3J3YXJkUHJvcCIsInNob3VsZFVzZUFzIiwiU3R5bGVkIiwiRmluYWxUYWciLCJjbGFzc0ludGVycG9sYXRpb25zIiwiZmluYWxTaG91bGRGb3J3YXJkUHJvcCIsIm5ld1Byb3BzIiwibmV4dFRhZyIsIm5leHRPcHRpb25zIiwidGFncyIsIm5ld1N0eWxlZCIsInRhZ05hbWUiLCJTdHlsZWRFbmdpbmVQcm92aWRlciIsImluamVjdEZpcnN0IiwiX2pzeCIsImlzRW1wdHkiLCJHbG9iYWxTdHlsZXMiLCJkZWZhdWx0VGhlbWUiLCJnbG9iYWxTdHlsZXMiLCJ0aGVtZUlucHV0Iiwic3R5bGVkIiwiZW1TdHlsZWQiLCJpbnRlcm5hbF9wcm9jZXNzU3R5bGVzIiwicHJvY2Vzc29yIiwiaXNQbGFpbk9iamVjdCIsIml0ZW0iLCJwcm90b3R5cGUiLCJkZWVwQ2xvbmUiLCJkZWVwbWVyZ2UiLCJzb3J0QnJlYWtwb2ludHNWYWx1ZXMiLCJ2YWx1ZXMiLCJicmVha3BvaW50c0FzQXJyYXkiLCJicmVha3BvaW50MSIsImJyZWFrcG9pbnQyIiwiY3JlYXRlQnJlYWtwb2ludHMiLCJicmVha3BvaW50cyIsInVuaXQiLCJzdGVwIiwib3RoZXIiLCJzb3J0ZWRWYWx1ZXMiLCJ1cCIsImRvd24iLCJiZXR3ZWVuIiwic3RhcnQiLCJlbmRJbmRleCIsIm9ubHkiLCJub3QiLCJrZXlJbmRleCIsInNoYXBlIiwibWVyZ2UiLCJkZWZhdWx0QnJlYWtwb2ludHMiLCJoYW5kbGVCcmVha3BvaW50cyIsInByb3BWYWx1ZSIsInN0eWxlRnJvbVByb3BWYWx1ZSIsInRoZW1lIiwidGhlbWVCcmVha3BvaW50cyIsImJyZWFrcG9pbnQiLCJtZWRpYUtleSIsImNzc0tleSIsImNyZWF0ZUVtcHR5QnJlYWtwb2ludE9iamVjdCIsImJyZWFrcG9pbnRzSW5wdXQiLCJfYnJlYWtwb2ludHNJbnB1dCRrZXkiLCJicmVha3BvaW50U3R5bGVLZXkiLCJyZW1vdmVVbnVzZWRCcmVha3BvaW50cyIsImJyZWFrcG9pbnRLZXlzIiwic3R5bGUiLCJicmVha3BvaW50T3V0cHV0IiwibWVyZ2VCcmVha3BvaW50c0luT3JkZXIiLCJlbXB0eUJyZWFrcG9pbnRzIiwibWVyZ2VkT3V0cHV0IiwiY29tcHV0ZUJyZWFrcG9pbnRzQmFzZSIsImJyZWFrcG9pbnRWYWx1ZXMiLCJicmVha3BvaW50c0tleXMiLCJyZXNvbHZlQnJlYWtwb2ludFZhbHVlcyIsImN1c3RvbUJhc2UiLCJjYXBpdGFsaXplIiwiX2Zvcm1hdE11aUVycm9yTWVzc2FnZSIsImdldFBhdGgiLCJjaGVja1ZhcnMiLCJnZXRTdHlsZVZhbHVlIiwidGhlbWVNYXBwaW5nIiwidHJhbnNmb3JtIiwicHJvcFZhbHVlRmluYWwiLCJ1c2VyVmFsdWUiLCJjc3NQcm9wZXJ0eSIsInRoZW1lS2V5IiwicHJvcGVydGllcyIsImRpcmVjdGlvbnMiLCJhbGlhc2VzIiwiZ2V0Q3NzUHJvcGVydGllcyIsImRpcmVjdGlvbiIsImRpciIsIm1hcmdpbktleXMiLCJwYWRkaW5nS2V5cyIsImNyZWF0ZVVuYXJ5VW5pdCIsImRlZmF1bHRWYWx1ZSIsIl9nZXRQYXRoIiwidGhlbWVTcGFjaW5nIiwiY3JlYXRlVW5hcnlTcGFjaW5nIiwiZ2V0VmFsdWUiLCJ0cmFuc2Zvcm1lciIsInRyYW5zZm9ybWVkIiwiZ2V0U3R5bGVGcm9tUHJvcFZhbHVlIiwiY3NzUHJvcGVydGllcyIsInJlc29sdmVDc3NQcm9wZXJ0eSIsIm1hcmdpbiIsInBhZGRpbmciLCJjcmVhdGVTcGFjaW5nIiwic3BhY2luZ0lucHV0Iiwic3BhY2luZyIsImFyZ3NJbnB1dCIsImFyZ3VtZW50IiwiY29tcG9zZSIsImhhbmRsZXJzIiwiYm9yZGVyVHJhbnNmb3JtIiwiY3JlYXRlQm9yZGVyU3R5bGUiLCJib3JkZXIiLCJib3JkZXJUb3AiLCJib3JkZXJSaWdodCIsImJvcmRlckJvdHRvbSIsImJvcmRlckxlZnQiLCJib3JkZXJDb2xvciIsImJvcmRlclRvcENvbG9yIiwiYm9yZGVyUmlnaHRDb2xvciIsImJvcmRlckJvdHRvbUNvbG9yIiwiYm9yZGVyTGVmdENvbG9yIiwib3V0bGluZSIsIm91dGxpbmVDb2xvciIsImJvcmRlclJhZGl1cyIsImdhcCIsImNvbHVtbkdhcCIsInJvd0dhcCIsImdyaWRDb2x1bW4iLCJncmlkUm93IiwiZ3JpZEF1dG9GbG93IiwiZ3JpZEF1dG9Db2x1bW5zIiwiZ3JpZEF1dG9Sb3dzIiwiZ3JpZFRlbXBsYXRlQ29sdW1ucyIsImdyaWRUZW1wbGF0ZVJvd3MiLCJncmlkVGVtcGxhdGVBcmVhcyIsImdyaWRBcmVhIiwicGFsZXR0ZVRyYW5zZm9ybSIsImNvbG9yIiwiYmdjb2xvciIsImJhY2tncm91bmRDb2xvciIsInNpemluZ1RyYW5zZm9ybSIsIndpZHRoIiwibWF4V2lkdGgiLCJfcHJvcHMkdGhlbWUiLCJfcHJvcHMkdGhlbWUyIiwiYnJlYWtwb2ludHNWYWx1ZXMiLCJtaW5XaWR0aCIsImhlaWdodCIsIm1heEhlaWdodCIsIm1pbkhlaWdodCIsImJveFNpemluZyIsImRlZmF1bHRTeENvbmZpZyIsIm9iamVjdHNIYXZlU2FtZUtleXMiLCJvYmplY3RzIiwiYWxsS2V5cyIsIm9iamVjdCIsInVuaW9uIiwiY2FsbElmRm4iLCJtYXliZUZuIiwidW5zdGFibGVfY3JlYXRlU3R5bGVGdW5jdGlvblN4IiwiZ2V0VGhlbWVWYWx1ZSIsImNvbmZpZyIsInN0eWxlRnVuY3Rpb25TeCIsIl90aGVtZSR1bnN0YWJsZV9zeENvbiIsInN4IiwidHJhdmVyc2UiLCJzeElucHV0Iiwic3hPYmplY3QiLCJzdHlsZUtleSIsImFwcGx5U3R5bGVzIiwiY3JlYXRlVGhlbWUiLCJwYWxldHRlSW5wdXQiLCJzaGFwZUlucHV0IiwibXVpVGhlbWUiLCJpc09iamVjdEVtcHR5IiwidXNlVGhlbWUiLCJjb250ZXh0VGhlbWUiLCJzeXN0ZW1EZWZhdWx0VGhlbWUiLCJ1c2VUaGVtZVdpdGhvdXREZWZhdWx0IiwidGhlbWVJZCIsInVwcGVyVGhlbWUiLCJNdWlHbG9iYWxTdHlsZXMiLCJzcGxpdFByb3BzIiwiX3Byb3BzJHRoZW1lJHVuc3RhYmxlIiwiZXh0ZW5kU3hQcm9wIiwiaW5TeCIsInN5c3RlbVByb3BzIiwib3RoZXJQcm9wcyIsImZpbmFsU3giLCJkZWZhdWx0R2VuZXJhdG9yIiwiY29tcG9uZW50TmFtZSIsImNyZWF0ZUNsYXNzTmFtZUdlbmVyYXRvciIsImdlbmVyYXRlIiwiZ2VuZXJhdG9yIiwiQ2xhc3NOYW1lR2VuZXJhdG9yIiwiY2xzeCIsImNyZWF0ZUJveCIsImRlZmF1bHRDbGFzc05hbWUiLCJnZW5lcmF0ZUNsYXNzTmFtZSIsIkJveFJvb3QiLCJpblByb3BzIiwiX2V4dGVuZFN4UHJvcCIsImNvbXBvbmVudCIsImdsb2JhbFN0YXRlQ2xhc3NlcyIsImdlbmVyYXRlVXRpbGl0eUNsYXNzIiwic2xvdCIsImdsb2JhbFN0YXRlUHJlZml4IiwiZ2xvYmFsU3RhdGVDbGFzcyIsImdlbmVyYXRlVXRpbGl0eUNsYXNzZXMiLCJzbG90cyIsImZuTmFtZU1hdGNoUmVnZXgiLCJnZXRGdW5jdGlvbk5hbWUiLCJnZXRGdW5jdGlvbkNvbXBvbmVudE5hbWUiLCJDb21wb25lbnQiLCJmYWxsYmFjayIsImdldFdyYXBwZWROYW1lIiwib3V0ZXJUeXBlIiwiaW5uZXJUeXBlIiwid3JhcHBlck5hbWUiLCJmdW5jdGlvbk5hbWUiLCJnZXREaXNwbGF5TmFtZSIsIkZvcndhcmRSZWYiLCJNZW1vIiwiX2V4Y2x1ZGVkMiIsIl9leGNsdWRlZDMiLCJsb3dlcmNhc2VGaXJzdExldHRlciIsInJlc29sdmVUaGVtZSIsImRlZmF1bHRPdmVycmlkZXNSZXNvbHZlciIsInByb2Nlc3NTdHlsZUFyZyIsImNhbGxhYmxlU3R5bGUiLCJvd25lclN0YXRlIiwicmVzb2x2ZWRTdHlsZXNBcmciLCJyZXNvbHZlZFN0eWxlIiwidmFyaWFudHMiLCJ2YXJpYW50IiwiaXNNYXRjaCIsImlucHV0Iiwicm9vdFNob3VsZEZvcndhcmRQcm9wIiwic2xvdFNob3VsZEZvcndhcmRQcm9wIiwic3lzdGVtU3giLCJpbnB1dE9wdGlvbnMiLCJwcm9jZXNzU3R5bGVzIiwiY29tcG9uZW50U2xvdCIsImlucHV0U2tpcFZhcmlhbnRzUmVzb2x2ZXIiLCJpbnB1dFNraXBTeCIsIm92ZXJyaWRlc1Jlc29sdmVyIiwic2tpcFZhcmlhbnRzUmVzb2x2ZXIiLCJza2lwU3giLCJsYWJlbCIsInNob3VsZEZvcndhcmRQcm9wT3B0aW9uIiwiZGVmYXVsdFN0eWxlZFJlc29sdmVyIiwic3R5bGVkRW5naW5lU3R5bGVkIiwidHJhbnNmb3JtU3R5bGVBcmciLCJzdHlsZXNBcmciLCJtdWlTdHlsZWRSZXNvbHZlciIsInN0eWxlQXJnIiwiZXhwcmVzc2lvbnMiLCJ0cmFuc2Zvcm1lZFN0eWxlQXJnIiwiZXhwcmVzc2lvbnNXaXRoRGVmYXVsdFRoZW1lIiwic3R5bGVPdmVycmlkZXMiLCJyZXNvbHZlZFN0eWxlT3ZlcnJpZGVzIiwic2xvdEtleSIsInNsb3RTdHlsZSIsIl90aGVtZSRjb21wb25lbnRzIiwidGhlbWVWYXJpYW50cyIsIm51bU9mQ3VzdG9tRm5zQXBwbGllZCIsInBsYWNlaG9sZGVycyIsInJlc29sdmVQcm9wcyIsImRlZmF1bHRQcm9wcyIsImRlZmF1bHRTbG90UHJvcHMiLCJzbG90UHJvcHMiLCJzbG90UHJvcE5hbWUiLCJnZXRUaGVtZVByb3BzIiwidXNlVGhlbWVQcm9wcyIsInVzZUVuaGFuY2VkRWZmZWN0IiwiY2xhbXAiLCJtaW4iLCJtYXgiLCJjcmVhdGVDaGFpbmVkRnVuY3Rpb24iLCJmdW5jcyIsImRlYm91bmNlIiwid2FpdCIsInRpbWVvdXQiLCJkZWJvdW5jZWQiLCJsYXRlciIsImRlcHJlY2F0ZWRQcm9wVHlwZSIsInZhbGlkYXRvciIsImlzTXVpRWxlbWVudCIsIm11aU5hbWVzIiwiX211aU5hbWUiLCJfZWxlbWVudCR0eXBlIiwiUmVhY3QuaXNWYWxpZEVsZW1lbnQiLCJvd25lckRvY3VtZW50Iiwib3duZXJXaW5kb3ciLCJyZXF1aXJlUHJvcEZhY3RvcnkiLCJjb21wb25lbnROYW1lSW5FcnJvciIsInNldFJlZiIsImdsb2JhbElkIiwidXNlR2xvYmFsSWQiLCJpZE92ZXJyaWRlIiwiZGVmYXVsdElkIiwic2V0RGVmYXVsdElkIiwibWF5YmVSZWFjdFVzZUlkIiwidXNlSWQiLCJyZWFjdElkIiwidW5zdXBwb3J0ZWRQcm9wIiwicHJvcEZ1bGxOYW1lIiwidXNlQ29udHJvbGxlZCIsImNvbnRyb2xsZWQiLCJkZWZhdWx0UHJvcCIsImlzQ29udHJvbGxlZCIsInZhbHVlU3RhdGUiLCJzZXRWYWx1ZSIsInNldFZhbHVlSWZVbmNvbnRyb2xsZWQiLCJuZXdWYWx1ZSIsInVzZUV2ZW50Q2FsbGJhY2siLCJ1c2VGb3JrUmVmIiwicmVmcyIsImluc3RhbmNlIiwiVU5JTklUSUFMSVpFRCIsInVzZUxhenlSZWYiLCJpbml0QXJnIiwiRU1QVFkiLCJ1c2VPbk1vdW50IiwiVGltZW91dCIsImRlbGF5IiwidXNlVGltZW91dCIsImhhZEtleWJvYXJkRXZlbnQiLCJoYWRGb2N1c1Zpc2libGVSZWNlbnRseSIsImhhZEZvY3VzVmlzaWJsZVJlY2VudGx5VGltZW91dCIsImlucHV0VHlwZXNXaGl0ZWxpc3QiLCJmb2N1c1RyaWdnZXJzS2V5Ym9hcmRNb2RhbGl0eSIsImhhbmRsZUtleURvd24iLCJoYW5kbGVQb2ludGVyRG93biIsImhhbmRsZVZpc2liaWxpdHlDaGFuZ2UiLCJwcmVwYXJlIiwiZG9jIiwiaXNGb2N1c1Zpc2libGUiLCJ1c2VJc0ZvY3VzVmlzaWJsZSIsImlzRm9jdXNWaXNpYmxlUmVmIiwiaGFuZGxlQmx1clZpc2libGUiLCJoYW5kbGVGb2N1c1Zpc2libGUiLCJnZXRTY3JvbGxiYXJTaXplIiwiZG9jdW1lbnRXaWR0aCIsImNvbXBvc2VDbGFzc2VzIiwiZ2V0VXRpbGl0eUNsYXNzIiwiY2xhc3NlcyIsInV0aWxpdHlDbGFzcyIsIlJ0bENvbnRleHQiLCJ1c2VSdGwiLCJkZWZhdWx0Q3JlYXRlU3R5bGVkQ29tcG9uZW50Iiwic3lzdGVtU3R5bGVkIiwidXNlVGhlbWVQcm9wc0RlZmF1bHQiLCJ1c2VUaGVtZVByb3BzU3lzdGVtIiwiam9pbkNoaWxkcmVuIiwic2VwYXJhdG9yIiwiY2hpbGRyZW5BcnJheSIsIlJlYWN0LkNoaWxkcmVuIiwiY2hpbGQiLCJSZWFjdC5jbG9uZUVsZW1lbnQiLCJnZXRTaWRlRnJvbURpcmVjdGlvbiIsImRpcmVjdGlvblZhbHVlcyIsInNwYWNpbmdWYWx1ZXMiLCJwcmV2aW91c0RpcmVjdGlvblZhbHVlIiwiY3JlYXRlU3RhY2siLCJjcmVhdGVTdHlsZWRDb21wb25lbnQiLCJ1c2VVdGlsaXR5Q2xhc3NlcyIsIlN0YWNrUm9vdCIsInRoZW1lUHJvcHMiLCJkaXZpZGVyIiwidXNlRmxleEdhcCIsImNyZWF0ZU1peGlucyIsIm1peGlucyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJjb2xvck1hbmlwdWxhdG9yIiwiYWxwaGFfMSIsImFscGhhIiwiYmxlbmQiLCJkYXJrZW5fMSIsImRhcmtlbiIsImRlY29tcG9zZUNvbG9yIiwiZW1waGFzaXplIiwiZ2V0Q29udHJhc3RSYXRpb18xIiwiZ2V0Q29udHJhc3RSYXRpbyIsImdldEx1bWluYW5jZSIsImhleFRvUmdiIiwiaHNsVG9SZ2IiLCJsaWdodGVuXzEiLCJsaWdodGVuIiwicHJpdmF0ZV9zYWZlQWxwaGEiLCJwcml2YXRlX3NhZmVEYXJrZW4iLCJwcml2YXRlX3NhZmVFbXBoYXNpemUiLCJwcml2YXRlX3NhZmVMaWdodGVuIiwicmVjb21wb3NlQ29sb3IiLCJyZ2JUb0hleCIsIl9mb3JtYXRNdWlFcnJvck1lc3NhZ2UyIiwiX2NsYW1wIiwicmVxdWlyZSQkMiIsImNsYW1wV3JhcHBlciIsImNvbG9ycyIsImludFRvSGV4IiwiaW50IiwiaGV4IiwibWFya2VyIiwiY29sb3JTcGFjZSIsImNvbG9yQ2hhbm5lbCIsImRlY29tcG9zZWRDb2xvciIsInByaXZhdGVfc2FmZUNvbG9yQ2hhbm5lbCIsInJnYiIsImZvcmVncm91bmQiLCJiYWNrZ3JvdW5kIiwibHVtQSIsImx1bUIiLCJjb2VmZmljaWVudCIsIm92ZXJsYXkiLCJvcGFjaXR5IiwiZ2FtbWEiLCJibGVuZENoYW5uZWwiLCJvIiwib3ZlcmxheUNvbG9yIiwibGlnaHQiLCJkYXJrIiwiYWRkTGlnaHRPckRhcmsiLCJpbnRlbnQiLCJzaGFkZSIsInRvbmFsT2Zmc2V0IiwidG9uYWxPZmZzZXRMaWdodCIsInRvbmFsT2Zmc2V0RGFyayIsImdldERlZmF1bHRQcmltYXJ5IiwibW9kZSIsImdldERlZmF1bHRTZWNvbmRhcnkiLCJnZXREZWZhdWx0RXJyb3IiLCJnZXREZWZhdWx0SW5mbyIsImdldERlZmF1bHRTdWNjZXNzIiwiZ2V0RGVmYXVsdFdhcm5pbmciLCJjcmVhdGVQYWxldHRlIiwicGFsZXR0ZSIsImNvbnRyYXN0VGhyZXNob2xkIiwicHJpbWFyeSIsInNlY29uZGFyeSIsImluZm8iLCJzdWNjZXNzIiwiZ2V0Q29udHJhc3RUZXh0IiwiYXVnbWVudENvbG9yIiwibWFpblNoYWRlIiwibGlnaHRTaGFkZSIsImRhcmtTaGFkZSIsIm1vZGVzIiwicm91bmQiLCJjYXNlQWxsQ2FwcyIsImRlZmF1bHRGb250RmFtaWx5IiwiY3JlYXRlVHlwb2dyYXBoeSIsInR5cG9ncmFwaHkiLCJmb250RmFtaWx5IiwiZm9udFNpemUiLCJmb250V2VpZ2h0TGlnaHQiLCJmb250V2VpZ2h0UmVndWxhciIsImZvbnRXZWlnaHRNZWRpdW0iLCJmb250V2VpZ2h0Qm9sZCIsImh0bWxGb250U2l6ZSIsImFsbFZhcmlhbnRzIiwicHhUb1JlbTIiLCJjb2VmIiwicHhUb1JlbSIsImJ1aWxkVmFyaWFudCIsImZvbnRXZWlnaHQiLCJsaW5lSGVpZ2h0IiwibGV0dGVyU3BhY2luZyIsImNhc2luZyIsInNoYWRvd0tleVVtYnJhT3BhY2l0eSIsInNoYWRvd0tleVBlbnVtYnJhT3BhY2l0eSIsInNoYWRvd0FtYmllbnRTaGFkb3dPcGFjaXR5IiwiY3JlYXRlU2hhZG93IiwicHgiLCJzaGFkb3dzIiwiZWFzaW5nIiwiZHVyYXRpb24iLCJmb3JtYXRNcyIsIm1pbGxpc2Vjb25kcyIsImdldEF1dG9IZWlnaHREdXJhdGlvbiIsImNvbnN0YW50IiwiY3JlYXRlVHJhbnNpdGlvbnMiLCJpbnB1dFRyYW5zaXRpb25zIiwibWVyZ2VkRWFzaW5nIiwibWVyZ2VkRHVyYXRpb24iLCJkdXJhdGlvbk9wdGlvbiIsImVhc2luZ09wdGlvbiIsImFuaW1hdGVkUHJvcCIsInpJbmRleCIsIm1peGluc0lucHV0IiwidHJhbnNpdGlvbnNJbnB1dCIsInR5cG9ncmFwaHlJbnB1dCIsInN5c3RlbVRoZW1lIiwic3lzdGVtQ3JlYXRlVGhlbWUiLCJ1c2VUaGVtZVN5c3RlbSIsInN5c3RlbVVzZVRoZW1lUHJvcHMiLCJjcmVhdGVTdHlsZWRfMSIsIl9kZWZhdWx0IiwiX2V4dGVuZHMyIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyIiwiX3N0eWxlZEVuZ2luZSIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSQkMyIsIl9kZWVwbWVyZ2UiLCJyZXF1aXJlJCQ0IiwicmVxdWlyZSQkNSIsInJlcXVpcmUkJDYiLCJfY3JlYXRlVGhlbWUiLCJyZXF1aXJlJCQ3IiwiX3N0eWxlRnVuY3Rpb25TeCIsInJlcXVpcmUkJDgiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJnZXRPdmVybGF5QWxwaGEiLCJlbGV2YXRpb24iLCJhbHBoYVZhbHVlIiwiZ2V0U3ZnSWNvblV0aWxpdHlDbGFzcyIsIlN2Z0ljb25Sb290IiwiX3RoZW1lJHRyYW5zaXRpb25zIiwiX3RoZW1lJHRyYW5zaXRpb25zJGNyIiwiX3RoZW1lJHRyYW5zaXRpb25zMiIsIl90aGVtZSR0eXBvZ3JhcGh5IiwiX3RoZW1lJHR5cG9ncmFwaHkkcHhUIiwiX3RoZW1lJHR5cG9ncmFwaHkyIiwiX3RoZW1lJHR5cG9ncmFwaHkyJHB4IiwiX3RoZW1lJHR5cG9ncmFwaHkzIiwiX3RoZW1lJHR5cG9ncmFwaHkzJHB4IiwiX3BhbGV0dGUkb3duZXJTdGF0ZSRjIiwiX3BhbGV0dGUiLCJfcGFsZXR0ZTIiLCJfcGFsZXR0ZTMiLCJTdmdJY29uIiwiaHRtbENvbG9yIiwiaW5oZXJpdFZpZXdCb3giLCJ0aXRsZUFjY2VzcyIsInZpZXdCb3giLCJoYXNTdmdBc0NoaWxkIiwibW9yZSIsIl9qc3hzIiwiY3JlYXRlU3ZnSWNvbiIsImRpc3BsYXlOYW1lIiwiUmVhY3QubWVtbyIsInVuc3RhYmxlX0NsYXNzTmFtZUdlbmVyYXRvciIsImNyZWF0ZVVzZVRoZW1lUHJvcHMiLCJfc2V0UHJvdG90eXBlT2YiLCJfaW5oZXJpdHNMb29zZSIsInNldFByb3RvdHlwZU9mIiwiVHJhbnNpdGlvbkdyb3VwQ29udGV4dCIsImZvcmNlUmVmbG93IiwiVU5NT1VOVEVEIiwiRVhJVEVEIiwiRU5URVJJTkciLCJFTlRFUkVEIiwiRVhJVElORyIsIlRyYW5zaXRpb24iLCJfUmVhY3QkQ29tcG9uZW50IiwiY29udGV4dCIsInBhcmVudEdyb3VwIiwiYXBwZWFyIiwiaW5pdGlhbFN0YXR1cyIsInByZXZTdGF0ZSIsIm5leHRJbiIsInByZXZQcm9wcyIsIm5leHRTdGF0dXMiLCJleGl0IiwiZW50ZXIiLCJtb3VudGluZyIsIl90aGlzMiIsImFwcGVhcmluZyIsIm1heWJlTm9kZSIsIm1heWJlQXBwZWFyaW5nIiwidGltZW91dHMiLCJlbnRlclRpbWVvdXQiLCJfdGhpczMiLCJuZXh0U3RhdGUiLCJfdGhpczQiLCJhY3RpdmUiLCJkb2VzTm90SGF2ZVRpbWVvdXRPckxpc3RlbmVyIiwibWF5YmVOZXh0Q2FsbGJhY2siLCJfdGhpcyRwcm9wcyIsImNoaWxkUHJvcHMiLCJub29wIiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsImdldENoaWxkTWFwcGluZyIsIm1hcEZuIiwibWFwcGVyIiwiaXNWYWxpZEVsZW1lbnQiLCJDaGlsZHJlbiIsIm1lcmdlQ2hpbGRNYXBwaW5ncyIsImdldFZhbHVlRm9yS2V5IiwibmV4dEtleXNQZW5kaW5nIiwicGVuZGluZ0tleXMiLCJwcmV2S2V5IiwiY2hpbGRNYXBwaW5nIiwibmV4dEtleSIsInBlbmRpbmdOZXh0S2V5IiwiZ2V0UHJvcCIsImdldEluaXRpYWxDaGlsZE1hcHBpbmciLCJvbkV4aXRlZCIsImNsb25lRWxlbWVudCIsImdldE5leHRDaGlsZE1hcHBpbmciLCJuZXh0UHJvcHMiLCJwcmV2Q2hpbGRNYXBwaW5nIiwibmV4dENoaWxkTWFwcGluZyIsImhhc1ByZXYiLCJoYXNOZXh0IiwicHJldkNoaWxkIiwiaXNMZWF2aW5nIiwiVHJhbnNpdGlvbkdyb3VwIiwiaGFuZGxlRXhpdGVkIiwiZmlyc3RSZW5kZXIiLCJjdXJyZW50Q2hpbGRNYXBwaW5nIiwiY2hpbGRGYWN0b3J5IiwiY29udGV4dFZhbHVlIiwicmVmbG93IiwiZ2V0VHJhbnNpdGlvblByb3BzIiwiX3N0eWxlJHRyYW5zaXRpb25EdXJhIiwiX3N0eWxlJHRyYW5zaXRpb25UaW1pIiwiZ2V0Q29sbGFwc2VVdGlsaXR5Q2xhc3MiLCJvcmllbnRhdGlvbiIsIkNvbGxhcHNlUm9vdCIsIkNvbGxhcHNlV3JhcHBlciIsIkNvbGxhcHNlV3JhcHBlcklubmVyIiwiQ29sbGFwc2UiLCJhZGRFbmRMaXN0ZW5lciIsImNvbGxhcHNlZFNpemVQcm9wIiwiaW5Qcm9wIiwib25FbnRlciIsIm9uRW50ZXJlZCIsIm9uRW50ZXJpbmciLCJvbkV4aXQiLCJvbkV4aXRpbmciLCJUcmFuc2l0aW9uQ29tcG9uZW50IiwidGltZXIiLCJ3cmFwcGVyUmVmIiwiYXV0b1RyYW5zaXRpb25EdXJhdGlvbiIsImNvbGxhcHNlZFNpemUiLCJpc0hvcml6b250YWwiLCJub2RlUmVmIiwiaGFuZGxlUmVmIiwibm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayIsIm1heWJlSXNBcHBlYXJpbmciLCJnZXRXcmFwcGVyU2l6ZSIsImhhbmRsZUVudGVyIiwiaXNBcHBlYXJpbmciLCJoYW5kbGVFbnRlcmluZyIsIndyYXBwZXJTaXplIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwidHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uIiwiZHVyYXRpb24yIiwiaGFuZGxlRW50ZXJlZCIsImhhbmRsZUV4aXQiLCJoYW5kbGVFeGl0aW5nIiwiaGFuZGxlQWRkRW5kTGlzdGVuZXIiLCJnZXRQYXBlclV0aWxpdHlDbGFzcyIsInNxdWFyZSIsIlBhcGVyUm9vdCIsIl90aGVtZSR2YXJzJG92ZXJsYXlzIiwiUGFwZXIiLCJBY2NvcmRpb25Db250ZXh0IiwiaXNIb3N0Q29tcG9uZW50IiwiYXBwZW5kT3duZXJTdGF0ZSIsImVsZW1lbnRUeXBlIiwiZGVmYXVsdENvbnRleHRWYWx1ZSIsIkNsYXNzTmFtZUNvbmZpZ3VyYXRvckNvbnRleHQiLCJ1c2VDbGFzc05hbWVzT3ZlcnJpZGUiLCJkaXNhYmxlRGVmYXVsdENsYXNzZXMiLCJleHRyYWN0RXZlbnRIYW5kbGVycyIsImV4Y2x1ZGVLZXlzIiwicmVzb2x2ZUNvbXBvbmVudFByb3BzIiwiY29tcG9uZW50UHJvcHMiLCJzbG90U3RhdGUiLCJvbWl0RXZlbnRIYW5kbGVycyIsIm1lcmdlU2xvdFByb3BzIiwicGFyYW1ldGVycyIsImdldFNsb3RQcm9wcyIsImFkZGl0aW9uYWxQcm9wcyIsImV4dGVybmFsU2xvdFByb3BzIiwiZXh0ZXJuYWxGb3J3YXJkZWRQcm9wcyIsImpvaW5lZENsYXNzZXMiLCJtZXJnZWRTdHlsZSIsImV2ZW50SGFuZGxlcnMiLCJjb21wb25lbnRzUHJvcHNXaXRob3V0RXZlbnRIYW5kbGVycyIsIm90aGVyUHJvcHNXaXRob3V0RXZlbnRIYW5kbGVycyIsImludGVybmFsU2xvdFByb3BzIiwidXNlU2xvdFByb3BzIiwiX3BhcmFtZXRlcnMkYWRkaXRpb25hIiwic2tpcFJlc29sdmluZ1Nsb3RQcm9wcyIsInJlc29sdmVkQ29tcG9uZW50c1Byb3BzIiwiaW50ZXJuYWxSZWYiLCJ1c2VTbG90IiwiaW5pdGlhbEVsZW1lbnRUeXBlIiwiZ2V0U2xvdE93bmVyU3RhdGUiLCJpbnRlcm5hbEZvcndhcmRlZFByb3BzIiwidXNlU2xvdFByb3BzUGFyYW1zIiwicm9vdENvbXBvbmVudCIsIl9tZXJnZVNsb3RQcm9wcyIsInNsb3RDb21wb25lbnQiLCJzbG90T3duZXJTdGF0ZSIsImZpbmFsT3duZXJTdGF0ZSIsIkxlYWZDb21wb25lbnQiLCJnZXRBY2NvcmRpb25VdGlsaXR5Q2xhc3MiLCJhY2NvcmRpb25DbGFzc2VzIiwiZXhwYW5kZWQiLCJkaXNhYmxlZCIsImRpc2FibGVHdXR0ZXJzIiwiQWNjb3JkaW9uUm9vdCIsIkFjY29yZGlvbiIsImNoaWxkcmVuUHJvcCIsImRlZmF1bHRFeHBhbmRlZCIsImV4cGFuZGVkUHJvcCIsIm9uQ2hhbmdlIiwiVHJhbnNpdGlvbkNvbXBvbmVudFByb3AiLCJUcmFuc2l0aW9uUHJvcHNQcm9wIiwic2V0RXhwYW5kZWRTdGF0ZSIsImhhbmRsZUNoYW5nZSIsInN1bW1hcnkiLCJiYWNrd2FyZENvbXBhdGlibGVTbG90cyIsImJhY2t3YXJkQ29tcGF0aWJsZVNsb3RQcm9wcyIsIlRyYW5zaXRpb25TbG90IiwidHJhbnNpdGlvblByb3BzIiwiZ2V0QWNjb3JkaW9uRGV0YWlsc1V0aWxpdHlDbGFzcyIsIkFjY29yZGlvbkRldGFpbHNSb290IiwiQWNjb3JkaW9uRGV0YWlscyIsIlJpcHBsZSIsInB1bHNhdGUiLCJyaXBwbGVYIiwicmlwcGxlWSIsInJpcHBsZVNpemUiLCJsZWF2aW5nIiwic2V0TGVhdmluZyIsInJpcHBsZUNsYXNzTmFtZSIsInJpcHBsZVN0eWxlcyIsImNoaWxkQ2xhc3NOYW1lIiwidGltZW91dElkIiwidG91Y2hSaXBwbGVDbGFzc2VzIiwiX3QiLCJfdDIiLCJfdDMiLCJfdDQiLCJEVVJBVElPTiIsIkRFTEFZX1JJUFBMRSIsImVudGVyS2V5ZnJhbWUiLCJleGl0S2V5ZnJhbWUiLCJwdWxzYXRlS2V5ZnJhbWUiLCJUb3VjaFJpcHBsZVJvb3QiLCJUb3VjaFJpcHBsZVJpcHBsZSIsIlRvdWNoUmlwcGxlIiwiY2VudGVyUHJvcCIsInJpcHBsZXMiLCJzZXRSaXBwbGVzIiwicmlwcGxlQ2FsbGJhY2siLCJpZ25vcmluZ01vdXNlRG93biIsInN0YXJ0VGltZXIiLCJzdGFydFRpbWVyQ29tbWl0Iiwic3RhcnRDb21taXQiLCJvbGRSaXBwbGVzIiwiY2VudGVyIiwiZmFrZUVsZW1lbnQiLCJyZWN0IiwiY2xpZW50WCIsImNsaWVudFkiLCJzaXplWCIsInNpemVZIiwic3RvcCIsIlJlYWN0LnVzZUltcGVyYXRpdmVIYW5kbGUiLCJnZXRCdXR0b25CYXNlVXRpbGl0eUNsYXNzIiwiYnV0dG9uQmFzZUNsYXNzZXMiLCJmb2N1c1Zpc2libGUiLCJmb2N1c1Zpc2libGVDbGFzc05hbWUiLCJjb21wb3NlZENsYXNzZXMiLCJCdXR0b25CYXNlUm9vdCIsIkJ1dHRvbkJhc2UiLCJjZW50ZXJSaXBwbGUiLCJkaXNhYmxlUmlwcGxlIiwiZGlzYWJsZVRvdWNoUmlwcGxlIiwiZm9jdXNSaXBwbGUiLCJMaW5rQ29tcG9uZW50Iiwib25CbHVyIiwib25Db250ZXh0TWVudSIsIm9uRHJhZ0xlYXZlIiwib25Gb2N1cyIsIm9uRm9jdXNWaXNpYmxlIiwib25LZXlEb3duIiwib25LZXlVcCIsIm9uTW91c2VEb3duIiwib25Nb3VzZUxlYXZlIiwib25Nb3VzZVVwIiwib25Ub3VjaEVuZCIsIm9uVG91Y2hNb3ZlIiwib25Ub3VjaFN0YXJ0IiwidGFiSW5kZXgiLCJUb3VjaFJpcHBsZVByb3BzIiwidG91Y2hSaXBwbGVSZWYiLCJidXR0b25SZWYiLCJyaXBwbGVSZWYiLCJoYW5kbGVSaXBwbGVSZWYiLCJmb2N1c1Zpc2libGVSZWYiLCJzZXRGb2N1c1Zpc2libGUiLCJtb3VudGVkU3RhdGUiLCJzZXRNb3VudGVkU3RhdGUiLCJlbmFibGVUb3VjaFJpcHBsZSIsInVzZVJpcHBsZUhhbmRsZXIiLCJyaXBwbGVBY3Rpb24iLCJldmVudENhbGxiYWNrIiwic2tpcFJpcHBsZUFjdGlvbiIsImhhbmRsZU1vdXNlRG93biIsImhhbmRsZUNvbnRleHRNZW51IiwiaGFuZGxlRHJhZ0xlYXZlIiwiaGFuZGxlTW91c2VVcCIsImhhbmRsZU1vdXNlTGVhdmUiLCJoYW5kbGVUb3VjaFN0YXJ0IiwiaGFuZGxlVG91Y2hFbmQiLCJoYW5kbGVUb3VjaE1vdmUiLCJoYW5kbGVCbHVyIiwiaGFuZGxlRm9jdXMiLCJpc05vbk5hdGl2ZUJ1dHRvbiIsImJ1dHRvbiIsImtleWRvd25SZWYiLCJoYW5kbGVLZXlVcCIsIkNvbXBvbmVudFByb3AiLCJidXR0b25Qcm9wcyIsImdldEFjY29yZGlvblN1bW1hcnlVdGlsaXR5Q2xhc3MiLCJhY2NvcmRpb25TdW1tYXJ5Q2xhc3NlcyIsIkFjY29yZGlvblN1bW1hcnlSb290IiwiQWNjb3JkaW9uU3VtbWFyeUNvbnRlbnQiLCJBY2NvcmRpb25TdW1tYXJ5RXhwYW5kSWNvbldyYXBwZXIiLCJBY2NvcmRpb25TdW1tYXJ5IiwiZXhwYW5kSWNvbiIsInRvZ2dsZSIsImdldEFsZXJ0VXRpbGl0eUNsYXNzIiwiYWxlcnRDbGFzc2VzIiwiZ2V0SWNvbkJ1dHRvblV0aWxpdHlDbGFzcyIsImljb25CdXR0b25DbGFzc2VzIiwiZWRnZSIsIkljb25CdXR0b25Sb290IiwiSWNvbkJ1dHRvbiIsImRpc2FibGVGb2N1c1JpcHBsZSIsIlN1Y2Nlc3NPdXRsaW5lZEljb24iLCJSZXBvcnRQcm9ibGVtT3V0bGluZWRJY29uIiwiRXJyb3JPdXRsaW5lSWNvbiIsIkluZm9PdXRsaW5lZEljb24iLCJDbGVhckljb24iLCJzZXZlcml0eSIsIkFsZXJ0Um9vdCIsImdldENvbG9yIiwiZ2V0QmFja2dyb3VuZENvbG9yIiwiQWxlcnRJY29uIiwiQWxlcnRNZXNzYWdlIiwiQWxlcnRBY3Rpb24iLCJkZWZhdWx0SWNvbk1hcHBpbmciLCJBbGVydCIsImNsb3NlVGV4dCIsImNvbXBvbmVudHMiLCJjb21wb25lbnRzUHJvcHMiLCJpY29uIiwiaWNvbk1hcHBpbmciLCJvbkNsb3NlIiwicm9sZSIsIkNsb3NlQnV0dG9uU2xvdCIsImNsb3NlQnV0dG9uUHJvcHMiLCJDbG9zZUljb25TbG90IiwiY2xvc2VJY29uUHJvcHMiLCJDbG9zZUljb24iLCJnZXRUeXBvZ3JhcGh5VXRpbGl0eUNsYXNzIiwiYWxpZ24iLCJndXR0ZXJCb3R0b20iLCJub1dyYXAiLCJwYXJhZ3JhcGgiLCJUeXBvZ3JhcGh5Um9vdCIsImRlZmF1bHRWYXJpYW50TWFwcGluZyIsImNvbG9yVHJhbnNmb3JtYXRpb25zIiwidHJhbnNmb3JtRGVwcmVjYXRlZENvbG9ycyIsIlR5cG9ncmFwaHkiLCJ2YXJpYW50TWFwcGluZyIsIkdMT0JBTF9DTEFTU19QUkVGSVgiLCJidWlsZFN0YXRlQ2xhc3MiLCJidWlsZFNsb3RDbGFzcyIsImNhbmRpZGF0ZXNTZWxlY3RvciIsImdldFRhYkluZGV4IiwidGFiaW5kZXhBdHRyIiwiaXNOb25UYWJiYWJsZVJhZGlvIiwiZ2V0UmFkaW8iLCJyb3ZpbmciLCJpc05vZGVNYXRjaGluZ1NlbGVjdG9yRm9jdXNhYmxlIiwiZGVmYXVsdEdldFRhYmJhYmxlIiwicmVndWxhclRhYk5vZGVzIiwib3JkZXJlZFRhYk5vZGVzIiwibm9kZVRhYkluZGV4IiwiZGVmYXVsdElzRW5hYmxlZCIsIkZvY3VzVHJhcCIsImRpc2FibGVBdXRvRm9jdXMiLCJkaXNhYmxlRW5mb3JjZUZvY3VzIiwiZGlzYWJsZVJlc3RvcmVGb2N1cyIsImdldFRhYmJhYmxlIiwiaXNFbmFibGVkIiwib3BlbiIsImlnbm9yZU5leHRFbmZvcmNlRm9jdXMiLCJzZW50aW5lbFN0YXJ0Iiwic2VudGluZWxFbmQiLCJub2RlVG9SZXN0b3JlIiwicmVhY3RGb2N1c0V2ZW50VGFyZ2V0IiwiYWN0aXZhdGVkIiwicm9vdFJlZiIsImxhc3RLZXlkb3duIiwibG9vcEZvY3VzIiwibmF0aXZlRXZlbnQiLCJjb250YWluIiwicm9vdEVsZW1lbnQiLCJ0YWJiYWJsZSIsIl9sYXN0S2V5ZG93biRjdXJyZW50IiwiX2xhc3RLZXlkb3duJGN1cnJlbnQyIiwiaXNTaGlmdFRhYiIsImZvY3VzTmV4dCIsImZvY3VzUHJldmlvdXMiLCJpbnRlcnZhbCIsImNoaWxkcmVuUHJvcHNIYW5kbGVyIiwiaGFuZGxlRm9jdXNTZW50aW5lbCIsImdldENvbnRhaW5lciIsIlBvcnRhbCIsImZvcndhcmRlZFJlZiIsImRpc2FibGVQb3J0YWwiLCJtb3VudE5vZGUiLCJzZXRNb3VudE5vZGUiLCJSZWFjdERPTS5jcmVhdGVQb3J0YWwiLCJpc092ZXJmbG93aW5nIiwiYXJpYUhpZGRlbiIsInNob3ciLCJnZXRQYWRkaW5nUmlnaHQiLCJpc0FyaWFIaWRkZW5Gb3JiaWRkZW5PbkVsZW1lbnQiLCJpc0ZvcmJpZGRlblRhZ05hbWUiLCJpc0lucHV0SGlkZGVuIiwiYXJpYUhpZGRlblNpYmxpbmdzIiwibW91bnRFbGVtZW50IiwiY3VycmVudEVsZW1lbnQiLCJlbGVtZW50c1RvRXhjbHVkZSIsImJsYWNrbGlzdCIsImlzTm90RXhjbHVkZWRFbGVtZW50IiwiaXNOb3RGb3JiaWRkZW5FbGVtZW50IiwiZmluZEluZGV4T2YiLCJpdGVtcyIsImhhbmRsZUNvbnRhaW5lciIsImNvbnRhaW5lckluZm8iLCJyZXN0b3JlU3R5bGUiLCJzY3JvbGxiYXJTaXplIiwic2Nyb2xsQ29udGFpbmVyIiwiY29udGFpbmVyV2luZG93IiwiZ2V0SGlkZGVuU2libGluZ3MiLCJoaWRkZW5TaWJsaW5ncyIsIk1vZGFsTWFuYWdlciIsIm1vZGFsIiwibW9kYWxJbmRleCIsImNvbnRhaW5lckluZGV4IiwiYXJpYUhpZGRlblN0YXRlIiwibmV4dFRvcCIsImdldEhhc1RyYW5zaXRpb24iLCJkZWZhdWx0TWFuYWdlciIsInVzZU1vZGFsIiwiZGlzYWJsZUVzY2FwZUtleURvd24iLCJkaXNhYmxlU2Nyb2xsTG9jayIsIm1hbmFnZXIiLCJjbG9zZUFmdGVyVHJhbnNpdGlvbiIsIm9uVHJhbnNpdGlvbkVudGVyIiwib25UcmFuc2l0aW9uRXhpdGVkIiwibW91bnROb2RlUmVmIiwibW9kYWxSZWYiLCJleGl0ZWQiLCJzZXRFeGl0ZWQiLCJoYXNUcmFuc2l0aW9uIiwiYXJpYUhpZGRlblByb3AiLCJnZXREb2MiLCJnZXRNb2RhbCIsImhhbmRsZU1vdW50ZWQiLCJoYW5kbGVPcGVuIiwicmVzb2x2ZWRDb250YWluZXIiLCJpc1RvcE1vZGFsIiwiaGFuZGxlUG9ydGFsUmVmIiwiaGFuZGxlQ2xvc2UiLCJjcmVhdGVIYW5kbGVLZXlEb3duIiwib3RoZXJIYW5kbGVycyIsIl9vdGhlckhhbmRsZXJzJG9uS2V5RCIsImNyZWF0ZUhhbmRsZUJhY2tkcm9wQ2xpY2siLCJfb3RoZXJIYW5kbGVycyRvbkNsaWMiLCJwcm9wc0V2ZW50SGFuZGxlcnMiLCJleHRlcm5hbEV2ZW50SGFuZGxlcnMiLCJ0b3AiLCJib3R0b20iLCJyaWdodCIsImxlZnQiLCJhdXRvIiwiYmFzZVBsYWNlbWVudHMiLCJjbGlwcGluZ1BhcmVudHMiLCJ2aWV3cG9ydCIsInBvcHBlciIsInZhcmlhdGlvblBsYWNlbWVudHMiLCJwbGFjZW1lbnQiLCJwbGFjZW1lbnRzIiwiYmVmb3JlUmVhZCIsInJlYWQiLCJhZnRlclJlYWQiLCJiZWZvcmVNYWluIiwibWFpbiIsImFmdGVyTWFpbiIsImJlZm9yZVdyaXRlIiwid3JpdGUiLCJhZnRlcldyaXRlIiwibW9kaWZpZXJQaGFzZXMiLCJnZXROb2RlTmFtZSIsImdldFdpbmRvdyIsImlzRWxlbWVudCIsIk93bkVsZW1lbnQiLCJpc0hUTUxFbGVtZW50IiwiaXNTaGFkb3dSb290IiwiYXR0cmlidXRlcyIsImVmZmVjdCIsImluaXRpYWxTdHlsZXMiLCJzdHlsZVByb3BlcnRpZXMiLCJhdHRyaWJ1dGUiLCJhcHBseVN0eWxlcyQxIiwiZ2V0QmFzZVBsYWNlbWVudCIsImdldFVBU3RyaW5nIiwidWFEYXRhIiwiaXNMYXlvdXRWaWV3cG9ydCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImluY2x1ZGVTY2FsZSIsImlzRml4ZWRTdHJhdGVneSIsImNsaWVudFJlY3QiLCJzY2FsZVgiLCJzY2FsZVkiLCJ2aXN1YWxWaWV3cG9ydCIsImFkZFZpc3VhbE9mZnNldHMiLCJnZXRMYXlvdXRSZWN0IiwiY29udGFpbnMiLCJyb290Tm9kZSIsImdldENvbXB1dGVkU3R5bGUiLCJpc1RhYmxlRWxlbWVudCIsImdldERvY3VtZW50RWxlbWVudCIsImdldFBhcmVudE5vZGUiLCJnZXRUcnVlT2Zmc2V0UGFyZW50IiwiZ2V0Q29udGFpbmluZ0Jsb2NrIiwiaXNGaXJlZm94IiwiaXNJRSIsImVsZW1lbnRDc3MiLCJjdXJyZW50Tm9kZSIsImdldE9mZnNldFBhcmVudCIsIm9mZnNldFBhcmVudCIsImdldE1haW5BeGlzRnJvbVBsYWNlbWVudCIsIndpdGhpbiIsIm1hdGhNYXgiLCJtYXRoTWluIiwid2l0aGluTWF4Q2xhbXAiLCJnZXRGcmVzaFNpZGVPYmplY3QiLCJtZXJnZVBhZGRpbmdPYmplY3QiLCJwYWRkaW5nT2JqZWN0IiwiZXhwYW5kVG9IYXNoTWFwIiwiaGFzaE1hcCIsInRvUGFkZGluZ09iamVjdCIsImFycm93IiwiX3N0YXRlJG1vZGlmaWVyc0RhdGEkIiwiYXJyb3dFbGVtZW50IiwicG9wcGVyT2Zmc2V0cyIsImJhc2VQbGFjZW1lbnQiLCJheGlzIiwiaXNWZXJ0aWNhbCIsImFycm93UmVjdCIsIm1pblByb3AiLCJtYXhQcm9wIiwiZW5kRGlmZiIsInN0YXJ0RGlmZiIsImFycm93T2Zmc2V0UGFyZW50IiwiY2xpZW50U2l6ZSIsImNlbnRlclRvUmVmZXJlbmNlIiwiYXhpc1Byb3AiLCJfb3B0aW9ucyRlbGVtZW50IiwiYXJyb3ckMSIsImdldFZhcmlhdGlvbiIsInVuc2V0U2lkZXMiLCJyb3VuZE9mZnNldHNCeURQUiIsIndpbiIsImRwciIsIm1hcFRvU3R5bGVzIiwiX09iamVjdCRhc3NpZ24yIiwicG9wcGVyUmVjdCIsInZhcmlhdGlvbiIsIm9mZnNldHMiLCJncHVBY2NlbGVyYXRpb24iLCJhZGFwdGl2ZSIsInJvdW5kT2Zmc2V0cyIsImlzRml4ZWQiLCJfb2Zmc2V0cyR4IiwiX29mZnNldHMkeSIsImhhc1giLCJoYXNZIiwic2lkZVgiLCJzaWRlWSIsImhlaWdodFByb3AiLCJ3aWR0aFByb3AiLCJvZmZzZXRZIiwib2Zmc2V0WCIsImNvbW1vblN0eWxlcyIsIl9PYmplY3QkYXNzaWduIiwiY29tcHV0ZVN0eWxlcyIsIl9vcHRpb25zJGdwdUFjY2VsZXJhdCIsIl9vcHRpb25zJGFkYXB0aXZlIiwiX29wdGlvbnMkcm91bmRPZmZzZXRzIiwiY29tcHV0ZVN0eWxlcyQxIiwicGFzc2l2ZSIsIl9vcHRpb25zJHNjcm9sbCIsInNjcm9sbCIsIl9vcHRpb25zJHJlc2l6ZSIsInJlc2l6ZSIsInNjcm9sbFBhcmVudHMiLCJzY3JvbGxQYXJlbnQiLCJldmVudExpc3RlbmVycyIsImdldE9wcG9zaXRlUGxhY2VtZW50IiwibWF0Y2hlZCIsImdldE9wcG9zaXRlVmFyaWF0aW9uUGxhY2VtZW50IiwiZ2V0V2luZG93U2Nyb2xsIiwic2Nyb2xsTGVmdCIsInNjcm9sbFRvcCIsImdldFdpbmRvd1Njcm9sbEJhclgiLCJnZXRWaWV3cG9ydFJlY3QiLCJzdHJhdGVneSIsImh0bWwiLCJsYXlvdXRWaWV3cG9ydCIsImdldERvY3VtZW50UmVjdCIsIl9lbGVtZW50JG93bmVyRG9jdW1lbiIsIndpblNjcm9sbCIsImJvZHkiLCJpc1Njcm9sbFBhcmVudCIsIl9nZXRDb21wdXRlZFN0eWxlIiwib3ZlcmZsb3ciLCJvdmVyZmxvd1giLCJvdmVyZmxvd1kiLCJnZXRTY3JvbGxQYXJlbnQiLCJsaXN0U2Nyb2xsUGFyZW50cyIsImxpc3QiLCJpc0JvZHkiLCJ1cGRhdGVkTGlzdCIsInJlY3RUb0NsaWVudFJlY3QiLCJnZXRJbm5lckJvdW5kaW5nQ2xpZW50UmVjdCIsImdldENsaWVudFJlY3RGcm9tTWl4ZWRUeXBlIiwiY2xpcHBpbmdQYXJlbnQiLCJnZXRDbGlwcGluZ1BhcmVudHMiLCJjYW5Fc2NhcGVDbGlwcGluZyIsImNsaXBwZXJFbGVtZW50IiwiZ2V0Q2xpcHBpbmdSZWN0IiwiYm91bmRhcnkiLCJyb290Qm91bmRhcnkiLCJtYWluQ2xpcHBpbmdQYXJlbnRzIiwiZmlyc3RDbGlwcGluZ1BhcmVudCIsImNsaXBwaW5nUmVjdCIsImFjY1JlY3QiLCJjb21wdXRlT2Zmc2V0cyIsImNvbW1vblgiLCJjb21tb25ZIiwibWFpbkF4aXMiLCJkZXRlY3RPdmVyZmxvdyIsIl9vcHRpb25zIiwiX29wdGlvbnMkcGxhY2VtZW50IiwiX29wdGlvbnMkc3RyYXRlZ3kiLCJfb3B0aW9ucyRib3VuZGFyeSIsIl9vcHRpb25zJHJvb3RCb3VuZGFyeSIsIl9vcHRpb25zJGVsZW1lbnRDb250ZSIsImVsZW1lbnRDb250ZXh0IiwiX29wdGlvbnMkYWx0Qm91bmRhcnkiLCJhbHRCb3VuZGFyeSIsIl9vcHRpb25zJHBhZGRpbmciLCJhbHRDb250ZXh0IiwiY2xpcHBpbmdDbGllbnRSZWN0IiwicmVmZXJlbmNlQ2xpZW50UmVjdCIsInBvcHBlckNsaWVudFJlY3QiLCJlbGVtZW50Q2xpZW50UmVjdCIsIm92ZXJmbG93T2Zmc2V0cyIsIm9mZnNldERhdGEiLCJtdWx0aXBseSIsImNvbXB1dGVBdXRvUGxhY2VtZW50IiwiZmxpcFZhcmlhdGlvbnMiLCJfb3B0aW9ucyRhbGxvd2VkQXV0b1AiLCJhbGxvd2VkQXV0b1BsYWNlbWVudHMiLCJhbGxQbGFjZW1lbnRzIiwiYWxsb3dlZFBsYWNlbWVudHMiLCJvdmVyZmxvd3MiLCJnZXRFeHBhbmRlZEZhbGxiYWNrUGxhY2VtZW50cyIsIm9wcG9zaXRlUGxhY2VtZW50IiwiZmxpcCIsIl9vcHRpb25zJG1haW5BeGlzIiwiY2hlY2tNYWluQXhpcyIsIl9vcHRpb25zJGFsdEF4aXMiLCJjaGVja0FsdEF4aXMiLCJzcGVjaWZpZWRGYWxsYmFja1BsYWNlbWVudHMiLCJfb3B0aW9ucyRmbGlwVmFyaWF0aW8iLCJwcmVmZXJyZWRQbGFjZW1lbnQiLCJpc0Jhc2VQbGFjZW1lbnQiLCJmYWxsYmFja1BsYWNlbWVudHMiLCJyZWZlcmVuY2VSZWN0IiwiY2hlY2tzTWFwIiwibWFrZUZhbGxiYWNrQ2hlY2tzIiwiZmlyc3RGaXR0aW5nUGxhY2VtZW50IiwiX2Jhc2VQbGFjZW1lbnQiLCJpc1N0YXJ0VmFyaWF0aW9uIiwibWFpblZhcmlhdGlvblNpZGUiLCJhbHRWYXJpYXRpb25TaWRlIiwiY2hlY2tzIiwiY2hlY2siLCJudW1iZXJPZkNoZWNrcyIsIl9sb29wIiwiZml0dGluZ1BsYWNlbWVudCIsIl9yZXQiLCJmbGlwJDEiLCJnZXRTaWRlT2Zmc2V0cyIsInByZXZlbnRlZE9mZnNldHMiLCJpc0FueVNpZGVGdWxseUNsaXBwZWQiLCJzaWRlIiwiaGlkZSIsInJlZmVyZW5jZU92ZXJmbG93IiwicG9wcGVyQWx0T3ZlcmZsb3ciLCJyZWZlcmVuY2VDbGlwcGluZ09mZnNldHMiLCJwb3BwZXJFc2NhcGVPZmZzZXRzIiwiaXNSZWZlcmVuY2VIaWRkZW4iLCJoYXNQb3BwZXJFc2NhcGVkIiwiaGlkZSQxIiwiZGlzdGFuY2VBbmRTa2lkZGluZ1RvWFkiLCJyZWN0cyIsImludmVydERpc3RhbmNlIiwic2tpZGRpbmciLCJkaXN0YW5jZSIsIl9vcHRpb25zJG9mZnNldCIsIl9kYXRhJHN0YXRlJHBsYWNlbWVudCIsIm9mZnNldCQxIiwicG9wcGVyT2Zmc2V0cyQxIiwiZ2V0QWx0QXhpcyIsInByZXZlbnRPdmVyZmxvdyIsIl9vcHRpb25zJHRldGhlciIsInRldGhlciIsIl9vcHRpb25zJHRldGhlck9mZnNldCIsInRldGhlck9mZnNldCIsImFsdEF4aXMiLCJ0ZXRoZXJPZmZzZXRWYWx1ZSIsIm5vcm1hbGl6ZWRUZXRoZXJPZmZzZXRWYWx1ZSIsIm9mZnNldE1vZGlmaWVyU3RhdGUiLCJfb2Zmc2V0TW9kaWZpZXJTdGF0ZSQiLCJtYWluU2lkZSIsImFsdFNpZGUiLCJhZGRpdGl2ZSIsIm1pbkxlbiIsIm1heExlbiIsImFycm93UGFkZGluZ09iamVjdCIsImFycm93UGFkZGluZ01pbiIsImFycm93UGFkZGluZ01heCIsImFycm93TGVuIiwibWluT2Zmc2V0IiwibWF4T2Zmc2V0IiwiY2xpZW50T2Zmc2V0Iiwib2Zmc2V0TW9kaWZpZXJWYWx1ZSIsInRldGhlck1pbiIsInRldGhlck1heCIsInByZXZlbnRlZE9mZnNldCIsIl9vZmZzZXRNb2RpZmllclN0YXRlJDIiLCJfbWFpblNpZGUiLCJfYWx0U2lkZSIsIl9vZmZzZXQiLCJfbWluIiwiX21heCIsImlzT3JpZ2luU2lkZSIsIl9vZmZzZXRNb2RpZmllclZhbHVlIiwiX3RldGhlck1pbiIsIl90ZXRoZXJNYXgiLCJfcHJldmVudGVkT2Zmc2V0IiwicHJldmVudE92ZXJmbG93JDEiLCJnZXRIVE1MRWxlbWVudFNjcm9sbCIsImdldE5vZGVTY3JvbGwiLCJpc0VsZW1lbnRTY2FsZWQiLCJnZXRDb21wb3NpdGVSZWN0IiwiZWxlbWVudE9yVmlydHVhbEVsZW1lbnQiLCJpc09mZnNldFBhcmVudEFuRWxlbWVudCIsIm9mZnNldFBhcmVudElzU2NhbGVkIiwiZG9jdW1lbnRFbGVtZW50Iiwib3JkZXIiLCJtb2RpZmllcnMiLCJtYXAiLCJ2aXNpdGVkIiwibW9kaWZpZXIiLCJzb3J0IiwicmVxdWlyZXMiLCJkZXAiLCJkZXBNb2RpZmllciIsIm9yZGVyTW9kaWZpZXJzIiwib3JkZXJlZE1vZGlmaWVycyIsInBoYXNlIiwicGVuZGluZyIsIm1lcmdlQnlOYW1lIiwibWVyZ2VkIiwiZXhpc3RpbmciLCJERUZBVUxUX09QVElPTlMiLCJhcmVWYWxpZEVsZW1lbnRzIiwicG9wcGVyR2VuZXJhdG9yIiwiZ2VuZXJhdG9yT3B0aW9ucyIsIl9nZW5lcmF0b3JPcHRpb25zIiwiX2dlbmVyYXRvck9wdGlvbnMkZGVmIiwiZGVmYXVsdE1vZGlmaWVycyIsIl9nZW5lcmF0b3JPcHRpb25zJGRlZjIiLCJkZWZhdWx0T3B0aW9ucyIsImVmZmVjdENsZWFudXBGbnMiLCJpc0Rlc3Ryb3llZCIsInNldE9wdGlvbnNBY3Rpb24iLCJjbGVhbnVwTW9kaWZpZXJFZmZlY3RzIiwicnVuTW9kaWZpZXJFZmZlY3RzIiwiX3N0YXRlJGVsZW1lbnRzIiwiX3N0YXRlJG9yZGVyZWRNb2RpZmllIiwiX3N0YXRlJG9yZGVyZWRNb2RpZmllMiIsIl9yZWYkb3B0aW9ucyIsImNsZWFudXBGbiIsIm5vb3BGbiIsImNyZWF0ZVBvcHBlciIsIkNPTVBPTkVOVF9OQU1FIiwiZ2V0UG9wcGVyVXRpbGl0eUNsYXNzIiwiZmxpcFBsYWNlbWVudCIsInJlc29sdmVBbmNob3JFbCIsImFuY2hvckVsIiwiZGVmYXVsdFBvcHBlck9wdGlvbnMiLCJQb3BwZXJUb29sdGlwIiwiX3Nsb3RzJHJvb3QiLCJpbml0aWFsUGxhY2VtZW50IiwicG9wcGVyT3B0aW9ucyIsInBvcHBlclJlZlByb3AiLCJUcmFuc2l0aW9uUHJvcHMiLCJ0b29sdGlwUmVmIiwib3duUmVmIiwicG9wcGVyUmVmIiwiaGFuZGxlUG9wcGVyUmVmIiwiaGFuZGxlUG9wcGVyUmVmUmVmIiwicnRsUGxhY2VtZW50Iiwic2V0UGxhY2VtZW50IiwicmVzb2x2ZWRBbmNob3JFbGVtZW50Iiwic2V0UmVzb2x2ZWRBbmNob3JFbGVtZW50IiwiaGFuZGxlUG9wcGVyVXBkYXRlIiwicG9wcGVyTW9kaWZpZXJzIiwiUm9vdCIsInJvb3RQcm9wcyIsIlBvcHBlciIsImNvbnRhaW5lclByb3AiLCJrZWVwTW91bnRlZCIsInJlc29sdmVkQW5jaG9yRWwiLCJkaXNwbGF5IiwiVGV4dGFyZWFBdXRvc2l6ZSIsIm1heFJvd3MiLCJtaW5Sb3dzIiwiaW5wdXRSZWYiLCJzaGFkb3dSZWYiLCJjYWxjdWxhdGVUZXh0YXJlYVN0eWxlcyIsImNvbXB1dGVkU3R5bGUiLCJpbnB1dFNoYWxsb3ciLCJpbm5lckhlaWdodCIsInNpbmdsZVJvd0hlaWdodCIsIm91dGVySGVpZ2h0Iiwib3V0ZXJIZWlnaHRTdHlsZSIsIm92ZXJmbG93aW5nIiwic3luY0hlaWdodCIsInRleHRhcmVhU3R5bGVzIiwiaGFuZGxlUmVzaXplIiwickFGIiwiZGVib3VuY2VIYW5kbGVSZXNpemUiLCJyZXNpemVPYnNlcnZlciIsImRlZmF1bHRfMSIsIlBvcHBlclJvb3QiLCJCYXNlUG9wcGVyIiwiUm9vdENvbXBvbmVudCIsImZvcm1Db250cm9sU3RhdGUiLCJzdGF0ZXMiLCJtdWlGb3JtQ29udHJvbCIsIkZvcm1Db250cm9sQ29udGV4dCIsInVzZUZvcm1Db250cm9sIiwiU3lzdGVtR2xvYmFsU3R5bGVzIiwiaGFzVmFsdWUiLCJpc0ZpbGxlZCIsIlNTUiIsImlzQWRvcm5lZFN0YXJ0IiwiZ2V0SW5wdXRCYXNlVXRpbGl0eUNsYXNzIiwiaW5wdXRCYXNlQ2xhc3NlcyIsInJvb3RPdmVycmlkZXNSZXNvbHZlciIsImlucHV0T3ZlcnJpZGVzUmVzb2x2ZXIiLCJlbmRBZG9ybm1lbnQiLCJmb2N1c2VkIiwiZm9ybUNvbnRyb2wiLCJmdWxsV2lkdGgiLCJoaWRkZW5MYWJlbCIsIm11bHRpbGluZSIsInJlYWRPbmx5Iiwic3RhcnRBZG9ybm1lbnQiLCJJbnB1dEJhc2VSb290IiwiSW5wdXRCYXNlQ29tcG9uZW50IiwicGxhY2Vob2xkZXIiLCJwbGFjZWhvbGRlckhpZGRlbiIsInBsYWNlaG9sZGVyVmlzaWJsZSIsImlucHV0R2xvYmFsU3R5bGVzIiwiSW5wdXRCYXNlIiwiX3Nsb3RQcm9wcyRpbnB1dCIsImFyaWFEZXNjcmliZWRieSIsImF1dG9Db21wbGV0ZSIsImF1dG9Gb2N1cyIsImRpc2FibGVJbmplY3RpbmdHbG9iYWxTdHlsZXMiLCJpbnB1dENvbXBvbmVudCIsImlucHV0UHJvcHNQcm9wIiwiaW5wdXRSZWZQcm9wIiwicmVuZGVyU3VmZml4Iiwicm93cyIsInZhbHVlUHJvcCIsImhhbmRsZUlucHV0UmVmV2FybmluZyIsImhhbmRsZUlucHV0UmVmIiwic2V0Rm9jdXNlZCIsImZjcyIsIm9uRmlsbGVkIiwib25FbXB0eSIsImNoZWNrRGlydHkiLCJJbnB1dENvbXBvbmVudCIsImlucHV0UHJvcHMiLCJoYW5kbGVBdXRvRmlsbCIsIklucHV0IiwiZ2V0SW5wdXRVdGlsaXR5Q2xhc3MiLCJpbnB1dENsYXNzZXMiLCJnZXRPdXRsaW5lZElucHV0VXRpbGl0eUNsYXNzIiwib3V0bGluZWRJbnB1dENsYXNzZXMiLCJnZXRGaWxsZWRJbnB1dFV0aWxpdHlDbGFzcyIsImZpbGxlZElucHV0Q2xhc3NlcyIsIkFycm93RHJvcERvd25JY29uIiwiRmFkZSIsImRlZmF1bHRUaW1lb3V0IiwiZ2V0QmFja2Ryb3BVdGlsaXR5Q2xhc3MiLCJpbnZpc2libGUiLCJCYWNrZHJvcFJvb3QiLCJCYWNrZHJvcCIsIl9zbG90UHJvcHMkcm9vdCIsInJvb3RTbG90UHJvcHMiLCJib3hDbGFzc2VzIiwiQm94IiwiZ2V0QnV0dG9uVXRpbGl0eUNsYXNzIiwiYnV0dG9uQ2xhc3NlcyIsIkJ1dHRvbkdyb3VwQ29udGV4dCIsIkJ1dHRvbkdyb3VwQnV0dG9uQ29udGV4dCIsImRpc2FibGVFbGV2YXRpb24iLCJjb21tb25JY29uU3R5bGVzIiwiQnV0dG9uUm9vdCIsIl90aGVtZSRwYWxldHRlJGdldENvbiIsIl90aGVtZSRwYWxldHRlIiwiaW5oZXJpdENvbnRhaW5lZEJhY2tncm91bmRDb2xvciIsImluaGVyaXRDb250YWluZWRIb3ZlckJhY2tncm91bmRDb2xvciIsIkJ1dHRvblN0YXJ0SWNvbiIsIkJ1dHRvbkVuZEljb24iLCJCdXR0b24iLCJjb250ZXh0UHJvcHMiLCJidXR0b25Hcm91cEJ1dHRvbkNvbnRleHRQb3NpdGlvbkNsYXNzTmFtZSIsInJlc29sdmVkUHJvcHMiLCJlbmRJY29uUHJvcCIsInN0YXJ0SWNvblByb3AiLCJzdGFydEljb24iLCJlbmRJY29uIiwicG9zaXRpb25DbGFzc05hbWUiLCJnZXRDYXJkVXRpbGl0eUNsYXNzIiwiQ2FyZFJvb3QiLCJDYXJkIiwicmFpc2VkIiwiZ2V0Q2FyZEFjdGlvbnNVdGlsaXR5Q2xhc3MiLCJkaXNhYmxlU3BhY2luZyIsIkNhcmRBY3Rpb25zUm9vdCIsIkNhcmRBY3Rpb25zIiwiZ2V0Q2FyZENvbnRlbnRVdGlsaXR5Q2xhc3MiLCJDYXJkQ29udGVudFJvb3QiLCJDYXJkQ29udGVudCIsImdldENhcmRIZWFkZXJVdGlsaXR5Q2xhc3MiLCJjYXJkSGVhZGVyQ2xhc3NlcyIsIkNhcmRIZWFkZXJSb290IiwiQ2FyZEhlYWRlckF2YXRhciIsIkNhcmRIZWFkZXJBY3Rpb24iLCJDYXJkSGVhZGVyQ29udGVudCIsIkNhcmRIZWFkZXIiLCJhdmF0YXIiLCJkaXNhYmxlVHlwb2dyYXBoeSIsInN1YmhlYWRlclByb3AiLCJzdWJoZWFkZXJUeXBvZ3JhcGh5UHJvcHMiLCJ0aXRsZVByb3AiLCJ0aXRsZVR5cG9ncmFwaHlQcm9wcyIsInRpdGxlIiwic3ViaGVhZGVyIiwiZ2V0Q2lyY3VsYXJQcm9ncmVzc1V0aWxpdHlDbGFzcyIsIlNJWkUiLCJjaXJjdWxhclJvdGF0ZUtleWZyYW1lIiwiY2lyY3VsYXJEYXNoS2V5ZnJhbWUiLCJkaXNhYmxlU2hyaW5rIiwiQ2lyY3VsYXJQcm9ncmVzc1Jvb3QiLCJDaXJjdWxhclByb2dyZXNzU1ZHIiwiQ2lyY3VsYXJQcm9ncmVzc0NpcmNsZSIsIkNpcmN1bGFyUHJvZ3Jlc3MiLCJ0aGlja25lc3MiLCJjaXJjbGVTdHlsZSIsInJvb3RTdHlsZSIsImNpcmN1bWZlcmVuY2UiLCJnZXRNb2RhbFV0aWxpdHlDbGFzcyIsIk1vZGFsUm9vdCIsIk1vZGFsQmFja2Ryb3AiLCJNb2RhbCIsIl9zbG90cyRiYWNrZHJvcCIsIl9zbG90UHJvcHMkYmFja2Ryb3AiLCJCYWNrZHJvcENvbXBvbmVudCIsIkJhY2tkcm9wUHJvcHMiLCJoaWRlQmFja2Ryb3AiLCJvbkJhY2tkcm9wQ2xpY2siLCJwcm9wc1dpdGhEZWZhdWx0cyIsImdldFJvb3RQcm9wcyIsImdldEJhY2tkcm9wUHJvcHMiLCJwb3J0YWxSZWYiLCJSb290U2xvdCIsIkJhY2tkcm9wU2xvdCIsImJhY2tkcm9wU2xvdFByb3BzIiwiYmFja2Ryb3BQcm9wcyIsImRpdmlkZXJDbGFzc2VzIiwiZGlzYWJsZVVuZGVybGluZSIsIkZpbGxlZElucHV0Um9vdCIsImlucHV0QmFzZVJvb3RPdmVycmlkZXNSZXNvbHZlciIsImJvdHRvbUxpbmVDb2xvciIsImhvdmVyQmFja2dyb3VuZCIsImRpc2FibGVkQmFja2dyb3VuZCIsIkZpbGxlZElucHV0SW5wdXQiLCJJbnB1dEJhc2VJbnB1dCIsImlucHV0QmFzZUlucHV0T3ZlcnJpZGVzUmVzb2x2ZXIiLCJGaWxsZWRJbnB1dCIsIl9zbG90cyRpbnB1dCIsImNvbXBvbmVudHNQcm9wc1Byb3AiLCJmaWxsZWRJbnB1dENvbXBvbmVudHNQcm9wcyIsIklucHV0U2xvdCIsImdldEZvcm1Db250cm9sVXRpbGl0eUNsYXNzZXMiLCJGb3JtQ29udHJvbFJvb3QiLCJGb3JtQ29udHJvbCIsInZpc3VhbGx5Rm9jdXNlZCIsImFkb3JuZWRTdGFydCIsInNldEFkb3JuZWRTdGFydCIsImluaXRpYWxBZG9ybmVkU3RhcnQiLCJmaWxsZWQiLCJzZXRGaWxsZWQiLCJpbml0aWFsRmlsbGVkIiwiZm9jdXNlZFN0YXRlIiwicmVnaXN0ZXJFZmZlY3QiLCJjaGlsZENvbnRleHQiLCJTdGFjayIsImdldEZvcm1IZWxwZXJUZXh0VXRpbGl0eUNsYXNzZXMiLCJmb3JtSGVscGVyVGV4dENsYXNzZXMiLCJfc3BhbiIsImNvbnRhaW5lZCIsIkZvcm1IZWxwZXJUZXh0Um9vdCIsIkZvcm1IZWxwZXJUZXh0IiwiZ2V0Rm9ybUxhYmVsVXRpbGl0eUNsYXNzZXMiLCJmb3JtTGFiZWxDbGFzc2VzIiwiRm9ybUxhYmVsUm9vdCIsIkFzdGVyaXNrQ29tcG9uZW50IiwiRm9ybUxhYmVsIiwiR3JpZENvbnRleHQiLCJnZXRHcmlkVXRpbGl0eUNsYXNzIiwiU1BBQ0lOR1MiLCJESVJFQ1RJT05TIiwiV1JBUFMiLCJHUklEX1NJWkVTIiwiZ3JpZENsYXNzZXMiLCJ3cmFwIiwiZ2V0T2Zmc2V0IiwiZ2VuZXJhdGVHcmlkIiwiY29sdW1uc0JyZWFrcG9pbnRWYWx1ZXMiLCJjb2x1bW5WYWx1ZSIsImdlbmVyYXRlRGlyZWN0aW9uIiwiZXh0cmFjdFplcm9WYWx1ZUJyZWFrcG9pbnRLZXlzIiwibm9uWmVyb0tleSIsInNvcnRlZEJyZWFrcG9pbnRLZXlzQnlWYWx1ZSIsImdlbmVyYXRlUm93R2FwIiwicm93U3BhY2luZyIsInJvd1NwYWNpbmdWYWx1ZXMiLCJ6ZXJvVmFsdWVCcmVha3BvaW50S2V5cyIsIl96ZXJvVmFsdWVCcmVha3BvaW50SyIsImdlbmVyYXRlQ29sdW1uR2FwIiwiY29sdW1uU3BhY2luZyIsImNvbHVtblNwYWNpbmdWYWx1ZXMiLCJfemVyb1ZhbHVlQnJlYWtwb2ludEsyIiwicmVzb2x2ZVNwYWNpbmdTdHlsZXMiLCJzcGFjaW5nU3R5bGVzIiwiR3JpZFJvb3QiLCJ6ZXJvTWluV2lkdGgiLCJicmVha3BvaW50c1N0eWxlcyIsInJlc29sdmVTcGFjaW5nQ2xhc3NlcyIsInNwYWNpbmdDbGFzc2VzIiwiYnJlYWtwb2ludHNDbGFzc2VzIiwiR3JpZCIsImNvbHVtbnNQcm9wIiwiY29sdW1uU3BhY2luZ1Byb3AiLCJyb3dTcGFjaW5nUHJvcCIsImNvbHVtbnNDb250ZXh0IiwiY29sdW1ucyIsIm90aGVyRmlsdGVyZWQiLCJnZXRTY2FsZSIsImlzV2ViS2l0MTU0IiwiR3JvdyIsImF1dG9UaW1lb3V0IiwiSW5wdXRSb290IiwiSW5wdXRJbnB1dCIsImlucHV0Q29tcG9uZW50c1Byb3BzIiwiZ2V0SW5wdXRBZG9ybm1lbnRVdGlsaXR5Q2xhc3MiLCJpbnB1dEFkb3JubWVudENsYXNzZXMiLCJkaXNhYmxlUG9pbnRlckV2ZW50cyIsIklucHV0QWRvcm5tZW50Um9vdCIsIklucHV0QWRvcm5tZW50IiwidmFyaWFudFByb3AiLCJnZXRJbnB1dExhYmVsVXRpbGl0eUNsYXNzZXMiLCJzaHJpbmsiLCJkaXNhYmxlQW5pbWF0aW9uIiwiSW5wdXRMYWJlbFJvb3QiLCJJbnB1dExhYmVsIiwic2hyaW5rUHJvcCIsIkxpc3RDb250ZXh0IiwiZ2V0TGlzdFV0aWxpdHlDbGFzcyIsImRpc2FibGVQYWRkaW5nIiwiZGVuc2UiLCJMaXN0Um9vdCIsIkxpc3QiLCJsaXN0SXRlbUljb25DbGFzc2VzIiwibGlzdEl0ZW1UZXh0Q2xhc3NlcyIsIm5leHRJdGVtIiwiZGlzYWJsZUxpc3RXcmFwIiwicHJldmlvdXNJdGVtIiwidGV4dENyaXRlcmlhTWF0Y2hlcyIsIm5leHRGb2N1cyIsInRleHRDcml0ZXJpYSIsIm1vdmVGb2N1cyIsImN1cnJlbnRGb2N1cyIsImRpc2FibGVkSXRlbXNGb2N1c2FibGUiLCJ0cmF2ZXJzYWxGdW5jdGlvbiIsIndyYXBwZWRPbmNlIiwibmV4dEZvY3VzRGlzYWJsZWQiLCJNZW51TGlzdCIsImFjdGlvbnMiLCJhdXRvRm9jdXNJdGVtIiwibGlzdFJlZiIsInRleHRDcml0ZXJpYVJlZiIsImNvbnRhaW5lckVsZW1lbnQiLCJub0V4cGxpY2l0V2lkdGgiLCJjcml0ZXJpYSIsImxvd2VyS2V5IiwiY3VyclRpbWUiLCJrZWVwRm9jdXNPbkN1cnJlbnQiLCJhY3RpdmVJdGVtSW5kZXgiLCJuZXdDaGlsZFByb3BzIiwiZ2V0UG9wb3ZlclV0aWxpdHlDbGFzcyIsImdldE9mZnNldFRvcCIsInZlcnRpY2FsIiwiZ2V0T2Zmc2V0TGVmdCIsImhvcml6b250YWwiLCJnZXRUcmFuc2Zvcm1PcmlnaW5WYWx1ZSIsInRyYW5zZm9ybU9yaWdpbiIsIlBvcG92ZXJSb290IiwiUG9wb3ZlclBhcGVyIiwiUGFwZXJCYXNlIiwiUG9wb3ZlciIsIl9zbG90UHJvcHMkcGFwZXIiLCJfc2xvdHMkcGFwZXIiLCJhbmNob3JPcmlnaW4iLCJhbmNob3JQb3NpdGlvbiIsImFuY2hvclJlZmVyZW5jZSIsIm1hcmdpblRocmVzaG9sZCIsIlBhcGVyUHJvcHNQcm9wIiwidHJhbnNpdGlvbkR1cmF0aW9uUHJvcCIsImV4dGVybmFsUGFwZXJTbG90UHJvcHMiLCJwYXBlclJlZiIsImhhbmRsZVBhcGVyUmVmIiwiZ2V0QW5jaG9yT2Zmc2V0IiwiYW5jaG9yUmVjdCIsImdldFRyYW5zZm9ybU9yaWdpbiIsImVsZW1SZWN0IiwiZ2V0UG9zaXRpb25pbmdTdHlsZSIsImVsZW1UcmFuc2Zvcm1PcmlnaW4iLCJhbmNob3JPZmZzZXQiLCJoZWlnaHRUaHJlc2hvbGQiLCJ3aWR0aFRocmVzaG9sZCIsImRpZmYiLCJpc1Bvc2l0aW9uZWQiLCJzZXRJc1Bvc2l0aW9uZWQiLCJzZXRQb3NpdGlvbmluZ1N0eWxlcyIsInBvc2l0aW9uaW5nIiwiUGFwZXJTbG90IiwicGFwZXJQcm9wcyIsIl91c2VTbG90UHJvcHMiLCJyb290U2xvdFByb3BzUHJvcCIsImdldE1lbnVVdGlsaXR5Q2xhc3MiLCJSVExfT1JJR0lOIiwiTFRSX09SSUdJTiIsIk1lbnVSb290IiwiTWVudVBhcGVyIiwiTWVudU1lbnVMaXN0IiwiTWVudSIsImRpc2FibGVBdXRvRm9jdXNJdGVtIiwiTWVudUxpc3RQcm9wcyIsIlBhcGVyUHJvcHMiLCJQb3BvdmVyQ2xhc3NlcyIsImlzUnRsIiwibWVudUxpc3RBY3Rpb25zUmVmIiwiaGFuZGxlTGlzdEtleURvd24iLCJwYXBlckV4dGVybmFsU2xvdFByb3BzIiwicGFwZXJTbG90UHJvcHMiLCJnZXRNZW51SXRlbVV0aWxpdHlDbGFzcyIsIm1lbnVJdGVtQ2xhc3NlcyIsInNlbGVjdGVkIiwiTWVudUl0ZW1Sb290IiwiTWVudUl0ZW0iLCJ0YWJJbmRleFByb3AiLCJtZW51SXRlbVJlZiIsImdldE5hdGl2ZVNlbGVjdFV0aWxpdHlDbGFzc2VzIiwibmF0aXZlU2VsZWN0Q2xhc3NlcyIsIm11bHRpcGxlIiwibmF0aXZlU2VsZWN0U2VsZWN0U3R5bGVzIiwiTmF0aXZlU2VsZWN0U2VsZWN0IiwibmF0aXZlU2VsZWN0SWNvblN0eWxlcyIsIk5hdGl2ZVNlbGVjdEljb24iLCJOYXRpdmVTZWxlY3RJbnB1dCIsIkljb25Db21wb25lbnQiLCJOb3RjaGVkT3V0bGluZVJvb3QiLCJOb3RjaGVkT3V0bGluZUxlZ2VuZCIsIk5vdGNoZWRPdXRsaW5lIiwibm90Y2hlZCIsIndpdGhMYWJlbCIsIk91dGxpbmVkSW5wdXRSb290IiwiT3V0bGluZWRJbnB1dElucHV0IiwiT3V0bGluZWRJbnB1dCIsIl9SZWFjdCRGcmFnbWVudCIsIkZpcnN0UGFnZUljb25EZWZhdWx0IiwiTGFzdFBhZ2VJY29uRGVmYXVsdCIsImdldFNlbGVjdFV0aWxpdHlDbGFzc2VzIiwic2VsZWN0Q2xhc3NlcyIsIlNlbGVjdFNlbGVjdCIsIlNlbGVjdEljb24iLCJTZWxlY3ROYXRpdmVJbnB1dCIsImFyZUVxdWFsVmFsdWVzIiwiU2VsZWN0SW5wdXQiLCJfTWVudVByb3BzJHNsb3RQcm9wcyIsImFyaWFMYWJlbCIsImF1dG9XaWR0aCIsImRlZmF1bHRPcGVuIiwiZGlzcGxheUVtcHR5IiwibGFiZWxJZCIsIk1lbnVQcm9wcyIsIm9uT3BlbiIsIm9wZW5Qcm9wIiwicmVuZGVyVmFsdWUiLCJTZWxlY3REaXNwbGF5UHJvcHMiLCJzZXRWYWx1ZVN0YXRlIiwib3BlblN0YXRlIiwic2V0T3BlblN0YXRlIiwiZGlzcGxheVJlZiIsImRpc3BsYXlOb2RlIiwic2V0RGlzcGxheU5vZGUiLCJpc09wZW5Db250cm9sbGVkIiwibWVudU1pbldpZHRoU3RhdGUiLCJzZXRNZW51TWluV2lkdGhTdGF0ZSIsImhhbmRsZURpc3BsYXlSZWYiLCJhbmNob3JFbGVtZW50IiwidXBkYXRlIiwiY2hpbGRJdGVtIiwiaGFuZGxlSXRlbUNsaWNrIiwiaXRlbUluZGV4IiwiY2xvbmVkRXZlbnQiLCJkaXNwbGF5U2luZ2xlIiwiZGlzcGxheU11bHRpcGxlIiwiY29tcHV0ZURpc3BsYXkiLCJtZW51TWluV2lkdGgiLCJidXR0b25JZCIsImxpc3Rib3hJZCIsInN0eWxlZFJvb3RDb25maWciLCJTdHlsZWRJbnB1dCIsIlN0eWxlZE91dGxpbmVkSW5wdXQiLCJTdHlsZWRGaWxsZWRJbnB1dCIsIlNlbGVjdCIsImNsYXNzZXNQcm9wIiwibmF0aXZlIiwicmVzdE9mQ2xhc3NlcyIsImlucHV0Q29tcG9uZW50UmVmIiwiZ2V0VG9vbHRpcFV0aWxpdHlDbGFzcyIsInRvb2x0aXBDbGFzc2VzIiwiZGlzYWJsZUludGVyYWN0aXZlIiwidG91Y2giLCJUb29sdGlwUG9wcGVyIiwiVG9vbHRpcFRvb2x0aXAiLCJUb29sdGlwQXJyb3ciLCJoeXN0ZXJzaXNPcGVuIiwiaHlzdGVyc2lzVGltZXIiLCJjdXJzb3JQb3NpdGlvbiIsImNvbXBvc2VFdmVudEhhbmRsZXIiLCJldmVudEhhbmRsZXIiLCJUb29sdGlwIiwiX3Nsb3RzJHBvcHBlciIsIl9zbG90cyR0cmFuc2l0aW9uIiwiX3Nsb3RzJHRvb2x0aXAiLCJfc2xvdHMkYXJyb3ciLCJfc2xvdFByb3BzJHBvcHBlciIsIl9yZWY2IiwiX3Nsb3RQcm9wcyRwb3BwZXIyIiwiX3Nsb3RQcm9wcyR0cmFuc2l0aW9uIiwiX3Nsb3RQcm9wcyR0b29sdGlwIiwiX3Nsb3RQcm9wcyR0b29sdGlwMiIsIl9zbG90UHJvcHMkYXJyb3ciLCJfcmVmOCIsIl9zbG90UHJvcHMkYXJyb3cyIiwiZGVzY3JpYmVDaGlsZCIsImRpc2FibGVGb2N1c0xpc3RlbmVyIiwiZGlzYWJsZUhvdmVyTGlzdGVuZXIiLCJkaXNhYmxlSW50ZXJhY3RpdmVQcm9wIiwiZGlzYWJsZVRvdWNoTGlzdGVuZXIiLCJlbnRlckRlbGF5IiwiZW50ZXJOZXh0RGVsYXkiLCJlbnRlclRvdWNoRGVsYXkiLCJmb2xsb3dDdXJzb3IiLCJpZFByb3AiLCJsZWF2ZURlbGF5IiwibGVhdmVUb3VjaERlbGF5IiwiUG9wcGVyQ29tcG9uZW50UHJvcCIsIlBvcHBlclByb3BzIiwiY2hpbGROb2RlIiwic2V0Q2hpbGROb2RlIiwiYXJyb3dSZWYiLCJzZXRBcnJvd1JlZiIsImlnbm9yZU5vblRvdWNoRXZlbnRzIiwiY2xvc2VUaW1lciIsImVudGVyVGltZXIiLCJsZWF2ZVRpbWVyIiwidG91Y2hUaW1lciIsInByZXZVc2VyU2VsZWN0Iiwic3RvcFRvdWNoSW50ZXJhY3Rpb24iLCJoYW5kbGVNb3VzZU92ZXIiLCJzZXRDaGlsZElzRm9jdXNWaXNpYmxlIiwiZGV0ZWN0VG91Y2hTdGFydCIsImNoaWxkcmVuUHJvcHMiLCJoYW5kbGVNb3VzZU1vdmUiLCJuYW1lT3JEZXNjUHJvcHMiLCJ0aXRsZUlzU3RyaW5nIiwiaW50ZXJhY3RpdmVXcmFwcGVyTGlzdGVuZXJzIiwiX1BvcHBlclByb3BzJHBvcHBlck9wIiwidG9vbHRpcE1vZGlmaWVycyIsIlBvcHBlckNvbXBvbmVudCIsIlRvb2x0aXBDb21wb25lbnQiLCJBcnJvd0NvbXBvbmVudCIsInBvcHBlclByb3BzIiwidG9vbHRpcFByb3BzIiwidG9vbHRpcEFycm93UHJvcHMiLCJUcmFuc2l0aW9uUHJvcHNJbm5lciIsIlRhYmxlQ29udGV4dCIsImdldFRhYmxlVXRpbGl0eUNsYXNzIiwic3RpY2t5SGVhZGVyIiwiVGFibGVSb290IiwiZGVmYXVsdENvbXBvbmVudCIsIlRhYmxlIiwidGFibGUiLCJUYWJsZWx2bDJDb250ZXh0IiwiZ2V0VGFibGVCb2R5VXRpbGl0eUNsYXNzIiwiVGFibGVCb2R5Um9vdCIsInRhYmxlbHZsMiIsIlRhYmxlQm9keSIsImdldFRhYmxlQ2VsbFV0aWxpdHlDbGFzcyIsInRhYmxlQ2VsbENsYXNzZXMiLCJUYWJsZUNlbGxSb290IiwiVGFibGVDZWxsIiwiY29tcG9uZW50UHJvcCIsInBhZGRpbmdQcm9wIiwic2NvcGVQcm9wIiwic2l6ZVByb3AiLCJzb3J0RGlyZWN0aW9uIiwiaXNIZWFkQ2VsbCIsInNjb3BlIiwiYXJpYVNvcnQiLCJnZXRUYWJsZUNvbnRhaW5lclV0aWxpdHlDbGFzcyIsIlRhYmxlQ29udGFpbmVyUm9vdCIsIlRhYmxlQ29udGFpbmVyIiwiZ2V0VGFibGVIZWFkVXRpbGl0eUNsYXNzIiwiVGFibGVIZWFkUm9vdCIsIlRhYmxlSGVhZCIsImdldFRvb2xiYXJVdGlsaXR5Q2xhc3MiLCJUb29sYmFyUm9vdCIsIlRvb2xiYXIiLCJLZXlib2FyZEFycm93TGVmdCIsIktleWJvYXJkQXJyb3dSaWdodCIsIlRhYmxlUGFnaW5hdGlvbkFjdGlvbnMiLCJfc2xvdHMkZmlyc3RCdXR0b24iLCJfc2xvdHMkbGFzdEJ1dHRvbiIsIl9zbG90cyRuZXh0QnV0dG9uIiwiX3Nsb3RzJHByZXZpb3VzQnV0dG9uIiwiX3Nsb3RzJGZpcnN0QnV0dG9uSWNvIiwiX3Nsb3RzJGxhc3RCdXR0b25JY29uIiwiX3Nsb3RzJG5leHRCdXR0b25JY29uIiwiX3Nsb3RzJHByZXZpb3VzQnV0dG9uMiIsImJhY2tJY29uQnV0dG9uUHJvcHMiLCJnZXRJdGVtQXJpYUxhYmVsIiwibmV4dEljb25CdXR0b25Qcm9wcyIsIm9uUGFnZUNoYW5nZSIsInBhZ2UiLCJyb3dzUGVyUGFnZSIsInNob3dGaXJzdEJ1dHRvbiIsInNob3dMYXN0QnV0dG9uIiwiaGFuZGxlRmlyc3RQYWdlQnV0dG9uQ2xpY2siLCJoYW5kbGVCYWNrQnV0dG9uQ2xpY2siLCJoYW5kbGVOZXh0QnV0dG9uQ2xpY2siLCJoYW5kbGVMYXN0UGFnZUJ1dHRvbkNsaWNrIiwiRmlyc3RCdXR0b24iLCJMYXN0QnV0dG9uIiwiTmV4dEJ1dHRvbiIsIlByZXZpb3VzQnV0dG9uIiwiRmlyc3RCdXR0b25JY29uIiwiTGFzdEJ1dHRvbkljb24iLCJOZXh0QnV0dG9uSWNvbiIsIlByZXZpb3VzQnV0dG9uSWNvbiIsIkZpcnN0QnV0dG9uU2xvdCIsIlByZXZpb3VzQnV0dG9uU2xvdCIsIk5leHRCdXR0b25TbG90IiwiTGFzdEJ1dHRvblNsb3QiLCJmaXJzdEJ1dHRvblNsb3RQcm9wcyIsInByZXZpb3VzQnV0dG9uU2xvdFByb3BzIiwibmV4dEJ1dHRvblNsb3RQcm9wcyIsImxhc3RCdXR0b25TbG90UHJvcHMiLCJnZXRUYWJsZVBhZ2luYXRpb25VdGlsaXR5Q2xhc3MiLCJ0YWJsZVBhZ2luYXRpb25DbGFzc2VzIiwiX0lucHV0QmFzZSIsIlRhYmxlUGFnaW5hdGlvblJvb3QiLCJUYWJsZVBhZ2luYXRpb25Ub29sYmFyIiwiVGFibGVQYWdpbmF0aW9uU3BhY2VyIiwiVGFibGVQYWdpbmF0aW9uU2VsZWN0TGFiZWwiLCJUYWJsZVBhZ2luYXRpb25TZWxlY3QiLCJUYWJsZVBhZ2luYXRpb25NZW51SXRlbSIsIlRhYmxlUGFnaW5hdGlvbkRpc3BsYXllZFJvd3MiLCJkZWZhdWx0TGFiZWxEaXNwbGF5ZWRSb3dzIiwiZGVmYXVsdEdldEFyaWFMYWJlbCIsIlRhYmxlUGFnaW5hdGlvbiIsIl9zbG90UHJvcHMkc2VsZWN0IiwiQWN0aW9uc0NvbXBvbmVudCIsImNvbFNwYW5Qcm9wIiwibGFiZWxEaXNwbGF5ZWRSb3dzIiwibGFiZWxSb3dzUGVyUGFnZSIsIm9uUm93c1BlclBhZ2VDaGFuZ2UiLCJyb3dzUGVyUGFnZU9wdGlvbnMiLCJTZWxlY3RQcm9wcyIsInNlbGVjdFByb3BzIiwiTWVudUl0ZW1Db21wb25lbnQiLCJjb2xTcGFuIiwic2VsZWN0SWQiLCJnZXRMYWJlbERpc3BsYXllZFJvd3NUbyIsInJvd3NQZXJQYWdlT3B0aW9uIiwiX2NyZWF0ZUVsZW1lbnQiLCJnZXRUYWJsZVJvd1V0aWxpdHlDbGFzcyIsInRhYmxlUm93Q2xhc3NlcyIsImhvdmVyIiwiaGVhZCIsImZvb3RlciIsIlRhYmxlUm93Um9vdCIsIlRhYmxlUm93IiwiZ2V0VGV4dEZpZWxkVXRpbGl0eUNsYXNzIiwidmFyaWFudENvbXBvbmVudCIsIlRleHRGaWVsZFJvb3QiLCJUZXh0RmllbGQiLCJGb3JtSGVscGVyVGV4dFByb3BzIiwiaGVscGVyVGV4dCIsIklucHV0TGFiZWxQcm9wcyIsIklucHV0UHJvcHMiLCJzZWxlY3QiLCJJbnB1dE1vcmUiLCJoZWxwZXJUZXh0SWQiLCJpbnB1dExhYmVsSWQiLCJJbnB1dEVsZW1lbnQiLCJBcHAiLCJqc3hzIiwianN4IiwiYmluZCIsInRoaXNBcmciLCJ0b1N0cmluZyIsImdldFByb3RvdHlwZU9mIiwia2luZE9mIiwidGhpbmciLCJraW5kT2ZUZXN0IiwidHlwZU9mVGVzdCIsImlzQXJyYXkiLCJpc1VuZGVmaW5lZCIsImlzQnVmZmVyIiwiaXNGdW5jdGlvbiIsImlzQXJyYXlCdWZmZXIiLCJpc0FycmF5QnVmZmVyVmlldyIsImlzU3RyaW5nIiwiaXNOdW1iZXIiLCJpc09iamVjdCIsImlzQm9vbGVhbiIsImlzRGF0ZSIsImlzRmlsZSIsImlzQmxvYiIsImlzRmlsZUxpc3QiLCJpc1N0cmVhbSIsImlzRm9ybURhdGEiLCJraW5kIiwiaXNVUkxTZWFyY2hQYXJhbXMiLCJpc1JlYWRhYmxlU3RyZWFtIiwiaXNSZXF1ZXN0IiwiaXNIZWFkZXJzIiwiZm9yRWFjaCIsImFsbE93bktleXMiLCJmaW5kS2V5IiwiX2dsb2JhbCIsImlzQ29udGV4dERlZmluZWQiLCJjYXNlbGVzcyIsImFzc2lnblZhbHVlIiwidGFyZ2V0S2V5IiwiZXh0ZW5kIiwic3RyaXBCT00iLCJjb250ZW50IiwiaW5oZXJpdHMiLCJjb25zdHJ1Y3RvciIsInN1cGVyQ29uc3RydWN0b3IiLCJkZXNjcmlwdG9ycyIsInRvRmxhdE9iamVjdCIsInNvdXJjZU9iaiIsImRlc3RPYmoiLCJmaWx0ZXIiLCJwcm9wRmlsdGVyIiwiZW5kc1dpdGgiLCJzZWFyY2hTdHJpbmciLCJsYXN0SW5kZXgiLCJ0b0FycmF5IiwiYXJyIiwiaXNUeXBlZEFycmF5IiwiVHlwZWRBcnJheSIsImZvckVhY2hFbnRyeSIsIml0ZXJhdG9yIiwicGFpciIsIm1hdGNoQWxsIiwicmVnRXhwIiwiaXNIVE1MRm9ybSIsInRvQ2FtZWxDYXNlIiwiaGFzT3duUHJvcGVydHkiLCJpc1JlZ0V4cCIsInJlZHVjZURlc2NyaXB0b3JzIiwicmVkdWNlciIsInJlZHVjZWREZXNjcmlwdG9ycyIsImRlc2NyaXB0b3IiLCJyZXQiLCJmcmVlemVNZXRob2RzIiwidG9PYmplY3RTZXQiLCJhcnJheU9yU3RyaW5nIiwiZGVmaW5lIiwidG9GaW5pdGVOdW1iZXIiLCJBTFBIQSIsIkRJR0lUIiwiQUxQSEFCRVQiLCJnZW5lcmF0ZVN0cmluZyIsImFscGhhYmV0IiwiaXNTcGVjQ29tcGxpYW50Rm9ybSIsInRvSlNPTk9iamVjdCIsInZpc2l0IiwicmVkdWNlZFZhbHVlIiwiaXNBc3luY0ZuIiwiaXNUaGVuYWJsZSIsInV0aWxzJDEiLCJBeGlvc0Vycm9yIiwidXRpbHMiLCJjdXN0b21Qcm9wcyIsImF4aW9zRXJyb3IiLCJodHRwQWRhcHRlciIsImlzVmlzaXRhYmxlIiwicmVtb3ZlQnJhY2tldHMiLCJyZW5kZXJLZXkiLCJkb3RzIiwiaXNGbGF0QXJyYXkiLCJwcmVkaWNhdGVzIiwidG9Gb3JtRGF0YSIsIm9wdGlvbiIsIm1ldGFUb2tlbnMiLCJ2aXNpdG9yIiwiZGVmYXVsdFZpc2l0b3IiLCJpbmRleGVzIiwidXNlQmxvYiIsImNvbnZlcnRWYWx1ZSIsImV4cG9zZWRIZWxwZXJzIiwiYnVpbGQiLCJlbmNvZGUiLCJjaGFyTWFwIiwiQXhpb3NVUkxTZWFyY2hQYXJhbXMiLCJlbmNvZGVyIiwiX2VuY29kZSIsImJ1aWxkVVJMIiwic2VyaWFsaXplRm4iLCJzZXJpYWxpemVkUGFyYW1zIiwiaGFzaG1hcmtJbmRleCIsIkludGVyY2VwdG9yTWFuYWdlciIsImZ1bGZpbGxlZCIsInJlamVjdGVkIiwidHJhbnNpdGlvbmFsRGVmYXVsdHMiLCJVUkxTZWFyY2hQYXJhbXMkMSIsIkZvcm1EYXRhJDEiLCJCbG9iJDEiLCJwbGF0Zm9ybSQxIiwiVVJMU2VhcmNoUGFyYW1zIiwiRm9ybURhdGEiLCJCbG9iIiwiaGFzQnJvd3NlckVudiIsImhhc1N0YW5kYXJkQnJvd3NlckVudiIsInByb2R1Y3QiLCJoYXNTdGFuZGFyZEJyb3dzZXJXZWJXb3JrZXJFbnYiLCJvcmlnaW4iLCJwbGF0Zm9ybSIsInRvVVJMRW5jb2RlZEZvcm0iLCJoZWxwZXJzIiwicGFyc2VQcm9wUGF0aCIsImFycmF5VG9PYmplY3QiLCJmb3JtRGF0YVRvSlNPTiIsImJ1aWxkUGF0aCIsImlzTnVtZXJpY0tleSIsImlzTGFzdCIsInN0cmluZ2lmeVNhZmVseSIsInJhd1ZhbHVlIiwicGFyc2VyIiwiZGVmYXVsdHMiLCJoZWFkZXJzIiwiaGFzSlNPTkNvbnRlbnRUeXBlIiwiaXNPYmplY3RQYXlsb2FkIiwiX0Zvcm1EYXRhIiwidHJhbnNpdGlvbmFsIiwiZm9yY2VkSlNPTlBhcnNpbmciLCJKU09OUmVxdWVzdGVkIiwic3RyaWN0SlNPTlBhcnNpbmciLCJpZ25vcmVEdXBsaWNhdGVPZiIsInBhcnNlSGVhZGVycyIsInJhd0hlYWRlcnMiLCIkaW50ZXJuYWxzIiwibm9ybWFsaXplSGVhZGVyIiwiaGVhZGVyIiwibm9ybWFsaXplVmFsdWUiLCJwYXJzZVRva2VucyIsInRva2VucyIsInRva2Vuc1JFIiwiaXNWYWxpZEhlYWRlck5hbWUiLCJtYXRjaEhlYWRlclZhbHVlIiwiaXNIZWFkZXJOYW1lRmlsdGVyIiwiZm9ybWF0SGVhZGVyIiwiYnVpbGRBY2Nlc3NvcnMiLCJhY2Nlc3Nvck5hbWUiLCJtZXRob2ROYW1lIiwiYXJnMSIsImFyZzIiLCJhcmczIiwiQXhpb3NIZWFkZXJzIiwidmFsdWVPclJld3JpdGUiLCJyZXdyaXRlIiwic2VsZiIsInNldEhlYWRlciIsIl92YWx1ZSIsIl9oZWFkZXIiLCJfcmV3cml0ZSIsImxIZWFkZXIiLCJzZXRIZWFkZXJzIiwiZGVsZXRlZCIsImRlbGV0ZUhlYWRlciIsImZvcm1hdCIsIm5vcm1hbGl6ZWQiLCJ0YXJnZXRzIiwiYXNTdHJpbmdzIiwiY29tcHV0ZWQiLCJhY2Nlc3NvcnMiLCJkZWZpbmVBY2Nlc3NvciIsIm1hcHBlZCIsImhlYWRlclZhbHVlIiwidHJhbnNmb3JtRGF0YSIsImZucyIsImlzQ2FuY2VsIiwiQ2FuY2VsZWRFcnJvciIsInNldHRsZSIsInZhbGlkYXRlU3RhdHVzIiwicGFyc2VQcm90b2NvbCIsInNwZWVkb21ldGVyIiwic2FtcGxlc0NvdW50IiwiYnl0ZXMiLCJ0aW1lc3RhbXBzIiwidGFpbCIsImZpcnN0U2FtcGxlVFMiLCJjaHVua0xlbmd0aCIsIm5vdyIsInN0YXJ0ZWRBdCIsImJ5dGVzQ291bnQiLCJwYXNzZWQiLCJ0aHJvdHRsZSIsImZyZXEiLCJ0aW1lc3RhbXAiLCJ0aHJlc2hvbGQiLCJmb3JjZSIsInByb2dyZXNzRXZlbnRSZWR1Y2VyIiwiaXNEb3dubG9hZFN0cmVhbSIsImJ5dGVzTm90aWZpZWQiLCJfc3BlZWRvbWV0ZXIiLCJsb2FkZWQiLCJ0b3RhbCIsInByb2dyZXNzQnl0ZXMiLCJyYXRlIiwiaW5SYW5nZSIsImlzVVJMU2FtZU9yaWdpbiIsIm1zaWUiLCJ1cmxQYXJzaW5nTm9kZSIsIm9yaWdpblVSTCIsInJlc29sdmVVUkwiLCJyZXF1ZXN0VVJMIiwiY29va2llcyIsImV4cGlyZXMiLCJkb21haW4iLCJzZWN1cmUiLCJjb29raWUiLCJpc0Fic29sdXRlVVJMIiwiY29tYmluZVVSTHMiLCJiYXNlVVJMIiwicmVsYXRpdmVVUkwiLCJidWlsZEZ1bGxQYXRoIiwicmVxdWVzdGVkVVJMIiwiaGVhZGVyc1RvT2JqZWN0IiwibWVyZ2VDb25maWciLCJjb25maWcxIiwiY29uZmlnMiIsImdldE1lcmdlZFZhbHVlIiwibWVyZ2VEZWVwUHJvcGVydGllcyIsInZhbHVlRnJvbUNvbmZpZzIiLCJkZWZhdWx0VG9Db25maWcyIiwibWVyZ2VEaXJlY3RLZXlzIiwibWVyZ2VNYXAiLCJjb25maWdWYWx1ZSIsInJlc29sdmVDb25maWciLCJuZXdDb25maWciLCJ3aXRoWFNSRlRva2VuIiwieHNyZkhlYWRlck5hbWUiLCJ4c3JmQ29va2llTmFtZSIsImF1dGgiLCJ4c3JmVmFsdWUiLCJpc1hIUkFkYXB0ZXJTdXBwb3J0ZWQiLCJ4aHJBZGFwdGVyIiwiX2NvbmZpZyIsInJlcXVlc3REYXRhIiwicmVxdWVzdEhlYWRlcnMiLCJyZXNwb25zZVR5cGUiLCJvbkNhbmNlbGVkIiwiZG9uZSIsIm9ubG9hZGVuZCIsInJlc3BvbnNlSGVhZGVycyIsInRpbWVvdXRFcnJvck1lc3NhZ2UiLCJjYW5jZWwiLCJwcm90b2NvbCIsImNvbXBvc2VTaWduYWxzIiwib25hYm9ydCIsInVuc3Vic2NyaWJlIiwic3RyZWFtQ2h1bmsiLCJjaHVuayIsImNodW5rU2l6ZSIsInBvcyIsInJlYWRCeXRlcyIsIml0ZXJhYmxlIiwidHJhY2tTdHJlYW0iLCJzdHJlYW0iLCJvblByb2dyZXNzIiwib25GaW5pc2giLCJmZXRjaFByb2dyZXNzRGVjb3JhdG9yIiwibGVuZ3RoQ29tcHV0YWJsZSIsImlzRmV0Y2hTdXBwb3J0ZWQiLCJpc1JlYWRhYmxlU3RyZWFtU3VwcG9ydGVkIiwiZW5jb2RlVGV4dCIsInN1cHBvcnRzUmVxdWVzdFN0cmVhbSIsImR1cGxleEFjY2Vzc2VkIiwiaGFzQ29udGVudFR5cGUiLCJERUZBVUxUX0NIVU5LX1NJWkUiLCJzdXBwb3J0c1Jlc3BvbnNlU3RyZWFtIiwicmVzb2x2ZXJzIiwicmVzIiwiZ2V0Qm9keUxlbmd0aCIsInJlc29sdmVCb2R5TGVuZ3RoIiwiZmV0Y2hBZGFwdGVyIiwiY2FuY2VsVG9rZW4iLCJvbkRvd25sb2FkUHJvZ3Jlc3MiLCJvblVwbG9hZFByb2dyZXNzIiwid2l0aENyZWRlbnRpYWxzIiwiZmV0Y2hPcHRpb25zIiwiY29tcG9zZWRTaWduYWwiLCJzdG9wVGltZW91dCIsImZpbmlzaGVkIiwicmVxdWVzdENvbnRlbnRMZW5ndGgiLCJfcmVxdWVzdCIsImNvbnRlbnRUeXBlSGVhZGVyIiwiaXNTdHJlYW1SZXNwb25zZSIsInJlc3BvbnNlQ29udGVudExlbmd0aCIsInJlc3BvbnNlRGF0YSIsImtub3duQWRhcHRlcnMiLCJyZW5kZXJSZWFzb24iLCJpc1Jlc29sdmVkSGFuZGxlIiwiYWRhcHRlciIsImFkYXB0ZXJzIiwibmFtZU9yQWRhcHRlciIsInJlamVjdGVkUmVhc29ucyIsInJlYXNvbnMiLCJ0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkIiwiZGlzcGF0Y2hSZXF1ZXN0IiwiVkVSU0lPTiIsInZhbGlkYXRvcnMiLCJkZXByZWNhdGVkV2FybmluZ3MiLCJ2ZXJzaW9uIiwiZm9ybWF0TWVzc2FnZSIsIm9wdCIsImRlc2MiLCJhc3NlcnRPcHRpb25zIiwic2NoZW1hIiwiYWxsb3dVbmtub3duIiwiQXhpb3MiLCJpbnN0YW5jZUNvbmZpZyIsImNvbmZpZ09yVXJsIiwiZHVtbXkiLCJwYXJhbXNTZXJpYWxpemVyIiwiY29udGV4dEhlYWRlcnMiLCJyZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbiIsInN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyIsImludGVyY2VwdG9yIiwicmVzcG9uc2VJbnRlcmNlcHRvckNoYWluIiwicHJvbWlzZSIsImNoYWluIiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwiZnVsbFBhdGgiLCJnZW5lcmF0ZUhUVFBNZXRob2QiLCJpc0Zvcm0iLCJDYW5jZWxUb2tlbiIsImV4ZWN1dG9yIiwicmVzb2x2ZVByb21pc2UiLCJvbmZ1bGZpbGxlZCIsIl9yZXNvbHZlIiwic3ByZWFkIiwiaXNBeGlvc0Vycm9yIiwicGF5bG9hZCIsIkh0dHBTdGF0dXNDb2RlIiwiY3JlYXRlSW5zdGFuY2UiLCJkZWZhdWx0Q29uZmlnIiwiYXhpb3MiLCJwcm9taXNlcyIsImFnZW50IiwiZ2V0QmFja2VuZENsaWVudCIsImNvbmZpZ3VyZUJhY2tlbmRDbGllbnQiLCJiYWNrZW5kVXJsIiwiYWNjZXNzVG9rZW4iLCJuZXdBZ2VudCIsIkxpc3RIZWFkZXIiLCJfYSIsIkxpc3RSb3ciLCJvbkNsaWNrUm93QWN0aW9uIiwidXBkYXRlRmlsdGVycyIsIl9GcmFnbWVudCIsInJvdyIsIl91dGlscyIsIkJhY2tzcGFjZSIsIl9jcmVhdGVTdmdJY29uIiwiX2pzeFJ1bnRpbWUiLCJMaXN0RmlsdGVyRmllbGQiLCJ2YWxpZGF0aW9uRXJyb3IiLCJmaWx0ZXJLZXkiLCJmaWx0ZXJWYWx1ZSIsImZpbHRlckhlbHBlciIsInNldEZpbHRlclZhbHVlIiwib25GaWx0ZXJDbGVhciIsIl9fYXNzaWduIiwiTGlzdEZpbHRlcnMiLCJzZXRGb3JtVmFsaWRhdGlvbkVycm9ycyIsInJlbW92ZUZpbHRlckVycm9yIiwic2V0RmlsdGVyVmFsdWVzIiwiaGFuZGxlRmlsdGVyQ2hhbmdlIiwiZmlsdGVyVmFsdWVzIiwiZm9ybVZhbGlkYXRpb25FcnJvcnMiLCJoYW5kbGVWYWxpZGF0ZSIsIkxpc3RDb250cm9scyIsImZpbHRlcnMiLCJvbkZpbHRlckNoYW5nZSIsIl9iIiwidXNlU3RhdGUiLCJjdXJyZW50RXJyb3JzIiwiX2MiLCJvbktleVByZXNzIiwiTGlzdFRhYmxlIiwibWVzc2FnZVRvdGFsQ291bnQiLCJvbkFkZE5ldyIsImhhbmRsZUNoYW5nZVBhZ2UiLCJfZXZlbnQiLCJuZXdQYWdlIiwiU2VhcmNoIiwiZmlsdGVyRnJvbVVybFNlYXJjaFBhcmFtcyIsInF1ZXJ5IiwiZmlsdGVyVmFsdWVGcm9tUm93VmFsdWUiLCJyb3dWYWx1ZSIsImZvcm1hdEtleVZhbHVlQXJyYXkiLCJmb3JtYXRPYmplY3QiLCJjcmVhdGVGaWx0ZXJRdWVyeSIsImZvcm1hdHRlckJ5S2V5IiwiX2QiLCJzdWJSZXN1bHQiLCJzdWJWYWx1ZSIsInN1YktleSIsIlZhbHVlRmlsdGVyTGluayIsImlzRW1wdHlWYWx1ZUhpZGRlbiIsIkRhdGVUaW1lUmFuZ2VGaWx0ZXJGaWVsZCIsImluaXRpYWxTdGFydERhdGVUaW1lIiwiaW5pdGlhbEVuZERhdGVUaW1lIiwic3RhcnREYXRlVGltZSIsInNldFN0YXJ0RGF0ZVRpbWUiLCJlbmREYXRlVGltZSIsInNldEVuZERhdGVUaW1lIiwidXNlRWZmZWN0IiwibnVtYmVyVmFsaWRhdG9yIiwibnVtYmVyUmFuZ2VWYWxpZGF0b3IiLCJkYXRldGltZVJhbmdlVmFsaWRhdG9yIiwiRXhwYW5kTGVzcyIsIkV4cGFuZE1vcmUiLCJmb3JtYXRTaW5nbGVNZXRhZGF0YSIsIk1ldGFkYXRhIiwibWV0YWRhdGEiLCJtZXRhZGF0YUxpc3QiLCJMaXN0TWV0YWRhdGEiLCJzZXRPcGVuIiwiZm9ybWF0TnVtYmVyUmFuZ2VGaWx0ZXIiLCJ0cmltbWVkIiwicmFuZ2VTZXBhcmF0b3JJbmRleCIsImtleVN0ciIsInBhcnRzIiwiZGF0ZXRpbWVQYXR0ZXJuIiwiZm9ybWF0RGF0ZXRpbWVSYW5nZUZpbHRlciIsImZvcm1hdE1pbiIsImZvcm1hdE1heCIsImlzU3RhcnRPbmx5IiwiaXNFbmRPbmx5IiwiZm9ybWF0RGF0ZVRpbWUiLCJmb3JtYXRNZXRhZGF0YSIsIm5uIiwicm4iLCJ0biIsImVuIiwib24iLCJ1biIsImFuIiwiY3JlYXRlTmV4dFN0YXRlMyIsIl9fZXh0ZW5kcyIsImV4dGVuZFN0YXRpY3MiLCJfXyIsIl9fZ2VuZXJhdG9yIiwidmVyYiIsIm9wIiwiX19zcHJlYWRBcnJheSIsIl9fZGVmUHJvcCIsIl9fZGVmUHJvcHMiLCJfX2dldE93blByb3BEZXNjcyIsIl9fZ2V0T3duUHJvcFN5bWJvbHMiLCJfX2hhc093blByb3AiLCJfX3Byb3BJc0VudW0iLCJfX2RlZk5vcm1hbFByb3AiLCJfX3NwcmVhZFZhbHVlcyIsIl9fc3ByZWFkUHJvcHMiLCJfX2FzeW5jIiwiX190aGlzIiwiX19hcmd1bWVudHMiLCJjcmVhdGVBY3Rpb24iLCJwcmVwYXJlQWN0aW9uIiwiYWN0aW9uQ3JlYXRvciIsInByZXBhcmVkIiwiX3N1cGVyIiwiTWlkZGxld2FyZUFycmF5IiwiRW5oYW5jZXJBcnJheSIsImZyZWV6ZURyYWZ0YWJsZSIsImlzRHJhZnRhYmxlIiwiY3JlYXRlTmV4dFN0YXRlIiwiZXhlY3V0ZVJlZHVjZXJCdWlsZGVyQ2FsbGJhY2siLCJidWlsZGVyQ2FsbGJhY2siLCJhY3Rpb25zTWFwIiwiYWN0aW9uTWF0Y2hlcnMiLCJkZWZhdWx0Q2FzZVJlZHVjZXIiLCJidWlsZGVyIiwidHlwZU9yQWN0aW9uQ3JlYXRvciIsImlzU3RhdGVGdW5jdGlvbiIsImNyZWF0ZVJlZHVjZXIiLCJpbml0aWFsU3RhdGUiLCJtYXBPckJ1aWxkZXJDYWxsYmFjayIsImZpbmFsQWN0aW9uTWF0Y2hlcnMiLCJmaW5hbERlZmF1bHRDYXNlUmVkdWNlciIsImdldEluaXRpYWxTdGF0ZSIsImZyb3plbkluaXRpYWxTdGF0ZV8xIiwiY2FzZVJlZHVjZXJzIiwicmVkdWNlcjIiLCJjciIsInByZXZpb3VzU3RhdGUiLCJjYXNlUmVkdWNlciIsImlzRHJhZnQyIiwiZHJhZnQiLCJpc0RyYWZ0YWJsZTIiLCJjcmVhdGVOZXh0U3RhdGUyIiwiZ2V0VHlwZTIiLCJhY3Rpb25LZXkiLCJjcmVhdGVTbGljZSIsInJlZHVjZXJzIiwicmVkdWNlck5hbWVzIiwic2xpY2VDYXNlUmVkdWNlcnNCeU5hbWUiLCJzbGljZUNhc2VSZWR1Y2Vyc0J5VHlwZSIsImFjdGlvbkNyZWF0b3JzIiwicmVkdWNlck5hbWUiLCJtYXliZVJlZHVjZXJXaXRoUHJlcGFyZSIsInByZXBhcmVDYWxsYmFjayIsImJ1aWxkUmVkdWNlciIsImV4dHJhUmVkdWNlcnMiLCJfZSIsIl9mIiwiZmluYWxDYXNlUmVkdWNlcnMiLCJhY3Rpb25NYXRjaGVyc18xIiwiX3JlZHVjZXIiLCJ1cmxBbHBoYWJldCIsIm5hbm9pZCIsImNvbW1vblByb3BlcnRpZXMiLCJSZWplY3RXaXRoVmFsdWUiLCJGdWxmaWxsV2l0aE1ldGEiLCJtaW5pU2VyaWFsaXplRXJyb3IiLCJzaW1wbGVFcnJvciIsImNvbW1vblByb3BlcnRpZXNfMSIsImNyZWF0ZUFzeW5jVGh1bmsiLCJjcmVhdGVBc3luY1RodW5rMiIsInR5cGVQcmVmaXgiLCJwYXlsb2FkQ3JlYXRvciIsInJlcXVlc3RJZCIsIkFDIiwiY2xhc3NfMSIsImRpc3BhdGNoIiwiZ2V0U3RhdGUiLCJleHRyYSIsImFib3J0UmVhc29uIiwiYWJvcnQiLCJwcm9taXNlMiIsImZpbmFsQWN0aW9uIiwiY29uZGl0aW9uUmVzdWx0IiwiYWJvcnRlZFByb21pc2UiLCJlcnJfMSIsInNraXBEaXNwYXRjaCIsInVud3JhcFJlc3VsdCIsImFsbSIsImVuYWJsZUVTNSIsImZldGNoTG9ncyIsImxvZ0ZpbHRlcnMiLCJfX2F3YWl0ZXIiLCJfYXJndW1lbnRzIiwiYWRvcHQiLCJmZXRjaExvZ3NBY3Rpb24iLCJ0aHVua0FwaSIsImxvZ1NsaWNlIiwiZGVmaW5pdGlvbiIsIkxvZ0xpc3RDb21wb25lbnQiLCJsb2dTdGF0dXMiLCJsb2dSb3dzIiwibG9nTWVzc2FnZVRvdGFsQ291bnQiLCJBcnJvd0JhY2siLCJMb2dNZXNzYWdlRmllbGQiLCJpc1dpZGUiLCJpc0Z1bGwiLCJMb2dNZXNzYWdlQ29tcG9uZW50IiwiYmFja0FjdGlvbiIsImRvd25sb2FkRGF0YUFjdGlvbiIsIkFycm93QmFja0ljb24iLCJmb3JtYXRTZWFyY2hQYXJhbXMiLCJNZXNzYWdlTG9nUm91dGUiLCJsb2dNZXNzYWdlUmVzcG9uc2UiLCJ0b3RhbEVsZW1lbnRzIiwiaGFuZGxlUGFnZUNoYW5nZSIsImhhbmRsZU9uQ2xpY2tSb3ciLCJfbmV3V2luZG93IiwibmV3UGFyYW1zIiwiaGFuZGxlRmlsdGVyQ2xlYXIiLCJsb2FkZXIiLCJhcGlVcmwiLCJTaW5nbGVNZXNzYWdlUm91dGUiLCJwYXJzZWRJZCIsIl9pZCIsIl90eXBlIiwiZmV0Y2hUcmlnZ2VyYWJsZXMiLCJjcmVhdGVUcmlnZ2VyUXVlcnkiLCJ0cmlnZ2VyVHJpZ2dlcmFibGUiLCJ0cmlnZ2VyTmFtZSIsInBhcmFtc1N0cmluZyIsImZldGNoVHJpZ2dlcmFibGVzQWN0aW9uIiwiX3BheWxvYWQiLCJ0cmlnZ2VyQWN0aW9uIiwidGh1bmtBcGlfMSIsInRyaWdnZXJQYXJhbXMiLCJmZXRjaEFjdGl2ZVRhc2tTdGF0dXNlcyIsImZldGNoVGFza1N0YXR1cyIsImZldGNoQWN0aXZlVGFza1N0YXR1c2VzQWN0aW9uIiwiZmV0Y2hUYXNrU3RhdHVzQWN0aW9uIiwiYWN0aXZlU3RhdHVzZXMiLCJ0cyIsIlRyaWdnZXJSZXNwb25zZU5vdGlmaWNhdGlvbiIsInRyaWdnZXJSZXNwb25zZSIsInNob3dOb3RpZmljYXRpb24iLCJFdmVudE5vdGUiLCJUYXNrU3RhdHVzQ2FyZCIsInRhc2tTdGF0dXMiLCJvcGVuTWVzc2FnZUNoYWluIiwic2V0RXhwYW5kZWQiLCJoYW5kbGVFeHBhbmRDbGljayIsIm1lc3NhZ2VDaGFpbk1ldGFkYXRhIiwiRXZlbnROb3RlSWNvbiIsIkV4cGFuZE1vcmVJY29uIiwiQWN0aXZlVGFza1N0YXR1c2VzIiwiYWN0aXZlVGFza1N0YXR1c2VzIiwiaXNOdW1lcmljIiwibnVtZXJpY1R5cGVzIiwidmFsaWRhdGVUcmlnZ2VyUGFyYW1ldGVyIiwicGFyYW1EZWZpbml0aW9uIiwibnVtZXJpY1ZhbHVlIiwibWluVmFsdWUiLCJtYXhWYWx1ZSIsIm1pbkxlbmd0aCIsIm1heExlbmd0aCIsImdldEluaXRpYWxFcnJvcnMiLCJwYXJhbSIsIlRyaWdnZXJGb3JtIiwidHJpZ2dlclZhbHVlcyIsInNldFRyaWdnZXJWYWx1ZXMiLCJyZW1vdmVUcmlnZ2VyRXJyb3IiLCJoYW5kbGVUcmlnZ2VyUGFyYW1DaGFuZ2UiLCJmaWVsZEVycm9yIiwiVHJpZ2dlcmFibGVzTGlzdCIsInRyaWdnZXJhYmxlcyIsIlRyaWdnZXJhYmxlc0NvbXBvbmVudCIsImhhbmRsZVRyaWdnZXJBY3Rpb24iLCJzZXRTaG93Tm90aWZpY2F0aW9uIiwiVHJpZ2dlcmFibGVzUm91dGUiLCJyZXZhbGlkYXRvciIsInNldFRyaWdnZXJSZXNwb25zZSIsInRyaWdnZXJhYmxlc1Jlc3BvbnNlIiwidGFza1N0YXR1c01hcCIsIm1lc3NhZ2VDaGFpbklkIiwiYWN0aXZlVGFza1N0YXR1c2VzUmVzcG9uc2UiLCJsb2dMaXN0TG9hZGVyIiwidHJpZ2dlcmFibGVzTG9hZGVyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztHQVNhLElBQUlBLEdBQUUsT0FBTyxJQUFJLGVBQWUsRUFBRUMsR0FBRSxPQUFPLElBQUksY0FBYyxFQUFFQyxHQUFFLE9BQU8sSUFBSSxnQkFBZ0IsRUFBRUMsR0FBRSxPQUFPLElBQUksbUJBQW1CLEVBQUVDLEdBQUUsT0FBTyxJQUFJLGdCQUFnQixFQUFFQyxHQUFFLE9BQU8sSUFBSSxnQkFBZ0IsRUFBRUMsR0FBRSxPQUFPLElBQUksZUFBZSxFQUFFQyxHQUFFLE9BQU8sSUFBSSxtQkFBbUIsRUFBRUMsR0FBRSxPQUFPLElBQUksZ0JBQWdCLEVBQUVDLEdBQUUsT0FBTyxJQUFJLFlBQVksRUFBRUMsR0FBRSxPQUFPLElBQUksWUFBWSxFQUFFQyxHQUFFLE9BQU8sU0FBUyxTQUFTQyxHQUFFQyxFQUFFLENBQUMsT0FBVUEsSUFBUCxNQUFxQixPQUFPQSxHQUFsQixTQUEyQixNQUFLQSxFQUFFRixJQUFHRSxFQUFFRixFQUFDLEdBQUdFLEVBQUUsWUFBWSxFQUFxQixPQUFPQSxHQUFwQixXQUFzQkEsRUFBRSxLQUFJLENBQzFlLElBQUlDLEdBQUUs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R0ksRUFBRyxDQUFDLENBQUMsTUFBTUEsRUFBRyxDQUFDLENBQUMsTUFBTUEsRUFBRyxDQUFDLENBQUMsTUFBTUEsRUFBRyxDQUFDLENBQUMsaUJBQWlCSCxFQUF3QixJQUFLLEdBQUdHLEVBQUcsQ0FBQyxDQUFDLE1BQU1BLEVBQUcsQ0FBQyxDQUFDLE1BQU1BLEVBQUcsRUFBRSxDQUFDLE1BQU1BLEVBQUcsRUFBRSxDQUFDLGlCQUFpQkYsRUFBMEIsR0FBRyxFQUFFLEtBQUssR0FBRyxDQUN4UixDQUdBLE1BQU1HLEdBQVUsQ0FBQyxPQUFRRixHQUFhLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxDQUFDLEVBQUdBLEdBQWEsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLENBQUMsRUFBR0EsR0FBYSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsQ0FBQyxFQUFHQSxHQUFhLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxDQUFDLEVBQUdBLEdBQWEsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLENBQUMsRUFBR0EsR0FBYSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksQ0FBQyxFQUFHQSxHQUFhLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxDQUFDLEVBQUdBLEdBQWEsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLENBQUMsRUFBR0EsR0FBYSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksQ0FBQyxFQUFHQSxHQUFhLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxDQUFDLEVBQUdBLEdBQWEsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLENBQUMsRUFBR0EsR0FBYSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksQ0FBQyxFQUFHQSxHQUFhLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxDQUFDLEVBQUdBLEdBQWEsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLENBQUMsRUFBR0EsR0FBYSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksQ0FBQyxFQUFHQSxHQUFhLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxDQUFDLEVBQUdBLEdBQWEsRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLENBQUMsRUFBR0EsR0FBYSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksQ0FBQyxFQUFHQSxHQUFhLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxDQUFDLEVBQUdBLEdBQWEsRUFBRyxHQUFJLEdBQUksR0FBSSxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLENBQUMsRUFBR0EsR0FBYSxFQUFHLEdBQUksR0FBSSxHQUFJLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksQ0FBQyxFQUFHQSxHQUFhLEVBQUcsR0FBSSxHQUFJLEdBQUksRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FB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LDYsNyw4LDksMTAsMTEsMTIsMTMsMTQsMTUsMTYsMTcsMTgsMTksMjAsMjEsMjIsMjMsMjQsMjUsMjYsMjcsMjgsMjksMzAsMzEsMzIsMzMsMzQsMzUsMzYsMzcsMzgsMzksNDAsNDEsNDIsNDMsNDQsNDUsNDYsNDcsNDgsNDksNTAsNTEsNTIsNTMsNTQsNTUsNTYsNTcsNTgsNTksNjAsNjEsNjIsNjMsNjQsNjUsNjYsNjcsNjgsNjksNzAsNzEsNzIsNzMsNzQsNzUsNzYsNzcsNzgsNzksODAsODEsODIsODMsODQsODUsODYsODcsODgsODksOTAsOTEsOTIsOTMsOTQsOTUsOTYsOTcsOTgsOTksMTAwLDEwMSwxMDIsMTAzLDEwNCwxMDUsMTA2LDEwNywxMDgsMTA5LDExMCwxMTEsMTEyLDExMywxMTQsMTE1LDExNiwxMTcsMTE4LDExOSwxMjAsMTIxLDEyMiwxMjMsMTI0LDEyNSwxMjYsMTI3LDEyOCwxMjksMTMwLDEzMSwxMzIsMTMzLDEzNCwxMzUsMTM2LDEzNywxMzgsMTM5LDE0MCwxNDEsMTQyLDE0MywxNDQsMTQ1LDE0NiwxNDcsMTQ4LDE0OSwxNTAsMTUxLDE1MiwxNTMsMTU0LDE1NSwxNTYsMTU3LDE1OCwxNTksMTYwLDE2MSwxNjIsMTYzLDE2NCwxNjUsMTY2LDE2NywxNjgsMTY5LDE3MCwxNzEsMTcyLDE3MywxNzQsMTc1LDE3NiwxNzcsMTc4LDE3OSwxODAsMTgxLDE4MiwxODMsMTg0LDE4NSwxODYsMTg3LDE4OCwxODksMTkwLDE5MSwxOTIsMTkzLDE5NCwxOTUsMTk2LDE5NywxOTgsMTk5LDIwMCwyMDEsMjAyLDIwMywyMDQsMjA1LDIwNiwyMDcsMjA4LDIwOSwyMTAsMjExLDIxMiwyMTMsMjE0LDIxNSwyMTYsMjE3LDIxOCwyMTksMjIwLDIyMSwyMjIsMjIzLDIyNCwyMjUsMjI2LDIyNywyMjgsMjI5LDIzMCwyMzEsMjMyLDIzMywyMzQsMjM1LDIzNiwyMzcsMjM4LDIzOSwyNDAsMjQxLDI0MiwyNDMsMjQ0LDI0NSwyNDYsMjQ3LDI0OCwyNDksMjUwLDI1MSwyNTIsMjUzLDI1NCwyNTUsMjU2LDI1NywyNTgsMjU5LDI2MCwyNjEsMjYyLDI2MywyNjQsMjY1LDI2NiwyNjcsMjY4LDI2OSwyNzAsMjcxLDI3MiwyNzMsMjc0LDI3NSwyNzYsMjc3LDI3OCwyNzksMjgwLDI4MSwyODIsMjgzLDI4NCwyODUsMjg2LDI4NywyODgsMjg5LDI5MCwyOTEsMjkyLDI5MywyOTQsMjk1LDI5NiwyOTcsMjk4LDI5OSwzMDAsMzAxLDMwMiwzMDMsMzA0LDMwNSwzMDYsMzA3LDMwOCwzMDksMzEwLDMxMSwzMTIsMzEzLDMxNCwzMTUsMzE2LDMxNywzMTgsMzE5LDMyMCwzMjEsMzIyLDMyMywzMjQsMzI1LDMyNiwzMjcsMzI4LDMyOSwzMzAsMzMxLDMzMiwzMzMsMzM0LDMzNSwzMzYsMzM3LDMzOCwzNDAsMzQxLDM0MiwzNDMsMzQ0LDM0NSwzNDYsMzQ3LDM0OCwzNDksMzUwLDM1MSwzNTIsMzUzLDM1NCwzNTUsMzU2LDM1NywzNTgsMzU5LDM2MCwzNjEsMzYyLDM2MywzNjQsMzY1LDM2NiwzNjcsMzY4LDM2OSwzNzAsMzcxLDM3MiwzNzMsMzc0LDM3NSwzNzYsMzc3LDM3OCwzNzksMzgwLDM4MSwzODIsMzgzLDM4NCwzODUsMzg2LDM4NywzODgsMzg5LDM5MCwzOTEsMzkyLDM5MywzOTQsMzk1LDM5NiwzOTcsMzk4LDM5OSw0MDAsNDAxLDQwMiw0MDMsNDA0LDQwNSw0MDYsNDA3LDQwOCw0MDksNDEwLDQxMSw0MTIsNDEzLDQxNCw0MTUsNDE2LDQyMCw0MjEsNDIyLDQyMyw0MjQsNDI1LDQyNiw0MjcsNDI4LDQyOSw0MzAsNDMxLDQzMiw0MzNdfQ==
